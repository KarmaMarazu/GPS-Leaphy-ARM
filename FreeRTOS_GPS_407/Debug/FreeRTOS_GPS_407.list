
FreeRTOS_GPS_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013778  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ee0  08013908  08013908  00014908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080147e8  080147e8  00016424  2**0
                  CONTENTS
  4 .ARM          00000008  080147e8  080147e8  000157e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080147f0  080147f0  00016424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080147f0  080147f0  000157f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080147f4  080147f4  000157f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000424  20000000  080147f8  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000112b8  20000428  08014c1c  00016428  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200116e0  08014c1c  000166e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016424  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e821  00000000  00000000  00016454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000765a  00000000  00000000  00044c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025b0  00000000  00000000  0004c2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d00  00000000  00000000  0004e880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c841  00000000  00000000  00050580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035620  00000000  00000000  0007cdc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e49fa  00000000  00000000  000b23e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00196ddb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b048  00000000  00000000  00196e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  001a1e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000428 	.word	0x20000428
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080138f0 	.word	0x080138f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000042c 	.word	0x2000042c
 80001cc:	080138f0 	.word	0x080138f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b9be 	b.w	8000f00 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f83c 	bl	8000c08 <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_d2lz>:
 8000b9c:	b538      	push	{r3, r4, r5, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	460d      	mov	r5, r1
 8000ba6:	f7ff ff99 	bl	8000adc <__aeabi_dcmplt>
 8000baa:	b928      	cbnz	r0, 8000bb8 <__aeabi_d2lz+0x1c>
 8000bac:	4620      	mov	r0, r4
 8000bae:	4629      	mov	r1, r5
 8000bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bb4:	f000 b80a 	b.w	8000bcc <__aeabi_d2ulz>
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000bbe:	f000 f805 	bl	8000bcc <__aeabi_d2ulz>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	bd38      	pop	{r3, r4, r5, pc}
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2ulz>:
 8000bcc:	b5d0      	push	{r4, r6, r7, lr}
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <__aeabi_d2ulz+0x34>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4606      	mov	r6, r0
 8000bd4:	460f      	mov	r7, r1
 8000bd6:	f7ff fd0f 	bl	80005f8 <__aeabi_dmul>
 8000bda:	f7ff ffa7 	bl	8000b2c <__aeabi_d2uiz>
 8000bde:	4604      	mov	r4, r0
 8000be0:	f7ff fc90 	bl	8000504 <__aeabi_ui2d>
 8000be4:	4b07      	ldr	r3, [pc, #28]	@ (8000c04 <__aeabi_d2ulz+0x38>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	f7ff fd06 	bl	80005f8 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	4639      	mov	r1, r7
 8000bf4:	f7ff fb48 	bl	8000288 <__aeabi_dsub>
 8000bf8:	f7ff ff98 	bl	8000b2c <__aeabi_d2uiz>
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000c00:	3df00000 	.word	0x3df00000
 8000c04:	41f00000 	.word	0x41f00000

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	468e      	mov	lr, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	4688      	mov	r8, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d962      	bls.n	8000ce4 <__udivmoddi4+0xdc>
 8000c1e:	fab2 f682 	clz	r6, r2
 8000c22:	b14e      	cbz	r6, 8000c38 <__udivmoddi4+0x30>
 8000c24:	f1c6 0320 	rsb	r3, r6, #32
 8000c28:	fa01 f806 	lsl.w	r8, r1, r6
 8000c2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c30:	40b7      	lsls	r7, r6
 8000c32:	ea43 0808 	orr.w	r8, r3, r8
 8000c36:	40b4      	lsls	r4, r6
 8000c38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c44:	0c23      	lsrs	r3, r4, #16
 8000c46:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c4e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c5c:	f080 80ea 	bcs.w	8000e34 <__udivmoddi4+0x22c>
 8000c60:	429a      	cmp	r2, r3
 8000c62:	f240 80e7 	bls.w	8000e34 <__udivmoddi4+0x22c>
 8000c66:	3902      	subs	r1, #2
 8000c68:	443b      	add	r3, r7
 8000c6a:	1a9a      	subs	r2, r3, r2
 8000c6c:	b2a3      	uxth	r3, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c7a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c7e:	459c      	cmp	ip, r3
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0x8e>
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c88:	f080 80d6 	bcs.w	8000e38 <__udivmoddi4+0x230>
 8000c8c:	459c      	cmp	ip, r3
 8000c8e:	f240 80d3 	bls.w	8000e38 <__udivmoddi4+0x230>
 8000c92:	443b      	add	r3, r7
 8000c94:	3802      	subs	r0, #2
 8000c96:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9a:	eba3 030c 	sub.w	r3, r3, ip
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11d      	cbz	r5, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40f3      	lsrs	r3, r6
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	e9c5 3200 	strd	r3, r2, [r5]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d905      	bls.n	8000cbe <__udivmoddi4+0xb6>
 8000cb2:	b10d      	cbz	r5, 8000cb8 <__udivmoddi4+0xb0>
 8000cb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4608      	mov	r0, r1
 8000cbc:	e7f5      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cbe:	fab3 f183 	clz	r1, r3
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	d146      	bne.n	8000d54 <__udivmoddi4+0x14c>
 8000cc6:	4573      	cmp	r3, lr
 8000cc8:	d302      	bcc.n	8000cd0 <__udivmoddi4+0xc8>
 8000cca:	4282      	cmp	r2, r0
 8000ccc:	f200 8105 	bhi.w	8000eda <__udivmoddi4+0x2d2>
 8000cd0:	1a84      	subs	r4, r0, r2
 8000cd2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	4690      	mov	r8, r2
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	d0e5      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000cde:	e9c5 4800 	strd	r4, r8, [r5]
 8000ce2:	e7e2      	b.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f000 8090 	beq.w	8000e0a <__udivmoddi4+0x202>
 8000cea:	fab2 f682 	clz	r6, r2
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	f040 80a4 	bne.w	8000e3c <__udivmoddi4+0x234>
 8000cf4:	1a8a      	subs	r2, r1, r2
 8000cf6:	0c03      	lsrs	r3, r0, #16
 8000cf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfc:	b280      	uxth	r0, r0
 8000cfe:	b2bc      	uxth	r4, r7
 8000d00:	2101      	movs	r1, #1
 8000d02:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d06:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x11e>
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x11c>
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	f200 80e0 	bhi.w	8000ee4 <__udivmoddi4+0x2dc>
 8000d24:	46c4      	mov	ip, r8
 8000d26:	1a9b      	subs	r3, r3, r2
 8000d28:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d2c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d30:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d34:	fb02 f404 	mul.w	r4, r2, r4
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x144>
 8000d3c:	18fb      	adds	r3, r7, r3
 8000d3e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x142>
 8000d44:	429c      	cmp	r4, r3
 8000d46:	f200 80ca 	bhi.w	8000ede <__udivmoddi4+0x2d6>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	1b1b      	subs	r3, r3, r4
 8000d4e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d52:	e7a5      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d54:	f1c1 0620 	rsb	r6, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d5e:	431f      	orrs	r7, r3
 8000d60:	fa0e f401 	lsl.w	r4, lr, r1
 8000d64:	fa20 f306 	lsr.w	r3, r0, r6
 8000d68:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d6c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d70:	4323      	orrs	r3, r4
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	fa1f fc87 	uxth.w	ip, r7
 8000d7a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d7e:	0c1c      	lsrs	r4, r3, #16
 8000d80:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d84:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d88:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x1a0>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d9a:	f080 809c 	bcs.w	8000ed6 <__udivmoddi4+0x2ce>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f240 8099 	bls.w	8000ed6 <__udivmoddi4+0x2ce>
 8000da4:	3802      	subs	r0, #2
 8000da6:	443c      	add	r4, r7
 8000da8:	eba4 040e 	sub.w	r4, r4, lr
 8000dac:	fa1f fe83 	uxth.w	lr, r3
 8000db0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db4:	fb09 4413 	mls	r4, r9, r3, r4
 8000db8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dbc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc0:	45a4      	cmp	ip, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x1ce>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dca:	f080 8082 	bcs.w	8000ed2 <__udivmoddi4+0x2ca>
 8000dce:	45a4      	cmp	ip, r4
 8000dd0:	d97f      	bls.n	8000ed2 <__udivmoddi4+0x2ca>
 8000dd2:	3b02      	subs	r3, #2
 8000dd4:	443c      	add	r4, r7
 8000dd6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dda:	eba4 040c 	sub.w	r4, r4, ip
 8000dde:	fba0 ec02 	umull	lr, ip, r0, r2
 8000de2:	4564      	cmp	r4, ip
 8000de4:	4673      	mov	r3, lr
 8000de6:	46e1      	mov	r9, ip
 8000de8:	d362      	bcc.n	8000eb0 <__udivmoddi4+0x2a8>
 8000dea:	d05f      	beq.n	8000eac <__udivmoddi4+0x2a4>
 8000dec:	b15d      	cbz	r5, 8000e06 <__udivmoddi4+0x1fe>
 8000dee:	ebb8 0203 	subs.w	r2, r8, r3
 8000df2:	eb64 0409 	sbc.w	r4, r4, r9
 8000df6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfa:	fa22 f301 	lsr.w	r3, r2, r1
 8000dfe:	431e      	orrs	r6, r3
 8000e00:	40cc      	lsrs	r4, r1
 8000e02:	e9c5 6400 	strd	r6, r4, [r5]
 8000e06:	2100      	movs	r1, #0
 8000e08:	e74f      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e0a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e0e:	0c01      	lsrs	r1, r0, #16
 8000e10:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e14:	b280      	uxth	r0, r0
 8000e16:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	4638      	mov	r0, r7
 8000e1e:	463c      	mov	r4, r7
 8000e20:	46b8      	mov	r8, r7
 8000e22:	46be      	mov	lr, r7
 8000e24:	2620      	movs	r6, #32
 8000e26:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e2a:	eba2 0208 	sub.w	r2, r2, r8
 8000e2e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e32:	e766      	b.n	8000d02 <__udivmoddi4+0xfa>
 8000e34:	4601      	mov	r1, r0
 8000e36:	e718      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e38:	4610      	mov	r0, r2
 8000e3a:	e72c      	b.n	8000c96 <__udivmoddi4+0x8e>
 8000e3c:	f1c6 0220 	rsb	r2, r6, #32
 8000e40:	fa2e f302 	lsr.w	r3, lr, r2
 8000e44:	40b7      	lsls	r7, r6
 8000e46:	40b1      	lsls	r1, r6
 8000e48:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e50:	430a      	orrs	r2, r1
 8000e52:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e56:	b2bc      	uxth	r4, r7
 8000e58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e62:	fb08 f904 	mul.w	r9, r8, r4
 8000e66:	40b0      	lsls	r0, r6
 8000e68:	4589      	cmp	r9, r1
 8000e6a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e6e:	b280      	uxth	r0, r0
 8000e70:	d93e      	bls.n	8000ef0 <__udivmoddi4+0x2e8>
 8000e72:	1879      	adds	r1, r7, r1
 8000e74:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e78:	d201      	bcs.n	8000e7e <__udivmoddi4+0x276>
 8000e7a:	4589      	cmp	r9, r1
 8000e7c:	d81f      	bhi.n	8000ebe <__udivmoddi4+0x2b6>
 8000e7e:	eba1 0109 	sub.w	r1, r1, r9
 8000e82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e86:	fb09 f804 	mul.w	r8, r9, r4
 8000e8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e8e:	b292      	uxth	r2, r2
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	4542      	cmp	r2, r8
 8000e96:	d229      	bcs.n	8000eec <__udivmoddi4+0x2e4>
 8000e98:	18ba      	adds	r2, r7, r2
 8000e9a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e9e:	d2c4      	bcs.n	8000e2a <__udivmoddi4+0x222>
 8000ea0:	4542      	cmp	r2, r8
 8000ea2:	d2c2      	bcs.n	8000e2a <__udivmoddi4+0x222>
 8000ea4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ea8:	443a      	add	r2, r7
 8000eaa:	e7be      	b.n	8000e2a <__udivmoddi4+0x222>
 8000eac:	45f0      	cmp	r8, lr
 8000eae:	d29d      	bcs.n	8000dec <__udivmoddi4+0x1e4>
 8000eb0:	ebbe 0302 	subs.w	r3, lr, r2
 8000eb4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000eb8:	3801      	subs	r0, #1
 8000eba:	46e1      	mov	r9, ip
 8000ebc:	e796      	b.n	8000dec <__udivmoddi4+0x1e4>
 8000ebe:	eba7 0909 	sub.w	r9, r7, r9
 8000ec2:	4449      	add	r1, r9
 8000ec4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ec8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ecc:	fb09 f804 	mul.w	r8, r9, r4
 8000ed0:	e7db      	b.n	8000e8a <__udivmoddi4+0x282>
 8000ed2:	4673      	mov	r3, lr
 8000ed4:	e77f      	b.n	8000dd6 <__udivmoddi4+0x1ce>
 8000ed6:	4650      	mov	r0, sl
 8000ed8:	e766      	b.n	8000da8 <__udivmoddi4+0x1a0>
 8000eda:	4608      	mov	r0, r1
 8000edc:	e6fd      	b.n	8000cda <__udivmoddi4+0xd2>
 8000ede:	443b      	add	r3, r7
 8000ee0:	3a02      	subs	r2, #2
 8000ee2:	e733      	b.n	8000d4c <__udivmoddi4+0x144>
 8000ee4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee8:	443b      	add	r3, r7
 8000eea:	e71c      	b.n	8000d26 <__udivmoddi4+0x11e>
 8000eec:	4649      	mov	r1, r9
 8000eee:	e79c      	b.n	8000e2a <__udivmoddi4+0x222>
 8000ef0:	eba1 0109 	sub.w	r1, r1, r9
 8000ef4:	46c4      	mov	ip, r8
 8000ef6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efa:	fb09 f804 	mul.w	r8, r9, r4
 8000efe:	e7c4      	b.n	8000e8a <__udivmoddi4+0x282>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <toggle_led>:
* @brief Zet een kleurenledje aan en uit.
* @param color De kleur.
* @return void.
*/
void toggle_led (uint32_t color)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, color);   // turns led on or off
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	4619      	mov	r1, r3
 8000f12:	4808      	ldr	r0, [pc, #32]	@ (8000f34 <toggle_led+0x30>)
 8000f14:	f002 fffb 	bl	8003f0e <HAL_GPIO_TogglePin>
	osDelay(20);
 8000f18:	2014      	movs	r0, #20
 8000f1a:	f00a ff59 	bl	800bdd0 <osDelay>
	HAL_GPIO_TogglePin(GPIOD, color);   // turns led on or off
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	4619      	mov	r1, r3
 8000f24:	4803      	ldr	r0, [pc, #12]	@ (8000f34 <toggle_led+0x30>)
 8000f26:	f002 fff2 	bl	8003f0e <HAL_GPIO_TogglePin>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40020c00 	.word	0x40020c00

08000f38 <ARM_keys_IRQ>:
* @brief Deze task handelt de ARM-toets af, die ontvangen is van de ISR-handler (zie: stm32f4xx_it.c).
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void.
*/
void ARM_keys_IRQ (void *argument)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	6078      	str	r0, [r7, #4]
	unsigned int key;
	osThreadId_t hTask;

	UART_puts("\r\n"); UART_puts((char *)__func__); UART_puts(" started");
 8000f40:	4813      	ldr	r0, [pc, #76]	@ (8000f90 <ARM_keys_IRQ+0x58>)
 8000f42:	f001 fcad 	bl	80028a0 <UART_puts>
 8000f46:	4813      	ldr	r0, [pc, #76]	@ (8000f94 <ARM_keys_IRQ+0x5c>)
 8000f48:	f001 fcaa 	bl	80028a0 <UART_puts>
 8000f4c:	4812      	ldr	r0, [pc, #72]	@ (8000f98 <ARM_keys_IRQ+0x60>)
 8000f4e:	f001 fca7 	bl	80028a0 <UART_puts>

	if (!(hTask = xTaskGetHandle("ARM_keys_task")))
 8000f52:	4812      	ldr	r0, [pc, #72]	@ (8000f9c <ARM_keys_IRQ+0x64>)
 8000f54:	f00d f84e 	bl	800dff4 <xTaskGetHandle>
 8000f58:	60f8      	str	r0, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <ARM_keys_IRQ+0x2e>
		error_HaltOS("Err:ARM_hndle");
 8000f60:	480f      	ldr	r0, [pc, #60]	@ (8000fa0 <ARM_keys_IRQ+0x68>)
 8000f62:	f000 fb17 	bl	8001594 <error_HaltOS>

    while (1)
	{
		// wait for ISR (EXTI0_IRQHandler()) to signal that a key is pressed
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 8000f66:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <ARM_keys_IRQ+0x6c>)
 8000f68:	6818      	ldr	r0, [r3, #0]
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2300      	movs	r3, #0
 8000f72:	2201      	movs	r2, #1
 8000f74:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000f78:	f00b f8c4 	bl	800c104 <xEventGroupWaitBits>
 8000f7c:	60b8      	str	r0, [r7, #8]

		xTaskNotify(hTask, key, eSetValueWithOverwrite); // notify task2 with value
 8000f7e:	2300      	movs	r3, #0
 8000f80:	2203      	movs	r2, #3
 8000f82:	68b9      	ldr	r1, [r7, #8]
 8000f84:	68f8      	ldr	r0, [r7, #12]
 8000f86:	f00d ff65 	bl	800ee54 <xTaskGenericNotify>
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 8000f8a:	bf00      	nop
 8000f8c:	e7eb      	b.n	8000f66 <ARM_keys_IRQ+0x2e>
 8000f8e:	bf00      	nop
 8000f90:	08013908 	.word	0x08013908
 8000f94:	08014324 	.word	0x08014324
 8000f98:	0801390c 	.word	0x0801390c
 8000f9c:	08013918 	.word	0x08013918
 8000fa0:	08013928 	.word	0x08013928
 8000fa4:	20000458 	.word	0x20000458

08000fa8 <ARM_keys_task>:
* een schwung...
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen.
* @return void.
*/
void ARM_keys_task (void *argument)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	int			 i, led;

	while(TRUE)
	{
		// WAITING FOR users key
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 8000fb0:	f107 020c 	add.w	r2, r7, #12
 8000fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f00d fee9 	bl	800ed94 <xTaskNotifyWait>
        		 	 	 0xffffffff, 		// ULONG_MAX, reset the notification value to 0 on exit.
    	                 &key, 				// Notified value.
    	                 portMAX_DELAY);  	// Block indefinitely.

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // krijg toegang (mutex) tot leds
 8000fc2:	4b26      	ldr	r3, [pc, #152]	@ (800105c <ARM_keys_task+0xb4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f04f 31ff 	mov.w	r1, #4294967295
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f00b feea 	bl	800cda4 <xQueueSemaphoreTake>

    	LED_put((unsigned char)key); // set 8 leds-byte to key-value
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 fc17 	bl	8002808 <LED_put>
	    BUZZER_put (500);
 8000fda:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fde:	f001 f933 	bl	8002248 <BUZZER_put>
		osDelay(500);
 8000fe2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fe6:	f00a fef3 	bl	800bdd0 <osDelay>

		if (Uart_debug_out & ARMKEYS_DEBUG_OUT)
 8000fea:	4b1d      	ldr	r3, [pc, #116]	@ (8001060 <ARM_keys_task+0xb8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d006      	beq.n	8001004 <ARM_keys_task+0x5c>
		{
			UART_puts("\r\n\tARM_key pressed to leds: "); UART_putint(key);
 8000ff6:	481b      	ldr	r0, [pc, #108]	@ (8001064 <ARM_keys_task+0xbc>)
 8000ff8:	f001 fc52 	bl	80028a0 <UART_puts>
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 fc6a 	bl	80028d8 <UART_putint>
		}

	    xSemaphoreGive(hLED_Sem); // geef toegang (mutex) vrij
 8001004:	4b15      	ldr	r3, [pc, #84]	@ (800105c <ARM_keys_task+0xb4>)
 8001006:	6818      	ldr	r0, [r3, #0]
 8001008:	2300      	movs	r3, #0
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	f00b fc47 	bl	800c8a0 <xQueueGenericSend>

	    // tot slot, laat de gekleurde ledjes meedoen
	    // maar niet blauw, want die is ingezet voor de timer
	    // kijk naar de manier waarop de if-elses er uitzien
		for (i=0; i<3; i++)
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	e015      	b.n	8001044 <ARM_keys_task+0x9c>
		{
			led = (i==0 ? LEDRED : (i==1 ? LEDORANGE : LEDGREEN));
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d008      	beq.n	8001030 <ARM_keys_task+0x88>
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d102      	bne.n	800102a <ARM_keys_task+0x82>
 8001024:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001028:	e004      	b.n	8001034 <ARM_keys_task+0x8c>
 800102a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800102e:	e001      	b.n	8001034 <ARM_keys_task+0x8c>
 8001030:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001034:	613b      	str	r3, [r7, #16]
			toggle_led(led);
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff63 	bl	8000f04 <toggle_led>
		for (i=0; i<3; i++)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3301      	adds	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	2b02      	cmp	r3, #2
 8001048:	dde6      	ble.n	8001018 <ARM_keys_task+0x70>
	  	}
     	taskYIELD(); // done, force context switch
 800104a:	4b07      	ldr	r3, [pc, #28]	@ (8001068 <ARM_keys_task+0xc0>)
 800104c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	f3bf 8f4f 	dsb	sy
 8001056:	f3bf 8f6f 	isb	sy
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 800105a:	e7a9      	b.n	8000fb0 <ARM_keys_task+0x8>
 800105c:	20000450 	.word	0x20000450
 8001060:	20000444 	.word	0x20000444
 8001064:	08013938 	.word	0x08013938
 8001068:	e000ed04 	.word	0xe000ed04

0800106c <UART_keys_IRQ>:
* 2. notifies/stuurt command-string naar andere task
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_keys_IRQ (void *argument)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	@ 0x30
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    char  		    buffer[QSIZE_UART];
    char		    buffer_copy[QSIZE_UART];
	int 			pos = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int             finish = FALSE;
 8001078:	2300      	movs	r3, #0
 800107a:	62bb      	str	r3, [r7, #40]	@ 0x28
	osThreadId_t    hTask;

	UART_puts((char *)__func__); UART_puts("started, enter key on terminal...\r\n");
 800107c:	4847      	ldr	r0, [pc, #284]	@ (800119c <UART_keys_IRQ+0x130>)
 800107e:	f001 fc0f 	bl	80028a0 <UART_puts>
 8001082:	4847      	ldr	r0, [pc, #284]	@ (80011a0 <UART_keys_IRQ+0x134>)
 8001084:	f001 fc0c 	bl	80028a0 <UART_puts>

	if (!(hTask = xTaskGetHandle("UART_menu")))
 8001088:	4846      	ldr	r0, [pc, #280]	@ (80011a4 <UART_keys_IRQ+0x138>)
 800108a:	f00c ffb3 	bl	800dff4 <xTaskGetHandle>
 800108e:	6278      	str	r0, [r7, #36]	@ 0x24
 8001090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001092:	2b00      	cmp	r3, #0
 8001094:	d102      	bne.n	800109c <UART_keys_IRQ+0x30>
		error_HaltOS("Err:UART_hndl 0");
 8001096:	4844      	ldr	r0, [pc, #272]	@ (80011a8 <UART_keys_IRQ+0x13c>)
 8001098:	f000 fa7c 	bl	8001594 <error_HaltOS>
    {
		// laat de VIC de q vullen, die per char in onze eigen string geplaatst wordt
		// tot LFEED gedrukt is of qsize-1 bereikt is.
		// nb: argument 2 is het adres waar ik het q-char in zet
		// nb: q-receive haalt gelijk de buffer leeg (q-peek niet).
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 800109c:	4b43      	ldr	r3, [pc, #268]	@ (80011ac <UART_keys_IRQ+0x140>)
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	f107 0218 	add.w	r2, r7, #24
 80010a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010a6:	4413      	add	r3, r2
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	4619      	mov	r1, r3
 80010ae:	f00b fd97 	bl	800cbe0 <xQueueReceive>

		// negeer dit char bij geen data: -1, 255, of CR of spatie
		if (buffer[pos] == 0 || buffer[pos] == -1 || buffer[pos] == 255 || buffer[pos] == CRETURN || buffer[pos] == 32)
 80010b2:	f107 0218 	add.w	r2, r7, #24
 80010b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010b8:	4413      	add	r3, r2
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d06b      	beq.n	8001198 <UART_keys_IRQ+0x12c>
 80010c0:	f107 0218 	add.w	r2, r7, #24
 80010c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010c6:	4413      	add	r3, r2
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2bff      	cmp	r3, #255	@ 0xff
 80010cc:	d064      	beq.n	8001198 <UART_keys_IRQ+0x12c>
 80010ce:	f107 0218 	add.w	r2, r7, #24
 80010d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010d4:	4413      	add	r3, r2
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b0d      	cmp	r3, #13
 80010da:	d05d      	beq.n	8001198 <UART_keys_IRQ+0x12c>
 80010dc:	f107 0218 	add.w	r2, r7, #24
 80010e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010e2:	4413      	add	r3, r2
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b20      	cmp	r3, #32
 80010e8:	d056      	beq.n	8001198 <UART_keys_IRQ+0x12c>
			continue;

		//UART_putchar(buffer[pos]);  // echo

		// check of de string gesloten was of gesloten moet worden...
		if (buffer[pos] == LFEED)     // close als LF gedrukt
 80010ea:	f107 0218 	add.w	r2, r7, #24
 80010ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010f0:	4413      	add	r3, r2
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b0a      	cmp	r3, #10
 80010f6:	d108      	bne.n	800110a <UART_keys_IRQ+0x9e>
		{
			buffer[pos] = '\0';
 80010f8:	f107 0218 	add.w	r2, r7, #24
 80010fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010fe:	4413      	add	r3, r2
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 8001104:	2301      	movs	r3, #1
 8001106:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001108:	e00d      	b.n	8001126 <UART_keys_IRQ+0xba>

		}
		else if (pos == QSIZE_UART - 2) // close if end of buf
 800110a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800110c:	2b08      	cmp	r3, #8
 800110e:	d10a      	bne.n	8001126 <UART_keys_IRQ+0xba>
		{
			buffer[++pos] = '\0';       // first, skip to last position, then close string
 8001110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001112:	3301      	adds	r3, #1
 8001114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001116:	f107 0218 	add.w	r2, r7, #24
 800111a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800111c:	4413      	add	r3, r2
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 8001122:	2301      	movs	r3, #1
 8001124:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		if (finish)
 8001126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001128:	2b00      	cmp	r3, #0
 800112a:	d031      	beq.n	8001190 <UART_keys_IRQ+0x124>
		{
			// de volgende taak krijgt een copy van de string
			// mijn eigen buffer kan zo gelijk weer gevuld worden door de ISR
			strcpy(buffer_copy, buffer);
 800112c:	f107 0218 	add.w	r2, r7, #24
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	4611      	mov	r1, r2
 8001136:	4618      	mov	r0, r3
 8001138:	f010 fca5 	bl	8011a86 <strcpy>
			memset(buffer, 0, QSIZE_UART); // clear original buffer
 800113c:	f107 0318 	add.w	r3, r7, #24
 8001140:	220a      	movs	r2, #10
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f010 fb3a 	bl	80117be <memset>
			finish = FALSE;
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	@ 0x28
			pos = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	62fb      	str	r3, [r7, #44]	@ 0x2c

			xTaskNotify(hTask, buffer_copy, eSetValueWithOverwrite); // notify task2 with copy
 8001152:	f107 010c 	add.w	r1, r7, #12
 8001156:	2300      	movs	r3, #0
 8001158:	2203      	movs	r2, #3
 800115a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800115c:	f00d fe7a 	bl	800ee54 <xTaskGenericNotify>

			if (Uart_debug_out & UART_DEBUG_OUT)
 8001160:	4b13      	ldr	r3, [pc, #76]	@ (80011b0 <UART_keys_IRQ+0x144>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	2b00      	cmp	r3, #0
 800116a:	d097      	beq.n	800109c <UART_keys_IRQ+0x30>
			{
				UART_puts("\n\r"); UART_puts((char *)__func__);
 800116c:	4811      	ldr	r0, [pc, #68]	@ (80011b4 <UART_keys_IRQ+0x148>)
 800116e:	f001 fb97 	bl	80028a0 <UART_puts>
 8001172:	480a      	ldr	r0, [pc, #40]	@ (800119c <UART_keys_IRQ+0x130>)
 8001174:	f001 fb94 	bl	80028a0 <UART_puts>
				UART_puts(": UART_menu notified with "); UART_puts(buffer_copy);
 8001178:	480f      	ldr	r0, [pc, #60]	@ (80011b8 <UART_keys_IRQ+0x14c>)
 800117a:	f001 fb91 	bl	80028a0 <UART_puts>
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	4618      	mov	r0, r3
 8001184:	f001 fb8c 	bl	80028a0 <UART_puts>
				UART_puts("\r\n");
 8001188:	480c      	ldr	r0, [pc, #48]	@ (80011bc <UART_keys_IRQ+0x150>)
 800118a:	f001 fb89 	bl	80028a0 <UART_puts>
 800118e:	e785      	b.n	800109c <UART_keys_IRQ+0x30>
			}
		}
		else
			pos++;
 8001190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001192:	3301      	adds	r3, #1
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001196:	e781      	b.n	800109c <UART_keys_IRQ+0x30>
			continue;
 8001198:	bf00      	nop
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 800119a:	e77f      	b.n	800109c <UART_keys_IRQ+0x30>
 800119c:	08014334 	.word	0x08014334
 80011a0:	080139a4 	.word	0x080139a4
 80011a4:	08013958 	.word	0x08013958
 80011a8:	080139c8 	.word	0x080139c8
 80011ac:	20000448 	.word	0x20000448
 80011b0:	20000444 	.word	0x20000444
 80011b4:	08013988 	.word	0x08013988
 80011b8:	080139d8 	.word	0x080139d8
 80011bc:	080139a0 	.word	0x080139a0

080011c0 <UART_menu>:
* geinterpreteerd.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_menu (void *argument)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	char   *s;
	char   *tok = ",";  // token if command is more than 1 char
 80011c8:	4bab      	ldr	r3, [pc, #684]	@ (8001478 <UART_menu+0x2b8>)
 80011ca:	61fb      	str	r3, [r7, #28]
	int     val1, val2;

	UART_puts((char *)__func__); UART_puts("started\n\r");
 80011cc:	48ab      	ldr	r0, [pc, #684]	@ (800147c <UART_menu+0x2bc>)
 80011ce:	f001 fb67 	bl	80028a0 <UART_puts>
 80011d2:	48ab      	ldr	r0, [pc, #684]	@ (8001480 <UART_menu+0x2c0>)
 80011d4:	f001 fb64 	bl	80028a0 <UART_puts>

	while (TRUE)
	{
		// wacht op de string; let op de cast van (unsigned long) naar (char *)!
		// want de waarde die ik terug krijg is een pointer.
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295
 80011dc:	2001      	movs	r0, #1
 80011de:	f00d fd8d 	bl	800ecfc <ulTaskNotifyTake>
 80011e2:	4603      	mov	r3, r0
 80011e4:	61bb      	str	r3, [r7, #24]

		// check het eerste (en vaak enige) karakter van de inkomende command-string
		// toupper() zorgt ervoor dat het eerste karakter hoofdletter wordt, zo hoef ik niet op kleine
		// letters te checken.
		switch (toupper((unsigned char)s[0]))
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	75fb      	strb	r3, [r7, #23]
 80011ec:	7dfb      	ldrb	r3, [r7, #23]
 80011ee:	3301      	adds	r3, #1
 80011f0:	4aa4      	ldr	r2, [pc, #656]	@ (8001484 <UART_menu+0x2c4>)
 80011f2:	4413      	add	r3, r2
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d102      	bne.n	8001204 <UART_menu+0x44>
 80011fe:	7dfb      	ldrb	r3, [r7, #23]
 8001200:	3b20      	subs	r3, #32
 8001202:	e000      	b.n	8001206 <UART_menu+0x46>
 8001204:	7dfb      	ldrb	r3, [r7, #23]
 8001206:	3b30      	subs	r3, #48	@ 0x30
 8001208:	2b24      	cmp	r3, #36	@ 0x24
 800120a:	d84d      	bhi.n	80012a8 <UART_menu+0xe8>
 800120c:	a201      	add	r2, pc, #4	@ (adr r2, 8001214 <UART_menu+0x54>)
 800120e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001212:	bf00      	nop
 8001214:	080012b7 	.word	0x080012b7
 8001218:	080012f3 	.word	0x080012f3
 800121c:	0800131f 	.word	0x0800131f
 8001220:	0800134b 	.word	0x0800134b
 8001224:	08001377 	.word	0x08001377
 8001228:	080013a3 	.word	0x080013a3
 800122c:	080012a9 	.word	0x080012a9
 8001230:	080012a9 	.word	0x080012a9
 8001234:	080012a9 	.word	0x080012a9
 8001238:	080012a9 	.word	0x080012a9
 800123c:	080012a9 	.word	0x080012a9
 8001240:	080012a9 	.word	0x080012a9
 8001244:	080012a9 	.word	0x080012a9
 8001248:	080012a9 	.word	0x080012a9
 800124c:	080012a9 	.word	0x080012a9
 8001250:	080012a9 	.word	0x080012a9
 8001254:	080012a9 	.word	0x080012a9
 8001258:	080012a9 	.word	0x080012a9
 800125c:	080012a9 	.word	0x080012a9
 8001260:	080012a9 	.word	0x080012a9
 8001264:	080013cf 	.word	0x080013cf
 8001268:	080012a9 	.word	0x080012a9
 800126c:	080012a9 	.word	0x080012a9
 8001270:	080012a9 	.word	0x080012a9
 8001274:	080012a9 	.word	0x080012a9
 8001278:	080012a9 	.word	0x080012a9
 800127c:	080012a9 	.word	0x080012a9
 8001280:	080012a9 	.word	0x080012a9
 8001284:	080012a9 	.word	0x080012a9
 8001288:	080013f3 	.word	0x080013f3
 800128c:	080012a9 	.word	0x080012a9
 8001290:	080012a9 	.word	0x080012a9
 8001294:	080013ff 	.word	0x080013ff
 8001298:	080012a9 	.word	0x080012a9
 800129c:	080012a9 	.word	0x080012a9
 80012a0:	08001443 	.word	0x08001443
 80012a4:	080013f9 	.word	0x080013f9
		{
		default:  UART_puts(s);
 80012a8:	69b8      	ldr	r0, [r7, #24]
 80012aa:	f001 faf9 	bl	80028a0 <UART_puts>
				  UART_puts(" (unkown command)\r\n");
 80012ae:	4876      	ldr	r0, [pc, #472]	@ (8001488 <UART_menu+0x2c8>)
 80012b0:	f001 faf6 	bl	80028a0 <UART_puts>
				  break;
 80012b4:	e0df      	b.n	8001476 <UART_menu+0x2b6>

		/// <b>0 - 5</b>: Togglet verschillende debug-outputs naar UART
		case '0': Uart_debug_out = (Uart_debug_out ? DEBUG_OUT_NONE : DEBUG_OUT_ALL);
 80012b6:	4b75      	ldr	r3, [pc, #468]	@ (800148c <UART_menu+0x2cc>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <UART_menu+0x102>
 80012be:	2300      	movs	r3, #0
 80012c0:	e000      	b.n	80012c4 <UART_menu+0x104>
 80012c2:	23ff      	movs	r3, #255	@ 0xff
 80012c4:	4a71      	ldr	r2, [pc, #452]	@ (800148c <UART_menu+0x2cc>)
 80012c6:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nall debug output = ");
 80012c8:	4871      	ldr	r0, [pc, #452]	@ (8001490 <UART_menu+0x2d0>)
 80012ca:	f001 fae9 	bl	80028a0 <UART_puts>
		  	  	  UART_puts(Uart_debug_out == DEBUG_OUT_ALL ? "ON\r\n" : "OFF\r\n");
 80012ce:	4b6f      	ldr	r3, [pc, #444]	@ (800148c <UART_menu+0x2cc>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2bff      	cmp	r3, #255	@ 0xff
 80012d4:	d101      	bne.n	80012da <UART_menu+0x11a>
 80012d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001494 <UART_menu+0x2d4>)
 80012d8:	e000      	b.n	80012dc <UART_menu+0x11c>
 80012da:	4b6f      	ldr	r3, [pc, #444]	@ (8001498 <UART_menu+0x2d8>)
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 fadf 	bl	80028a0 <UART_puts>

		  	  	  // als alle output uitgezet wordt, is het handig om gelijk het menu te laten zien.
		  	  	  if (Uart_debug_out == DEBUG_OUT_NONE)
 80012e2:	4b6a      	ldr	r3, [pc, #424]	@ (800148c <UART_menu+0x2cc>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f040 80c0 	bne.w	800146c <UART_menu+0x2ac>
		  	  		  DisplayMenu();
 80012ec:	f000 f944 	bl	8001578 <DisplayMenu>
				  break;
 80012f0:	e0bc      	b.n	800146c <UART_menu+0x2ac>

		case '1': Uart_debug_out ^= LEDS_DEBUG_OUT; // toggle output on/off
 80012f2:	4b66      	ldr	r3, [pc, #408]	@ (800148c <UART_menu+0x2cc>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f083 0301 	eor.w	r3, r3, #1
 80012fa:	4a64      	ldr	r2, [pc, #400]	@ (800148c <UART_menu+0x2cc>)
 80012fc:	6013      	str	r3, [r2, #0]
				  UART_puts("\r\nleds output = ");
 80012fe:	4867      	ldr	r0, [pc, #412]	@ (800149c <UART_menu+0x2dc>)
 8001300:	f001 face 	bl	80028a0 <UART_puts>
				  UART_puts(Uart_debug_out & LEDS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001304:	4b61      	ldr	r3, [pc, #388]	@ (800148c <UART_menu+0x2cc>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <UART_menu+0x154>
 8001310:	4b60      	ldr	r3, [pc, #384]	@ (8001494 <UART_menu+0x2d4>)
 8001312:	e000      	b.n	8001316 <UART_menu+0x156>
 8001314:	4b60      	ldr	r3, [pc, #384]	@ (8001498 <UART_menu+0x2d8>)
 8001316:	4618      	mov	r0, r3
 8001318:	f001 fac2 	bl	80028a0 <UART_puts>
				  break;
 800131c:	e0ab      	b.n	8001476 <UART_menu+0x2b6>

		case '2': Uart_debug_out ^= ARMKEYS_DEBUG_OUT; // toggle output on/off
 800131e:	4b5b      	ldr	r3, [pc, #364]	@ (800148c <UART_menu+0x2cc>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f083 0302 	eor.w	r3, r3, #2
 8001326:	4a59      	ldr	r2, [pc, #356]	@ (800148c <UART_menu+0x2cc>)
 8001328:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\narmkeys output = ");
 800132a:	485d      	ldr	r0, [pc, #372]	@ (80014a0 <UART_menu+0x2e0>)
 800132c:	f001 fab8 	bl	80028a0 <UART_puts>
		  	      UART_puts(Uart_debug_out & ARMKEYS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001330:	4b56      	ldr	r3, [pc, #344]	@ (800148c <UART_menu+0x2cc>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <UART_menu+0x180>
 800133c:	4b55      	ldr	r3, [pc, #340]	@ (8001494 <UART_menu+0x2d4>)
 800133e:	e000      	b.n	8001342 <UART_menu+0x182>
 8001340:	4b55      	ldr	r3, [pc, #340]	@ (8001498 <UART_menu+0x2d8>)
 8001342:	4618      	mov	r0, r3
 8001344:	f001 faac 	bl	80028a0 <UART_puts>
				  break;
 8001348:	e095      	b.n	8001476 <UART_menu+0x2b6>

		case '3': Uart_debug_out ^= UART_DEBUG_OUT; // toggle output on/off
 800134a:	4b50      	ldr	r3, [pc, #320]	@ (800148c <UART_menu+0x2cc>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f083 0304 	eor.w	r3, r3, #4
 8001352:	4a4e      	ldr	r2, [pc, #312]	@ (800148c <UART_menu+0x2cc>)
 8001354:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\nuart output = ");
 8001356:	4853      	ldr	r0, [pc, #332]	@ (80014a4 <UART_menu+0x2e4>)
 8001358:	f001 faa2 	bl	80028a0 <UART_puts>
		  	      UART_puts(Uart_debug_out & UART_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 800135c:	4b4b      	ldr	r3, [pc, #300]	@ (800148c <UART_menu+0x2cc>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <UART_menu+0x1ac>
 8001368:	4b4a      	ldr	r3, [pc, #296]	@ (8001494 <UART_menu+0x2d4>)
 800136a:	e000      	b.n	800136e <UART_menu+0x1ae>
 800136c:	4b4a      	ldr	r3, [pc, #296]	@ (8001498 <UART_menu+0x2d8>)
 800136e:	4618      	mov	r0, r3
 8001370:	f001 fa96 	bl	80028a0 <UART_puts>
				  break;
 8001374:	e07f      	b.n	8001476 <UART_menu+0x2b6>

		case '4': Uart_debug_out ^= STUDENT_DEBUG_OUT; // toggle output on/off
 8001376:	4b45      	ldr	r3, [pc, #276]	@ (800148c <UART_menu+0x2cc>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f083 0308 	eor.w	r3, r3, #8
 800137e:	4a43      	ldr	r2, [pc, #268]	@ (800148c <UART_menu+0x2cc>)
 8001380:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nstudent output = ");
 8001382:	4849      	ldr	r0, [pc, #292]	@ (80014a8 <UART_menu+0x2e8>)
 8001384:	f001 fa8c 	bl	80028a0 <UART_puts>
		  	  	  UART_puts(Uart_debug_out & STUDENT_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001388:	4b40      	ldr	r3, [pc, #256]	@ (800148c <UART_menu+0x2cc>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0308 	and.w	r3, r3, #8
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <UART_menu+0x1d8>
 8001394:	4b3f      	ldr	r3, [pc, #252]	@ (8001494 <UART_menu+0x2d4>)
 8001396:	e000      	b.n	800139a <UART_menu+0x1da>
 8001398:	4b3f      	ldr	r3, [pc, #252]	@ (8001498 <UART_menu+0x2d8>)
 800139a:	4618      	mov	r0, r3
 800139c:	f001 fa80 	bl	80028a0 <UART_puts>
				  break;
 80013a0:	e069      	b.n	8001476 <UART_menu+0x2b6>

		case '5': Uart_debug_out ^= GPS_DEBUG_OUT; // toggle output on/off
 80013a2:	4b3a      	ldr	r3, [pc, #232]	@ (800148c <UART_menu+0x2cc>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f083 0310 	eor.w	r3, r3, #16
 80013aa:	4a38      	ldr	r2, [pc, #224]	@ (800148c <UART_menu+0x2cc>)
 80013ac:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nGPS output = ");
 80013ae:	483f      	ldr	r0, [pc, #252]	@ (80014ac <UART_menu+0x2ec>)
 80013b0:	f001 fa76 	bl	80028a0 <UART_puts>
		  	  	  UART_puts(Uart_debug_out & GPS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 80013b4:	4b35      	ldr	r3, [pc, #212]	@ (800148c <UART_menu+0x2cc>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0310 	and.w	r3, r3, #16
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <UART_menu+0x204>
 80013c0:	4b34      	ldr	r3, [pc, #208]	@ (8001494 <UART_menu+0x2d4>)
 80013c2:	e000      	b.n	80013c6 <UART_menu+0x206>
 80013c4:	4b34      	ldr	r3, [pc, #208]	@ (8001498 <UART_menu+0x2d8>)
 80013c6:	4618      	mov	r0, r3
 80013c8:	f001 fa6a 	bl	80028a0 <UART_puts>
				  break;
 80013cc:	e053      	b.n	8001476 <UART_menu+0x2b6>

		/// ... en reageert ook op een paar letters
		case 'D': /// D: Verandert de Default OSTIME-DELAY, die gebruikt wordt bij de LEDs.
				  /// commando: <b>"d,200"</b> betekent: set delay op 200, NB: spaties worden niet afgevangen...
				  os_delay = atoi(s+2); // skip first 2 characters
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	3302      	adds	r3, #2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f00f f975 	bl	80106c2 <atoi>
 80013d8:	4603      	mov	r3, r0
 80013da:	461a      	mov	r2, r3
 80013dc:	4b34      	ldr	r3, [pc, #208]	@ (80014b0 <UART_menu+0x2f0>)
 80013de:	601a      	str	r2, [r3, #0]
				  UART_puts("\r\n os_delay set to: "); UART_putint(os_delay);
 80013e0:	4834      	ldr	r0, [pc, #208]	@ (80014b4 <UART_menu+0x2f4>)
 80013e2:	f001 fa5d 	bl	80028a0 <UART_puts>
 80013e6:	4b32      	ldr	r3, [pc, #200]	@ (80014b0 <UART_menu+0x2f0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 fa74 	bl	80028d8 <UART_putint>
				  break;
 80013f0:	e041      	b.n	8001476 <UART_menu+0x2b6>

		case 'M': DisplayMenu(); /// M: Displays het menu (zie my_app.c)
 80013f2:	f000 f8c1 	bl	8001578 <DisplayMenu>
				  break;
 80013f6:	e03e      	b.n	8001476 <UART_menu+0x2b6>

		case 'T': DisplayTaskData(); /// T: Displays de stackdata van alle Tasks
 80013f8:	f000 fa38 	bl	800186c <DisplayTaskData>
				  break;
 80013fc:	e03b      	b.n	8001476 <UART_menu+0x2b6>
		case 'P': /// P: Verandert de Prioriteit van een taak
				  /// commando, als: <b>"t,9,20"</b> betekent: set Task 9 op priority 20
				  //  eerst: de 2 waarden worden uit de string gehaald met strtok()
			      //  dan: de strings worden naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 't,'
 80013fe:	69f9      	ldr	r1, [r7, #28]
 8001400:	69b8      	ldr	r0, [r7, #24]
 8001402:	f010 fa03 	bl	801180c <strtok>
 8001406:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 8001408:	69f9      	ldr	r1, [r7, #28]
 800140a:	2000      	movs	r0, #0
 800140c:	f010 f9fe 	bl	801180c <strtok>
 8001410:	61b8      	str	r0, [r7, #24]
 8001412:	69b8      	ldr	r0, [r7, #24]
 8001414:	f00f f955 	bl	80106c2 <atoi>
 8001418:	6138      	str	r0, [r7, #16]
				  s = strtok(NULL, tok); val2 = atoi(s); // volgende = priority
 800141a:	69f9      	ldr	r1, [r7, #28]
 800141c:	2000      	movs	r0, #0
 800141e:	f010 f9f5 	bl	801180c <strtok>
 8001422:	61b8      	str	r0, [r7, #24]
 8001424:	69b8      	ldr	r0, [r7, #24]
 8001426:	f00f f94c 	bl	80106c2 <atoi>
 800142a:	60f8      	str	r0, [r7, #12]
				  if (val1 && val2)						 // kleine validiteitscontrole
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d01e      	beq.n	8001470 <UART_menu+0x2b0>
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d01b      	beq.n	8001470 <UART_menu+0x2b0>
					  SetTaskPriority(val1, val2);
 8001438:	68f9      	ldr	r1, [r7, #12]
 800143a:	6938      	ldr	r0, [r7, #16]
 800143c:	f000 f992 	bl	8001764 <SetTaskPriority>
				  break;
 8001440:	e016      	b.n	8001470 <UART_menu+0x2b0>
		case 'S': /// S: Start/Stop task
				  /// commando, als: <b>"s,9"</b> betekent: start/stop Task 9
				  //  eerst: de waarde worden uit de string gehaald met strtok()
			      //  dan: de string wordt naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 's,'
 8001442:	69f9      	ldr	r1, [r7, #28]
 8001444:	69b8      	ldr	r0, [r7, #24]
 8001446:	f010 f9e1 	bl	801180c <strtok>
 800144a:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 800144c:	69f9      	ldr	r1, [r7, #28]
 800144e:	2000      	movs	r0, #0
 8001450:	f010 f9dc 	bl	801180c <strtok>
 8001454:	61b8      	str	r0, [r7, #24]
 8001456:	69b8      	ldr	r0, [r7, #24]
 8001458:	f00f f933 	bl	80106c2 <atoi>
 800145c:	6138      	str	r0, [r7, #16]
				  if (val1)						 // kleine validiteitscontrole
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d007      	beq.n	8001474 <UART_menu+0x2b4>
					  StartStopTask(val1);
 8001464:	6938      	ldr	r0, [r7, #16]
 8001466:	f000 f9b9 	bl	80017dc <StartStopTask>
				  break;
 800146a:	e003      	b.n	8001474 <UART_menu+0x2b4>
				  break;
 800146c:	bf00      	nop
 800146e:	e6b3      	b.n	80011d8 <UART_menu+0x18>
				  break;
 8001470:	bf00      	nop
 8001472:	e6b1      	b.n	80011d8 <UART_menu+0x18>
				  break;
 8001474:	bf00      	nop
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001476:	e6af      	b.n	80011d8 <UART_menu+0x18>
 8001478:	080139f4 	.word	0x080139f4
 800147c:	08014344 	.word	0x08014344
 8001480:	080139f8 	.word	0x080139f8
 8001484:	080145e8 	.word	0x080145e8
 8001488:	08013a04 	.word	0x08013a04
 800148c:	20000444 	.word	0x20000444
 8001490:	08013a18 	.word	0x08013a18
 8001494:	08013a30 	.word	0x08013a30
 8001498:	08013a38 	.word	0x08013a38
 800149c:	08013a40 	.word	0x08013a40
 80014a0:	08013a54 	.word	0x08013a54
 80014a4:	08013a68 	.word	0x08013a68
 80014a8:	08013a7c 	.word	0x08013a7c
 80014ac:	08013a90 	.word	0x08013a90
 80014b0:	20000218 	.word	0x20000218
 80014b4:	08013aa0 	.word	0x08013aa0

080014b8 <DisplayVersion>:
* Les: je ziet hoe je handig een lange string kunt opstellen met het '\'-karakter.
* @return void
* @author MSC
*/
void DisplayVersion(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b09c      	sub	sp, #112	@ 0x70
 80014bc:	af00      	add	r7, sp, #0
	char infobuf[100];
    osVersion_t osv;

    char *functionality =
 80014be:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <DisplayVersion+0x98>)
 80014c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
en hoe je makkelijk tasks aanmaakt (admin.c) en hoe je de bidirectionele omgang \r\n\
met de UART-comport gebruikt.\r\n\
Zie verder de Doxygen documentatie van de applicatie.\r\n\
Michiel Scager (update: april 2023)\r\n";

	LCD_clear();
 80014c2:	f001 f803 	bl	80024cc <LCD_clear>
	LCD_puts(app_nameLCD);
 80014c6:	4b23      	ldr	r3, [pc, #140]	@ (8001554 <DisplayVersion+0x9c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f001 f8f6 	bl	80026bc <LCD_puts>

	UART_puts(app_name);
 80014d0:	4b21      	ldr	r3, [pc, #132]	@ (8001558 <DisplayVersion+0xa0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f001 f9e3 	bl	80028a0 <UART_puts>
	UART_puts(functionality);
 80014da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80014dc:	f001 f9e0 	bl	80028a0 <UART_puts>

 	osKernelGetInfo(&osv, infobuf, sizeof(infobuf));
 80014e0:	f107 0108 	add.w	r1, r7, #8
 80014e4:	463b      	mov	r3, r7
 80014e6:	2264      	movs	r2, #100	@ 0x64
 80014e8:	4618      	mov	r0, r3
 80014ea:	f00a fb7b 	bl	800bbe4 <osKernelGetInfo>
	UART_puts("\t-----");
 80014ee:	481b      	ldr	r0, [pc, #108]	@ (800155c <DisplayVersion+0xa4>)
 80014f0:	f001 f9d6 	bl	80028a0 <UART_puts>
	UART_puts("\r\n\t");                       UART_puts(infobuf);
 80014f4:	481a      	ldr	r0, [pc, #104]	@ (8001560 <DisplayVersion+0xa8>)
 80014f6:	f001 f9d3 	bl	80028a0 <UART_puts>
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	4618      	mov	r0, r3
 8001500:	f001 f9ce 	bl	80028a0 <UART_puts>
	UART_puts("\r\n\tVersion: ");              UART_putint(osv.kernel);
 8001504:	4817      	ldr	r0, [pc, #92]	@ (8001564 <DisplayVersion+0xac>)
 8001506:	f001 f9cb 	bl	80028a0 <UART_puts>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4618      	mov	r0, r3
 800150e:	f001 f9e3 	bl	80028d8 <UART_putint>
	UART_puts("\r\n\tOS Timer freq (MHz): " ); UART_putint(osKernelGetSysTimerFreq()/1000000);
 8001512:	4815      	ldr	r0, [pc, #84]	@ (8001568 <DisplayVersion+0xb0>)
 8001514:	f001 f9c4 	bl	80028a0 <UART_puts>
 8001518:	f00a fbbc 	bl	800bc94 <osKernelGetSysTimerFreq>
 800151c:	4603      	mov	r3, r0
 800151e:	4a13      	ldr	r2, [pc, #76]	@ (800156c <DisplayVersion+0xb4>)
 8001520:	fba2 2303 	umull	r2, r3, r2, r3
 8001524:	0c9b      	lsrs	r3, r3, #18
 8001526:	4618      	mov	r0, r3
 8001528:	f001 f9d6 	bl	80028d8 <UART_putint>
	UART_puts("\r\n\tOS Tick freq (Hz): " );   UART_putint(osKernelGetTickFreq());
 800152c:	4810      	ldr	r0, [pc, #64]	@ (8001570 <DisplayVersion+0xb8>)
 800152e:	f001 f9b7 	bl	80028a0 <UART_puts>
 8001532:	f00a fba5 	bl	800bc80 <osKernelGetTickFreq>
 8001536:	4603      	mov	r3, r0
 8001538:	4618      	mov	r0, r3
 800153a:	f001 f9cd 	bl	80028d8 <UART_putint>
	UART_puts("\r\n\t-----\r\n");
 800153e:	480d      	ldr	r0, [pc, #52]	@ (8001574 <DisplayVersion+0xbc>)
 8001540:	f001 f9ae 	bl	80028a0 <UART_puts>

    DisplayMenu();
 8001544:	f000 f818 	bl	8001578 <DisplayMenu>
}
 8001548:	bf00      	nop
 800154a:	3770      	adds	r7, #112	@ 0x70
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	08013b74 	.word	0x08013b74
 8001554:	20000004 	.word	0x20000004
 8001558:	20000000 	.word	0x20000000
 800155c:	08013ce4 	.word	0x08013ce4
 8001560:	08013cec 	.word	0x08013cec
 8001564:	08013cf0 	.word	0x08013cf0
 8001568:	08013d00 	.word	0x08013d00
 800156c:	431bde83 	.word	0x431bde83
 8001570:	08013d1c 	.word	0x08013d1c
 8001574:	08013d34 	.word	0x08013d34

08001578 <DisplayMenu>:
* User Interface (menu) naar UART.
* @return void
* @author MSC
*/
void DisplayMenu(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
	char *menu =
 800157e:	4b04      	ldr	r3, [pc, #16]	@ (8001590 <DisplayMenu+0x18>)
 8001580:	607b      	str	r3, [r7, #4]
 p : change TASK PRIORITY, eg. 'p,7,20' sets priority of task 7 to 20\r\n\
 t : display TASK DATA (number, priority, stack usage, status)\r\n\
 s : start/stop TASK, eg. s,7 starts or stops task 7\r\n\
=====================================================================\r\n";

    UART_puts(menu);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f001 f98c 	bl	80028a0 <UART_puts>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	08013d40 	.word	0x08013d40

08001594 <error_HaltOS>:
* dus op UART en LCD.
* @param msg Foutmelding
* @return void
*/
void error_HaltOS(char *msg)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	LCD_puts(msg);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f001 f88d 	bl	80026bc <LCD_puts>
	UART_puts(msg); UART_puts(". Application halted\r\n");
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f001 f97c 	bl	80028a0 <UART_puts>
 80015a8:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <error_HaltOS+0x2c>)
 80015aa:	f001 f979 	bl	80028a0 <UART_puts>

	BUZZER_put(1000);
 80015ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015b2:	f000 fe49 	bl	8002248 <BUZZER_put>
	vTaskSuspendAll(); // stop alle tasks
 80015b6:	f00c fbf3 	bl	800dda0 <vTaskSuspendAll>

	while (TRUE)
 80015ba:	bf00      	nop
 80015bc:	e7fd      	b.n	80015ba <error_HaltOS+0x26>
 80015be:	bf00      	nop
 80015c0:	08013f80 	.word	0x08013f80

080015c4 <CreateHandles>:
/**
* @brief Creates alle handles voor deze applicatie
* @return void
*/
void CreateHandles(void)
{
 80015c4:	b590      	push	{r4, r7, lr}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af02      	add	r7, sp, #8
	if (!(hLED_Sem = xSemaphoreCreateMutex()))
 80015ca:	2001      	movs	r0, #1
 80015cc:	f00b f94f 	bl	800c86e <xQueueCreateMutex>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4a36      	ldr	r2, [pc, #216]	@ (80016ac <CreateHandles+0xe8>)
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	4b35      	ldr	r3, [pc, #212]	@ (80016ac <CreateHandles+0xe8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d102      	bne.n	80015e4 <CreateHandles+0x20>
		error_HaltOS("Error hLED_Sem");
 80015de:	4834      	ldr	r0, [pc, #208]	@ (80016b0 <CreateHandles+0xec>)
 80015e0:	f7ff ffd8 	bl	8001594 <error_HaltOS>

	if (!(hGNRMC_Struct_Sem = xSemaphoreCreateMutex()))
 80015e4:	2001      	movs	r0, #1
 80015e6:	f00b f942 	bl	800c86e <xQueueCreateMutex>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4a31      	ldr	r2, [pc, #196]	@ (80016b4 <CreateHandles+0xf0>)
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b30      	ldr	r3, [pc, #192]	@ (80016b4 <CreateHandles+0xf0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <CreateHandles+0x3a>
		error_HaltOS("Error hGNRMC_Struct_Sem");
 80015f8:	482f      	ldr	r0, [pc, #188]	@ (80016b8 <CreateHandles+0xf4>)
 80015fa:	f7ff ffcb 	bl	8001594 <error_HaltOS>

	if (!(hUART_Queue = xQueueCreate(QSIZE_UART, sizeof(unsigned int))))
 80015fe:	2200      	movs	r2, #0
 8001600:	2104      	movs	r1, #4
 8001602:	200a      	movs	r0, #10
 8001604:	f00b f8bb 	bl	800c77e <xQueueGenericCreate>
 8001608:	4603      	mov	r3, r0
 800160a:	4a2c      	ldr	r2, [pc, #176]	@ (80016bc <CreateHandles+0xf8>)
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	4b2b      	ldr	r3, [pc, #172]	@ (80016bc <CreateHandles+0xf8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <CreateHandles+0x58>
		error_HaltOS("Error hUART_Q");
 8001616:	482a      	ldr	r0, [pc, #168]	@ (80016c0 <CreateHandles+0xfc>)
 8001618:	f7ff ffbc 	bl	8001594 <error_HaltOS>

	if (!(hGPS_Queue = xQueueCreate(GPS_MAXLEN, sizeof(unsigned char))))
 800161c:	2200      	movs	r2, #0
 800161e:	2101      	movs	r1, #1
 8001620:	2053      	movs	r0, #83	@ 0x53
 8001622:	f00b f8ac 	bl	800c77e <xQueueGenericCreate>
 8001626:	4603      	mov	r3, r0
 8001628:	4a26      	ldr	r2, [pc, #152]	@ (80016c4 <CreateHandles+0x100>)
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	4b25      	ldr	r3, [pc, #148]	@ (80016c4 <CreateHandles+0x100>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <CreateHandles+0x76>
		error_HaltOS("Error hGPS_Q");
 8001634:	4824      	ldr	r0, [pc, #144]	@ (80016c8 <CreateHandles+0x104>)
 8001636:	f7ff ffad 	bl	8001594 <error_HaltOS>

	if (!(hKEY_Event = xEventGroupCreate()))
 800163a:	f00a fd49 	bl	800c0d0 <xEventGroupCreate>
 800163e:	4603      	mov	r3, r0
 8001640:	4a22      	ldr	r2, [pc, #136]	@ (80016cc <CreateHandles+0x108>)
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b21      	ldr	r3, [pc, #132]	@ (80016cc <CreateHandles+0x108>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d102      	bne.n	8001652 <CreateHandles+0x8e>
		error_HaltOS("Error hLCD_Event");
 800164c:	4820      	ldr	r0, [pc, #128]	@ (80016d0 <CreateHandles+0x10c>)
 800164e:	f7ff ffa1 	bl	8001594 <error_HaltOS>

	if (!(hTimer1 = xTimerCreate("Timer_1", pdMS_TO_TICKS(TIMER1_DELAY), pdTRUE, 0, (TimerCallbackFunction_t)Timer1_Handler)))
 8001652:	4b20      	ldr	r3, [pc, #128]	@ (80016d4 <CreateHandles+0x110>)
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2300      	movs	r3, #0
 8001658:	2201      	movs	r2, #1
 800165a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800165e:	481e      	ldr	r0, [pc, #120]	@ (80016d8 <CreateHandles+0x114>)
 8001660:	f00d fd58 	bl	800f114 <xTimerCreate>
 8001664:	4603      	mov	r3, r0
 8001666:	4a1d      	ldr	r2, [pc, #116]	@ (80016dc <CreateHandles+0x118>)
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b1c      	ldr	r3, [pc, #112]	@ (80016dc <CreateHandles+0x118>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <CreateHandles+0xb4>
		error_HaltOS("Error hTimer1");
 8001672:	481b      	ldr	r0, [pc, #108]	@ (80016e0 <CreateHandles+0x11c>)
 8001674:	f7ff ff8e 	bl	8001594 <error_HaltOS>

	UART_puts("\n\rAll handles created successfully.");
 8001678:	481a      	ldr	r0, [pc, #104]	@ (80016e4 <CreateHandles+0x120>)
 800167a:	f001 f911 	bl	80028a0 <UART_puts>

	UART_puts("\n\rTimer set to: ");
 800167e:	481a      	ldr	r0, [pc, #104]	@ (80016e8 <CreateHandles+0x124>)
 8001680:	f001 f90e 	bl	80028a0 <UART_puts>
	UART_putint((int)TIMER1_DELAY); // (int)-cast is nodig!
 8001684:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001688:	f001 f926 	bl	80028d8 <UART_putint>
	xTimerStart(hTimer1, 0); // start de timer...
 800168c:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <CreateHandles+0x118>)
 800168e:	681c      	ldr	r4, [r3, #0]
 8001690:	f00c fc32 	bl	800def8 <xTaskGetTickCount>
 8001694:	4602      	mov	r2, r0
 8001696:	2300      	movs	r3, #0
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	2300      	movs	r3, #0
 800169c:	2101      	movs	r1, #1
 800169e:	4620      	mov	r0, r4
 80016a0:	f00d fd96 	bl	800f1d0 <xTimerGenericCommand>
}
 80016a4:	bf00      	nop
 80016a6:	3704      	adds	r7, #4
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd90      	pop	{r4, r7, pc}
 80016ac:	20000450 	.word	0x20000450
 80016b0:	08013f98 	.word	0x08013f98
 80016b4:	20000454 	.word	0x20000454
 80016b8:	08013fa8 	.word	0x08013fa8
 80016bc:	20000448 	.word	0x20000448
 80016c0:	08013fc0 	.word	0x08013fc0
 80016c4:	2000044c 	.word	0x2000044c
 80016c8:	08013fd0 	.word	0x08013fd0
 80016cc:	20000458 	.word	0x20000458
 80016d0:	08013fe0 	.word	0x08013fe0
 80016d4:	080016ed 	.word	0x080016ed
 80016d8:	08013ff4 	.word	0x08013ff4
 80016dc:	2000045c 	.word	0x2000045c
 80016e0:	08013ffc 	.word	0x08013ffc
 80016e4:	0801400c 	.word	0x0801400c
 80016e8:	08014030 	.word	0x08014030

080016ec <Timer1_Handler>:
* @brief Vangt de FreeRTOS software-interrupt op en toggelt een ledje
* @param hTimer1 De handle van de timer
* @return void
*/
void Timer1_Handler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, LEDBLUE);   // turns led on/off
 80016f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016f4:	4802      	ldr	r0, [pc, #8]	@ (8001700 <Timer1_Handler+0x14>)
 80016f6:	f002 fc0a 	bl	8003f0e <HAL_GPIO_TogglePin>
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40020c00 	.word	0x40020c00

08001704 <CreateTasks>:
* Let op. Eerst wordt de scheduler gestopt, dan de taken gecreëerd, dan de scheduler gestopt.
* Waarom? Anders gaan taken gelijk beginnen en wachten op taken die nog niet bestaan, dat geeft een rommeltje.
* @return void
*/
void CreateTasks(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
	PTASKDATA ptd = tasks; // tasks == &tasks[0]: both are addresses of first struct
 800170a:	4b14      	ldr	r3, [pc, #80]	@ (800175c <CreateTasks+0x58>)
 800170c:	607b      	str	r3, [r7, #4]
	vTaskSuspendAll(); // zet de scheduler stil en dwing FreeRTOS om eerst alle taken te starten
 800170e:	f00c fb47 	bl	800dda0 <vTaskSuspendAll>

	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 8001712:	e016      	b.n	8001742 <CreateTasks+0x3e>
	{
		UART_puts("\r\nCreated: ");
 8001714:	4812      	ldr	r0, [pc, #72]	@ (8001760 <CreateTasks+0x5c>)
 8001716:	f001 f8c3 	bl	80028a0 <UART_puts>
		UART_puts((char *)ptd->attr.name);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	4618      	mov	r0, r3
 8001720:	f001 f8be 	bl	80028a0 <UART_puts>

		// nb. kijk naar de haakjes van argument 3: het gaat om het adres van (structure attr).
		ptd->hTask = osThreadNew(ptd->func, ptd->argument, &(ptd->attr));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6859      	ldr	r1, [r3, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3308      	adds	r3, #8
 8001730:	461a      	mov	r2, r3
 8001732:	f00a fabb 	bl	800bcac <osThreadNew>
 8001736:	4602      	mov	r2, r0
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3330      	adds	r3, #48	@ 0x30
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1e4      	bne.n	8001714 <CreateTasks+0x10>
	}

	xTaskResumeAll();   // start nu de scheduler: play ball
 800174a:	f00c fb37 	bl	800ddbc <xTaskResumeAll>
	DisplayTaskData();  // display alle taskdata op UART
 800174e:	f000 f88d 	bl	800186c <DisplayTaskData>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000008 	.word	0x20000008
 8001760:	08014044 	.word	0x08014044

08001764 <SetTaskPriority>:
* @param task_id Task identifier
* @param new_priority Nieuwe prioriteit
* @return void
*/
void SetTaskPriority(int task_id, int new_priority)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
	PTASKDATA ptd = tasks;
 800176e:	4b18      	ldr	r3, [pc, #96]	@ (80017d0 <SetTaskPriority+0x6c>)
 8001770:	60fb      	str	r3, [r7, #12]
	unsigned int 	task_nr;


	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8001772:	2301      	movs	r3, #1
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	e023      	b.n	80017c0 <SetTaskPriority+0x5c>
		if (task_nr == task_id) // hebbes
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	429a      	cmp	r2, r3
 800177e:	d119      	bne.n	80017b4 <SetTaskPriority+0x50>
		{
			ptd->attr.priority = new_priority;			// struct-member
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	621a      	str	r2, [r3, #32]
			vTaskPrioritySet(ptd->hTask, new_priority); // taskpriority
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	4611      	mov	r1, r2
 800178e:	4618      	mov	r0, r3
 8001790:	f00c f8f0 	bl	800d974 <vTaskPrioritySet>
			// of
			// osThreadSetPriority(ptd->hTask, new_priority);

			UART_puts("\r\nSet task "); UART_puts(ptd->attr.name);
 8001794:	480f      	ldr	r0, [pc, #60]	@ (80017d4 <SetTaskPriority+0x70>)
 8001796:	f001 f883 	bl	80028a0 <UART_puts>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	4618      	mov	r0, r3
 80017a0:	f001 f87e 	bl	80028a0 <UART_puts>
			UART_puts("'s priority to: "); UART_putint(new_priority);
 80017a4:	480c      	ldr	r0, [pc, #48]	@ (80017d8 <SetTaskPriority+0x74>)
 80017a6:	f001 f87b 	bl	80028a0 <UART_puts>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f001 f893 	bl	80028d8 <UART_putint>
			return;
 80017b2:	e009      	b.n	80017c8 <SetTaskPriority+0x64>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	3330      	adds	r3, #48	@ 0x30
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	3301      	adds	r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1d7      	bne.n	8001778 <SetTaskPriority+0x14>
		}
}
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000008 	.word	0x20000008
 80017d4:	08014050 	.word	0x08014050
 80017d8:	0801405c 	.word	0x0801405c

080017dc <StartStopTask>:
* je alle tasks die op die mutex wachten. En als je de task stopt die de UART leest,
* schiet je jezelf ook in de voet.
* @return void
*/
void StartStopTask(int task_id)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08e      	sub	sp, #56	@ 0x38
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	PTASKDATA ptd = tasks;
 80017e4:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <StartStopTask+0x80>)
 80017e6:	637b      	str	r3, [r7, #52]	@ 0x34
	unsigned int 	task_nr;
	TaskStatus_t    xTaskDetails;

	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 80017e8:	2301      	movs	r3, #1
 80017ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80017ec:	e02e      	b.n	800184c <StartStopTask+0x70>
		if (task_nr == task_id) // hebbes
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d124      	bne.n	8001840 <StartStopTask+0x64>
		{
			vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid);
 80017f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017f8:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80017fa:	f107 010c 	add.w	r1, r7, #12
 80017fe:	2305      	movs	r3, #5
 8001800:	2201      	movs	r2, #1
 8001802:	f00c ffe1 	bl	800e7c8 <vTaskGetInfo>
			UART_puts("\r\n");
 8001806:	4816      	ldr	r0, [pc, #88]	@ (8001860 <StartStopTask+0x84>)
 8001808:	f001 f84a 	bl	80028a0 <UART_puts>
			UART_puts(ptd->attr.name);
 800180c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	4618      	mov	r0, r3
 8001812:	f001 f845 	bl	80028a0 <UART_puts>

			// een task kan meerdere statussen hebben; het wordt simpeler
			// als je alleen de eSuspended checkt.
			if (xTaskDetails.eCurrentState == eSuspended)
 8001816:	7e3b      	ldrb	r3, [r7, #24]
 8001818:	2b03      	cmp	r3, #3
 800181a:	d108      	bne.n	800182e <StartStopTask+0x52>
			{
				vTaskResume(ptd->hTask);
 800181c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800181e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001820:	4618      	mov	r0, r3
 8001822:	f00c f9ed 	bl	800dc00 <vTaskResume>
				UART_puts(" resumed.");
 8001826:	480f      	ldr	r0, [pc, #60]	@ (8001864 <StartStopTask+0x88>)
 8001828:	f001 f83a 	bl	80028a0 <UART_puts>
			else // bv. eBlocked, eRunning, eInvalid etc.
			{
				vTaskSuspend(ptd->hTask);
				UART_puts(" suspended.");
			}
			return;
 800182c:	e012      	b.n	8001854 <StartStopTask+0x78>
				vTaskSuspend(ptd->hTask);
 800182e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001832:	4618      	mov	r0, r3
 8001834:	f00c f93c 	bl	800dab0 <vTaskSuspend>
				UART_puts(" suspended.");
 8001838:	480b      	ldr	r0, [pc, #44]	@ (8001868 <StartStopTask+0x8c>)
 800183a:	f001 f831 	bl	80028a0 <UART_puts>
 800183e:	e009      	b.n	8001854 <StartStopTask+0x78>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8001840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001842:	3330      	adds	r3, #48	@ 0x30
 8001844:	637b      	str	r3, [r7, #52]	@ 0x34
 8001846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001848:	3301      	adds	r3, #1
 800184a:	633b      	str	r3, [r7, #48]	@ 0x30
 800184c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1cc      	bne.n	80017ee <StartStopTask+0x12>
		}
}
 8001854:	3738      	adds	r7, #56	@ 0x38
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000008 	.word	0x20000008
 8001860:	08014070 	.word	0x08014070
 8001864:	08014074 	.word	0x08014074
 8001868:	08014080 	.word	0x08014080

0800186c <DisplayTaskData>:
/**
* @brief Displays de stack-gegevens van alle taken op de UART
* @return void
*/
void DisplayTaskData(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08e      	sub	sp, #56	@ 0x38
 8001870:	af00      	add	r7, sp, #0
	PTASKDATA    ptd = tasks;
 8001872:	4b47      	ldr	r3, [pc, #284]	@ (8001990 <DisplayTaskData+0x124>)
 8001874:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t  highwatermark;
	TaskStatus_t xTaskDetails;
	unsigned int free, totalalloc = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	633b      	str	r3, [r7, #48]	@ 0x30

	unsigned int task_nr; // tasknr for changing priority

	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 800187a:	2301      	movs	r3, #1
 800187c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800187e:	e062      	b.n	8001946 <DisplayTaskData+0xda>
	{
		highwatermark = uxTaskGetStackHighWaterMark(ptd->hTask); 	// amount of free bytes
 8001880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001884:	4618      	mov	r0, r3
 8001886:	f00d f821 	bl	800e8cc <uxTaskGetStackHighWaterMark>
 800188a:	62b8      	str	r0, [r7, #40]	@ 0x28
		free = (highwatermark * 100) / ptd->attr.stack_size; 		// in percentage
 800188c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800188e:	2264      	movs	r2, #100	@ 0x64
 8001890:	fb03 f202 	mul.w	r2, r3, r2
 8001894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	fbb2 f3f3 	udiv	r3, r2, r3
 800189c:	627b      	str	r3, [r7, #36]	@ 0x24
		totalalloc += ptd->attr.stack_size;
 800189e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018a4:	4413      	add	r3, r2
 80018a6:	633b      	str	r3, [r7, #48]	@ 0x30

		vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid); // get task status
 80018a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018aa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80018ac:	4639      	mov	r1, r7
 80018ae:	2305      	movs	r3, #5
 80018b0:	2201      	movs	r2, #1
 80018b2:	f00c ff89 	bl	800e7c8 <vTaskGetInfo>

		UART_puts("\r\n\t[");        UART_putint(task_nr); UART_puts("] ");
 80018b6:	4837      	ldr	r0, [pc, #220]	@ (8001994 <DisplayTaskData+0x128>)
 80018b8:	f000 fff2 	bl	80028a0 <UART_puts>
 80018bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80018be:	f001 f80b 	bl	80028d8 <UART_putint>
 80018c2:	4835      	ldr	r0, [pc, #212]	@ (8001998 <DisplayTaskData+0x12c>)
 80018c4:	f000 ffec 	bl	80028a0 <UART_puts>
		UART_puts(ptd->attr.name);
 80018c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 ffe7 	bl	80028a0 <UART_puts>
		UART_puts("\t priority: ");  UART_putint(ptd->attr.priority);
 80018d2:	4832      	ldr	r0, [pc, #200]	@ (800199c <DisplayTaskData+0x130>)
 80018d4:	f000 ffe4 	bl	80028a0 <UART_puts>
 80018d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 fffb 	bl	80028d8 <UART_putint>
		UART_puts("\t stacksize: "); UART_putint(ptd->attr.stack_size * 4);
 80018e2:	482f      	ldr	r0, [pc, #188]	@ (80019a0 <DisplayTaskData+0x134>)
 80018e4:	f000 ffdc 	bl	80028a0 <UART_puts>
 80018e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 fff2 	bl	80028d8 <UART_putint>
		UART_puts("\t free: ");  UART_putint((ptd->attr.stack_size- highwatermark) * 4);
 80018f4:	482b      	ldr	r0, [pc, #172]	@ (80019a4 <DisplayTaskData+0x138>)
 80018f6:	f000 ffd3 	bl	80028a0 <UART_puts>
 80018fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018fc:	69da      	ldr	r2, [r3, #28]
 80018fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4618      	mov	r0, r3
 8001906:	f000 ffe7 	bl	80028d8 <UART_putint>
		UART_puts("\t used: ");      UART_putint(100 - free); UART_puts("%");
 800190a:	4827      	ldr	r0, [pc, #156]	@ (80019a8 <DisplayTaskData+0x13c>)
 800190c:	f000 ffc8 	bl	80028a0 <UART_puts>
 8001910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001912:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001916:	4618      	mov	r0, r3
 8001918:	f000 ffde 	bl	80028d8 <UART_putint>
 800191c:	4823      	ldr	r0, [pc, #140]	@ (80019ac <DisplayTaskData+0x140>)
 800191e:	f000 ffbf 	bl	80028a0 <UART_puts>
		UART_puts("\t status: ");    UART_puts(xTaskDetails.eCurrentState == eSuspended ? "suspended": "running");
 8001922:	4823      	ldr	r0, [pc, #140]	@ (80019b0 <DisplayTaskData+0x144>)
 8001924:	f000 ffbc 	bl	80028a0 <UART_puts>
 8001928:	7b3b      	ldrb	r3, [r7, #12]
 800192a:	2b03      	cmp	r3, #3
 800192c:	d101      	bne.n	8001932 <DisplayTaskData+0xc6>
 800192e:	4b21      	ldr	r3, [pc, #132]	@ (80019b4 <DisplayTaskData+0x148>)
 8001930:	e000      	b.n	8001934 <DisplayTaskData+0xc8>
 8001932:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <DisplayTaskData+0x14c>)
 8001934:	4618      	mov	r0, r3
 8001936:	f000 ffb3 	bl	80028a0 <UART_puts>
	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 800193a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800193c:	3330      	adds	r3, #48	@ 0x30
 800193e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001942:	3301      	adds	r3, #1
 8001944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d198      	bne.n	8001880 <DisplayTaskData+0x14>
	}
	UART_puts("\r\n\tTotal heap: "); UART_putint(configTOTAL_HEAP_SIZE);
 800194e:	481b      	ldr	r0, [pc, #108]	@ (80019bc <DisplayTaskData+0x150>)
 8001950:	f000 ffa6 	bl	80028a0 <UART_puts>
 8001954:	f44f 407a 	mov.w	r0, #64000	@ 0xfa00
 8001958:	f000 ffbe 	bl	80028d8 <UART_putint>
	UART_puts("    Allocated task stack: "); UART_putint(totalalloc * 4);
 800195c:	4818      	ldr	r0, [pc, #96]	@ (80019c0 <DisplayTaskData+0x154>)
 800195e:	f000 ff9f 	bl	80028a0 <UART_puts>
 8001962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4618      	mov	r0, r3
 8001968:	f000 ffb6 	bl	80028d8 <UART_putint>
	UART_puts("    Free heap space: "); UART_putint(configTOTAL_HEAP_SIZE - (totalalloc * 4));
 800196c:	4815      	ldr	r0, [pc, #84]	@ (80019c4 <DisplayTaskData+0x158>)
 800196e:	f000 ff97 	bl	80028a0 <UART_puts>
 8001972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001974:	f5c3 537a 	rsb	r3, r3, #16000	@ 0x3e80
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4618      	mov	r0, r3
 800197c:	f000 ffac 	bl	80028d8 <UART_putint>
	UART_puts("\r\n");
 8001980:	4811      	ldr	r0, [pc, #68]	@ (80019c8 <DisplayTaskData+0x15c>)
 8001982:	f000 ff8d 	bl	80028a0 <UART_puts>
}
 8001986:	bf00      	nop
 8001988:	3738      	adds	r7, #56	@ 0x38
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000008 	.word	0x20000008
 8001994:	0801408c 	.word	0x0801408c
 8001998:	08014094 	.word	0x08014094
 800199c:	08014098 	.word	0x08014098
 80019a0:	080140a8 	.word	0x080140a8
 80019a4:	080140b8 	.word	0x080140b8
 80019a8:	080140c4 	.word	0x080140c4
 80019ac:	080140d0 	.word	0x080140d0
 80019b0:	080140d4 	.word	0x080140d4
 80019b4:	080140e0 	.word	0x080140e0
 80019b8:	080140ec 	.word	0x080140ec
 80019bc:	080140f4 	.word	0x080140f4
 80019c0:	08014104 	.word	0x08014104
 80019c4:	08014120 	.word	0x08014120
 80019c8:	08014070 	.word	0x08014070

080019cc <fill_GNRMC>:
* GNRMC-struct, mbv strtok(); De struct bevat nu alleen chars - je kunt er ook voor kiezen
* om gelijk met doubles te werken, die je dan met atof(); omzet.
* @return void
*/
void fill_GNRMC(char *message)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	// example: $GNRMC,164435.000,A,5205.9505,N,00507.0873,E,0.49,21.70,140423,,,A
	//          id    , time     ,s,
	char *tok = ",";
 80019d4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad0 <fill_GNRMC+0x104>)
 80019d6:	60fb      	str	r3, [r7, #12]
	char *s;

	memset(&gnrmc, 0, sizeof(GNRMC)); // clear the struct
 80019d8:	2247      	movs	r2, #71	@ 0x47
 80019da:	2100      	movs	r1, #0
 80019dc:	483d      	ldr	r0, [pc, #244]	@ (8001ad4 <fill_GNRMC+0x108>)
 80019de:	f00f feee 	bl	80117be <memset>

	s = strtok(message, tok); // 0. header;
 80019e2:	68f9      	ldr	r1, [r7, #12]
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f00f ff11 	bl	801180c <strtok>
 80019ea:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.head, s);
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	4839      	ldr	r0, [pc, #228]	@ (8001ad4 <fill_GNRMC+0x108>)
 80019f0:	f010 f849 	bl	8011a86 <strcpy>

	s = strtok(NULL, tok);    // 1. time; not used
 80019f4:	68f9      	ldr	r1, [r7, #12]
 80019f6:	2000      	movs	r0, #0
 80019f8:	f00f ff08 	bl	801180c <strtok>
 80019fc:	60b8      	str	r0, [r7, #8]

	s = strtok(NULL, tok);    // 2. valid;
 80019fe:	68f9      	ldr	r1, [r7, #12]
 8001a00:	2000      	movs	r0, #0
 8001a02:	f00f ff03 	bl	801180c <strtok>
 8001a06:	60b8      	str	r0, [r7, #8]
	gnrmc.status = s[0];
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	781a      	ldrb	r2, [r3, #0]
 8001a0c:	4b31      	ldr	r3, [pc, #196]	@ (8001ad4 <fill_GNRMC+0x108>)
 8001a0e:	745a      	strb	r2, [r3, #17]

	s = strtok(NULL, tok);    // 3. latitude;
 8001a10:	68f9      	ldr	r1, [r7, #12]
 8001a12:	2000      	movs	r0, #0
 8001a14:	f00f fefa 	bl	801180c <strtok>
 8001a18:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.latitude, s);
 8001a1a:	68b9      	ldr	r1, [r7, #8]
 8001a1c:	482e      	ldr	r0, [pc, #184]	@ (8001ad8 <fill_GNRMC+0x10c>)
 8001a1e:	f010 f832 	bl	8011a86 <strcpy>

	s = strtok(NULL, tok);    // 4. N/S; not used
 8001a22:	68f9      	ldr	r1, [r7, #12]
 8001a24:	2000      	movs	r0, #0
 8001a26:	f00f fef1 	bl	801180c <strtok>
 8001a2a:	60b8      	str	r0, [r7, #8]

	s = strtok(NULL, tok);    // 5. longitude;
 8001a2c:	68f9      	ldr	r1, [r7, #12]
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f00f feec 	bl	801180c <strtok>
 8001a34:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.longitude, s);
 8001a36:	68b9      	ldr	r1, [r7, #8]
 8001a38:	4828      	ldr	r0, [pc, #160]	@ (8001adc <fill_GNRMC+0x110>)
 8001a3a:	f010 f824 	bl	8011a86 <strcpy>

	s = strtok(NULL, tok);    // 6. E/W; not used
 8001a3e:	68f9      	ldr	r1, [r7, #12]
 8001a40:	2000      	movs	r0, #0
 8001a42:	f00f fee3 	bl	801180c <strtok>
 8001a46:	60b8      	str	r0, [r7, #8]

	s = strtok(NULL, tok);    // 7. speed;
 8001a48:	68f9      	ldr	r1, [r7, #12]
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f00f fede 	bl	801180c <strtok>
 8001a50:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.speed, s);
 8001a52:	68b9      	ldr	r1, [r7, #8]
 8001a54:	4822      	ldr	r0, [pc, #136]	@ (8001ae0 <fill_GNRMC+0x114>)
 8001a56:	f010 f816 	bl	8011a86 <strcpy>

	s = strtok(NULL, tok);    // 8. course;
 8001a5a:	68f9      	ldr	r1, [r7, #12]
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f00f fed5 	bl	801180c <strtok>
 8001a62:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.course, s);
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	481f      	ldr	r0, [pc, #124]	@ (8001ae4 <fill_GNRMC+0x118>)
 8001a68:	f010 f80d 	bl	8011a86 <strcpy>

	if (Uart_debug_out & GPS_DEBUG_OUT)
 8001a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae8 <fill_GNRMC+0x11c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0310 	and.w	r3, r3, #16
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d025      	beq.n	8001ac4 <fill_GNRMC+0xf8>
	{
		UART_puts("\r\n\t GPS type: \t");  UART_puts(gnrmc.head);
 8001a78:	481c      	ldr	r0, [pc, #112]	@ (8001aec <fill_GNRMC+0x120>)
 8001a7a:	f000 ff11 	bl	80028a0 <UART_puts>
 8001a7e:	4815      	ldr	r0, [pc, #84]	@ (8001ad4 <fill_GNRMC+0x108>)
 8001a80:	f000 ff0e 	bl	80028a0 <UART_puts>
		UART_puts("\r\n\t status: \t\t");  UART_putchar(gnrmc.status);
 8001a84:	481a      	ldr	r0, [pc, #104]	@ (8001af0 <fill_GNRMC+0x124>)
 8001a86:	f000 ff0b 	bl	80028a0 <UART_puts>
 8001a8a:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <fill_GNRMC+0x108>)
 8001a8c:	7c5b      	ldrb	r3, [r3, #17]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 fef4 	bl	800287c <UART_putchar>
		UART_puts("\r\n\t latitude:\t\t"); UART_puts(gnrmc.latitude);
 8001a94:	4817      	ldr	r0, [pc, #92]	@ (8001af4 <fill_GNRMC+0x128>)
 8001a96:	f000 ff03 	bl	80028a0 <UART_puts>
 8001a9a:	480f      	ldr	r0, [pc, #60]	@ (8001ad8 <fill_GNRMC+0x10c>)
 8001a9c:	f000 ff00 	bl	80028a0 <UART_puts>
		UART_puts("\r\n\t longitude:\t");  UART_puts(gnrmc.longitude);
 8001aa0:	4815      	ldr	r0, [pc, #84]	@ (8001af8 <fill_GNRMC+0x12c>)
 8001aa2:	f000 fefd 	bl	80028a0 <UART_puts>
 8001aa6:	480d      	ldr	r0, [pc, #52]	@ (8001adc <fill_GNRMC+0x110>)
 8001aa8:	f000 fefa 	bl	80028a0 <UART_puts>
		UART_puts("\r\n\t speed:    \t");  UART_puts(gnrmc.speed);
 8001aac:	4813      	ldr	r0, [pc, #76]	@ (8001afc <fill_GNRMC+0x130>)
 8001aae:	f000 fef7 	bl	80028a0 <UART_puts>
 8001ab2:	480b      	ldr	r0, [pc, #44]	@ (8001ae0 <fill_GNRMC+0x114>)
 8001ab4:	f000 fef4 	bl	80028a0 <UART_puts>
		UART_puts("\r\n\t course:   \t");  UART_puts(gnrmc.course);
 8001ab8:	4811      	ldr	r0, [pc, #68]	@ (8001b00 <fill_GNRMC+0x134>)
 8001aba:	f000 fef1 	bl	80028a0 <UART_puts>
 8001abe:	4809      	ldr	r0, [pc, #36]	@ (8001ae4 <fill_GNRMC+0x118>)
 8001ac0:	f000 feee 	bl	80028a0 <UART_puts>
	}
	GNRMC_Parser();
 8001ac4:	f000 f962 	bl	8001d8c <GNRMC_Parser>

}
 8001ac8:	bf00      	nop
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	08014138 	.word	0x08014138
 8001ad4:	20000460 	.word	0x20000460
 8001ad8:	20000472 	.word	0x20000472
 8001adc:	2000047d 	.word	0x2000047d
 8001ae0:	20000488 	.word	0x20000488
 8001ae4:	2000048e 	.word	0x2000048e
 8001ae8:	20000444 	.word	0x20000444
 8001aec:	0801413c 	.word	0x0801413c
 8001af0:	0801414c 	.word	0x0801414c
 8001af4:	0801415c 	.word	0x0801415c
 8001af8:	0801416c 	.word	0x0801416c
 8001afc:	0801417c 	.word	0x0801417c
 8001b00:	0801418c 	.word	0x0801418c

08001b04 <GPS_getNMEA>:
* binnenkomen. * De handler zet elk inkomende character gelijk op een queue, die hier uitgelezen wordt.
* Vervolgens wordt hiervan een GPS-message opgebouwd en verwerkt.
* @return void
*/
void GPS_getNMEA (void *argument)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b09c      	sub	sp, #112	@ 0x70
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
    char  Q_char;   			// char to receive from queue
	char  MSG_buff[GPS_MAXLEN]; // buffer for GPS-string
	int   pos = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
	int   cs;                   // checksum-flag
	int   new_msg = FALSE;      // do we encounter a '$'-char?
 8001b10:	2300      	movs	r3, #0
 8001b12:	66bb      	str	r3, [r7, #104]	@ 0x68
	int   msg_type = 0;         // do we want this message to be interpreted?
 8001b14:	2300      	movs	r3, #0
 8001b16:	667b      	str	r3, [r7, #100]	@ 0x64

	UART_puts((char *)__func__); UART_puts("started\n\r");
 8001b18:	4855      	ldr	r0, [pc, #340]	@ (8001c70 <GPS_getNMEA+0x16c>)
 8001b1a:	f000 fec1 	bl	80028a0 <UART_puts>
 8001b1e:	4855      	ldr	r0, [pc, #340]	@ (8001c74 <GPS_getNMEA+0x170>)
 8001b20:	f000 febe 	bl	80028a0 <UART_puts>

	while (TRUE)
	{
		xQueueReceive(hGPS_Queue, &Q_char, portMAX_DELAY); // get one char from the q
 8001b24:	4b54      	ldr	r3, [pc, #336]	@ (8001c78 <GPS_getNMEA+0x174>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f107 015f 	add.w	r1, r7, #95	@ 0x5f
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b30:	4618      	mov	r0, r3
 8001b32:	f00b f855 	bl	800cbe0 <xQueueReceive>

		//UART_putchar(Q_buff);  // echo, for testing

		if (Q_char == '$') // gotcha, new datastring started
 8001b36:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001b3a:	2b24      	cmp	r3, #36	@ 0x24
 8001b3c:	d10a      	bne.n	8001b54 <GPS_getNMEA+0x50>
		{
			memset(MSG_buff, 0, sizeof(MSG_buff)); // clear buff
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	2253      	movs	r2, #83	@ 0x53
 8001b44:	2100      	movs	r1, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f00f fe39 	bl	80117be <memset>
			pos = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
			new_msg = TRUE; // from now on, chars are valid to receive
 8001b50:	2301      	movs	r3, #1
 8001b52:	66bb      	str	r3, [r7, #104]	@ 0x68
		}

		if (new_msg == FALSE) // char only valid if started by $
 8001b54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8088 	beq.w	8001c6c <GPS_getNMEA+0x168>
			continue;

		MSG_buff[pos] = Q_char; // copy char read from Q into the msg-buf
 8001b5c:	f897 105f 	ldrb.w	r1, [r7, #95]	@ 0x5f
 8001b60:	f107 020c 	add.w	r2, r7, #12
 8001b64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b66:	4413      	add	r3, r2
 8001b68:	460a      	mov	r2, r1
 8001b6a:	701a      	strb	r2, [r3, #0]

		// if pos==5, the message type (f.i. "$GPGSA) is complete, so we now we can determine
		// if we want the rest of the message... else we skip the rest characters
		if (pos == 5)
 8001b6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b6e:	2b05      	cmp	r3, #5
 8001b70:	d130      	bne.n	8001bd4 <GPS_getNMEA+0xd0>
		{
			msg_type = 0; // reset
 8001b72:	2300      	movs	r3, #0
 8001b74:	667b      	str	r3, [r7, #100]	@ 0x64

			// next, we decide which message types we want to interpret
			// and we set the message-type for later use...
			if      (!strncmp(&MSG_buff[1], "GNRMC", 5)) msg_type = eGNRMC;
 8001b76:	f107 030c 	add.w	r3, r7, #12
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	2205      	movs	r2, #5
 8001b7e:	493f      	ldr	r1, [pc, #252]	@ (8001c7c <GPS_getNMEA+0x178>)
 8001b80:	4618      	mov	r0, r3
 8001b82:	f00f fe31 	bl	80117e8 <strncmp>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <GPS_getNMEA+0x8e>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001b90:	e01a      	b.n	8001bc8 <GPS_getNMEA+0xc4>
			else if (!strncmp(&MSG_buff[1], "GPGSA", 5)) msg_type = eGPGSA;
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	3301      	adds	r3, #1
 8001b98:	2205      	movs	r2, #5
 8001b9a:	4939      	ldr	r1, [pc, #228]	@ (8001c80 <GPS_getNMEA+0x17c>)
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f00f fe23 	bl	80117e8 <strncmp>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d102      	bne.n	8001bae <GPS_getNMEA+0xaa>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	667b      	str	r3, [r7, #100]	@ 0x64
 8001bac:	e00c      	b.n	8001bc8 <GPS_getNMEA+0xc4>
			else if (!strncmp(&MSG_buff[1], "GNGGA", 5)) msg_type = eGNGGA;
 8001bae:	f107 030c 	add.w	r3, r7, #12
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	2205      	movs	r2, #5
 8001bb6:	4933      	ldr	r1, [pc, #204]	@ (8001c84 <GPS_getNMEA+0x180>)
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f00f fe15 	bl	80117e8 <strncmp>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <GPS_getNMEA+0xc4>
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	667b      	str	r3, [r7, #100]	@ 0x64

			if (!msg_type) // not an interesting message type
 8001bc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d102      	bne.n	8001bd4 <GPS_getNMEA+0xd0>
			{
				new_msg = FALSE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	66bb      	str	r3, [r7, #104]	@ 0x68
				continue;
 8001bd2:	e04c      	b.n	8001c6e <GPS_getNMEA+0x16a>
			}
		}

		// if we are here, we are reading the rest of the message into the msg_buff
		////////////////////////////////////////////////////////////////////////////
		if (pos >= GPS_MAXLEN - 1) // avoid overflow (should not happen, but still...)
 8001bd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001bd6:	2b51      	cmp	r3, #81	@ 0x51
 8001bd8:	dd02      	ble.n	8001be0 <GPS_getNMEA+0xdc>
		{
			new_msg = FALSE; // ignore it
 8001bda:	2300      	movs	r3, #0
 8001bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
			continue;
 8001bde:	e046      	b.n	8001c6e <GPS_getNMEA+0x16a>
		}

		if (MSG_buff[pos] == '\r') // end of message encountered - all messages end with <CR-13><LF-10>
 8001be0:	f107 020c 	add.w	r2, r7, #12
 8001be4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001be6:	4413      	add	r3, r2
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b0d      	cmp	r3, #13
 8001bec:	d13a      	bne.n	8001c64 <GPS_getNMEA+0x160>
		{
			MSG_buff[pos] = '\0';          // close string
 8001bee:	f107 020c 	add.w	r2, r7, #12
 8001bf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001bf4:	4413      	add	r3, r2
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
			cs = checksum_valid(MSG_buff); // note, checksumchars (eg "*43") are removed from string
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f88e 	bl	8001d20 <checksum_valid>
 8001c04:	6638      	str	r0, [r7, #96]	@ 0x60

			if (Uart_debug_out & GPS_DEBUG_OUT) // output to uart if wanted
 8001c06:	4b20      	ldr	r3, [pc, #128]	@ (8001c88 <GPS_getNMEA+0x184>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0310 	and.w	r3, r3, #16
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d010      	beq.n	8001c34 <GPS_getNMEA+0x130>
			{
				UART_puts("\r\nGPS (UART4): "); UART_puts(MSG_buff);
 8001c12:	481e      	ldr	r0, [pc, #120]	@ (8001c8c <GPS_getNMEA+0x188>)
 8001c14:	f000 fe44 	bl	80028a0 <UART_puts>
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 fe3f 	bl	80028a0 <UART_puts>
				UART_puts( cs ? " [cs:OK]\r\n" : " [cs:ERR]\r\n");
 8001c22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <GPS_getNMEA+0x128>
 8001c28:	4b19      	ldr	r3, [pc, #100]	@ (8001c90 <GPS_getNMEA+0x18c>)
 8001c2a:	e000      	b.n	8001c2e <GPS_getNMEA+0x12a>
 8001c2c:	4b19      	ldr	r3, [pc, #100]	@ (8001c94 <GPS_getNMEA+0x190>)
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 fe36 	bl	80028a0 <UART_puts>
			}

			if (cs) // checksum okay, so interpret the message
 8001c34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d011      	beq.n	8001c5e <GPS_getNMEA+0x15a>
			{
				switch(msg_type) // extract data from msg into right struct
 8001c3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d007      	beq.n	8001c50 <GPS_getNMEA+0x14c>
 8001c40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	dd0a      	ble.n	8001c5c <GPS_getNMEA+0x158>
 8001c46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c48:	3b02      	subs	r3, #2
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d806      	bhi.n	8001c5c <GPS_getNMEA+0x158>
				{
				case eGNRMC: fill_GNRMC(MSG_buff);
						     // use the data...
						     break;
				case eGPGSA:
				case eGNGGA: break;
 8001c4e:	e006      	b.n	8001c5e <GPS_getNMEA+0x15a>
				case eGNRMC: fill_GNRMC(MSG_buff);
 8001c50:	f107 030c 	add.w	r3, r7, #12
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff feb9 	bl	80019cc <fill_GNRMC>
						     break;
 8001c5a:	e000      	b.n	8001c5e <GPS_getNMEA+0x15a>
				default:     break;
 8001c5c:	bf00      	nop
				}
			}

			new_msg = FALSE; // new message possible
 8001c5e:	2300      	movs	r3, #0
 8001c60:	66bb      	str	r3, [r7, #104]	@ 0x68
			continue;
 8001c62:	e004      	b.n	8001c6e <GPS_getNMEA+0x16a>
		}
		pos++; // proceed reading next char from the queue
 8001c64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c66:	3301      	adds	r3, #1
 8001c68:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001c6a:	e75b      	b.n	8001b24 <GPS_getNMEA+0x20>
			continue;
 8001c6c:	bf00      	nop
		xQueueReceive(hGPS_Queue, &Q_char, portMAX_DELAY); // get one char from the q
 8001c6e:	e759      	b.n	8001b24 <GPS_getNMEA+0x20>
 8001c70:	08014350 	.word	0x08014350
 8001c74:	0801419c 	.word	0x0801419c
 8001c78:	2000044c 	.word	0x2000044c
 8001c7c:	080141a8 	.word	0x080141a8
 8001c80:	080141b0 	.word	0x080141b0
 8001c84:	080141b8 	.word	0x080141b8
 8001c88:	20000444 	.word	0x20000444
 8001c8c:	080141c0 	.word	0x080141c0
 8001c90:	080141d0 	.word	0x080141d0
 8001c94:	080141dc 	.word	0x080141dc

08001c98 <hex2int>:
}


// source: file:///C:/craigpeacock/NMEA-GPS
int hex2int(char *c)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	int value;

	value = hexchar2int(c[0]);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 f813 	bl	8001cd0 <hexchar2int>
 8001caa:	60f8      	str	r0, [r7, #12]
	value = value << 4;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	60fb      	str	r3, [r7, #12]
	value += hexchar2int(c[1]);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 f809 	bl	8001cd0 <hexchar2int>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]

	return value;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <hexchar2int>:


int hexchar2int(char c)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9')
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	2b2f      	cmp	r3, #47	@ 0x2f
 8001cde:	d905      	bls.n	8001cec <hexchar2int+0x1c>
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	2b39      	cmp	r3, #57	@ 0x39
 8001ce4:	d802      	bhi.n	8001cec <hexchar2int+0x1c>
        return (c - '0');
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	3b30      	subs	r3, #48	@ 0x30
 8001cea:	e013      	b.n	8001d14 <hexchar2int+0x44>
    if (c >= 'A' && c <= 'F')
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	2b40      	cmp	r3, #64	@ 0x40
 8001cf0:	d905      	bls.n	8001cfe <hexchar2int+0x2e>
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	2b46      	cmp	r3, #70	@ 0x46
 8001cf6:	d802      	bhi.n	8001cfe <hexchar2int+0x2e>
        return (c - 'A' + 10);
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	3b37      	subs	r3, #55	@ 0x37
 8001cfc:	e00a      	b.n	8001d14 <hexchar2int+0x44>
    if (c >= 'a' && c <= 'f')
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	2b60      	cmp	r3, #96	@ 0x60
 8001d02:	d905      	bls.n	8001d10 <hexchar2int+0x40>
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	2b66      	cmp	r3, #102	@ 0x66
 8001d08:	d802      	bhi.n	8001d10 <hexchar2int+0x40>
        return (c - 'a' + 10);
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	3b57      	subs	r3, #87	@ 0x57
 8001d0e:	e001      	b.n	8001d14 <hexchar2int+0x44>
    return (-1);
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <checksum_valid>:


// source: file:///C:/craigpeacock/NMEA-GPS
int checksum_valid(char *string)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	char *checksum_str;
	int checksum, i;
	unsigned char calculated_checksum = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	74fb      	strb	r3, [r7, #19]

	// Checksum is postcede by *
	if ((checksum_str = strchr(string, '*')))
 8001d2c:	212a      	movs	r1, #42	@ 0x2a
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f00f fd4d 	bl	80117ce <strchr>
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d022      	beq.n	8001d82 <checksum_valid+0x62>
	{
		*checksum_str = '\0'; // Remove checksum from string
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
		// Calculate checksum, starting after $ (i = 1)
		for (i = 1; i < strlen(string); i++)
 8001d42:	2301      	movs	r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	e009      	b.n	8001d5c <checksum_valid+0x3c>
			calculated_checksum = calculated_checksum ^ string[i];
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	781a      	ldrb	r2, [r3, #0]
 8001d50:	7cfb      	ldrb	r3, [r7, #19]
 8001d52:	4053      	eors	r3, r2
 8001d54:	74fb      	strb	r3, [r7, #19]
		for (i = 1; i < strlen(string); i++)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7fe fa37 	bl	80001d0 <strlen>
 8001d62:	4602      	mov	r2, r0
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d8ee      	bhi.n	8001d48 <checksum_valid+0x28>

		checksum = hex2int((char *)checksum_str+1);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff92 	bl	8001c98 <hex2int>
 8001d74:	60b8      	str	r0, [r7, #8]
		//printf("Checksum Str [%s], Checksum %02X, Calculated Checksum %02X\r\n",(char *)checksum_str+1, checksum, calculated_checksum);
		if (checksum == calculated_checksum)
 8001d76:	7cfb      	ldrb	r3, [r7, #19]
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d101      	bne.n	8001d82 <checksum_valid+0x62>
			return (1);
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <checksum_valid+0x64>
	}

	return (0);
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <GNRMC_Parser>:
extern GNRMC gnrmc; // global struct for GNRMC-messages
Data_Parser GNRMC_data;


void GNRMC_Parser(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
	if(!(gnrmc.status == 'A'))
 8001d92:	4b40      	ldr	r3, [pc, #256]	@ (8001e94 <GNRMC_Parser+0x108>)
 8001d94:	7c5b      	ldrb	r3, [r3, #17]
 8001d96:	2b41      	cmp	r3, #65	@ 0x41
 8001d98:	d006      	beq.n	8001da8 <GNRMC_Parser+0x1c>
		//return;

    xSemaphoreTake(hGNRMC_Struct_Sem, portMAX_DELAY); // wacht op toegang tot de mutex;
 8001d9a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e98 <GNRMC_Parser+0x10c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f04f 31ff 	mov.w	r1, #4294967295
 8001da2:	4618      	mov	r0, r3
 8001da4:	f00a fffe 	bl	800cda4 <xQueueSemaphoreTake>
    memset(&GNRMC_data, 0, sizeof(Data_Parser)); // clear the struct
 8001da8:	2220      	movs	r2, #32
 8001daa:	2100      	movs	r1, #0
 8001dac:	483b      	ldr	r0, [pc, #236]	@ (8001e9c <GNRMC_Parser+0x110>)
 8001dae:	f00f fd06 	bl	80117be <memset>

	GNRMC_data.latitude = atof(gnrmc.latitude);
 8001db2:	483b      	ldr	r0, [pc, #236]	@ (8001ea0 <GNRMC_Parser+0x114>)
 8001db4:	f00e fc82 	bl	80106bc <atof>
 8001db8:	eeb0 7a40 	vmov.f32	s14, s0
 8001dbc:	eef0 7a60 	vmov.f32	s15, s1
 8001dc0:	4b36      	ldr	r3, [pc, #216]	@ (8001e9c <GNRMC_Parser+0x110>)
 8001dc2:	ed83 7b00 	vstr	d7, [r3]
	GNRMC_data.longitude = atof(gnrmc.longitude);
 8001dc6:	4837      	ldr	r0, [pc, #220]	@ (8001ea4 <GNRMC_Parser+0x118>)
 8001dc8:	f00e fc78 	bl	80106bc <atof>
 8001dcc:	eeb0 7a40 	vmov.f32	s14, s0
 8001dd0:	eef0 7a60 	vmov.f32	s15, s1
 8001dd4:	4b31      	ldr	r3, [pc, #196]	@ (8001e9c <GNRMC_Parser+0x110>)
 8001dd6:	ed83 7b02 	vstr	d7, [r3, #8]
	GNRMC_data.speed = atof(gnrmc.speed);
 8001dda:	4833      	ldr	r0, [pc, #204]	@ (8001ea8 <GNRMC_Parser+0x11c>)
 8001ddc:	f00e fc6e 	bl	80106bc <atof>
 8001de0:	eeb0 7a40 	vmov.f32	s14, s0
 8001de4:	eef0 7a60 	vmov.f32	s15, s1
 8001de8:	4b2c      	ldr	r3, [pc, #176]	@ (8001e9c <GNRMC_Parser+0x110>)
 8001dea:	ed83 7b04 	vstr	d7, [r3, #16]
	GNRMC_data.course = atof(gnrmc.course);
 8001dee:	482f      	ldr	r0, [pc, #188]	@ (8001eac <GNRMC_Parser+0x120>)
 8001df0:	f00e fc64 	bl	80106bc <atof>
 8001df4:	eeb0 7a40 	vmov.f32	s14, s0
 8001df8:	eef0 7a60 	vmov.f32	s15, s1
 8001dfc:	4b27      	ldr	r3, [pc, #156]	@ (8001e9c <GNRMC_Parser+0x110>)
 8001dfe:	ed83 7b06 	vstr	d7, [r3, #24]

	//if (Uart_debug_out & GPS_DEBUG_OUT)
	 //	{
			char lat[sizeof(GNRMC_data.latitude)];
	 		sprintf(lat, "%d", GNRMC_data.latitude);
 8001e02:	4b26      	ldr	r3, [pc, #152]	@ (8001e9c <GNRMC_Parser+0x110>)
 8001e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e08:	f107 0018 	add.w	r0, r7, #24
 8001e0c:	4928      	ldr	r1, [pc, #160]	@ (8001eb0 <GNRMC_Parser+0x124>)
 8001e0e:	f00f fc71 	bl	80116f4 <siprintf>

	 		char lon[sizeof(GNRMC_data.longitude)];
	 		sprintf(lon, "%d", GNRMC_data.longitude);
 8001e12:	4b22      	ldr	r3, [pc, #136]	@ (8001e9c <GNRMC_Parser+0x110>)
 8001e14:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e18:	f107 0010 	add.w	r0, r7, #16
 8001e1c:	4924      	ldr	r1, [pc, #144]	@ (8001eb0 <GNRMC_Parser+0x124>)
 8001e1e:	f00f fc69 	bl	80116f4 <siprintf>

	 		char spe[sizeof(GNRMC_data.speed)];
	 		sprintf(spe, "%d", GNRMC_data.speed);
 8001e22:	4b1e      	ldr	r3, [pc, #120]	@ (8001e9c <GNRMC_Parser+0x110>)
 8001e24:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e28:	f107 0008 	add.w	r0, r7, #8
 8001e2c:	4920      	ldr	r1, [pc, #128]	@ (8001eb0 <GNRMC_Parser+0x124>)
 8001e2e:	f00f fc61 	bl	80116f4 <siprintf>

	 		char cou[sizeof(GNRMC_data.course)];
	 		sprintf(cou, "%d", GNRMC_data.course);
 8001e32:	4b1a      	ldr	r3, [pc, #104]	@ (8001e9c <GNRMC_Parser+0x110>)
 8001e34:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001e38:	4638      	mov	r0, r7
 8001e3a:	491d      	ldr	r1, [pc, #116]	@ (8001eb0 <GNRMC_Parser+0x124>)
 8001e3c:	f00f fc5a 	bl	80116f4 <siprintf>

			UART_puts("\r\n\t latitude double:\t\t"); UART_puts(lat);
 8001e40:	481c      	ldr	r0, [pc, #112]	@ (8001eb4 <GNRMC_Parser+0x128>)
 8001e42:	f000 fd2d 	bl	80028a0 <UART_puts>
 8001e46:	f107 0318 	add.w	r3, r7, #24
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fd28 	bl	80028a0 <UART_puts>
			UART_puts("\r\n\t longitude double:\t");  UART_puts(lon);
 8001e50:	4819      	ldr	r0, [pc, #100]	@ (8001eb8 <GNRMC_Parser+0x12c>)
 8001e52:	f000 fd25 	bl	80028a0 <UART_puts>
 8001e56:	f107 0310 	add.w	r3, r7, #16
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 fd20 	bl	80028a0 <UART_puts>
			UART_puts("\r\n\t speed double:    \t");  UART_puts(spe);
 8001e60:	4816      	ldr	r0, [pc, #88]	@ (8001ebc <GNRMC_Parser+0x130>)
 8001e62:	f000 fd1d 	bl	80028a0 <UART_puts>
 8001e66:	f107 0308 	add.w	r3, r7, #8
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 fd18 	bl	80028a0 <UART_puts>
			UART_puts("\r\n\t course double:   \t");  UART_puts(cou);
 8001e70:	4813      	ldr	r0, [pc, #76]	@ (8001ec0 <GNRMC_Parser+0x134>)
 8001e72:	f000 fd15 	bl	80028a0 <UART_puts>
 8001e76:	463b      	mov	r3, r7
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 fd11 	bl	80028a0 <UART_puts>
	 	//}

 	xSemaphoreGive(hGNRMC_Struct_Sem); // geef de mutex weer vrij voor een ander
 8001e7e:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <GNRMC_Parser+0x10c>)
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	2300      	movs	r3, #0
 8001e84:	2200      	movs	r2, #0
 8001e86:	2100      	movs	r1, #0
 8001e88:	f00a fd0a 	bl	800c8a0 <xQueueGenericSend>
}
 8001e8c:	bf00      	nop
 8001e8e:	3720      	adds	r7, #32
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000460 	.word	0x20000460
 8001e98:	20000454 	.word	0x20000454
 8001e9c:	200004a8 	.word	0x200004a8
 8001ea0:	20000472 	.word	0x20000472
 8001ea4:	2000047d 	.word	0x2000047d
 8001ea8:	20000488 	.word	0x20000488
 8001eac:	2000048e 	.word	0x2000048e
 8001eb0:	080141e8 	.word	0x080141e8
 8001eb4:	080141ec 	.word	0x080141ec
 8001eb8:	08014204 	.word	0x08014204
 8001ebc:	0801421c 	.word	0x0801421c
 8001ec0:	08014234 	.word	0x08014234

08001ec4 <LED_Task1>:
* @brief Tasks die ledjes manipuleren nadat ze eerst afgeschermd zijn met mutex semaphores.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task1 (void *argument)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8001ecc:	4820      	ldr	r0, [pc, #128]	@ (8001f50 <LED_Task1+0x8c>)
 8001ece:	f000 fce7 	bl	80028a0 <UART_puts>
 8001ed2:	4820      	ldr	r0, [pc, #128]	@ (8001f54 <LED_Task1+0x90>)
 8001ed4:	f000 fce4 	bl	80028a0 <UART_puts>
	int i, leds;

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); /* wacht op toegang tot de semaphore;
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f58 <LED_Task1+0x94>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f00a ff5f 	bl	800cda4 <xQueueSemaphoreTake>
	    * de code hieronder wordt alleen uitgevoerd nadat ik de mutex heb gekregen.
	    * andere tasks die op deze mutex wachten, kunnen pas door nadat ik de mutex
	    * heb vrijgegeven met Give.
	    */
		leds = 128; // start at led nr. 8
 8001ee6:	2380      	movs	r3, #128	@ 0x80
 8001ee8:	60bb      	str	r3, [r7, #8]
		for (i=0; i<8; i++, leds>>=1)
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	e01c      	b.n	8001f2a <LED_Task1+0x66>
		{
        	LED_put(leds); // set leds
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 fc87 	bl	8002808 <LED_put>
           	osDelay(os_delay);
 8001efa:	4b18      	ldr	r3, [pc, #96]	@ (8001f5c <LED_Task1+0x98>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f009 ff66 	bl	800bdd0 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 8001f04:	4b16      	ldr	r3, [pc, #88]	@ (8001f60 <LED_Task1+0x9c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d006      	beq.n	8001f1e <LED_Task1+0x5a>
			{
	    		UART_puts("\r\nM1 led: "); UART_putint(leds);
 8001f10:	4814      	ldr	r0, [pc, #80]	@ (8001f64 <LED_Task1+0xa0>)
 8001f12:	f000 fcc5 	bl	80028a0 <UART_puts>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 fcdd 	bl	80028d8 <UART_putint>
		for (i=0; i<8; i++, leds>>=1)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	3301      	adds	r3, #1
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	105b      	asrs	r3, r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2b07      	cmp	r3, #7
 8001f2e:	dddf      	ble.n	8001ef0 <LED_Task1+0x2c>
			}
   		}
     	xSemaphoreGive(hLED_Sem); // geef de semaphore weer vrij voor een ander
 8001f30:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <LED_Task1+0x94>)
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	2300      	movs	r3, #0
 8001f36:	2200      	movs	r2, #0
 8001f38:	2100      	movs	r1, #0
 8001f3a:	f00a fcb1 	bl	800c8a0 <xQueueGenericSend>
    	taskYIELD(); // done, force context switch, otherwise freeRTOS stays in this task
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f68 <LED_Task1+0xa4>)
 8001f40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	f3bf 8f4f 	dsb	sy
 8001f4a:	f3bf 8f6f 	isb	sy
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); /* wacht op toegang tot de semaphore;
 8001f4e:	e7c3      	b.n	8001ed8 <LED_Task1+0x14>
 8001f50:	0801435c 	.word	0x0801435c
 8001f54:	0801424c 	.word	0x0801424c
 8001f58:	20000450 	.word	0x20000450
 8001f5c:	20000218 	.word	0x20000218
 8001f60:	20000444 	.word	0x20000444
 8001f64:	08014258 	.word	0x08014258
 8001f68:	e000ed04 	.word	0xe000ed04

08001f6c <LED_Task2>:
* @brief Tasks die ledjes manipuleren nadat ze eerst afgeschermd zijn met mutex semaphores.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task2 (void *argument)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8001f74:	4820      	ldr	r0, [pc, #128]	@ (8001ff8 <LED_Task2+0x8c>)
 8001f76:	f000 fc93 	bl	80028a0 <UART_puts>
 8001f7a:	4820      	ldr	r0, [pc, #128]	@ (8001ffc <LED_Task2+0x90>)
 8001f7c:	f000 fc90 	bl	80028a0 <UART_puts>
	int i, leds;

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to enter
 8001f80:	4b1f      	ldr	r3, [pc, #124]	@ (8002000 <LED_Task2+0x94>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f04f 31ff 	mov.w	r1, #4294967295
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f00a ff0b 	bl	800cda4 <xQueueSemaphoreTake>
		leds = 1;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	60bb      	str	r3, [r7, #8]
		for (i=0; i<8; i++, leds<<=1)
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	e01c      	b.n	8001fd2 <LED_Task2+0x66>
		{
        	LED_put(leds); // set leds
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 fc33 	bl	8002808 <LED_put>
          	osDelay(os_delay);
 8001fa2:	4b18      	ldr	r3, [pc, #96]	@ (8002004 <LED_Task2+0x98>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f009 ff12 	bl	800bdd0 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 8001fac:	4b16      	ldr	r3, [pc, #88]	@ (8002008 <LED_Task2+0x9c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d006      	beq.n	8001fc6 <LED_Task2+0x5a>
			{
	    		UART_puts("\r\n\tM2 led: "); UART_putint(leds);
 8001fb8:	4814      	ldr	r0, [pc, #80]	@ (800200c <LED_Task2+0xa0>)
 8001fba:	f000 fc71 	bl	80028a0 <UART_puts>
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 fc89 	bl	80028d8 <UART_putint>
		for (i=0; i<8; i++, leds<<=1)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2b07      	cmp	r3, #7
 8001fd6:	dddf      	ble.n	8001f98 <LED_Task2+0x2c>
			}
   		}
     	xSemaphoreGive(hLED_Sem); // free mutex
 8001fd8:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <LED_Task2+0x94>)
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	2300      	movs	r3, #0
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	f00a fc5d 	bl	800c8a0 <xQueueGenericSend>
       	taskYIELD(); // done, force context switch, otherwise freeRTOS stays in this task
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <LED_Task2+0xa4>)
 8001fe8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	f3bf 8f4f 	dsb	sy
 8001ff2:	f3bf 8f6f 	isb	sy
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to enter
 8001ff6:	e7c3      	b.n	8001f80 <LED_Task2+0x14>
 8001ff8:	08014368 	.word	0x08014368
 8001ffc:	0801424c 	.word	0x0801424c
 8002000:	20000450 	.word	0x20000450
 8002004:	20000218 	.word	0x20000218
 8002008:	20000444 	.word	0x20000444
 800200c:	08014264 	.word	0x08014264
 8002010:	e000ed04 	.word	0xe000ed04

08002014 <LED_Task3>:
* Task 3 en 4 werken daarnaast nog met tasknotification.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task3 (void *argument)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	int          i, leds;
	osThreadId_t hTask4;

	if (!(hTask4 = xTaskGetHandle("LED_Task4")))
 800201c:	4830      	ldr	r0, [pc, #192]	@ (80020e0 <LED_Task3+0xcc>)
 800201e:	f00b ffe9 	bl	800dff4 <xTaskGetHandle>
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d102      	bne.n	8002030 <LED_Task3+0x1c>
	   error_HaltOS("Err:hTask4");
 800202a:	482e      	ldr	r0, [pc, #184]	@ (80020e4 <LED_Task3+0xd0>)
 800202c:	f7ff fab2 	bl	8001594 <error_HaltOS>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8002030:	482d      	ldr	r0, [pc, #180]	@ (80020e8 <LED_Task3+0xd4>)
 8002032:	f000 fc35 	bl	80028a0 <UART_puts>
 8002036:	482d      	ldr	r0, [pc, #180]	@ (80020ec <LED_Task3+0xd8>)
 8002038:	f000 fc32 	bl	80028a0 <UART_puts>

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to get in...
 800203c:	4b2c      	ldr	r3, [pc, #176]	@ (80020f0 <LED_Task3+0xdc>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f04f 31ff 	mov.w	r1, #4294967295
 8002044:	4618      	mov	r0, r3
 8002046:	f00a fead 	bl	800cda4 <xQueueSemaphoreTake>

	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	e02d      	b.n	80020ac <LED_Task3+0x98>
	    {
	    	if 		(i==0)	leds = 8+16; // zichtbaar: 1. waarde i, 2. welke leds aan gaan
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d102      	bne.n	800205c <LED_Task3+0x48>
 8002056:	2318      	movs	r3, #24
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	e00d      	b.n	8002078 <LED_Task3+0x64>
	    	else if (i==1)  leds = 4+32; // ... had ook met switch-case gekund
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d102      	bne.n	8002068 <LED_Task3+0x54>
 8002062:	2324      	movs	r3, #36	@ 0x24
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	e007      	b.n	8002078 <LED_Task3+0x64>
	    	else if (i==2)  leds = 2+64;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d102      	bne.n	8002074 <LED_Task3+0x60>
 800206e:	2342      	movs	r3, #66	@ 0x42
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	e001      	b.n	8002078 <LED_Task3+0x64>
	    	else 			leds = 1+128;
 8002074:	2381      	movs	r3, #129	@ 0x81
 8002076:	613b      	str	r3, [r7, #16]

	    	LED_put(leds);     // set leds
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	b29b      	uxth	r3, r3
 800207c:	4618      	mov	r0, r3
 800207e:	f000 fbc3 	bl	8002808 <LED_put>
	    	osDelay(os_delay); // snelheid bepalen, kan veranderd worden via user interface
 8002082:	4b1c      	ldr	r3, [pc, #112]	@ (80020f4 <LED_Task3+0xe0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f009 fea2 	bl	800bdd0 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 800208c:	4b1a      	ldr	r3, [pc, #104]	@ (80020f8 <LED_Task3+0xe4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <LED_Task3+0x92>
			{
				UART_puts("\r\n\t\tM3 led: "); UART_putint(leds);
 8002098:	4818      	ldr	r0, [pc, #96]	@ (80020fc <LED_Task3+0xe8>)
 800209a:	f000 fc01 	bl	80028a0 <UART_puts>
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fc19 	bl	80028d8 <UART_putint>
	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	3301      	adds	r3, #1
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	ddce      	ble.n	8002050 <LED_Task3+0x3c>
			}
	    }

     	xSemaphoreGive(hLED_Sem); // free mutex
 80020b2:	4b0f      	ldr	r3, [pc, #60]	@ (80020f0 <LED_Task3+0xdc>)
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	2300      	movs	r3, #0
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	f00a fbf0 	bl	800c8a0 <xQueueGenericSend>

     	xTaskNotifyGive(hTask4); // give the ball to mutextask4
 80020c0:	2300      	movs	r3, #0
 80020c2:	2202      	movs	r2, #2
 80020c4:	2100      	movs	r1, #0
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f00c fec4 	bl	800ee54 <xTaskGenericNotify>
		osDelay(200);
 80020cc:	20c8      	movs	r0, #200	@ 0xc8
 80020ce:	f009 fe7f 	bl	800bdd0 <osDelay>

		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for task 4
 80020d2:	f04f 31ff 	mov.w	r1, #4294967295
 80020d6:	2001      	movs	r0, #1
 80020d8:	f00c fe10 	bl	800ecfc <ulTaskNotifyTake>
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to get in...
 80020dc:	e7ae      	b.n	800203c <LED_Task3+0x28>
 80020de:	bf00      	nop
 80020e0:	08014270 	.word	0x08014270
 80020e4:	0801427c 	.word	0x0801427c
 80020e8:	08014374 	.word	0x08014374
 80020ec:	0801424c 	.word	0x0801424c
 80020f0:	20000450 	.word	0x20000450
 80020f4:	20000218 	.word	0x20000218
 80020f8:	20000444 	.word	0x20000444
 80020fc:	08014288 	.word	0x08014288

08002100 <LED_Task4>:
* Task 3 en 4 werken daarnaast nog met tasknotification.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task4 (void *argument)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	int          i, leds;
	osThreadId_t hTask3;

	if (!(hTask3 = xTaskGetHandle("LED_Task3")))
 8002108:	4830      	ldr	r0, [pc, #192]	@ (80021cc <LED_Task4+0xcc>)
 800210a:	f00b ff73 	bl	800dff4 <xTaskGetHandle>
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d102      	bne.n	800211c <LED_Task4+0x1c>
	   error_HaltOS("Err:hTask3");
 8002116:	482e      	ldr	r0, [pc, #184]	@ (80021d0 <LED_Task4+0xd0>)
 8002118:	f7ff fa3c 	bl	8001594 <error_HaltOS>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 800211c:	482d      	ldr	r0, [pc, #180]	@ (80021d4 <LED_Task4+0xd4>)
 800211e:	f000 fbbf 	bl	80028a0 <UART_puts>
 8002122:	482d      	ldr	r0, [pc, #180]	@ (80021d8 <LED_Task4+0xd8>)
 8002124:	f000 fbbc 	bl	80028a0 <UART_puts>

	while(TRUE)
	{
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for notification
 8002128:	f04f 31ff 	mov.w	r1, #4294967295
 800212c:	2001      	movs	r0, #1
 800212e:	f00c fde5 	bl	800ecfc <ulTaskNotifyTake>

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait for mutex
 8002132:	4b2a      	ldr	r3, [pc, #168]	@ (80021dc <LED_Task4+0xdc>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f04f 31ff 	mov.w	r1, #4294967295
 800213a:	4618      	mov	r0, r3
 800213c:	f00a fe32 	bl	800cda4 <xQueueSemaphoreTake>

	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	e02d      	b.n	80021a2 <LED_Task4+0xa2>
	    {
	    	if 		(i==0)	leds = 1+128; // zichtbaar: 1. waarde i, 2. welke leds aan gaan
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <LED_Task4+0x52>
 800214c:	2381      	movs	r3, #129	@ 0x81
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	e00d      	b.n	800216e <LED_Task4+0x6e>
	    	else if (i==1)  leds = 2+64;  // had ook met switch-case gekund, maar dit is korter...
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d102      	bne.n	800215e <LED_Task4+0x5e>
 8002158:	2342      	movs	r3, #66	@ 0x42
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	e007      	b.n	800216e <LED_Task4+0x6e>
	    	else if (i==2)  leds = 4+32;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d102      	bne.n	800216a <LED_Task4+0x6a>
 8002164:	2324      	movs	r3, #36	@ 0x24
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	e001      	b.n	800216e <LED_Task4+0x6e>
	    	else 			leds = 8+16;
 800216a:	2318      	movs	r3, #24
 800216c:	613b      	str	r3, [r7, #16]

	    	LED_put(leds);     // set leds
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	b29b      	uxth	r3, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f000 fb48 	bl	8002808 <LED_put>
	    	osDelay(os_delay); // snelheid bepalen, waarde os_delay kan veranderd worden via user interface
 8002178:	4b19      	ldr	r3, [pc, #100]	@ (80021e0 <LED_Task4+0xe0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f009 fe27 	bl	800bdd0 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 8002182:	4b18      	ldr	r3, [pc, #96]	@ (80021e4 <LED_Task4+0xe4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d006      	beq.n	800219c <LED_Task4+0x9c>
			{
				UART_puts("\r\n\t\t\tM4 led: "); UART_putint(leds);
 800218e:	4816      	ldr	r0, [pc, #88]	@ (80021e8 <LED_Task4+0xe8>)
 8002190:	f000 fb86 	bl	80028a0 <UART_puts>
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4618      	mov	r0, r3
 8002198:	f000 fb9e 	bl	80028d8 <UART_putint>
	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	3301      	adds	r3, #1
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	ddce      	ble.n	8002146 <LED_Task4+0x46>
			}
	    }

     	xSemaphoreGive(hLED_Sem); // free mutex
 80021a8:	4b0c      	ldr	r3, [pc, #48]	@ (80021dc <LED_Task4+0xdc>)
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	2300      	movs	r3, #0
 80021ae:	2200      	movs	r2, #0
 80021b0:	2100      	movs	r1, #0
 80021b2:	f00a fb75 	bl	800c8a0 <xQueueGenericSend>
		osDelay(200);
 80021b6:	20c8      	movs	r0, #200	@ 0xc8
 80021b8:	f009 fe0a 	bl	800bdd0 <osDelay>

    	xTaskNotifyGive(hTask3); // give the ball back to task 3
 80021bc:	2300      	movs	r3, #0
 80021be:	2202      	movs	r2, #2
 80021c0:	2100      	movs	r1, #0
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f00c fe46 	bl	800ee54 <xTaskGenericNotify>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for notification
 80021c8:	e7ae      	b.n	8002128 <LED_Task4+0x28>
 80021ca:	bf00      	nop
 80021cc:	08014298 	.word	0x08014298
 80021d0:	080142a4 	.word	0x080142a4
 80021d4:	08014380 	.word	0x08014380
 80021d8:	0801424c 	.word	0x0801424c
 80021dc:	20000450 	.word	0x20000450
 80021e0:	20000218 	.word	0x20000218
 80021e4:	20000444 	.word	0x20000444
 80021e8:	080142b0 	.word	0x080142b0

080021ec <Student_task1>:
* @brief Oefentask voor studenten
* @param argument, kan evt vanuit tasks gebruikt worden
* @return void
*/
void Student_task1 (void *argument)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b098      	sub	sp, #96	@ 0x60
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 80021f4:	4810      	ldr	r0, [pc, #64]	@ (8002238 <Student_task1+0x4c>)
 80021f6:	f000 fb53 	bl	80028a0 <UART_puts>
 80021fa:	4810      	ldr	r0, [pc, #64]	@ (800223c <Student_task1+0x50>)
 80021fc:	f000 fb50 	bl	80028a0 <UART_puts>
	char buf[80];
	unsigned int i = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	65fb      	str	r3, [r7, #92]	@ 0x5c

	while(TRUE)
	{
       	osDelay(1000);
 8002204:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002208:	f009 fde2 	bl	800bdd0 <osDelay>

		if (Uart_debug_out & STUDENT_DEBUG_OUT)
 800220c:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <Student_task1+0x54>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f5      	beq.n	8002204 <Student_task1+0x18>
		{
	       	sprintf(buf, "\r\n%s: %u", __func__, i++);
 8002218:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800221e:	f107 000c 	add.w	r0, r7, #12
 8002222:	4a05      	ldr	r2, [pc, #20]	@ (8002238 <Student_task1+0x4c>)
 8002224:	4907      	ldr	r1, [pc, #28]	@ (8002244 <Student_task1+0x58>)
 8002226:	f00f fa65 	bl	80116f4 <siprintf>
			UART_puts(buf);
 800222a:	f107 030c 	add.w	r3, r7, #12
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fb36 	bl	80028a0 <UART_puts>
       	osDelay(1000);
 8002234:	e7e6      	b.n	8002204 <Student_task1+0x18>
 8002236:	bf00      	nop
 8002238:	0801438c 	.word	0x0801438c
 800223c:	080142c0 	.word	0x080142c0
 8002240:	20000444 	.word	0x20000444
 8002244:	080142cc 	.word	0x080142cc

08002248 <BUZZER_put>:
}

// Maak een piepje met meegegeven lengte
// toevoeging om compatibel te blijven met ARM v4.2
void BUZZER_put(unsigned int time)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
    volatile unsigned int i;
    volatile unsigned int k=0;
 8002250:	2300      	movs	r3, #0
 8002252:	60bb      	str	r3, [r7, #8]

	while (k++<100)
 8002254:	e023      	b.n	800229e <BUZZER_put+0x56>
    {
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8002256:	2201      	movs	r2, #1
 8002258:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800225c:	4815      	ldr	r0, [pc, #84]	@ (80022b4 <BUZZER_put+0x6c>)
 800225e:	f001 fe3d 	bl	8003edc <HAL_GPIO_WritePin>
		for (i=0;i<(time+k);i++);
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	e002      	b.n	800226e <BUZZER_put+0x26>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3301      	adds	r3, #1
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	441a      	add	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	429a      	cmp	r2, r3
 8002278:	d8f6      	bhi.n	8002268 <BUZZER_put+0x20>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800227a:	2200      	movs	r2, #0
 800227c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002280:	480c      	ldr	r0, [pc, #48]	@ (80022b4 <BUZZER_put+0x6c>)
 8002282:	f001 fe2b 	bl	8003edc <HAL_GPIO_WritePin>
		for (i=0;(i<time+k);i++);
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	e002      	b.n	8002292 <BUZZER_put+0x4a>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3301      	adds	r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	441a      	add	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	429a      	cmp	r2, r3
 800229c:	d8f6      	bhi.n	800228c <BUZZER_put+0x44>
	while (k++<100)
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	60ba      	str	r2, [r7, #8]
 80022a4:	2b63      	cmp	r3, #99	@ 0x63
 80022a6:	d9d6      	bls.n	8002256 <BUZZER_put+0xe>
	}
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40020800 	.word	0x40020800

080022b8 <KEYS_init>:
void KEYS_init(void)
/* Keys initialize
 * In this function the ports are set for the keyboard.
 * The rows are outputs and the columns are input.
 */
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	603b      	str	r3, [r7, #0]
 80022c2:	4b18      	ldr	r3, [pc, #96]	@ (8002324 <KEYS_init+0x6c>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	4a17      	ldr	r2, [pc, #92]	@ (8002324 <KEYS_init+0x6c>)
 80022c8:	f043 0308 	orr.w	r3, r3, #8
 80022cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ce:	4b15      	ldr	r3, [pc, #84]	@ (8002324 <KEYS_init+0x6c>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpio;
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80022da:	2301      	movs	r3, #1
 80022dc:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e2:	2303      	movs	r3, #3
 80022e4:	613b      	str	r3, [r7, #16]

	gpio.Pin = KEY_ROW;
 80022e6:	f640 030e 	movw	r3, #2062	@ 0x80e
 80022ea:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(PKEY_ROW, &gpio);
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	4619      	mov	r1, r3
 80022f0:	480d      	ldr	r0, [pc, #52]	@ (8002328 <KEYS_init+0x70>)
 80022f2:	f001 fc3f 	bl	8003b74 <HAL_GPIO_Init>

	gpio.Pin = KEY_COL;
 80022f6:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80022fa:	607b      	str	r3, [r7, #4]
	gpio.Mode = GPIO_MODE_INPUT;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_PULLDOWN;
 8002300:	2302      	movs	r3, #2
 8002302:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PKEY_COL, &gpio);
 8002304:	1d3b      	adds	r3, r7, #4
 8002306:	4619      	mov	r1, r3
 8002308:	4807      	ldr	r0, [pc, #28]	@ (8002328 <KEYS_init+0x70>)
 800230a:	f001 fc33 	bl	8003b74 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_ROW, 0);
 800230e:	2200      	movs	r2, #0
 8002310:	f640 010e 	movw	r1, #2062	@ 0x80e
 8002314:	4804      	ldr	r0, [pc, #16]	@ (8002328 <KEYS_init+0x70>)
 8002316:	f001 fde1 	bl	8003edc <HAL_GPIO_WritePin>
}
 800231a:	bf00      	nop
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800
 8002328:	40020c00 	.word	0x40020c00

0800232c <KEYS_initISR>:

void KEYS_initISR(int hilo)
/* Keys initialize for ISR
 * Set all lines high
 * */
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, hilo);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800233e:	480e      	ldr	r0, [pc, #56]	@ (8002378 <KEYS_initISR+0x4c>)
 8002340:	f001 fdcc 	bl	8003edc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, hilo);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	2102      	movs	r1, #2
 800234c:	480a      	ldr	r0, [pc, #40]	@ (8002378 <KEYS_initISR+0x4c>)
 800234e:	f001 fdc5 	bl	8003edc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, hilo);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	461a      	mov	r2, r3
 8002358:	2108      	movs	r1, #8
 800235a:	4807      	ldr	r0, [pc, #28]	@ (8002378 <KEYS_initISR+0x4c>)
 800235c:	f001 fdbe 	bl	8003edc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, hilo);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	2104      	movs	r1, #4
 8002368:	4803      	ldr	r0, [pc, #12]	@ (8002378 <KEYS_initISR+0x4c>)
 800236a:	f001 fdb7 	bl	8003edc <HAL_GPIO_WritePin>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40020c00 	.word	0x40020c00

0800237c <KEYS_read>:
/* Keys read
 * This function reads which key is pressed.
 * It does so by making a row high and check if there is a connection with a column.
 * If there is a connection the value is returned.
 */
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	603b      	str	r3, [r7, #0]
	unsigned out = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 0);
 800238a:	2200      	movs	r2, #0
 800238c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002390:	4827      	ldr	r0, [pc, #156]	@ (8002430 <KEYS_read+0xb4>)
 8002392:	f001 fda3 	bl	8003edc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 1);
 8002396:	2201      	movs	r2, #1
 8002398:	2108      	movs	r1, #8
 800239a:	4825      	ldr	r0, [pc, #148]	@ (8002430 <KEYS_read+0xb4>)
 800239c:	f001 fd9e 	bl	8003edc <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 80023a0:	f000 f848 	bl	8002434 <KEYS_kolom>
 80023a4:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out= 12+key;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <KEYS_read+0x36>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	330c      	adds	r3, #12
 80023b0:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 0);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2108      	movs	r1, #8
 80023b6:	481e      	ldr	r0, [pc, #120]	@ (8002430 <KEYS_read+0xb4>)
 80023b8:	f001 fd90 	bl	8003edc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 1);
 80023bc:	2201      	movs	r2, #1
 80023be:	2104      	movs	r1, #4
 80023c0:	481b      	ldr	r0, [pc, #108]	@ (8002430 <KEYS_read+0xb4>)
 80023c2:	f001 fd8b 	bl	8003edc <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 80023c6:	f000 f835 	bl	8002434 <KEYS_kolom>
 80023ca:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 8+key;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d002      	beq.n	80023d8 <KEYS_read+0x5c>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	3308      	adds	r3, #8
 80023d6:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 0);
 80023d8:	2200      	movs	r2, #0
 80023da:	2104      	movs	r1, #4
 80023dc:	4814      	ldr	r0, [pc, #80]	@ (8002430 <KEYS_read+0xb4>)
 80023de:	f001 fd7d 	bl	8003edc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 1);
 80023e2:	2201      	movs	r2, #1
 80023e4:	2102      	movs	r1, #2
 80023e6:	4812      	ldr	r0, [pc, #72]	@ (8002430 <KEYS_read+0xb4>)
 80023e8:	f001 fd78 	bl	8003edc <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 80023ec:	f000 f822 	bl	8002434 <KEYS_kolom>
 80023f0:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 4+key;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <KEYS_read+0x82>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	3304      	adds	r3, #4
 80023fc:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 0);
 80023fe:	2200      	movs	r2, #0
 8002400:	2102      	movs	r1, #2
 8002402:	480b      	ldr	r0, [pc, #44]	@ (8002430 <KEYS_read+0xb4>)
 8002404:	f001 fd6a 	bl	8003edc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 1);
 8002408:	2201      	movs	r2, #1
 800240a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800240e:	4808      	ldr	r0, [pc, #32]	@ (8002430 <KEYS_read+0xb4>)
 8002410:	f001 fd64 	bl	8003edc <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 8002414:	f000 f80e 	bl	8002434 <KEYS_kolom>
 8002418:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = key;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <KEYS_read+0xa8>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	607b      	str	r3, [r7, #4]

	return out;
 8002424:	687b      	ldr	r3, [r7, #4]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40020c00 	.word	0x40020c00

08002434 <KEYS_kolom>:
unsigned int KEYS_kolom(void)
/* Keys Column
 * In this function the columns are checked if there is a connection.
 * If a column has a connection the return value is the column number.
 */
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K1) == 1) key = 1;
 800243e:	2140      	movs	r1, #64	@ 0x40
 8002440:	4814      	ldr	r0, [pc, #80]	@ (8002494 <KEYS_kolom+0x60>)
 8002442:	f001 fd33 	bl	8003eac <HAL_GPIO_ReadPin>
 8002446:	4603      	mov	r3, r0
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <KEYS_kolom+0x1c>
 800244c:	2301      	movs	r3, #1
 800244e:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K2) == 1) key = 2;
 8002450:	2180      	movs	r1, #128	@ 0x80
 8002452:	4810      	ldr	r0, [pc, #64]	@ (8002494 <KEYS_kolom+0x60>)
 8002454:	f001 fd2a 	bl	8003eac <HAL_GPIO_ReadPin>
 8002458:	4603      	mov	r3, r0
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <KEYS_kolom+0x2e>
 800245e:	2302      	movs	r3, #2
 8002460:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K3) == 1) key = 3;
 8002462:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002466:	480b      	ldr	r0, [pc, #44]	@ (8002494 <KEYS_kolom+0x60>)
 8002468:	f001 fd20 	bl	8003eac <HAL_GPIO_ReadPin>
 800246c:	4603      	mov	r3, r0
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <KEYS_kolom+0x42>
 8002472:	2303      	movs	r3, #3
 8002474:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K4) == 1) key = 4;
 8002476:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800247a:	4806      	ldr	r0, [pc, #24]	@ (8002494 <KEYS_kolom+0x60>)
 800247c:	f001 fd16 	bl	8003eac <HAL_GPIO_ReadPin>
 8002480:	4603      	mov	r3, r0
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <KEYS_kolom+0x56>
 8002486:	2304      	movs	r3, #4
 8002488:	607b      	str	r3, [r7, #4]
	return key;
 800248a:	687b      	ldr	r3, [r7, #4]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40020c00 	.word	0x40020c00

08002498 <ClearBits>:
static void LCD_writebyte(unsigned char data);

unsigned char curpos = 0; // remember cursorposition

void ClearBits(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_RESET);
 800249c:	2200      	movs	r2, #0
 800249e:	2108      	movs	r1, #8
 80024a0:	4809      	ldr	r0, [pc, #36]	@ (80024c8 <ClearBits+0x30>)
 80024a2:	f001 fd1b 	bl	8003edc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_RESET);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2110      	movs	r1, #16
 80024aa:	4807      	ldr	r0, [pc, #28]	@ (80024c8 <ClearBits+0x30>)
 80024ac:	f001 fd16 	bl	8003edc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_RESET);
 80024b0:	2200      	movs	r2, #0
 80024b2:	2120      	movs	r1, #32
 80024b4:	4804      	ldr	r0, [pc, #16]	@ (80024c8 <ClearBits+0x30>)
 80024b6:	f001 fd11 	bl	8003edc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_RESET);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2140      	movs	r1, #64	@ 0x40
 80024be:	4802      	ldr	r0, [pc, #8]	@ (80024c8 <ClearBits+0x30>)
 80024c0:	f001 fd0c 	bl	8003edc <HAL_GPIO_WritePin>
}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000

080024cc <LCD_clear>:
   LCD_writecontrol(0x02); // cursur home
   curpos=0;               // reset position
}

void LCD_clear(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
   LCD_writecontrol(0x01); // clearscreen
 80024d0:	2001      	movs	r0, #1
 80024d2:	f000 f967 	bl	80027a4 <LCD_writecontrol>
   curpos=0;               // reset position
 80024d6:	4b04      	ldr	r3, [pc, #16]	@ (80024e8 <LCD_clear+0x1c>)
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
   HAL_Delay(5);
 80024dc:	2005      	movs	r0, #5
 80024de:	f001 f9b1 	bl	8003844 <HAL_Delay>
//   busyflag();

}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200004c8 	.word	0x200004c8

080024ec <LCD_init>:


// init LCD
// Display wordt gebruikt in 4bits modus,2 regels, 5x7 dots font.
void LCD_init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;	// GPIO init structure
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	4b44      	ldr	r3, [pc, #272]	@ (8002608 <LCD_init+0x11c>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	4a43      	ldr	r2, [pc, #268]	@ (8002608 <LCD_init+0x11c>)
 80024fc:	f043 0310 	orr.w	r3, r3, #16
 8002500:	6313      	str	r3, [r2, #48]	@ 0x30
 8002502:	4b41      	ldr	r3, [pc, #260]	@ (8002608 <LCD_init+0x11c>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
 8002512:	4b3d      	ldr	r3, [pc, #244]	@ (8002608 <LCD_init+0x11c>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	4a3c      	ldr	r2, [pc, #240]	@ (8002608 <LCD_init+0x11c>)
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	6313      	str	r3, [r2, #48]	@ 0x30
 800251e:	4b3a      	ldr	r3, [pc, #232]	@ (8002608 <LCD_init+0x11c>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	607b      	str	r3, [r7, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	603b      	str	r3, [r7, #0]
 800252e:	4b36      	ldr	r3, [pc, #216]	@ (8002608 <LCD_init+0x11c>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	4a35      	ldr	r2, [pc, #212]	@ (8002608 <LCD_init+0x11c>)
 8002534:	f043 0308 	orr.w	r3, r3, #8
 8002538:	6313      	str	r3, [r2, #48]	@ 0x30
 800253a:	4b33      	ldr	r3, [pc, #204]	@ (8002608 <LCD_init+0x11c>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	683b      	ldr	r3, [r7, #0]

	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8002546:	2301      	movs	r3, #1
 8002548:	613b      	str	r3, [r7, #16]
	gpio.Pull = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254e:	2303      	movs	r3, #3
 8002550:	61bb      	str	r3, [r7, #24]
	gpio.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8002552:	2378      	movs	r3, #120	@ 0x78
 8002554:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &gpio);
 8002556:	f107 030c 	add.w	r3, r7, #12
 800255a:	4619      	mov	r1, r3
 800255c:	482b      	ldr	r0, [pc, #172]	@ (800260c <LCD_init+0x120>)
 800255e:	f001 fb09 	bl	8003b74 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 8002562:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002566:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &gpio);
 8002568:	f107 030c 	add.w	r3, r7, #12
 800256c:	4619      	mov	r1, r3
 800256e:	4828      	ldr	r0, [pc, #160]	@ (8002610 <LCD_init+0x124>)
 8002570:	f001 fb00 	bl	8003b74 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_0;
 8002574:	2301      	movs	r3, #1
 8002576:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &gpio);
 8002578:	f107 030c 	add.w	r3, r7, #12
 800257c:	4619      	mov	r1, r3
 800257e:	4825      	ldr	r0, [pc, #148]	@ (8002614 <LCD_init+0x128>)
 8002580:	f001 faf8 	bl	8003b74 <HAL_GPIO_Init>
//	GPIOE -> MODER |= ( 1 << 12 );
//	GPIOC -> MODER |= ( 1 << 26 );
//	GPIOC -> MODER |= ( 1 << 30 );
//	GPIOC -> MODER |= ( 1 << 28 );

	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 8002584:	2200      	movs	r2, #0
 8002586:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800258a:	4821      	ldr	r0, [pc, #132]	@ (8002610 <LCD_init+0x124>)
 800258c:	f001 fca6 	bl	8003edc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8002590:	2200      	movs	r2, #0
 8002592:	2101      	movs	r1, #1
 8002594:	481f      	ldr	r0, [pc, #124]	@ (8002614 <LCD_init+0x128>)
 8002596:	f001 fca1 	bl	8003edc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW, GPIO_PIN_RESET);
 800259a:	2200      	movs	r2, #0
 800259c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80025a0:	481b      	ldr	r0, [pc, #108]	@ (8002610 <LCD_init+0x124>)
 80025a2:	f001 fc9b 	bl	8003edc <HAL_GPIO_WritePin>

	HAL_Delay(15);//15
 80025a6:	200f      	movs	r0, #15
 80025a8:	f001 f94c 	bl	8003844 <HAL_Delay>

    LCD_writebyte(0x30); // function-set boot
 80025ac:	2030      	movs	r0, #48	@ 0x30
 80025ae:	f000 f8c7 	bl	8002740 <LCD_writebyte>
    HAL_Delay(70);
 80025b2:	2046      	movs	r0, #70	@ 0x46
 80025b4:	f001 f946 	bl	8003844 <HAL_Delay>
    LCD_writebyte(0x30);
 80025b8:	2030      	movs	r0, #48	@ 0x30
 80025ba:	f000 f8c1 	bl	8002740 <LCD_writebyte>
    LCD_writebyte(0x30);
 80025be:	2030      	movs	r0, #48	@ 0x30
 80025c0:	f000 f8be 	bl	8002740 <LCD_writebyte>

     // interface op 4 bits
    LCD_writebyte(0x02);
 80025c4:	2002      	movs	r0, #2
 80025c6:	f000 f8bb 	bl	8002740 <LCD_writebyte>
    HAL_Delay(5);
 80025ca:	2005      	movs	r0, #5
 80025cc:	f001 f93a 	bl	8003844 <HAL_Delay>

    LCD_writebyte(0x2C);  // function set
 80025d0:	202c      	movs	r0, #44	@ 0x2c
 80025d2:	f000 f8b5 	bl	8002740 <LCD_writebyte>
    HAL_Delay(15);
 80025d6:	200f      	movs	r0, #15
 80025d8:	f001 f934 	bl	8003844 <HAL_Delay>
    LCD_writebyte(0x0C);  // lcd aan
 80025dc:	200c      	movs	r0, #12
 80025de:	f000 f8af 	bl	8002740 <LCD_writebyte>
    HAL_Delay(15);
 80025e2:	200f      	movs	r0, #15
 80025e4:	f001 f92e 	bl	8003844 <HAL_Delay>
    LCD_writebyte(0x01);  // clear screen
 80025e8:	2001      	movs	r0, #1
 80025ea:	f000 f8a9 	bl	8002740 <LCD_writebyte>
    HAL_Delay(15);
 80025ee:	200f      	movs	r0, #15
 80025f0:	f001 f928 	bl	8003844 <HAL_Delay>
    LCD_writebyte(0x06);  // entry mode set
 80025f4:	2006      	movs	r0, #6
 80025f6:	f000 f8a3 	bl	8002740 <LCD_writebyte>
    HAL_Delay(15);
 80025fa:	200f      	movs	r0, #15
 80025fc:	f001 f922 	bl	8003844 <HAL_Delay>
}
 8002600:	bf00      	nop
 8002602:	3720      	adds	r7, #32
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40023800 	.word	0x40023800
 800260c:	40021000 	.word	0x40021000
 8002610:	40020800 	.word	0x40020800
 8002614:	40020c00 	.word	0x40020c00

08002618 <LCD_putchar>:

// Zet meegegeven karakter op het scherm
void LCD_putchar(char c)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET);
 8002622:	2201      	movs	r2, #1
 8002624:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002628:	480b      	ldr	r0, [pc, #44]	@ (8002658 <LCD_putchar+0x40>)
 800262a:	f001 fc57 	bl	8003edc <HAL_GPIO_WritePin>
    LCD_writebyte(c);
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	4618      	mov	r0, r3
 8002632:	f000 f885 	bl	8002740 <LCD_writebyte>
    if (++curpos==32) // remember cursorpos
 8002636:	4b09      	ldr	r3, [pc, #36]	@ (800265c <LCD_putchar+0x44>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	3301      	adds	r3, #1
 800263c:	b2da      	uxtb	r2, r3
 800263e:	4b07      	ldr	r3, [pc, #28]	@ (800265c <LCD_putchar+0x44>)
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	4b06      	ldr	r3, [pc, #24]	@ (800265c <LCD_putchar+0x44>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b20      	cmp	r3, #32
 8002648:	d102      	bne.n	8002650 <LCD_putchar+0x38>
    	curpos=0;
 800264a:	4b04      	ldr	r3, [pc, #16]	@ (800265c <LCD_putchar+0x44>)
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40020800 	.word	0x40020800
 800265c:	200004c8 	.word	0x200004c8

08002660 <LCD_put>:

// Zet meegegeven string op het scherm
void LCD_put(char *string)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
#ifdef eenregel
   	unsigned char j;
#endif
    unsigned char k;
	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    for (k=0; string[k]; k++)
 8002668:	2300      	movs	r3, #0
 800266a:	73bb      	strb	r3, [r7, #14]
 800266c:	e019      	b.n	80026a2 <LCD_put+0x42>
	{

#ifdef eenregel
    	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    	if(curpos==8) // at 8, goto next valid lcd-position
 800266e:	4b12      	ldr	r3, [pc, #72]	@ (80026b8 <LCD_put+0x58>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b08      	cmp	r3, #8
 8002674:	d10b      	bne.n	800268e <LCD_put+0x2e>
        for (j=0; j<32; j++) LCD_cursor_right();
 8002676:	2300      	movs	r3, #0
 8002678:	73fb      	strb	r3, [r7, #15]
 800267a:	e005      	b.n	8002688 <LCD_put+0x28>
 800267c:	2014      	movs	r0, #20
 800267e:	f000 f891 	bl	80027a4 <LCD_writecontrol>
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	3301      	adds	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	2b1f      	cmp	r3, #31
 800268c:	d9f6      	bls.n	800267c <LCD_put+0x1c>
#endif
        LCD_putchar(string[k]);
 800268e:	7bbb      	ldrb	r3, [r7, #14]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	4413      	add	r3, r2
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff ffbe 	bl	8002618 <LCD_putchar>
    for (k=0; string[k]; k++)
 800269c:	7bbb      	ldrb	r3, [r7, #14]
 800269e:	3301      	adds	r3, #1
 80026a0:	73bb      	strb	r3, [r7, #14]
 80026a2:	7bbb      	ldrb	r3, [r7, #14]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	4413      	add	r3, r2
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1df      	bne.n	800266e <LCD_put+0xe>
    }
}
 80026ae:	bf00      	nop
 80026b0:	bf00      	nop
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	200004c8 	.word	0x200004c8

080026bc <LCD_puts>:

void LCD_puts(char *c)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
    LCD_put(c);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff ffcb 	bl	8002660 <LCD_put>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <LCD_writenibble>:
	LCD_put(&s[i+1]); // first, set i to starting pos, undo one i-- too much
}

// Stuurt een 4-bits commando naar het display
static void LCD_writenibble(unsigned char data)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	71fb      	strb	r3, [r7, #7]
    ClearBits();
 80026de:	f7ff fedb 	bl	8002498 <ClearBits>

    if (data & 0x01)
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d004      	beq.n	80026f6 <LCD_writenibble+0x22>
		HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_SET);
 80026ec:	2201      	movs	r2, #1
 80026ee:	2140      	movs	r1, #64	@ 0x40
 80026f0:	4812      	ldr	r0, [pc, #72]	@ (800273c <LCD_writenibble+0x68>)
 80026f2:	f001 fbf3 	bl	8003edc <HAL_GPIO_WritePin>

	if (data & 0x02)
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d004      	beq.n	800270a <LCD_writenibble+0x36>
		HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_SET);
 8002700:	2201      	movs	r2, #1
 8002702:	2120      	movs	r1, #32
 8002704:	480d      	ldr	r0, [pc, #52]	@ (800273c <LCD_writenibble+0x68>)
 8002706:	f001 fbe9 	bl	8003edc <HAL_GPIO_WritePin>

	if (data & 0x04)
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d004      	beq.n	800271e <LCD_writenibble+0x4a>
		HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_SET);
 8002714:	2201      	movs	r2, #1
 8002716:	2110      	movs	r1, #16
 8002718:	4808      	ldr	r0, [pc, #32]	@ (800273c <LCD_writenibble+0x68>)
 800271a:	f001 fbdf 	bl	8003edc <HAL_GPIO_WritePin>

	if (data & 0x08)
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d004      	beq.n	8002732 <LCD_writenibble+0x5e>
		HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_SET);
 8002728:	2201      	movs	r2, #1
 800272a:	2108      	movs	r1, #8
 800272c:	4803      	ldr	r0, [pc, #12]	@ (800273c <LCD_writenibble+0x68>)
 800272e:	f001 fbd5 	bl	8003edc <HAL_GPIO_WritePin>

}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000

08002740 <LCD_writebyte>:


// Stuurt een 8-bits commando naar het display
static void LCD_writebyte(unsigned char data)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
    /* hoogste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 800274a:	2201      	movs	r2, #1
 800274c:	2101      	movs	r1, #1
 800274e:	4814      	ldr	r0, [pc, #80]	@ (80027a0 <LCD_writebyte+0x60>)
 8002750:	f001 fbc4 	bl	8003edc <HAL_GPIO_WritePin>
    LCD_writenibble((data>>4)&0x0F);
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	b2db      	uxtb	r3, r3
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff ffba 	bl	80026d4 <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8002760:	2200      	movs	r2, #0
 8002762:	2101      	movs	r1, #1
 8002764:	480e      	ldr	r0, [pc, #56]	@ (80027a0 <LCD_writebyte+0x60>)
 8002766:	f001 fbb9 	bl	8003edc <HAL_GPIO_WritePin>

    HAL_Delay(2);
 800276a:	2002      	movs	r0, #2
 800276c:	f001 f86a 	bl	8003844 <HAL_Delay>

    /* laagste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 8002770:	2201      	movs	r2, #1
 8002772:	2101      	movs	r1, #1
 8002774:	480a      	ldr	r0, [pc, #40]	@ (80027a0 <LCD_writebyte+0x60>)
 8002776:	f001 fbb1 	bl	8003edc <HAL_GPIO_WritePin>
    LCD_writenibble(data&0x0F);
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	f003 030f 	and.w	r3, r3, #15
 8002780:	b2db      	uxtb	r3, r3
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff ffa6 	bl	80026d4 <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8002788:	2200      	movs	r2, #0
 800278a:	2101      	movs	r1, #1
 800278c:	4804      	ldr	r0, [pc, #16]	@ (80027a0 <LCD_writebyte+0x60>)
 800278e:	f001 fba5 	bl	8003edc <HAL_GPIO_WritePin>

    HAL_Delay(2);
 8002792:	2002      	movs	r0, #2
 8002794:	f001 f856 	bl	8003844 <HAL_Delay>
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40020c00 	.word	0x40020c00

080027a4 <LCD_writecontrol>:

// Stuurt een commando naar het display
void LCD_writecontrol(unsigned char data)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 80027ae:	2200      	movs	r2, #0
 80027b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027b4:	4805      	ldr	r0, [pc, #20]	@ (80027cc <LCD_writecontrol+0x28>)
 80027b6:	f001 fb91 	bl	8003edc <HAL_GPIO_WritePin>
    LCD_writebyte(data);
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff ffbf 	bl	8002740 <LCD_writebyte>
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40020800 	.word	0x40020800

080027d0 <LED_init>:

/* LED Initialize
 * This function initializes the pins reset state
 */
void LED_init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, GPIO_PIN_RESET);
 80027d4:	2200      	movs	r2, #0
 80027d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027da:	4809      	ldr	r0, [pc, #36]	@ (8002800 <LED_init+0x30>)
 80027dc:	f001 fb7e 	bl	8003edc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 80027e0:	2200      	movs	r2, #0
 80027e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027e6:	4807      	ldr	r0, [pc, #28]	@ (8002804 <LED_init+0x34>)
 80027e8:	f001 fb78 	bl	8003edc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 80027ec:	2201      	movs	r2, #1
 80027ee:	2102      	movs	r1, #2
 80027f0:	4804      	ldr	r0, [pc, #16]	@ (8002804 <LED_init+0x34>)
 80027f2:	f001 fb73 	bl	8003edc <HAL_GPIO_WritePin>
    LED_put(0);
 80027f6:	2000      	movs	r0, #0
 80027f8:	f000 f806 	bl	8002808 <LED_put>
}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40020000 	.word	0x40020000
 8002804:	40020400 	.word	0x40020400

08002808 <LED_put>:

/* LED put
 * This function puts an 8 bit value to the LEDs, where left is the LSB
 */
void LED_put(unsigned short led_byte)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	80fb      	strh	r3, [r7, #6]
     unsigned int i;

     for(i=128; i>=1; i>>=1)
 8002812:	2380      	movs	r3, #128	@ 0x80
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	e01c      	b.n	8002852 <LED_put+0x4a>
     {
       	  HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, (led_byte & i) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002818:	88fa      	ldrh	r2, [r7, #6]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	bf14      	ite	ne
 8002822:	2301      	movne	r3, #1
 8002824:	2300      	moveq	r3, #0
 8002826:	b2db      	uxtb	r3, r3
 8002828:	461a      	mov	r2, r3
 800282a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800282e:	4811      	ldr	r0, [pc, #68]	@ (8002874 <LED_put+0x6c>)
 8002830:	f001 fb54 	bl	8003edc <HAL_GPIO_WritePin>

          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_SET);
 8002834:	2201      	movs	r2, #1
 8002836:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800283a:	480f      	ldr	r0, [pc, #60]	@ (8002878 <LED_put+0x70>)
 800283c:	f001 fb4e 	bl	8003edc <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 8002840:	2200      	movs	r2, #0
 8002842:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002846:	480c      	ldr	r0, [pc, #48]	@ (8002878 <LED_put+0x70>)
 8002848:	f001 fb48 	bl	8003edc <HAL_GPIO_WritePin>
     for(i=128; i>=1; i>>=1)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	085b      	lsrs	r3, r3, #1
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1df      	bne.n	8002818 <LED_put+0x10>
     }

     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 8002858:	2201      	movs	r2, #1
 800285a:	2102      	movs	r1, #2
 800285c:	4806      	ldr	r0, [pc, #24]	@ (8002878 <LED_put+0x70>)
 800285e:	f001 fb3d 	bl	8003edc <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_RESET);
 8002862:	2200      	movs	r2, #0
 8002864:	2102      	movs	r1, #2
 8002866:	4804      	ldr	r0, [pc, #16]	@ (8002878 <LED_put+0x70>)
 8002868:	f001 fb38 	bl	8003edc <HAL_GPIO_WritePin>
}
 800286c:	bf00      	nop
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40020000 	.word	0x40020000
 8002878:	40020400 	.word	0x40020400

0800287c <UART_putchar>:
 // done in CUBE

}

void UART_putchar(unsigned char c)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]
	 HAL_UART_Transmit(&huart2, &c, 1, 100);
 8002886:	1df9      	adds	r1, r7, #7
 8002888:	2364      	movs	r3, #100	@ 0x64
 800288a:	2201      	movs	r2, #1
 800288c:	4803      	ldr	r0, [pc, #12]	@ (800289c <UART_putchar+0x20>)
 800288e:	f004 fef8 	bl	8007682 <HAL_UART_Transmit>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000604 	.word	0x20000604

080028a0 <UART_puts>:

void UART_puts(const char *s)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
	volatile unsigned int i;

	for (i=0; s[i]; i++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	e009      	b.n	80028c2 <UART_puts+0x22>
		UART_putchar(s[i]);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	4413      	add	r3, r2
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff ffe0 	bl	800287c <UART_putchar>
	for (i=0; s[i]; i++)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3301      	adds	r3, #1
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	4413      	add	r3, r2
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1ef      	bne.n	80028ae <UART_puts+0xe>
}
 80028ce:	bf00      	nop
 80028d0:	bf00      	nop
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <UART_putint>:
    return rc;
}

// Stuurt meegegeven getal uit op de UART
void UART_putint(unsigned int num)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
    UART_putnum(num, 10);
 80028e0:	210a      	movs	r1, #10
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f804 	bl	80028f0 <UART_putnum>
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <UART_putnum>:

// Stuurt meegegeven getal uit op de UART in het aangegeven getallenstelsel
void UART_putnum(unsigned int num, unsigned char deel)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	70fb      	strb	r3, [r7, #3]
    static unsigned char chars[16] = "0123456789ABCDEF";
    unsigned int rest;
    signed char c[16];
    signed int i=15;
 80028fc:	230f      	movs	r3, #15
 80028fe:	61fb      	str	r3, [r7, #28]

    // Zet de integer om naar een string
    if(num==0)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d129      	bne.n	800295a <UART_putnum+0x6a>
    {
        c[i]='0';
 8002906:	f107 0208 	add.w	r2, r7, #8
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	4413      	add	r3, r2
 800290e:	2230      	movs	r2, #48	@ 0x30
 8002910:	701a      	strb	r2, [r3, #0]
        i--;
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3b01      	subs	r3, #1
 8002916:	61fb      	str	r3, [r7, #28]
 8002918:	e030      	b.n	800297c <UART_putnum+0x8c>
    }
    else
    {
        while(num>0)
        {
            rest=num%deel;
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002922:	fb01 f202 	mul.w	r2, r1, r2
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
            num/=deel;
 800292a:	78fb      	ldrb	r3, [r7, #3]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002932:	607b      	str	r3, [r7, #4]
            c[i]=chars[rest];
 8002934:	4a15      	ldr	r2, [pc, #84]	@ (800298c <UART_putnum+0x9c>)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	4413      	add	r3, r2
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	b259      	sxtb	r1, r3
 800293e:	f107 0208 	add.w	r2, r7, #8
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	4413      	add	r3, r2
 8002946:	460a      	mov	r2, r1
 8002948:	701a      	strb	r2, [r3, #0]
            i--;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3b01      	subs	r3, #1
 800294e:	61fb      	str	r3, [r7, #28]

            if(i==0) // it ends here
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <UART_putnum+0x6a>
                num=0;
 8002956:	2300      	movs	r3, #0
 8002958:	607b      	str	r3, [r7, #4]
        while(num>0)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1dc      	bne.n	800291a <UART_putnum+0x2a>
        }
    }

    // Stuur de string uit
    while(i<15)
 8002960:	e00c      	b.n	800297c <UART_putnum+0x8c>
    {
        i++;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3301      	adds	r3, #1
 8002966:	61fb      	str	r3, [r7, #28]
        UART_putchar(c[i]);
 8002968:	f107 0208 	add.w	r2, r7, #8
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	4413      	add	r3, r2
 8002970:	f993 3000 	ldrsb.w	r3, [r3]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff ff80 	bl	800287c <UART_putchar>
    while(i<15)
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	2b0e      	cmp	r3, #14
 8002980:	ddef      	ble.n	8002962 <UART_putnum+0x72>
    }
}
 8002982:	bf00      	nop
 8002984:	bf00      	nop
 8002986:	3720      	adds	r7, #32
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	2000021c 	.word	0x2000021c

08002990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002994:	f000 ff14 	bl	80037c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002998:	f000 f830 	bl	80029fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800299c:	f000 f980 	bl	8002ca0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80029a0:	f000 f896 	bl	8002ad0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80029a4:	f000 f8c2 	bl	8002b2c <MX_I2S3_Init>
  MX_SPI1_Init();
 80029a8:	f000 f8f0 	bl	8002b8c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80029ac:	f000 f94e 	bl	8002c4c <MX_USART2_UART_Init>
  MX_UART4_Init();
 80029b0:	f000 f922 	bl	8002bf8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  LCD_init();
 80029b4:	f7ff fd9a 	bl	80024ec <LCD_init>
  KEYS_init();
 80029b8:	f7ff fc7e 	bl	80022b8 <KEYS_init>
  KEYS_initISR(1); // set all lines high once
 80029bc:	2001      	movs	r0, #1
 80029be:	f7ff fcb5 	bl	800232c <KEYS_initISR>
  LED_init();
 80029c2:	f7ff ff05 	bl	80027d0 <LED_init>

  DisplayVersion();
 80029c6:	f7fe fd77 	bl	80014b8 <DisplayVersion>
  osDelay(500); // time to read version
 80029ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80029ce:	f009 f9ff 	bl	800bdd0 <osDelay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80029d2:	f009 f8e3 	bl	800bb9c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80029d6:	4a06      	ldr	r2, [pc, #24]	@ (80029f0 <main+0x60>)
 80029d8:	2100      	movs	r1, #0
 80029da:	4806      	ldr	r0, [pc, #24]	@ (80029f4 <main+0x64>)
 80029dc:	f009 f966 	bl	800bcac <osThreadNew>
 80029e0:	4603      	mov	r3, r0
 80029e2:	4a05      	ldr	r2, [pc, #20]	@ (80029f8 <main+0x68>)
 80029e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80029e6:	f009 f925 	bl	800bc34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029ea:	bf00      	nop
 80029ec:	e7fd      	b.n	80029ea <main+0x5a>
 80029ee:	bf00      	nop
 80029f0:	0801439c 	.word	0x0801439c
 80029f4:	08002fc9 	.word	0x08002fc9
 80029f8:	20000648 	.word	0x20000648

080029fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b094      	sub	sp, #80	@ 0x50
 8002a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a02:	f107 0320 	add.w	r3, r7, #32
 8002a06:	2230      	movs	r2, #48	@ 0x30
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f00e fed7 	bl	80117be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a10:	f107 030c 	add.w	r3, r7, #12
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a20:	2300      	movs	r3, #0
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	4b28      	ldr	r3, [pc, #160]	@ (8002ac8 <SystemClock_Config+0xcc>)
 8002a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a28:	4a27      	ldr	r2, [pc, #156]	@ (8002ac8 <SystemClock_Config+0xcc>)
 8002a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a30:	4b25      	ldr	r3, [pc, #148]	@ (8002ac8 <SystemClock_Config+0xcc>)
 8002a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	607b      	str	r3, [r7, #4]
 8002a40:	4b22      	ldr	r3, [pc, #136]	@ (8002acc <SystemClock_Config+0xd0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a21      	ldr	r2, [pc, #132]	@ (8002acc <SystemClock_Config+0xd0>)
 8002a46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8002acc <SystemClock_Config+0xd0>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a62:	2302      	movs	r3, #2
 8002a64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a66:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a6c:	2308      	movs	r3, #8
 8002a6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002a70:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002a74:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a76:	2302      	movs	r3, #2
 8002a78:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002a7a:	2307      	movs	r3, #7
 8002a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a7e:	f107 0320 	add.w	r3, r7, #32
 8002a82:	4618      	mov	r0, r3
 8002a84:	f003 fc70 	bl	8006368 <HAL_RCC_OscConfig>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002a8e:	f000 fadf 	bl	8003050 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a92:	230f      	movs	r3, #15
 8002a94:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a96:	2302      	movs	r3, #2
 8002a98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a9e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002aa2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002aa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002aa8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002aaa:	f107 030c 	add.w	r3, r7, #12
 8002aae:	2105      	movs	r1, #5
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f003 fed1 	bl	8006858 <HAL_RCC_ClockConfig>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002abc:	f000 fac8 	bl	8003050 <Error_Handler>
  }
}
 8002ac0:	bf00      	nop
 8002ac2:	3750      	adds	r7, #80	@ 0x50
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40007000 	.word	0x40007000

08002ad0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ad4:	4b12      	ldr	r3, [pc, #72]	@ (8002b20 <MX_I2C1_Init+0x50>)
 8002ad6:	4a13      	ldr	r2, [pc, #76]	@ (8002b24 <MX_I2C1_Init+0x54>)
 8002ad8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002ada:	4b11      	ldr	r3, [pc, #68]	@ (8002b20 <MX_I2C1_Init+0x50>)
 8002adc:	4a12      	ldr	r2, [pc, #72]	@ (8002b28 <MX_I2C1_Init+0x58>)
 8002ade:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b20 <MX_I2C1_Init+0x50>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b20 <MX_I2C1_Init+0x50>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002aec:	4b0c      	ldr	r3, [pc, #48]	@ (8002b20 <MX_I2C1_Init+0x50>)
 8002aee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002af2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002af4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b20 <MX_I2C1_Init+0x50>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002afa:	4b09      	ldr	r3, [pc, #36]	@ (8002b20 <MX_I2C1_Init+0x50>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b00:	4b07      	ldr	r3, [pc, #28]	@ (8002b20 <MX_I2C1_Init+0x50>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b06:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <MX_I2C1_Init+0x50>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b0c:	4804      	ldr	r0, [pc, #16]	@ (8002b20 <MX_I2C1_Init+0x50>)
 8002b0e:	f002 fe47 	bl	80057a0 <HAL_I2C_Init>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b18:	f000 fa9a 	bl	8003050 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b1c:	bf00      	nop
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	200004cc 	.word	0x200004cc
 8002b24:	40005400 	.word	0x40005400
 8002b28:	000186a0 	.word	0x000186a0

08002b2c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002b30:	4b13      	ldr	r3, [pc, #76]	@ (8002b80 <MX_I2S3_Init+0x54>)
 8002b32:	4a14      	ldr	r2, [pc, #80]	@ (8002b84 <MX_I2S3_Init+0x58>)
 8002b34:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002b36:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <MX_I2S3_Init+0x54>)
 8002b38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b3c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002b3e:	4b10      	ldr	r3, [pc, #64]	@ (8002b80 <MX_I2S3_Init+0x54>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002b44:	4b0e      	ldr	r3, [pc, #56]	@ (8002b80 <MX_I2S3_Init+0x54>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b80 <MX_I2S3_Init+0x54>)
 8002b4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b50:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8002b52:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <MX_I2S3_Init+0x54>)
 8002b54:	4a0c      	ldr	r2, [pc, #48]	@ (8002b88 <MX_I2S3_Init+0x5c>)
 8002b56:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002b58:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <MX_I2S3_Init+0x54>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002b5e:	4b08      	ldr	r3, [pc, #32]	@ (8002b80 <MX_I2S3_Init+0x54>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002b64:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <MX_I2S3_Init+0x54>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002b6a:	4805      	ldr	r0, [pc, #20]	@ (8002b80 <MX_I2S3_Init+0x54>)
 8002b6c:	f002 ff5c 	bl	8005a28 <HAL_I2S_Init>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8002b76:	f000 fa6b 	bl	8003050 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000520 	.word	0x20000520
 8002b84:	40003c00 	.word	0x40003c00
 8002b88:	00017700 	.word	0x00017700

08002b8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b90:	4b17      	ldr	r3, [pc, #92]	@ (8002bf0 <MX_SPI1_Init+0x64>)
 8002b92:	4a18      	ldr	r2, [pc, #96]	@ (8002bf4 <MX_SPI1_Init+0x68>)
 8002b94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b96:	4b16      	ldr	r3, [pc, #88]	@ (8002bf0 <MX_SPI1_Init+0x64>)
 8002b98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002b9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b9e:	4b14      	ldr	r3, [pc, #80]	@ (8002bf0 <MX_SPI1_Init+0x64>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ba4:	4b12      	ldr	r3, [pc, #72]	@ (8002bf0 <MX_SPI1_Init+0x64>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002baa:	4b11      	ldr	r3, [pc, #68]	@ (8002bf0 <MX_SPI1_Init+0x64>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf0 <MX_SPI1_Init+0x64>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf0 <MX_SPI1_Init+0x64>)
 8002bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf0 <MX_SPI1_Init+0x64>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf0 <MX_SPI1_Init+0x64>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bca:	4b09      	ldr	r3, [pc, #36]	@ (8002bf0 <MX_SPI1_Init+0x64>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bd0:	4b07      	ldr	r3, [pc, #28]	@ (8002bf0 <MX_SPI1_Init+0x64>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002bd6:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <MX_SPI1_Init+0x64>)
 8002bd8:	220a      	movs	r2, #10
 8002bda:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bdc:	4804      	ldr	r0, [pc, #16]	@ (8002bf0 <MX_SPI1_Init+0x64>)
 8002bde:	f004 f9cd 	bl	8006f7c <HAL_SPI_Init>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002be8:	f000 fa32 	bl	8003050 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bec:	bf00      	nop
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000568 	.word	0x20000568
 8002bf4:	40013000 	.word	0x40013000

08002bf8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002bfc:	4b11      	ldr	r3, [pc, #68]	@ (8002c44 <MX_UART4_Init+0x4c>)
 8002bfe:	4a12      	ldr	r2, [pc, #72]	@ (8002c48 <MX_UART4_Init+0x50>)
 8002c00:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002c02:	4b10      	ldr	r3, [pc, #64]	@ (8002c44 <MX_UART4_Init+0x4c>)
 8002c04:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002c08:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c44 <MX_UART4_Init+0x4c>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002c10:	4b0c      	ldr	r3, [pc, #48]	@ (8002c44 <MX_UART4_Init+0x4c>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002c16:	4b0b      	ldr	r3, [pc, #44]	@ (8002c44 <MX_UART4_Init+0x4c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002c1c:	4b09      	ldr	r3, [pc, #36]	@ (8002c44 <MX_UART4_Init+0x4c>)
 8002c1e:	220c      	movs	r2, #12
 8002c20:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c22:	4b08      	ldr	r3, [pc, #32]	@ (8002c44 <MX_UART4_Init+0x4c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c28:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <MX_UART4_Init+0x4c>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002c2e:	4805      	ldr	r0, [pc, #20]	@ (8002c44 <MX_UART4_Init+0x4c>)
 8002c30:	f004 fcda 	bl	80075e8 <HAL_UART_Init>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002c3a:	f000 fa09 	bl	8003050 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	200005c0 	.word	0x200005c0
 8002c48:	40004c00 	.word	0x40004c00

08002c4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c50:	4b11      	ldr	r3, [pc, #68]	@ (8002c98 <MX_USART2_UART_Init+0x4c>)
 8002c52:	4a12      	ldr	r2, [pc, #72]	@ (8002c9c <MX_USART2_UART_Init+0x50>)
 8002c54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c56:	4b10      	ldr	r3, [pc, #64]	@ (8002c98 <MX_USART2_UART_Init+0x4c>)
 8002c58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c98 <MX_USART2_UART_Init+0x4c>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c64:	4b0c      	ldr	r3, [pc, #48]	@ (8002c98 <MX_USART2_UART_Init+0x4c>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c98 <MX_USART2_UART_Init+0x4c>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c70:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <MX_USART2_UART_Init+0x4c>)
 8002c72:	220c      	movs	r2, #12
 8002c74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c76:	4b08      	ldr	r3, [pc, #32]	@ (8002c98 <MX_USART2_UART_Init+0x4c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c7c:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <MX_USART2_UART_Init+0x4c>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c82:	4805      	ldr	r0, [pc, #20]	@ (8002c98 <MX_USART2_UART_Init+0x4c>)
 8002c84:	f004 fcb0 	bl	80075e8 <HAL_UART_Init>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c8e:	f000 f9df 	bl	8003050 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000604 	.word	0x20000604
 8002c9c:	40004400 	.word	0x40004400

08002ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08c      	sub	sp, #48	@ 0x30
 8002ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca6:	f107 031c 	add.w	r3, r7, #28
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	605a      	str	r2, [r3, #4]
 8002cb0:	609a      	str	r2, [r3, #8]
 8002cb2:	60da      	str	r2, [r3, #12]
 8002cb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	4b8e      	ldr	r3, [pc, #568]	@ (8002ef4 <MX_GPIO_Init+0x254>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbe:	4a8d      	ldr	r2, [pc, #564]	@ (8002ef4 <MX_GPIO_Init+0x254>)
 8002cc0:	f043 0310 	orr.w	r3, r3, #16
 8002cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cc6:	4b8b      	ldr	r3, [pc, #556]	@ (8002ef4 <MX_GPIO_Init+0x254>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	61bb      	str	r3, [r7, #24]
 8002cd0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	4b87      	ldr	r3, [pc, #540]	@ (8002ef4 <MX_GPIO_Init+0x254>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cda:	4a86      	ldr	r2, [pc, #536]	@ (8002ef4 <MX_GPIO_Init+0x254>)
 8002cdc:	f043 0304 	orr.w	r3, r3, #4
 8002ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ce2:	4b84      	ldr	r3, [pc, #528]	@ (8002ef4 <MX_GPIO_Init+0x254>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	4b80      	ldr	r3, [pc, #512]	@ (8002ef4 <MX_GPIO_Init+0x254>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf6:	4a7f      	ldr	r2, [pc, #508]	@ (8002ef4 <MX_GPIO_Init+0x254>)
 8002cf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cfe:	4b7d      	ldr	r3, [pc, #500]	@ (8002ef4 <MX_GPIO_Init+0x254>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	4b79      	ldr	r3, [pc, #484]	@ (8002ef4 <MX_GPIO_Init+0x254>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d12:	4a78      	ldr	r2, [pc, #480]	@ (8002ef4 <MX_GPIO_Init+0x254>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d1a:	4b76      	ldr	r3, [pc, #472]	@ (8002ef4 <MX_GPIO_Init+0x254>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	4b72      	ldr	r3, [pc, #456]	@ (8002ef4 <MX_GPIO_Init+0x254>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2e:	4a71      	ldr	r2, [pc, #452]	@ (8002ef4 <MX_GPIO_Init+0x254>)
 8002d30:	f043 0302 	orr.w	r3, r3, #2
 8002d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d36:	4b6f      	ldr	r3, [pc, #444]	@ (8002ef4 <MX_GPIO_Init+0x254>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	607b      	str	r3, [r7, #4]
 8002d46:	4b6b      	ldr	r3, [pc, #428]	@ (8002ef4 <MX_GPIO_Init+0x254>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4a:	4a6a      	ldr	r2, [pc, #424]	@ (8002ef4 <MX_GPIO_Init+0x254>)
 8002d4c:	f043 0308 	orr.w	r3, r3, #8
 8002d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d52:	4b68      	ldr	r3, [pc, #416]	@ (8002ef4 <MX_GPIO_Init+0x254>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	607b      	str	r3, [r7, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2108      	movs	r1, #8
 8002d62:	4865      	ldr	r0, [pc, #404]	@ (8002ef8 <MX_GPIO_Init+0x258>)
 8002d64:	f001 f8ba 	bl	8003edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002d68:	2201      	movs	r2, #1
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	4863      	ldr	r0, [pc, #396]	@ (8002efc <MX_GPIO_Init+0x25c>)
 8002d6e:	f001 f8b5 	bl	8003edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RCK_Pin|LED_SCK_Pin, GPIO_PIN_RESET);
 8002d72:	2200      	movs	r2, #0
 8002d74:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002d78:	4861      	ldr	r0, [pc, #388]	@ (8002f00 <MX_GPIO_Init+0x260>)
 8002d7a:	f001 f8af 	bl	8003edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8002d84:	485f      	ldr	r0, [pc, #380]	@ (8002f04 <MX_GPIO_Init+0x264>)
 8002d86:	f001 f8a9 	bl	8003edc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d90:	485a      	ldr	r0, [pc, #360]	@ (8002efc <MX_GPIO_Init+0x25c>)
 8002d92:	f001 f8a3 	bl	8003edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SER_GPIO_Port, LED_SER_Pin, GPIO_PIN_RESET);
 8002d96:	2200      	movs	r2, #0
 8002d98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d9c:	485a      	ldr	r0, [pc, #360]	@ (8002f08 <MX_GPIO_Init+0x268>)
 8002d9e:	f001 f89d 	bl	8003edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002da2:	2308      	movs	r3, #8
 8002da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da6:	2301      	movs	r3, #1
 8002da8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dae:	2300      	movs	r3, #0
 8002db0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002db2:	f107 031c 	add.w	r3, r7, #28
 8002db6:	4619      	mov	r1, r3
 8002db8:	484f      	ldr	r0, [pc, #316]	@ (8002ef8 <MX_GPIO_Init+0x258>)
 8002dba:	f000 fedb 	bl	8003b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Buzzer_Pin;
 8002dbe:	f240 1301 	movw	r3, #257	@ 0x101
 8002dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dd0:	f107 031c 	add.w	r3, r7, #28
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4849      	ldr	r0, [pc, #292]	@ (8002efc <MX_GPIO_Init+0x25c>)
 8002dd8:	f000 fecc 	bl	8003b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002ddc:	2308      	movs	r3, #8
 8002dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de0:	2302      	movs	r3, #2
 8002de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de8:	2300      	movs	r3, #0
 8002dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002dec:	2305      	movs	r3, #5
 8002dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002df0:	f107 031c 	add.w	r3, r7, #28
 8002df4:	4619      	mov	r1, r3
 8002df6:	4841      	ldr	r0, [pc, #260]	@ (8002efc <MX_GPIO_Init+0x25c>)
 8002df8:	f000 febc 	bl	8003b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : Key_int_Pin */
  GPIO_InitStruct.Pin = Key_int_Pin;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e00:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Key_int_GPIO_Port, &GPIO_InitStruct);
 8002e0a:	f107 031c 	add.w	r3, r7, #28
 8002e0e:	4619      	mov	r1, r3
 8002e10:	483b      	ldr	r0, [pc, #236]	@ (8002f00 <MX_GPIO_Init+0x260>)
 8002e12:	f000 feaf 	bl	8003b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RCK_Pin LED_SCK_Pin */
  GPIO_InitStruct.Pin = LED_RCK_Pin|LED_SCK_Pin;
 8002e16:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e24:	2300      	movs	r3, #0
 8002e26:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e28:	f107 031c 	add.w	r3, r7, #28
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4834      	ldr	r0, [pc, #208]	@ (8002f00 <MX_GPIO_Init+0x260>)
 8002e30:	f000 fea0 	bl	8003b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002e34:	2304      	movs	r3, #4
 8002e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002e40:	f107 031c 	add.w	r3, r7, #28
 8002e44:	4619      	mov	r1, r3
 8002e46:	482e      	ldr	r0, [pc, #184]	@ (8002f00 <MX_GPIO_Init+0x260>)
 8002e48:	f000 fe94 	bl	8003b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002e4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	2302      	movs	r3, #2
 8002e54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e5e:	2305      	movs	r3, #5
 8002e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002e62:	f107 031c 	add.w	r3, r7, #28
 8002e66:	4619      	mov	r1, r3
 8002e68:	4825      	ldr	r0, [pc, #148]	@ (8002f00 <MX_GPIO_Init+0x260>)
 8002e6a:	f000 fe83 	bl	8003b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002e6e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8002e72:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e74:	2301      	movs	r3, #1
 8002e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e80:	f107 031c 	add.w	r3, r7, #28
 8002e84:	4619      	mov	r1, r3
 8002e86:	481f      	ldr	r0, [pc, #124]	@ (8002f04 <MX_GPIO_Init+0x264>)
 8002e88:	f000 fe74 	bl	8003b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_SER_Pin */
  GPIO_InitStruct.Pin = LED_SER_Pin;
 8002e8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e92:	2301      	movs	r3, #1
 8002e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_SER_GPIO_Port, &GPIO_InitStruct);
 8002e9e:	f107 031c 	add.w	r3, r7, #28
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4818      	ldr	r0, [pc, #96]	@ (8002f08 <MX_GPIO_Init+0x268>)
 8002ea6:	f000 fe65 	bl	8003b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002eaa:	2320      	movs	r3, #32
 8002eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002eb6:	f107 031c 	add.w	r3, r7, #28
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4811      	ldr	r0, [pc, #68]	@ (8002f04 <MX_GPIO_Init+0x264>)
 8002ebe:	f000 fe59 	bl	8003b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002ec6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002eca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002ed0:	f107 031c 	add.w	r3, r7, #28
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4808      	ldr	r0, [pc, #32]	@ (8002ef8 <MX_GPIO_Init+0x258>)
 8002ed8:	f000 fe4c 	bl	8003b74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002edc:	2200      	movs	r2, #0
 8002ede:	2105      	movs	r1, #5
 8002ee0:	2006      	movs	r0, #6
 8002ee2:	f000 fd8b 	bl	80039fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002ee6:	2006      	movs	r0, #6
 8002ee8:	f000 fda4 	bl	8003a34 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002eec:	bf00      	nop
 8002eee:	3730      	adds	r7, #48	@ 0x30
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40020800 	.word	0x40020800
 8002f00:	40020400 	.word	0x40020400
 8002f04:	40020c00 	.word	0x40020c00
 8002f08:	40020000 	.word	0x40020000

08002f0c <HAL_UART_RxCpltCallback>:
  * <p>Demonstreert: xQueueSendFromISR(); portYIELD_FROM_ISR();</p>
  * @param huart
  * @return void.
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
	unsigned char       uart4_char, uart2_char;
	BaseType_t          xHigherPriorityTaskWoken = pdFALSE;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60bb      	str	r3, [r7, #8]

	// receive terminal user commands
	if (huart->Instance == USART2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a23      	ldr	r2, [pc, #140]	@ (8002fac <HAL_UART_RxCpltCallback+0xa0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d11d      	bne.n	8002f5e <HAL_UART_RxCpltCallback+0x52>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart2, &uart2_char, 1);
 8002f22:	f107 030e 	add.w	r3, r7, #14
 8002f26:	2201      	movs	r2, #1
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4821      	ldr	r0, [pc, #132]	@ (8002fb0 <HAL_UART_RxCpltCallback+0xa4>)
 8002f2c:	f004 fc3b 	bl	80077a6 <HAL_UART_Receive_IT>

		/// Zet de byte op de UART_queue
		xQueueSendFromISR(hUART_Queue, &uart2_char, &xHigherPriorityTaskWoken);
 8002f30:	4b20      	ldr	r3, [pc, #128]	@ (8002fb4 <HAL_UART_RxCpltCallback+0xa8>)
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	f107 0208 	add.w	r2, r7, #8
 8002f38:	f107 010e 	add.w	r1, r7, #14
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f009 fdb1 	bl	800caa4 <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken != pdFALSE)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00a      	beq.n	8002f5e <HAL_UART_RxCpltCallback+0x52>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <HAL_UART_RxCpltCallback+0x52>
 8002f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb8 <HAL_UART_RxCpltCallback+0xac>)
 8002f50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	f3bf 8f6f 	isb	sy
	}

	// receive GPS-data
	if (huart->Instance == UART4)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a16      	ldr	r2, [pc, #88]	@ (8002fbc <HAL_UART_RxCpltCallback+0xb0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d11d      	bne.n	8002fa4 <HAL_UART_RxCpltCallback+0x98>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart4, &uart4_char, 1);
 8002f68:	f107 030f 	add.w	r3, r7, #15
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4813      	ldr	r0, [pc, #76]	@ (8002fc0 <HAL_UART_RxCpltCallback+0xb4>)
 8002f72:	f004 fc18 	bl	80077a6 <HAL_UART_Receive_IT>

		/// Zet de byte op de GPS_queue
		xQueueSendFromISR(hGPS_Queue, &uart4_char, &xHigherPriorityTaskWoken);
 8002f76:	4b13      	ldr	r3, [pc, #76]	@ (8002fc4 <HAL_UART_RxCpltCallback+0xb8>)
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	f107 0208 	add.w	r2, r7, #8
 8002f7e:	f107 010f 	add.w	r1, r7, #15
 8002f82:	2300      	movs	r3, #0
 8002f84:	f009 fd8e 	bl	800caa4 <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken != pdFALSE)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_UART_RxCpltCallback+0x98>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d007      	beq.n	8002fa4 <HAL_UART_RxCpltCallback+0x98>
 8002f94:	4b08      	ldr	r3, [pc, #32]	@ (8002fb8 <HAL_UART_RxCpltCallback+0xac>)
 8002f96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	f3bf 8f6f 	isb	sy
	}

}
 8002fa4:	bf00      	nop
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40004400 	.word	0x40004400
 8002fb0:	20000604 	.word	0x20000604
 8002fb4:	20000448 	.word	0x20000448
 8002fb8:	e000ed04 	.word	0xe000ed04
 8002fbc:	40004c00 	.word	0x40004c00
 8002fc0:	200005c0 	.word	0x200005c0
 8002fc4:	2000044c 	.word	0x2000044c

08002fc8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8002fd0:	f00d f872 	bl	80100b8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  unsigned char byte1, byte2;

  CreateHandles();
 8002fd4:	f7fe faf6 	bl	80015c4 <CreateHandles>
  CreateTasks();
 8002fd8:	f7fe fb94 	bl	8001704 <CreateTasks>

  // start the interrupt handlers after all handles are created
  HAL_UART_Receive_IT(&huart2, &byte2, 1); //start the UART2 interrupt engine for reading
 8002fdc:	f107 030e 	add.w	r3, r7, #14
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	480d      	ldr	r0, [pc, #52]	@ (800301c <StartDefaultTask+0x54>)
 8002fe6:	f004 fbde 	bl	80077a6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &byte1, 1); //start the UART4 interrupt engine GPS
 8002fea:	f107 030f 	add.w	r3, r7, #15
 8002fee:	2201      	movs	r2, #1
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	480b      	ldr	r0, [pc, #44]	@ (8003020 <StartDefaultTask+0x58>)
 8002ff4:	f004 fbd7 	bl	80077a6 <HAL_UART_Receive_IT>

  UART_putint(byte2); UART_puts("\r\n"); // deze byte (de eerste) is nog een irritante bug.
 8002ff8:	7bbb      	ldrb	r3, [r7, #14]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fc6c 	bl	80028d8 <UART_putint>
 8003000:	4808      	ldr	r0, [pc, #32]	@ (8003024 <StartDefaultTask+0x5c>)
 8003002:	f7ff fc4d 	bl	80028a0 <UART_puts>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003006:	2001      	movs	r0, #1
 8003008:	f008 fee2 	bl	800bdd0 <osDelay>
    vTaskDelete(defaultTaskHandle); // remove this default task
 800300c:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <StartDefaultTask+0x60>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f00a fb9d 	bl	800d750 <vTaskDelete>
    osDelay(1);
 8003016:	bf00      	nop
 8003018:	e7f5      	b.n	8003006 <StartDefaultTask+0x3e>
 800301a:	bf00      	nop
 800301c:	20000604 	.word	0x20000604
 8003020:	200005c0 	.word	0x200005c0
 8003024:	080142e4 	.word	0x080142e4
 8003028:	20000648 	.word	0x20000648

0800302c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a04      	ldr	r2, [pc, #16]	@ (800304c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d101      	bne.n	8003042 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800303e:	f000 fbe1 	bl	8003804 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40010000 	.word	0x40010000

08003050 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003054:	b672      	cpsid	i
}
 8003056:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003058:	bf00      	nop
 800305a:	e7fd      	b.n	8003058 <Error_Handler+0x8>

0800305c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	607b      	str	r3, [r7, #4]
 8003066:	4b12      	ldr	r3, [pc, #72]	@ (80030b0 <HAL_MspInit+0x54>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306a:	4a11      	ldr	r2, [pc, #68]	@ (80030b0 <HAL_MspInit+0x54>)
 800306c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003070:	6453      	str	r3, [r2, #68]	@ 0x44
 8003072:	4b0f      	ldr	r3, [pc, #60]	@ (80030b0 <HAL_MspInit+0x54>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003076:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800307a:	607b      	str	r3, [r7, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	603b      	str	r3, [r7, #0]
 8003082:	4b0b      	ldr	r3, [pc, #44]	@ (80030b0 <HAL_MspInit+0x54>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	4a0a      	ldr	r2, [pc, #40]	@ (80030b0 <HAL_MspInit+0x54>)
 8003088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800308c:	6413      	str	r3, [r2, #64]	@ 0x40
 800308e:	4b08      	ldr	r3, [pc, #32]	@ (80030b0 <HAL_MspInit+0x54>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800309a:	2200      	movs	r2, #0
 800309c:	210f      	movs	r1, #15
 800309e:	f06f 0001 	mvn.w	r0, #1
 80030a2:	f000 fcab 	bl	80039fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800

080030b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	@ 0x28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030bc:	f107 0314 	add.w	r3, r7, #20
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	60da      	str	r2, [r3, #12]
 80030ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a19      	ldr	r2, [pc, #100]	@ (8003138 <HAL_I2C_MspInit+0x84>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d12c      	bne.n	8003130 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	613b      	str	r3, [r7, #16]
 80030da:	4b18      	ldr	r3, [pc, #96]	@ (800313c <HAL_I2C_MspInit+0x88>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030de:	4a17      	ldr	r2, [pc, #92]	@ (800313c <HAL_I2C_MspInit+0x88>)
 80030e0:	f043 0302 	orr.w	r3, r3, #2
 80030e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030e6:	4b15      	ldr	r3, [pc, #84]	@ (800313c <HAL_I2C_MspInit+0x88>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80030f2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80030f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030f8:	2312      	movs	r3, #18
 80030fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030fc:	2301      	movs	r3, #1
 80030fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003100:	2300      	movs	r3, #0
 8003102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003104:	2304      	movs	r3, #4
 8003106:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003108:	f107 0314 	add.w	r3, r7, #20
 800310c:	4619      	mov	r1, r3
 800310e:	480c      	ldr	r0, [pc, #48]	@ (8003140 <HAL_I2C_MspInit+0x8c>)
 8003110:	f000 fd30 	bl	8003b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003114:	2300      	movs	r3, #0
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	4b08      	ldr	r3, [pc, #32]	@ (800313c <HAL_I2C_MspInit+0x88>)
 800311a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311c:	4a07      	ldr	r2, [pc, #28]	@ (800313c <HAL_I2C_MspInit+0x88>)
 800311e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003122:	6413      	str	r3, [r2, #64]	@ 0x40
 8003124:	4b05      	ldr	r3, [pc, #20]	@ (800313c <HAL_I2C_MspInit+0x88>)
 8003126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003128:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003130:	bf00      	nop
 8003132:	3728      	adds	r7, #40	@ 0x28
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40005400 	.word	0x40005400
 800313c:	40023800 	.word	0x40023800
 8003140:	40020400 	.word	0x40020400

08003144 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b08e      	sub	sp, #56	@ 0x38
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800314c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	60da      	str	r2, [r3, #12]
 800315a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800315c:	f107 0314 	add.w	r3, r7, #20
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a31      	ldr	r2, [pc, #196]	@ (8003234 <HAL_I2S_MspInit+0xf0>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d15a      	bne.n	800322a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003174:	2301      	movs	r3, #1
 8003176:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8003178:	23c0      	movs	r3, #192	@ 0xc0
 800317a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800317c:	2302      	movs	r3, #2
 800317e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003180:	f107 0314 	add.w	r3, r7, #20
 8003184:	4618      	mov	r0, r3
 8003186:	f003 fdb9 	bl	8006cfc <HAL_RCCEx_PeriphCLKConfig>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8003190:	f7ff ff5e 	bl	8003050 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003194:	2300      	movs	r3, #0
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	4b27      	ldr	r3, [pc, #156]	@ (8003238 <HAL_I2S_MspInit+0xf4>)
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	4a26      	ldr	r2, [pc, #152]	@ (8003238 <HAL_I2S_MspInit+0xf4>)
 800319e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80031a4:	4b24      	ldr	r3, [pc, #144]	@ (8003238 <HAL_I2S_MspInit+0xf4>)
 80031a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	4b20      	ldr	r3, [pc, #128]	@ (8003238 <HAL_I2S_MspInit+0xf4>)
 80031b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003238 <HAL_I2S_MspInit+0xf4>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6313      	str	r3, [r2, #48]	@ 0x30
 80031c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003238 <HAL_I2S_MspInit+0xf4>)
 80031c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031cc:	2300      	movs	r3, #0
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	4b19      	ldr	r3, [pc, #100]	@ (8003238 <HAL_I2S_MspInit+0xf4>)
 80031d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d4:	4a18      	ldr	r2, [pc, #96]	@ (8003238 <HAL_I2S_MspInit+0xf4>)
 80031d6:	f043 0304 	orr.w	r3, r3, #4
 80031da:	6313      	str	r3, [r2, #48]	@ 0x30
 80031dc:	4b16      	ldr	r3, [pc, #88]	@ (8003238 <HAL_I2S_MspInit+0xf4>)
 80031de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80031e8:	2310      	movs	r3, #16
 80031ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ec:	2302      	movs	r3, #2
 80031ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f4:	2300      	movs	r3, #0
 80031f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031f8:	2306      	movs	r3, #6
 80031fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80031fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003200:	4619      	mov	r1, r3
 8003202:	480e      	ldr	r0, [pc, #56]	@ (800323c <HAL_I2S_MspInit+0xf8>)
 8003204:	f000 fcb6 	bl	8003b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003208:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800320c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320e:	2302      	movs	r3, #2
 8003210:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003212:	2300      	movs	r3, #0
 8003214:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003216:	2300      	movs	r3, #0
 8003218:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800321a:	2306      	movs	r3, #6
 800321c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800321e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003222:	4619      	mov	r1, r3
 8003224:	4806      	ldr	r0, [pc, #24]	@ (8003240 <HAL_I2S_MspInit+0xfc>)
 8003226:	f000 fca5 	bl	8003b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800322a:	bf00      	nop
 800322c:	3738      	adds	r7, #56	@ 0x38
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40003c00 	.word	0x40003c00
 8003238:	40023800 	.word	0x40023800
 800323c:	40020000 	.word	0x40020000
 8003240:	40020800 	.word	0x40020800

08003244 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08a      	sub	sp, #40	@ 0x28
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800324c:	f107 0314 	add.w	r3, r7, #20
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	60da      	str	r2, [r3, #12]
 800325a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a19      	ldr	r2, [pc, #100]	@ (80032c8 <HAL_SPI_MspInit+0x84>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d12b      	bne.n	80032be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	4b18      	ldr	r3, [pc, #96]	@ (80032cc <HAL_SPI_MspInit+0x88>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326e:	4a17      	ldr	r2, [pc, #92]	@ (80032cc <HAL_SPI_MspInit+0x88>)
 8003270:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003274:	6453      	str	r3, [r2, #68]	@ 0x44
 8003276:	4b15      	ldr	r3, [pc, #84]	@ (80032cc <HAL_SPI_MspInit+0x88>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	4b11      	ldr	r3, [pc, #68]	@ (80032cc <HAL_SPI_MspInit+0x88>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328a:	4a10      	ldr	r2, [pc, #64]	@ (80032cc <HAL_SPI_MspInit+0x88>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6313      	str	r3, [r2, #48]	@ 0x30
 8003292:	4b0e      	ldr	r3, [pc, #56]	@ (80032cc <HAL_SPI_MspInit+0x88>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800329e:	23e0      	movs	r3, #224	@ 0xe0
 80032a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a2:	2302      	movs	r3, #2
 80032a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032aa:	2300      	movs	r3, #0
 80032ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032ae:	2305      	movs	r3, #5
 80032b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b2:	f107 0314 	add.w	r3, r7, #20
 80032b6:	4619      	mov	r1, r3
 80032b8:	4805      	ldr	r0, [pc, #20]	@ (80032d0 <HAL_SPI_MspInit+0x8c>)
 80032ba:	f000 fc5b 	bl	8003b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80032be:	bf00      	nop
 80032c0:	3728      	adds	r7, #40	@ 0x28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40013000 	.word	0x40013000
 80032cc:	40023800 	.word	0x40023800
 80032d0:	40020000 	.word	0x40020000

080032d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08c      	sub	sp, #48	@ 0x30
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032dc:	f107 031c 	add.w	r3, r7, #28
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	60da      	str	r2, [r3, #12]
 80032ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a3a      	ldr	r2, [pc, #232]	@ (80033dc <HAL_UART_MspInit+0x108>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d134      	bne.n	8003360 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	61bb      	str	r3, [r7, #24]
 80032fa:	4b39      	ldr	r3, [pc, #228]	@ (80033e0 <HAL_UART_MspInit+0x10c>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	4a38      	ldr	r2, [pc, #224]	@ (80033e0 <HAL_UART_MspInit+0x10c>)
 8003300:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003304:	6413      	str	r3, [r2, #64]	@ 0x40
 8003306:	4b36      	ldr	r3, [pc, #216]	@ (80033e0 <HAL_UART_MspInit+0x10c>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800330e:	61bb      	str	r3, [r7, #24]
 8003310:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	4b32      	ldr	r3, [pc, #200]	@ (80033e0 <HAL_UART_MspInit+0x10c>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	4a31      	ldr	r2, [pc, #196]	@ (80033e0 <HAL_UART_MspInit+0x10c>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	6313      	str	r3, [r2, #48]	@ 0x30
 8003322:	4b2f      	ldr	r3, [pc, #188]	@ (80033e0 <HAL_UART_MspInit+0x10c>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800332e:	2303      	movs	r3, #3
 8003330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003332:	2302      	movs	r3, #2
 8003334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003336:	2300      	movs	r3, #0
 8003338:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800333a:	2303      	movs	r3, #3
 800333c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800333e:	2308      	movs	r3, #8
 8003340:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003342:	f107 031c 	add.w	r3, r7, #28
 8003346:	4619      	mov	r1, r3
 8003348:	4826      	ldr	r0, [pc, #152]	@ (80033e4 <HAL_UART_MspInit+0x110>)
 800334a:	f000 fc13 	bl	8003b74 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800334e:	2200      	movs	r2, #0
 8003350:	2105      	movs	r1, #5
 8003352:	2034      	movs	r0, #52	@ 0x34
 8003354:	f000 fb52 	bl	80039fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003358:	2034      	movs	r0, #52	@ 0x34
 800335a:	f000 fb6b 	bl	8003a34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800335e:	e038      	b.n	80033d2 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a20      	ldr	r2, [pc, #128]	@ (80033e8 <HAL_UART_MspInit+0x114>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d133      	bne.n	80033d2 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	4b1c      	ldr	r3, [pc, #112]	@ (80033e0 <HAL_UART_MspInit+0x10c>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	4a1b      	ldr	r2, [pc, #108]	@ (80033e0 <HAL_UART_MspInit+0x10c>)
 8003374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003378:	6413      	str	r3, [r2, #64]	@ 0x40
 800337a:	4b19      	ldr	r3, [pc, #100]	@ (80033e0 <HAL_UART_MspInit+0x10c>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	4b15      	ldr	r3, [pc, #84]	@ (80033e0 <HAL_UART_MspInit+0x10c>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	4a14      	ldr	r2, [pc, #80]	@ (80033e0 <HAL_UART_MspInit+0x10c>)
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	6313      	str	r3, [r2, #48]	@ 0x30
 8003396:	4b12      	ldr	r3, [pc, #72]	@ (80033e0 <HAL_UART_MspInit+0x10c>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80033a2:	230c      	movs	r3, #12
 80033a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a6:	2302      	movs	r3, #2
 80033a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ae:	2303      	movs	r3, #3
 80033b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033b2:	2307      	movs	r3, #7
 80033b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b6:	f107 031c 	add.w	r3, r7, #28
 80033ba:	4619      	mov	r1, r3
 80033bc:	4809      	ldr	r0, [pc, #36]	@ (80033e4 <HAL_UART_MspInit+0x110>)
 80033be:	f000 fbd9 	bl	8003b74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80033c2:	2200      	movs	r2, #0
 80033c4:	2105      	movs	r1, #5
 80033c6:	2026      	movs	r0, #38	@ 0x26
 80033c8:	f000 fb18 	bl	80039fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033cc:	2026      	movs	r0, #38	@ 0x26
 80033ce:	f000 fb31 	bl	8003a34 <HAL_NVIC_EnableIRQ>
}
 80033d2:	bf00      	nop
 80033d4:	3730      	adds	r7, #48	@ 0x30
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40004c00 	.word	0x40004c00
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40020000 	.word	0x40020000
 80033e8:	40004400 	.word	0x40004400

080033ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08c      	sub	sp, #48	@ 0x30
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80033fc:	2300      	movs	r3, #0
 80033fe:	60bb      	str	r3, [r7, #8]
 8003400:	4b2f      	ldr	r3, [pc, #188]	@ (80034c0 <HAL_InitTick+0xd4>)
 8003402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003404:	4a2e      	ldr	r2, [pc, #184]	@ (80034c0 <HAL_InitTick+0xd4>)
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	6453      	str	r3, [r2, #68]	@ 0x44
 800340c:	4b2c      	ldr	r3, [pc, #176]	@ (80034c0 <HAL_InitTick+0xd4>)
 800340e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003418:	f107 020c 	add.w	r2, r7, #12
 800341c:	f107 0310 	add.w	r3, r7, #16
 8003420:	4611      	mov	r1, r2
 8003422:	4618      	mov	r0, r3
 8003424:	f003 fc38 	bl	8006c98 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003428:	f003 fc22 	bl	8006c70 <HAL_RCC_GetPCLK2Freq>
 800342c:	4603      	mov	r3, r0
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003434:	4a23      	ldr	r2, [pc, #140]	@ (80034c4 <HAL_InitTick+0xd8>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	0c9b      	lsrs	r3, r3, #18
 800343c:	3b01      	subs	r3, #1
 800343e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003440:	4b21      	ldr	r3, [pc, #132]	@ (80034c8 <HAL_InitTick+0xdc>)
 8003442:	4a22      	ldr	r2, [pc, #136]	@ (80034cc <HAL_InitTick+0xe0>)
 8003444:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003446:	4b20      	ldr	r3, [pc, #128]	@ (80034c8 <HAL_InitTick+0xdc>)
 8003448:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800344c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800344e:	4a1e      	ldr	r2, [pc, #120]	@ (80034c8 <HAL_InitTick+0xdc>)
 8003450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003452:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003454:	4b1c      	ldr	r3, [pc, #112]	@ (80034c8 <HAL_InitTick+0xdc>)
 8003456:	2200      	movs	r2, #0
 8003458:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800345a:	4b1b      	ldr	r3, [pc, #108]	@ (80034c8 <HAL_InitTick+0xdc>)
 800345c:	2200      	movs	r2, #0
 800345e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003460:	4b19      	ldr	r3, [pc, #100]	@ (80034c8 <HAL_InitTick+0xdc>)
 8003462:	2200      	movs	r2, #0
 8003464:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003466:	4818      	ldr	r0, [pc, #96]	@ (80034c8 <HAL_InitTick+0xdc>)
 8003468:	f003 fe11 	bl	800708e <HAL_TIM_Base_Init>
 800346c:	4603      	mov	r3, r0
 800346e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003472:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003476:	2b00      	cmp	r3, #0
 8003478:	d11b      	bne.n	80034b2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800347a:	4813      	ldr	r0, [pc, #76]	@ (80034c8 <HAL_InitTick+0xdc>)
 800347c:	f003 fe60 	bl	8007140 <HAL_TIM_Base_Start_IT>
 8003480:	4603      	mov	r3, r0
 8003482:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003486:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800348a:	2b00      	cmp	r3, #0
 800348c:	d111      	bne.n	80034b2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800348e:	2019      	movs	r0, #25
 8003490:	f000 fad0 	bl	8003a34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b0f      	cmp	r3, #15
 8003498:	d808      	bhi.n	80034ac <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800349a:	2200      	movs	r2, #0
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	2019      	movs	r0, #25
 80034a0:	f000 faac 	bl	80039fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034a4:	4a0a      	ldr	r2, [pc, #40]	@ (80034d0 <HAL_InitTick+0xe4>)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	e002      	b.n	80034b2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80034b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3730      	adds	r7, #48	@ 0x30
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40023800 	.word	0x40023800
 80034c4:	431bde83 	.word	0x431bde83
 80034c8:	2000064c 	.word	0x2000064c
 80034cc:	40010000 	.word	0x40010000
 80034d0:	20000230 	.word	0x20000230

080034d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034d8:	bf00      	nop
 80034da:	e7fd      	b.n	80034d8 <NMI_Handler+0x4>

080034dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034e0:	bf00      	nop
 80034e2:	e7fd      	b.n	80034e0 <HardFault_Handler+0x4>

080034e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034e8:	bf00      	nop
 80034ea:	e7fd      	b.n	80034e8 <MemManage_Handler+0x4>

080034ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034f0:	bf00      	nop
 80034f2:	e7fd      	b.n	80034f0 <BusFault_Handler+0x4>

080034f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034f8:	bf00      	nop
 80034fa:	e7fd      	b.n	80034f8 <UsageFault_Handler+0x4>

080034fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
	...

0800350c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
   * Vervolgens wordt de key meegestuurd met een FreeRTOS event, die opgevangen wordt
   * door de task ARM_keys_IRQ(). Daarna wordt, indien nodig, een context switch
   * afgedwongen door portYIELD_FROM_ISR().
   *
   */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003512:	2300      	movs	r3, #0
 8003514:	603b      	str	r3, [r7, #0]
  int        key;

  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 8003516:	2001      	movs	r0, #1
 8003518:	f000 fd14 	bl	8003f44 <HAL_GPIO_EXTI_IRQHandler>

  key = KEYS_read(); // determine which key is pressed...
 800351c:	f7fe ff2e 	bl	800237c <KEYS_read>
 8003520:	4603      	mov	r3, r0
 8003522:	607b      	str	r3, [r7, #4]
  xEventGroupSetBitsFromISR (hKEY_Event, key, &xHigherPriorityTaskWoken);
 8003524:	4b0f      	ldr	r3, [pc, #60]	@ (8003564 <EXTI0_IRQHandler+0x58>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	463a      	mov	r2, r7
 800352c:	4618      	mov	r0, r3
 800352e:	f008 ff77 	bl	800c420 <xEventGroupSetBitsFromISR>

  // KEYS_initISR(0); // set all lines lo if you want repeating keys
  KEYS_initISR(1);    // set all lines hi for reading all 16 keys
 8003532:	2001      	movs	r0, #1
 8003534:	f7fe fefa 	bl	800232c <KEYS_initISR>
  if (xHigherPriorityTaskWoken != pdFALSE)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <EXTI0_IRQHandler+0x48>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d007      	beq.n	8003554 <EXTI0_IRQHandler+0x48>
 8003544:	4b08      	ldr	r3, [pc, #32]	@ (8003568 <EXTI0_IRQHandler+0x5c>)
 8003546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 8003554:	2001      	movs	r0, #1
 8003556:	f000 fcf5 	bl	8003f44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000458 	.word	0x20000458
 8003568:	e000ed04 	.word	0xe000ed04

0800356c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003570:	4802      	ldr	r0, [pc, #8]	@ (800357c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003572:	f003 fe55 	bl	8007220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	2000064c 	.word	0x2000064c

08003580 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003584:	4802      	ldr	r0, [pc, #8]	@ (8003590 <USART2_IRQHandler+0x10>)
 8003586:	f004 f93f 	bl	8007808 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20000604 	.word	0x20000604

08003594 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003598:	4802      	ldr	r0, [pc, #8]	@ (80035a4 <UART4_IRQHandler+0x10>)
 800359a:	f004 f935 	bl	8007808 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	200005c0 	.word	0x200005c0

080035a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80035ac:	4802      	ldr	r0, [pc, #8]	@ (80035b8 <OTG_FS_IRQHandler+0x10>)
 80035ae:	f000 ff57 	bl	8004460 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20011290 	.word	0x20011290

080035bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
	return 1;
 80035c0:	2301      	movs	r3, #1
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <_kill>:

int _kill(int pid, int sig)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80035d6:	f00e fa29 	bl	8011a2c <__errno>
 80035da:	4603      	mov	r3, r0
 80035dc:	2216      	movs	r2, #22
 80035de:	601a      	str	r2, [r3, #0]
	return -1;
 80035e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <_exit>:

void _exit (int status)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80035f4:	f04f 31ff 	mov.w	r1, #4294967295
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff ffe7 	bl	80035cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80035fe:	bf00      	nop
 8003600:	e7fd      	b.n	80035fe <_exit+0x12>

08003602 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b086      	sub	sp, #24
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	e00a      	b.n	800362a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003614:	f3af 8000 	nop.w
 8003618:	4601      	mov	r1, r0
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	60ba      	str	r2, [r7, #8]
 8003620:	b2ca      	uxtb	r2, r1
 8003622:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	3301      	adds	r3, #1
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	429a      	cmp	r2, r3
 8003630:	dbf0      	blt.n	8003614 <_read+0x12>
	}

return len;
 8003632:	687b      	ldr	r3, [r7, #4]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	e009      	b.n	8003662 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	60ba      	str	r2, [r7, #8]
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	3301      	adds	r3, #1
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	429a      	cmp	r2, r3
 8003668:	dbf1      	blt.n	800364e <_write+0x12>
	}
	return len;
 800366a:	687b      	ldr	r3, [r7, #4]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <_close>:

int _close(int file)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
	return -1;
 800367c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800369c:	605a      	str	r2, [r3, #4]
	return 0;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <_isatty>:

int _isatty(int file)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
	return 1;
 80036b4:	2301      	movs	r3, #1
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b085      	sub	sp, #20
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
	return 0;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036e4:	4a14      	ldr	r2, [pc, #80]	@ (8003738 <_sbrk+0x5c>)
 80036e6:	4b15      	ldr	r3, [pc, #84]	@ (800373c <_sbrk+0x60>)
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036f0:	4b13      	ldr	r3, [pc, #76]	@ (8003740 <_sbrk+0x64>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d102      	bne.n	80036fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036f8:	4b11      	ldr	r3, [pc, #68]	@ (8003740 <_sbrk+0x64>)
 80036fa:	4a12      	ldr	r2, [pc, #72]	@ (8003744 <_sbrk+0x68>)
 80036fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036fe:	4b10      	ldr	r3, [pc, #64]	@ (8003740 <_sbrk+0x64>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	429a      	cmp	r2, r3
 800370a:	d207      	bcs.n	800371c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800370c:	f00e f98e 	bl	8011a2c <__errno>
 8003710:	4603      	mov	r3, r0
 8003712:	220c      	movs	r2, #12
 8003714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003716:	f04f 33ff 	mov.w	r3, #4294967295
 800371a:	e009      	b.n	8003730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800371c:	4b08      	ldr	r3, [pc, #32]	@ (8003740 <_sbrk+0x64>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003722:	4b07      	ldr	r3, [pc, #28]	@ (8003740 <_sbrk+0x64>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4413      	add	r3, r2
 800372a:	4a05      	ldr	r2, [pc, #20]	@ (8003740 <_sbrk+0x64>)
 800372c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800372e:	68fb      	ldr	r3, [r7, #12]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20020000 	.word	0x20020000
 800373c:	00000400 	.word	0x00000400
 8003740:	20000694 	.word	0x20000694
 8003744:	200116e0 	.word	0x200116e0

08003748 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800374c:	4b06      	ldr	r3, [pc, #24]	@ (8003768 <SystemInit+0x20>)
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003752:	4a05      	ldr	r2, [pc, #20]	@ (8003768 <SystemInit+0x20>)
 8003754:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003758:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800375c:	bf00      	nop
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800376c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003770:	480d      	ldr	r0, [pc, #52]	@ (80037a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003772:	490e      	ldr	r1, [pc, #56]	@ (80037ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003774:	4a0e      	ldr	r2, [pc, #56]	@ (80037b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003778:	e002      	b.n	8003780 <LoopCopyDataInit>

0800377a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800377a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800377c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800377e:	3304      	adds	r3, #4

08003780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003784:	d3f9      	bcc.n	800377a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003786:	4a0b      	ldr	r2, [pc, #44]	@ (80037b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003788:	4c0b      	ldr	r4, [pc, #44]	@ (80037b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800378a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800378c:	e001      	b.n	8003792 <LoopFillZerobss>

0800378e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800378e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003790:	3204      	adds	r2, #4

08003792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003794:	d3fb      	bcc.n	800378e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003796:	f7ff ffd7 	bl	8003748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800379a:	f00e f94d 	bl	8011a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800379e:	f7ff f8f7 	bl	8002990 <main>
  bx  lr    
 80037a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80037a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037ac:	20000424 	.word	0x20000424
  ldr r2, =_sidata
 80037b0:	080147f8 	.word	0x080147f8
  ldr r2, =_sbss
 80037b4:	20000428 	.word	0x20000428
  ldr r4, =_ebss
 80037b8:	200116e0 	.word	0x200116e0

080037bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037bc:	e7fe      	b.n	80037bc <ADC_IRQHandler>
	...

080037c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003800 <HAL_Init+0x40>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003800 <HAL_Init+0x40>)
 80037ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003800 <HAL_Init+0x40>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003800 <HAL_Init+0x40>)
 80037d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037dc:	4b08      	ldr	r3, [pc, #32]	@ (8003800 <HAL_Init+0x40>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a07      	ldr	r2, [pc, #28]	@ (8003800 <HAL_Init+0x40>)
 80037e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037e8:	2003      	movs	r0, #3
 80037ea:	f000 f8fc 	bl	80039e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037ee:	2000      	movs	r0, #0
 80037f0:	f7ff fdfc 	bl	80033ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037f4:	f7ff fc32 	bl	800305c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40023c00 	.word	0x40023c00

08003804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003808:	4b06      	ldr	r3, [pc, #24]	@ (8003824 <HAL_IncTick+0x20>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <HAL_IncTick+0x24>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4413      	add	r3, r2
 8003814:	4a04      	ldr	r2, [pc, #16]	@ (8003828 <HAL_IncTick+0x24>)
 8003816:	6013      	str	r3, [r2, #0]
}
 8003818:	bf00      	nop
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000234 	.word	0x20000234
 8003828:	20000698 	.word	0x20000698

0800382c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return uwTick;
 8003830:	4b03      	ldr	r3, [pc, #12]	@ (8003840 <HAL_GetTick+0x14>)
 8003832:	681b      	ldr	r3, [r3, #0]
}
 8003834:	4618      	mov	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	20000698 	.word	0x20000698

08003844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800384c:	f7ff ffee 	bl	800382c <HAL_GetTick>
 8003850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385c:	d005      	beq.n	800386a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800385e:	4b0a      	ldr	r3, [pc, #40]	@ (8003888 <HAL_Delay+0x44>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4413      	add	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800386a:	bf00      	nop
 800386c:	f7ff ffde 	bl	800382c <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	429a      	cmp	r2, r3
 800387a:	d8f7      	bhi.n	800386c <HAL_Delay+0x28>
  {
  }
}
 800387c:	bf00      	nop
 800387e:	bf00      	nop
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000234 	.word	0x20000234

0800388c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800389c:	4b0c      	ldr	r3, [pc, #48]	@ (80038d0 <__NVIC_SetPriorityGrouping+0x44>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038a8:	4013      	ands	r3, r2
 80038aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038be:	4a04      	ldr	r2, [pc, #16]	@ (80038d0 <__NVIC_SetPriorityGrouping+0x44>)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	60d3      	str	r3, [r2, #12]
}
 80038c4:	bf00      	nop
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	e000ed00 	.word	0xe000ed00

080038d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038d8:	4b04      	ldr	r3, [pc, #16]	@ (80038ec <__NVIC_GetPriorityGrouping+0x18>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	0a1b      	lsrs	r3, r3, #8
 80038de:	f003 0307 	and.w	r3, r3, #7
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	e000ed00 	.word	0xe000ed00

080038f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	db0b      	blt.n	800391a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	f003 021f 	and.w	r2, r3, #31
 8003908:	4907      	ldr	r1, [pc, #28]	@ (8003928 <__NVIC_EnableIRQ+0x38>)
 800390a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	2001      	movs	r0, #1
 8003912:	fa00 f202 	lsl.w	r2, r0, r2
 8003916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	e000e100 	.word	0xe000e100

0800392c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	6039      	str	r1, [r7, #0]
 8003936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393c:	2b00      	cmp	r3, #0
 800393e:	db0a      	blt.n	8003956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	b2da      	uxtb	r2, r3
 8003944:	490c      	ldr	r1, [pc, #48]	@ (8003978 <__NVIC_SetPriority+0x4c>)
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	0112      	lsls	r2, r2, #4
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	440b      	add	r3, r1
 8003950:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003954:	e00a      	b.n	800396c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	b2da      	uxtb	r2, r3
 800395a:	4908      	ldr	r1, [pc, #32]	@ (800397c <__NVIC_SetPriority+0x50>)
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	3b04      	subs	r3, #4
 8003964:	0112      	lsls	r2, r2, #4
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	440b      	add	r3, r1
 800396a:	761a      	strb	r2, [r3, #24]
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	e000e100 	.word	0xe000e100
 800397c:	e000ed00 	.word	0xe000ed00

08003980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003980:	b480      	push	{r7}
 8003982:	b089      	sub	sp, #36	@ 0x24
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f1c3 0307 	rsb	r3, r3, #7
 800399a:	2b04      	cmp	r3, #4
 800399c:	bf28      	it	cs
 800399e:	2304      	movcs	r3, #4
 80039a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	3304      	adds	r3, #4
 80039a6:	2b06      	cmp	r3, #6
 80039a8:	d902      	bls.n	80039b0 <NVIC_EncodePriority+0x30>
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	3b03      	subs	r3, #3
 80039ae:	e000      	b.n	80039b2 <NVIC_EncodePriority+0x32>
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b4:	f04f 32ff 	mov.w	r2, #4294967295
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43da      	mvns	r2, r3
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	401a      	ands	r2, r3
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039c8:	f04f 31ff 	mov.w	r1, #4294967295
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	fa01 f303 	lsl.w	r3, r1, r3
 80039d2:	43d9      	mvns	r1, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d8:	4313      	orrs	r3, r2
         );
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3724      	adds	r7, #36	@ 0x24
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff ff4c 	bl	800388c <__NVIC_SetPriorityGrouping>
}
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a0e:	f7ff ff61 	bl	80038d4 <__NVIC_GetPriorityGrouping>
 8003a12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	6978      	ldr	r0, [r7, #20]
 8003a1a:	f7ff ffb1 	bl	8003980 <NVIC_EncodePriority>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a24:	4611      	mov	r1, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff ff80 	bl	800392c <__NVIC_SetPriority>
}
 8003a2c:	bf00      	nop
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff ff54 	bl	80038f0 <__NVIC_EnableIRQ>
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a5e:	f7ff fee5 	bl	800382c <HAL_GetTick>
 8003a62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d008      	beq.n	8003a82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2280      	movs	r2, #128	@ 0x80
 8003a74:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e052      	b.n	8003b28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0216 	bic.w	r2, r2, #22
 8003a90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695a      	ldr	r2, [r3, #20]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003aa0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d103      	bne.n	8003ab2 <HAL_DMA_Abort+0x62>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d007      	beq.n	8003ac2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0208 	bic.w	r2, r2, #8
 8003ac0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0201 	bic.w	r2, r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ad2:	e013      	b.n	8003afc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ad4:	f7ff feaa 	bl	800382c <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b05      	cmp	r3, #5
 8003ae0:	d90c      	bls.n	8003afc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2203      	movs	r2, #3
 8003aec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e015      	b.n	8003b28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1e4      	bne.n	8003ad4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b0e:	223f      	movs	r2, #63	@ 0x3f
 8003b10:	409a      	lsls	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d004      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2280      	movs	r2, #128	@ 0x80
 8003b48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e00c      	b.n	8003b68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2205      	movs	r2, #5
 8003b52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0201 	bic.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b089      	sub	sp, #36	@ 0x24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
 8003b8e:	e16b      	b.n	8003e68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b90:	2201      	movs	r2, #1
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	f040 815a 	bne.w	8003e62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d005      	beq.n	8003bc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d130      	bne.n	8003c28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	2203      	movs	r2, #3
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	091b      	lsrs	r3, r3, #4
 8003c12:	f003 0201 	and.w	r2, r3, #1
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d017      	beq.n	8003c64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	2203      	movs	r2, #3
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d123      	bne.n	8003cb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	08da      	lsrs	r2, r3, #3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3208      	adds	r2, #8
 8003c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	220f      	movs	r2, #15
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	08da      	lsrs	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3208      	adds	r2, #8
 8003cb2:	69b9      	ldr	r1, [r7, #24]
 8003cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 0203 	and.w	r2, r3, #3
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 80b4 	beq.w	8003e62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	4b60      	ldr	r3, [pc, #384]	@ (8003e80 <HAL_GPIO_Init+0x30c>)
 8003d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d02:	4a5f      	ldr	r2, [pc, #380]	@ (8003e80 <HAL_GPIO_Init+0x30c>)
 8003d04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d0a:	4b5d      	ldr	r3, [pc, #372]	@ (8003e80 <HAL_GPIO_Init+0x30c>)
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d16:	4a5b      	ldr	r2, [pc, #364]	@ (8003e84 <HAL_GPIO_Init+0x310>)
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	089b      	lsrs	r3, r3, #2
 8003d1c:	3302      	adds	r3, #2
 8003d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	220f      	movs	r2, #15
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43db      	mvns	r3, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	4013      	ands	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a52      	ldr	r2, [pc, #328]	@ (8003e88 <HAL_GPIO_Init+0x314>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d02b      	beq.n	8003d9a <HAL_GPIO_Init+0x226>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a51      	ldr	r2, [pc, #324]	@ (8003e8c <HAL_GPIO_Init+0x318>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d025      	beq.n	8003d96 <HAL_GPIO_Init+0x222>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a50      	ldr	r2, [pc, #320]	@ (8003e90 <HAL_GPIO_Init+0x31c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d01f      	beq.n	8003d92 <HAL_GPIO_Init+0x21e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a4f      	ldr	r2, [pc, #316]	@ (8003e94 <HAL_GPIO_Init+0x320>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d019      	beq.n	8003d8e <HAL_GPIO_Init+0x21a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a4e      	ldr	r2, [pc, #312]	@ (8003e98 <HAL_GPIO_Init+0x324>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <HAL_GPIO_Init+0x216>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a4d      	ldr	r2, [pc, #308]	@ (8003e9c <HAL_GPIO_Init+0x328>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00d      	beq.n	8003d86 <HAL_GPIO_Init+0x212>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a4c      	ldr	r2, [pc, #304]	@ (8003ea0 <HAL_GPIO_Init+0x32c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d007      	beq.n	8003d82 <HAL_GPIO_Init+0x20e>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a4b      	ldr	r2, [pc, #300]	@ (8003ea4 <HAL_GPIO_Init+0x330>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d101      	bne.n	8003d7e <HAL_GPIO_Init+0x20a>
 8003d7a:	2307      	movs	r3, #7
 8003d7c:	e00e      	b.n	8003d9c <HAL_GPIO_Init+0x228>
 8003d7e:	2308      	movs	r3, #8
 8003d80:	e00c      	b.n	8003d9c <HAL_GPIO_Init+0x228>
 8003d82:	2306      	movs	r3, #6
 8003d84:	e00a      	b.n	8003d9c <HAL_GPIO_Init+0x228>
 8003d86:	2305      	movs	r3, #5
 8003d88:	e008      	b.n	8003d9c <HAL_GPIO_Init+0x228>
 8003d8a:	2304      	movs	r3, #4
 8003d8c:	e006      	b.n	8003d9c <HAL_GPIO_Init+0x228>
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e004      	b.n	8003d9c <HAL_GPIO_Init+0x228>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e002      	b.n	8003d9c <HAL_GPIO_Init+0x228>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <HAL_GPIO_Init+0x228>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	69fa      	ldr	r2, [r7, #28]
 8003d9e:	f002 0203 	and.w	r2, r2, #3
 8003da2:	0092      	lsls	r2, r2, #2
 8003da4:	4093      	lsls	r3, r2
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dac:	4935      	ldr	r1, [pc, #212]	@ (8003e84 <HAL_GPIO_Init+0x310>)
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	089b      	lsrs	r3, r3, #2
 8003db2:	3302      	adds	r3, #2
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dba:	4b3b      	ldr	r3, [pc, #236]	@ (8003ea8 <HAL_GPIO_Init+0x334>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dde:	4a32      	ldr	r2, [pc, #200]	@ (8003ea8 <HAL_GPIO_Init+0x334>)
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003de4:	4b30      	ldr	r3, [pc, #192]	@ (8003ea8 <HAL_GPIO_Init+0x334>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	43db      	mvns	r3, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4013      	ands	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e08:	4a27      	ldr	r2, [pc, #156]	@ (8003ea8 <HAL_GPIO_Init+0x334>)
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e0e:	4b26      	ldr	r3, [pc, #152]	@ (8003ea8 <HAL_GPIO_Init+0x334>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	43db      	mvns	r3, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e32:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea8 <HAL_GPIO_Init+0x334>)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e38:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea8 <HAL_GPIO_Init+0x334>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	43db      	mvns	r3, r3
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4013      	ands	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e5c:	4a12      	ldr	r2, [pc, #72]	@ (8003ea8 <HAL_GPIO_Init+0x334>)
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	3301      	adds	r3, #1
 8003e66:	61fb      	str	r3, [r7, #28]
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	2b0f      	cmp	r3, #15
 8003e6c:	f67f ae90 	bls.w	8003b90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e70:	bf00      	nop
 8003e72:	bf00      	nop
 8003e74:	3724      	adds	r7, #36	@ 0x24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800
 8003e84:	40013800 	.word	0x40013800
 8003e88:	40020000 	.word	0x40020000
 8003e8c:	40020400 	.word	0x40020400
 8003e90:	40020800 	.word	0x40020800
 8003e94:	40020c00 	.word	0x40020c00
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40021400 	.word	0x40021400
 8003ea0:	40021800 	.word	0x40021800
 8003ea4:	40021c00 	.word	0x40021c00
 8003ea8:	40013c00 	.word	0x40013c00

08003eac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	887b      	ldrh	r3, [r7, #2]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	73fb      	strb	r3, [r7, #15]
 8003ec8:	e001      	b.n	8003ece <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	807b      	strh	r3, [r7, #2]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003eec:	787b      	ldrb	r3, [r7, #1]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ef2:	887a      	ldrh	r2, [r7, #2]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ef8:	e003      	b.n	8003f02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003efa:	887b      	ldrh	r3, [r7, #2]
 8003efc:	041a      	lsls	r2, r3, #16
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	619a      	str	r2, [r3, #24]
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b085      	sub	sp, #20
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	460b      	mov	r3, r1
 8003f18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f20:	887a      	ldrh	r2, [r7, #2]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4013      	ands	r3, r2
 8003f26:	041a      	lsls	r2, r3, #16
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	43d9      	mvns	r1, r3
 8003f2c:	887b      	ldrh	r3, [r7, #2]
 8003f2e:	400b      	ands	r3, r1
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	619a      	str	r2, [r3, #24]
}
 8003f36:	bf00      	nop
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
	...

08003f44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f4e:	4b08      	ldr	r3, [pc, #32]	@ (8003f70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f50:	695a      	ldr	r2, [r3, #20]
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	4013      	ands	r3, r2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d006      	beq.n	8003f68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f5a:	4a05      	ldr	r2, [pc, #20]	@ (8003f70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f5c:	88fb      	ldrh	r3, [r7, #6]
 8003f5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f60:	88fb      	ldrh	r3, [r7, #6]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 f806 	bl	8003f74 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f68:	bf00      	nop
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40013c00 	.word	0x40013c00

08003f74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003f8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f8c:	b08f      	sub	sp, #60	@ 0x3c
 8003f8e:	af0a      	add	r7, sp, #40	@ 0x28
 8003f90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e054      	b.n	8004046 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 32f9 	ldrb.w	r3, [r3, #761]	@ 0x2f9
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f00c f8d2 	bl	8010160 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2203      	movs	r2, #3
 8003fc0:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d102      	bne.n	8003fd6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f004 fbee 	bl	80087bc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	603b      	str	r3, [r7, #0]
 8003fe6:	687e      	ldr	r6, [r7, #4]
 8003fe8:	466d      	mov	r5, sp
 8003fea:	f106 0410 	add.w	r4, r6, #16
 8003fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ff4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ff6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ffa:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ffe:	1d33      	adds	r3, r6, #4
 8004000:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004002:	6838      	ldr	r0, [r7, #0]
 8004004:	f004 fb68 	bl	80086d8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2101      	movs	r1, #1
 800400e:	4618      	mov	r0, r3
 8004010:	f004 fbe5 	bl	80087de <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	603b      	str	r3, [r7, #0]
 800401a:	687e      	ldr	r6, [r7, #4]
 800401c:	466d      	mov	r5, sp
 800401e:	f106 0410 	add.w	r4, r6, #16
 8004022:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004024:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800402a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800402e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004032:	1d33      	adds	r3, r6, #4
 8004034:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004036:	6838      	ldr	r0, [r7, #0]
 8004038:	f004 fd6e 	bl	8008b18 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800404e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800404e:	b590      	push	{r4, r7, lr}
 8004050:	b089      	sub	sp, #36	@ 0x24
 8004052:	af04      	add	r7, sp, #16
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	4608      	mov	r0, r1
 8004058:	4611      	mov	r1, r2
 800405a:	461a      	mov	r2, r3
 800405c:	4603      	mov	r3, r0
 800405e:	70fb      	strb	r3, [r7, #3]
 8004060:	460b      	mov	r3, r1
 8004062:	70bb      	strb	r3, [r7, #2]
 8004064:	4613      	mov	r3, r2
 8004066:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 800406e:	2b01      	cmp	r3, #1
 8004070:	d101      	bne.n	8004076 <HAL_HCD_HC_Init+0x28>
 8004072:	2302      	movs	r3, #2
 8004074:	e076      	b.n	8004164 <HAL_HCD_HC_Init+0x116>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800407e:	78fb      	ldrb	r3, [r7, #3]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	212c      	movs	r1, #44	@ 0x2c
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	4413      	add	r3, r2
 800408a:	333d      	adds	r3, #61	@ 0x3d
 800408c:	2200      	movs	r2, #0
 800408e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	212c      	movs	r1, #44	@ 0x2c
 8004096:	fb01 f303 	mul.w	r3, r1, r3
 800409a:	4413      	add	r3, r2
 800409c:	3338      	adds	r3, #56	@ 0x38
 800409e:	787a      	ldrb	r2, [r7, #1]
 80040a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	212c      	movs	r1, #44	@ 0x2c
 80040a8:	fb01 f303 	mul.w	r3, r1, r3
 80040ac:	4413      	add	r3, r2
 80040ae:	3340      	adds	r3, #64	@ 0x40
 80040b0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80040b2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80040b4:	78fb      	ldrb	r3, [r7, #3]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	212c      	movs	r1, #44	@ 0x2c
 80040ba:	fb01 f303 	mul.w	r3, r1, r3
 80040be:	4413      	add	r3, r2
 80040c0:	3339      	adds	r3, #57	@ 0x39
 80040c2:	78fa      	ldrb	r2, [r7, #3]
 80040c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80040c6:	78fb      	ldrb	r3, [r7, #3]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	212c      	movs	r1, #44	@ 0x2c
 80040cc:	fb01 f303 	mul.w	r3, r1, r3
 80040d0:	4413      	add	r3, r2
 80040d2:	333f      	adds	r3, #63	@ 0x3f
 80040d4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80040d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80040da:	78fb      	ldrb	r3, [r7, #3]
 80040dc:	78ba      	ldrb	r2, [r7, #2]
 80040de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040e2:	b2d0      	uxtb	r0, r2
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	212c      	movs	r1, #44	@ 0x2c
 80040e8:	fb01 f303 	mul.w	r3, r1, r3
 80040ec:	4413      	add	r3, r2
 80040ee:	333a      	adds	r3, #58	@ 0x3a
 80040f0:	4602      	mov	r2, r0
 80040f2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80040f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	da09      	bge.n	8004110 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	212c      	movs	r1, #44	@ 0x2c
 8004102:	fb01 f303 	mul.w	r3, r1, r3
 8004106:	4413      	add	r3, r2
 8004108:	333b      	adds	r3, #59	@ 0x3b
 800410a:	2201      	movs	r2, #1
 800410c:	701a      	strb	r2, [r3, #0]
 800410e:	e008      	b.n	8004122 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	212c      	movs	r1, #44	@ 0x2c
 8004116:	fb01 f303 	mul.w	r3, r1, r3
 800411a:	4413      	add	r3, r2
 800411c:	333b      	adds	r3, #59	@ 0x3b
 800411e:	2200      	movs	r2, #0
 8004120:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	212c      	movs	r1, #44	@ 0x2c
 8004128:	fb01 f303 	mul.w	r3, r1, r3
 800412c:	4413      	add	r3, r2
 800412e:	333c      	adds	r3, #60	@ 0x3c
 8004130:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004134:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	787c      	ldrb	r4, [r7, #1]
 800413c:	78ba      	ldrb	r2, [r7, #2]
 800413e:	78f9      	ldrb	r1, [r7, #3]
 8004140:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004142:	9302      	str	r3, [sp, #8]
 8004144:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004148:	9301      	str	r3, [sp, #4]
 800414a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	4623      	mov	r3, r4
 8004152:	f004 fe67 	bl	8008e24 <USB_HC_Init>
 8004156:	4603      	mov	r3, r0
 8004158:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 8004162:	7bfb      	ldrb	r3, [r7, #15]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	bd90      	pop	{r4, r7, pc}

0800416c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_HCD_HC_Halt+0x1e>
 8004186:	2302      	movs	r3, #2
 8004188:	e00f      	b.n	80041aa <HAL_HCD_HC_Halt+0x3e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	78fa      	ldrb	r2, [r7, #3]
 8004198:	4611      	mov	r1, r2
 800419a:	4618      	mov	r0, r3
 800419c:	f005 f8b7 	bl	800930e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	4608      	mov	r0, r1
 80041be:	4611      	mov	r1, r2
 80041c0:	461a      	mov	r2, r3
 80041c2:	4603      	mov	r3, r0
 80041c4:	70fb      	strb	r3, [r7, #3]
 80041c6:	460b      	mov	r3, r1
 80041c8:	70bb      	strb	r3, [r7, #2]
 80041ca:	4613      	mov	r3, r2
 80041cc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80041ce:	78fb      	ldrb	r3, [r7, #3]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	212c      	movs	r1, #44	@ 0x2c
 80041d4:	fb01 f303 	mul.w	r3, r1, r3
 80041d8:	4413      	add	r3, r2
 80041da:	333b      	adds	r3, #59	@ 0x3b
 80041dc:	78ba      	ldrb	r2, [r7, #2]
 80041de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	212c      	movs	r1, #44	@ 0x2c
 80041e6:	fb01 f303 	mul.w	r3, r1, r3
 80041ea:	4413      	add	r3, r2
 80041ec:	333f      	adds	r3, #63	@ 0x3f
 80041ee:	787a      	ldrb	r2, [r7, #1]
 80041f0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80041f2:	7c3b      	ldrb	r3, [r7, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d112      	bne.n	800421e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	212c      	movs	r1, #44	@ 0x2c
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	4413      	add	r3, r2
 8004204:	3342      	adds	r3, #66	@ 0x42
 8004206:	2203      	movs	r2, #3
 8004208:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800420a:	78fb      	ldrb	r3, [r7, #3]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	212c      	movs	r1, #44	@ 0x2c
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	4413      	add	r3, r2
 8004216:	333d      	adds	r3, #61	@ 0x3d
 8004218:	7f3a      	ldrb	r2, [r7, #28]
 800421a:	701a      	strb	r2, [r3, #0]
 800421c:	e008      	b.n	8004230 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	212c      	movs	r1, #44	@ 0x2c
 8004224:	fb01 f303 	mul.w	r3, r1, r3
 8004228:	4413      	add	r3, r2
 800422a:	3342      	adds	r3, #66	@ 0x42
 800422c:	2202      	movs	r2, #2
 800422e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004230:	787b      	ldrb	r3, [r7, #1]
 8004232:	2b03      	cmp	r3, #3
 8004234:	f200 80c6 	bhi.w	80043c4 <HAL_HCD_HC_SubmitRequest+0x210>
 8004238:	a201      	add	r2, pc, #4	@ (adr r2, 8004240 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800423a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423e:	bf00      	nop
 8004240:	08004251 	.word	0x08004251
 8004244:	080043b1 	.word	0x080043b1
 8004248:	080042b5 	.word	0x080042b5
 800424c:	08004333 	.word	0x08004333
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004250:	7c3b      	ldrb	r3, [r7, #16]
 8004252:	2b01      	cmp	r3, #1
 8004254:	f040 80b8 	bne.w	80043c8 <HAL_HCD_HC_SubmitRequest+0x214>
 8004258:	78bb      	ldrb	r3, [r7, #2]
 800425a:	2b00      	cmp	r3, #0
 800425c:	f040 80b4 	bne.w	80043c8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004260:	8b3b      	ldrh	r3, [r7, #24]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d108      	bne.n	8004278 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004266:	78fb      	ldrb	r3, [r7, #3]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	212c      	movs	r1, #44	@ 0x2c
 800426c:	fb01 f303 	mul.w	r3, r1, r3
 8004270:	4413      	add	r3, r2
 8004272:	3355      	adds	r3, #85	@ 0x55
 8004274:	2201      	movs	r2, #1
 8004276:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	212c      	movs	r1, #44	@ 0x2c
 800427e:	fb01 f303 	mul.w	r3, r1, r3
 8004282:	4413      	add	r3, r2
 8004284:	3355      	adds	r3, #85	@ 0x55
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d109      	bne.n	80042a0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800428c:	78fb      	ldrb	r3, [r7, #3]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	212c      	movs	r1, #44	@ 0x2c
 8004292:	fb01 f303 	mul.w	r3, r1, r3
 8004296:	4413      	add	r3, r2
 8004298:	3342      	adds	r3, #66	@ 0x42
 800429a:	2200      	movs	r2, #0
 800429c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800429e:	e093      	b.n	80043c8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80042a0:	78fb      	ldrb	r3, [r7, #3]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	212c      	movs	r1, #44	@ 0x2c
 80042a6:	fb01 f303 	mul.w	r3, r1, r3
 80042aa:	4413      	add	r3, r2
 80042ac:	3342      	adds	r3, #66	@ 0x42
 80042ae:	2202      	movs	r2, #2
 80042b0:	701a      	strb	r2, [r3, #0]
      break;
 80042b2:	e089      	b.n	80043c8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80042b4:	78bb      	ldrb	r3, [r7, #2]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d11d      	bne.n	80042f6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80042ba:	78fb      	ldrb	r3, [r7, #3]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	212c      	movs	r1, #44	@ 0x2c
 80042c0:	fb01 f303 	mul.w	r3, r1, r3
 80042c4:	4413      	add	r3, r2
 80042c6:	3355      	adds	r3, #85	@ 0x55
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d109      	bne.n	80042e2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042ce:	78fb      	ldrb	r3, [r7, #3]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	212c      	movs	r1, #44	@ 0x2c
 80042d4:	fb01 f303 	mul.w	r3, r1, r3
 80042d8:	4413      	add	r3, r2
 80042da:	3342      	adds	r3, #66	@ 0x42
 80042dc:	2200      	movs	r2, #0
 80042de:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80042e0:	e073      	b.n	80043ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	212c      	movs	r1, #44	@ 0x2c
 80042e8:	fb01 f303 	mul.w	r3, r1, r3
 80042ec:	4413      	add	r3, r2
 80042ee:	3342      	adds	r3, #66	@ 0x42
 80042f0:	2202      	movs	r2, #2
 80042f2:	701a      	strb	r2, [r3, #0]
      break;
 80042f4:	e069      	b.n	80043ca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80042f6:	78fb      	ldrb	r3, [r7, #3]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	212c      	movs	r1, #44	@ 0x2c
 80042fc:	fb01 f303 	mul.w	r3, r1, r3
 8004300:	4413      	add	r3, r2
 8004302:	3354      	adds	r3, #84	@ 0x54
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800430a:	78fb      	ldrb	r3, [r7, #3]
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	212c      	movs	r1, #44	@ 0x2c
 8004310:	fb01 f303 	mul.w	r3, r1, r3
 8004314:	4413      	add	r3, r2
 8004316:	3342      	adds	r3, #66	@ 0x42
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]
      break;
 800431c:	e055      	b.n	80043ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800431e:	78fb      	ldrb	r3, [r7, #3]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	212c      	movs	r1, #44	@ 0x2c
 8004324:	fb01 f303 	mul.w	r3, r1, r3
 8004328:	4413      	add	r3, r2
 800432a:	3342      	adds	r3, #66	@ 0x42
 800432c:	2202      	movs	r2, #2
 800432e:	701a      	strb	r2, [r3, #0]
      break;
 8004330:	e04b      	b.n	80043ca <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004332:	78bb      	ldrb	r3, [r7, #2]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d11d      	bne.n	8004374 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	212c      	movs	r1, #44	@ 0x2c
 800433e:	fb01 f303 	mul.w	r3, r1, r3
 8004342:	4413      	add	r3, r2
 8004344:	3355      	adds	r3, #85	@ 0x55
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d109      	bne.n	8004360 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	212c      	movs	r1, #44	@ 0x2c
 8004352:	fb01 f303 	mul.w	r3, r1, r3
 8004356:	4413      	add	r3, r2
 8004358:	3342      	adds	r3, #66	@ 0x42
 800435a:	2200      	movs	r2, #0
 800435c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800435e:	e034      	b.n	80043ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004360:	78fb      	ldrb	r3, [r7, #3]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	212c      	movs	r1, #44	@ 0x2c
 8004366:	fb01 f303 	mul.w	r3, r1, r3
 800436a:	4413      	add	r3, r2
 800436c:	3342      	adds	r3, #66	@ 0x42
 800436e:	2202      	movs	r2, #2
 8004370:	701a      	strb	r2, [r3, #0]
      break;
 8004372:	e02a      	b.n	80043ca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	212c      	movs	r1, #44	@ 0x2c
 800437a:	fb01 f303 	mul.w	r3, r1, r3
 800437e:	4413      	add	r3, r2
 8004380:	3354      	adds	r3, #84	@ 0x54
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d109      	bne.n	800439c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	212c      	movs	r1, #44	@ 0x2c
 800438e:	fb01 f303 	mul.w	r3, r1, r3
 8004392:	4413      	add	r3, r2
 8004394:	3342      	adds	r3, #66	@ 0x42
 8004396:	2200      	movs	r2, #0
 8004398:	701a      	strb	r2, [r3, #0]
      break;
 800439a:	e016      	b.n	80043ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800439c:	78fb      	ldrb	r3, [r7, #3]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	212c      	movs	r1, #44	@ 0x2c
 80043a2:	fb01 f303 	mul.w	r3, r1, r3
 80043a6:	4413      	add	r3, r2
 80043a8:	3342      	adds	r3, #66	@ 0x42
 80043aa:	2202      	movs	r2, #2
 80043ac:	701a      	strb	r2, [r3, #0]
      break;
 80043ae:	e00c      	b.n	80043ca <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043b0:	78fb      	ldrb	r3, [r7, #3]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	212c      	movs	r1, #44	@ 0x2c
 80043b6:	fb01 f303 	mul.w	r3, r1, r3
 80043ba:	4413      	add	r3, r2
 80043bc:	3342      	adds	r3, #66	@ 0x42
 80043be:	2200      	movs	r2, #0
 80043c0:	701a      	strb	r2, [r3, #0]
      break;
 80043c2:	e002      	b.n	80043ca <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80043c4:	bf00      	nop
 80043c6:	e000      	b.n	80043ca <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80043c8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80043ca:	78fb      	ldrb	r3, [r7, #3]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	212c      	movs	r1, #44	@ 0x2c
 80043d0:	fb01 f303 	mul.w	r3, r1, r3
 80043d4:	4413      	add	r3, r2
 80043d6:	3344      	adds	r3, #68	@ 0x44
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80043dc:	78fb      	ldrb	r3, [r7, #3]
 80043de:	8b3a      	ldrh	r2, [r7, #24]
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	202c      	movs	r0, #44	@ 0x2c
 80043e4:	fb00 f303 	mul.w	r3, r0, r3
 80043e8:	440b      	add	r3, r1
 80043ea:	334c      	adds	r3, #76	@ 0x4c
 80043ec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80043ee:	78fb      	ldrb	r3, [r7, #3]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	212c      	movs	r1, #44	@ 0x2c
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	4413      	add	r3, r2
 80043fa:	3360      	adds	r3, #96	@ 0x60
 80043fc:	2200      	movs	r2, #0
 80043fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	212c      	movs	r1, #44	@ 0x2c
 8004406:	fb01 f303 	mul.w	r3, r1, r3
 800440a:	4413      	add	r3, r2
 800440c:	3350      	adds	r3, #80	@ 0x50
 800440e:	2200      	movs	r2, #0
 8004410:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004412:	78fb      	ldrb	r3, [r7, #3]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	212c      	movs	r1, #44	@ 0x2c
 8004418:	fb01 f303 	mul.w	r3, r1, r3
 800441c:	4413      	add	r3, r2
 800441e:	3339      	adds	r3, #57	@ 0x39
 8004420:	78fa      	ldrb	r2, [r7, #3]
 8004422:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	212c      	movs	r1, #44	@ 0x2c
 800442a:	fb01 f303 	mul.w	r3, r1, r3
 800442e:	4413      	add	r3, r2
 8004430:	3361      	adds	r3, #97	@ 0x61
 8004432:	2200      	movs	r2, #0
 8004434:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	78fb      	ldrb	r3, [r7, #3]
 800443c:	222c      	movs	r2, #44	@ 0x2c
 800443e:	fb02 f303 	mul.w	r3, r2, r3
 8004442:	3338      	adds	r3, #56	@ 0x38
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	18d1      	adds	r1, r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	461a      	mov	r2, r3
 8004450:	f004 fe0a 	bl	8009068 <USB_HC_StartXfer>
 8004454:	4603      	mov	r3, r0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop

08004460 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f004 fb0b 	bl	8008a92 <USB_GetMode>
 800447c:	4603      	mov	r3, r0
 800447e:	2b01      	cmp	r3, #1
 8004480:	f040 80f6 	bne.w	8004670 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f004 faef 	bl	8008a6c <USB_ReadInterrupts>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 80ec 	beq.w	800466e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f004 fae6 	bl	8008a6c <USB_ReadInterrupts>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044aa:	d104      	bne.n	80044b6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80044b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f004 fad6 	bl	8008a6c <USB_ReadInterrupts>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044ca:	d104      	bne.n	80044d6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80044d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f004 fac6 	bl	8008a6c <USB_ReadInterrupts>
 80044e0:	4603      	mov	r3, r0
 80044e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80044e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044ea:	d104      	bne.n	80044f6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80044f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f004 fab6 	bl	8008a6c <USB_ReadInterrupts>
 8004500:	4603      	mov	r3, r0
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b02      	cmp	r3, #2
 8004508:	d103      	bne.n	8004512 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2202      	movs	r2, #2
 8004510:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f004 faa8 	bl	8008a6c <USB_ReadInterrupts>
 800451c:	4603      	mov	r3, r0
 800451e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004522:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004526:	d11c      	bne.n	8004562 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004530:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10f      	bne.n	8004562 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004542:	2110      	movs	r1, #16
 8004544:	6938      	ldr	r0, [r7, #16]
 8004546:	f004 f997 	bl	8008878 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800454a:	6938      	ldr	r0, [r7, #16]
 800454c:	f004 f9c8 	bl	80088e0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2101      	movs	r1, #1
 8004556:	4618      	mov	r0, r3
 8004558:	f004 fb9e 	bl	8008c98 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f00b fe7d 	bl	801025c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f004 fa80 	bl	8008a6c <USB_ReadInterrupts>
 800456c:	4603      	mov	r3, r0
 800456e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004572:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004576:	d102      	bne.n	800457e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f001 f89e 	bl	80056ba <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f004 fa72 	bl	8008a6c <USB_ReadInterrupts>
 8004588:	4603      	mov	r3, r0
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b08      	cmp	r3, #8
 8004590:	d106      	bne.n	80045a0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f00b fe46 	bl	8010224 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2208      	movs	r2, #8
 800459e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f004 fa61 	bl	8008a6c <USB_ReadInterrupts>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f003 0310 	and.w	r3, r3, #16
 80045b0:	2b10      	cmp	r3, #16
 80045b2:	d101      	bne.n	80045b8 <HAL_HCD_IRQHandler+0x158>
 80045b4:	2301      	movs	r3, #1
 80045b6:	e000      	b.n	80045ba <HAL_HCD_IRQHandler+0x15a>
 80045b8:	2300      	movs	r3, #0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d012      	beq.n	80045e4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	699a      	ldr	r2, [r3, #24]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0210 	bic.w	r2, r2, #16
 80045cc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 ffa1 	bl	8005516 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0210 	orr.w	r2, r2, #16
 80045e2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f004 fa3f 	bl	8008a6c <USB_ReadInterrupts>
 80045ee:	4603      	mov	r3, r0
 80045f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045f8:	d13a      	bne.n	8004670 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f004 fe74 	bl	80092ec <USB_HC_ReadInterrupt>
 8004604:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004606:	2300      	movs	r3, #0
 8004608:	617b      	str	r3, [r7, #20]
 800460a:	e025      	b.n	8004658 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	fa22 f303 	lsr.w	r3, r2, r3
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d018      	beq.n	8004652 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4413      	add	r3, r2
 8004628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004632:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004636:	d106      	bne.n	8004646 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	b2db      	uxtb	r3, r3
 800463c:	4619      	mov	r1, r3
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f8ab 	bl	800479a <HCD_HC_IN_IRQHandler>
 8004644:	e005      	b.n	8004652 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	b2db      	uxtb	r3, r3
 800464a:	4619      	mov	r1, r3
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 fbf9 	bl	8004e44 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	3301      	adds	r3, #1
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	429a      	cmp	r2, r3
 8004660:	d3d4      	bcc.n	800460c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800466a:	615a      	str	r2, [r3, #20]
 800466c:	e000      	b.n	8004670 <HAL_HCD_IRQHandler+0x210>
      return;
 800466e:	bf00      	nop
    }
  }
}
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <HAL_HCD_Start+0x16>
 8004688:	2302      	movs	r3, #2
 800468a:	e013      	b.n	80046b4 <HAL_HCD_Start+0x3e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2101      	movs	r1, #1
 800469a:	4618      	mov	r0, r3
 800469c:	f004 fb60 	bl	8008d60 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f004 f878 	bl	800879a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_HCD_Stop+0x16>
 80046ce:	2302      	movs	r3, #2
 80046d0:	e00d      	b.n	80046ee <HAL_HCD_Stop+0x32>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f004 ff4e 	bl	8009580 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b082      	sub	sp, #8
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f004 fb02 	bl	8008d0c <USB_ResetPort>
 8004708:	4603      	mov	r3, r0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	460b      	mov	r3, r1
 800471c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800471e:	78fb      	ldrb	r3, [r7, #3]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	212c      	movs	r1, #44	@ 0x2c
 8004724:	fb01 f303 	mul.w	r3, r1, r3
 8004728:	4413      	add	r3, r2
 800472a:	3360      	adds	r3, #96	@ 0x60
 800472c:	781b      	ldrb	r3, [r3, #0]
}
 800472e:	4618      	mov	r0, r3
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	460b      	mov	r3, r1
 8004744:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004746:	78fb      	ldrb	r3, [r7, #3]
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	212c      	movs	r1, #44	@ 0x2c
 800474c:	fb01 f303 	mul.w	r3, r1, r3
 8004750:	4413      	add	r3, r2
 8004752:	3350      	adds	r3, #80	@ 0x50
 8004754:	681b      	ldr	r3, [r3, #0]
}
 8004756:	4618      	mov	r0, r3
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f004 fb46 	bl	8008e00 <USB_GetCurrentFrame>
 8004774:	4603      	mov	r3, r0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f004 fb21 	bl	8008dd2 <USB_GetHostSpeed>
 8004790:	4603      	mov	r3, r0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b086      	sub	sp, #24
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	460b      	mov	r3, r1
 80047a4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80047b0:	78fb      	ldrb	r3, [r7, #3]
 80047b2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d11a      	bne.n	8004800 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047d6:	461a      	mov	r2, r3
 80047d8:	2304      	movs	r3, #4
 80047da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	212c      	movs	r1, #44	@ 0x2c
 80047e2:	fb01 f303 	mul.w	r3, r1, r3
 80047e6:	4413      	add	r3, r2
 80047e8:	3361      	adds	r3, #97	@ 0x61
 80047ea:	2206      	movs	r2, #6
 80047ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	b2d2      	uxtb	r2, r2
 80047f6:	4611      	mov	r1, r2
 80047f8:	4618      	mov	r0, r3
 80047fa:	f004 fd88 	bl	800930e <USB_HC_Halt>
 80047fe:	e0af      	b.n	8004960 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	4413      	add	r3, r2
 8004808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004812:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004816:	d11b      	bne.n	8004850 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	4413      	add	r3, r2
 8004820:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004824:	461a      	mov	r2, r3
 8004826:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800482a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	212c      	movs	r1, #44	@ 0x2c
 8004832:	fb01 f303 	mul.w	r3, r1, r3
 8004836:	4413      	add	r3, r2
 8004838:	3361      	adds	r3, #97	@ 0x61
 800483a:	2207      	movs	r2, #7
 800483c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	4611      	mov	r1, r2
 8004848:	4618      	mov	r0, r3
 800484a:	f004 fd60 	bl	800930e <USB_HC_Halt>
 800484e:	e087      	b.n	8004960 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	4413      	add	r3, r2
 8004858:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 0320 	and.w	r3, r3, #32
 8004862:	2b20      	cmp	r3, #32
 8004864:	d109      	bne.n	800487a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	4413      	add	r3, r2
 800486e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004872:	461a      	mov	r2, r3
 8004874:	2320      	movs	r3, #32
 8004876:	6093      	str	r3, [r2, #8]
 8004878:	e072      	b.n	8004960 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	4413      	add	r3, r2
 8004882:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b08      	cmp	r3, #8
 800488e:	d11a      	bne.n	80048c6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	4413      	add	r3, r2
 8004898:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800489c:	461a      	mov	r2, r3
 800489e:	2308      	movs	r3, #8
 80048a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	212c      	movs	r1, #44	@ 0x2c
 80048a8:	fb01 f303 	mul.w	r3, r1, r3
 80048ac:	4413      	add	r3, r2
 80048ae:	3361      	adds	r3, #97	@ 0x61
 80048b0:	2205      	movs	r2, #5
 80048b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	4611      	mov	r1, r2
 80048be:	4618      	mov	r0, r3
 80048c0:	f004 fd25 	bl	800930e <USB_HC_Halt>
 80048c4:	e04c      	b.n	8004960 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048dc:	d11b      	bne.n	8004916 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ea:	461a      	mov	r2, r3
 80048ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	212c      	movs	r1, #44	@ 0x2c
 80048f8:	fb01 f303 	mul.w	r3, r1, r3
 80048fc:	4413      	add	r3, r2
 80048fe:	3361      	adds	r3, #97	@ 0x61
 8004900:	2208      	movs	r2, #8
 8004902:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	4611      	mov	r1, r2
 800490e:	4618      	mov	r0, r3
 8004910:	f004 fcfd 	bl	800930e <USB_HC_Halt>
 8004914:	e024      	b.n	8004960 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	4413      	add	r3, r2
 800491e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004928:	2b80      	cmp	r3, #128	@ 0x80
 800492a:	d119      	bne.n	8004960 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	4413      	add	r3, r2
 8004934:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004938:	461a      	mov	r2, r3
 800493a:	2380      	movs	r3, #128	@ 0x80
 800493c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	212c      	movs	r1, #44	@ 0x2c
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	4413      	add	r3, r2
 800494a:	3361      	adds	r3, #97	@ 0x61
 800494c:	2206      	movs	r2, #6
 800494e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	4611      	mov	r1, r2
 800495a:	4618      	mov	r0, r3
 800495c:	f004 fcd7 	bl	800930e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4413      	add	r3, r2
 8004968:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004972:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004976:	d112      	bne.n	800499e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	4611      	mov	r1, r2
 8004982:	4618      	mov	r0, r3
 8004984:	f004 fcc3 	bl	800930e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4413      	add	r3, r2
 8004990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004994:	461a      	mov	r2, r3
 8004996:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800499a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800499c:	e24e      	b.n	8004e3c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	f040 80df 	bne.w	8004b74 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d019      	beq.n	80049f2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	212c      	movs	r1, #44	@ 0x2c
 80049c4:	fb01 f303 	mul.w	r3, r1, r3
 80049c8:	4413      	add	r3, r2
 80049ca:	3348      	adds	r3, #72	@ 0x48
 80049cc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	0159      	lsls	r1, r3, #5
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	440b      	add	r3, r1
 80049d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80049e0:	1ad2      	subs	r2, r2, r3
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	202c      	movs	r0, #44	@ 0x2c
 80049e8:	fb00 f303 	mul.w	r3, r0, r3
 80049ec:	440b      	add	r3, r1
 80049ee:	3350      	adds	r3, #80	@ 0x50
 80049f0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	212c      	movs	r1, #44	@ 0x2c
 80049f8:	fb01 f303 	mul.w	r3, r1, r3
 80049fc:	4413      	add	r3, r2
 80049fe:	3361      	adds	r3, #97	@ 0x61
 8004a00:	2201      	movs	r2, #1
 8004a02:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	212c      	movs	r1, #44	@ 0x2c
 8004a0a:	fb01 f303 	mul.w	r3, r1, r3
 8004a0e:	4413      	add	r3, r2
 8004a10:	335c      	adds	r3, #92	@ 0x5c
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a22:	461a      	mov	r2, r3
 8004a24:	2301      	movs	r3, #1
 8004a26:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	212c      	movs	r1, #44	@ 0x2c
 8004a2e:	fb01 f303 	mul.w	r3, r1, r3
 8004a32:	4413      	add	r3, r2
 8004a34:	333f      	adds	r3, #63	@ 0x3f
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d009      	beq.n	8004a50 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	212c      	movs	r1, #44	@ 0x2c
 8004a42:	fb01 f303 	mul.w	r3, r1, r3
 8004a46:	4413      	add	r3, r2
 8004a48:	333f      	adds	r3, #63	@ 0x3f
 8004a4a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d111      	bne.n	8004a74 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	4611      	mov	r1, r2
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f004 fc57 	bl	800930e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	2310      	movs	r3, #16
 8004a70:	6093      	str	r3, [r2, #8]
 8004a72:	e03a      	b.n	8004aea <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	212c      	movs	r1, #44	@ 0x2c
 8004a7a:	fb01 f303 	mul.w	r3, r1, r3
 8004a7e:	4413      	add	r3, r2
 8004a80:	333f      	adds	r3, #63	@ 0x3f
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	d009      	beq.n	8004a9c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	212c      	movs	r1, #44	@ 0x2c
 8004a8e:	fb01 f303 	mul.w	r3, r1, r3
 8004a92:	4413      	add	r3, r2
 8004a94:	333f      	adds	r3, #63	@ 0x3f
 8004a96:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d126      	bne.n	8004aea <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	0151      	lsls	r1, r2, #5
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	440a      	add	r2, r1
 8004ab2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ab6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004aba:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	212c      	movs	r1, #44	@ 0x2c
 8004ac2:	fb01 f303 	mul.w	r3, r1, r3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3360      	adds	r3, #96	@ 0x60
 8004aca:	2201      	movs	r2, #1
 8004acc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	b2d9      	uxtb	r1, r3
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	202c      	movs	r0, #44	@ 0x2c
 8004ad8:	fb00 f303 	mul.w	r3, r0, r3
 8004adc:	4413      	add	r3, r2
 8004ade:	3360      	adds	r3, #96	@ 0x60
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f00b fbc7 	bl	8010278 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d12b      	bne.n	8004b4a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	212c      	movs	r1, #44	@ 0x2c
 8004af8:	fb01 f303 	mul.w	r3, r1, r3
 8004afc:	4413      	add	r3, r2
 8004afe:	3348      	adds	r3, #72	@ 0x48
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	202c      	movs	r0, #44	@ 0x2c
 8004b08:	fb00 f202 	mul.w	r2, r0, r2
 8004b0c:	440a      	add	r2, r1
 8004b0e:	3240      	adds	r2, #64	@ 0x40
 8004b10:	8812      	ldrh	r2, [r2, #0]
 8004b12:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 818e 	beq.w	8004e3c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	212c      	movs	r1, #44	@ 0x2c
 8004b26:	fb01 f303 	mul.w	r3, r1, r3
 8004b2a:	4413      	add	r3, r2
 8004b2c:	3354      	adds	r3, #84	@ 0x54
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	f083 0301 	eor.w	r3, r3, #1
 8004b34:	b2d8      	uxtb	r0, r3
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	212c      	movs	r1, #44	@ 0x2c
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	4413      	add	r3, r2
 8004b42:	3354      	adds	r3, #84	@ 0x54
 8004b44:	4602      	mov	r2, r0
 8004b46:	701a      	strb	r2, [r3, #0]
}
 8004b48:	e178      	b.n	8004e3c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	212c      	movs	r1, #44	@ 0x2c
 8004b50:	fb01 f303 	mul.w	r3, r1, r3
 8004b54:	4413      	add	r3, r2
 8004b56:	3354      	adds	r3, #84	@ 0x54
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	f083 0301 	eor.w	r3, r3, #1
 8004b5e:	b2d8      	uxtb	r0, r3
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	212c      	movs	r1, #44	@ 0x2c
 8004b66:	fb01 f303 	mul.w	r3, r1, r3
 8004b6a:	4413      	add	r3, r2
 8004b6c:	3354      	adds	r3, #84	@ 0x54
 8004b6e:	4602      	mov	r2, r0
 8004b70:	701a      	strb	r2, [r3, #0]
}
 8004b72:	e163      	b.n	8004e3c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	f040 80f6 	bne.w	8004d78 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	212c      	movs	r1, #44	@ 0x2c
 8004b92:	fb01 f303 	mul.w	r3, r1, r3
 8004b96:	4413      	add	r3, r2
 8004b98:	3361      	adds	r3, #97	@ 0x61
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d109      	bne.n	8004bb4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	212c      	movs	r1, #44	@ 0x2c
 8004ba6:	fb01 f303 	mul.w	r3, r1, r3
 8004baa:	4413      	add	r3, r2
 8004bac:	3360      	adds	r3, #96	@ 0x60
 8004bae:	2201      	movs	r2, #1
 8004bb0:	701a      	strb	r2, [r3, #0]
 8004bb2:	e0c9      	b.n	8004d48 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	212c      	movs	r1, #44	@ 0x2c
 8004bba:	fb01 f303 	mul.w	r3, r1, r3
 8004bbe:	4413      	add	r3, r2
 8004bc0:	3361      	adds	r3, #97	@ 0x61
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b05      	cmp	r3, #5
 8004bc6:	d109      	bne.n	8004bdc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	212c      	movs	r1, #44	@ 0x2c
 8004bce:	fb01 f303 	mul.w	r3, r1, r3
 8004bd2:	4413      	add	r3, r2
 8004bd4:	3360      	adds	r3, #96	@ 0x60
 8004bd6:	2205      	movs	r2, #5
 8004bd8:	701a      	strb	r2, [r3, #0]
 8004bda:	e0b5      	b.n	8004d48 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	212c      	movs	r1, #44	@ 0x2c
 8004be2:	fb01 f303 	mul.w	r3, r1, r3
 8004be6:	4413      	add	r3, r2
 8004be8:	3361      	adds	r3, #97	@ 0x61
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b06      	cmp	r3, #6
 8004bee:	d009      	beq.n	8004c04 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	212c      	movs	r1, #44	@ 0x2c
 8004bf6:	fb01 f303 	mul.w	r3, r1, r3
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3361      	adds	r3, #97	@ 0x61
 8004bfe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d150      	bne.n	8004ca6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	212c      	movs	r1, #44	@ 0x2c
 8004c0a:	fb01 f303 	mul.w	r3, r1, r3
 8004c0e:	4413      	add	r3, r2
 8004c10:	335c      	adds	r3, #92	@ 0x5c
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	202c      	movs	r0, #44	@ 0x2c
 8004c1c:	fb00 f303 	mul.w	r3, r0, r3
 8004c20:	440b      	add	r3, r1
 8004c22:	335c      	adds	r3, #92	@ 0x5c
 8004c24:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	212c      	movs	r1, #44	@ 0x2c
 8004c2c:	fb01 f303 	mul.w	r3, r1, r3
 8004c30:	4413      	add	r3, r2
 8004c32:	335c      	adds	r3, #92	@ 0x5c
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d912      	bls.n	8004c60 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	212c      	movs	r1, #44	@ 0x2c
 8004c40:	fb01 f303 	mul.w	r3, r1, r3
 8004c44:	4413      	add	r3, r2
 8004c46:	335c      	adds	r3, #92	@ 0x5c
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	212c      	movs	r1, #44	@ 0x2c
 8004c52:	fb01 f303 	mul.w	r3, r1, r3
 8004c56:	4413      	add	r3, r2
 8004c58:	3360      	adds	r3, #96	@ 0x60
 8004c5a:	2204      	movs	r2, #4
 8004c5c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004c5e:	e073      	b.n	8004d48 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	212c      	movs	r1, #44	@ 0x2c
 8004c66:	fb01 f303 	mul.w	r3, r1, r3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	3360      	adds	r3, #96	@ 0x60
 8004c6e:	2202      	movs	r2, #2
 8004c70:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c88:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c90:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ca4:	e050      	b.n	8004d48 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	212c      	movs	r1, #44	@ 0x2c
 8004cac:	fb01 f303 	mul.w	r3, r1, r3
 8004cb0:	4413      	add	r3, r2
 8004cb2:	3361      	adds	r3, #97	@ 0x61
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b03      	cmp	r3, #3
 8004cb8:	d122      	bne.n	8004d00 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	212c      	movs	r1, #44	@ 0x2c
 8004cc0:	fb01 f303 	mul.w	r3, r1, r3
 8004cc4:	4413      	add	r3, r2
 8004cc6:	3360      	adds	r3, #96	@ 0x60
 8004cc8:	2202      	movs	r2, #2
 8004cca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ce2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004cea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	e023      	b.n	8004d48 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	212c      	movs	r1, #44	@ 0x2c
 8004d06:	fb01 f303 	mul.w	r3, r1, r3
 8004d0a:	4413      	add	r3, r2
 8004d0c:	3361      	adds	r3, #97	@ 0x61
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b07      	cmp	r3, #7
 8004d12:	d119      	bne.n	8004d48 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	212c      	movs	r1, #44	@ 0x2c
 8004d1a:	fb01 f303 	mul.w	r3, r1, r3
 8004d1e:	4413      	add	r3, r2
 8004d20:	335c      	adds	r3, #92	@ 0x5c
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	202c      	movs	r0, #44	@ 0x2c
 8004d2c:	fb00 f303 	mul.w	r3, r0, r3
 8004d30:	440b      	add	r3, r1
 8004d32:	335c      	adds	r3, #92	@ 0x5c
 8004d34:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	212c      	movs	r1, #44	@ 0x2c
 8004d3c:	fb01 f303 	mul.w	r3, r1, r3
 8004d40:	4413      	add	r3, r2
 8004d42:	3360      	adds	r3, #96	@ 0x60
 8004d44:	2204      	movs	r2, #4
 8004d46:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d54:	461a      	mov	r2, r3
 8004d56:	2302      	movs	r3, #2
 8004d58:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	b2d9      	uxtb	r1, r3
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	202c      	movs	r0, #44	@ 0x2c
 8004d64:	fb00 f303 	mul.w	r3, r0, r3
 8004d68:	4413      	add	r3, r2
 8004d6a:	3360      	adds	r3, #96	@ 0x60
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f00b fa81 	bl	8010278 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004d76:	e061      	b.n	8004e3c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 0310 	and.w	r3, r3, #16
 8004d8a:	2b10      	cmp	r3, #16
 8004d8c:	d156      	bne.n	8004e3c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	212c      	movs	r1, #44	@ 0x2c
 8004d94:	fb01 f303 	mul.w	r3, r1, r3
 8004d98:	4413      	add	r3, r2
 8004d9a:	333f      	adds	r3, #63	@ 0x3f
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d111      	bne.n	8004dc6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	212c      	movs	r1, #44	@ 0x2c
 8004da8:	fb01 f303 	mul.w	r3, r1, r3
 8004dac:	4413      	add	r3, r2
 8004dae:	335c      	adds	r3, #92	@ 0x5c
 8004db0:	2200      	movs	r2, #0
 8004db2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f004 faa5 	bl	800930e <USB_HC_Halt>
 8004dc4:	e031      	b.n	8004e2a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	212c      	movs	r1, #44	@ 0x2c
 8004dcc:	fb01 f303 	mul.w	r3, r1, r3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	333f      	adds	r3, #63	@ 0x3f
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d009      	beq.n	8004dee <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	212c      	movs	r1, #44	@ 0x2c
 8004de0:	fb01 f303 	mul.w	r3, r1, r3
 8004de4:	4413      	add	r3, r2
 8004de6:	333f      	adds	r3, #63	@ 0x3f
 8004de8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d11d      	bne.n	8004e2a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	212c      	movs	r1, #44	@ 0x2c
 8004df4:	fb01 f303 	mul.w	r3, r1, r3
 8004df8:	4413      	add	r3, r2
 8004dfa:	335c      	adds	r3, #92	@ 0x5c
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d110      	bne.n	8004e2a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	212c      	movs	r1, #44	@ 0x2c
 8004e0e:	fb01 f303 	mul.w	r3, r1, r3
 8004e12:	4413      	add	r3, r2
 8004e14:	3361      	adds	r3, #97	@ 0x61
 8004e16:	2203      	movs	r2, #3
 8004e18:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	4611      	mov	r1, r2
 8004e24:	4618      	mov	r0, r3
 8004e26:	f004 fa72 	bl	800930e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e36:	461a      	mov	r2, r3
 8004e38:	2310      	movs	r3, #16
 8004e3a:	6093      	str	r3, [r2, #8]
}
 8004e3c:	bf00      	nop
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b088      	sub	sp, #32
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004e5a:	78fb      	ldrb	r3, [r7, #3]
 8004e5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	d11a      	bne.n	8004eaa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e80:	461a      	mov	r2, r3
 8004e82:	2304      	movs	r3, #4
 8004e84:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	212c      	movs	r1, #44	@ 0x2c
 8004e8c:	fb01 f303 	mul.w	r3, r1, r3
 8004e90:	4413      	add	r3, r2
 8004e92:	3361      	adds	r3, #97	@ 0x61
 8004e94:	2206      	movs	r2, #6
 8004e96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f004 fa33 	bl	800930e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004ea8:	e331      	b.n	800550e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f003 0320 	and.w	r3, r3, #32
 8004ebc:	2b20      	cmp	r3, #32
 8004ebe:	d12e      	bne.n	8004f1e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ecc:	461a      	mov	r2, r3
 8004ece:	2320      	movs	r3, #32
 8004ed0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	212c      	movs	r1, #44	@ 0x2c
 8004ed8:	fb01 f303 	mul.w	r3, r1, r3
 8004edc:	4413      	add	r3, r2
 8004ede:	333d      	adds	r3, #61	@ 0x3d
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	f040 8313 	bne.w	800550e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	212c      	movs	r1, #44	@ 0x2c
 8004eee:	fb01 f303 	mul.w	r3, r1, r3
 8004ef2:	4413      	add	r3, r2
 8004ef4:	333d      	adds	r3, #61	@ 0x3d
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	212c      	movs	r1, #44	@ 0x2c
 8004f00:	fb01 f303 	mul.w	r3, r1, r3
 8004f04:	4413      	add	r3, r2
 8004f06:	3360      	adds	r3, #96	@ 0x60
 8004f08:	2202      	movs	r2, #2
 8004f0a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	4611      	mov	r1, r2
 8004f16:	4618      	mov	r0, r3
 8004f18:	f004 f9f9 	bl	800930e <USB_HC_Halt>
}
 8004f1c:	e2f7      	b.n	800550e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f34:	d112      	bne.n	8004f5c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f42:	461a      	mov	r2, r3
 8004f44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f48:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	b2d2      	uxtb	r2, r2
 8004f52:	4611      	mov	r1, r2
 8004f54:	4618      	mov	r0, r3
 8004f56:	f004 f9da 	bl	800930e <USB_HC_Halt>
}
 8004f5a:	e2d8      	b.n	800550e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d140      	bne.n	8004ff4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	212c      	movs	r1, #44	@ 0x2c
 8004f78:	fb01 f303 	mul.w	r3, r1, r3
 8004f7c:	4413      	add	r3, r2
 8004f7e:	335c      	adds	r3, #92	@ 0x5c
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f96:	2b40      	cmp	r3, #64	@ 0x40
 8004f98:	d111      	bne.n	8004fbe <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	212c      	movs	r1, #44	@ 0x2c
 8004fa0:	fb01 f303 	mul.w	r3, r1, r3
 8004fa4:	4413      	add	r3, r2
 8004fa6:	333d      	adds	r3, #61	@ 0x3d
 8004fa8:	2201      	movs	r2, #1
 8004faa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fb8:	461a      	mov	r2, r3
 8004fba:	2340      	movs	r3, #64	@ 0x40
 8004fbc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fca:	461a      	mov	r2, r3
 8004fcc:	2301      	movs	r3, #1
 8004fce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	212c      	movs	r1, #44	@ 0x2c
 8004fd6:	fb01 f303 	mul.w	r3, r1, r3
 8004fda:	4413      	add	r3, r2
 8004fdc:	3361      	adds	r3, #97	@ 0x61
 8004fde:	2201      	movs	r2, #1
 8004fe0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	4611      	mov	r1, r2
 8004fec:	4618      	mov	r0, r3
 8004fee:	f004 f98e 	bl	800930e <USB_HC_Halt>
}
 8004ff2:	e28c      	b.n	800550e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005006:	2b40      	cmp	r3, #64	@ 0x40
 8005008:	d12c      	bne.n	8005064 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	212c      	movs	r1, #44	@ 0x2c
 8005010:	fb01 f303 	mul.w	r3, r1, r3
 8005014:	4413      	add	r3, r2
 8005016:	3361      	adds	r3, #97	@ 0x61
 8005018:	2204      	movs	r2, #4
 800501a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	212c      	movs	r1, #44	@ 0x2c
 8005022:	fb01 f303 	mul.w	r3, r1, r3
 8005026:	4413      	add	r3, r2
 8005028:	333d      	adds	r3, #61	@ 0x3d
 800502a:	2201      	movs	r2, #1
 800502c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	212c      	movs	r1, #44	@ 0x2c
 8005034:	fb01 f303 	mul.w	r3, r1, r3
 8005038:	4413      	add	r3, r2
 800503a:	335c      	adds	r3, #92	@ 0x5c
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	4611      	mov	r1, r2
 800504a:	4618      	mov	r0, r3
 800504c:	f004 f95f 	bl	800930e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	4413      	add	r3, r2
 8005058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800505c:	461a      	mov	r2, r3
 800505e:	2340      	movs	r3, #64	@ 0x40
 8005060:	6093      	str	r3, [r2, #8]
}
 8005062:	e254      	b.n	800550e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	4413      	add	r3, r2
 800506c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b08      	cmp	r3, #8
 8005078:	d11a      	bne.n	80050b0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	4413      	add	r3, r2
 8005082:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005086:	461a      	mov	r2, r3
 8005088:	2308      	movs	r3, #8
 800508a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	212c      	movs	r1, #44	@ 0x2c
 8005092:	fb01 f303 	mul.w	r3, r1, r3
 8005096:	4413      	add	r3, r2
 8005098:	3361      	adds	r3, #97	@ 0x61
 800509a:	2205      	movs	r2, #5
 800509c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	4611      	mov	r1, r2
 80050a8:	4618      	mov	r0, r3
 80050aa:	f004 f930 	bl	800930e <USB_HC_Halt>
}
 80050ae:	e22e      	b.n	800550e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 0310 	and.w	r3, r3, #16
 80050c2:	2b10      	cmp	r3, #16
 80050c4:	d140      	bne.n	8005148 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	212c      	movs	r1, #44	@ 0x2c
 80050cc:	fb01 f303 	mul.w	r3, r1, r3
 80050d0:	4413      	add	r3, r2
 80050d2:	335c      	adds	r3, #92	@ 0x5c
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	212c      	movs	r1, #44	@ 0x2c
 80050de:	fb01 f303 	mul.w	r3, r1, r3
 80050e2:	4413      	add	r3, r2
 80050e4:	3361      	adds	r3, #97	@ 0x61
 80050e6:	2203      	movs	r2, #3
 80050e8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	212c      	movs	r1, #44	@ 0x2c
 80050f0:	fb01 f303 	mul.w	r3, r1, r3
 80050f4:	4413      	add	r3, r2
 80050f6:	333d      	adds	r3, #61	@ 0x3d
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d112      	bne.n	8005124 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	212c      	movs	r1, #44	@ 0x2c
 8005104:	fb01 f303 	mul.w	r3, r1, r3
 8005108:	4413      	add	r3, r2
 800510a:	333c      	adds	r3, #60	@ 0x3c
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d108      	bne.n	8005124 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	212c      	movs	r1, #44	@ 0x2c
 8005118:	fb01 f303 	mul.w	r3, r1, r3
 800511c:	4413      	add	r3, r2
 800511e:	333d      	adds	r3, #61	@ 0x3d
 8005120:	2201      	movs	r2, #1
 8005122:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	4611      	mov	r1, r2
 800512e:	4618      	mov	r0, r3
 8005130:	f004 f8ed 	bl	800930e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	4413      	add	r3, r2
 800513c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005140:	461a      	mov	r2, r3
 8005142:	2310      	movs	r3, #16
 8005144:	6093      	str	r3, [r2, #8]
}
 8005146:	e1e2      	b.n	800550e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	4413      	add	r3, r2
 8005150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800515a:	2b80      	cmp	r3, #128	@ 0x80
 800515c:	d164      	bne.n	8005228 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d111      	bne.n	800518a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	212c      	movs	r1, #44	@ 0x2c
 800516c:	fb01 f303 	mul.w	r3, r1, r3
 8005170:	4413      	add	r3, r2
 8005172:	3361      	adds	r3, #97	@ 0x61
 8005174:	2206      	movs	r2, #6
 8005176:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	4611      	mov	r1, r2
 8005182:	4618      	mov	r0, r3
 8005184:	f004 f8c3 	bl	800930e <USB_HC_Halt>
 8005188:	e044      	b.n	8005214 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	212c      	movs	r1, #44	@ 0x2c
 8005190:	fb01 f303 	mul.w	r3, r1, r3
 8005194:	4413      	add	r3, r2
 8005196:	335c      	adds	r3, #92	@ 0x5c
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	202c      	movs	r0, #44	@ 0x2c
 80051a2:	fb00 f303 	mul.w	r3, r0, r3
 80051a6:	440b      	add	r3, r1
 80051a8:	335c      	adds	r3, #92	@ 0x5c
 80051aa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	212c      	movs	r1, #44	@ 0x2c
 80051b2:	fb01 f303 	mul.w	r3, r1, r3
 80051b6:	4413      	add	r3, r2
 80051b8:	335c      	adds	r3, #92	@ 0x5c
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d920      	bls.n	8005202 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	212c      	movs	r1, #44	@ 0x2c
 80051c6:	fb01 f303 	mul.w	r3, r1, r3
 80051ca:	4413      	add	r3, r2
 80051cc:	335c      	adds	r3, #92	@ 0x5c
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	212c      	movs	r1, #44	@ 0x2c
 80051d8:	fb01 f303 	mul.w	r3, r1, r3
 80051dc:	4413      	add	r3, r2
 80051de:	3360      	adds	r3, #96	@ 0x60
 80051e0:	2204      	movs	r2, #4
 80051e2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	b2d9      	uxtb	r1, r3
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	202c      	movs	r0, #44	@ 0x2c
 80051ee:	fb00 f303 	mul.w	r3, r0, r3
 80051f2:	4413      	add	r3, r2
 80051f4:	3360      	adds	r3, #96	@ 0x60
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	461a      	mov	r2, r3
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f00b f83c 	bl	8010278 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005200:	e008      	b.n	8005214 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	212c      	movs	r1, #44	@ 0x2c
 8005208:	fb01 f303 	mul.w	r3, r1, r3
 800520c:	4413      	add	r3, r2
 800520e:	3360      	adds	r3, #96	@ 0x60
 8005210:	2202      	movs	r2, #2
 8005212:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	4413      	add	r3, r2
 800521c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005220:	461a      	mov	r2, r3
 8005222:	2380      	movs	r3, #128	@ 0x80
 8005224:	6093      	str	r3, [r2, #8]
}
 8005226:	e172      	b.n	800550e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	4413      	add	r3, r2
 8005230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800523a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800523e:	d11b      	bne.n	8005278 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	212c      	movs	r1, #44	@ 0x2c
 8005246:	fb01 f303 	mul.w	r3, r1, r3
 800524a:	4413      	add	r3, r2
 800524c:	3361      	adds	r3, #97	@ 0x61
 800524e:	2208      	movs	r2, #8
 8005250:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	4611      	mov	r1, r2
 800525c:	4618      	mov	r0, r3
 800525e:	f004 f856 	bl	800930e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	4413      	add	r3, r2
 800526a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800526e:	461a      	mov	r2, r3
 8005270:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005274:	6093      	str	r3, [r2, #8]
}
 8005276:	e14a      	b.n	800550e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	4413      	add	r3, r2
 8005280:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b02      	cmp	r3, #2
 800528c:	f040 813f 	bne.w	800550e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	212c      	movs	r1, #44	@ 0x2c
 8005296:	fb01 f303 	mul.w	r3, r1, r3
 800529a:	4413      	add	r3, r2
 800529c:	3361      	adds	r3, #97	@ 0x61
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d17d      	bne.n	80053a0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	212c      	movs	r1, #44	@ 0x2c
 80052aa:	fb01 f303 	mul.w	r3, r1, r3
 80052ae:	4413      	add	r3, r2
 80052b0:	3360      	adds	r3, #96	@ 0x60
 80052b2:	2201      	movs	r2, #1
 80052b4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	212c      	movs	r1, #44	@ 0x2c
 80052bc:	fb01 f303 	mul.w	r3, r1, r3
 80052c0:	4413      	add	r3, r2
 80052c2:	333f      	adds	r3, #63	@ 0x3f
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d00a      	beq.n	80052e0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	212c      	movs	r1, #44	@ 0x2c
 80052d0:	fb01 f303 	mul.w	r3, r1, r3
 80052d4:	4413      	add	r3, r2
 80052d6:	333f      	adds	r3, #63	@ 0x3f
 80052d8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80052da:	2b03      	cmp	r3, #3
 80052dc:	f040 8100 	bne.w	80054e0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d113      	bne.n	8005310 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	212c      	movs	r1, #44	@ 0x2c
 80052ee:	fb01 f303 	mul.w	r3, r1, r3
 80052f2:	4413      	add	r3, r2
 80052f4:	3355      	adds	r3, #85	@ 0x55
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	f083 0301 	eor.w	r3, r3, #1
 80052fc:	b2d8      	uxtb	r0, r3
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	212c      	movs	r1, #44	@ 0x2c
 8005304:	fb01 f303 	mul.w	r3, r1, r3
 8005308:	4413      	add	r3, r2
 800530a:	3355      	adds	r3, #85	@ 0x55
 800530c:	4602      	mov	r2, r0
 800530e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	2b01      	cmp	r3, #1
 8005316:	f040 80e3 	bne.w	80054e0 <HCD_HC_OUT_IRQHandler+0x69c>
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	212c      	movs	r1, #44	@ 0x2c
 8005320:	fb01 f303 	mul.w	r3, r1, r3
 8005324:	4413      	add	r3, r2
 8005326:	334c      	adds	r3, #76	@ 0x4c
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 80d8 	beq.w	80054e0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	212c      	movs	r1, #44	@ 0x2c
 8005336:	fb01 f303 	mul.w	r3, r1, r3
 800533a:	4413      	add	r3, r2
 800533c:	334c      	adds	r3, #76	@ 0x4c
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	202c      	movs	r0, #44	@ 0x2c
 8005346:	fb00 f202 	mul.w	r2, r0, r2
 800534a:	440a      	add	r2, r1
 800534c:	3240      	adds	r2, #64	@ 0x40
 800534e:	8812      	ldrh	r2, [r2, #0]
 8005350:	4413      	add	r3, r2
 8005352:	3b01      	subs	r3, #1
 8005354:	6879      	ldr	r1, [r7, #4]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	202c      	movs	r0, #44	@ 0x2c
 800535a:	fb00 f202 	mul.w	r2, r0, r2
 800535e:	440a      	add	r2, r1
 8005360:	3240      	adds	r2, #64	@ 0x40
 8005362:	8812      	ldrh	r2, [r2, #0]
 8005364:	fbb3 f3f2 	udiv	r3, r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 80b5 	beq.w	80054e0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	212c      	movs	r1, #44	@ 0x2c
 800537c:	fb01 f303 	mul.w	r3, r1, r3
 8005380:	4413      	add	r3, r2
 8005382:	3355      	adds	r3, #85	@ 0x55
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	f083 0301 	eor.w	r3, r3, #1
 800538a:	b2d8      	uxtb	r0, r3
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	212c      	movs	r1, #44	@ 0x2c
 8005392:	fb01 f303 	mul.w	r3, r1, r3
 8005396:	4413      	add	r3, r2
 8005398:	3355      	adds	r3, #85	@ 0x55
 800539a:	4602      	mov	r2, r0
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	e09f      	b.n	80054e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	212c      	movs	r1, #44	@ 0x2c
 80053a6:	fb01 f303 	mul.w	r3, r1, r3
 80053aa:	4413      	add	r3, r2
 80053ac:	3361      	adds	r3, #97	@ 0x61
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b03      	cmp	r3, #3
 80053b2:	d109      	bne.n	80053c8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	212c      	movs	r1, #44	@ 0x2c
 80053ba:	fb01 f303 	mul.w	r3, r1, r3
 80053be:	4413      	add	r3, r2
 80053c0:	3360      	adds	r3, #96	@ 0x60
 80053c2:	2202      	movs	r2, #2
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	e08b      	b.n	80054e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	212c      	movs	r1, #44	@ 0x2c
 80053ce:	fb01 f303 	mul.w	r3, r1, r3
 80053d2:	4413      	add	r3, r2
 80053d4:	3361      	adds	r3, #97	@ 0x61
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d109      	bne.n	80053f0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	212c      	movs	r1, #44	@ 0x2c
 80053e2:	fb01 f303 	mul.w	r3, r1, r3
 80053e6:	4413      	add	r3, r2
 80053e8:	3360      	adds	r3, #96	@ 0x60
 80053ea:	2202      	movs	r2, #2
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	e077      	b.n	80054e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	212c      	movs	r1, #44	@ 0x2c
 80053f6:	fb01 f303 	mul.w	r3, r1, r3
 80053fa:	4413      	add	r3, r2
 80053fc:	3361      	adds	r3, #97	@ 0x61
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b05      	cmp	r3, #5
 8005402:	d109      	bne.n	8005418 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	212c      	movs	r1, #44	@ 0x2c
 800540a:	fb01 f303 	mul.w	r3, r1, r3
 800540e:	4413      	add	r3, r2
 8005410:	3360      	adds	r3, #96	@ 0x60
 8005412:	2205      	movs	r2, #5
 8005414:	701a      	strb	r2, [r3, #0]
 8005416:	e063      	b.n	80054e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	212c      	movs	r1, #44	@ 0x2c
 800541e:	fb01 f303 	mul.w	r3, r1, r3
 8005422:	4413      	add	r3, r2
 8005424:	3361      	adds	r3, #97	@ 0x61
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	2b06      	cmp	r3, #6
 800542a:	d009      	beq.n	8005440 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	212c      	movs	r1, #44	@ 0x2c
 8005432:	fb01 f303 	mul.w	r3, r1, r3
 8005436:	4413      	add	r3, r2
 8005438:	3361      	adds	r3, #97	@ 0x61
 800543a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800543c:	2b08      	cmp	r3, #8
 800543e:	d14f      	bne.n	80054e0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	212c      	movs	r1, #44	@ 0x2c
 8005446:	fb01 f303 	mul.w	r3, r1, r3
 800544a:	4413      	add	r3, r2
 800544c:	335c      	adds	r3, #92	@ 0x5c
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	202c      	movs	r0, #44	@ 0x2c
 8005458:	fb00 f303 	mul.w	r3, r0, r3
 800545c:	440b      	add	r3, r1
 800545e:	335c      	adds	r3, #92	@ 0x5c
 8005460:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	212c      	movs	r1, #44	@ 0x2c
 8005468:	fb01 f303 	mul.w	r3, r1, r3
 800546c:	4413      	add	r3, r2
 800546e:	335c      	adds	r3, #92	@ 0x5c
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b02      	cmp	r3, #2
 8005474:	d912      	bls.n	800549c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	212c      	movs	r1, #44	@ 0x2c
 800547c:	fb01 f303 	mul.w	r3, r1, r3
 8005480:	4413      	add	r3, r2
 8005482:	335c      	adds	r3, #92	@ 0x5c
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	212c      	movs	r1, #44	@ 0x2c
 800548e:	fb01 f303 	mul.w	r3, r1, r3
 8005492:	4413      	add	r3, r2
 8005494:	3360      	adds	r3, #96	@ 0x60
 8005496:	2204      	movs	r2, #4
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	e021      	b.n	80054e0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	212c      	movs	r1, #44	@ 0x2c
 80054a2:	fb01 f303 	mul.w	r3, r1, r3
 80054a6:	4413      	add	r3, r2
 80054a8:	3360      	adds	r3, #96	@ 0x60
 80054aa:	2202      	movs	r2, #2
 80054ac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80054c4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054cc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054da:	461a      	mov	r2, r3
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054ec:	461a      	mov	r2, r3
 80054ee:	2302      	movs	r3, #2
 80054f0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	b2d9      	uxtb	r1, r3
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	202c      	movs	r0, #44	@ 0x2c
 80054fc:	fb00 f303 	mul.w	r3, r0, r3
 8005500:	4413      	add	r3, r2
 8005502:	3360      	adds	r3, #96	@ 0x60
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f00a feb5 	bl	8010278 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800550e:	bf00      	nop
 8005510:	3720      	adds	r7, #32
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b08a      	sub	sp, #40	@ 0x28
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005526:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	f003 030f 	and.w	r3, r3, #15
 8005536:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	0c5b      	lsrs	r3, r3, #17
 800553c:	f003 030f 	and.w	r3, r3, #15
 8005540:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	091b      	lsrs	r3, r3, #4
 8005546:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800554a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	2b02      	cmp	r3, #2
 8005550:	d004      	beq.n	800555c <HCD_RXQLVL_IRQHandler+0x46>
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2b05      	cmp	r3, #5
 8005556:	f000 80a9 	beq.w	80056ac <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800555a:	e0aa      	b.n	80056b2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 80a6 	beq.w	80056b0 <HCD_RXQLVL_IRQHandler+0x19a>
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	212c      	movs	r1, #44	@ 0x2c
 800556a:	fb01 f303 	mul.w	r3, r1, r3
 800556e:	4413      	add	r3, r2
 8005570:	3344      	adds	r3, #68	@ 0x44
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 809b 	beq.w	80056b0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	212c      	movs	r1, #44	@ 0x2c
 8005580:	fb01 f303 	mul.w	r3, r1, r3
 8005584:	4413      	add	r3, r2
 8005586:	3350      	adds	r3, #80	@ 0x50
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	441a      	add	r2, r3
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	202c      	movs	r0, #44	@ 0x2c
 8005594:	fb00 f303 	mul.w	r3, r0, r3
 8005598:	440b      	add	r3, r1
 800559a:	334c      	adds	r3, #76	@ 0x4c
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d87a      	bhi.n	8005698 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	212c      	movs	r1, #44	@ 0x2c
 80055ac:	fb01 f303 	mul.w	r3, r1, r3
 80055b0:	4413      	add	r3, r2
 80055b2:	3344      	adds	r3, #68	@ 0x44
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	b292      	uxth	r2, r2
 80055ba:	4619      	mov	r1, r3
 80055bc:	f003 f9fe 	bl	80089bc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	212c      	movs	r1, #44	@ 0x2c
 80055c6:	fb01 f303 	mul.w	r3, r1, r3
 80055ca:	4413      	add	r3, r2
 80055cc:	3344      	adds	r3, #68	@ 0x44
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	441a      	add	r2, r3
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	202c      	movs	r0, #44	@ 0x2c
 80055da:	fb00 f303 	mul.w	r3, r0, r3
 80055de:	440b      	add	r3, r1
 80055e0:	3344      	adds	r3, #68	@ 0x44
 80055e2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	212c      	movs	r1, #44	@ 0x2c
 80055ea:	fb01 f303 	mul.w	r3, r1, r3
 80055ee:	4413      	add	r3, r2
 80055f0:	3350      	adds	r3, #80	@ 0x50
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	441a      	add	r2, r3
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	202c      	movs	r0, #44	@ 0x2c
 80055fe:	fb00 f303 	mul.w	r3, r0, r3
 8005602:	440b      	add	r3, r1
 8005604:	3350      	adds	r3, #80	@ 0x50
 8005606:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	4413      	add	r3, r2
 8005610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	0cdb      	lsrs	r3, r3, #19
 8005618:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800561c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	212c      	movs	r1, #44	@ 0x2c
 8005624:	fb01 f303 	mul.w	r3, r1, r3
 8005628:	4413      	add	r3, r2
 800562a:	3340      	adds	r3, #64	@ 0x40
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	4293      	cmp	r3, r2
 8005634:	d13c      	bne.n	80056b0 <HCD_RXQLVL_IRQHandler+0x19a>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d039      	beq.n	80056b0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	4413      	add	r3, r2
 8005644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005652:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800565a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	4413      	add	r3, r2
 8005664:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005668:	461a      	mov	r2, r3
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	212c      	movs	r1, #44	@ 0x2c
 8005674:	fb01 f303 	mul.w	r3, r1, r3
 8005678:	4413      	add	r3, r2
 800567a:	3354      	adds	r3, #84	@ 0x54
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	f083 0301 	eor.w	r3, r3, #1
 8005682:	b2d8      	uxtb	r0, r3
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	212c      	movs	r1, #44	@ 0x2c
 800568a:	fb01 f303 	mul.w	r3, r1, r3
 800568e:	4413      	add	r3, r2
 8005690:	3354      	adds	r3, #84	@ 0x54
 8005692:	4602      	mov	r2, r0
 8005694:	701a      	strb	r2, [r3, #0]
      break;
 8005696:	e00b      	b.n	80056b0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	212c      	movs	r1, #44	@ 0x2c
 800569e:	fb01 f303 	mul.w	r3, r1, r3
 80056a2:	4413      	add	r3, r2
 80056a4:	3360      	adds	r3, #96	@ 0x60
 80056a6:	2204      	movs	r2, #4
 80056a8:	701a      	strb	r2, [r3, #0]
      break;
 80056aa:	e001      	b.n	80056b0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80056ac:	bf00      	nop
 80056ae:	e000      	b.n	80056b2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80056b0:	bf00      	nop
  }
}
 80056b2:	bf00      	nop
 80056b4:	3728      	adds	r7, #40	@ 0x28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b086      	sub	sp, #24
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80056e6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d10b      	bne.n	800570a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d102      	bne.n	8005702 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f00a fd9f 	bl	8010240 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f043 0302 	orr.w	r3, r3, #2
 8005708:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	2b08      	cmp	r3, #8
 8005712:	d132      	bne.n	800577a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f043 0308 	orr.w	r3, r3, #8
 800571a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	2b04      	cmp	r3, #4
 8005724:	d126      	bne.n	8005774 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	2b02      	cmp	r3, #2
 800572c:	d113      	bne.n	8005756 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005734:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005738:	d106      	bne.n	8005748 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2102      	movs	r1, #2
 8005740:	4618      	mov	r0, r3
 8005742:	f003 faa9 	bl	8008c98 <USB_InitFSLSPClkSel>
 8005746:	e011      	b.n	800576c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2101      	movs	r1, #1
 800574e:	4618      	mov	r0, r3
 8005750:	f003 faa2 	bl	8008c98 <USB_InitFSLSPClkSel>
 8005754:	e00a      	b.n	800576c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d106      	bne.n	800576c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005764:	461a      	mov	r2, r3
 8005766:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800576a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f00a fd95 	bl	801029c <HAL_HCD_PortEnabled_Callback>
 8005772:	e002      	b.n	800577a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f00a fd9f 	bl	80102b8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f003 0320 	and.w	r3, r3, #32
 8005780:	2b20      	cmp	r3, #32
 8005782:	d103      	bne.n	800578c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f043 0320 	orr.w	r3, r3, #32
 800578a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005792:	461a      	mov	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	6013      	str	r3, [r2, #0]
}
 8005798:	bf00      	nop
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e12b      	b.n	8005a0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fd fc74 	bl	80030b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2224      	movs	r2, #36	@ 0x24
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0201 	bic.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005802:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005804:	f001 fa20 	bl	8006c48 <HAL_RCC_GetPCLK1Freq>
 8005808:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	4a81      	ldr	r2, [pc, #516]	@ (8005a14 <HAL_I2C_Init+0x274>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d807      	bhi.n	8005824 <HAL_I2C_Init+0x84>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4a80      	ldr	r2, [pc, #512]	@ (8005a18 <HAL_I2C_Init+0x278>)
 8005818:	4293      	cmp	r3, r2
 800581a:	bf94      	ite	ls
 800581c:	2301      	movls	r3, #1
 800581e:	2300      	movhi	r3, #0
 8005820:	b2db      	uxtb	r3, r3
 8005822:	e006      	b.n	8005832 <HAL_I2C_Init+0x92>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4a7d      	ldr	r2, [pc, #500]	@ (8005a1c <HAL_I2C_Init+0x27c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	bf94      	ite	ls
 800582c:	2301      	movls	r3, #1
 800582e:	2300      	movhi	r3, #0
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e0e7      	b.n	8005a0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4a78      	ldr	r2, [pc, #480]	@ (8005a20 <HAL_I2C_Init+0x280>)
 800583e:	fba2 2303 	umull	r2, r3, r2, r3
 8005842:	0c9b      	lsrs	r3, r3, #18
 8005844:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	430a      	orrs	r2, r1
 8005858:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	4a6a      	ldr	r2, [pc, #424]	@ (8005a14 <HAL_I2C_Init+0x274>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d802      	bhi.n	8005874 <HAL_I2C_Init+0xd4>
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	3301      	adds	r3, #1
 8005872:	e009      	b.n	8005888 <HAL_I2C_Init+0xe8>
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800587a:	fb02 f303 	mul.w	r3, r2, r3
 800587e:	4a69      	ldr	r2, [pc, #420]	@ (8005a24 <HAL_I2C_Init+0x284>)
 8005880:	fba2 2303 	umull	r2, r3, r2, r3
 8005884:	099b      	lsrs	r3, r3, #6
 8005886:	3301      	adds	r3, #1
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6812      	ldr	r2, [r2, #0]
 800588c:	430b      	orrs	r3, r1
 800588e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800589a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	495c      	ldr	r1, [pc, #368]	@ (8005a14 <HAL_I2C_Init+0x274>)
 80058a4:	428b      	cmp	r3, r1
 80058a6:	d819      	bhi.n	80058dc <HAL_I2C_Init+0x13c>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	1e59      	subs	r1, r3, #1
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80058b6:	1c59      	adds	r1, r3, #1
 80058b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80058bc:	400b      	ands	r3, r1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <HAL_I2C_Init+0x138>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	1e59      	subs	r1, r3, #1
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80058d0:	3301      	adds	r3, #1
 80058d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058d6:	e051      	b.n	800597c <HAL_I2C_Init+0x1dc>
 80058d8:	2304      	movs	r3, #4
 80058da:	e04f      	b.n	800597c <HAL_I2C_Init+0x1dc>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d111      	bne.n	8005908 <HAL_I2C_Init+0x168>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	1e58      	subs	r0, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6859      	ldr	r1, [r3, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	005b      	lsls	r3, r3, #1
 80058f0:	440b      	add	r3, r1
 80058f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80058f6:	3301      	adds	r3, #1
 80058f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	bf0c      	ite	eq
 8005900:	2301      	moveq	r3, #1
 8005902:	2300      	movne	r3, #0
 8005904:	b2db      	uxtb	r3, r3
 8005906:	e012      	b.n	800592e <HAL_I2C_Init+0x18e>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	1e58      	subs	r0, r3, #1
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6859      	ldr	r1, [r3, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	440b      	add	r3, r1
 8005916:	0099      	lsls	r1, r3, #2
 8005918:	440b      	add	r3, r1
 800591a:	fbb0 f3f3 	udiv	r3, r0, r3
 800591e:	3301      	adds	r3, #1
 8005920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005924:	2b00      	cmp	r3, #0
 8005926:	bf0c      	ite	eq
 8005928:	2301      	moveq	r3, #1
 800592a:	2300      	movne	r3, #0
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <HAL_I2C_Init+0x196>
 8005932:	2301      	movs	r3, #1
 8005934:	e022      	b.n	800597c <HAL_I2C_Init+0x1dc>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10e      	bne.n	800595c <HAL_I2C_Init+0x1bc>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	1e58      	subs	r0, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6859      	ldr	r1, [r3, #4]
 8005946:	460b      	mov	r3, r1
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	440b      	add	r3, r1
 800594c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005950:	3301      	adds	r3, #1
 8005952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005956:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800595a:	e00f      	b.n	800597c <HAL_I2C_Init+0x1dc>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	1e58      	subs	r0, r3, #1
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6859      	ldr	r1, [r3, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	440b      	add	r3, r1
 800596a:	0099      	lsls	r1, r3, #2
 800596c:	440b      	add	r3, r1
 800596e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005972:	3301      	adds	r3, #1
 8005974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005978:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800597c:	6879      	ldr	r1, [r7, #4]
 800597e:	6809      	ldr	r1, [r1, #0]
 8005980:	4313      	orrs	r3, r2
 8005982:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69da      	ldr	r2, [r3, #28]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80059aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6911      	ldr	r1, [r2, #16]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	68d2      	ldr	r2, [r2, #12]
 80059b6:	4311      	orrs	r1, r2
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6812      	ldr	r2, [r2, #0]
 80059bc:	430b      	orrs	r3, r1
 80059be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	695a      	ldr	r2, [r3, #20]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	000186a0 	.word	0x000186a0
 8005a18:	001e847f 	.word	0x001e847f
 8005a1c:	003d08ff 	.word	0x003d08ff
 8005a20:	431bde83 	.word	0x431bde83
 8005a24:	10624dd3 	.word	0x10624dd3

08005a28 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e128      	b.n	8005c8c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d109      	bne.n	8005a5a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a90      	ldr	r2, [pc, #576]	@ (8005c94 <HAL_I2S_Init+0x26c>)
 8005a52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7fd fb75 	bl	8003144 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6812      	ldr	r2, [r2, #0]
 8005a6c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005a70:	f023 030f 	bic.w	r3, r3, #15
 8005a74:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d060      	beq.n	8005b48 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d102      	bne.n	8005a94 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005a8e:	2310      	movs	r3, #16
 8005a90:	617b      	str	r3, [r7, #20]
 8005a92:	e001      	b.n	8005a98 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005a94:	2320      	movs	r3, #32
 8005a96:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	d802      	bhi.n	8005aa6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005aa6:	2001      	movs	r0, #1
 8005aa8:	f001 fa0a 	bl	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005aac:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ab6:	d125      	bne.n	8005b04 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d010      	beq.n	8005ae2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	fbb2 f2f3 	udiv	r2, r2, r3
 8005aca:	4613      	mov	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005adc:	3305      	adds	r3, #5
 8005ade:	613b      	str	r3, [r7, #16]
 8005ae0:	e01f      	b.n	8005b22 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	461a      	mov	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005afe:	3305      	adds	r3, #5
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	e00e      	b.n	8005b22 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	461a      	mov	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1e:	3305      	adds	r3, #5
 8005b20:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	4a5c      	ldr	r2, [pc, #368]	@ (8005c98 <HAL_I2S_Init+0x270>)
 8005b26:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2a:	08db      	lsrs	r3, r3, #3
 8005b2c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	085b      	lsrs	r3, r3, #1
 8005b3e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	021b      	lsls	r3, r3, #8
 8005b44:	61bb      	str	r3, [r7, #24]
 8005b46:	e003      	b.n	8005b50 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005b48:	2302      	movs	r3, #2
 8005b4a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d902      	bls.n	8005b5c <HAL_I2S_Init+0x134>
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	2bff      	cmp	r3, #255	@ 0xff
 8005b5a:	d907      	bls.n	8005b6c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b60:	f043 0210 	orr.w	r2, r3, #16
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e08f      	b.n	8005c8c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691a      	ldr	r2, [r3, #16]
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	ea42 0103 	orr.w	r1, r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69fa      	ldr	r2, [r7, #28]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005b8a:	f023 030f 	bic.w	r3, r3, #15
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6851      	ldr	r1, [r2, #4]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	6892      	ldr	r2, [r2, #8]
 8005b96:	4311      	orrs	r1, r2
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	68d2      	ldr	r2, [r2, #12]
 8005b9c:	4311      	orrs	r1, r2
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6992      	ldr	r2, [r2, #24]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d161      	bne.n	8005c7c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a38      	ldr	r2, [pc, #224]	@ (8005c9c <HAL_I2S_Init+0x274>)
 8005bbc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a37      	ldr	r2, [pc, #220]	@ (8005ca0 <HAL_I2S_Init+0x278>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d101      	bne.n	8005bcc <HAL_I2S_Init+0x1a4>
 8005bc8:	4b36      	ldr	r3, [pc, #216]	@ (8005ca4 <HAL_I2S_Init+0x27c>)
 8005bca:	e001      	b.n	8005bd0 <HAL_I2S_Init+0x1a8>
 8005bcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6812      	ldr	r2, [r2, #0]
 8005bd6:	4932      	ldr	r1, [pc, #200]	@ (8005ca0 <HAL_I2S_Init+0x278>)
 8005bd8:	428a      	cmp	r2, r1
 8005bda:	d101      	bne.n	8005be0 <HAL_I2S_Init+0x1b8>
 8005bdc:	4a31      	ldr	r2, [pc, #196]	@ (8005ca4 <HAL_I2S_Init+0x27c>)
 8005bde:	e001      	b.n	8005be4 <HAL_I2S_Init+0x1bc>
 8005be0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005be4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005be8:	f023 030f 	bic.w	r3, r3, #15
 8005bec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a2b      	ldr	r2, [pc, #172]	@ (8005ca0 <HAL_I2S_Init+0x278>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d101      	bne.n	8005bfc <HAL_I2S_Init+0x1d4>
 8005bf8:	4b2a      	ldr	r3, [pc, #168]	@ (8005ca4 <HAL_I2S_Init+0x27c>)
 8005bfa:	e001      	b.n	8005c00 <HAL_I2S_Init+0x1d8>
 8005bfc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c00:	2202      	movs	r2, #2
 8005c02:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a25      	ldr	r2, [pc, #148]	@ (8005ca0 <HAL_I2S_Init+0x278>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d101      	bne.n	8005c12 <HAL_I2S_Init+0x1ea>
 8005c0e:	4b25      	ldr	r3, [pc, #148]	@ (8005ca4 <HAL_I2S_Init+0x27c>)
 8005c10:	e001      	b.n	8005c16 <HAL_I2S_Init+0x1ee>
 8005c12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c22:	d003      	beq.n	8005c2c <HAL_I2S_Init+0x204>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d103      	bne.n	8005c34 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005c2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005c30:	613b      	str	r3, [r7, #16]
 8005c32:	e001      	b.n	8005c38 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005c34:	2300      	movs	r3, #0
 8005c36:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c42:	4313      	orrs	r3, r2
 8005c44:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c56:	4313      	orrs	r3, r2
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	897b      	ldrh	r3, [r7, #10]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005c64:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a0d      	ldr	r2, [pc, #52]	@ (8005ca0 <HAL_I2S_Init+0x278>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d101      	bne.n	8005c74 <HAL_I2S_Init+0x24c>
 8005c70:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca4 <HAL_I2S_Init+0x27c>)
 8005c72:	e001      	b.n	8005c78 <HAL_I2S_Init+0x250>
 8005c74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c78:	897a      	ldrh	r2, [r7, #10]
 8005c7a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3720      	adds	r7, #32
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	08005d9f 	.word	0x08005d9f
 8005c98:	cccccccd 	.word	0xcccccccd
 8005c9c:	08005eb5 	.word	0x08005eb5
 8005ca0:	40003800 	.word	0x40003800
 8005ca4:	40003400 	.word	0x40003400

08005ca8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf0:	881a      	ldrh	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfc:	1c9a      	adds	r2, r3, #2
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10e      	bne.n	8005d38 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d28:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7ff ffb8 	bl	8005ca8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005d38:	bf00      	nop
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68da      	ldr	r2, [r3, #12]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d52:	b292      	uxth	r2, r2
 8005d54:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5a:	1c9a      	adds	r2, r3, #2
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	3b01      	subs	r3, #1
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10e      	bne.n	8005d96 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d86:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7ff ff93 	bl	8005cbc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005d96:	bf00      	nop
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b086      	sub	sp, #24
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	d13a      	bne.n	8005e30 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d109      	bne.n	8005dd8 <I2S_IRQHandler+0x3a>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dce:	2b40      	cmp	r3, #64	@ 0x40
 8005dd0:	d102      	bne.n	8005dd8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7ff ffb4 	bl	8005d40 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dde:	2b40      	cmp	r3, #64	@ 0x40
 8005de0:	d126      	bne.n	8005e30 <I2S_IRQHandler+0x92>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f003 0320 	and.w	r3, r3, #32
 8005dec:	2b20      	cmp	r3, #32
 8005dee:	d11f      	bne.n	8005e30 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005dfe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005e00:	2300      	movs	r3, #0
 8005e02:	613b      	str	r3, [r7, #16]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	613b      	str	r3, [r7, #16]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	613b      	str	r3, [r7, #16]
 8005e14:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e22:	f043 0202 	orr.w	r2, r3, #2
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7ff ff50 	bl	8005cd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d136      	bne.n	8005eaa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d109      	bne.n	8005e5a <I2S_IRQHandler+0xbc>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e50:	2b80      	cmp	r3, #128	@ 0x80
 8005e52:	d102      	bne.n	8005e5a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7ff ff45 	bl	8005ce4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f003 0308 	and.w	r3, r3, #8
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d122      	bne.n	8005eaa <I2S_IRQHandler+0x10c>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b20      	cmp	r3, #32
 8005e70:	d11b      	bne.n	8005eaa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005e80:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e82:	2300      	movs	r3, #0
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e9c:	f043 0204 	orr.w	r2, r3, #4
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7ff ff13 	bl	8005cd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005eaa:	bf00      	nop
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
	...

08005eb4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b088      	sub	sp, #32
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a92      	ldr	r2, [pc, #584]	@ (8006114 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d101      	bne.n	8005ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005ece:	4b92      	ldr	r3, [pc, #584]	@ (8006118 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ed0:	e001      	b.n	8005ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005ed2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a8b      	ldr	r2, [pc, #556]	@ (8006114 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d101      	bne.n	8005ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005eec:	4b8a      	ldr	r3, [pc, #552]	@ (8006118 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005eee:	e001      	b.n	8005ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005ef0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f00:	d004      	beq.n	8005f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f040 8099 	bne.w	800603e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d107      	bne.n	8005f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f925 	bl	8006170 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d107      	bne.n	8005f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f9c8 	bl	80062d0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f46:	2b40      	cmp	r3, #64	@ 0x40
 8005f48:	d13a      	bne.n	8005fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f003 0320 	and.w	r3, r3, #32
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d035      	beq.n	8005fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a6e      	ldr	r2, [pc, #440]	@ (8006114 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d101      	bne.n	8005f62 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005f5e:	4b6e      	ldr	r3, [pc, #440]	@ (8006118 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f60:	e001      	b.n	8005f66 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005f62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4969      	ldr	r1, [pc, #420]	@ (8006114 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f6e:	428b      	cmp	r3, r1
 8005f70:	d101      	bne.n	8005f76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005f72:	4b69      	ldr	r3, [pc, #420]	@ (8006118 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f74:	e001      	b.n	8005f7a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005f76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f7a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f7e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f8e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005f90:	2300      	movs	r3, #0
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fb2:	f043 0202 	orr.w	r2, r3, #2
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7ff fe88 	bl	8005cd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b08      	cmp	r3, #8
 8005fc8:	f040 80c3 	bne.w	8006152 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 80bd 	beq.w	8006152 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005fe6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a49      	ldr	r2, [pc, #292]	@ (8006114 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d101      	bne.n	8005ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005ff2:	4b49      	ldr	r3, [pc, #292]	@ (8006118 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ff4:	e001      	b.n	8005ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005ff6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4944      	ldr	r1, [pc, #272]	@ (8006114 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006002:	428b      	cmp	r3, r1
 8006004:	d101      	bne.n	800600a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006006:	4b44      	ldr	r3, [pc, #272]	@ (8006118 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006008:	e001      	b.n	800600e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800600a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800600e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006012:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006014:	2300      	movs	r3, #0
 8006016:	60bb      	str	r3, [r7, #8]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	60bb      	str	r3, [r7, #8]
 8006020:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800602e:	f043 0204 	orr.w	r2, r3, #4
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7ff fe4a 	bl	8005cd0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800603c:	e089      	b.n	8006152 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b02      	cmp	r3, #2
 8006046:	d107      	bne.n	8006058 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f8be 	bl	80061d4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b01      	cmp	r3, #1
 8006060:	d107      	bne.n	8006072 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f8fd 	bl	800626c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006078:	2b40      	cmp	r3, #64	@ 0x40
 800607a:	d12f      	bne.n	80060dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f003 0320 	and.w	r3, r3, #32
 8006082:	2b00      	cmp	r3, #0
 8006084:	d02a      	beq.n	80060dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006094:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1e      	ldr	r2, [pc, #120]	@ (8006114 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d101      	bne.n	80060a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80060a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006118 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060a2:	e001      	b.n	80060a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80060a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4919      	ldr	r1, [pc, #100]	@ (8006114 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060b0:	428b      	cmp	r3, r1
 80060b2:	d101      	bne.n	80060b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80060b4:	4b18      	ldr	r3, [pc, #96]	@ (8006118 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060b6:	e001      	b.n	80060bc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80060b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060bc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80060c0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ce:	f043 0202 	orr.w	r2, r3, #2
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff fdfa 	bl	8005cd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	f003 0308 	and.w	r3, r3, #8
 80060e2:	2b08      	cmp	r3, #8
 80060e4:	d136      	bne.n	8006154 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	f003 0320 	and.w	r3, r3, #32
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d031      	beq.n	8006154 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a07      	ldr	r2, [pc, #28]	@ (8006114 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d101      	bne.n	80060fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80060fa:	4b07      	ldr	r3, [pc, #28]	@ (8006118 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060fc:	e001      	b.n	8006102 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80060fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4902      	ldr	r1, [pc, #8]	@ (8006114 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800610a:	428b      	cmp	r3, r1
 800610c:	d106      	bne.n	800611c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800610e:	4b02      	ldr	r3, [pc, #8]	@ (8006118 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006110:	e006      	b.n	8006120 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006112:	bf00      	nop
 8006114:	40003800 	.word	0x40003800
 8006118:	40003400 	.word	0x40003400
 800611c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006120:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006124:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006134:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006142:	f043 0204 	orr.w	r2, r3, #4
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff fdc0 	bl	8005cd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006150:	e000      	b.n	8006154 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006152:	bf00      	nop
}
 8006154:	bf00      	nop
 8006156:	3720      	adds	r7, #32
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617c:	1c99      	adds	r1, r3, #2
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	6251      	str	r1, [r2, #36]	@ 0x24
 8006182:	881a      	ldrh	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800618e:	b29b      	uxth	r3, r3
 8006190:	3b01      	subs	r3, #1
 8006192:	b29a      	uxth	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d113      	bne.n	80061ca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80061b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d106      	bne.n	80061ca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7ff ffc9 	bl	800615c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061ca:	bf00      	nop
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e0:	1c99      	adds	r1, r3, #2
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	6251      	str	r1, [r2, #36]	@ 0x24
 80061e6:	8819      	ldrh	r1, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006264 <I2SEx_TxISR_I2SExt+0x90>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d101      	bne.n	80061f6 <I2SEx_TxISR_I2SExt+0x22>
 80061f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006268 <I2SEx_TxISR_I2SExt+0x94>)
 80061f4:	e001      	b.n	80061fa <I2SEx_TxISR_I2SExt+0x26>
 80061f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80061fa:	460a      	mov	r2, r1
 80061fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006202:	b29b      	uxth	r3, r3
 8006204:	3b01      	subs	r3, #1
 8006206:	b29a      	uxth	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006210:	b29b      	uxth	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d121      	bne.n	800625a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a12      	ldr	r2, [pc, #72]	@ (8006264 <I2SEx_TxISR_I2SExt+0x90>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d101      	bne.n	8006224 <I2SEx_TxISR_I2SExt+0x50>
 8006220:	4b11      	ldr	r3, [pc, #68]	@ (8006268 <I2SEx_TxISR_I2SExt+0x94>)
 8006222:	e001      	b.n	8006228 <I2SEx_TxISR_I2SExt+0x54>
 8006224:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	490d      	ldr	r1, [pc, #52]	@ (8006264 <I2SEx_TxISR_I2SExt+0x90>)
 8006230:	428b      	cmp	r3, r1
 8006232:	d101      	bne.n	8006238 <I2SEx_TxISR_I2SExt+0x64>
 8006234:	4b0c      	ldr	r3, [pc, #48]	@ (8006268 <I2SEx_TxISR_I2SExt+0x94>)
 8006236:	e001      	b.n	800623c <I2SEx_TxISR_I2SExt+0x68>
 8006238:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800623c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006240:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006246:	b29b      	uxth	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	d106      	bne.n	800625a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7ff ff81 	bl	800615c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800625a:	bf00      	nop
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	40003800 	.word	0x40003800
 8006268:	40003400 	.word	0x40003400

0800626c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68d8      	ldr	r0, [r3, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627e:	1c99      	adds	r1, r3, #2
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006284:	b282      	uxth	r2, r0
 8006286:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800628c:	b29b      	uxth	r3, r3
 800628e:	3b01      	subs	r3, #1
 8006290:	b29a      	uxth	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800629a:	b29b      	uxth	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d113      	bne.n	80062c8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80062ae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d106      	bne.n	80062c8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff ff4a 	bl	800615c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80062c8:	bf00      	nop
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a20      	ldr	r2, [pc, #128]	@ (8006360 <I2SEx_RxISR_I2SExt+0x90>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d101      	bne.n	80062e6 <I2SEx_RxISR_I2SExt+0x16>
 80062e2:	4b20      	ldr	r3, [pc, #128]	@ (8006364 <I2SEx_RxISR_I2SExt+0x94>)
 80062e4:	e001      	b.n	80062ea <I2SEx_RxISR_I2SExt+0x1a>
 80062e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062ea:	68d8      	ldr	r0, [r3, #12]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f0:	1c99      	adds	r1, r3, #2
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80062f6:	b282      	uxth	r2, r0
 80062f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80062fe:	b29b      	uxth	r3, r3
 8006300:	3b01      	subs	r3, #1
 8006302:	b29a      	uxth	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800630c:	b29b      	uxth	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d121      	bne.n	8006356 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a12      	ldr	r2, [pc, #72]	@ (8006360 <I2SEx_RxISR_I2SExt+0x90>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d101      	bne.n	8006320 <I2SEx_RxISR_I2SExt+0x50>
 800631c:	4b11      	ldr	r3, [pc, #68]	@ (8006364 <I2SEx_RxISR_I2SExt+0x94>)
 800631e:	e001      	b.n	8006324 <I2SEx_RxISR_I2SExt+0x54>
 8006320:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	490d      	ldr	r1, [pc, #52]	@ (8006360 <I2SEx_RxISR_I2SExt+0x90>)
 800632c:	428b      	cmp	r3, r1
 800632e:	d101      	bne.n	8006334 <I2SEx_RxISR_I2SExt+0x64>
 8006330:	4b0c      	ldr	r3, [pc, #48]	@ (8006364 <I2SEx_RxISR_I2SExt+0x94>)
 8006332:	e001      	b.n	8006338 <I2SEx_RxISR_I2SExt+0x68>
 8006334:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006338:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800633c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006342:	b29b      	uxth	r3, r3
 8006344:	2b00      	cmp	r3, #0
 8006346:	d106      	bne.n	8006356 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7ff ff03 	bl	800615c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006356:	bf00      	nop
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	40003800 	.word	0x40003800
 8006364:	40003400 	.word	0x40003400

08006368 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e267      	b.n	800684a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	d075      	beq.n	8006472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006386:	4b88      	ldr	r3, [pc, #544]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f003 030c 	and.w	r3, r3, #12
 800638e:	2b04      	cmp	r3, #4
 8006390:	d00c      	beq.n	80063ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006392:	4b85      	ldr	r3, [pc, #532]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800639a:	2b08      	cmp	r3, #8
 800639c:	d112      	bne.n	80063c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800639e:	4b82      	ldr	r3, [pc, #520]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063aa:	d10b      	bne.n	80063c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063ac:	4b7e      	ldr	r3, [pc, #504]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d05b      	beq.n	8006470 <HAL_RCC_OscConfig+0x108>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d157      	bne.n	8006470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e242      	b.n	800684a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063cc:	d106      	bne.n	80063dc <HAL_RCC_OscConfig+0x74>
 80063ce:	4b76      	ldr	r3, [pc, #472]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a75      	ldr	r2, [pc, #468]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 80063d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	e01d      	b.n	8006418 <HAL_RCC_OscConfig+0xb0>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063e4:	d10c      	bne.n	8006400 <HAL_RCC_OscConfig+0x98>
 80063e6:	4b70      	ldr	r3, [pc, #448]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a6f      	ldr	r2, [pc, #444]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 80063ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	4b6d      	ldr	r3, [pc, #436]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a6c      	ldr	r2, [pc, #432]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 80063f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	e00b      	b.n	8006418 <HAL_RCC_OscConfig+0xb0>
 8006400:	4b69      	ldr	r3, [pc, #420]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a68      	ldr	r2, [pc, #416]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 8006406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	4b66      	ldr	r3, [pc, #408]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a65      	ldr	r2, [pc, #404]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 8006412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d013      	beq.n	8006448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006420:	f7fd fa04 	bl	800382c <HAL_GetTick>
 8006424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006426:	e008      	b.n	800643a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006428:	f7fd fa00 	bl	800382c <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b64      	cmp	r3, #100	@ 0x64
 8006434:	d901      	bls.n	800643a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e207      	b.n	800684a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800643a:	4b5b      	ldr	r3, [pc, #364]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d0f0      	beq.n	8006428 <HAL_RCC_OscConfig+0xc0>
 8006446:	e014      	b.n	8006472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006448:	f7fd f9f0 	bl	800382c <HAL_GetTick>
 800644c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800644e:	e008      	b.n	8006462 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006450:	f7fd f9ec 	bl	800382c <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b64      	cmp	r3, #100	@ 0x64
 800645c:	d901      	bls.n	8006462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e1f3      	b.n	800684a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006462:	4b51      	ldr	r3, [pc, #324]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1f0      	bne.n	8006450 <HAL_RCC_OscConfig+0xe8>
 800646e:	e000      	b.n	8006472 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	2b00      	cmp	r3, #0
 800647c:	d063      	beq.n	8006546 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800647e:	4b4a      	ldr	r3, [pc, #296]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 030c 	and.w	r3, r3, #12
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00b      	beq.n	80064a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800648a:	4b47      	ldr	r3, [pc, #284]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006492:	2b08      	cmp	r3, #8
 8006494:	d11c      	bne.n	80064d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006496:	4b44      	ldr	r3, [pc, #272]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d116      	bne.n	80064d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064a2:	4b41      	ldr	r3, [pc, #260]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d005      	beq.n	80064ba <HAL_RCC_OscConfig+0x152>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d001      	beq.n	80064ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e1c7      	b.n	800684a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ba:	4b3b      	ldr	r3, [pc, #236]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	00db      	lsls	r3, r3, #3
 80064c8:	4937      	ldr	r1, [pc, #220]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ce:	e03a      	b.n	8006546 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d020      	beq.n	800651a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064d8:	4b34      	ldr	r3, [pc, #208]	@ (80065ac <HAL_RCC_OscConfig+0x244>)
 80064da:	2201      	movs	r2, #1
 80064dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064de:	f7fd f9a5 	bl	800382c <HAL_GetTick>
 80064e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064e4:	e008      	b.n	80064f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064e6:	f7fd f9a1 	bl	800382c <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e1a8      	b.n	800684a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064f8:	4b2b      	ldr	r3, [pc, #172]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0f0      	beq.n	80064e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006504:	4b28      	ldr	r3, [pc, #160]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	00db      	lsls	r3, r3, #3
 8006512:	4925      	ldr	r1, [pc, #148]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 8006514:	4313      	orrs	r3, r2
 8006516:	600b      	str	r3, [r1, #0]
 8006518:	e015      	b.n	8006546 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800651a:	4b24      	ldr	r3, [pc, #144]	@ (80065ac <HAL_RCC_OscConfig+0x244>)
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006520:	f7fd f984 	bl	800382c <HAL_GetTick>
 8006524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006528:	f7fd f980 	bl	800382c <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e187      	b.n	800684a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800653a:	4b1b      	ldr	r3, [pc, #108]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f0      	bne.n	8006528 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0308 	and.w	r3, r3, #8
 800654e:	2b00      	cmp	r3, #0
 8006550:	d036      	beq.n	80065c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d016      	beq.n	8006588 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800655a:	4b15      	ldr	r3, [pc, #84]	@ (80065b0 <HAL_RCC_OscConfig+0x248>)
 800655c:	2201      	movs	r2, #1
 800655e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006560:	f7fd f964 	bl	800382c <HAL_GetTick>
 8006564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006566:	e008      	b.n	800657a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006568:	f7fd f960 	bl	800382c <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b02      	cmp	r3, #2
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e167      	b.n	800684a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800657a:	4b0b      	ldr	r3, [pc, #44]	@ (80065a8 <HAL_RCC_OscConfig+0x240>)
 800657c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d0f0      	beq.n	8006568 <HAL_RCC_OscConfig+0x200>
 8006586:	e01b      	b.n	80065c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006588:	4b09      	ldr	r3, [pc, #36]	@ (80065b0 <HAL_RCC_OscConfig+0x248>)
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800658e:	f7fd f94d 	bl	800382c <HAL_GetTick>
 8006592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006594:	e00e      	b.n	80065b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006596:	f7fd f949 	bl	800382c <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d907      	bls.n	80065b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e150      	b.n	800684a <HAL_RCC_OscConfig+0x4e2>
 80065a8:	40023800 	.word	0x40023800
 80065ac:	42470000 	.word	0x42470000
 80065b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065b4:	4b88      	ldr	r3, [pc, #544]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 80065b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1ea      	bne.n	8006596 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 8097 	beq.w	80066fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065ce:	2300      	movs	r3, #0
 80065d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065d2:	4b81      	ldr	r3, [pc, #516]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 80065d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10f      	bne.n	80065fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065de:	2300      	movs	r3, #0
 80065e0:	60bb      	str	r3, [r7, #8]
 80065e2:	4b7d      	ldr	r3, [pc, #500]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 80065e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e6:	4a7c      	ldr	r2, [pc, #496]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 80065e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80065ee:	4b7a      	ldr	r3, [pc, #488]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 80065f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065f6:	60bb      	str	r3, [r7, #8]
 80065f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065fa:	2301      	movs	r3, #1
 80065fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065fe:	4b77      	ldr	r3, [pc, #476]	@ (80067dc <HAL_RCC_OscConfig+0x474>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006606:	2b00      	cmp	r3, #0
 8006608:	d118      	bne.n	800663c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800660a:	4b74      	ldr	r3, [pc, #464]	@ (80067dc <HAL_RCC_OscConfig+0x474>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a73      	ldr	r2, [pc, #460]	@ (80067dc <HAL_RCC_OscConfig+0x474>)
 8006610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006616:	f7fd f909 	bl	800382c <HAL_GetTick>
 800661a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800661c:	e008      	b.n	8006630 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800661e:	f7fd f905 	bl	800382c <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d901      	bls.n	8006630 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e10c      	b.n	800684a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006630:	4b6a      	ldr	r3, [pc, #424]	@ (80067dc <HAL_RCC_OscConfig+0x474>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006638:	2b00      	cmp	r3, #0
 800663a:	d0f0      	beq.n	800661e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d106      	bne.n	8006652 <HAL_RCC_OscConfig+0x2ea>
 8006644:	4b64      	ldr	r3, [pc, #400]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 8006646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006648:	4a63      	ldr	r2, [pc, #396]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 800664a:	f043 0301 	orr.w	r3, r3, #1
 800664e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006650:	e01c      	b.n	800668c <HAL_RCC_OscConfig+0x324>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	2b05      	cmp	r3, #5
 8006658:	d10c      	bne.n	8006674 <HAL_RCC_OscConfig+0x30c>
 800665a:	4b5f      	ldr	r3, [pc, #380]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 800665c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800665e:	4a5e      	ldr	r2, [pc, #376]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 8006660:	f043 0304 	orr.w	r3, r3, #4
 8006664:	6713      	str	r3, [r2, #112]	@ 0x70
 8006666:	4b5c      	ldr	r3, [pc, #368]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 8006668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800666a:	4a5b      	ldr	r2, [pc, #364]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 800666c:	f043 0301 	orr.w	r3, r3, #1
 8006670:	6713      	str	r3, [r2, #112]	@ 0x70
 8006672:	e00b      	b.n	800668c <HAL_RCC_OscConfig+0x324>
 8006674:	4b58      	ldr	r3, [pc, #352]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 8006676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006678:	4a57      	ldr	r2, [pc, #348]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 800667a:	f023 0301 	bic.w	r3, r3, #1
 800667e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006680:	4b55      	ldr	r3, [pc, #340]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 8006682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006684:	4a54      	ldr	r2, [pc, #336]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 8006686:	f023 0304 	bic.w	r3, r3, #4
 800668a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d015      	beq.n	80066c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006694:	f7fd f8ca 	bl	800382c <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800669a:	e00a      	b.n	80066b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800669c:	f7fd f8c6 	bl	800382c <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d901      	bls.n	80066b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e0cb      	b.n	800684a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b2:	4b49      	ldr	r3, [pc, #292]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 80066b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0ee      	beq.n	800669c <HAL_RCC_OscConfig+0x334>
 80066be:	e014      	b.n	80066ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066c0:	f7fd f8b4 	bl	800382c <HAL_GetTick>
 80066c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066c6:	e00a      	b.n	80066de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066c8:	f7fd f8b0 	bl	800382c <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e0b5      	b.n	800684a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066de:	4b3e      	ldr	r3, [pc, #248]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 80066e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1ee      	bne.n	80066c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066ea:	7dfb      	ldrb	r3, [r7, #23]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d105      	bne.n	80066fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066f0:	4b39      	ldr	r3, [pc, #228]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 80066f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f4:	4a38      	ldr	r2, [pc, #224]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 80066f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 80a1 	beq.w	8006848 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006706:	4b34      	ldr	r3, [pc, #208]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f003 030c 	and.w	r3, r3, #12
 800670e:	2b08      	cmp	r3, #8
 8006710:	d05c      	beq.n	80067cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	2b02      	cmp	r3, #2
 8006718:	d141      	bne.n	800679e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800671a:	4b31      	ldr	r3, [pc, #196]	@ (80067e0 <HAL_RCC_OscConfig+0x478>)
 800671c:	2200      	movs	r2, #0
 800671e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006720:	f7fd f884 	bl	800382c <HAL_GetTick>
 8006724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006726:	e008      	b.n	800673a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006728:	f7fd f880 	bl	800382c <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d901      	bls.n	800673a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e087      	b.n	800684a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800673a:	4b27      	ldr	r3, [pc, #156]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1f0      	bne.n	8006728 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	69da      	ldr	r2, [r3, #28]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	431a      	orrs	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006754:	019b      	lsls	r3, r3, #6
 8006756:	431a      	orrs	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675c:	085b      	lsrs	r3, r3, #1
 800675e:	3b01      	subs	r3, #1
 8006760:	041b      	lsls	r3, r3, #16
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006768:	061b      	lsls	r3, r3, #24
 800676a:	491b      	ldr	r1, [pc, #108]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 800676c:	4313      	orrs	r3, r2
 800676e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006770:	4b1b      	ldr	r3, [pc, #108]	@ (80067e0 <HAL_RCC_OscConfig+0x478>)
 8006772:	2201      	movs	r2, #1
 8006774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006776:	f7fd f859 	bl	800382c <HAL_GetTick>
 800677a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800677c:	e008      	b.n	8006790 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800677e:	f7fd f855 	bl	800382c <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d901      	bls.n	8006790 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e05c      	b.n	800684a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006790:	4b11      	ldr	r3, [pc, #68]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d0f0      	beq.n	800677e <HAL_RCC_OscConfig+0x416>
 800679c:	e054      	b.n	8006848 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800679e:	4b10      	ldr	r3, [pc, #64]	@ (80067e0 <HAL_RCC_OscConfig+0x478>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067a4:	f7fd f842 	bl	800382c <HAL_GetTick>
 80067a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067aa:	e008      	b.n	80067be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067ac:	f7fd f83e 	bl	800382c <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d901      	bls.n	80067be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e045      	b.n	800684a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067be:	4b06      	ldr	r3, [pc, #24]	@ (80067d8 <HAL_RCC_OscConfig+0x470>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1f0      	bne.n	80067ac <HAL_RCC_OscConfig+0x444>
 80067ca:	e03d      	b.n	8006848 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d107      	bne.n	80067e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e038      	b.n	800684a <HAL_RCC_OscConfig+0x4e2>
 80067d8:	40023800 	.word	0x40023800
 80067dc:	40007000 	.word	0x40007000
 80067e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006854 <HAL_RCC_OscConfig+0x4ec>)
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d028      	beq.n	8006844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d121      	bne.n	8006844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800680a:	429a      	cmp	r2, r3
 800680c:	d11a      	bne.n	8006844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006814:	4013      	ands	r3, r2
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800681a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800681c:	4293      	cmp	r3, r2
 800681e:	d111      	bne.n	8006844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800682a:	085b      	lsrs	r3, r3, #1
 800682c:	3b01      	subs	r3, #1
 800682e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006830:	429a      	cmp	r2, r3
 8006832:	d107      	bne.n	8006844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800683e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006840:	429a      	cmp	r2, r3
 8006842:	d001      	beq.n	8006848 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e000      	b.n	800684a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	40023800 	.word	0x40023800

08006858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e0cc      	b.n	8006a06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800686c:	4b68      	ldr	r3, [pc, #416]	@ (8006a10 <HAL_RCC_ClockConfig+0x1b8>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0307 	and.w	r3, r3, #7
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	429a      	cmp	r2, r3
 8006878:	d90c      	bls.n	8006894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800687a:	4b65      	ldr	r3, [pc, #404]	@ (8006a10 <HAL_RCC_ClockConfig+0x1b8>)
 800687c:	683a      	ldr	r2, [r7, #0]
 800687e:	b2d2      	uxtb	r2, r2
 8006880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006882:	4b63      	ldr	r3, [pc, #396]	@ (8006a10 <HAL_RCC_ClockConfig+0x1b8>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0307 	and.w	r3, r3, #7
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	429a      	cmp	r2, r3
 800688e:	d001      	beq.n	8006894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e0b8      	b.n	8006a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d020      	beq.n	80068e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d005      	beq.n	80068b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068ac:	4b59      	ldr	r3, [pc, #356]	@ (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	4a58      	ldr	r2, [pc, #352]	@ (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80068b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80068b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0308 	and.w	r3, r3, #8
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d005      	beq.n	80068d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068c4:	4b53      	ldr	r3, [pc, #332]	@ (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	4a52      	ldr	r2, [pc, #328]	@ (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80068ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80068ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068d0:	4b50      	ldr	r3, [pc, #320]	@ (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	494d      	ldr	r1, [pc, #308]	@ (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d044      	beq.n	8006978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d107      	bne.n	8006906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068f6:	4b47      	ldr	r3, [pc, #284]	@ (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d119      	bne.n	8006936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e07f      	b.n	8006a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	2b02      	cmp	r3, #2
 800690c:	d003      	beq.n	8006916 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006912:	2b03      	cmp	r3, #3
 8006914:	d107      	bne.n	8006926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006916:	4b3f      	ldr	r3, [pc, #252]	@ (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d109      	bne.n	8006936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e06f      	b.n	8006a06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006926:	4b3b      	ldr	r3, [pc, #236]	@ (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e067      	b.n	8006a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006936:	4b37      	ldr	r3, [pc, #220]	@ (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f023 0203 	bic.w	r2, r3, #3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	4934      	ldr	r1, [pc, #208]	@ (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 8006944:	4313      	orrs	r3, r2
 8006946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006948:	f7fc ff70 	bl	800382c <HAL_GetTick>
 800694c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800694e:	e00a      	b.n	8006966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006950:	f7fc ff6c 	bl	800382c <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800695e:	4293      	cmp	r3, r2
 8006960:	d901      	bls.n	8006966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e04f      	b.n	8006a06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006966:	4b2b      	ldr	r3, [pc, #172]	@ (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f003 020c 	and.w	r2, r3, #12
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	429a      	cmp	r2, r3
 8006976:	d1eb      	bne.n	8006950 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006978:	4b25      	ldr	r3, [pc, #148]	@ (8006a10 <HAL_RCC_ClockConfig+0x1b8>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0307 	and.w	r3, r3, #7
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	429a      	cmp	r2, r3
 8006984:	d20c      	bcs.n	80069a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006986:	4b22      	ldr	r3, [pc, #136]	@ (8006a10 <HAL_RCC_ClockConfig+0x1b8>)
 8006988:	683a      	ldr	r2, [r7, #0]
 800698a:	b2d2      	uxtb	r2, r2
 800698c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800698e:	4b20      	ldr	r3, [pc, #128]	@ (8006a10 <HAL_RCC_ClockConfig+0x1b8>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0307 	and.w	r3, r3, #7
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	429a      	cmp	r2, r3
 800699a:	d001      	beq.n	80069a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e032      	b.n	8006a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0304 	and.w	r3, r3, #4
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d008      	beq.n	80069be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069ac:	4b19      	ldr	r3, [pc, #100]	@ (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	4916      	ldr	r1, [pc, #88]	@ (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0308 	and.w	r3, r3, #8
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d009      	beq.n	80069de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069ca:	4b12      	ldr	r3, [pc, #72]	@ (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	00db      	lsls	r3, r3, #3
 80069d8:	490e      	ldr	r1, [pc, #56]	@ (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80069de:	f000 f821 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 80069e2:	4602      	mov	r2, r0
 80069e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	091b      	lsrs	r3, r3, #4
 80069ea:	f003 030f 	and.w	r3, r3, #15
 80069ee:	490a      	ldr	r1, [pc, #40]	@ (8006a18 <HAL_RCC_ClockConfig+0x1c0>)
 80069f0:	5ccb      	ldrb	r3, [r1, r3]
 80069f2:	fa22 f303 	lsr.w	r3, r2, r3
 80069f6:	4a09      	ldr	r2, [pc, #36]	@ (8006a1c <HAL_RCC_ClockConfig+0x1c4>)
 80069f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80069fa:	4b09      	ldr	r3, [pc, #36]	@ (8006a20 <HAL_RCC_ClockConfig+0x1c8>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fc fcf4 	bl	80033ec <HAL_InitTick>

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	40023c00 	.word	0x40023c00
 8006a14:	40023800 	.word	0x40023800
 8006a18:	080143c0 	.word	0x080143c0
 8006a1c:	2000022c 	.word	0x2000022c
 8006a20:	20000230 	.word	0x20000230

08006a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a28:	b094      	sub	sp, #80	@ 0x50
 8006a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a30:	2300      	movs	r3, #0
 8006a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a34:	2300      	movs	r3, #0
 8006a36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a3c:	4b79      	ldr	r3, [pc, #484]	@ (8006c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f003 030c 	and.w	r3, r3, #12
 8006a44:	2b08      	cmp	r3, #8
 8006a46:	d00d      	beq.n	8006a64 <HAL_RCC_GetSysClockFreq+0x40>
 8006a48:	2b08      	cmp	r3, #8
 8006a4a:	f200 80e1 	bhi.w	8006c10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <HAL_RCC_GetSysClockFreq+0x34>
 8006a52:	2b04      	cmp	r3, #4
 8006a54:	d003      	beq.n	8006a5e <HAL_RCC_GetSysClockFreq+0x3a>
 8006a56:	e0db      	b.n	8006c10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a58:	4b73      	ldr	r3, [pc, #460]	@ (8006c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006a5c:	e0db      	b.n	8006c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a5e:	4b73      	ldr	r3, [pc, #460]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0x208>)
 8006a60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a62:	e0d8      	b.n	8006c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a64:	4b6f      	ldr	r3, [pc, #444]	@ (8006c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a6c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a6e:	4b6d      	ldr	r3, [pc, #436]	@ (8006c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d063      	beq.n	8006b42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a7a:	4b6a      	ldr	r3, [pc, #424]	@ (8006c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	099b      	lsrs	r3, r3, #6
 8006a80:	2200      	movs	r2, #0
 8006a82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a8e:	2300      	movs	r3, #0
 8006a90:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006a96:	4622      	mov	r2, r4
 8006a98:	462b      	mov	r3, r5
 8006a9a:	f04f 0000 	mov.w	r0, #0
 8006a9e:	f04f 0100 	mov.w	r1, #0
 8006aa2:	0159      	lsls	r1, r3, #5
 8006aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006aa8:	0150      	lsls	r0, r2, #5
 8006aaa:	4602      	mov	r2, r0
 8006aac:	460b      	mov	r3, r1
 8006aae:	4621      	mov	r1, r4
 8006ab0:	1a51      	subs	r1, r2, r1
 8006ab2:	6139      	str	r1, [r7, #16]
 8006ab4:	4629      	mov	r1, r5
 8006ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	f04f 0200 	mov.w	r2, #0
 8006ac0:	f04f 0300 	mov.w	r3, #0
 8006ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ac8:	4659      	mov	r1, fp
 8006aca:	018b      	lsls	r3, r1, #6
 8006acc:	4651      	mov	r1, sl
 8006ace:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ad2:	4651      	mov	r1, sl
 8006ad4:	018a      	lsls	r2, r1, #6
 8006ad6:	4651      	mov	r1, sl
 8006ad8:	ebb2 0801 	subs.w	r8, r2, r1
 8006adc:	4659      	mov	r1, fp
 8006ade:	eb63 0901 	sbc.w	r9, r3, r1
 8006ae2:	f04f 0200 	mov.w	r2, #0
 8006ae6:	f04f 0300 	mov.w	r3, #0
 8006aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006af6:	4690      	mov	r8, r2
 8006af8:	4699      	mov	r9, r3
 8006afa:	4623      	mov	r3, r4
 8006afc:	eb18 0303 	adds.w	r3, r8, r3
 8006b00:	60bb      	str	r3, [r7, #8]
 8006b02:	462b      	mov	r3, r5
 8006b04:	eb49 0303 	adc.w	r3, r9, r3
 8006b08:	60fb      	str	r3, [r7, #12]
 8006b0a:	f04f 0200 	mov.w	r2, #0
 8006b0e:	f04f 0300 	mov.w	r3, #0
 8006b12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b16:	4629      	mov	r1, r5
 8006b18:	024b      	lsls	r3, r1, #9
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b20:	4621      	mov	r1, r4
 8006b22:	024a      	lsls	r2, r1, #9
 8006b24:	4610      	mov	r0, r2
 8006b26:	4619      	mov	r1, r3
 8006b28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006b34:	f7fa f81a 	bl	8000b6c <__aeabi_uldivmod>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b40:	e058      	b.n	8006bf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b42:	4b38      	ldr	r3, [pc, #224]	@ (8006c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	099b      	lsrs	r3, r3, #6
 8006b48:	2200      	movs	r2, #0
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	4611      	mov	r1, r2
 8006b4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b52:	623b      	str	r3, [r7, #32]
 8006b54:	2300      	movs	r3, #0
 8006b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b5c:	4642      	mov	r2, r8
 8006b5e:	464b      	mov	r3, r9
 8006b60:	f04f 0000 	mov.w	r0, #0
 8006b64:	f04f 0100 	mov.w	r1, #0
 8006b68:	0159      	lsls	r1, r3, #5
 8006b6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b6e:	0150      	lsls	r0, r2, #5
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	4641      	mov	r1, r8
 8006b76:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b7a:	4649      	mov	r1, r9
 8006b7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b80:	f04f 0200 	mov.w	r2, #0
 8006b84:	f04f 0300 	mov.w	r3, #0
 8006b88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b94:	ebb2 040a 	subs.w	r4, r2, sl
 8006b98:	eb63 050b 	sbc.w	r5, r3, fp
 8006b9c:	f04f 0200 	mov.w	r2, #0
 8006ba0:	f04f 0300 	mov.w	r3, #0
 8006ba4:	00eb      	lsls	r3, r5, #3
 8006ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006baa:	00e2      	lsls	r2, r4, #3
 8006bac:	4614      	mov	r4, r2
 8006bae:	461d      	mov	r5, r3
 8006bb0:	4643      	mov	r3, r8
 8006bb2:	18e3      	adds	r3, r4, r3
 8006bb4:	603b      	str	r3, [r7, #0]
 8006bb6:	464b      	mov	r3, r9
 8006bb8:	eb45 0303 	adc.w	r3, r5, r3
 8006bbc:	607b      	str	r3, [r7, #4]
 8006bbe:	f04f 0200 	mov.w	r2, #0
 8006bc2:	f04f 0300 	mov.w	r3, #0
 8006bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bca:	4629      	mov	r1, r5
 8006bcc:	028b      	lsls	r3, r1, #10
 8006bce:	4621      	mov	r1, r4
 8006bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006bd4:	4621      	mov	r1, r4
 8006bd6:	028a      	lsls	r2, r1, #10
 8006bd8:	4610      	mov	r0, r2
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bde:	2200      	movs	r2, #0
 8006be0:	61bb      	str	r3, [r7, #24]
 8006be2:	61fa      	str	r2, [r7, #28]
 8006be4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006be8:	f7f9 ffc0 	bl	8000b6c <__aeabi_uldivmod>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8006c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	0c1b      	lsrs	r3, r3, #16
 8006bfa:	f003 0303 	and.w	r3, r3, #3
 8006bfe:	3301      	adds	r3, #1
 8006c00:	005b      	lsls	r3, r3, #1
 8006c02:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006c04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c0e:	e002      	b.n	8006c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c10:	4b05      	ldr	r3, [pc, #20]	@ (8006c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3750      	adds	r7, #80	@ 0x50
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c22:	bf00      	nop
 8006c24:	40023800 	.word	0x40023800
 8006c28:	00f42400 	.word	0x00f42400
 8006c2c:	007a1200 	.word	0x007a1200

08006c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c30:	b480      	push	{r7}
 8006c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c34:	4b03      	ldr	r3, [pc, #12]	@ (8006c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c36:	681b      	ldr	r3, [r3, #0]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	2000022c 	.word	0x2000022c

08006c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c4c:	f7ff fff0 	bl	8006c30 <HAL_RCC_GetHCLKFreq>
 8006c50:	4602      	mov	r2, r0
 8006c52:	4b05      	ldr	r3, [pc, #20]	@ (8006c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	0a9b      	lsrs	r3, r3, #10
 8006c58:	f003 0307 	and.w	r3, r3, #7
 8006c5c:	4903      	ldr	r1, [pc, #12]	@ (8006c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c5e:	5ccb      	ldrb	r3, [r1, r3]
 8006c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	40023800 	.word	0x40023800
 8006c6c:	080143d0 	.word	0x080143d0

08006c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006c74:	f7ff ffdc 	bl	8006c30 <HAL_RCC_GetHCLKFreq>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	4b05      	ldr	r3, [pc, #20]	@ (8006c90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	0b5b      	lsrs	r3, r3, #13
 8006c80:	f003 0307 	and.w	r3, r3, #7
 8006c84:	4903      	ldr	r1, [pc, #12]	@ (8006c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c86:	5ccb      	ldrb	r3, [r1, r3]
 8006c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	40023800 	.word	0x40023800
 8006c94:	080143d0 	.word	0x080143d0

08006c98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	220f      	movs	r2, #15
 8006ca6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ca8:	4b12      	ldr	r3, [pc, #72]	@ (8006cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f003 0203 	and.w	r2, r3, #3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8006cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8006cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006ccc:	4b09      	ldr	r3, [pc, #36]	@ (8006cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	08db      	lsrs	r3, r3, #3
 8006cd2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006cda:	4b07      	ldr	r3, [pc, #28]	@ (8006cf8 <HAL_RCC_GetClockConfig+0x60>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0207 	and.w	r2, r3, #7
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	601a      	str	r2, [r3, #0]
}
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	40023800 	.word	0x40023800
 8006cf8:	40023c00 	.word	0x40023c00

08006cfc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d105      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d035      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006d24:	4b62      	ldr	r3, [pc, #392]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006d26:	2200      	movs	r2, #0
 8006d28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d2a:	f7fc fd7f 	bl	800382c <HAL_GetTick>
 8006d2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d30:	e008      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d32:	f7fc fd7b 	bl	800382c <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d901      	bls.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e0b0      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d44:	4b5b      	ldr	r3, [pc, #364]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1f0      	bne.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	019a      	lsls	r2, r3, #6
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	071b      	lsls	r3, r3, #28
 8006d5c:	4955      	ldr	r1, [pc, #340]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006d64:	4b52      	ldr	r3, [pc, #328]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006d66:	2201      	movs	r2, #1
 8006d68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d6a:	f7fc fd5f 	bl	800382c <HAL_GetTick>
 8006d6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d70:	e008      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d72:	f7fc fd5b 	bl	800382c <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d901      	bls.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e090      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d84:	4b4b      	ldr	r3, [pc, #300]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d0f0      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0302 	and.w	r3, r3, #2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 8083 	beq.w	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d9e:	2300      	movs	r3, #0
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	4b44      	ldr	r3, [pc, #272]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da6:	4a43      	ldr	r2, [pc, #268]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8006dae:	4b41      	ldr	r3, [pc, #260]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006dba:	4b3f      	ldr	r3, [pc, #252]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a3e      	ldr	r2, [pc, #248]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dc4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006dc6:	f7fc fd31 	bl	800382c <HAL_GetTick>
 8006dca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006dcc:	e008      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006dce:	f7fc fd2d 	bl	800382c <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d901      	bls.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e062      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006de0:	4b35      	ldr	r3, [pc, #212]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0f0      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006dec:	4b31      	ldr	r3, [pc, #196]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006df0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006df4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d02f      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d028      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e12:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e14:	4b29      	ldr	r3, [pc, #164]	@ (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006e16:	2201      	movs	r2, #1
 8006e18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e1a:	4b28      	ldr	r3, [pc, #160]	@ (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006e20:	4a24      	ldr	r2, [pc, #144]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e26:	4b23      	ldr	r3, [pc, #140]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d114      	bne.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006e32:	f7fc fcfb 	bl	800382c <HAL_GetTick>
 8006e36:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e38:	e00a      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e3a:	f7fc fcf7 	bl	800382c <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d901      	bls.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e02a      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e50:	4b18      	ldr	r3, [pc, #96]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d0ee      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e68:	d10d      	bne.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006e6a:	4b12      	ldr	r3, [pc, #72]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006e7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e7e:	490d      	ldr	r1, [pc, #52]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	608b      	str	r3, [r1, #8]
 8006e84:	e005      	b.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006e86:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e8c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006e90:	6093      	str	r3, [r2, #8]
 8006e92:	4b08      	ldr	r3, [pc, #32]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e94:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e9e:	4905      	ldr	r1, [pc, #20]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3718      	adds	r7, #24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	42470068 	.word	0x42470068
 8006eb4:	40023800 	.word	0x40023800
 8006eb8:	40007000 	.word	0x40007000
 8006ebc:	42470e40 	.word	0x42470e40

08006ec0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d13e      	bne.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006ede:	4b23      	ldr	r3, [pc, #140]	@ (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ee6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d005      	beq.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d12f      	bne.n	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ef6:	617b      	str	r3, [r7, #20]
          break;
 8006ef8:	e02f      	b.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006efa:	4b1c      	ldr	r3, [pc, #112]	@ (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f06:	d108      	bne.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006f08:	4b18      	ldr	r3, [pc, #96]	@ (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f10:	4a18      	ldr	r2, [pc, #96]	@ (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f16:	613b      	str	r3, [r7, #16]
 8006f18:	e007      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006f1a:	4b14      	ldr	r3, [pc, #80]	@ (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f22:	4a15      	ldr	r2, [pc, #84]	@ (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f28:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006f2a:	4b10      	ldr	r3, [pc, #64]	@ (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f30:	099b      	lsrs	r3, r3, #6
 8006f32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	fb02 f303 	mul.w	r3, r2, r3
 8006f3c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f44:	0f1b      	lsrs	r3, r3, #28
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f50:	617b      	str	r3, [r7, #20]
          break;
 8006f52:	e002      	b.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	617b      	str	r3, [r7, #20]
          break;
 8006f58:	bf00      	nop
        }
      }
      break;
 8006f5a:	bf00      	nop
    }
  }
  return frequency;
 8006f5c:	697b      	ldr	r3, [r7, #20]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	371c      	adds	r7, #28
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40023800 	.word	0x40023800
 8006f70:	00bb8000 	.word	0x00bb8000
 8006f74:	007a1200 	.word	0x007a1200
 8006f78:	00f42400 	.word	0x00f42400

08006f7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e07b      	b.n	8007086 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d108      	bne.n	8006fa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f9e:	d009      	beq.n	8006fb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	61da      	str	r2, [r3, #28]
 8006fa6:	e005      	b.n	8006fb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d106      	bne.n	8006fd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7fc f938 	bl	8003244 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007006:	431a      	orrs	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	431a      	orrs	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	431a      	orrs	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007024:	431a      	orrs	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007038:	ea42 0103 	orr.w	r1, r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007040:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	430a      	orrs	r2, r1
 800704a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	0c1b      	lsrs	r3, r3, #16
 8007052:	f003 0104 	and.w	r1, r3, #4
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705a:	f003 0210 	and.w	r2, r3, #16
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	69da      	ldr	r2, [r3, #28]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007074:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b082      	sub	sp, #8
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d101      	bne.n	80070a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e041      	b.n	8007124 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d106      	bne.n	80070ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f839 	bl	800712c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2202      	movs	r2, #2
 80070be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	3304      	adds	r3, #4
 80070ca:	4619      	mov	r1, r3
 80070cc:	4610      	mov	r0, r2
 80070ce:	f000 f9d7 	bl	8007480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b01      	cmp	r3, #1
 8007152:	d001      	beq.n	8007158 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e04e      	b.n	80071f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2202      	movs	r2, #2
 800715c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68da      	ldr	r2, [r3, #12]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f042 0201 	orr.w	r2, r2, #1
 800716e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a23      	ldr	r2, [pc, #140]	@ (8007204 <HAL_TIM_Base_Start_IT+0xc4>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d022      	beq.n	80071c0 <HAL_TIM_Base_Start_IT+0x80>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007182:	d01d      	beq.n	80071c0 <HAL_TIM_Base_Start_IT+0x80>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a1f      	ldr	r2, [pc, #124]	@ (8007208 <HAL_TIM_Base_Start_IT+0xc8>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d018      	beq.n	80071c0 <HAL_TIM_Base_Start_IT+0x80>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a1e      	ldr	r2, [pc, #120]	@ (800720c <HAL_TIM_Base_Start_IT+0xcc>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d013      	beq.n	80071c0 <HAL_TIM_Base_Start_IT+0x80>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a1c      	ldr	r2, [pc, #112]	@ (8007210 <HAL_TIM_Base_Start_IT+0xd0>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d00e      	beq.n	80071c0 <HAL_TIM_Base_Start_IT+0x80>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a1b      	ldr	r2, [pc, #108]	@ (8007214 <HAL_TIM_Base_Start_IT+0xd4>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d009      	beq.n	80071c0 <HAL_TIM_Base_Start_IT+0x80>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a19      	ldr	r2, [pc, #100]	@ (8007218 <HAL_TIM_Base_Start_IT+0xd8>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d004      	beq.n	80071c0 <HAL_TIM_Base_Start_IT+0x80>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a18      	ldr	r2, [pc, #96]	@ (800721c <HAL_TIM_Base_Start_IT+0xdc>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d111      	bne.n	80071e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f003 0307 	and.w	r3, r3, #7
 80071ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2b06      	cmp	r3, #6
 80071d0:	d010      	beq.n	80071f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f042 0201 	orr.w	r2, r2, #1
 80071e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071e2:	e007      	b.n	80071f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f042 0201 	orr.w	r2, r2, #1
 80071f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	40010000 	.word	0x40010000
 8007208:	40000400 	.word	0x40000400
 800720c:	40000800 	.word	0x40000800
 8007210:	40000c00 	.word	0x40000c00
 8007214:	40010400 	.word	0x40010400
 8007218:	40014000 	.word	0x40014000
 800721c:	40001800 	.word	0x40001800

08007220 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b02      	cmp	r3, #2
 8007234:	d122      	bne.n	800727c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	2b02      	cmp	r3, #2
 8007242:	d11b      	bne.n	800727c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f06f 0202 	mvn.w	r2, #2
 800724c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	f003 0303 	and.w	r3, r3, #3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f8ee 	bl	8007444 <HAL_TIM_IC_CaptureCallback>
 8007268:	e005      	b.n	8007276 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f8e0 	bl	8007430 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f8f1 	bl	8007458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	f003 0304 	and.w	r3, r3, #4
 8007286:	2b04      	cmp	r3, #4
 8007288:	d122      	bne.n	80072d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	f003 0304 	and.w	r3, r3, #4
 8007294:	2b04      	cmp	r3, #4
 8007296:	d11b      	bne.n	80072d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f06f 0204 	mvn.w	r2, #4
 80072a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2202      	movs	r2, #2
 80072a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d003      	beq.n	80072be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f8c4 	bl	8007444 <HAL_TIM_IC_CaptureCallback>
 80072bc:	e005      	b.n	80072ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f8b6 	bl	8007430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f8c7 	bl	8007458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	f003 0308 	and.w	r3, r3, #8
 80072da:	2b08      	cmp	r3, #8
 80072dc:	d122      	bne.n	8007324 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	f003 0308 	and.w	r3, r3, #8
 80072e8:	2b08      	cmp	r3, #8
 80072ea:	d11b      	bne.n	8007324 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f06f 0208 	mvn.w	r2, #8
 80072f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2204      	movs	r2, #4
 80072fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	69db      	ldr	r3, [r3, #28]
 8007302:	f003 0303 	and.w	r3, r3, #3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f89a 	bl	8007444 <HAL_TIM_IC_CaptureCallback>
 8007310:	e005      	b.n	800731e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f88c 	bl	8007430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f89d 	bl	8007458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	f003 0310 	and.w	r3, r3, #16
 800732e:	2b10      	cmp	r3, #16
 8007330:	d122      	bne.n	8007378 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f003 0310 	and.w	r3, r3, #16
 800733c:	2b10      	cmp	r3, #16
 800733e:	d11b      	bne.n	8007378 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f06f 0210 	mvn.w	r2, #16
 8007348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2208      	movs	r2, #8
 800734e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f870 	bl	8007444 <HAL_TIM_IC_CaptureCallback>
 8007364:	e005      	b.n	8007372 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f862 	bl	8007430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f873 	bl	8007458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	2b01      	cmp	r3, #1
 8007384:	d10e      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	2b01      	cmp	r3, #1
 8007392:	d107      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f06f 0201 	mvn.w	r2, #1
 800739c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7fb fe44 	bl	800302c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ae:	2b80      	cmp	r3, #128	@ 0x80
 80073b0:	d10e      	bne.n	80073d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073bc:	2b80      	cmp	r3, #128	@ 0x80
 80073be:	d107      	bne.n	80073d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80073c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f902 	bl	80075d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073da:	2b40      	cmp	r3, #64	@ 0x40
 80073dc:	d10e      	bne.n	80073fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073e8:	2b40      	cmp	r3, #64	@ 0x40
 80073ea:	d107      	bne.n	80073fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80073f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f838 	bl	800746c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	f003 0320 	and.w	r3, r3, #32
 8007406:	2b20      	cmp	r3, #32
 8007408:	d10e      	bne.n	8007428 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	f003 0320 	and.w	r3, r3, #32
 8007414:	2b20      	cmp	r3, #32
 8007416:	d107      	bne.n	8007428 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f06f 0220 	mvn.w	r2, #32
 8007420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f8cc 	bl	80075c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007428:	bf00      	nop
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a40      	ldr	r2, [pc, #256]	@ (8007594 <TIM_Base_SetConfig+0x114>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d013      	beq.n	80074c0 <TIM_Base_SetConfig+0x40>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800749e:	d00f      	beq.n	80074c0 <TIM_Base_SetConfig+0x40>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a3d      	ldr	r2, [pc, #244]	@ (8007598 <TIM_Base_SetConfig+0x118>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d00b      	beq.n	80074c0 <TIM_Base_SetConfig+0x40>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a3c      	ldr	r2, [pc, #240]	@ (800759c <TIM_Base_SetConfig+0x11c>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d007      	beq.n	80074c0 <TIM_Base_SetConfig+0x40>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a3b      	ldr	r2, [pc, #236]	@ (80075a0 <TIM_Base_SetConfig+0x120>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d003      	beq.n	80074c0 <TIM_Base_SetConfig+0x40>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a3a      	ldr	r2, [pc, #232]	@ (80075a4 <TIM_Base_SetConfig+0x124>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d108      	bne.n	80074d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a2f      	ldr	r2, [pc, #188]	@ (8007594 <TIM_Base_SetConfig+0x114>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d02b      	beq.n	8007532 <TIM_Base_SetConfig+0xb2>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074e0:	d027      	beq.n	8007532 <TIM_Base_SetConfig+0xb2>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a2c      	ldr	r2, [pc, #176]	@ (8007598 <TIM_Base_SetConfig+0x118>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d023      	beq.n	8007532 <TIM_Base_SetConfig+0xb2>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a2b      	ldr	r2, [pc, #172]	@ (800759c <TIM_Base_SetConfig+0x11c>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d01f      	beq.n	8007532 <TIM_Base_SetConfig+0xb2>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a2a      	ldr	r2, [pc, #168]	@ (80075a0 <TIM_Base_SetConfig+0x120>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d01b      	beq.n	8007532 <TIM_Base_SetConfig+0xb2>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a29      	ldr	r2, [pc, #164]	@ (80075a4 <TIM_Base_SetConfig+0x124>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d017      	beq.n	8007532 <TIM_Base_SetConfig+0xb2>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a28      	ldr	r2, [pc, #160]	@ (80075a8 <TIM_Base_SetConfig+0x128>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d013      	beq.n	8007532 <TIM_Base_SetConfig+0xb2>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a27      	ldr	r2, [pc, #156]	@ (80075ac <TIM_Base_SetConfig+0x12c>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d00f      	beq.n	8007532 <TIM_Base_SetConfig+0xb2>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a26      	ldr	r2, [pc, #152]	@ (80075b0 <TIM_Base_SetConfig+0x130>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d00b      	beq.n	8007532 <TIM_Base_SetConfig+0xb2>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a25      	ldr	r2, [pc, #148]	@ (80075b4 <TIM_Base_SetConfig+0x134>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d007      	beq.n	8007532 <TIM_Base_SetConfig+0xb2>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a24      	ldr	r2, [pc, #144]	@ (80075b8 <TIM_Base_SetConfig+0x138>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d003      	beq.n	8007532 <TIM_Base_SetConfig+0xb2>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a23      	ldr	r2, [pc, #140]	@ (80075bc <TIM_Base_SetConfig+0x13c>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d108      	bne.n	8007544 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	4313      	orrs	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	4313      	orrs	r3, r2
 8007550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	689a      	ldr	r2, [r3, #8]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a0a      	ldr	r2, [pc, #40]	@ (8007594 <TIM_Base_SetConfig+0x114>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d003      	beq.n	8007578 <TIM_Base_SetConfig+0xf8>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a0c      	ldr	r2, [pc, #48]	@ (80075a4 <TIM_Base_SetConfig+0x124>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d103      	bne.n	8007580 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	691a      	ldr	r2, [r3, #16]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	615a      	str	r2, [r3, #20]
}
 8007586:	bf00      	nop
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	40010000 	.word	0x40010000
 8007598:	40000400 	.word	0x40000400
 800759c:	40000800 	.word	0x40000800
 80075a0:	40000c00 	.word	0x40000c00
 80075a4:	40010400 	.word	0x40010400
 80075a8:	40014000 	.word	0x40014000
 80075ac:	40014400 	.word	0x40014400
 80075b0:	40014800 	.word	0x40014800
 80075b4:	40001800 	.word	0x40001800
 80075b8:	40001c00 	.word	0x40001c00
 80075bc:	40002000 	.word	0x40002000

080075c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e03f      	b.n	800767a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d106      	bne.n	8007614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7fb fe60 	bl	80032d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2224      	movs	r2, #36	@ 0x24
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68da      	ldr	r2, [r3, #12]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800762a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fddf 	bl	80081f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	691a      	ldr	r2, [r3, #16]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	695a      	ldr	r2, [r3, #20]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007650:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68da      	ldr	r2, [r3, #12]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007660:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2220      	movs	r2, #32
 800766c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2220      	movs	r2, #32
 8007674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3708      	adds	r7, #8
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b08a      	sub	sp, #40	@ 0x28
 8007686:	af02      	add	r7, sp, #8
 8007688:	60f8      	str	r0, [r7, #12]
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	603b      	str	r3, [r7, #0]
 800768e:	4613      	mov	r3, r2
 8007690:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b20      	cmp	r3, #32
 80076a0:	d17c      	bne.n	800779c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d002      	beq.n	80076ae <HAL_UART_Transmit+0x2c>
 80076a8:	88fb      	ldrh	r3, [r7, #6]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d101      	bne.n	80076b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e075      	b.n	800779e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d101      	bne.n	80076c0 <HAL_UART_Transmit+0x3e>
 80076bc:	2302      	movs	r3, #2
 80076be:	e06e      	b.n	800779e <HAL_UART_Transmit+0x11c>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2221      	movs	r2, #33	@ 0x21
 80076d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076d6:	f7fc f8a9 	bl	800382c <HAL_GetTick>
 80076da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	88fa      	ldrh	r2, [r7, #6]
 80076e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	88fa      	ldrh	r2, [r7, #6]
 80076e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076f0:	d108      	bne.n	8007704 <HAL_UART_Transmit+0x82>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d104      	bne.n	8007704 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80076fa:	2300      	movs	r3, #0
 80076fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	61bb      	str	r3, [r7, #24]
 8007702:	e003      	b.n	800770c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007708:	2300      	movs	r3, #0
 800770a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8007714:	e02a      	b.n	800776c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	2200      	movs	r2, #0
 800771e:	2180      	movs	r1, #128	@ 0x80
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f000 fb1f 	bl	8007d64 <UART_WaitOnFlagUntilTimeout>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d001      	beq.n	8007730 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e036      	b.n	800779e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10b      	bne.n	800774e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	461a      	mov	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007744:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	3302      	adds	r3, #2
 800774a:	61bb      	str	r3, [r7, #24]
 800774c:	e007      	b.n	800775e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	781a      	ldrb	r2, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	3301      	adds	r3, #1
 800775c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007762:	b29b      	uxth	r3, r3
 8007764:	3b01      	subs	r3, #1
 8007766:	b29a      	uxth	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007770:	b29b      	uxth	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1cf      	bne.n	8007716 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	2200      	movs	r2, #0
 800777e:	2140      	movs	r1, #64	@ 0x40
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f000 faef 	bl	8007d64 <UART_WaitOnFlagUntilTimeout>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e006      	b.n	800779e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2220      	movs	r2, #32
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	e000      	b.n	800779e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800779c:	2302      	movs	r3, #2
  }
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3720      	adds	r7, #32
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b084      	sub	sp, #16
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	60f8      	str	r0, [r7, #12]
 80077ae:	60b9      	str	r1, [r7, #8]
 80077b0:	4613      	mov	r3, r2
 80077b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b20      	cmp	r3, #32
 80077be:	d11d      	bne.n	80077fc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d002      	beq.n	80077cc <HAL_UART_Receive_IT+0x26>
 80077c6:	88fb      	ldrh	r3, [r7, #6]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d101      	bne.n	80077d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e016      	b.n	80077fe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d101      	bne.n	80077de <HAL_UART_Receive_IT+0x38>
 80077da:	2302      	movs	r3, #2
 80077dc:	e00f      	b.n	80077fe <HAL_UART_Receive_IT+0x58>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80077ec:	88fb      	ldrh	r3, [r7, #6]
 80077ee:	461a      	mov	r2, r3
 80077f0:	68b9      	ldr	r1, [r7, #8]
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f000 fb24 	bl	8007e40 <UART_Start_Receive_IT>
 80077f8:	4603      	mov	r3, r0
 80077fa:	e000      	b.n	80077fe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80077fc:	2302      	movs	r3, #2
  }
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
	...

08007808 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b0ba      	sub	sp, #232	@ 0xe8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800782e:	2300      	movs	r3, #0
 8007830:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007834:	2300      	movs	r3, #0
 8007836:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800783a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800783e:	f003 030f 	and.w	r3, r3, #15
 8007842:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007846:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10f      	bne.n	800786e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800784e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007852:	f003 0320 	and.w	r3, r3, #32
 8007856:	2b00      	cmp	r3, #0
 8007858:	d009      	beq.n	800786e <HAL_UART_IRQHandler+0x66>
 800785a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800785e:	f003 0320 	and.w	r3, r3, #32
 8007862:	2b00      	cmp	r3, #0
 8007864:	d003      	beq.n	800786e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fc07 	bl	800807a <UART_Receive_IT>
      return;
 800786c:	e256      	b.n	8007d1c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800786e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 80de 	beq.w	8007a34 <HAL_UART_IRQHandler+0x22c>
 8007878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800787c:	f003 0301 	and.w	r3, r3, #1
 8007880:	2b00      	cmp	r3, #0
 8007882:	d106      	bne.n	8007892 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007888:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800788c:	2b00      	cmp	r3, #0
 800788e:	f000 80d1 	beq.w	8007a34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007896:	f003 0301 	and.w	r3, r3, #1
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00b      	beq.n	80078b6 <HAL_UART_IRQHandler+0xae>
 800789e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d005      	beq.n	80078b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ae:	f043 0201 	orr.w	r2, r3, #1
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078ba:	f003 0304 	and.w	r3, r3, #4
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00b      	beq.n	80078da <HAL_UART_IRQHandler+0xd2>
 80078c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d005      	beq.n	80078da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d2:	f043 0202 	orr.w	r2, r3, #2
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00b      	beq.n	80078fe <HAL_UART_IRQHandler+0xf6>
 80078e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d005      	beq.n	80078fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f6:	f043 0204 	orr.w	r2, r3, #4
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80078fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007902:	f003 0308 	and.w	r3, r3, #8
 8007906:	2b00      	cmp	r3, #0
 8007908:	d011      	beq.n	800792e <HAL_UART_IRQHandler+0x126>
 800790a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800790e:	f003 0320 	and.w	r3, r3, #32
 8007912:	2b00      	cmp	r3, #0
 8007914:	d105      	bne.n	8007922 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d005      	beq.n	800792e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007926:	f043 0208 	orr.w	r2, r3, #8
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 81ed 	beq.w	8007d12 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800793c:	f003 0320 	and.w	r3, r3, #32
 8007940:	2b00      	cmp	r3, #0
 8007942:	d008      	beq.n	8007956 <HAL_UART_IRQHandler+0x14e>
 8007944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007948:	f003 0320 	and.w	r3, r3, #32
 800794c:	2b00      	cmp	r3, #0
 800794e:	d002      	beq.n	8007956 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fb92 	bl	800807a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007960:	2b40      	cmp	r3, #64	@ 0x40
 8007962:	bf0c      	ite	eq
 8007964:	2301      	moveq	r3, #1
 8007966:	2300      	movne	r3, #0
 8007968:	b2db      	uxtb	r3, r3
 800796a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007972:	f003 0308 	and.w	r3, r3, #8
 8007976:	2b00      	cmp	r3, #0
 8007978:	d103      	bne.n	8007982 <HAL_UART_IRQHandler+0x17a>
 800797a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800797e:	2b00      	cmp	r3, #0
 8007980:	d04f      	beq.n	8007a22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fa9a 	bl	8007ebc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007992:	2b40      	cmp	r3, #64	@ 0x40
 8007994:	d141      	bne.n	8007a1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3314      	adds	r3, #20
 800799c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079a4:	e853 3f00 	ldrex	r3, [r3]
 80079a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80079ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3314      	adds	r3, #20
 80079be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80079c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80079c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80079ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80079d2:	e841 2300 	strex	r3, r2, [r1]
 80079d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80079da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1d9      	bne.n	8007996 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d013      	beq.n	8007a12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ee:	4a7d      	ldr	r2, [pc, #500]	@ (8007be4 <HAL_UART_IRQHandler+0x3dc>)
 80079f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fc f89a 	bl	8003b30 <HAL_DMA_Abort_IT>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d016      	beq.n	8007a30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a10:	e00e      	b.n	8007a30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f990 	bl	8007d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a18:	e00a      	b.n	8007a30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f98c 	bl	8007d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a20:	e006      	b.n	8007a30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f988 	bl	8007d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8007a2e:	e170      	b.n	8007d12 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a30:	bf00      	nop
    return;
 8007a32:	e16e      	b.n	8007d12 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	f040 814a 	bne.w	8007cd2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a42:	f003 0310 	and.w	r3, r3, #16
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 8143 	beq.w	8007cd2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a50:	f003 0310 	and.w	r3, r3, #16
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 813c 	beq.w	8007cd2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60bb      	str	r3, [r7, #8]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	60bb      	str	r3, [r7, #8]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	60bb      	str	r3, [r7, #8]
 8007a6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a7a:	2b40      	cmp	r3, #64	@ 0x40
 8007a7c:	f040 80b4 	bne.w	8007be8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 8140 	beq.w	8007d16 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	f080 8139 	bcs.w	8007d16 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007aaa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ab6:	f000 8088 	beq.w	8007bca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	330c      	adds	r3, #12
 8007ac0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ac8:	e853 3f00 	ldrex	r3, [r3]
 8007acc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007ad0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ad4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ad8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	330c      	adds	r3, #12
 8007ae2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007ae6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007aea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007af2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007af6:	e841 2300 	strex	r3, r2, [r1]
 8007afa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1d9      	bne.n	8007aba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	3314      	adds	r3, #20
 8007b0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b18:	f023 0301 	bic.w	r3, r3, #1
 8007b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3314      	adds	r3, #20
 8007b26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007b2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1e1      	bne.n	8007b06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3314      	adds	r3, #20
 8007b48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b4c:	e853 3f00 	ldrex	r3, [r3]
 8007b50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3314      	adds	r3, #20
 8007b62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007b66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007b6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007b6e:	e841 2300 	strex	r3, r2, [r1]
 8007b72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007b74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1e3      	bne.n	8007b42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2220      	movs	r2, #32
 8007b7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	330c      	adds	r3, #12
 8007b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b92:	e853 3f00 	ldrex	r3, [r3]
 8007b96:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b9a:	f023 0310 	bic.w	r3, r3, #16
 8007b9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	330c      	adds	r3, #12
 8007ba8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007bac:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007bae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007bb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bb4:	e841 2300 	strex	r3, r2, [r1]
 8007bb8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007bba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1e3      	bne.n	8007b88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fb ff43 	bl	8003a50 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f8b6 	bl	8007d4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007be0:	e099      	b.n	8007d16 <HAL_UART_IRQHandler+0x50e>
 8007be2:	bf00      	nop
 8007be4:	08007f83 	.word	0x08007f83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 808b 	beq.w	8007d1a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007c04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 8086 	beq.w	8007d1a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	330c      	adds	r3, #12
 8007c14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c18:	e853 3f00 	ldrex	r3, [r3]
 8007c1c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	330c      	adds	r3, #12
 8007c2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007c32:	647a      	str	r2, [r7, #68]	@ 0x44
 8007c34:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c3a:	e841 2300 	strex	r3, r2, [r1]
 8007c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e3      	bne.n	8007c0e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3314      	adds	r3, #20
 8007c4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c50:	e853 3f00 	ldrex	r3, [r3]
 8007c54:	623b      	str	r3, [r7, #32]
   return(result);
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	f023 0301 	bic.w	r3, r3, #1
 8007c5c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3314      	adds	r3, #20
 8007c66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007c6a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c72:	e841 2300 	strex	r3, r2, [r1]
 8007c76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1e3      	bne.n	8007c46 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2220      	movs	r2, #32
 8007c82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	330c      	adds	r3, #12
 8007c92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	e853 3f00 	ldrex	r3, [r3]
 8007c9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f023 0310 	bic.w	r3, r3, #16
 8007ca2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	330c      	adds	r3, #12
 8007cac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007cb0:	61fa      	str	r2, [r7, #28]
 8007cb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	69b9      	ldr	r1, [r7, #24]
 8007cb6:	69fa      	ldr	r2, [r7, #28]
 8007cb8:	e841 2300 	strex	r3, r2, [r1]
 8007cbc:	617b      	str	r3, [r7, #20]
   return(result);
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e3      	bne.n	8007c8c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f83e 	bl	8007d4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007cd0:	e023      	b.n	8007d1a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d009      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x4ea>
 8007cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f95d 	bl	8007faa <UART_Transmit_IT>
    return;
 8007cf0:	e014      	b.n	8007d1c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00e      	beq.n	8007d1c <HAL_UART_IRQHandler+0x514>
 8007cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d008      	beq.n	8007d1c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f99d 	bl	800804a <UART_EndTransmit_IT>
    return;
 8007d10:	e004      	b.n	8007d1c <HAL_UART_IRQHandler+0x514>
    return;
 8007d12:	bf00      	nop
 8007d14:	e002      	b.n	8007d1c <HAL_UART_IRQHandler+0x514>
      return;
 8007d16:	bf00      	nop
 8007d18:	e000      	b.n	8007d1c <HAL_UART_IRQHandler+0x514>
      return;
 8007d1a:	bf00      	nop
  }
}
 8007d1c:	37e8      	adds	r7, #232	@ 0xe8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop

08007d24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d40:	bf00      	nop
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	460b      	mov	r3, r1
 8007d56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b090      	sub	sp, #64	@ 0x40
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	603b      	str	r3, [r7, #0]
 8007d70:	4613      	mov	r3, r2
 8007d72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d74:	e050      	b.n	8007e18 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7c:	d04c      	beq.n	8007e18 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d007      	beq.n	8007d94 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d84:	f7fb fd52 	bl	800382c <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d241      	bcs.n	8007e18 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	330c      	adds	r3, #12
 8007d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9e:	e853 3f00 	ldrex	r3, [r3]
 8007da2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	330c      	adds	r3, #12
 8007db2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007db4:	637a      	str	r2, [r7, #52]	@ 0x34
 8007db6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007dba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007dbc:	e841 2300 	strex	r3, r2, [r1]
 8007dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e5      	bne.n	8007d94 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	3314      	adds	r3, #20
 8007dce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	e853 3f00 	ldrex	r3, [r3]
 8007dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	f023 0301 	bic.w	r3, r3, #1
 8007dde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3314      	adds	r3, #20
 8007de6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007de8:	623a      	str	r2, [r7, #32]
 8007dea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dec:	69f9      	ldr	r1, [r7, #28]
 8007dee:	6a3a      	ldr	r2, [r7, #32]
 8007df0:	e841 2300 	strex	r3, r2, [r1]
 8007df4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1e5      	bne.n	8007dc8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2220      	movs	r2, #32
 8007e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e00f      	b.n	8007e38 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	4013      	ands	r3, r2
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	bf0c      	ite	eq
 8007e28:	2301      	moveq	r3, #1
 8007e2a:	2300      	movne	r3, #0
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	461a      	mov	r2, r3
 8007e30:	79fb      	ldrb	r3, [r7, #7]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d09f      	beq.n	8007d76 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3740      	adds	r7, #64	@ 0x40
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	88fa      	ldrh	r2, [r7, #6]
 8007e58:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	88fa      	ldrh	r2, [r7, #6]
 8007e5e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2222      	movs	r2, #34	@ 0x22
 8007e6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d007      	beq.n	8007e8e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68da      	ldr	r2, [r3, #12]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e8c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	695a      	ldr	r2, [r3, #20]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f042 0201 	orr.w	r2, r2, #1
 8007e9c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68da      	ldr	r2, [r3, #12]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f042 0220 	orr.w	r2, r2, #32
 8007eac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b095      	sub	sp, #84	@ 0x54
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	330c      	adds	r3, #12
 8007eca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ece:	e853 3f00 	ldrex	r3, [r3]
 8007ed2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	330c      	adds	r3, #12
 8007ee2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007ee4:	643a      	str	r2, [r7, #64]	@ 0x40
 8007ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007eea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007eec:	e841 2300 	strex	r3, r2, [r1]
 8007ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1e5      	bne.n	8007ec4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	3314      	adds	r3, #20
 8007efe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f00:	6a3b      	ldr	r3, [r7, #32]
 8007f02:	e853 3f00 	ldrex	r3, [r3]
 8007f06:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	f023 0301 	bic.w	r3, r3, #1
 8007f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	3314      	adds	r3, #20
 8007f16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f20:	e841 2300 	strex	r3, r2, [r1]
 8007f24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1e5      	bne.n	8007ef8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d119      	bne.n	8007f68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	330c      	adds	r3, #12
 8007f3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	e853 3f00 	ldrex	r3, [r3]
 8007f42:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	f023 0310 	bic.w	r3, r3, #16
 8007f4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	330c      	adds	r3, #12
 8007f52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f54:	61ba      	str	r2, [r7, #24]
 8007f56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f58:	6979      	ldr	r1, [r7, #20]
 8007f5a:	69ba      	ldr	r2, [r7, #24]
 8007f5c:	e841 2300 	strex	r3, r2, [r1]
 8007f60:	613b      	str	r3, [r7, #16]
   return(result);
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1e5      	bne.n	8007f34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2220      	movs	r2, #32
 8007f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007f76:	bf00      	nop
 8007f78:	3754      	adds	r7, #84	@ 0x54
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b084      	sub	sp, #16
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f7ff fecb 	bl	8007d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fa2:	bf00      	nop
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b085      	sub	sp, #20
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b21      	cmp	r3, #33	@ 0x21
 8007fbc:	d13e      	bne.n	800803c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fc6:	d114      	bne.n	8007ff2 <UART_Transmit_IT+0x48>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d110      	bne.n	8007ff2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a1b      	ldr	r3, [r3, #32]
 8007fd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	881b      	ldrh	r3, [r3, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fe4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	1c9a      	adds	r2, r3, #2
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	621a      	str	r2, [r3, #32]
 8007ff0:	e008      	b.n	8008004 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	1c59      	adds	r1, r3, #1
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	6211      	str	r1, [r2, #32]
 8007ffc:	781a      	ldrb	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008008:	b29b      	uxth	r3, r3
 800800a:	3b01      	subs	r3, #1
 800800c:	b29b      	uxth	r3, r3
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	4619      	mov	r1, r3
 8008012:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10f      	bne.n	8008038 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68da      	ldr	r2, [r3, #12]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008026:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008036:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	e000      	b.n	800803e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800803c:	2302      	movs	r3, #2
  }
}
 800803e:	4618      	mov	r0, r3
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b082      	sub	sp, #8
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68da      	ldr	r2, [r3, #12]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008060:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2220      	movs	r2, #32
 8008066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7ff fe5a 	bl	8007d24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b08c      	sub	sp, #48	@ 0x30
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b22      	cmp	r3, #34	@ 0x22
 800808c:	f040 80ab 	bne.w	80081e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008098:	d117      	bne.n	80080ca <UART_Receive_IT+0x50>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d113      	bne.n	80080ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80080a2:	2300      	movs	r3, #0
 80080a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c2:	1c9a      	adds	r2, r3, #2
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80080c8:	e026      	b.n	8008118 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80080d0:	2300      	movs	r3, #0
 80080d2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080dc:	d007      	beq.n	80080ee <UART_Receive_IT+0x74>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10a      	bne.n	80080fc <UART_Receive_IT+0x82>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d106      	bne.n	80080fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f8:	701a      	strb	r2, [r3, #0]
 80080fa:	e008      	b.n	800810e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	b2db      	uxtb	r3, r3
 8008104:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008108:	b2da      	uxtb	r2, r3
 800810a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800810c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800811c:	b29b      	uxth	r3, r3
 800811e:	3b01      	subs	r3, #1
 8008120:	b29b      	uxth	r3, r3
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	4619      	mov	r1, r3
 8008126:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008128:	2b00      	cmp	r3, #0
 800812a:	d15a      	bne.n	80081e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68da      	ldr	r2, [r3, #12]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f022 0220 	bic.w	r2, r2, #32
 800813a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68da      	ldr	r2, [r3, #12]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800814a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	695a      	ldr	r2, [r3, #20]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f022 0201 	bic.w	r2, r2, #1
 800815a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2220      	movs	r2, #32
 8008160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008168:	2b01      	cmp	r3, #1
 800816a:	d135      	bne.n	80081d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	330c      	adds	r3, #12
 8008178:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	e853 3f00 	ldrex	r3, [r3]
 8008180:	613b      	str	r3, [r7, #16]
   return(result);
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	f023 0310 	bic.w	r3, r3, #16
 8008188:	627b      	str	r3, [r7, #36]	@ 0x24
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	330c      	adds	r3, #12
 8008190:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008192:	623a      	str	r2, [r7, #32]
 8008194:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008196:	69f9      	ldr	r1, [r7, #28]
 8008198:	6a3a      	ldr	r2, [r7, #32]
 800819a:	e841 2300 	strex	r3, r2, [r1]
 800819e:	61bb      	str	r3, [r7, #24]
   return(result);
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1e5      	bne.n	8008172 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 0310 	and.w	r3, r3, #16
 80081b0:	2b10      	cmp	r3, #16
 80081b2:	d10a      	bne.n	80081ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081b4:	2300      	movs	r3, #0
 80081b6:	60fb      	str	r3, [r7, #12]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	60fb      	str	r3, [r7, #12]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	60fb      	str	r3, [r7, #12]
 80081c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80081ce:	4619      	mov	r1, r3
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f7ff fdbb 	bl	8007d4c <HAL_UARTEx_RxEventCallback>
 80081d6:	e002      	b.n	80081de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7fa fe97 	bl	8002f0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	e002      	b.n	80081e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	e000      	b.n	80081e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80081e6:	2302      	movs	r3, #2
  }
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3730      	adds	r7, #48	@ 0x30
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081f4:	b0c0      	sub	sp, #256	@ 0x100
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800820c:	68d9      	ldr	r1, [r3, #12]
 800820e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	ea40 0301 	orr.w	r3, r0, r1
 8008218:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800821a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800821e:	689a      	ldr	r2, [r3, #8]
 8008220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	431a      	orrs	r2, r3
 8008228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	431a      	orrs	r2, r3
 8008230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008234:	69db      	ldr	r3, [r3, #28]
 8008236:	4313      	orrs	r3, r2
 8008238:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800823c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008248:	f021 010c 	bic.w	r1, r1, #12
 800824c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008256:	430b      	orrs	r3, r1
 8008258:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800825a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800826a:	6999      	ldr	r1, [r3, #24]
 800826c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	ea40 0301 	orr.w	r3, r0, r1
 8008276:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	4b8f      	ldr	r3, [pc, #572]	@ (80084bc <UART_SetConfig+0x2cc>)
 8008280:	429a      	cmp	r2, r3
 8008282:	d005      	beq.n	8008290 <UART_SetConfig+0xa0>
 8008284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	4b8d      	ldr	r3, [pc, #564]	@ (80084c0 <UART_SetConfig+0x2d0>)
 800828c:	429a      	cmp	r2, r3
 800828e:	d104      	bne.n	800829a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008290:	f7fe fcee 	bl	8006c70 <HAL_RCC_GetPCLK2Freq>
 8008294:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008298:	e003      	b.n	80082a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800829a:	f7fe fcd5 	bl	8006c48 <HAL_RCC_GetPCLK1Freq>
 800829e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082a6:	69db      	ldr	r3, [r3, #28]
 80082a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082ac:	f040 810c 	bne.w	80084c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082b4:	2200      	movs	r2, #0
 80082b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80082be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80082c2:	4622      	mov	r2, r4
 80082c4:	462b      	mov	r3, r5
 80082c6:	1891      	adds	r1, r2, r2
 80082c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80082ca:	415b      	adcs	r3, r3
 80082cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80082d2:	4621      	mov	r1, r4
 80082d4:	eb12 0801 	adds.w	r8, r2, r1
 80082d8:	4629      	mov	r1, r5
 80082da:	eb43 0901 	adc.w	r9, r3, r1
 80082de:	f04f 0200 	mov.w	r2, #0
 80082e2:	f04f 0300 	mov.w	r3, #0
 80082e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082f2:	4690      	mov	r8, r2
 80082f4:	4699      	mov	r9, r3
 80082f6:	4623      	mov	r3, r4
 80082f8:	eb18 0303 	adds.w	r3, r8, r3
 80082fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008300:	462b      	mov	r3, r5
 8008302:	eb49 0303 	adc.w	r3, r9, r3
 8008306:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800830a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008316:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800831a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800831e:	460b      	mov	r3, r1
 8008320:	18db      	adds	r3, r3, r3
 8008322:	653b      	str	r3, [r7, #80]	@ 0x50
 8008324:	4613      	mov	r3, r2
 8008326:	eb42 0303 	adc.w	r3, r2, r3
 800832a:	657b      	str	r3, [r7, #84]	@ 0x54
 800832c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008330:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008334:	f7f8 fc1a 	bl	8000b6c <__aeabi_uldivmod>
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	4b61      	ldr	r3, [pc, #388]	@ (80084c4 <UART_SetConfig+0x2d4>)
 800833e:	fba3 2302 	umull	r2, r3, r3, r2
 8008342:	095b      	lsrs	r3, r3, #5
 8008344:	011c      	lsls	r4, r3, #4
 8008346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800834a:	2200      	movs	r2, #0
 800834c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008350:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008354:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008358:	4642      	mov	r2, r8
 800835a:	464b      	mov	r3, r9
 800835c:	1891      	adds	r1, r2, r2
 800835e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008360:	415b      	adcs	r3, r3
 8008362:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008364:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008368:	4641      	mov	r1, r8
 800836a:	eb12 0a01 	adds.w	sl, r2, r1
 800836e:	4649      	mov	r1, r9
 8008370:	eb43 0b01 	adc.w	fp, r3, r1
 8008374:	f04f 0200 	mov.w	r2, #0
 8008378:	f04f 0300 	mov.w	r3, #0
 800837c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008380:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008384:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008388:	4692      	mov	sl, r2
 800838a:	469b      	mov	fp, r3
 800838c:	4643      	mov	r3, r8
 800838e:	eb1a 0303 	adds.w	r3, sl, r3
 8008392:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008396:	464b      	mov	r3, r9
 8008398:	eb4b 0303 	adc.w	r3, fp, r3
 800839c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80083a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80083b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80083b4:	460b      	mov	r3, r1
 80083b6:	18db      	adds	r3, r3, r3
 80083b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80083ba:	4613      	mov	r3, r2
 80083bc:	eb42 0303 	adc.w	r3, r2, r3
 80083c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80083c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80083c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80083ca:	f7f8 fbcf 	bl	8000b6c <__aeabi_uldivmod>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	4611      	mov	r1, r2
 80083d4:	4b3b      	ldr	r3, [pc, #236]	@ (80084c4 <UART_SetConfig+0x2d4>)
 80083d6:	fba3 2301 	umull	r2, r3, r3, r1
 80083da:	095b      	lsrs	r3, r3, #5
 80083dc:	2264      	movs	r2, #100	@ 0x64
 80083de:	fb02 f303 	mul.w	r3, r2, r3
 80083e2:	1acb      	subs	r3, r1, r3
 80083e4:	00db      	lsls	r3, r3, #3
 80083e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80083ea:	4b36      	ldr	r3, [pc, #216]	@ (80084c4 <UART_SetConfig+0x2d4>)
 80083ec:	fba3 2302 	umull	r2, r3, r3, r2
 80083f0:	095b      	lsrs	r3, r3, #5
 80083f2:	005b      	lsls	r3, r3, #1
 80083f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80083f8:	441c      	add	r4, r3
 80083fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083fe:	2200      	movs	r2, #0
 8008400:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008404:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008408:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800840c:	4642      	mov	r2, r8
 800840e:	464b      	mov	r3, r9
 8008410:	1891      	adds	r1, r2, r2
 8008412:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008414:	415b      	adcs	r3, r3
 8008416:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008418:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800841c:	4641      	mov	r1, r8
 800841e:	1851      	adds	r1, r2, r1
 8008420:	6339      	str	r1, [r7, #48]	@ 0x30
 8008422:	4649      	mov	r1, r9
 8008424:	414b      	adcs	r3, r1
 8008426:	637b      	str	r3, [r7, #52]	@ 0x34
 8008428:	f04f 0200 	mov.w	r2, #0
 800842c:	f04f 0300 	mov.w	r3, #0
 8008430:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008434:	4659      	mov	r1, fp
 8008436:	00cb      	lsls	r3, r1, #3
 8008438:	4651      	mov	r1, sl
 800843a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800843e:	4651      	mov	r1, sl
 8008440:	00ca      	lsls	r2, r1, #3
 8008442:	4610      	mov	r0, r2
 8008444:	4619      	mov	r1, r3
 8008446:	4603      	mov	r3, r0
 8008448:	4642      	mov	r2, r8
 800844a:	189b      	adds	r3, r3, r2
 800844c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008450:	464b      	mov	r3, r9
 8008452:	460a      	mov	r2, r1
 8008454:	eb42 0303 	adc.w	r3, r2, r3
 8008458:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800845c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008468:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800846c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008470:	460b      	mov	r3, r1
 8008472:	18db      	adds	r3, r3, r3
 8008474:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008476:	4613      	mov	r3, r2
 8008478:	eb42 0303 	adc.w	r3, r2, r3
 800847c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800847e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008482:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008486:	f7f8 fb71 	bl	8000b6c <__aeabi_uldivmod>
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	4b0d      	ldr	r3, [pc, #52]	@ (80084c4 <UART_SetConfig+0x2d4>)
 8008490:	fba3 1302 	umull	r1, r3, r3, r2
 8008494:	095b      	lsrs	r3, r3, #5
 8008496:	2164      	movs	r1, #100	@ 0x64
 8008498:	fb01 f303 	mul.w	r3, r1, r3
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	00db      	lsls	r3, r3, #3
 80084a0:	3332      	adds	r3, #50	@ 0x32
 80084a2:	4a08      	ldr	r2, [pc, #32]	@ (80084c4 <UART_SetConfig+0x2d4>)
 80084a4:	fba2 2303 	umull	r2, r3, r2, r3
 80084a8:	095b      	lsrs	r3, r3, #5
 80084aa:	f003 0207 	and.w	r2, r3, #7
 80084ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4422      	add	r2, r4
 80084b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084b8:	e106      	b.n	80086c8 <UART_SetConfig+0x4d8>
 80084ba:	bf00      	nop
 80084bc:	40011000 	.word	0x40011000
 80084c0:	40011400 	.word	0x40011400
 80084c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084cc:	2200      	movs	r2, #0
 80084ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80084d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80084d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80084da:	4642      	mov	r2, r8
 80084dc:	464b      	mov	r3, r9
 80084de:	1891      	adds	r1, r2, r2
 80084e0:	6239      	str	r1, [r7, #32]
 80084e2:	415b      	adcs	r3, r3
 80084e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80084e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084ea:	4641      	mov	r1, r8
 80084ec:	1854      	adds	r4, r2, r1
 80084ee:	4649      	mov	r1, r9
 80084f0:	eb43 0501 	adc.w	r5, r3, r1
 80084f4:	f04f 0200 	mov.w	r2, #0
 80084f8:	f04f 0300 	mov.w	r3, #0
 80084fc:	00eb      	lsls	r3, r5, #3
 80084fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008502:	00e2      	lsls	r2, r4, #3
 8008504:	4614      	mov	r4, r2
 8008506:	461d      	mov	r5, r3
 8008508:	4643      	mov	r3, r8
 800850a:	18e3      	adds	r3, r4, r3
 800850c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008510:	464b      	mov	r3, r9
 8008512:	eb45 0303 	adc.w	r3, r5, r3
 8008516:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800851a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008526:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800852a:	f04f 0200 	mov.w	r2, #0
 800852e:	f04f 0300 	mov.w	r3, #0
 8008532:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008536:	4629      	mov	r1, r5
 8008538:	008b      	lsls	r3, r1, #2
 800853a:	4621      	mov	r1, r4
 800853c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008540:	4621      	mov	r1, r4
 8008542:	008a      	lsls	r2, r1, #2
 8008544:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008548:	f7f8 fb10 	bl	8000b6c <__aeabi_uldivmod>
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	4b60      	ldr	r3, [pc, #384]	@ (80086d4 <UART_SetConfig+0x4e4>)
 8008552:	fba3 2302 	umull	r2, r3, r3, r2
 8008556:	095b      	lsrs	r3, r3, #5
 8008558:	011c      	lsls	r4, r3, #4
 800855a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800855e:	2200      	movs	r2, #0
 8008560:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008564:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008568:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800856c:	4642      	mov	r2, r8
 800856e:	464b      	mov	r3, r9
 8008570:	1891      	adds	r1, r2, r2
 8008572:	61b9      	str	r1, [r7, #24]
 8008574:	415b      	adcs	r3, r3
 8008576:	61fb      	str	r3, [r7, #28]
 8008578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800857c:	4641      	mov	r1, r8
 800857e:	1851      	adds	r1, r2, r1
 8008580:	6139      	str	r1, [r7, #16]
 8008582:	4649      	mov	r1, r9
 8008584:	414b      	adcs	r3, r1
 8008586:	617b      	str	r3, [r7, #20]
 8008588:	f04f 0200 	mov.w	r2, #0
 800858c:	f04f 0300 	mov.w	r3, #0
 8008590:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008594:	4659      	mov	r1, fp
 8008596:	00cb      	lsls	r3, r1, #3
 8008598:	4651      	mov	r1, sl
 800859a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800859e:	4651      	mov	r1, sl
 80085a0:	00ca      	lsls	r2, r1, #3
 80085a2:	4610      	mov	r0, r2
 80085a4:	4619      	mov	r1, r3
 80085a6:	4603      	mov	r3, r0
 80085a8:	4642      	mov	r2, r8
 80085aa:	189b      	adds	r3, r3, r2
 80085ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80085b0:	464b      	mov	r3, r9
 80085b2:	460a      	mov	r2, r1
 80085b4:	eb42 0303 	adc.w	r3, r2, r3
 80085b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80085bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80085c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80085c8:	f04f 0200 	mov.w	r2, #0
 80085cc:	f04f 0300 	mov.w	r3, #0
 80085d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80085d4:	4649      	mov	r1, r9
 80085d6:	008b      	lsls	r3, r1, #2
 80085d8:	4641      	mov	r1, r8
 80085da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085de:	4641      	mov	r1, r8
 80085e0:	008a      	lsls	r2, r1, #2
 80085e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80085e6:	f7f8 fac1 	bl	8000b6c <__aeabi_uldivmod>
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	4611      	mov	r1, r2
 80085f0:	4b38      	ldr	r3, [pc, #224]	@ (80086d4 <UART_SetConfig+0x4e4>)
 80085f2:	fba3 2301 	umull	r2, r3, r3, r1
 80085f6:	095b      	lsrs	r3, r3, #5
 80085f8:	2264      	movs	r2, #100	@ 0x64
 80085fa:	fb02 f303 	mul.w	r3, r2, r3
 80085fe:	1acb      	subs	r3, r1, r3
 8008600:	011b      	lsls	r3, r3, #4
 8008602:	3332      	adds	r3, #50	@ 0x32
 8008604:	4a33      	ldr	r2, [pc, #204]	@ (80086d4 <UART_SetConfig+0x4e4>)
 8008606:	fba2 2303 	umull	r2, r3, r2, r3
 800860a:	095b      	lsrs	r3, r3, #5
 800860c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008610:	441c      	add	r4, r3
 8008612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008616:	2200      	movs	r2, #0
 8008618:	673b      	str	r3, [r7, #112]	@ 0x70
 800861a:	677a      	str	r2, [r7, #116]	@ 0x74
 800861c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008620:	4642      	mov	r2, r8
 8008622:	464b      	mov	r3, r9
 8008624:	1891      	adds	r1, r2, r2
 8008626:	60b9      	str	r1, [r7, #8]
 8008628:	415b      	adcs	r3, r3
 800862a:	60fb      	str	r3, [r7, #12]
 800862c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008630:	4641      	mov	r1, r8
 8008632:	1851      	adds	r1, r2, r1
 8008634:	6039      	str	r1, [r7, #0]
 8008636:	4649      	mov	r1, r9
 8008638:	414b      	adcs	r3, r1
 800863a:	607b      	str	r3, [r7, #4]
 800863c:	f04f 0200 	mov.w	r2, #0
 8008640:	f04f 0300 	mov.w	r3, #0
 8008644:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008648:	4659      	mov	r1, fp
 800864a:	00cb      	lsls	r3, r1, #3
 800864c:	4651      	mov	r1, sl
 800864e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008652:	4651      	mov	r1, sl
 8008654:	00ca      	lsls	r2, r1, #3
 8008656:	4610      	mov	r0, r2
 8008658:	4619      	mov	r1, r3
 800865a:	4603      	mov	r3, r0
 800865c:	4642      	mov	r2, r8
 800865e:	189b      	adds	r3, r3, r2
 8008660:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008662:	464b      	mov	r3, r9
 8008664:	460a      	mov	r2, r1
 8008666:	eb42 0303 	adc.w	r3, r2, r3
 800866a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800866c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	663b      	str	r3, [r7, #96]	@ 0x60
 8008676:	667a      	str	r2, [r7, #100]	@ 0x64
 8008678:	f04f 0200 	mov.w	r2, #0
 800867c:	f04f 0300 	mov.w	r3, #0
 8008680:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008684:	4649      	mov	r1, r9
 8008686:	008b      	lsls	r3, r1, #2
 8008688:	4641      	mov	r1, r8
 800868a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800868e:	4641      	mov	r1, r8
 8008690:	008a      	lsls	r2, r1, #2
 8008692:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008696:	f7f8 fa69 	bl	8000b6c <__aeabi_uldivmod>
 800869a:	4602      	mov	r2, r0
 800869c:	460b      	mov	r3, r1
 800869e:	4b0d      	ldr	r3, [pc, #52]	@ (80086d4 <UART_SetConfig+0x4e4>)
 80086a0:	fba3 1302 	umull	r1, r3, r3, r2
 80086a4:	095b      	lsrs	r3, r3, #5
 80086a6:	2164      	movs	r1, #100	@ 0x64
 80086a8:	fb01 f303 	mul.w	r3, r1, r3
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	011b      	lsls	r3, r3, #4
 80086b0:	3332      	adds	r3, #50	@ 0x32
 80086b2:	4a08      	ldr	r2, [pc, #32]	@ (80086d4 <UART_SetConfig+0x4e4>)
 80086b4:	fba2 2303 	umull	r2, r3, r2, r3
 80086b8:	095b      	lsrs	r3, r3, #5
 80086ba:	f003 020f 	and.w	r2, r3, #15
 80086be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4422      	add	r2, r4
 80086c6:	609a      	str	r2, [r3, #8]
}
 80086c8:	bf00      	nop
 80086ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80086ce:	46bd      	mov	sp, r7
 80086d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086d4:	51eb851f 	.word	0x51eb851f

080086d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086d8:	b084      	sub	sp, #16
 80086da:	b580      	push	{r7, lr}
 80086dc:	b084      	sub	sp, #16
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
 80086e2:	f107 001c 	add.w	r0, r7, #28
 80086e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80086ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d122      	bne.n	8008736 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008704:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800871a:	2b01      	cmp	r3, #1
 800871c:	d105      	bne.n	800872a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f9c0 	bl	8008ab0 <USB_CoreReset>
 8008730:	4603      	mov	r3, r0
 8008732:	73fb      	strb	r3, [r7, #15]
 8008734:	e01a      	b.n	800876c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 f9b4 	bl	8008ab0 <USB_CoreReset>
 8008748:	4603      	mov	r3, r0
 800874a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800874c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800874e:	2b00      	cmp	r3, #0
 8008750:	d106      	bne.n	8008760 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008756:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	639a      	str	r2, [r3, #56]	@ 0x38
 800875e:	e005      	b.n	800876c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008764:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800876c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876e:	2b01      	cmp	r3, #1
 8008770:	d10b      	bne.n	800878a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f043 0206 	orr.w	r2, r3, #6
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f043 0220 	orr.w	r2, r3, #32
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800878a:	7bfb      	ldrb	r3, [r7, #15]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3710      	adds	r7, #16
 8008790:	46bd      	mov	sp, r7
 8008792:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008796:	b004      	add	sp, #16
 8008798:	4770      	bx	lr

0800879a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800879a:	b480      	push	{r7}
 800879c:	b083      	sub	sp, #12
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	f043 0201 	orr.w	r2, r3, #1
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	f023 0201 	bic.w	r2, r3, #1
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b084      	sub	sp, #16
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
 80087e6:	460b      	mov	r3, r1
 80087e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80087ea:	2300      	movs	r3, #0
 80087ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80087fa:	78fb      	ldrb	r3, [r7, #3]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d115      	bne.n	800882c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800880c:	2001      	movs	r0, #1
 800880e:	f7fb f819 	bl	8003844 <HAL_Delay>
      ms++;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	3301      	adds	r3, #1
 8008816:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 f93a 	bl	8008a92 <USB_GetMode>
 800881e:	4603      	mov	r3, r0
 8008820:	2b01      	cmp	r3, #1
 8008822:	d01e      	beq.n	8008862 <USB_SetCurrentMode+0x84>
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2b31      	cmp	r3, #49	@ 0x31
 8008828:	d9f0      	bls.n	800880c <USB_SetCurrentMode+0x2e>
 800882a:	e01a      	b.n	8008862 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800882c:	78fb      	ldrb	r3, [r7, #3]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d115      	bne.n	800885e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800883e:	2001      	movs	r0, #1
 8008840:	f7fb f800 	bl	8003844 <HAL_Delay>
      ms++;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	3301      	adds	r3, #1
 8008848:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f921 	bl	8008a92 <USB_GetMode>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d005      	beq.n	8008862 <USB_SetCurrentMode+0x84>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2b31      	cmp	r3, #49	@ 0x31
 800885a:	d9f0      	bls.n	800883e <USB_SetCurrentMode+0x60>
 800885c:	e001      	b.n	8008862 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e005      	b.n	800886e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2b32      	cmp	r3, #50	@ 0x32
 8008866:	d101      	bne.n	800886c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e000      	b.n	800886e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
	...

08008878 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008882:	2300      	movs	r3, #0
 8008884:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	3301      	adds	r3, #1
 800888a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	4a13      	ldr	r2, [pc, #76]	@ (80088dc <USB_FlushTxFifo+0x64>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d901      	bls.n	8008898 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008894:	2303      	movs	r3, #3
 8008896:	e01b      	b.n	80088d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	2b00      	cmp	r3, #0
 800889e:	daf2      	bge.n	8008886 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80088a0:	2300      	movs	r3, #0
 80088a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	019b      	lsls	r3, r3, #6
 80088a8:	f043 0220 	orr.w	r2, r3, #32
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	3301      	adds	r3, #1
 80088b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	4a08      	ldr	r2, [pc, #32]	@ (80088dc <USB_FlushTxFifo+0x64>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d901      	bls.n	80088c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	e006      	b.n	80088d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	f003 0320 	and.w	r3, r3, #32
 80088ca:	2b20      	cmp	r3, #32
 80088cc:	d0f0      	beq.n	80088b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3714      	adds	r7, #20
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr
 80088dc:	00030d40 	.word	0x00030d40

080088e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088e8:	2300      	movs	r3, #0
 80088ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	3301      	adds	r3, #1
 80088f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	4a11      	ldr	r2, [pc, #68]	@ (800893c <USB_FlushRxFifo+0x5c>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d901      	bls.n	80088fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80088fa:	2303      	movs	r3, #3
 80088fc:	e018      	b.n	8008930 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	2b00      	cmp	r3, #0
 8008904:	daf2      	bge.n	80088ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008906:	2300      	movs	r3, #0
 8008908:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2210      	movs	r2, #16
 800890e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	3301      	adds	r3, #1
 8008914:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	4a08      	ldr	r2, [pc, #32]	@ (800893c <USB_FlushRxFifo+0x5c>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d901      	bls.n	8008922 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800891e:	2303      	movs	r3, #3
 8008920:	e006      	b.n	8008930 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	f003 0310 	and.w	r3, r3, #16
 800892a:	2b10      	cmp	r3, #16
 800892c:	d0f0      	beq.n	8008910 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3714      	adds	r7, #20
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	00030d40 	.word	0x00030d40

08008940 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008940:	b480      	push	{r7}
 8008942:	b089      	sub	sp, #36	@ 0x24
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	4611      	mov	r1, r2
 800894c:	461a      	mov	r2, r3
 800894e:	460b      	mov	r3, r1
 8008950:	71fb      	strb	r3, [r7, #7]
 8008952:	4613      	mov	r3, r2
 8008954:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800895e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008962:	2b00      	cmp	r3, #0
 8008964:	d123      	bne.n	80089ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008966:	88bb      	ldrh	r3, [r7, #4]
 8008968:	3303      	adds	r3, #3
 800896a:	089b      	lsrs	r3, r3, #2
 800896c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800896e:	2300      	movs	r3, #0
 8008970:	61bb      	str	r3, [r7, #24]
 8008972:	e018      	b.n	80089a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008974:	79fb      	ldrb	r3, [r7, #7]
 8008976:	031a      	lsls	r2, r3, #12
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	4413      	add	r3, r2
 800897c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008980:	461a      	mov	r2, r3
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	3301      	adds	r3, #1
 800898c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	3301      	adds	r3, #1
 8008992:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	3301      	adds	r3, #1
 8008998:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	3301      	adds	r3, #1
 800899e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	3301      	adds	r3, #1
 80089a4:	61bb      	str	r3, [r7, #24]
 80089a6:	69ba      	ldr	r2, [r7, #24]
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d3e2      	bcc.n	8008974 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3724      	adds	r7, #36	@ 0x24
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80089bc:	b480      	push	{r7}
 80089be:	b08b      	sub	sp, #44	@ 0x2c
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	4613      	mov	r3, r2
 80089c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80089d2:	88fb      	ldrh	r3, [r7, #6]
 80089d4:	089b      	lsrs	r3, r3, #2
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80089da:	88fb      	ldrh	r3, [r7, #6]
 80089dc:	f003 0303 	and.w	r3, r3, #3
 80089e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80089e2:	2300      	movs	r3, #0
 80089e4:	623b      	str	r3, [r7, #32]
 80089e6:	e014      	b.n	8008a12 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80089f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f6:	3301      	adds	r3, #1
 80089f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80089fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089fc:	3301      	adds	r3, #1
 80089fe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a02:	3301      	adds	r3, #1
 8008a04:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a08:	3301      	adds	r3, #1
 8008a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008a0c:	6a3b      	ldr	r3, [r7, #32]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	623b      	str	r3, [r7, #32]
 8008a12:	6a3a      	ldr	r2, [r7, #32]
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d3e6      	bcc.n	80089e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008a1a:	8bfb      	ldrh	r3, [r7, #30]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d01e      	beq.n	8008a5e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008a20:	2300      	movs	r3, #0
 8008a22:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	f107 0310 	add.w	r3, r7, #16
 8008a30:	6812      	ldr	r2, [r2, #0]
 8008a32:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	6a3b      	ldr	r3, [r7, #32]
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	00db      	lsls	r3, r3, #3
 8008a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a40:	b2da      	uxtb	r2, r3
 8008a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a44:	701a      	strb	r2, [r3, #0]
      i++;
 8008a46:	6a3b      	ldr	r3, [r7, #32]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4e:	3301      	adds	r3, #1
 8008a50:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008a52:	8bfb      	ldrh	r3, [r7, #30]
 8008a54:	3b01      	subs	r3, #1
 8008a56:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008a58:	8bfb      	ldrh	r3, [r7, #30]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1ea      	bne.n	8008a34 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	372c      	adds	r7, #44	@ 0x2c
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	695b      	ldr	r3, [r3, #20]
 8008a78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	4013      	ands	r3, r2
 8008a82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a84:	68fb      	ldr	r3, [r7, #12]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3714      	adds	r7, #20
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008a92:	b480      	push	{r7}
 8008a94:	b083      	sub	sp, #12
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	f003 0301 	and.w	r3, r3, #1
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	370c      	adds	r7, #12
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
	...

08008ab0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	4a13      	ldr	r2, [pc, #76]	@ (8008b14 <USB_CoreReset+0x64>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d901      	bls.n	8008ace <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e01b      	b.n	8008b06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	daf2      	bge.n	8008abc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	f043 0201 	orr.w	r2, r3, #1
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	4a09      	ldr	r2, [pc, #36]	@ (8008b14 <USB_CoreReset+0x64>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d901      	bls.n	8008af8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008af4:	2303      	movs	r3, #3
 8008af6:	e006      	b.n	8008b06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	f003 0301 	and.w	r3, r3, #1
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d0f0      	beq.n	8008ae6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3714      	adds	r7, #20
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	00030d40 	.word	0x00030d40

08008b18 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b18:	b084      	sub	sp, #16
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b086      	sub	sp, #24
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008b26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b38:	461a      	mov	r2, r3
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b42:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b4e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b5a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d018      	beq.n	8008ba0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d10a      	bne.n	8008b8a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008b82:	f043 0304 	orr.w	r3, r3, #4
 8008b86:	6013      	str	r3, [r2, #0]
 8008b88:	e014      	b.n	8008bb4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008b98:	f023 0304 	bic.w	r3, r3, #4
 8008b9c:	6013      	str	r3, [r2, #0]
 8008b9e:	e009      	b.n	8008bb4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008bae:	f023 0304 	bic.w	r3, r3, #4
 8008bb2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008bb4:	2110      	movs	r1, #16
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f7ff fe5e 	bl	8008878 <USB_FlushTxFifo>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f7ff fe8a 	bl	80088e0 <USB_FlushRxFifo>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	613b      	str	r3, [r7, #16]
 8008bda:	e015      	b.n	8008c08 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	015a      	lsls	r2, r3, #5
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	4413      	add	r3, r2
 8008be4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008be8:	461a      	mov	r2, r3
 8008bea:	f04f 33ff 	mov.w	r3, #4294967295
 8008bee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	2300      	movs	r3, #0
 8008c00:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	3301      	adds	r3, #1
 8008c06:	613b      	str	r3, [r7, #16]
 8008c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d3e5      	bcc.n	8008bdc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f04f 32ff 	mov.w	r2, #4294967295
 8008c1c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00b      	beq.n	8008c42 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c30:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a13      	ldr	r2, [pc, #76]	@ (8008c84 <USB_HostInit+0x16c>)
 8008c36:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a13      	ldr	r2, [pc, #76]	@ (8008c88 <USB_HostInit+0x170>)
 8008c3c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008c40:	e009      	b.n	8008c56 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2280      	movs	r2, #128	@ 0x80
 8008c46:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a10      	ldr	r2, [pc, #64]	@ (8008c8c <USB_HostInit+0x174>)
 8008c4c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a0f      	ldr	r2, [pc, #60]	@ (8008c90 <USB_HostInit+0x178>)
 8008c52:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d105      	bne.n	8008c68 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	f043 0210 	orr.w	r2, r3, #16
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	699a      	ldr	r2, [r3, #24]
 8008c6c:	4b09      	ldr	r3, [pc, #36]	@ (8008c94 <USB_HostInit+0x17c>)
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3718      	adds	r7, #24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c80:	b004      	add	sp, #16
 8008c82:	4770      	bx	lr
 8008c84:	01000200 	.word	0x01000200
 8008c88:	00e00300 	.word	0x00e00300
 8008c8c:	00600080 	.word	0x00600080
 8008c90:	004000e0 	.word	0x004000e0
 8008c94:	a3200008 	.word	0xa3200008

08008c98 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008cb6:	f023 0303 	bic.w	r3, r3, #3
 8008cba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	78fb      	ldrb	r3, [r7, #3]
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	68f9      	ldr	r1, [r7, #12]
 8008ccc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008cd4:	78fb      	ldrb	r3, [r7, #3]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d107      	bne.n	8008cea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008ce6:	6053      	str	r3, [r2, #4]
 8008ce8:	e009      	b.n	8008cfe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008cea:	78fb      	ldrb	r3, [r7, #3]
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d106      	bne.n	8008cfe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008cfc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008d2c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d3a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008d3c:	2064      	movs	r0, #100	@ 0x64
 8008d3e:	f7fa fd81 	bl	8003844 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008d4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d4e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008d50:	200a      	movs	r0, #10
 8008d52:	f7fa fd77 	bl	8003844 <HAL_Delay>

  return HAL_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	460b      	mov	r3, r1
 8008d6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008d70:	2300      	movs	r3, #0
 8008d72:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008d84:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d109      	bne.n	8008da4 <USB_DriveVbus+0x44>
 8008d90:	78fb      	ldrb	r3, [r7, #3]
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d106      	bne.n	8008da4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008d9e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008da2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dae:	d109      	bne.n	8008dc4 <USB_DriveVbus+0x64>
 8008db0:	78fb      	ldrb	r3, [r7, #3]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d106      	bne.n	8008dc4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008dbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008dc2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b085      	sub	sp, #20
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008dde:	2300      	movs	r3, #0
 8008de0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	0c5b      	lsrs	r3, r3, #17
 8008df0:	f003 0303 	and.w	r3, r3, #3
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	b29b      	uxth	r3, r3
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3714      	adds	r7, #20
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
	...

08008e24 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b088      	sub	sp, #32
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	4608      	mov	r0, r1
 8008e2e:	4611      	mov	r1, r2
 8008e30:	461a      	mov	r2, r3
 8008e32:	4603      	mov	r3, r0
 8008e34:	70fb      	strb	r3, [r7, #3]
 8008e36:	460b      	mov	r3, r1
 8008e38:	70bb      	strb	r3, [r7, #2]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008e46:	78fb      	ldrb	r3, [r7, #3]
 8008e48:	015a      	lsls	r2, r3, #5
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e52:	461a      	mov	r2, r3
 8008e54:	f04f 33ff 	mov.w	r3, #4294967295
 8008e58:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008e5a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	d87e      	bhi.n	8008f60 <USB_HC_Init+0x13c>
 8008e62:	a201      	add	r2, pc, #4	@ (adr r2, 8008e68 <USB_HC_Init+0x44>)
 8008e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e68:	08008e79 	.word	0x08008e79
 8008e6c:	08008f23 	.word	0x08008f23
 8008e70:	08008e79 	.word	0x08008e79
 8008e74:	08008ee5 	.word	0x08008ee5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008e78:	78fb      	ldrb	r3, [r7, #3]
 8008e7a:	015a      	lsls	r2, r3, #5
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	4413      	add	r3, r2
 8008e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e84:	461a      	mov	r2, r3
 8008e86:	f240 439d 	movw	r3, #1181	@ 0x49d
 8008e8a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008e8c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	da10      	bge.n	8008eb6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008e94:	78fb      	ldrb	r3, [r7, #3]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	78fa      	ldrb	r2, [r7, #3]
 8008ea4:	0151      	lsls	r1, r2, #5
 8008ea6:	693a      	ldr	r2, [r7, #16]
 8008ea8:	440a      	add	r2, r1
 8008eaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008eb2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008eb4:	e057      	b.n	8008f66 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d051      	beq.n	8008f66 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008ec2:	78fb      	ldrb	r3, [r7, #3]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	78fa      	ldrb	r2, [r7, #3]
 8008ed2:	0151      	lsls	r1, r2, #5
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	440a      	add	r2, r1
 8008ed8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008edc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008ee0:	60d3      	str	r3, [r2, #12]
      break;
 8008ee2:	e040      	b.n	8008f66 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008ee4:	78fb      	ldrb	r3, [r7, #3]
 8008ee6:	015a      	lsls	r2, r3, #5
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	4413      	add	r3, r2
 8008eec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008ef6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008ef8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	da34      	bge.n	8008f6a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008f00:	78fb      	ldrb	r3, [r7, #3]
 8008f02:	015a      	lsls	r2, r3, #5
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	4413      	add	r3, r2
 8008f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	78fa      	ldrb	r2, [r7, #3]
 8008f10:	0151      	lsls	r1, r2, #5
 8008f12:	693a      	ldr	r2, [r7, #16]
 8008f14:	440a      	add	r2, r1
 8008f16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f1e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008f20:	e023      	b.n	8008f6a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f22:	78fb      	ldrb	r3, [r7, #3]
 8008f24:	015a      	lsls	r2, r3, #5
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	4413      	add	r3, r2
 8008f2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f2e:	461a      	mov	r2, r3
 8008f30:	f240 2325 	movw	r3, #549	@ 0x225
 8008f34:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008f36:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	da17      	bge.n	8008f6e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008f3e:	78fb      	ldrb	r3, [r7, #3]
 8008f40:	015a      	lsls	r2, r3, #5
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	4413      	add	r3, r2
 8008f46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	78fa      	ldrb	r2, [r7, #3]
 8008f4e:	0151      	lsls	r1, r2, #5
 8008f50:	693a      	ldr	r2, [r7, #16]
 8008f52:	440a      	add	r2, r1
 8008f54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f58:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008f5c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008f5e:	e006      	b.n	8008f6e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	77fb      	strb	r3, [r7, #31]
      break;
 8008f64:	e004      	b.n	8008f70 <USB_HC_Init+0x14c>
      break;
 8008f66:	bf00      	nop
 8008f68:	e002      	b.n	8008f70 <USB_HC_Init+0x14c>
      break;
 8008f6a:	bf00      	nop
 8008f6c:	e000      	b.n	8008f70 <USB_HC_Init+0x14c>
      break;
 8008f6e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008f70:	78fb      	ldrb	r3, [r7, #3]
 8008f72:	015a      	lsls	r2, r3, #5
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	4413      	add	r3, r2
 8008f78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	78fa      	ldrb	r2, [r7, #3]
 8008f80:	0151      	lsls	r1, r2, #5
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	440a      	add	r2, r1
 8008f86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f8a:	f043 0302 	orr.w	r3, r3, #2
 8008f8e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f96:	699a      	ldr	r2, [r3, #24]
 8008f98:	78fb      	ldrb	r3, [r7, #3]
 8008f9a:	f003 030f 	and.w	r3, r3, #15
 8008f9e:	2101      	movs	r1, #1
 8008fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8008fa4:	6939      	ldr	r1, [r7, #16]
 8008fa6:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008faa:	4313      	orrs	r3, r2
 8008fac:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008fba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	da03      	bge.n	8008fca <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008fc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fc6:	61bb      	str	r3, [r7, #24]
 8008fc8:	e001      	b.n	8008fce <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f7ff feff 	bl	8008dd2 <USB_GetHostSpeed>
 8008fd4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008fd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d106      	bne.n	8008fec <USB_HC_Init+0x1c8>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d003      	beq.n	8008fec <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008fe4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008fe8:	617b      	str	r3, [r7, #20]
 8008fea:	e001      	b.n	8008ff0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008fec:	2300      	movs	r3, #0
 8008fee:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008ff0:	787b      	ldrb	r3, [r7, #1]
 8008ff2:	059b      	lsls	r3, r3, #22
 8008ff4:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008ff8:	78bb      	ldrb	r3, [r7, #2]
 8008ffa:	02db      	lsls	r3, r3, #11
 8008ffc:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009000:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009002:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009006:	049b      	lsls	r3, r3, #18
 8009008:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800900c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800900e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009010:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009014:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800901a:	78fb      	ldrb	r3, [r7, #3]
 800901c:	0159      	lsls	r1, r3, #5
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	440b      	add	r3, r1
 8009022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009026:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800902c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800902e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009032:	2b03      	cmp	r3, #3
 8009034:	d003      	beq.n	800903e <USB_HC_Init+0x21a>
 8009036:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800903a:	2b01      	cmp	r3, #1
 800903c:	d10f      	bne.n	800905e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800903e:	78fb      	ldrb	r3, [r7, #3]
 8009040:	015a      	lsls	r2, r3, #5
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	4413      	add	r3, r2
 8009046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	78fa      	ldrb	r2, [r7, #3]
 800904e:	0151      	lsls	r1, r2, #5
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	440a      	add	r2, r1
 8009054:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009058:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800905c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800905e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3720      	adds	r7, #32
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b08c      	sub	sp, #48	@ 0x30
 800906c:	af02      	add	r7, sp, #8
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	4613      	mov	r3, r2
 8009074:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	785b      	ldrb	r3, [r3, #1]
 800907e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009080:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009084:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800908a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800908e:	2b00      	cmp	r3, #0
 8009090:	d02d      	beq.n	80090ee <USB_HC_StartXfer+0x86>
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	791b      	ldrb	r3, [r3, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d129      	bne.n	80090ee <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800909a:	79fb      	ldrb	r3, [r7, #7]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d117      	bne.n	80090d0 <USB_HC_StartXfer+0x68>
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	79db      	ldrb	r3, [r3, #7]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d003      	beq.n	80090b0 <USB_HC_StartXfer+0x48>
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	79db      	ldrb	r3, [r3, #7]
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d10f      	bne.n	80090d0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	015a      	lsls	r2, r3, #5
 80090b4:	6a3b      	ldr	r3, [r7, #32]
 80090b6:	4413      	add	r3, r2
 80090b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	69fa      	ldr	r2, [r7, #28]
 80090c0:	0151      	lsls	r1, r2, #5
 80090c2:	6a3a      	ldr	r2, [r7, #32]
 80090c4:	440a      	add	r2, r1
 80090c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090ce:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80090d0:	79fb      	ldrb	r3, [r7, #7]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10b      	bne.n	80090ee <USB_HC_StartXfer+0x86>
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	795b      	ldrb	r3, [r3, #5]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d107      	bne.n	80090ee <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	785b      	ldrb	r3, [r3, #1]
 80090e2:	4619      	mov	r1, r3
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f000 fa0f 	bl	8009508 <USB_DoPing>
      return HAL_OK;
 80090ea:	2300      	movs	r3, #0
 80090ec:	e0f8      	b.n	80092e0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d018      	beq.n	8009128 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	8912      	ldrh	r2, [r2, #8]
 80090fe:	4413      	add	r3, r2
 8009100:	3b01      	subs	r3, #1
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	8912      	ldrh	r2, [r2, #8]
 8009106:	fbb3 f3f2 	udiv	r3, r3, r2
 800910a:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (num_packets > max_hc_pkt_count)
 800910c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800910e:	8b7b      	ldrh	r3, [r7, #26]
 8009110:	429a      	cmp	r2, r3
 8009112:	d90b      	bls.n	800912c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009114:	8b7b      	ldrh	r3, [r7, #26]
 8009116:	84fb      	strh	r3, [r7, #38]	@ 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009118:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	8912      	ldrh	r2, [r2, #8]
 800911e:	fb03 f202 	mul.w	r2, r3, r2
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	611a      	str	r2, [r3, #16]
 8009126:	e001      	b.n	800912c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009128:	2301      	movs	r3, #1
 800912a:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	78db      	ldrb	r3, [r3, #3]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d007      	beq.n	8009144 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009134:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009136:	68ba      	ldr	r2, [r7, #8]
 8009138:	8912      	ldrh	r2, [r2, #8]
 800913a:	fb03 f202 	mul.w	r2, r3, r2
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	611a      	str	r2, [r3, #16]
 8009142:	e003      	b.n	800914c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	695a      	ldr	r2, [r3, #20]
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009154:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009156:	04d9      	lsls	r1, r3, #19
 8009158:	4b63      	ldr	r3, [pc, #396]	@ (80092e8 <USB_HC_StartXfer+0x280>)
 800915a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800915c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	7a9b      	ldrb	r3, [r3, #10]
 8009162:	075b      	lsls	r3, r3, #29
 8009164:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009168:	69f9      	ldr	r1, [r7, #28]
 800916a:	0148      	lsls	r0, r1, #5
 800916c:	6a39      	ldr	r1, [r7, #32]
 800916e:	4401      	add	r1, r0
 8009170:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009174:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009176:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009178:	79fb      	ldrb	r3, [r7, #7]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d009      	beq.n	8009192 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	68d9      	ldr	r1, [r3, #12]
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	015a      	lsls	r2, r3, #5
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	4413      	add	r3, r2
 800918a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800918e:	460a      	mov	r2, r1
 8009190:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009192:	6a3b      	ldr	r3, [r7, #32]
 8009194:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	2b00      	cmp	r3, #0
 80091a0:	bf0c      	ite	eq
 80091a2:	2301      	moveq	r3, #1
 80091a4:	2300      	movne	r3, #0
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	015a      	lsls	r2, r3, #5
 80091ae:	6a3b      	ldr	r3, [r7, #32]
 80091b0:	4413      	add	r3, r2
 80091b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	69fa      	ldr	r2, [r7, #28]
 80091ba:	0151      	lsls	r1, r2, #5
 80091bc:	6a3a      	ldr	r2, [r7, #32]
 80091be:	440a      	add	r2, r1
 80091c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80091c8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	6a3b      	ldr	r3, [r7, #32]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	7e7b      	ldrb	r3, [r7, #25]
 80091da:	075b      	lsls	r3, r3, #29
 80091dc:	69f9      	ldr	r1, [r7, #28]
 80091de:	0148      	lsls	r0, r1, #5
 80091e0:	6a39      	ldr	r1, [r7, #32]
 80091e2:	4401      	add	r1, r0
 80091e4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80091e8:	4313      	orrs	r3, r2
 80091ea:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	015a      	lsls	r2, r3, #5
 80091f0:	6a3b      	ldr	r3, [r7, #32]
 80091f2:	4413      	add	r3, r2
 80091f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009202:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	78db      	ldrb	r3, [r3, #3]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d004      	beq.n	8009216 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009212:	613b      	str	r3, [r7, #16]
 8009214:	e003      	b.n	800921e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800921c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009224:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009226:	69fb      	ldr	r3, [r7, #28]
 8009228:	015a      	lsls	r2, r3, #5
 800922a:	6a3b      	ldr	r3, [r7, #32]
 800922c:	4413      	add	r3, r2
 800922e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009232:	461a      	mov	r2, r3
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009238:	79fb      	ldrb	r3, [r7, #7]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800923e:	2300      	movs	r3, #0
 8009240:	e04e      	b.n	80092e0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	78db      	ldrb	r3, [r3, #3]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d149      	bne.n	80092de <USB_HC_StartXfer+0x276>
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d045      	beq.n	80092de <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	79db      	ldrb	r3, [r3, #7]
 8009256:	2b03      	cmp	r3, #3
 8009258:	d830      	bhi.n	80092bc <USB_HC_StartXfer+0x254>
 800925a:	a201      	add	r2, pc, #4	@ (adr r2, 8009260 <USB_HC_StartXfer+0x1f8>)
 800925c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009260:	08009271 	.word	0x08009271
 8009264:	08009295 	.word	0x08009295
 8009268:	08009271 	.word	0x08009271
 800926c:	08009295 	.word	0x08009295
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	695b      	ldr	r3, [r3, #20]
 8009274:	3303      	adds	r3, #3
 8009276:	089b      	lsrs	r3, r3, #2
 8009278:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800927a:	8afa      	ldrh	r2, [r7, #22]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009280:	b29b      	uxth	r3, r3
 8009282:	429a      	cmp	r2, r3
 8009284:	d91c      	bls.n	80092c0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	699b      	ldr	r3, [r3, #24]
 800928a:	f043 0220 	orr.w	r2, r3, #32
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	619a      	str	r2, [r3, #24]
        }
        break;
 8009292:	e015      	b.n	80092c0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	695b      	ldr	r3, [r3, #20]
 8009298:	3303      	adds	r3, #3
 800929a:	089b      	lsrs	r3, r3, #2
 800929c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800929e:	8afa      	ldrh	r2, [r7, #22]
 80092a0:	6a3b      	ldr	r3, [r7, #32]
 80092a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d90a      	bls.n	80092c4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	619a      	str	r2, [r3, #24]
        }
        break;
 80092ba:	e003      	b.n	80092c4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80092bc:	bf00      	nop
 80092be:	e002      	b.n	80092c6 <USB_HC_StartXfer+0x25e>
        break;
 80092c0:	bf00      	nop
 80092c2:	e000      	b.n	80092c6 <USB_HC_StartXfer+0x25e>
        break;
 80092c4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	68d9      	ldr	r1, [r3, #12]
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	785a      	ldrb	r2, [r3, #1]
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	695b      	ldr	r3, [r3, #20]
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	2000      	movs	r0, #0
 80092d6:	9000      	str	r0, [sp, #0]
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f7ff fb31 	bl	8008940 <USB_WritePacket>
  }

  return HAL_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3728      	adds	r7, #40	@ 0x28
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	1ff80000 	.word	0x1ff80000

080092ec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80092fe:	695b      	ldr	r3, [r3, #20]
 8009300:	b29b      	uxth	r3, r3
}
 8009302:	4618      	mov	r0, r3
 8009304:	3714      	adds	r7, #20
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr

0800930e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800930e:	b480      	push	{r7}
 8009310:	b089      	sub	sp, #36	@ 0x24
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	460b      	mov	r3, r1
 8009318:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800931e:	78fb      	ldrb	r3, [r7, #3]
 8009320:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009322:	2300      	movs	r3, #0
 8009324:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	015a      	lsls	r2, r3, #5
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	4413      	add	r3, r2
 800932e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	0c9b      	lsrs	r3, r3, #18
 8009336:	f003 0303 	and.w	r3, r3, #3
 800933a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	015a      	lsls	r2, r3, #5
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	4413      	add	r3, r2
 8009344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	0fdb      	lsrs	r3, r3, #31
 800934c:	f003 0301 	and.w	r3, r3, #1
 8009350:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	f003 0320 	and.w	r3, r3, #32
 800935a:	2b20      	cmp	r3, #32
 800935c:	d104      	bne.n	8009368 <USB_HC_Halt+0x5a>
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d101      	bne.n	8009368 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009364:	2300      	movs	r3, #0
 8009366:	e0c8      	b.n	80094fa <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d002      	beq.n	8009374 <USB_HC_Halt+0x66>
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	2b02      	cmp	r3, #2
 8009372:	d163      	bne.n	800943c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	015a      	lsls	r2, r3, #5
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	4413      	add	r3, r2
 800937c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	69ba      	ldr	r2, [r7, #24]
 8009384:	0151      	lsls	r1, r2, #5
 8009386:	69fa      	ldr	r2, [r7, #28]
 8009388:	440a      	add	r2, r1
 800938a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800938e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009392:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	f003 0320 	and.w	r3, r3, #32
 800939c:	2b00      	cmp	r3, #0
 800939e:	f040 80ab 	bne.w	80094f8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d133      	bne.n	8009416 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	015a      	lsls	r2, r3, #5
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	4413      	add	r3, r2
 80093b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	69ba      	ldr	r2, [r7, #24]
 80093be:	0151      	lsls	r1, r2, #5
 80093c0:	69fa      	ldr	r2, [r7, #28]
 80093c2:	440a      	add	r2, r1
 80093c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80093cc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	015a      	lsls	r2, r3, #5
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	4413      	add	r3, r2
 80093d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	69ba      	ldr	r2, [r7, #24]
 80093de:	0151      	lsls	r1, r2, #5
 80093e0:	69fa      	ldr	r2, [r7, #28]
 80093e2:	440a      	add	r2, r1
 80093e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80093ec:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	3301      	adds	r3, #1
 80093f2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80093fa:	d81d      	bhi.n	8009438 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	015a      	lsls	r2, r3, #5
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	4413      	add	r3, r2
 8009404:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800940e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009412:	d0ec      	beq.n	80093ee <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009414:	e070      	b.n	80094f8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009416:	69bb      	ldr	r3, [r7, #24]
 8009418:	015a      	lsls	r2, r3, #5
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	4413      	add	r3, r2
 800941e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	69ba      	ldr	r2, [r7, #24]
 8009426:	0151      	lsls	r1, r2, #5
 8009428:	69fa      	ldr	r2, [r7, #28]
 800942a:	440a      	add	r2, r1
 800942c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009430:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009434:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009436:	e05f      	b.n	80094f8 <USB_HC_Halt+0x1ea>
            break;
 8009438:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800943a:	e05d      	b.n	80094f8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	015a      	lsls	r2, r3, #5
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	4413      	add	r3, r2
 8009444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	69ba      	ldr	r2, [r7, #24]
 800944c:	0151      	lsls	r1, r2, #5
 800944e:	69fa      	ldr	r2, [r7, #28]
 8009450:	440a      	add	r2, r1
 8009452:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009456:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800945a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009468:	2b00      	cmp	r3, #0
 800946a:	d133      	bne.n	80094d4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	015a      	lsls	r2, r3, #5
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	4413      	add	r3, r2
 8009474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	69ba      	ldr	r2, [r7, #24]
 800947c:	0151      	lsls	r1, r2, #5
 800947e:	69fa      	ldr	r2, [r7, #28]
 8009480:	440a      	add	r2, r1
 8009482:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009486:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800948a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	015a      	lsls	r2, r3, #5
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	4413      	add	r3, r2
 8009494:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	69ba      	ldr	r2, [r7, #24]
 800949c:	0151      	lsls	r1, r2, #5
 800949e:	69fa      	ldr	r2, [r7, #28]
 80094a0:	440a      	add	r2, r1
 80094a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80094a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80094aa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	3301      	adds	r3, #1
 80094b0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80094b8:	d81d      	bhi.n	80094f6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	015a      	lsls	r2, r3, #5
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	4413      	add	r3, r2
 80094c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094d0:	d0ec      	beq.n	80094ac <USB_HC_Halt+0x19e>
 80094d2:	e011      	b.n	80094f8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	015a      	lsls	r2, r3, #5
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	4413      	add	r3, r2
 80094dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	69ba      	ldr	r2, [r7, #24]
 80094e4:	0151      	lsls	r1, r2, #5
 80094e6:	69fa      	ldr	r2, [r7, #28]
 80094e8:	440a      	add	r2, r1
 80094ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80094ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80094f2:	6013      	str	r3, [r2, #0]
 80094f4:	e000      	b.n	80094f8 <USB_HC_Halt+0x1ea>
          break;
 80094f6:	bf00      	nop
    }
  }

  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3724      	adds	r7, #36	@ 0x24
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr
	...

08009508 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009508:	b480      	push	{r7}
 800950a:	b087      	sub	sp, #28
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	460b      	mov	r3, r1
 8009512:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009518:	78fb      	ldrb	r3, [r7, #3]
 800951a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800951c:	2301      	movs	r3, #1
 800951e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	04da      	lsls	r2, r3, #19
 8009524:	4b15      	ldr	r3, [pc, #84]	@ (800957c <USB_DoPing+0x74>)
 8009526:	4013      	ands	r3, r2
 8009528:	693a      	ldr	r2, [r7, #16]
 800952a:	0151      	lsls	r1, r2, #5
 800952c:	697a      	ldr	r2, [r7, #20]
 800952e:	440a      	add	r2, r1
 8009530:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009534:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009538:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	015a      	lsls	r2, r3, #5
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	4413      	add	r3, r2
 8009542:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009550:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009558:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	015a      	lsls	r2, r3, #5
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	4413      	add	r3, r2
 8009562:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009566:	461a      	mov	r2, r3
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	371c      	adds	r7, #28
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	1ff80000 	.word	0x1ff80000

08009580 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b088      	sub	sp, #32
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009590:	2300      	movs	r3, #0
 8009592:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f7ff f911 	bl	80087bc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800959a:	2110      	movs	r1, #16
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7ff f96b 	bl	8008878 <USB_FlushTxFifo>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d001      	beq.n	80095ac <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f7ff f997 	bl	80088e0 <USB_FlushRxFifo>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80095bc:	2300      	movs	r3, #0
 80095be:	61bb      	str	r3, [r7, #24]
 80095c0:	e01f      	b.n	8009602 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	015a      	lsls	r2, r3, #5
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	4413      	add	r3, r2
 80095ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80095d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80095e0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80095e8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	015a      	lsls	r2, r3, #5
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	4413      	add	r3, r2
 80095f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095f6:	461a      	mov	r2, r3
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80095fc:	69bb      	ldr	r3, [r7, #24]
 80095fe:	3301      	adds	r3, #1
 8009600:	61bb      	str	r3, [r7, #24]
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	2b0f      	cmp	r3, #15
 8009606:	d9dc      	bls.n	80095c2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009608:	2300      	movs	r3, #0
 800960a:	61bb      	str	r3, [r7, #24]
 800960c:	e034      	b.n	8009678 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	015a      	lsls	r2, r3, #5
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	4413      	add	r3, r2
 8009616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009624:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800962c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009634:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	015a      	lsls	r2, r3, #5
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	4413      	add	r3, r2
 800963e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009642:	461a      	mov	r2, r3
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	3301      	adds	r3, #1
 800964c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009654:	d80c      	bhi.n	8009670 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	015a      	lsls	r2, r3, #5
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	4413      	add	r3, r2
 800965e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009668:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800966c:	d0ec      	beq.n	8009648 <USB_StopHost+0xc8>
 800966e:	e000      	b.n	8009672 <USB_StopHost+0xf2>
        break;
 8009670:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	3301      	adds	r3, #1
 8009676:	61bb      	str	r3, [r7, #24]
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	2b0f      	cmp	r3, #15
 800967c:	d9c7      	bls.n	800960e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009684:	461a      	mov	r2, r3
 8009686:	f04f 33ff 	mov.w	r3, #4294967295
 800968a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f04f 32ff 	mov.w	r2, #4294967295
 8009692:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f7ff f880 	bl	800879a <USB_EnableGlobalInt>

  return ret;
 800969a:	7ffb      	ldrb	r3, [r7, #31]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3720      	adds	r7, #32
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80096a4:	b590      	push	{r4, r7, lr}
 80096a6:	b089      	sub	sp, #36	@ 0x24
 80096a8:	af04      	add	r7, sp, #16
 80096aa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80096ac:	2301      	movs	r3, #1
 80096ae:	2202      	movs	r2, #2
 80096b0:	2102      	movs	r1, #2
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fcb2 	bl	800a01c <USBH_FindInterface>
 80096b8:	4603      	mov	r3, r0
 80096ba:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80096bc:	7bfb      	ldrb	r3, [r7, #15]
 80096be:	2bff      	cmp	r3, #255	@ 0xff
 80096c0:	d002      	beq.n	80096c8 <USBH_CDC_InterfaceInit+0x24>
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d901      	bls.n	80096cc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80096c8:	2302      	movs	r3, #2
 80096ca:	e13d      	b.n	8009948 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
 80096ce:	4619      	mov	r1, r3
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 fc87 	bl	8009fe4 <USBH_SelectInterface>
 80096d6:	4603      	mov	r3, r0
 80096d8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80096da:	7bbb      	ldrb	r3, [r7, #14]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d001      	beq.n	80096e4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80096e0:	2302      	movs	r3, #2
 80096e2:	e131      	b.n	8009948 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80096ea:	2050      	movs	r0, #80	@ 0x50
 80096ec:	f006 ffee 	bl	80106cc <malloc>
 80096f0:	4603      	mov	r3, r0
 80096f2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80096fa:	69db      	ldr	r3, [r3, #28]
 80096fc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d101      	bne.n	8009708 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009704:	2302      	movs	r3, #2
 8009706:	e11f      	b.n	8009948 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009708:	2250      	movs	r2, #80	@ 0x50
 800970a:	2100      	movs	r1, #0
 800970c:	68b8      	ldr	r0, [r7, #8]
 800970e:	f008 f856 	bl	80117be <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009712:	7bfb      	ldrb	r3, [r7, #15]
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	211a      	movs	r1, #26
 8009718:	fb01 f303 	mul.w	r3, r1, r3
 800971c:	4413      	add	r3, r2
 800971e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	b25b      	sxtb	r3, r3
 8009726:	2b00      	cmp	r3, #0
 8009728:	da15      	bge.n	8009756 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800972a:	7bfb      	ldrb	r3, [r7, #15]
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	211a      	movs	r1, #26
 8009730:	fb01 f303 	mul.w	r3, r1, r3
 8009734:	4413      	add	r3, r2
 8009736:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800973a:	781a      	ldrb	r2, [r3, #0]
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009740:	7bfb      	ldrb	r3, [r7, #15]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	211a      	movs	r1, #26
 8009746:	fb01 f303 	mul.w	r3, r1, r3
 800974a:	4413      	add	r3, r2
 800974c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009750:	881a      	ldrh	r2, [r3, #0]
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	785b      	ldrb	r3, [r3, #1]
 800975a:	4619      	mov	r1, r3
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f002 f976 	bl	800ba4e <USBH_AllocPipe>
 8009762:	4603      	mov	r3, r0
 8009764:	461a      	mov	r2, r3
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	7819      	ldrb	r1, [r3, #0]
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	7858      	ldrb	r0, [r3, #1]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800977e:	68ba      	ldr	r2, [r7, #8]
 8009780:	8952      	ldrh	r2, [r2, #10]
 8009782:	9202      	str	r2, [sp, #8]
 8009784:	2203      	movs	r2, #3
 8009786:	9201      	str	r2, [sp, #4]
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	4623      	mov	r3, r4
 800978c:	4602      	mov	r2, r0
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f002 f92e 	bl	800b9f0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	2200      	movs	r2, #0
 800979a:	4619      	mov	r1, r3
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f006 ff09 	bl	80105b4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80097a2:	2300      	movs	r3, #0
 80097a4:	2200      	movs	r2, #0
 80097a6:	210a      	movs	r1, #10
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 fc37 	bl	800a01c <USBH_FindInterface>
 80097ae:	4603      	mov	r3, r0
 80097b0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80097b2:	7bfb      	ldrb	r3, [r7, #15]
 80097b4:	2bff      	cmp	r3, #255	@ 0xff
 80097b6:	d002      	beq.n	80097be <USBH_CDC_InterfaceInit+0x11a>
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d901      	bls.n	80097c2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80097be:	2302      	movs	r3, #2
 80097c0:	e0c2      	b.n	8009948 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80097c2:	7bfb      	ldrb	r3, [r7, #15]
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	211a      	movs	r1, #26
 80097c8:	fb01 f303 	mul.w	r3, r1, r3
 80097cc:	4413      	add	r3, r2
 80097ce:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	b25b      	sxtb	r3, r3
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	da16      	bge.n	8009808 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80097da:	7bfb      	ldrb	r3, [r7, #15]
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	211a      	movs	r1, #26
 80097e0:	fb01 f303 	mul.w	r3, r1, r3
 80097e4:	4413      	add	r3, r2
 80097e6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80097ea:	781a      	ldrb	r2, [r3, #0]
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	211a      	movs	r1, #26
 80097f6:	fb01 f303 	mul.w	r3, r1, r3
 80097fa:	4413      	add	r3, r2
 80097fc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009800:	881a      	ldrh	r2, [r3, #0]
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	835a      	strh	r2, [r3, #26]
 8009806:	e015      	b.n	8009834 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009808:	7bfb      	ldrb	r3, [r7, #15]
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	211a      	movs	r1, #26
 800980e:	fb01 f303 	mul.w	r3, r1, r3
 8009812:	4413      	add	r3, r2
 8009814:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009818:	781a      	ldrb	r2, [r3, #0]
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800981e:	7bfb      	ldrb	r3, [r7, #15]
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	211a      	movs	r1, #26
 8009824:	fb01 f303 	mul.w	r3, r1, r3
 8009828:	4413      	add	r3, r2
 800982a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800982e:	881a      	ldrh	r2, [r3, #0]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009834:	7bfb      	ldrb	r3, [r7, #15]
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	211a      	movs	r1, #26
 800983a:	fb01 f303 	mul.w	r3, r1, r3
 800983e:	4413      	add	r3, r2
 8009840:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	b25b      	sxtb	r3, r3
 8009848:	2b00      	cmp	r3, #0
 800984a:	da16      	bge.n	800987a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800984c:	7bfb      	ldrb	r3, [r7, #15]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	211a      	movs	r1, #26
 8009852:	fb01 f303 	mul.w	r3, r1, r3
 8009856:	4413      	add	r3, r2
 8009858:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800985c:	781a      	ldrb	r2, [r3, #0]
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009862:	7bfb      	ldrb	r3, [r7, #15]
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	211a      	movs	r1, #26
 8009868:	fb01 f303 	mul.w	r3, r1, r3
 800986c:	4413      	add	r3, r2
 800986e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009872:	881a      	ldrh	r2, [r3, #0]
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	835a      	strh	r2, [r3, #26]
 8009878:	e015      	b.n	80098a6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800987a:	7bfb      	ldrb	r3, [r7, #15]
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	211a      	movs	r1, #26
 8009880:	fb01 f303 	mul.w	r3, r1, r3
 8009884:	4413      	add	r3, r2
 8009886:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800988a:	781a      	ldrb	r2, [r3, #0]
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009890:	7bfb      	ldrb	r3, [r7, #15]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	211a      	movs	r1, #26
 8009896:	fb01 f303 	mul.w	r3, r1, r3
 800989a:	4413      	add	r3, r2
 800989c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80098a0:	881a      	ldrh	r2, [r3, #0]
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	7b9b      	ldrb	r3, [r3, #14]
 80098aa:	4619      	mov	r1, r3
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f002 f8ce 	bl	800ba4e <USBH_AllocPipe>
 80098b2:	4603      	mov	r3, r0
 80098b4:	461a      	mov	r2, r3
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	7bdb      	ldrb	r3, [r3, #15]
 80098be:	4619      	mov	r1, r3
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f002 f8c4 	bl	800ba4e <USBH_AllocPipe>
 80098c6:	4603      	mov	r3, r0
 80098c8:	461a      	mov	r2, r3
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	7b59      	ldrb	r1, [r3, #13]
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	7b98      	ldrb	r0, [r3, #14]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	8b12      	ldrh	r2, [r2, #24]
 80098e6:	9202      	str	r2, [sp, #8]
 80098e8:	2202      	movs	r2, #2
 80098ea:	9201      	str	r2, [sp, #4]
 80098ec:	9300      	str	r3, [sp, #0]
 80098ee:	4623      	mov	r3, r4
 80098f0:	4602      	mov	r2, r0
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f002 f87c 	bl	800b9f0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	7b19      	ldrb	r1, [r3, #12]
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	7bd8      	ldrb	r0, [r3, #15]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800990c:	68ba      	ldr	r2, [r7, #8]
 800990e:	8b52      	ldrh	r2, [r2, #26]
 8009910:	9202      	str	r2, [sp, #8]
 8009912:	2202      	movs	r2, #2
 8009914:	9201      	str	r2, [sp, #4]
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	4623      	mov	r3, r4
 800991a:	4602      	mov	r2, r0
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f002 f867 	bl	800b9f0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	2200      	movs	r2, #0
 8009926:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	7b5b      	ldrb	r3, [r3, #13]
 800992e:	2200      	movs	r2, #0
 8009930:	4619      	mov	r1, r3
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f006 fe3e 	bl	80105b4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	7b1b      	ldrb	r3, [r3, #12]
 800993c:	2200      	movs	r2, #0
 800993e:	4619      	mov	r1, r3
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f006 fe37 	bl	80105b4 <USBH_LL_SetToggle>

  return USBH_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3714      	adds	r7, #20
 800994c:	46bd      	mov	sp, r7
 800994e:	bd90      	pop	{r4, r7, pc}

08009950 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800995e:	69db      	ldr	r3, [r3, #28]
 8009960:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00e      	beq.n	8009988 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	4619      	mov	r1, r3
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f002 f85c 	bl	800ba2e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	4619      	mov	r1, r3
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f002 f887 	bl	800ba90 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	7b1b      	ldrb	r3, [r3, #12]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d00e      	beq.n	80099ae <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	7b1b      	ldrb	r3, [r3, #12]
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f002 f849 	bl	800ba2e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	7b1b      	ldrb	r3, [r3, #12]
 80099a0:	4619      	mov	r1, r3
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f002 f874 	bl	800ba90 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2200      	movs	r2, #0
 80099ac:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	7b5b      	ldrb	r3, [r3, #13]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00e      	beq.n	80099d4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	7b5b      	ldrb	r3, [r3, #13]
 80099ba:	4619      	mov	r1, r3
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f002 f836 	bl	800ba2e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	7b5b      	ldrb	r3, [r3, #13]
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f002 f861 	bl	800ba90 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2200      	movs	r2, #0
 80099d2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80099da:	69db      	ldr	r3, [r3, #28]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00b      	beq.n	80099f8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80099e6:	69db      	ldr	r3, [r3, #28]
 80099e8:	4618      	mov	r0, r3
 80099ea:	f006 fe77 	bl	80106dc <free>
    phost->pActiveClass->pData = 0U;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80099f4:	2200      	movs	r2, #0
 80099f6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b084      	sub	sp, #16
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009a10:	69db      	ldr	r3, [r3, #28]
 8009a12:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	3340      	adds	r3, #64	@ 0x40
 8009a18:	4619      	mov	r1, r3
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f8b1 	bl	8009b82 <GetLineCoding>
 8009a20:	4603      	mov	r3, r0
 8009a22:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009a24:	7afb      	ldrb	r3, [r7, #11]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d105      	bne.n	8009a36 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009a30:	2102      	movs	r1, #2
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009a36:	7afb      	ldrb	r3, [r7, #11]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009a56:	69db      	ldr	r3, [r3, #28]
 8009a58:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009a60:	2b04      	cmp	r3, #4
 8009a62:	d877      	bhi.n	8009b54 <USBH_CDC_Process+0x114>
 8009a64:	a201      	add	r2, pc, #4	@ (adr r2, 8009a6c <USBH_CDC_Process+0x2c>)
 8009a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a6a:	bf00      	nop
 8009a6c:	08009a81 	.word	0x08009a81
 8009a70:	08009a87 	.word	0x08009a87
 8009a74:	08009ab7 	.word	0x08009ab7
 8009a78:	08009b2b 	.word	0x08009b2b
 8009a7c:	08009b39 	.word	0x08009b39
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009a80:	2300      	movs	r3, #0
 8009a82:	73fb      	strb	r3, [r7, #15]
      break;
 8009a84:	e06d      	b.n	8009b62 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 f897 	bl	8009bc0 <SetLineCoding>
 8009a92:	4603      	mov	r3, r0
 8009a94:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009a96:	7bbb      	ldrb	r3, [r7, #14]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d104      	bne.n	8009aa6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	2202      	movs	r2, #2
 8009aa0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009aa4:	e058      	b.n	8009b58 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009aa6:	7bbb      	ldrb	r3, [r7, #14]
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d055      	beq.n	8009b58 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	2204      	movs	r2, #4
 8009ab0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009ab4:	e050      	b.n	8009b58 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	3340      	adds	r3, #64	@ 0x40
 8009aba:	4619      	mov	r1, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 f860 	bl	8009b82 <GetLineCoding>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009ac6:	7bbb      	ldrb	r3, [r7, #14]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d126      	bne.n	8009b1a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ade:	791b      	ldrb	r3, [r3, #4]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d13b      	bne.n	8009b5c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009aee:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d133      	bne.n	8009b5c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009afe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d12b      	bne.n	8009b5c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b0c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d124      	bne.n	8009b5c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f982 	bl	8009e1c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009b18:	e020      	b.n	8009b5c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009b1a:	7bbb      	ldrb	r3, [r7, #14]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d01d      	beq.n	8009b5c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	2204      	movs	r2, #4
 8009b24:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009b28:	e018      	b.n	8009b5c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 f867 	bl	8009bfe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 f8f6 	bl	8009d22 <CDC_ProcessReception>
      break;
 8009b36:	e014      	b.n	8009b62 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009b38:	2100      	movs	r1, #0
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f001 f951 	bl	800ade2 <USBH_ClrFeature>
 8009b40:	4603      	mov	r3, r0
 8009b42:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009b44:	7bbb      	ldrb	r3, [r7, #14]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d10a      	bne.n	8009b60 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009b52:	e005      	b.n	8009b60 <USBH_CDC_Process+0x120>

    default:
      break;
 8009b54:	bf00      	nop
 8009b56:	e004      	b.n	8009b62 <USBH_CDC_Process+0x122>
      break;
 8009b58:	bf00      	nop
 8009b5a:	e002      	b.n	8009b62 <USBH_CDC_Process+0x122>
      break;
 8009b5c:	bf00      	nop
 8009b5e:	e000      	b.n	8009b62 <USBH_CDC_Process+0x122>
      break;
 8009b60:	bf00      	nop

  }

  return status;
 8009b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	370c      	adds	r7, #12
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr

08009b82 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b082      	sub	sp, #8
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	22a1      	movs	r2, #161	@ 0xa1
 8009b90:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2221      	movs	r2, #33	@ 0x21
 8009b96:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2207      	movs	r2, #7
 8009ba8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	2207      	movs	r2, #7
 8009bae:	4619      	mov	r1, r3
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f001 fbdc 	bl	800b36e <USBH_CtlReq>
 8009bb6:	4603      	mov	r3, r0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3708      	adds	r7, #8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2221      	movs	r2, #33	@ 0x21
 8009bce:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2220      	movs	r2, #32
 8009bd4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2207      	movs	r2, #7
 8009be6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	2207      	movs	r2, #7
 8009bec:	4619      	mov	r1, r3
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f001 fbbd 	bl	800b36e <USBH_CtlReq>
 8009bf4:	4603      	mov	r3, r0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3708      	adds	r7, #8
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b086      	sub	sp, #24
 8009c02:	af02      	add	r7, sp, #8
 8009c04:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c0c:	69db      	ldr	r3, [r3, #28]
 8009c0e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009c10:	2300      	movs	r3, #0
 8009c12:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d002      	beq.n	8009c24 <CDC_ProcessTransmission+0x26>
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d023      	beq.n	8009c6a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009c22:	e07a      	b.n	8009d1a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	8b12      	ldrh	r2, [r2, #24]
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d90b      	bls.n	8009c48 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	69d9      	ldr	r1, [r3, #28]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	8b1a      	ldrh	r2, [r3, #24]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	7b5b      	ldrb	r3, [r3, #13]
 8009c3c:	2001      	movs	r0, #1
 8009c3e:	9000      	str	r0, [sp, #0]
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f001 fe92 	bl	800b96a <USBH_BulkSendData>
 8009c46:	e00b      	b.n	8009c60 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009c50:	b29a      	uxth	r2, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	7b5b      	ldrb	r3, [r3, #13]
 8009c56:	2001      	movs	r0, #1
 8009c58:	9000      	str	r0, [sp, #0]
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f001 fe85 	bl	800b96a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2202      	movs	r2, #2
 8009c64:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009c68:	e057      	b.n	8009d1a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	7b5b      	ldrb	r3, [r3, #13]
 8009c6e:	4619      	mov	r1, r3
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f006 fc75 	bl	8010560 <USBH_LL_GetURBState>
 8009c76:	4603      	mov	r3, r0
 8009c78:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009c7a:	7afb      	ldrb	r3, [r7, #11]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d136      	bne.n	8009cee <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	8b12      	ldrh	r2, [r2, #24]
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d90e      	bls.n	8009caa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	8b12      	ldrh	r2, [r2, #24]
 8009c94:	1a9a      	subs	r2, r3, r2
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	69db      	ldr	r3, [r3, #28]
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	8b12      	ldrh	r2, [r2, #24]
 8009ca2:	441a      	add	r2, r3
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	61da      	str	r2, [r3, #28]
 8009ca8:	e002      	b.n	8009cb0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d004      	beq.n	8009cc2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8009cc0:	e006      	b.n	8009cd0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f892 	bl	8009df4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2204      	movs	r2, #4
 8009cd4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f002 f900 	bl	800beec <osMessageQueuePut>
      break;
 8009cec:	e014      	b.n	8009d18 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8009cee:	7afb      	ldrb	r3, [r7, #11]
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	d111      	bne.n	8009d18 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2204      	movs	r2, #4
 8009d00:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009d10:	2300      	movs	r3, #0
 8009d12:	2200      	movs	r2, #0
 8009d14:	f002 f8ea 	bl	800beec <osMessageQueuePut>
      break;
 8009d18:	bf00      	nop
  }
}
 8009d1a:	bf00      	nop
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b086      	sub	sp, #24
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d30:	69db      	ldr	r3, [r3, #28]
 8009d32:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009d34:	2300      	movs	r3, #0
 8009d36:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009d3e:	2b03      	cmp	r3, #3
 8009d40:	d002      	beq.n	8009d48 <CDC_ProcessReception+0x26>
 8009d42:	2b04      	cmp	r3, #4
 8009d44:	d00e      	beq.n	8009d64 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009d46:	e051      	b.n	8009dec <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	6a19      	ldr	r1, [r3, #32]
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	8b5a      	ldrh	r2, [r3, #26]
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	7b1b      	ldrb	r3, [r3, #12]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f001 fe2d 	bl	800b9b4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	2204      	movs	r2, #4
 8009d5e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009d62:	e043      	b.n	8009dec <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	7b1b      	ldrb	r3, [r3, #12]
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f006 fbf8 	bl	8010560 <USBH_LL_GetURBState>
 8009d70:	4603      	mov	r3, r0
 8009d72:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009d74:	7cfb      	ldrb	r3, [r7, #19]
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d137      	bne.n	8009dea <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	7b1b      	ldrb	r3, [r3, #12]
 8009d7e:	4619      	mov	r1, r3
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f006 fb5b 	bl	801043c <USBH_LL_GetLastXferSize>
 8009d86:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d016      	beq.n	8009dc0 <CDC_ProcessReception+0x9e>
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	8b5b      	ldrh	r3, [r3, #26]
 8009d96:	461a      	mov	r2, r3
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d910      	bls.n	8009dc0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	1ad2      	subs	r2, r2, r3
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	6a1a      	ldr	r2, [r3, #32]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	441a      	add	r2, r3
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	2203      	movs	r2, #3
 8009dba:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8009dbe:	e006      	b.n	8009dce <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 f81d 	bl	8009e08 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2204      	movs	r2, #4
 8009dd2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009de2:	2300      	movs	r3, #0
 8009de4:	2200      	movs	r2, #0
 8009de6:	f002 f881 	bl	800beec <osMessageQueuePut>
      break;
 8009dea:	bf00      	nop
  }
}
 8009dec:	bf00      	nop
 8009dee:	3718      	adds	r7, #24
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009e10:	bf00      	nop
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009e24:	bf00      	nop
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d101      	bne.n	8009e48 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009e44:	2302      	movs	r3, #2
 8009e46:	e044      	b.n	8009ed2 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	79fa      	ldrb	r2, [r7, #7]
 8009e4c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f000 f841 	bl	8009ee8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d003      	beq.n	8009e94 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8009e94:	2200      	movs	r2, #0
 8009e96:	2104      	movs	r1, #4
 8009e98:	2010      	movs	r0, #16
 8009e9a:	f001 ffb4 	bl	800be06 <osMessageQueueNew>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8009ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8009edc <USBH_Init+0xac>)
 8009ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8009ee0 <USBH_Init+0xb0>)
 8009eaa:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8009eac:	4b0b      	ldr	r3, [pc, #44]	@ (8009edc <USBH_Init+0xac>)
 8009eae:	2280      	movs	r2, #128	@ 0x80
 8009eb0:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8009eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8009edc <USBH_Init+0xac>)
 8009eb4:	2218      	movs	r2, #24
 8009eb6:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8009eb8:	4a08      	ldr	r2, [pc, #32]	@ (8009edc <USBH_Init+0xac>)
 8009eba:	68f9      	ldr	r1, [r7, #12]
 8009ebc:	4809      	ldr	r0, [pc, #36]	@ (8009ee4 <USBH_Init+0xb4>)
 8009ebe:	f001 fef5 	bl	800bcac <osThreadNew>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f006 fa02 	bl	80102d4 <USBH_LL_Init>

  return USBH_OK;
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	2000069c 	.word	0x2000069c
 8009ee0:	080142ec 	.word	0x080142ec
 8009ee4:	0800ab59 	.word	0x0800ab59

08009ee8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	60fb      	str	r3, [r7, #12]
 8009ef8:	e009      	b.n	8009f0e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	33e0      	adds	r3, #224	@ 0xe0
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	4413      	add	r3, r2
 8009f04:	2200      	movs	r2, #0
 8009f06:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	60fb      	str	r3, [r7, #12]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2b0f      	cmp	r3, #15
 8009f12:	d9f2      	bls.n	8009efa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009f14:	2300      	movs	r3, #0
 8009f16:	60fb      	str	r3, [r7, #12]
 8009f18:	e009      	b.n	8009f2e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	4413      	add	r3, r2
 8009f20:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009f24:	2200      	movs	r2, #0
 8009f26:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	60fb      	str	r3, [r7, #12]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f34:	d3f1      	bcc.n	8009f1a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2240      	movs	r2, #64	@ 0x40
 8009f5a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  return USBH_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3714      	adds	r7, #20
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d016      	beq.n	8009fd2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10e      	bne.n	8009fcc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009fb4:	1c59      	adds	r1, r3, #1
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	33de      	adds	r3, #222	@ 0xde
 8009fc0:	6839      	ldr	r1, [r7, #0]
 8009fc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	73fb      	strb	r3, [r7, #15]
 8009fca:	e004      	b.n	8009fd6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009fcc:	2302      	movs	r3, #2
 8009fce:	73fb      	strb	r3, [r7, #15]
 8009fd0:	e001      	b.n	8009fd6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009fd2:	2302      	movs	r3, #2
 8009fd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3714      	adds	r7, #20
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	460b      	mov	r3, r1
 8009fee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009ffa:	78fa      	ldrb	r2, [r7, #3]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d204      	bcs.n	800a00a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	78fa      	ldrb	r2, [r7, #3]
 800a004:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800a008:	e001      	b.n	800a00e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a00a:	2302      	movs	r3, #2
 800a00c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a00e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a010:	4618      	mov	r0, r3
 800a012:	3714      	adds	r7, #20
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b087      	sub	sp, #28
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	4608      	mov	r0, r1
 800a026:	4611      	mov	r1, r2
 800a028:	461a      	mov	r2, r3
 800a02a:	4603      	mov	r3, r0
 800a02c:	70fb      	strb	r3, [r7, #3]
 800a02e:	460b      	mov	r3, r1
 800a030:	70bb      	strb	r3, [r7, #2]
 800a032:	4613      	mov	r3, r2
 800a034:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a036:	2300      	movs	r3, #0
 800a038:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a03a:	2300      	movs	r3, #0
 800a03c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a044:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a046:	e025      	b.n	800a094 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a048:	7dfb      	ldrb	r3, [r7, #23]
 800a04a:	221a      	movs	r2, #26
 800a04c:	fb02 f303 	mul.w	r3, r2, r3
 800a050:	3308      	adds	r3, #8
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	4413      	add	r3, r2
 800a056:	3302      	adds	r3, #2
 800a058:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	795b      	ldrb	r3, [r3, #5]
 800a05e:	78fa      	ldrb	r2, [r7, #3]
 800a060:	429a      	cmp	r2, r3
 800a062:	d002      	beq.n	800a06a <USBH_FindInterface+0x4e>
 800a064:	78fb      	ldrb	r3, [r7, #3]
 800a066:	2bff      	cmp	r3, #255	@ 0xff
 800a068:	d111      	bne.n	800a08e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a06e:	78ba      	ldrb	r2, [r7, #2]
 800a070:	429a      	cmp	r2, r3
 800a072:	d002      	beq.n	800a07a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a074:	78bb      	ldrb	r3, [r7, #2]
 800a076:	2bff      	cmp	r3, #255	@ 0xff
 800a078:	d109      	bne.n	800a08e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a07e:	787a      	ldrb	r2, [r7, #1]
 800a080:	429a      	cmp	r2, r3
 800a082:	d002      	beq.n	800a08a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a084:	787b      	ldrb	r3, [r7, #1]
 800a086:	2bff      	cmp	r3, #255	@ 0xff
 800a088:	d101      	bne.n	800a08e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a08a:	7dfb      	ldrb	r3, [r7, #23]
 800a08c:	e006      	b.n	800a09c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a08e:	7dfb      	ldrb	r3, [r7, #23]
 800a090:	3301      	adds	r3, #1
 800a092:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a094:	7dfb      	ldrb	r3, [r7, #23]
 800a096:	2b01      	cmp	r3, #1
 800a098:	d9d6      	bls.n	800a048 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a09a:	23ff      	movs	r3, #255	@ 0xff
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	371c      	adds	r7, #28
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f006 f94b 	bl	801034c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a0b6:	2101      	movs	r1, #1
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f006 fa64 	bl	8010586 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a0be:	2300      	movs	r3, #0
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b088      	sub	sp, #32
 800a0cc:	af04      	add	r7, sp, #16
 800a0ce:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d102      	bne.n	800a0ea <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2203      	movs	r2, #3
 800a0e8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	2b0b      	cmp	r3, #11
 800a0f2:	f200 8244 	bhi.w	800a57e <USBH_Process+0x4b6>
 800a0f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a0fc <USBH_Process+0x34>)
 800a0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fc:	0800a12d 	.word	0x0800a12d
 800a100:	0800a17b 	.word	0x0800a17b
 800a104:	0800a1ff 	.word	0x0800a1ff
 800a108:	0800a4fd 	.word	0x0800a4fd
 800a10c:	0800a57f 	.word	0x0800a57f
 800a110:	0800a2bb 	.word	0x0800a2bb
 800a114:	0800a487 	.word	0x0800a487
 800a118:	0800a30d 	.word	0x0800a30d
 800a11c:	0800a349 	.word	0x0800a349
 800a120:	0800a381 	.word	0x0800a381
 800a124:	0800a3df 	.word	0x0800a3df
 800a128:	0800a4e5 	.word	0x0800a4e5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b00      	cmp	r3, #0
 800a136:	f000 8224 	beq.w	800a582 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a140:	20c8      	movs	r0, #200	@ 0xc8
 800a142:	f006 fa67 	bl	8010614 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f006 f95d 	bl	8010406 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a170:	2300      	movs	r3, #0
 800a172:	2200      	movs	r2, #0
 800a174:	f001 feba 	bl	800beec <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a178:	e203      	b.n	800a582 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a180:	2b01      	cmp	r3, #1
 800a182:	d107      	bne.n	800a194 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2202      	movs	r2, #2
 800a190:	701a      	strb	r2, [r3, #0]
 800a192:	e025      	b.n	800a1e0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a19a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a19e:	d914      	bls.n	800a1ca <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	b2da      	uxtb	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a1b6:	2b03      	cmp	r3, #3
 800a1b8:	d903      	bls.n	800a1c2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	220d      	movs	r2, #13
 800a1be:	701a      	strb	r2, [r3, #0]
 800a1c0:	e00e      	b.n	800a1e0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	701a      	strb	r2, [r3, #0]
 800a1c8:	e00a      	b.n	800a1e0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a1d0:	f103 020a 	add.w	r2, r3, #10
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800a1da:	200a      	movs	r0, #10
 800a1dc:	f006 fa1a 	bl	8010614 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f001 fe78 	bl	800beec <osMessageQueuePut>
#endif
#endif
      break;
 800a1fc:	e1c8      	b.n	800a590 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a204:	2b00      	cmp	r3, #0
 800a206:	d005      	beq.n	800a214 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a20e:	2104      	movs	r1, #4
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a214:	2064      	movs	r0, #100	@ 0x64
 800a216:	f006 f9fd 	bl	8010614 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f006 f8cc 	bl	80103b8 <USBH_LL_GetSpeed>
 800a220:	4603      	mov	r3, r0
 800a222:	461a      	mov	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2205      	movs	r2, #5
 800a22e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a230:	2100      	movs	r1, #0
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f001 fc0b 	bl	800ba4e <USBH_AllocPipe>
 800a238:	4603      	mov	r3, r0
 800a23a:	461a      	mov	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a240:	2180      	movs	r1, #128	@ 0x80
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f001 fc03 	bl	800ba4e <USBH_AllocPipe>
 800a248:	4603      	mov	r3, r0
 800a24a:	461a      	mov	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	7919      	ldrb	r1, [r3, #4]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a264:	9202      	str	r2, [sp, #8]
 800a266:	2200      	movs	r2, #0
 800a268:	9201      	str	r2, [sp, #4]
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	4603      	mov	r3, r0
 800a26e:	2280      	movs	r2, #128	@ 0x80
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f001 fbbd 	bl	800b9f0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	7959      	ldrb	r1, [r3, #5]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a28a:	9202      	str	r2, [sp, #8]
 800a28c:	2200      	movs	r2, #0
 800a28e:	9201      	str	r2, [sp, #4]
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	4603      	mov	r3, r0
 800a294:	2200      	movs	r2, #0
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f001 fbaa 	bl	800b9f0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f001 fe1a 	bl	800beec <osMessageQueuePut>
#endif
#endif
      break;
 800a2b8:	e16a      	b.n	800a590 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 f96e 	bl	800a59c <USBH_HandleEnum>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a2c4:	7bbb      	ldrb	r3, [r7, #14]
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f040 815c 	bne.w	800a586 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d103      	bne.n	800a2e8 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2208      	movs	r2, #8
 800a2e4:	701a      	strb	r2, [r3, #0]
 800a2e6:	e002      	b.n	800a2ee <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2207      	movs	r2, #7
 800a2ec:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2205      	movs	r2, #5
 800a2f2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a302:	2300      	movs	r3, #0
 800a304:	2200      	movs	r2, #0
 800a306:	f001 fdf1 	bl	800beec <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a30a:	e13c      	b.n	800a586 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a312:	2b00      	cmp	r3, #0
 800a314:	f000 8139 	beq.w	800a58a <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a31e:	2101      	movs	r1, #1
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2208      	movs	r2, #8
 800a328:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2205      	movs	r2, #5
 800a32e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a33e:	2300      	movs	r3, #0
 800a340:	2200      	movs	r2, #0
 800a342:	f001 fdd3 	bl	800beec <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800a346:	e120      	b.n	800a58a <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a34e:	4619      	mov	r1, r3
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 fcff 	bl	800ad54 <USBH_SetCfg>
 800a356:	4603      	mov	r3, r0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d102      	bne.n	800a362 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2209      	movs	r2, #9
 800a360:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2201      	movs	r2, #1
 800a366:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a376:	2300      	movs	r3, #0
 800a378:	2200      	movs	r2, #0
 800a37a:	f001 fdb7 	bl	800beec <osMessageQueuePut>
#endif
#endif
      break;
 800a37e:	e107      	b.n	800a590 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a386:	f003 0320 	and.w	r3, r3, #32
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d015      	beq.n	800a3ba <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a38e:	2101      	movs	r1, #1
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 fd02 	bl	800ad9a <USBH_SetFeature>
 800a396:	4603      	mov	r3, r0
 800a398:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a39a:	7bbb      	ldrb	r3, [r7, #14]
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d103      	bne.n	800a3aa <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	220a      	movs	r2, #10
 800a3a6:	701a      	strb	r2, [r3, #0]
 800a3a8:	e00a      	b.n	800a3c0 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800a3aa:	7bbb      	ldrb	r3, [r7, #14]
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	2b03      	cmp	r3, #3
 800a3b0:	d106      	bne.n	800a3c0 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	220a      	movs	r2, #10
 800a3b6:	701a      	strb	r2, [r3, #0]
 800a3b8:	e002      	b.n	800a3c0 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	220a      	movs	r2, #10
 800a3be:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f001 fd88 	bl	800beec <osMessageQueuePut>
#endif
#endif
      break;
 800a3dc:	e0d8      	b.n	800a590 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d03f      	beq.n	800a468 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	73fb      	strb	r3, [r7, #15]
 800a3f4:	e016      	b.n	800a424 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a3f6:	7bfa      	ldrb	r2, [r7, #15]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	32de      	adds	r2, #222	@ 0xde
 800a3fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a400:	791a      	ldrb	r2, [r3, #4]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a408:	429a      	cmp	r2, r3
 800a40a:	d108      	bne.n	800a41e <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a40c:	7bfa      	ldrb	r2, [r7, #15]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	32de      	adds	r2, #222	@ 0xde
 800a412:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a41c:	e005      	b.n	800a42a <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a41e:	7bfb      	ldrb	r3, [r7, #15]
 800a420:	3301      	adds	r3, #1
 800a422:	73fb      	strb	r3, [r7, #15]
 800a424:	7bfb      	ldrb	r3, [r7, #15]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d0e5      	beq.n	800a3f6 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a430:	2b00      	cmp	r3, #0
 800a432:	d016      	beq.n	800a462 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	4798      	blx	r3
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d109      	bne.n	800a45a <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2206      	movs	r2, #6
 800a44a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a452:	2103      	movs	r1, #3
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	4798      	blx	r3
 800a458:	e006      	b.n	800a468 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	220d      	movs	r2, #13
 800a45e:	701a      	strb	r2, [r3, #0]
 800a460:	e002      	b.n	800a468 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	220d      	movs	r2, #13
 800a466:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2205      	movs	r2, #5
 800a46c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a47c:	2300      	movs	r3, #0
 800a47e:	2200      	movs	r2, #0
 800a480:	f001 fd34 	bl	800beec <osMessageQueuePut>
#endif
#endif
      break;
 800a484:	e084      	b.n	800a590 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d017      	beq.n	800a4c0 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a496:	691b      	ldr	r3, [r3, #16]
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	4798      	blx	r3
 800a49c:	4603      	mov	r3, r0
 800a49e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a4a0:	7bbb      	ldrb	r3, [r7, #14]
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d103      	bne.n	800a4b0 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	220b      	movs	r2, #11
 800a4ac:	701a      	strb	r2, [r3, #0]
 800a4ae:	e00a      	b.n	800a4c6 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800a4b0:	7bbb      	ldrb	r3, [r7, #14]
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d106      	bne.n	800a4c6 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	220d      	movs	r2, #13
 800a4bc:	701a      	strb	r2, [r3, #0]
 800a4be:	e002      	b.n	800a4c6 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	220d      	movs	r2, #13
 800a4c4:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2205      	movs	r2, #5
 800a4ca:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a4da:	2300      	movs	r3, #0
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f001 fd05 	bl	800beec <osMessageQueuePut>
#endif
#endif
      break;
 800a4e2:	e055      	b.n	800a590 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d04f      	beq.n	800a58e <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a4f4:	695b      	ldr	r3, [r3, #20]
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	4798      	blx	r3
      }
      break;
 800a4fa:	e048      	b.n	800a58e <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f7ff fcef 	bl	8009ee8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a510:	2b00      	cmp	r3, #0
 800a512:	d009      	beq.n	800a528 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d005      	beq.n	800a53e <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a538:	2105      	movs	r1, #5
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a544:	b2db      	uxtb	r3, r3
 800a546:	2b01      	cmp	r3, #1
 800a548:	d107      	bne.n	800a55a <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f7ff fda8 	bl	800a0a8 <USBH_Start>
 800a558:	e002      	b.n	800a560 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f005 fef6 	bl	801034c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a574:	2300      	movs	r3, #0
 800a576:	2200      	movs	r2, #0
 800a578:	f001 fcb8 	bl	800beec <osMessageQueuePut>
#endif
#endif
      break;
 800a57c:	e008      	b.n	800a590 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a57e:	bf00      	nop
 800a580:	e006      	b.n	800a590 <USBH_Process+0x4c8>
      break;
 800a582:	bf00      	nop
 800a584:	e004      	b.n	800a590 <USBH_Process+0x4c8>
      break;
 800a586:	bf00      	nop
 800a588:	e002      	b.n	800a590 <USBH_Process+0x4c8>
    break;
 800a58a:	bf00      	nop
 800a58c:	e000      	b.n	800a590 <USBH_Process+0x4c8>
      break;
 800a58e:	bf00      	nop
  }
  return USBH_OK;
 800a590:	2300      	movs	r3, #0
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop

0800a59c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b088      	sub	sp, #32
 800a5a0:	af04      	add	r7, sp, #16
 800a5a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	785b      	ldrb	r3, [r3, #1]
 800a5b0:	2b07      	cmp	r3, #7
 800a5b2:	f200 8204 	bhi.w	800a9be <USBH_HandleEnum+0x422>
 800a5b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5bc <USBH_HandleEnum+0x20>)
 800a5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5bc:	0800a5dd 	.word	0x0800a5dd
 800a5c0:	0800a697 	.word	0x0800a697
 800a5c4:	0800a701 	.word	0x0800a701
 800a5c8:	0800a78b 	.word	0x0800a78b
 800a5cc:	0800a7f5 	.word	0x0800a7f5
 800a5d0:	0800a865 	.word	0x0800a865
 800a5d4:	0800a901 	.word	0x0800a901
 800a5d8:	0800a97f 	.word	0x0800a97f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a5dc:	2108      	movs	r1, #8
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 fae8 	bl	800abb4 <USBH_Get_DevDesc>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a5e8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d12e      	bne.n	800a64c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	7919      	ldrb	r1, [r3, #4]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a612:	9202      	str	r2, [sp, #8]
 800a614:	2200      	movs	r2, #0
 800a616:	9201      	str	r2, [sp, #4]
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	4603      	mov	r3, r0
 800a61c:	2280      	movs	r2, #128	@ 0x80
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f001 f9e6 	bl	800b9f0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	7959      	ldrb	r1, [r3, #5]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a638:	9202      	str	r2, [sp, #8]
 800a63a:	2200      	movs	r2, #0
 800a63c:	9201      	str	r2, [sp, #4]
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	4603      	mov	r3, r0
 800a642:	2200      	movs	r2, #0
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f001 f9d3 	bl	800b9f0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a64a:	e1ba      	b.n	800a9c2 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a64c:	7bbb      	ldrb	r3, [r7, #14]
 800a64e:	2b03      	cmp	r3, #3
 800a650:	f040 81b7 	bne.w	800a9c2 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a65a:	3301      	adds	r3, #1
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a66a:	2b03      	cmp	r3, #3
 800a66c:	d903      	bls.n	800a676 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	220d      	movs	r2, #13
 800a672:	701a      	strb	r2, [r3, #0]
      break;
 800a674:	e1a5      	b.n	800a9c2 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	795b      	ldrb	r3, [r3, #5]
 800a67a:	4619      	mov	r1, r3
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f001 fa07 	bl	800ba90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	791b      	ldrb	r3, [r3, #4]
 800a686:	4619      	mov	r1, r3
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f001 fa01 	bl	800ba90 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	701a      	strb	r2, [r3, #0]
      break;
 800a694:	e195      	b.n	800a9c2 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a696:	2112      	movs	r1, #18
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 fa8b 	bl	800abb4 <USBH_Get_DevDesc>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a6a2:	7bbb      	ldrb	r3, [r7, #14]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d103      	bne.n	800a6b0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2202      	movs	r2, #2
 800a6ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a6ae:	e18a      	b.n	800a9c6 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a6b0:	7bbb      	ldrb	r3, [r7, #14]
 800a6b2:	2b03      	cmp	r3, #3
 800a6b4:	f040 8187 	bne.w	800a9c6 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a6be:	3301      	adds	r3, #1
 800a6c0:	b2da      	uxtb	r2, r3
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a6ce:	2b03      	cmp	r3, #3
 800a6d0:	d903      	bls.n	800a6da <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	220d      	movs	r2, #13
 800a6d6:	701a      	strb	r2, [r3, #0]
      break;
 800a6d8:	e175      	b.n	800a9c6 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	795b      	ldrb	r3, [r3, #5]
 800a6de:	4619      	mov	r1, r3
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f001 f9d5 	bl	800ba90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	791b      	ldrb	r3, [r3, #4]
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f001 f9cf 	bl	800ba90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	701a      	strb	r2, [r3, #0]
      break;
 800a6fe:	e162      	b.n	800a9c6 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a700:	2101      	movs	r1, #1
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 fb02 	bl	800ad0c <USBH_SetAddress>
 800a708:	4603      	mov	r3, r0
 800a70a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a70c:	7bbb      	ldrb	r3, [r7, #14]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d130      	bne.n	800a774 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a712:	2002      	movs	r0, #2
 800a714:	f005 ff7e 	bl	8010614 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2203      	movs	r2, #3
 800a724:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	7919      	ldrb	r1, [r3, #4]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a73a:	9202      	str	r2, [sp, #8]
 800a73c:	2200      	movs	r2, #0
 800a73e:	9201      	str	r2, [sp, #4]
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	4603      	mov	r3, r0
 800a744:	2280      	movs	r2, #128	@ 0x80
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f001 f952 	bl	800b9f0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	7959      	ldrb	r1, [r3, #5]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a760:	9202      	str	r2, [sp, #8]
 800a762:	2200      	movs	r2, #0
 800a764:	9201      	str	r2, [sp, #4]
 800a766:	9300      	str	r3, [sp, #0]
 800a768:	4603      	mov	r3, r0
 800a76a:	2200      	movs	r2, #0
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f001 f93f 	bl	800b9f0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a772:	e12a      	b.n	800a9ca <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a774:	7bbb      	ldrb	r3, [r7, #14]
 800a776:	2b03      	cmp	r3, #3
 800a778:	f040 8127 	bne.w	800a9ca <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	220d      	movs	r2, #13
 800a780:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	705a      	strb	r2, [r3, #1]
      break;
 800a788:	e11f      	b.n	800a9ca <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a78a:	2109      	movs	r1, #9
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 fa39 	bl	800ac04 <USBH_Get_CfgDesc>
 800a792:	4603      	mov	r3, r0
 800a794:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a796:	7bbb      	ldrb	r3, [r7, #14]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d103      	bne.n	800a7a4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2204      	movs	r2, #4
 800a7a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a7a2:	e114      	b.n	800a9ce <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a7a4:	7bbb      	ldrb	r3, [r7, #14]
 800a7a6:	2b03      	cmp	r3, #3
 800a7a8:	f040 8111 	bne.w	800a9ce <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	b2da      	uxtb	r2, r3
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a7c2:	2b03      	cmp	r3, #3
 800a7c4:	d903      	bls.n	800a7ce <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	220d      	movs	r2, #13
 800a7ca:	701a      	strb	r2, [r3, #0]
      break;
 800a7cc:	e0ff      	b.n	800a9ce <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	795b      	ldrb	r3, [r3, #5]
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f001 f95b 	bl	800ba90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	791b      	ldrb	r3, [r3, #4]
 800a7de:	4619      	mov	r1, r3
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f001 f955 	bl	800ba90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	701a      	strb	r2, [r3, #0]
      break;
 800a7f2:	e0ec      	b.n	800a9ce <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 fa01 	bl	800ac04 <USBH_Get_CfgDesc>
 800a802:	4603      	mov	r3, r0
 800a804:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a806:	7bbb      	ldrb	r3, [r7, #14]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d103      	bne.n	800a814 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2205      	movs	r2, #5
 800a810:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a812:	e0de      	b.n	800a9d2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a814:	7bbb      	ldrb	r3, [r7, #14]
 800a816:	2b03      	cmp	r3, #3
 800a818:	f040 80db 	bne.w	800a9d2 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a822:	3301      	adds	r3, #1
 800a824:	b2da      	uxtb	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a832:	2b03      	cmp	r3, #3
 800a834:	d903      	bls.n	800a83e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	220d      	movs	r2, #13
 800a83a:	701a      	strb	r2, [r3, #0]
      break;
 800a83c:	e0c9      	b.n	800a9d2 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	795b      	ldrb	r3, [r3, #5]
 800a842:	4619      	mov	r1, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f001 f923 	bl	800ba90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	791b      	ldrb	r3, [r3, #4]
 800a84e:	4619      	mov	r1, r3
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f001 f91d 	bl	800ba90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	701a      	strb	r2, [r3, #0]
      break;
 800a862:	e0b6      	b.n	800a9d2 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d036      	beq.n	800a8dc <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a87a:	23ff      	movs	r3, #255	@ 0xff
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 f9e5 	bl	800ac4c <USBH_Get_StringDesc>
 800a882:	4603      	mov	r3, r0
 800a884:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a886:	7bbb      	ldrb	r3, [r7, #14]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d111      	bne.n	800a8b0 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2206      	movs	r2, #6
 800a890:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2205      	movs	r2, #5
 800a896:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f001 fb1f 	bl	800beec <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a8ae:	e092      	b.n	800a9d6 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8b0:	7bbb      	ldrb	r3, [r7, #14]
 800a8b2:	2b03      	cmp	r3, #3
 800a8b4:	f040 808f 	bne.w	800a9d6 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2206      	movs	r2, #6
 800a8bc:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2205      	movs	r2, #5
 800a8c2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f001 fb09 	bl	800beec <osMessageQueuePut>
      break;
 800a8da:	e07c      	b.n	800a9d6 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2206      	movs	r2, #6
 800a8e0:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2205      	movs	r2, #5
 800a8e6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f001 faf7 	bl	800beec <osMessageQueuePut>
      break;
 800a8fe:	e06a      	b.n	800a9d6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a906:	2b00      	cmp	r3, #0
 800a908:	d027      	beq.n	800a95a <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a916:	23ff      	movs	r3, #255	@ 0xff
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 f997 	bl	800ac4c <USBH_Get_StringDesc>
 800a91e:	4603      	mov	r3, r0
 800a920:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a922:	7bbb      	ldrb	r3, [r7, #14]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d103      	bne.n	800a930 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2207      	movs	r2, #7
 800a92c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a92e:	e054      	b.n	800a9da <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a930:	7bbb      	ldrb	r3, [r7, #14]
 800a932:	2b03      	cmp	r3, #3
 800a934:	d151      	bne.n	800a9da <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2207      	movs	r2, #7
 800a93a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2205      	movs	r2, #5
 800a940:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a950:	2300      	movs	r3, #0
 800a952:	2200      	movs	r2, #0
 800a954:	f001 faca 	bl	800beec <osMessageQueuePut>
      break;
 800a958:	e03f      	b.n	800a9da <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2207      	movs	r2, #7
 800a95e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2205      	movs	r2, #5
 800a964:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a974:	2300      	movs	r3, #0
 800a976:	2200      	movs	r2, #0
 800a978:	f001 fab8 	bl	800beec <osMessageQueuePut>
      break;
 800a97c:	e02d      	b.n	800a9da <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a984:	2b00      	cmp	r3, #0
 800a986:	d017      	beq.n	800a9b8 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a994:	23ff      	movs	r3, #255	@ 0xff
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 f958 	bl	800ac4c <USBH_Get_StringDesc>
 800a99c:	4603      	mov	r3, r0
 800a99e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a9a0:	7bbb      	ldrb	r3, [r7, #14]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d102      	bne.n	800a9ac <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a9aa:	e018      	b.n	800a9de <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a9ac:	7bbb      	ldrb	r3, [r7, #14]
 800a9ae:	2b03      	cmp	r3, #3
 800a9b0:	d115      	bne.n	800a9de <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a9b6:	e012      	b.n	800a9de <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	73fb      	strb	r3, [r7, #15]
      break;
 800a9bc:	e00f      	b.n	800a9de <USBH_HandleEnum+0x442>

    default:
      break;
 800a9be:	bf00      	nop
 800a9c0:	e00e      	b.n	800a9e0 <USBH_HandleEnum+0x444>
      break;
 800a9c2:	bf00      	nop
 800a9c4:	e00c      	b.n	800a9e0 <USBH_HandleEnum+0x444>
      break;
 800a9c6:	bf00      	nop
 800a9c8:	e00a      	b.n	800a9e0 <USBH_HandleEnum+0x444>
      break;
 800a9ca:	bf00      	nop
 800a9cc:	e008      	b.n	800a9e0 <USBH_HandleEnum+0x444>
      break;
 800a9ce:	bf00      	nop
 800a9d0:	e006      	b.n	800a9e0 <USBH_HandleEnum+0x444>
      break;
 800a9d2:	bf00      	nop
 800a9d4:	e004      	b.n	800a9e0 <USBH_HandleEnum+0x444>
      break;
 800a9d6:	bf00      	nop
 800a9d8:	e002      	b.n	800a9e0 <USBH_HandleEnum+0x444>
      break;
 800a9da:	bf00      	nop
 800a9dc:	e000      	b.n	800a9e0 <USBH_HandleEnum+0x444>
      break;
 800a9de:	bf00      	nop
  }
  return Status;
 800a9e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop

0800a9ec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	683a      	ldr	r2, [r7, #0]
 800a9fa:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a9fe:	bf00      	nop
 800aa00:	370c      	adds	r7, #12
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr

0800aa0a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b082      	sub	sp, #8
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800aa18:	1c5a      	adds	r2, r3, #1
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 f804 	bl	800aa2e <USBH_HandleSof>
}
 800aa26:	bf00      	nop
 800aa28:	3708      	adds	r7, #8
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b082      	sub	sp, #8
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	2b0b      	cmp	r3, #11
 800aa3e:	d10a      	bne.n	800aa56 <USBH_HandleSof+0x28>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d005      	beq.n	800aa56 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa50:	699b      	ldr	r3, [r3, #24]
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	4798      	blx	r3
  }
}
 800aa56:	bf00      	nop
 800aa58:	3708      	adds	r7, #8
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b082      	sub	sp, #8
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2201      	movs	r2, #1
 800aa6a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2201      	movs	r2, #1
 800aa72:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800aa82:	2300      	movs	r3, #0
 800aa84:	2200      	movs	r2, #0
 800aa86:	f001 fa31 	bl	800beec <osMessageQueuePut>
#endif
#endif

  return;
 800aa8a:	bf00      	nop
}
 800aa8c:	3708      	adds	r7, #8
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800aa92:	b480      	push	{r7}
 800aa94:	b083      	sub	sp, #12
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800aaa2:	bf00      	nop
}
 800aaa4:	370c      	adds	r7, #12
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr

0800aaae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b082      	sub	sp, #8
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2201      	movs	r2, #1
 800aaba:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2201      	movs	r2, #1
 800aad2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800aae2:	2300      	movs	r3, #0
 800aae4:	2200      	movs	r2, #0
 800aae6:	f001 fa01 	bl	800beec <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3708      	adds	r7, #8
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2201      	movs	r2, #1
 800ab00:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f005 fc34 	bl	8010382 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	791b      	ldrb	r3, [r3, #4]
 800ab1e:	4619      	mov	r1, r3
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 ffb5 	bl	800ba90 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	795b      	ldrb	r3, [r3, #5]
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 ffaf 	bl	800ba90 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2201      	movs	r2, #1
 800ab36:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ab46:	2300      	movs	r3, #0
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f001 f9cf 	bl	800beec <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800ab6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab70:	2200      	movs	r2, #0
 800ab72:	f001 fa1b 	bl	800bfac <osMessageQueueGet>
 800ab76:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d1f0      	bne.n	800ab60 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f7ff faa2 	bl	800a0c8 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800ab84:	e7ec      	b.n	800ab60 <USBH_Process_OS+0x8>

0800ab86 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b082      	sub	sp, #8
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2201      	movs	r2, #1
 800ab92:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800aba2:	2300      	movs	r3, #0
 800aba4:	2200      	movs	r2, #0
 800aba6:	f001 f9a1 	bl	800beec <osMessageQueuePut>
#endif

  return USBH_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b086      	sub	sp, #24
 800abb8:	af02      	add	r7, sp, #8
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	460b      	mov	r3, r1
 800abbe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800abc6:	78fb      	ldrb	r3, [r7, #3]
 800abc8:	b29b      	uxth	r3, r3
 800abca:	9300      	str	r3, [sp, #0]
 800abcc:	4613      	mov	r3, r2
 800abce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800abd2:	2100      	movs	r1, #0
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 f864 	bl	800aca2 <USBH_GetDescriptor>
 800abda:	4603      	mov	r3, r0
 800abdc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800abde:	7bfb      	ldrb	r3, [r7, #15]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d10a      	bne.n	800abfa <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f203 3026 	addw	r0, r3, #806	@ 0x326
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800abf0:	78fa      	ldrb	r2, [r7, #3]
 800abf2:	b292      	uxth	r2, r2
 800abf4:	4619      	mov	r1, r3
 800abf6:	f000 f919 	bl	800ae2c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800abfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3710      	adds	r7, #16
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b086      	sub	sp, #24
 800ac08:	af02      	add	r7, sp, #8
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	331c      	adds	r3, #28
 800ac14:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ac16:	887b      	ldrh	r3, [r7, #2]
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ac20:	2100      	movs	r1, #0
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 f83d 	bl	800aca2 <USBH_GetDescriptor>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800ac2c:	7bfb      	ldrb	r3, [r7, #15]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d107      	bne.n	800ac42 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800ac32:	887b      	ldrh	r3, [r7, #2]
 800ac34:	461a      	mov	r2, r3
 800ac36:	68b9      	ldr	r1, [r7, #8]
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 f985 	bl	800af48 <USBH_ParseCfgDesc>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ac42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3710      	adds	r7, #16
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b088      	sub	sp, #32
 800ac50:	af02      	add	r7, sp, #8
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	607a      	str	r2, [r7, #4]
 800ac56:	461a      	mov	r2, r3
 800ac58:	460b      	mov	r3, r1
 800ac5a:	72fb      	strb	r3, [r7, #11]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800ac60:	7afb      	ldrb	r3, [r7, #11]
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800ac68:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ac70:	893b      	ldrh	r3, [r7, #8]
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	460b      	mov	r3, r1
 800ac76:	2100      	movs	r1, #0
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f000 f812 	bl	800aca2 <USBH_GetDescriptor>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ac82:	7dfb      	ldrb	r3, [r7, #23]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d107      	bne.n	800ac98 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ac8e:	893a      	ldrh	r2, [r7, #8]
 800ac90:	6879      	ldr	r1, [r7, #4]
 800ac92:	4618      	mov	r0, r3
 800ac94:	f000 fb1e 	bl	800b2d4 <USBH_ParseStringDesc>
  }

  return status;
 800ac98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3718      	adds	r7, #24
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b084      	sub	sp, #16
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	60f8      	str	r0, [r7, #12]
 800acaa:	607b      	str	r3, [r7, #4]
 800acac:	460b      	mov	r3, r1
 800acae:	72fb      	strb	r3, [r7, #11]
 800acb0:	4613      	mov	r3, r2
 800acb2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	789b      	ldrb	r3, [r3, #2]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d11c      	bne.n	800acf6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800acbc:	7afb      	ldrb	r3, [r7, #11]
 800acbe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800acc2:	b2da      	uxtb	r2, r3
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2206      	movs	r2, #6
 800accc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	893a      	ldrh	r2, [r7, #8]
 800acd2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800acd4:	893b      	ldrh	r3, [r7, #8]
 800acd6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800acda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800acde:	d104      	bne.n	800acea <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f240 4209 	movw	r2, #1033	@ 0x409
 800ace6:	829a      	strh	r2, [r3, #20]
 800ace8:	e002      	b.n	800acf0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2200      	movs	r2, #0
 800acee:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	8b3a      	ldrh	r2, [r7, #24]
 800acf4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800acf6:	8b3b      	ldrh	r3, [r7, #24]
 800acf8:	461a      	mov	r2, r3
 800acfa:	6879      	ldr	r1, [r7, #4]
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f000 fb36 	bl	800b36e <USBH_CtlReq>
 800ad02:	4603      	mov	r3, r0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3710      	adds	r7, #16
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	460b      	mov	r3, r1
 800ad16:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	789b      	ldrb	r3, [r3, #2]
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d10f      	bne.n	800ad40 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2205      	movs	r2, #5
 800ad2a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ad2c:	78fb      	ldrb	r3, [r7, #3]
 800ad2e:	b29a      	uxth	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ad40:	2200      	movs	r2, #0
 800ad42:	2100      	movs	r1, #0
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 fb12 	bl	800b36e <USBH_CtlReq>
 800ad4a:	4603      	mov	r3, r0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3708      	adds	r7, #8
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	789b      	ldrb	r3, [r3, #2]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d10e      	bne.n	800ad86 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2209      	movs	r2, #9
 800ad72:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	887a      	ldrh	r2, [r7, #2]
 800ad78:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ad86:	2200      	movs	r2, #0
 800ad88:	2100      	movs	r1, #0
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 faef 	bl	800b36e <USBH_CtlReq>
 800ad90:	4603      	mov	r3, r0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b082      	sub	sp, #8
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
 800ada2:	460b      	mov	r3, r1
 800ada4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	789b      	ldrb	r3, [r3, #2]
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d10f      	bne.n	800adce <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2203      	movs	r2, #3
 800adb8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800adba:	78fb      	ldrb	r3, [r7, #3]
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800adce:	2200      	movs	r2, #0
 800add0:	2100      	movs	r1, #0
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 facb 	bl	800b36e <USBH_CtlReq>
 800add8:	4603      	mov	r3, r0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3708      	adds	r7, #8
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b082      	sub	sp, #8
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	460b      	mov	r3, r1
 800adec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	789b      	ldrb	r3, [r3, #2]
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d10f      	bne.n	800ae16 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2202      	movs	r2, #2
 800adfa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2201      	movs	r2, #1
 800ae00:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ae08:	78fb      	ldrb	r3, [r7, #3]
 800ae0a:	b29a      	uxth	r2, r3
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800ae16:	2200      	movs	r2, #0
 800ae18:	2100      	movs	r1, #0
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 faa7 	bl	800b36e <USBH_CtlReq>
 800ae20:	4603      	mov	r3, r0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3708      	adds	r7, #8
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
	...

0800ae2c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	4613      	mov	r3, r2
 800ae38:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	781a      	ldrb	r2, [r3, #0]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	785a      	ldrb	r2, [r3, #1]
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	3302      	adds	r3, #2
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	461a      	mov	r2, r3
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	3303      	adds	r3, #3
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	021b      	lsls	r3, r3, #8
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	791a      	ldrb	r2, [r3, #4]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	795a      	ldrb	r2, [r3, #5]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	799a      	ldrb	r2, [r3, #6]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	79da      	ldrb	r2, [r3, #7]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	79db      	ldrb	r3, [r3, #7]
 800ae88:	2b20      	cmp	r3, #32
 800ae8a:	dc0f      	bgt.n	800aeac <USBH_ParseDevDesc+0x80>
 800ae8c:	2b08      	cmp	r3, #8
 800ae8e:	db14      	blt.n	800aeba <USBH_ParseDevDesc+0x8e>
 800ae90:	3b08      	subs	r3, #8
 800ae92:	4a2c      	ldr	r2, [pc, #176]	@ (800af44 <USBH_ParseDevDesc+0x118>)
 800ae94:	fa22 f303 	lsr.w	r3, r2, r3
 800ae98:	f003 0301 	and.w	r3, r3, #1
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	bf14      	ite	ne
 800aea0:	2301      	movne	r3, #1
 800aea2:	2300      	moveq	r3, #0
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d102      	bne.n	800aeb0 <USBH_ParseDevDesc+0x84>
 800aeaa:	e006      	b.n	800aeba <USBH_ParseDevDesc+0x8e>
 800aeac:	2b40      	cmp	r3, #64	@ 0x40
 800aeae:	d104      	bne.n	800aeba <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	79da      	ldrb	r2, [r3, #7]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	71da      	strb	r2, [r3, #7]
      break;
 800aeb8:	e003      	b.n	800aec2 <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2240      	movs	r2, #64	@ 0x40
 800aebe:	71da      	strb	r2, [r3, #7]
      break;
 800aec0:	bf00      	nop
  }

  if (length > 8U)
 800aec2:	88fb      	ldrh	r3, [r7, #6]
 800aec4:	2b08      	cmp	r3, #8
 800aec6:	d936      	bls.n	800af36 <USBH_ParseDevDesc+0x10a>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	3308      	adds	r3, #8
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	461a      	mov	r2, r3
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	3309      	adds	r3, #9
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	021b      	lsls	r3, r3, #8
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	4313      	orrs	r3, r2
 800aedc:	b29a      	uxth	r2, r3
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	330a      	adds	r3, #10
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	461a      	mov	r2, r3
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	330b      	adds	r3, #11
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	021b      	lsls	r3, r3, #8
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	4313      	orrs	r3, r2
 800aef6:	b29a      	uxth	r2, r3
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	330c      	adds	r3, #12
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	461a      	mov	r2, r3
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	330d      	adds	r3, #13
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	021b      	lsls	r3, r3, #8
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	4313      	orrs	r3, r2
 800af10:	b29a      	uxth	r2, r3
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	7b9a      	ldrb	r2, [r3, #14]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	7bda      	ldrb	r2, [r3, #15]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	7c1a      	ldrb	r2, [r3, #16]
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	7c5a      	ldrb	r2, [r3, #17]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	745a      	strb	r2, [r3, #17]
  }
}
 800af36:	bf00      	nop
 800af38:	3714      	adds	r7, #20
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr
 800af42:	bf00      	nop
 800af44:	01000101 	.word	0x01000101

0800af48 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b08c      	sub	sp, #48	@ 0x30
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	4613      	mov	r3, r2
 800af54:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800af5c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800af5e:	2300      	movs	r3, #0
 800af60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800af68:	2300      	movs	r3, #0
 800af6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800af6e:	2300      	movs	r3, #0
 800af70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	781a      	ldrb	r2, [r3, #0]
 800af7c:	6a3b      	ldr	r3, [r7, #32]
 800af7e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	785a      	ldrb	r2, [r3, #1]
 800af84:	6a3b      	ldr	r3, [r7, #32]
 800af86:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	3302      	adds	r3, #2
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	461a      	mov	r2, r3
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	3303      	adds	r3, #3
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	021b      	lsls	r3, r3, #8
 800af98:	b29b      	uxth	r3, r3
 800af9a:	4313      	orrs	r3, r2
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afa2:	bf28      	it	cs
 800afa4:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800afa8:	b29a      	uxth	r2, r3
 800afaa:	6a3b      	ldr	r3, [r7, #32]
 800afac:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	791a      	ldrb	r2, [r3, #4]
 800afb2:	6a3b      	ldr	r3, [r7, #32]
 800afb4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	795a      	ldrb	r2, [r3, #5]
 800afba:	6a3b      	ldr	r3, [r7, #32]
 800afbc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	799a      	ldrb	r2, [r3, #6]
 800afc2:	6a3b      	ldr	r3, [r7, #32]
 800afc4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	79da      	ldrb	r2, [r3, #7]
 800afca:	6a3b      	ldr	r3, [r7, #32]
 800afcc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	7a1a      	ldrb	r2, [r3, #8]
 800afd2:	6a3b      	ldr	r3, [r7, #32]
 800afd4:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800afd6:	6a3b      	ldr	r3, [r7, #32]
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	2b09      	cmp	r3, #9
 800afdc:	d002      	beq.n	800afe4 <USBH_ParseCfgDesc+0x9c>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800afde:	6a3b      	ldr	r3, [r7, #32]
 800afe0:	2209      	movs	r2, #9
 800afe2:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800afe4:	88fb      	ldrh	r3, [r7, #6]
 800afe6:	2b09      	cmp	r3, #9
 800afe8:	f240 809d 	bls.w	800b126 <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 800afec:	2309      	movs	r3, #9
 800afee:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800aff0:	2300      	movs	r3, #0
 800aff2:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aff4:	e081      	b.n	800b0fa <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aff6:	f107 0316 	add.w	r3, r7, #22
 800affa:	4619      	mov	r1, r3
 800affc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800affe:	f000 f99c 	bl	800b33a <USBH_GetNextDesc>
 800b002:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b006:	785b      	ldrb	r3, [r3, #1]
 800b008:	2b04      	cmp	r3, #4
 800b00a:	d176      	bne.n	800b0fa <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b00c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	2b09      	cmp	r3, #9
 800b012:	d002      	beq.n	800b01a <USBH_ParseCfgDesc+0xd2>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b016:	2209      	movs	r2, #9
 800b018:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b01a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b01e:	221a      	movs	r2, #26
 800b020:	fb02 f303 	mul.w	r3, r2, r3
 800b024:	3308      	adds	r3, #8
 800b026:	6a3a      	ldr	r2, [r7, #32]
 800b028:	4413      	add	r3, r2
 800b02a:	3302      	adds	r3, #2
 800b02c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b02e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b030:	69f8      	ldr	r0, [r7, #28]
 800b032:	f000 f87e 	bl	800b132 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b036:	2300      	movs	r3, #0
 800b038:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b03c:	2300      	movs	r3, #0
 800b03e:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b040:	e043      	b.n	800b0ca <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b042:	f107 0316 	add.w	r3, r7, #22
 800b046:	4619      	mov	r1, r3
 800b048:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b04a:	f000 f976 	bl	800b33a <USBH_GetNextDesc>
 800b04e:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b052:	785b      	ldrb	r3, [r3, #1]
 800b054:	2b05      	cmp	r3, #5
 800b056:	d138      	bne.n	800b0ca <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	795b      	ldrb	r3, [r3, #5]
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d10f      	bne.n	800b080 <USBH_ParseCfgDesc+0x138>
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	799b      	ldrb	r3, [r3, #6]
 800b064:	2b02      	cmp	r3, #2
 800b066:	d10b      	bne.n	800b080 <USBH_ParseCfgDesc+0x138>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	79db      	ldrb	r3, [r3, #7]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d10f      	bne.n	800b090 <USBH_ParseCfgDesc+0x148>
 800b070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	2b09      	cmp	r3, #9
 800b076:	d00b      	beq.n	800b090 <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 800b078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b07a:	2209      	movs	r2, #9
 800b07c:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b07e:	e007      	b.n	800b090 <USBH_ParseCfgDesc+0x148>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800b080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	2b07      	cmp	r3, #7
 800b086:	d004      	beq.n	800b092 <USBH_ParseCfgDesc+0x14a>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b08a:	2207      	movs	r2, #7
 800b08c:	701a      	strb	r2, [r3, #0]
 800b08e:	e000      	b.n	800b092 <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b090:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b092:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b096:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b09a:	3201      	adds	r2, #1
 800b09c:	00d2      	lsls	r2, r2, #3
 800b09e:	211a      	movs	r1, #26
 800b0a0:	fb01 f303 	mul.w	r3, r1, r3
 800b0a4:	4413      	add	r3, r2
 800b0a6:	3308      	adds	r3, #8
 800b0a8:	6a3a      	ldr	r2, [r7, #32]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	3304      	adds	r3, #4
 800b0ae:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b0b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b0b2:	69b9      	ldr	r1, [r7, #24]
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f000 f86b 	bl	800b190 <USBH_ParseEPDesc>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800b0c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	791b      	ldrb	r3, [r3, #4]
 800b0ce:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d204      	bcs.n	800b0e0 <USBH_ParseCfgDesc+0x198>
 800b0d6:	6a3b      	ldr	r3, [r7, #32]
 800b0d8:	885a      	ldrh	r2, [r3, #2]
 800b0da:	8afb      	ldrh	r3, [r7, #22]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d8b0      	bhi.n	800b042 <USBH_ParseCfgDesc+0xfa>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	791b      	ldrb	r3, [r3, #4]
 800b0e4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d201      	bcs.n	800b0f0 <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	e01c      	b.n	800b12a <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 800b0f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b0fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d805      	bhi.n	800b10e <USBH_ParseCfgDesc+0x1c6>
 800b102:	6a3b      	ldr	r3, [r7, #32]
 800b104:	885a      	ldrh	r2, [r3, #2]
 800b106:	8afb      	ldrh	r3, [r7, #22]
 800b108:	429a      	cmp	r2, r3
 800b10a:	f63f af74 	bhi.w	800aff6 <USBH_ParseCfgDesc+0xae>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b10e:	6a3b      	ldr	r3, [r7, #32]
 800b110:	791b      	ldrb	r3, [r3, #4]
 800b112:	2b02      	cmp	r3, #2
 800b114:	bf28      	it	cs
 800b116:	2302      	movcs	r3, #2
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b11e:	429a      	cmp	r2, r3
 800b120:	d201      	bcs.n	800b126 <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 800b122:	2303      	movs	r3, #3
 800b124:	e001      	b.n	800b12a <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 800b126:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3730      	adds	r7, #48	@ 0x30
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}

0800b132 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b132:	b480      	push	{r7}
 800b134:	b083      	sub	sp, #12
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
 800b13a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	781a      	ldrb	r2, [r3, #0]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	785a      	ldrb	r2, [r3, #1]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	789a      	ldrb	r2, [r3, #2]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	78da      	ldrb	r2, [r3, #3]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	791a      	ldrb	r2, [r3, #4]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	795a      	ldrb	r2, [r3, #5]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	799a      	ldrb	r2, [r3, #6]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	79da      	ldrb	r2, [r3, #7]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	7a1a      	ldrb	r2, [r3, #8]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	721a      	strb	r2, [r3, #8]
}
 800b184:	bf00      	nop
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800b190:	b480      	push	{r7}
 800b192:	b087      	sub	sp, #28
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b19c:	2300      	movs	r3, #0
 800b19e:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	781a      	ldrb	r2, [r3, #0]
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	785a      	ldrb	r2, [r3, #1]
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	789a      	ldrb	r2, [r3, #2]
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	78da      	ldrb	r2, [r3, #3]
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	3304      	adds	r3, #4
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	3305      	adds	r3, #5
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	021b      	lsls	r3, r3, #8
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	b29a      	uxth	r2, r3
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	799a      	ldrb	r2, [r3, #6]
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	889b      	ldrh	r3, [r3, #4]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d102      	bne.n	800b1f0 <USBH_ParseEPDesc+0x60>
  {
    status = USBH_NOT_SUPPORTED;
 800b1ea:	2303      	movs	r3, #3
 800b1ec:	75fb      	strb	r3, [r7, #23]
 800b1ee:	e031      	b.n	800b254 <USBH_ParseEPDesc+0xc4>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	889b      	ldrh	r3, [r3, #4]
 800b1f4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b1f8:	f023 0307 	bic.w	r3, r3, #7
 800b1fc:	b29a      	uxth	r2, r3
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	889b      	ldrh	r3, [r3, #4]
 800b206:	b21a      	sxth	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	3304      	adds	r3, #4
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	4619      	mov	r1, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	3305      	adds	r3, #5
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	021b      	lsls	r3, r3, #8
 800b218:	b29b      	uxth	r3, r3
 800b21a:	430b      	orrs	r3, r1
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b222:	2b00      	cmp	r3, #0
 800b224:	d10f      	bne.n	800b246 <USBH_ParseEPDesc+0xb6>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	3304      	adds	r3, #4
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	4619      	mov	r1, r3
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	3305      	adds	r3, #5
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	021b      	lsls	r3, r3, #8
 800b236:	b29b      	uxth	r3, r3
 800b238:	430b      	orrs	r3, r1
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	b21b      	sxth	r3, r3
 800b23e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b242:	b21b      	sxth	r3, r3
 800b244:	e001      	b.n	800b24a <USBH_ParseEPDesc+0xba>
 800b246:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b24a:	4313      	orrs	r3, r2
 800b24c:	b21b      	sxth	r3, r3
 800b24e:	b29a      	uxth	r2, r3
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d116      	bne.n	800b28c <USBH_ParseEPDesc+0xfc>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	78db      	ldrb	r3, [r3, #3]
 800b262:	f003 0303 	and.w	r3, r3, #3
 800b266:	2b01      	cmp	r3, #1
 800b268:	d005      	beq.n	800b276 <USBH_ParseEPDesc+0xe6>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	78db      	ldrb	r3, [r3, #3]
 800b26e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b272:	2b03      	cmp	r3, #3
 800b274:	d127      	bne.n	800b2c6 <USBH_ParseEPDesc+0x136>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	799b      	ldrb	r3, [r3, #6]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d003      	beq.n	800b286 <USBH_ParseEPDesc+0xf6>
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	799b      	ldrb	r3, [r3, #6]
 800b282:	2b10      	cmp	r3, #16
 800b284:	d91f      	bls.n	800b2c6 <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800b286:	2303      	movs	r3, #3
 800b288:	75fb      	strb	r3, [r7, #23]
 800b28a:	e01c      	b.n	800b2c6 <USBH_ParseEPDesc+0x136>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	78db      	ldrb	r3, [r3, #3]
 800b290:	f003 0303 	and.w	r3, r3, #3
 800b294:	2b01      	cmp	r3, #1
 800b296:	d10a      	bne.n	800b2ae <USBH_ParseEPDesc+0x11e>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	799b      	ldrb	r3, [r3, #6]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d003      	beq.n	800b2a8 <USBH_ParseEPDesc+0x118>
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	799b      	ldrb	r3, [r3, #6]
 800b2a4:	2b10      	cmp	r3, #16
 800b2a6:	d90e      	bls.n	800b2c6 <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800b2a8:	2303      	movs	r3, #3
 800b2aa:	75fb      	strb	r3, [r7, #23]
 800b2ac:	e00b      	b.n	800b2c6 <USBH_ParseEPDesc+0x136>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	78db      	ldrb	r3, [r3, #3]
 800b2b2:	f003 0303 	and.w	r3, r3, #3
 800b2b6:	2b03      	cmp	r3, #3
 800b2b8:	d105      	bne.n	800b2c6 <USBH_ParseEPDesc+0x136>
    {
      if (ep_descriptor->bInterval == 0U)
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	799b      	ldrb	r3, [r3, #6]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d101      	bne.n	800b2c6 <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800b2c2:	2303      	movs	r3, #3
 800b2c4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b2c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	371c      	adds	r7, #28
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b087      	sub	sp, #28
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	4613      	mov	r3, r2
 800b2e0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	2b03      	cmp	r3, #3
 800b2ea:	d120      	bne.n	800b32e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	1e9a      	subs	r2, r3, #2
 800b2f2:	88fb      	ldrh	r3, [r7, #6]
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	bf28      	it	cs
 800b2f8:	4613      	movcs	r3, r2
 800b2fa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	3302      	adds	r3, #2
 800b300:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b302:	2300      	movs	r3, #0
 800b304:	82fb      	strh	r3, [r7, #22]
 800b306:	e00b      	b.n	800b320 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b308:	8afb      	ldrh	r3, [r7, #22]
 800b30a:	68fa      	ldr	r2, [r7, #12]
 800b30c:	4413      	add	r3, r2
 800b30e:	781a      	ldrb	r2, [r3, #0]
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	3301      	adds	r3, #1
 800b318:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b31a:	8afb      	ldrh	r3, [r7, #22]
 800b31c:	3302      	adds	r3, #2
 800b31e:	82fb      	strh	r3, [r7, #22]
 800b320:	8afa      	ldrh	r2, [r7, #22]
 800b322:	8abb      	ldrh	r3, [r7, #20]
 800b324:	429a      	cmp	r2, r3
 800b326:	d3ef      	bcc.n	800b308 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	2200      	movs	r2, #0
 800b32c:	701a      	strb	r2, [r3, #0]
  }
}
 800b32e:	bf00      	nop
 800b330:	371c      	adds	r7, #28
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr

0800b33a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b33a:	b480      	push	{r7}
 800b33c:	b085      	sub	sp, #20
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
 800b342:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	881b      	ldrh	r3, [r3, #0]
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	7812      	ldrb	r2, [r2, #0]
 800b34c:	4413      	add	r3, r2
 800b34e:	b29a      	uxth	r2, r3
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	4413      	add	r3, r2
 800b35e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b360:	68fb      	ldr	r3, [r7, #12]
}
 800b362:	4618      	mov	r0, r3
 800b364:	3714      	adds	r7, #20
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr

0800b36e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b36e:	b580      	push	{r7, lr}
 800b370:	b086      	sub	sp, #24
 800b372:	af00      	add	r7, sp, #0
 800b374:	60f8      	str	r0, [r7, #12]
 800b376:	60b9      	str	r1, [r7, #8]
 800b378:	4613      	mov	r3, r2
 800b37a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b37c:	2301      	movs	r3, #1
 800b37e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	789b      	ldrb	r3, [r3, #2]
 800b384:	2b01      	cmp	r3, #1
 800b386:	d002      	beq.n	800b38e <USBH_CtlReq+0x20>
 800b388:	2b02      	cmp	r3, #2
 800b38a:	d01d      	beq.n	800b3c8 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800b38c:	e043      	b.n	800b416 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	68ba      	ldr	r2, [r7, #8]
 800b392:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	88fa      	ldrh	r2, [r7, #6]
 800b398:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2201      	movs	r2, #1
 800b39e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2202      	movs	r2, #2
 800b3a4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2203      	movs	r2, #3
 800b3ae:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b3be:	2300      	movs	r3, #0
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	f000 fd93 	bl	800beec <osMessageQueuePut>
      break;
 800b3c6:	e026      	b.n	800b416 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b3c8:	68f8      	ldr	r0, [r7, #12]
 800b3ca:	f000 f829 	bl	800b420 <USBH_HandleControl>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b3d2:	7dfb      	ldrb	r3, [r7, #23]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d002      	beq.n	800b3de <USBH_CtlReq+0x70>
 800b3d8:	7dfb      	ldrb	r3, [r7, #23]
 800b3da:	2b03      	cmp	r3, #3
 800b3dc:	d106      	bne.n	800b3ec <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	761a      	strb	r2, [r3, #24]
 800b3ea:	e005      	b.n	800b3f8 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b3ec:	7dfb      	ldrb	r3, [r7, #23]
 800b3ee:	2b02      	cmp	r3, #2
 800b3f0:	d102      	bne.n	800b3f8 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2203      	movs	r2, #3
 800b3fc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b40c:	2300      	movs	r3, #0
 800b40e:	2200      	movs	r2, #0
 800b410:	f000 fd6c 	bl	800beec <osMessageQueuePut>
      break;
 800b414:	bf00      	nop
  }
  return status;
 800b416:	7dfb      	ldrb	r3, [r7, #23]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3718      	adds	r7, #24
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b086      	sub	sp, #24
 800b424:	af02      	add	r7, sp, #8
 800b426:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b428:	2301      	movs	r3, #1
 800b42a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b42c:	2300      	movs	r3, #0
 800b42e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	7e1b      	ldrb	r3, [r3, #24]
 800b434:	3b01      	subs	r3, #1
 800b436:	2b0a      	cmp	r3, #10
 800b438:	f200 8229 	bhi.w	800b88e <USBH_HandleControl+0x46e>
 800b43c:	a201      	add	r2, pc, #4	@ (adr r2, 800b444 <USBH_HandleControl+0x24>)
 800b43e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b442:	bf00      	nop
 800b444:	0800b471 	.word	0x0800b471
 800b448:	0800b48b 	.word	0x0800b48b
 800b44c:	0800b52d 	.word	0x0800b52d
 800b450:	0800b553 	.word	0x0800b553
 800b454:	0800b5df 	.word	0x0800b5df
 800b458:	0800b609 	.word	0x0800b609
 800b45c:	0800b6cb 	.word	0x0800b6cb
 800b460:	0800b6ed 	.word	0x0800b6ed
 800b464:	0800b77f 	.word	0x0800b77f
 800b468:	0800b7a5 	.word	0x0800b7a5
 800b46c:	0800b837 	.word	0x0800b837
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f103 0110 	add.w	r1, r3, #16
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	795b      	ldrb	r3, [r3, #5]
 800b47a:	461a      	mov	r2, r3
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 fa17 	bl	800b8b0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2202      	movs	r2, #2
 800b486:	761a      	strb	r2, [r3, #24]
      break;
 800b488:	e20c      	b.n	800b8a4 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	795b      	ldrb	r3, [r3, #5]
 800b48e:	4619      	mov	r1, r3
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f005 f865 	bl	8010560 <USBH_LL_GetURBState>
 800b496:	4603      	mov	r3, r0
 800b498:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b49a:	7bbb      	ldrb	r3, [r7, #14]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d12c      	bne.n	800b4fa <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	7c1b      	ldrb	r3, [r3, #16]
 800b4a4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b4a8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	8adb      	ldrh	r3, [r3, #22]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00a      	beq.n	800b4c8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b4b2:	7b7b      	ldrb	r3, [r7, #13]
 800b4b4:	2b80      	cmp	r3, #128	@ 0x80
 800b4b6:	d103      	bne.n	800b4c0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2203      	movs	r2, #3
 800b4bc:	761a      	strb	r2, [r3, #24]
 800b4be:	e00d      	b.n	800b4dc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2205      	movs	r2, #5
 800b4c4:	761a      	strb	r2, [r3, #24]
 800b4c6:	e009      	b.n	800b4dc <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b4c8:	7b7b      	ldrb	r3, [r7, #13]
 800b4ca:	2b80      	cmp	r3, #128	@ 0x80
 800b4cc:	d103      	bne.n	800b4d6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2209      	movs	r2, #9
 800b4d2:	761a      	strb	r2, [r3, #24]
 800b4d4:	e002      	b.n	800b4dc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2207      	movs	r2, #7
 800b4da:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2203      	movs	r2, #3
 800b4e0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f000 fcfa 	bl	800beec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b4f8:	e1cb      	b.n	800b892 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b4fa:	7bbb      	ldrb	r3, [r7, #14]
 800b4fc:	2b04      	cmp	r3, #4
 800b4fe:	d003      	beq.n	800b508 <USBH_HandleControl+0xe8>
 800b500:	7bbb      	ldrb	r3, [r7, #14]
 800b502:	2b02      	cmp	r3, #2
 800b504:	f040 81c5 	bne.w	800b892 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	220b      	movs	r2, #11
 800b50c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2203      	movs	r2, #3
 800b512:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b522:	2300      	movs	r3, #0
 800b524:	2200      	movs	r2, #0
 800b526:	f000 fce1 	bl	800beec <osMessageQueuePut>
      break;
 800b52a:	e1b2      	b.n	800b892 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b532:	b29a      	uxth	r2, r3
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6899      	ldr	r1, [r3, #8]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	899a      	ldrh	r2, [r3, #12]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	791b      	ldrb	r3, [r3, #4]
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 f9f2 	bl	800b92e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2204      	movs	r2, #4
 800b54e:	761a      	strb	r2, [r3, #24]
      break;
 800b550:	e1a8      	b.n	800b8a4 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	791b      	ldrb	r3, [r3, #4]
 800b556:	4619      	mov	r1, r3
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f005 f801 	bl	8010560 <USBH_LL_GetURBState>
 800b55e:	4603      	mov	r3, r0
 800b560:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b562:	7bbb      	ldrb	r3, [r7, #14]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d110      	bne.n	800b58a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2209      	movs	r2, #9
 800b56c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2203      	movs	r2, #3
 800b572:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b582:	2300      	movs	r3, #0
 800b584:	2200      	movs	r2, #0
 800b586:	f000 fcb1 	bl	800beec <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b58a:	7bbb      	ldrb	r3, [r7, #14]
 800b58c:	2b05      	cmp	r3, #5
 800b58e:	d110      	bne.n	800b5b2 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b590:	2303      	movs	r3, #3
 800b592:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2203      	movs	r2, #3
 800b598:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f000 fc9e 	bl	800beec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b5b0:	e171      	b.n	800b896 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800b5b2:	7bbb      	ldrb	r3, [r7, #14]
 800b5b4:	2b04      	cmp	r3, #4
 800b5b6:	f040 816e 	bne.w	800b896 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	220b      	movs	r2, #11
 800b5be:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2203      	movs	r2, #3
 800b5c4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f000 fc88 	bl	800beec <osMessageQueuePut>
      break;
 800b5dc:	e15b      	b.n	800b896 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6899      	ldr	r1, [r3, #8]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	899a      	ldrh	r2, [r3, #12]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	795b      	ldrb	r3, [r3, #5]
 800b5ea:	2001      	movs	r0, #1
 800b5ec:	9000      	str	r0, [sp, #0]
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 f978 	bl	800b8e4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b5fa:	b29a      	uxth	r2, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2206      	movs	r2, #6
 800b604:	761a      	strb	r2, [r3, #24]
      break;
 800b606:	e14d      	b.n	800b8a4 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	795b      	ldrb	r3, [r3, #5]
 800b60c:	4619      	mov	r1, r3
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f004 ffa6 	bl	8010560 <USBH_LL_GetURBState>
 800b614:	4603      	mov	r3, r0
 800b616:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b618:	7bbb      	ldrb	r3, [r7, #14]
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d111      	bne.n	800b642 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2207      	movs	r2, #7
 800b622:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2203      	movs	r2, #3
 800b628:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b638:	2300      	movs	r3, #0
 800b63a:	2200      	movs	r2, #0
 800b63c:	f000 fc56 	bl	800beec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b640:	e12b      	b.n	800b89a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800b642:	7bbb      	ldrb	r3, [r7, #14]
 800b644:	2b05      	cmp	r3, #5
 800b646:	d113      	bne.n	800b670 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	220c      	movs	r2, #12
 800b64c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b64e:	2303      	movs	r3, #3
 800b650:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2203      	movs	r2, #3
 800b656:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b666:	2300      	movs	r3, #0
 800b668:	2200      	movs	r2, #0
 800b66a:	f000 fc3f 	bl	800beec <osMessageQueuePut>
      break;
 800b66e:	e114      	b.n	800b89a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b670:	7bbb      	ldrb	r3, [r7, #14]
 800b672:	2b02      	cmp	r3, #2
 800b674:	d111      	bne.n	800b69a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2205      	movs	r2, #5
 800b67a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2203      	movs	r2, #3
 800b680:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b690:	2300      	movs	r3, #0
 800b692:	2200      	movs	r2, #0
 800b694:	f000 fc2a 	bl	800beec <osMessageQueuePut>
      break;
 800b698:	e0ff      	b.n	800b89a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800b69a:	7bbb      	ldrb	r3, [r7, #14]
 800b69c:	2b04      	cmp	r3, #4
 800b69e:	f040 80fc 	bne.w	800b89a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	220b      	movs	r2, #11
 800b6a6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b6a8:	2302      	movs	r3, #2
 800b6aa:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2203      	movs	r2, #3
 800b6b0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f000 fc12 	bl	800beec <osMessageQueuePut>
      break;
 800b6c8:	e0e7      	b.n	800b89a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	791b      	ldrb	r3, [r3, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	2100      	movs	r1, #0
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f92b 	bl	800b92e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b6de:	b29a      	uxth	r2, r3
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2208      	movs	r2, #8
 800b6e8:	761a      	strb	r2, [r3, #24]

      break;
 800b6ea:	e0db      	b.n	800b8a4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	791b      	ldrb	r3, [r3, #4]
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f004 ff34 	bl	8010560 <USBH_LL_GetURBState>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b6fc:	7bbb      	ldrb	r3, [r7, #14]
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d113      	bne.n	800b72a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	220d      	movs	r2, #13
 800b706:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b708:	2300      	movs	r3, #0
 800b70a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2203      	movs	r2, #3
 800b710:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b720:	2300      	movs	r3, #0
 800b722:	2200      	movs	r2, #0
 800b724:	f000 fbe2 	bl	800beec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b728:	e0b9      	b.n	800b89e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800b72a:	7bbb      	ldrb	r3, [r7, #14]
 800b72c:	2b04      	cmp	r3, #4
 800b72e:	d111      	bne.n	800b754 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	220b      	movs	r2, #11
 800b734:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2203      	movs	r2, #3
 800b73a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b74a:	2300      	movs	r3, #0
 800b74c:	2200      	movs	r2, #0
 800b74e:	f000 fbcd 	bl	800beec <osMessageQueuePut>
      break;
 800b752:	e0a4      	b.n	800b89e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800b754:	7bbb      	ldrb	r3, [r7, #14]
 800b756:	2b05      	cmp	r3, #5
 800b758:	f040 80a1 	bne.w	800b89e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800b75c:	2303      	movs	r3, #3
 800b75e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2203      	movs	r2, #3
 800b764:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b774:	2300      	movs	r3, #0
 800b776:	2200      	movs	r2, #0
 800b778:	f000 fbb8 	bl	800beec <osMessageQueuePut>
      break;
 800b77c:	e08f      	b.n	800b89e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	795b      	ldrb	r3, [r3, #5]
 800b782:	2201      	movs	r2, #1
 800b784:	9200      	str	r2, [sp, #0]
 800b786:	2200      	movs	r2, #0
 800b788:	2100      	movs	r1, #0
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 f8aa 	bl	800b8e4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b796:	b29a      	uxth	r2, r3
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	220a      	movs	r2, #10
 800b7a0:	761a      	strb	r2, [r3, #24]
      break;
 800b7a2:	e07f      	b.n	800b8a4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	795b      	ldrb	r3, [r3, #5]
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f004 fed8 	bl	8010560 <USBH_LL_GetURBState>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b7b4:	7bbb      	ldrb	r3, [r7, #14]
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d113      	bne.n	800b7e2 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	220d      	movs	r2, #13
 800b7c2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2203      	movs	r2, #3
 800b7c8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b7d8:	2300      	movs	r3, #0
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f000 fb86 	bl	800beec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b7e0:	e05f      	b.n	800b8a2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b7e2:	7bbb      	ldrb	r3, [r7, #14]
 800b7e4:	2b02      	cmp	r3, #2
 800b7e6:	d111      	bne.n	800b80c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2209      	movs	r2, #9
 800b7ec:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2203      	movs	r2, #3
 800b7f2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b802:	2300      	movs	r3, #0
 800b804:	2200      	movs	r2, #0
 800b806:	f000 fb71 	bl	800beec <osMessageQueuePut>
      break;
 800b80a:	e04a      	b.n	800b8a2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800b80c:	7bbb      	ldrb	r3, [r7, #14]
 800b80e:	2b04      	cmp	r3, #4
 800b810:	d147      	bne.n	800b8a2 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	220b      	movs	r2, #11
 800b816:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2203      	movs	r2, #3
 800b81c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b82c:	2300      	movs	r3, #0
 800b82e:	2200      	movs	r2, #0
 800b830:	f000 fb5c 	bl	800beec <osMessageQueuePut>
      break;
 800b834:	e035      	b.n	800b8a2 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	7e5b      	ldrb	r3, [r3, #25]
 800b83a:	3301      	adds	r3, #1
 800b83c:	b2da      	uxtb	r2, r3
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	765a      	strb	r2, [r3, #25]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	7e5b      	ldrb	r3, [r3, #25]
 800b846:	2b02      	cmp	r3, #2
 800b848:	d806      	bhi.n	800b858 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2201      	movs	r2, #1
 800b84e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b856:	e025      	b.n	800b8a4 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b85e:	2106      	movs	r1, #6
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	795b      	ldrb	r3, [r3, #5]
 800b86e:	4619      	mov	r1, r3
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 f90d 	bl	800ba90 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	791b      	ldrb	r3, [r3, #4]
 800b87a:	4619      	mov	r1, r3
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f000 f907 	bl	800ba90 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b888:	2302      	movs	r3, #2
 800b88a:	73fb      	strb	r3, [r7, #15]
      break;
 800b88c:	e00a      	b.n	800b8a4 <USBH_HandleControl+0x484>

    default:
      break;
 800b88e:	bf00      	nop
 800b890:	e008      	b.n	800b8a4 <USBH_HandleControl+0x484>
      break;
 800b892:	bf00      	nop
 800b894:	e006      	b.n	800b8a4 <USBH_HandleControl+0x484>
      break;
 800b896:	bf00      	nop
 800b898:	e004      	b.n	800b8a4 <USBH_HandleControl+0x484>
      break;
 800b89a:	bf00      	nop
 800b89c:	e002      	b.n	800b8a4 <USBH_HandleControl+0x484>
      break;
 800b89e:	bf00      	nop
 800b8a0:	e000      	b.n	800b8a4 <USBH_HandleControl+0x484>
      break;
 800b8a2:	bf00      	nop
  }

  return status;
 800b8a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop

0800b8b0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b088      	sub	sp, #32
 800b8b4:	af04      	add	r7, sp, #16
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	4613      	mov	r3, r2
 800b8bc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b8be:	79f9      	ldrb	r1, [r7, #7]
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	9303      	str	r3, [sp, #12]
 800b8c4:	2308      	movs	r3, #8
 800b8c6:	9302      	str	r3, [sp, #8]
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	9301      	str	r3, [sp, #4]
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	9300      	str	r3, [sp, #0]
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	f004 fe12 	bl	80104fe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3710      	adds	r7, #16
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b088      	sub	sp, #32
 800b8e8:	af04      	add	r7, sp, #16
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	4611      	mov	r1, r2
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	80fb      	strh	r3, [r7, #6]
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b900:	2b00      	cmp	r3, #0
 800b902:	d001      	beq.n	800b908 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b904:	2300      	movs	r3, #0
 800b906:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b908:	7979      	ldrb	r1, [r7, #5]
 800b90a:	7e3b      	ldrb	r3, [r7, #24]
 800b90c:	9303      	str	r3, [sp, #12]
 800b90e:	88fb      	ldrh	r3, [r7, #6]
 800b910:	9302      	str	r3, [sp, #8]
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	9301      	str	r3, [sp, #4]
 800b916:	2301      	movs	r3, #1
 800b918:	9300      	str	r3, [sp, #0]
 800b91a:	2300      	movs	r3, #0
 800b91c:	2200      	movs	r2, #0
 800b91e:	68f8      	ldr	r0, [r7, #12]
 800b920:	f004 fded 	bl	80104fe <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b924:	2300      	movs	r3, #0
}
 800b926:	4618      	mov	r0, r3
 800b928:	3710      	adds	r7, #16
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b088      	sub	sp, #32
 800b932:	af04      	add	r7, sp, #16
 800b934:	60f8      	str	r0, [r7, #12]
 800b936:	60b9      	str	r1, [r7, #8]
 800b938:	4611      	mov	r1, r2
 800b93a:	461a      	mov	r2, r3
 800b93c:	460b      	mov	r3, r1
 800b93e:	80fb      	strh	r3, [r7, #6]
 800b940:	4613      	mov	r3, r2
 800b942:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b944:	7979      	ldrb	r1, [r7, #5]
 800b946:	2300      	movs	r3, #0
 800b948:	9303      	str	r3, [sp, #12]
 800b94a:	88fb      	ldrh	r3, [r7, #6]
 800b94c:	9302      	str	r3, [sp, #8]
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	9301      	str	r3, [sp, #4]
 800b952:	2301      	movs	r3, #1
 800b954:	9300      	str	r3, [sp, #0]
 800b956:	2300      	movs	r3, #0
 800b958:	2201      	movs	r2, #1
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	f004 fdcf 	bl	80104fe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b960:	2300      	movs	r3, #0

}
 800b962:	4618      	mov	r0, r3
 800b964:	3710      	adds	r7, #16
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b088      	sub	sp, #32
 800b96e:	af04      	add	r7, sp, #16
 800b970:	60f8      	str	r0, [r7, #12]
 800b972:	60b9      	str	r1, [r7, #8]
 800b974:	4611      	mov	r1, r2
 800b976:	461a      	mov	r2, r3
 800b978:	460b      	mov	r3, r1
 800b97a:	80fb      	strh	r3, [r7, #6]
 800b97c:	4613      	mov	r3, r2
 800b97e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b986:	2b00      	cmp	r3, #0
 800b988:	d001      	beq.n	800b98e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b98a:	2300      	movs	r3, #0
 800b98c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b98e:	7979      	ldrb	r1, [r7, #5]
 800b990:	7e3b      	ldrb	r3, [r7, #24]
 800b992:	9303      	str	r3, [sp, #12]
 800b994:	88fb      	ldrh	r3, [r7, #6]
 800b996:	9302      	str	r3, [sp, #8]
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	9301      	str	r3, [sp, #4]
 800b99c:	2301      	movs	r3, #1
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	2302      	movs	r3, #2
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	68f8      	ldr	r0, [r7, #12]
 800b9a6:	f004 fdaa 	bl	80104fe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3710      	adds	r7, #16
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b088      	sub	sp, #32
 800b9b8:	af04      	add	r7, sp, #16
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	4611      	mov	r1, r2
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	80fb      	strh	r3, [r7, #6]
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b9ca:	7979      	ldrb	r1, [r7, #5]
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	9303      	str	r3, [sp, #12]
 800b9d0:	88fb      	ldrh	r3, [r7, #6]
 800b9d2:	9302      	str	r3, [sp, #8]
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	9301      	str	r3, [sp, #4]
 800b9d8:	2301      	movs	r3, #1
 800b9da:	9300      	str	r3, [sp, #0]
 800b9dc:	2302      	movs	r3, #2
 800b9de:	2201      	movs	r2, #1
 800b9e0:	68f8      	ldr	r0, [r7, #12]
 800b9e2:	f004 fd8c 	bl	80104fe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b9e6:	2300      	movs	r3, #0
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3710      	adds	r7, #16
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b086      	sub	sp, #24
 800b9f4:	af04      	add	r7, sp, #16
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	4608      	mov	r0, r1
 800b9fa:	4611      	mov	r1, r2
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	4603      	mov	r3, r0
 800ba00:	70fb      	strb	r3, [r7, #3]
 800ba02:	460b      	mov	r3, r1
 800ba04:	70bb      	strb	r3, [r7, #2]
 800ba06:	4613      	mov	r3, r2
 800ba08:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ba0a:	7878      	ldrb	r0, [r7, #1]
 800ba0c:	78ba      	ldrb	r2, [r7, #2]
 800ba0e:	78f9      	ldrb	r1, [r7, #3]
 800ba10:	8b3b      	ldrh	r3, [r7, #24]
 800ba12:	9302      	str	r3, [sp, #8]
 800ba14:	7d3b      	ldrb	r3, [r7, #20]
 800ba16:	9301      	str	r3, [sp, #4]
 800ba18:	7c3b      	ldrb	r3, [r7, #16]
 800ba1a:	9300      	str	r3, [sp, #0]
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f004 fd1f 	bl	8010462 <USBH_LL_OpenPipe>

  return USBH_OK;
 800ba24:	2300      	movs	r3, #0
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3708      	adds	r7, #8
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b082      	sub	sp, #8
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
 800ba36:	460b      	mov	r3, r1
 800ba38:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ba3a:	78fb      	ldrb	r3, [r7, #3]
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f004 fd3e 	bl	80104c0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3708      	adds	r7, #8
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b084      	sub	sp, #16
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
 800ba56:	460b      	mov	r3, r1
 800ba58:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 f836 	bl	800bacc <USBH_GetFreePipe>
 800ba60:	4603      	mov	r3, r0
 800ba62:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ba64:	89fb      	ldrh	r3, [r7, #14]
 800ba66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d00a      	beq.n	800ba84 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ba6e:	78fa      	ldrb	r2, [r7, #3]
 800ba70:	89fb      	ldrh	r3, [r7, #14]
 800ba72:	f003 030f 	and.w	r3, r3, #15
 800ba76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ba7a:	6879      	ldr	r1, [r7, #4]
 800ba7c:	33e0      	adds	r3, #224	@ 0xe0
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	440b      	add	r3, r1
 800ba82:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ba84:	89fb      	ldrh	r3, [r7, #14]
 800ba86:	b2db      	uxtb	r3, r3
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3710      	adds	r7, #16
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b083      	sub	sp, #12
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	460b      	mov	r3, r1
 800ba9a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ba9c:	78fb      	ldrb	r3, [r7, #3]
 800ba9e:	2b0f      	cmp	r3, #15
 800baa0:	d80d      	bhi.n	800babe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800baa2:	78fb      	ldrb	r3, [r7, #3]
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	33e0      	adds	r3, #224	@ 0xe0
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	4413      	add	r3, r2
 800baac:	685a      	ldr	r2, [r3, #4]
 800baae:	78fb      	ldrb	r3, [r7, #3]
 800bab0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bab4:	6879      	ldr	r1, [r7, #4]
 800bab6:	33e0      	adds	r3, #224	@ 0xe0
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	440b      	add	r3, r1
 800babc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800babe:	2300      	movs	r3, #0
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	370c      	adds	r7, #12
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr

0800bacc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bacc:	b480      	push	{r7}
 800bace:	b085      	sub	sp, #20
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bad4:	2300      	movs	r3, #0
 800bad6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800bad8:	2300      	movs	r3, #0
 800bada:	73fb      	strb	r3, [r7, #15]
 800badc:	e00f      	b.n	800bafe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bade:	7bfb      	ldrb	r3, [r7, #15]
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	33e0      	adds	r3, #224	@ 0xe0
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	4413      	add	r3, r2
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d102      	bne.n	800baf8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800baf2:	7bfb      	ldrb	r3, [r7, #15]
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	e007      	b.n	800bb08 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800baf8:	7bfb      	ldrb	r3, [r7, #15]
 800bafa:	3301      	adds	r3, #1
 800bafc:	73fb      	strb	r3, [r7, #15]
 800bafe:	7bfb      	ldrb	r3, [r7, #15]
 800bb00:	2b0f      	cmp	r3, #15
 800bb02:	d9ec      	bls.n	800bade <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bb04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3714      	adds	r7, #20
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <__NVIC_SetPriority>:
{
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	6039      	str	r1, [r7, #0]
 800bb1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bb20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	db0a      	blt.n	800bb3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	b2da      	uxtb	r2, r3
 800bb2c:	490c      	ldr	r1, [pc, #48]	@ (800bb60 <__NVIC_SetPriority+0x4c>)
 800bb2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb32:	0112      	lsls	r2, r2, #4
 800bb34:	b2d2      	uxtb	r2, r2
 800bb36:	440b      	add	r3, r1
 800bb38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bb3c:	e00a      	b.n	800bb54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	b2da      	uxtb	r2, r3
 800bb42:	4908      	ldr	r1, [pc, #32]	@ (800bb64 <__NVIC_SetPriority+0x50>)
 800bb44:	79fb      	ldrb	r3, [r7, #7]
 800bb46:	f003 030f 	and.w	r3, r3, #15
 800bb4a:	3b04      	subs	r3, #4
 800bb4c:	0112      	lsls	r2, r2, #4
 800bb4e:	b2d2      	uxtb	r2, r2
 800bb50:	440b      	add	r3, r1
 800bb52:	761a      	strb	r2, [r3, #24]
}
 800bb54:	bf00      	nop
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr
 800bb60:	e000e100 	.word	0xe000e100
 800bb64:	e000ed00 	.word	0xe000ed00

0800bb68 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bb6c:	4b05      	ldr	r3, [pc, #20]	@ (800bb84 <SysTick_Handler+0x1c>)
 800bb6e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bb70:	f002 ff1e 	bl	800e9b0 <xTaskGetSchedulerState>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d001      	beq.n	800bb7e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bb7a:	f004 f81d 	bl	800fbb8 <xPortSysTickHandler>
  }
}
 800bb7e:	bf00      	nop
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	e000e010 	.word	0xe000e010

0800bb88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	f06f 0004 	mvn.w	r0, #4
 800bb92:	f7ff ffbf 	bl	800bb14 <__NVIC_SetPriority>
#endif
}
 800bb96:	bf00      	nop
 800bb98:	bd80      	pop	{r7, pc}
	...

0800bb9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bba2:	f3ef 8305 	mrs	r3, IPSR
 800bba6:	603b      	str	r3, [r7, #0]
  return(result);
 800bba8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d003      	beq.n	800bbb6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bbae:	f06f 0305 	mvn.w	r3, #5
 800bbb2:	607b      	str	r3, [r7, #4]
 800bbb4:	e00c      	b.n	800bbd0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bbb6:	4b0a      	ldr	r3, [pc, #40]	@ (800bbe0 <osKernelInitialize+0x44>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d105      	bne.n	800bbca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bbbe:	4b08      	ldr	r3, [pc, #32]	@ (800bbe0 <osKernelInitialize+0x44>)
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	607b      	str	r3, [r7, #4]
 800bbc8:	e002      	b.n	800bbd0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bbca:	f04f 33ff 	mov.w	r3, #4294967295
 800bbce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bbd0:	687b      	ldr	r3, [r7, #4]
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	370c      	adds	r7, #12
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr
 800bbde:	bf00      	nop
 800bbe0:	200006c0 	.word	0x200006c0

0800bbe4 <osKernelGetInfo>:

osStatus_t osKernelGetInfo (osVersion_t *version, char *id_buf, uint32_t id_size) {
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	60f8      	str	r0, [r7, #12]
 800bbec:	60b9      	str	r1, [r7, #8]
 800bbee:	607a      	str	r2, [r7, #4]

  if (version != NULL) {
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d005      	beq.n	800bc02 <osKernelGetInfo+0x1e>
    /* Version encoding is major.minor.rev: mmnnnrrrr dec */
    version->api    = KERNEL_VERSION;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	4a0c      	ldr	r2, [pc, #48]	@ (800bc2c <osKernelGetInfo+0x48>)
 800bbfa:	601a      	str	r2, [r3, #0]
    version->kernel = KERNEL_VERSION;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	4a0b      	ldr	r2, [pc, #44]	@ (800bc2c <osKernelGetInfo+0x48>)
 800bc00:	605a      	str	r2, [r3, #4]
  }

  if ((id_buf != NULL) && (id_size != 0U)) {
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d00c      	beq.n	800bc22 <osKernelGetInfo+0x3e>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d009      	beq.n	800bc22 <osKernelGetInfo+0x3e>
    if (id_size > sizeof(KERNEL_ID)) {
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2b11      	cmp	r3, #17
 800bc12:	d901      	bls.n	800bc18 <osKernelGetInfo+0x34>
      id_size = sizeof(KERNEL_ID);
 800bc14:	2311      	movs	r3, #17
 800bc16:	607b      	str	r3, [r7, #4]
    }
    memcpy(id_buf, KERNEL_ID, id_size);
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	4905      	ldr	r1, [pc, #20]	@ (800bc30 <osKernelGetInfo+0x4c>)
 800bc1c:	68b8      	ldr	r0, [r7, #8]
 800bc1e:	f005 ff3a 	bl	8011a96 <memcpy>
  }

  return (osOK);
 800bc22:	2300      	movs	r3, #0
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3710      	adds	r7, #16
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	05f5f531 	.word	0x05f5f531
 800bc30:	080142f8 	.word	0x080142f8

0800bc34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b082      	sub	sp, #8
 800bc38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc3a:	f3ef 8305 	mrs	r3, IPSR
 800bc3e:	603b      	str	r3, [r7, #0]
  return(result);
 800bc40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d003      	beq.n	800bc4e <osKernelStart+0x1a>
    stat = osErrorISR;
 800bc46:	f06f 0305 	mvn.w	r3, #5
 800bc4a:	607b      	str	r3, [r7, #4]
 800bc4c:	e010      	b.n	800bc70 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bc4e:	4b0b      	ldr	r3, [pc, #44]	@ (800bc7c <osKernelStart+0x48>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d109      	bne.n	800bc6a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bc56:	f7ff ff97 	bl	800bb88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bc5a:	4b08      	ldr	r3, [pc, #32]	@ (800bc7c <osKernelStart+0x48>)
 800bc5c:	2202      	movs	r2, #2
 800bc5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bc60:	f002 f82e 	bl	800dcc0 <vTaskStartScheduler>
      stat = osOK;
 800bc64:	2300      	movs	r3, #0
 800bc66:	607b      	str	r3, [r7, #4]
 800bc68:	e002      	b.n	800bc70 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bc6a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bc70:	687b      	ldr	r3, [r7, #4]
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3708      	adds	r7, #8
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	200006c0 	.word	0x200006c0

0800bc80 <osKernelGetTickFreq>:
  }

  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
 800bc80:	b480      	push	{r7}
 800bc82:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800bc84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr
	...

0800bc94 <osKernelGetSysTimerFreq>:
  }

  return (val);
}

uint32_t osKernelGetSysTimerFreq (void) {
 800bc94:	b480      	push	{r7}
 800bc96:	af00      	add	r7, sp, #0
  return (configCPU_CLOCK_HZ);
 800bc98:	4b03      	ldr	r3, [pc, #12]	@ (800bca8 <osKernelGetSysTimerFreq+0x14>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	2000022c 	.word	0x2000022c

0800bcac <osThreadNew>:

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b08e      	sub	sp, #56	@ 0x38
 800bcb0:	af04      	add	r7, sp, #16
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcbc:	f3ef 8305 	mrs	r3, IPSR
 800bcc0:	617b      	str	r3, [r7, #20]
  return(result);
 800bcc2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d17e      	bne.n	800bdc6 <osThreadNew+0x11a>
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d07b      	beq.n	800bdc6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bcce:	2380      	movs	r3, #128	@ 0x80
 800bcd0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bcd2:	2318      	movs	r3, #24
 800bcd4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bcda:	f04f 33ff 	mov.w	r3, #4294967295
 800bcde:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d045      	beq.n	800bd72 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d002      	beq.n	800bcf4 <osThreadNew+0x48>
        name = attr->name;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	699b      	ldr	r3, [r3, #24]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d002      	beq.n	800bd02 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	699b      	ldr	r3, [r3, #24]
 800bd00:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bd02:	69fb      	ldr	r3, [r7, #28]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d008      	beq.n	800bd1a <osThreadNew+0x6e>
 800bd08:	69fb      	ldr	r3, [r7, #28]
 800bd0a:	2b38      	cmp	r3, #56	@ 0x38
 800bd0c:	d805      	bhi.n	800bd1a <osThreadNew+0x6e>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	f003 0301 	and.w	r3, r3, #1
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d001      	beq.n	800bd1e <osThreadNew+0x72>
        return (NULL);
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	e054      	b.n	800bdc8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	695b      	ldr	r3, [r3, #20]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d003      	beq.n	800bd2e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	695b      	ldr	r3, [r3, #20]
 800bd2a:	089b      	lsrs	r3, r3, #2
 800bd2c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	689b      	ldr	r3, [r3, #8]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d00e      	beq.n	800bd54 <osThreadNew+0xa8>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	68db      	ldr	r3, [r3, #12]
 800bd3a:	2ba7      	cmp	r3, #167	@ 0xa7
 800bd3c:	d90a      	bls.n	800bd54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d006      	beq.n	800bd54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	695b      	ldr	r3, [r3, #20]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d002      	beq.n	800bd54 <osThreadNew+0xa8>
        mem = 1;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	61bb      	str	r3, [r7, #24]
 800bd52:	e010      	b.n	800bd76 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d10c      	bne.n	800bd76 <osThreadNew+0xca>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d108      	bne.n	800bd76 <osThreadNew+0xca>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	691b      	ldr	r3, [r3, #16]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d104      	bne.n	800bd76 <osThreadNew+0xca>
          mem = 0;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	61bb      	str	r3, [r7, #24]
 800bd70:	e001      	b.n	800bd76 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bd72:	2300      	movs	r3, #0
 800bd74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d110      	bne.n	800bd9e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bd84:	9202      	str	r2, [sp, #8]
 800bd86:	9301      	str	r3, [sp, #4]
 800bd88:	69fb      	ldr	r3, [r7, #28]
 800bd8a:	9300      	str	r3, [sp, #0]
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	6a3a      	ldr	r2, [r7, #32]
 800bd90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bd92:	68f8      	ldr	r0, [r7, #12]
 800bd94:	f001 fb1e 	bl	800d3d4 <xTaskCreateStatic>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	613b      	str	r3, [r7, #16]
 800bd9c:	e013      	b.n	800bdc6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bd9e:	69bb      	ldr	r3, [r7, #24]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d110      	bne.n	800bdc6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bda4:	6a3b      	ldr	r3, [r7, #32]
 800bda6:	b29a      	uxth	r2, r3
 800bda8:	f107 0310 	add.w	r3, r7, #16
 800bdac:	9301      	str	r3, [sp, #4]
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	9300      	str	r3, [sp, #0]
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bdb6:	68f8      	ldr	r0, [r7, #12]
 800bdb8:	f001 fb6c 	bl	800d494 <xTaskCreate>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d001      	beq.n	800bdc6 <osThreadNew+0x11a>
            hTask = NULL;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bdc6:	693b      	ldr	r3, [r7, #16]
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3728      	adds	r7, #40	@ 0x28
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdd8:	f3ef 8305 	mrs	r3, IPSR
 800bddc:	60bb      	str	r3, [r7, #8]
  return(result);
 800bdde:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d003      	beq.n	800bdec <osDelay+0x1c>
    stat = osErrorISR;
 800bde4:	f06f 0305 	mvn.w	r3, #5
 800bde8:	60fb      	str	r3, [r7, #12]
 800bdea:	e007      	b.n	800bdfc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d002      	beq.n	800bdfc <osDelay+0x2c>
      vTaskDelay(ticks);
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f001 fd1e 	bl	800d838 <vTaskDelay>
    }
  }

  return (stat);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3710      	adds	r7, #16
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}

0800be06 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800be06:	b580      	push	{r7, lr}
 800be08:	b08a      	sub	sp, #40	@ 0x28
 800be0a:	af02      	add	r7, sp, #8
 800be0c:	60f8      	str	r0, [r7, #12]
 800be0e:	60b9      	str	r1, [r7, #8]
 800be10:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800be12:	2300      	movs	r3, #0
 800be14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be16:	f3ef 8305 	mrs	r3, IPSR
 800be1a:	613b      	str	r3, [r7, #16]
  return(result);
 800be1c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d15f      	bne.n	800bee2 <osMessageQueueNew+0xdc>
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d05c      	beq.n	800bee2 <osMessageQueueNew+0xdc>
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d059      	beq.n	800bee2 <osMessageQueueNew+0xdc>
    mem = -1;
 800be2e:	f04f 33ff 	mov.w	r3, #4294967295
 800be32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d029      	beq.n	800be8e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d012      	beq.n	800be68 <osMessageQueueNew+0x62>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	68db      	ldr	r3, [r3, #12]
 800be46:	2b4f      	cmp	r3, #79	@ 0x4f
 800be48:	d90e      	bls.n	800be68 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d00a      	beq.n	800be68 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	695a      	ldr	r2, [r3, #20]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	68b9      	ldr	r1, [r7, #8]
 800be5a:	fb01 f303 	mul.w	r3, r1, r3
 800be5e:	429a      	cmp	r2, r3
 800be60:	d302      	bcc.n	800be68 <osMessageQueueNew+0x62>
        mem = 1;
 800be62:	2301      	movs	r3, #1
 800be64:	61bb      	str	r3, [r7, #24]
 800be66:	e014      	b.n	800be92 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	689b      	ldr	r3, [r3, #8]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d110      	bne.n	800be92 <osMessageQueueNew+0x8c>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d10c      	bne.n	800be92 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d108      	bne.n	800be92 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	695b      	ldr	r3, [r3, #20]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d104      	bne.n	800be92 <osMessageQueueNew+0x8c>
          mem = 0;
 800be88:	2300      	movs	r3, #0
 800be8a:	61bb      	str	r3, [r7, #24]
 800be8c:	e001      	b.n	800be92 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800be8e:	2300      	movs	r3, #0
 800be90:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800be92:	69bb      	ldr	r3, [r7, #24]
 800be94:	2b01      	cmp	r3, #1
 800be96:	d10b      	bne.n	800beb0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	691a      	ldr	r2, [r3, #16]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	2100      	movs	r1, #0
 800bea2:	9100      	str	r1, [sp, #0]
 800bea4:	68b9      	ldr	r1, [r7, #8]
 800bea6:	68f8      	ldr	r0, [r7, #12]
 800bea8:	f000 fbec 	bl	800c684 <xQueueGenericCreateStatic>
 800beac:	61f8      	str	r0, [r7, #28]
 800beae:	e008      	b.n	800bec2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d105      	bne.n	800bec2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800beb6:	2200      	movs	r2, #0
 800beb8:	68b9      	ldr	r1, [r7, #8]
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	f000 fc5f 	bl	800c77e <xQueueGenericCreate>
 800bec0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bec2:	69fb      	ldr	r3, [r7, #28]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d00c      	beq.n	800bee2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d003      	beq.n	800bed6 <osMessageQueueNew+0xd0>
        name = attr->name;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	617b      	str	r3, [r7, #20]
 800bed4:	e001      	b.n	800beda <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800bed6:	2300      	movs	r3, #0
 800bed8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800beda:	6979      	ldr	r1, [r7, #20]
 800bedc:	69f8      	ldr	r0, [r7, #28]
 800bede:	f001 fa1b 	bl	800d318 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bee2:	69fb      	ldr	r3, [r7, #28]
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3720      	adds	r7, #32
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800beec:	b580      	push	{r7, lr}
 800beee:	b088      	sub	sp, #32
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	603b      	str	r3, [r7, #0]
 800bef8:	4613      	mov	r3, r2
 800befa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bf00:	2300      	movs	r3, #0
 800bf02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf04:	f3ef 8305 	mrs	r3, IPSR
 800bf08:	617b      	str	r3, [r7, #20]
  return(result);
 800bf0a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d028      	beq.n	800bf62 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d005      	beq.n	800bf22 <osMessageQueuePut+0x36>
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d002      	beq.n	800bf22 <osMessageQueuePut+0x36>
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d003      	beq.n	800bf2a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800bf22:	f06f 0303 	mvn.w	r3, #3
 800bf26:	61fb      	str	r3, [r7, #28]
 800bf28:	e038      	b.n	800bf9c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bf2e:	f107 0210 	add.w	r2, r7, #16
 800bf32:	2300      	movs	r3, #0
 800bf34:	68b9      	ldr	r1, [r7, #8]
 800bf36:	69b8      	ldr	r0, [r7, #24]
 800bf38:	f000 fdb4 	bl	800caa4 <xQueueGenericSendFromISR>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d003      	beq.n	800bf4a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800bf42:	f06f 0302 	mvn.w	r3, #2
 800bf46:	61fb      	str	r3, [r7, #28]
 800bf48:	e028      	b.n	800bf9c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d025      	beq.n	800bf9c <osMessageQueuePut+0xb0>
 800bf50:	4b15      	ldr	r3, [pc, #84]	@ (800bfa8 <osMessageQueuePut+0xbc>)
 800bf52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf56:	601a      	str	r2, [r3, #0]
 800bf58:	f3bf 8f4f 	dsb	sy
 800bf5c:	f3bf 8f6f 	isb	sy
 800bf60:	e01c      	b.n	800bf9c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bf62:	69bb      	ldr	r3, [r7, #24]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d002      	beq.n	800bf6e <osMessageQueuePut+0x82>
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d103      	bne.n	800bf76 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800bf6e:	f06f 0303 	mvn.w	r3, #3
 800bf72:	61fb      	str	r3, [r7, #28]
 800bf74:	e012      	b.n	800bf9c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bf76:	2300      	movs	r3, #0
 800bf78:	683a      	ldr	r2, [r7, #0]
 800bf7a:	68b9      	ldr	r1, [r7, #8]
 800bf7c:	69b8      	ldr	r0, [r7, #24]
 800bf7e:	f000 fc8f 	bl	800c8a0 <xQueueGenericSend>
 800bf82:	4603      	mov	r3, r0
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	d009      	beq.n	800bf9c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d003      	beq.n	800bf96 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800bf8e:	f06f 0301 	mvn.w	r3, #1
 800bf92:	61fb      	str	r3, [r7, #28]
 800bf94:	e002      	b.n	800bf9c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800bf96:	f06f 0302 	mvn.w	r3, #2
 800bf9a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bf9c:	69fb      	ldr	r3, [r7, #28]
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3720      	adds	r7, #32
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	e000ed04 	.word	0xe000ed04

0800bfac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b088      	sub	sp, #32
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	607a      	str	r2, [r7, #4]
 800bfb8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfc2:	f3ef 8305 	mrs	r3, IPSR
 800bfc6:	617b      	str	r3, [r7, #20]
  return(result);
 800bfc8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d028      	beq.n	800c020 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bfce:	69bb      	ldr	r3, [r7, #24]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d005      	beq.n	800bfe0 <osMessageQueueGet+0x34>
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d002      	beq.n	800bfe0 <osMessageQueueGet+0x34>
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d003      	beq.n	800bfe8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800bfe0:	f06f 0303 	mvn.w	r3, #3
 800bfe4:	61fb      	str	r3, [r7, #28]
 800bfe6:	e037      	b.n	800c058 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bfec:	f107 0310 	add.w	r3, r7, #16
 800bff0:	461a      	mov	r2, r3
 800bff2:	68b9      	ldr	r1, [r7, #8]
 800bff4:	69b8      	ldr	r0, [r7, #24]
 800bff6:	f000 ffe5 	bl	800cfc4 <xQueueReceiveFromISR>
 800bffa:	4603      	mov	r3, r0
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d003      	beq.n	800c008 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c000:	f06f 0302 	mvn.w	r3, #2
 800c004:	61fb      	str	r3, [r7, #28]
 800c006:	e027      	b.n	800c058 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d024      	beq.n	800c058 <osMessageQueueGet+0xac>
 800c00e:	4b15      	ldr	r3, [pc, #84]	@ (800c064 <osMessageQueueGet+0xb8>)
 800c010:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c014:	601a      	str	r2, [r3, #0]
 800c016:	f3bf 8f4f 	dsb	sy
 800c01a:	f3bf 8f6f 	isb	sy
 800c01e:	e01b      	b.n	800c058 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d002      	beq.n	800c02c <osMessageQueueGet+0x80>
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d103      	bne.n	800c034 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c02c:	f06f 0303 	mvn.w	r3, #3
 800c030:	61fb      	str	r3, [r7, #28]
 800c032:	e011      	b.n	800c058 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c034:	683a      	ldr	r2, [r7, #0]
 800c036:	68b9      	ldr	r1, [r7, #8]
 800c038:	69b8      	ldr	r0, [r7, #24]
 800c03a:	f000 fdd1 	bl	800cbe0 <xQueueReceive>
 800c03e:	4603      	mov	r3, r0
 800c040:	2b01      	cmp	r3, #1
 800c042:	d009      	beq.n	800c058 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d003      	beq.n	800c052 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c04a:	f06f 0301 	mvn.w	r3, #1
 800c04e:	61fb      	str	r3, [r7, #28]
 800c050:	e002      	b.n	800c058 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c052:	f06f 0302 	mvn.w	r3, #2
 800c056:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c058:	69fb      	ldr	r3, [r7, #28]
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3720      	adds	r7, #32
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	e000ed04 	.word	0xe000ed04

0800c068 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c068:	b480      	push	{r7}
 800c06a:	b085      	sub	sp, #20
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	60f8      	str	r0, [r7, #12]
 800c070:	60b9      	str	r1, [r7, #8]
 800c072:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	4a07      	ldr	r2, [pc, #28]	@ (800c094 <vApplicationGetIdleTaskMemory+0x2c>)
 800c078:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	4a06      	ldr	r2, [pc, #24]	@ (800c098 <vApplicationGetIdleTaskMemory+0x30>)
 800c07e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2280      	movs	r2, #128	@ 0x80
 800c084:	601a      	str	r2, [r3, #0]
}
 800c086:	bf00      	nop
 800c088:	3714      	adds	r7, #20
 800c08a:	46bd      	mov	sp, r7
 800c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c090:	4770      	bx	lr
 800c092:	bf00      	nop
 800c094:	200006c4 	.word	0x200006c4
 800c098:	2000076c 	.word	0x2000076c

0800c09c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c09c:	b480      	push	{r7}
 800c09e:	b085      	sub	sp, #20
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	4a07      	ldr	r2, [pc, #28]	@ (800c0c8 <vApplicationGetTimerTaskMemory+0x2c>)
 800c0ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	4a06      	ldr	r2, [pc, #24]	@ (800c0cc <vApplicationGetTimerTaskMemory+0x30>)
 800c0b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c0ba:	601a      	str	r2, [r3, #0]
}
 800c0bc:	bf00      	nop
 800c0be:	3714      	adds	r7, #20
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr
 800c0c8:	2000096c 	.word	0x2000096c
 800c0cc:	20000a14 	.word	0x20000a14

0800c0d0 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c0d6:	2020      	movs	r0, #32
 800c0d8:	f003 fe00 	bl	800fcdc <pvPortMalloc>
 800c0dc:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00a      	beq.n	800c0fa <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	3304      	adds	r3, #4
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f000 f9aa 	bl	800c448 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c0fa:	687b      	ldr	r3, [r7, #4]
	}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3708      	adds	r7, #8
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b090      	sub	sp, #64	@ 0x40
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	60b9      	str	r1, [r7, #8]
 800c10e:	607a      	str	r2, [r7, #4]
 800c110:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800c116:	2300      	movs	r3, #0
 800c118:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800c11a:	2300      	movs	r3, #0
 800c11c:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d10b      	bne.n	800c13c <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c128:	f383 8811 	msr	BASEPRI, r3
 800c12c:	f3bf 8f6f 	isb	sy
 800c130:	f3bf 8f4f 	dsb	sy
 800c134:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c136:	bf00      	nop
 800c138:	bf00      	nop
 800c13a:	e7fd      	b.n	800c138 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c142:	d30b      	bcc.n	800c15c <xEventGroupWaitBits+0x58>
	__asm volatile
 800c144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c148:	f383 8811 	msr	BASEPRI, r3
 800c14c:	f3bf 8f6f 	isb	sy
 800c150:	f3bf 8f4f 	dsb	sy
 800c154:	61fb      	str	r3, [r7, #28]
}
 800c156:	bf00      	nop
 800c158:	bf00      	nop
 800c15a:	e7fd      	b.n	800c158 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d10b      	bne.n	800c17a <xEventGroupWaitBits+0x76>
	__asm volatile
 800c162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c166:	f383 8811 	msr	BASEPRI, r3
 800c16a:	f3bf 8f6f 	isb	sy
 800c16e:	f3bf 8f4f 	dsb	sy
 800c172:	61bb      	str	r3, [r7, #24]
}
 800c174:	bf00      	nop
 800c176:	bf00      	nop
 800c178:	e7fd      	b.n	800c176 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c17a:	f002 fc19 	bl	800e9b0 <xTaskGetSchedulerState>
 800c17e:	4603      	mov	r3, r0
 800c180:	2b00      	cmp	r3, #0
 800c182:	d102      	bne.n	800c18a <xEventGroupWaitBits+0x86>
 800c184:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c186:	2b00      	cmp	r3, #0
 800c188:	d101      	bne.n	800c18e <xEventGroupWaitBits+0x8a>
 800c18a:	2301      	movs	r3, #1
 800c18c:	e000      	b.n	800c190 <xEventGroupWaitBits+0x8c>
 800c18e:	2300      	movs	r3, #0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d10b      	bne.n	800c1ac <xEventGroupWaitBits+0xa8>
	__asm volatile
 800c194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c198:	f383 8811 	msr	BASEPRI, r3
 800c19c:	f3bf 8f6f 	isb	sy
 800c1a0:	f3bf 8f4f 	dsb	sy
 800c1a4:	617b      	str	r3, [r7, #20]
}
 800c1a6:	bf00      	nop
 800c1a8:	bf00      	nop
 800c1aa:	e7fd      	b.n	800c1a8 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800c1ac:	f001 fdf8 	bl	800dda0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800c1b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800c1b6:	683a      	ldr	r2, [r7, #0]
 800c1b8:	68b9      	ldr	r1, [r7, #8]
 800c1ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c1bc:	f000 f90d 	bl	800c3da <prvTestWaitCondition>
 800c1c0:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800c1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d00e      	beq.n	800c1e6 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800c1c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d028      	beq.n	800c228 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c1d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	43db      	mvns	r3, r3
 800c1de:	401a      	ands	r2, r3
 800c1e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1e2:	601a      	str	r2, [r3, #0]
 800c1e4:	e020      	b.n	800c228 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800c1e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d104      	bne.n	800c1f6 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800c1ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c1f4:	e018      	b.n	800c228 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d003      	beq.n	800c204 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800c1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c202:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d003      	beq.n	800c212 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800c20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c20c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c210:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800c212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c214:	1d18      	adds	r0, r3, #4
 800c216:	68ba      	ldr	r2, [r7, #8]
 800c218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c21a:	4313      	orrs	r3, r2
 800c21c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c21e:	4619      	mov	r1, r3
 800c220:	f002 f894 	bl	800e34c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800c224:	2300      	movs	r3, #0
 800c226:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800c228:	f001 fdc8 	bl	800ddbc <xTaskResumeAll>
 800c22c:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800c22e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c230:	2b00      	cmp	r3, #0
 800c232:	d031      	beq.n	800c298 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800c234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c236:	2b00      	cmp	r3, #0
 800c238:	d107      	bne.n	800c24a <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800c23a:	4b1a      	ldr	r3, [pc, #104]	@ (800c2a4 <xEventGroupWaitBits+0x1a0>)
 800c23c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c240:	601a      	str	r2, [r3, #0]
 800c242:	f3bf 8f4f 	dsb	sy
 800c246:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800c24a:	f002 fd2b 	bl	800eca4 <uxTaskResetEventItemValue>
 800c24e:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800c250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c256:	2b00      	cmp	r3, #0
 800c258:	d11a      	bne.n	800c290 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800c25a:	f003 fc1d 	bl	800fa98 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800c25e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800c264:	683a      	ldr	r2, [r7, #0]
 800c266:	68b9      	ldr	r1, [r7, #8]
 800c268:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c26a:	f000 f8b6 	bl	800c3da <prvTestWaitCondition>
 800c26e:	4603      	mov	r3, r0
 800c270:	2b00      	cmp	r3, #0
 800c272:	d009      	beq.n	800c288 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d006      	beq.n	800c288 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c27a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	43db      	mvns	r3, r3
 800c282:	401a      	ands	r2, r3
 800c284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c286:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800c288:	2301      	movs	r3, #1
 800c28a:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800c28c:	f003 fc36 	bl	800fafc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c292:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c296:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800c298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3740      	adds	r7, #64	@ 0x40
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	e000ed04 	.word	0xe000ed04

0800c2a8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b08e      	sub	sp, #56	@ 0x38
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d10b      	bne.n	800c2dc <xEventGroupSetBits+0x34>
	__asm volatile
 800c2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c8:	f383 8811 	msr	BASEPRI, r3
 800c2cc:	f3bf 8f6f 	isb	sy
 800c2d0:	f3bf 8f4f 	dsb	sy
 800c2d4:	613b      	str	r3, [r7, #16]
}
 800c2d6:	bf00      	nop
 800c2d8:	bf00      	nop
 800c2da:	e7fd      	b.n	800c2d8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c2e2:	d30b      	bcc.n	800c2fc <xEventGroupSetBits+0x54>
	__asm volatile
 800c2e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2e8:	f383 8811 	msr	BASEPRI, r3
 800c2ec:	f3bf 8f6f 	isb	sy
 800c2f0:	f3bf 8f4f 	dsb	sy
 800c2f4:	60fb      	str	r3, [r7, #12]
}
 800c2f6:	bf00      	nop
 800c2f8:	bf00      	nop
 800c2fa:	e7fd      	b.n	800c2f8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800c2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2fe:	3304      	adds	r3, #4
 800c300:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c304:	3308      	adds	r3, #8
 800c306:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800c308:	f001 fd4a 	bl	800dda0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800c30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800c312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	431a      	orrs	r2, r3
 800c31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c31c:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800c31e:	e03c      	b.n	800c39a <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800c320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800c326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800c32c:	2300      	movs	r3, #0
 800c32e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800c336:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c33e:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c346:	2b00      	cmp	r3, #0
 800c348:	d108      	bne.n	800c35c <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800c34a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c34c:	681a      	ldr	r2, [r3, #0]
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	4013      	ands	r3, r2
 800c352:	2b00      	cmp	r3, #0
 800c354:	d00b      	beq.n	800c36e <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800c356:	2301      	movs	r3, #1
 800c358:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c35a:	e008      	b.n	800c36e <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800c35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	4013      	ands	r3, r2
 800c364:	69ba      	ldr	r2, [r7, #24]
 800c366:	429a      	cmp	r2, r3
 800c368:	d101      	bne.n	800c36e <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800c36a:	2301      	movs	r3, #1
 800c36c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800c36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c370:	2b00      	cmp	r3, #0
 800c372:	d010      	beq.n	800c396 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d003      	beq.n	800c386 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800c37e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c380:	69bb      	ldr	r3, [r7, #24]
 800c382:	4313      	orrs	r3, r2
 800c384:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800c386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c38e:	4619      	mov	r1, r3
 800c390:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c392:	f002 f8a9 	bl	800e4e8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800c396:	69fb      	ldr	r3, [r7, #28]
 800c398:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800c39a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c39c:	6a3b      	ldr	r3, [r7, #32]
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d1be      	bne.n	800c320 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800c3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3a4:	681a      	ldr	r2, [r3, #0]
 800c3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a8:	43db      	mvns	r3, r3
 800c3aa:	401a      	ands	r2, r3
 800c3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ae:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800c3b0:	f001 fd04 	bl	800ddbc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800c3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3b6:	681b      	ldr	r3, [r3, #0]
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3738      	adds	r7, #56	@ 0x38
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b082      	sub	sp, #8
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800c3ca:	6839      	ldr	r1, [r7, #0]
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f7ff ff6b 	bl	800c2a8 <xEventGroupSetBits>
}
 800c3d2:	bf00      	nop
 800c3d4:	3708      	adds	r7, #8
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}

0800c3da <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800c3da:	b480      	push	{r7}
 800c3dc:	b087      	sub	sp, #28
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	60f8      	str	r0, [r7, #12]
 800c3e2:	60b9      	str	r1, [r7, #8]
 800c3e4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d107      	bne.n	800c400 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00a      	beq.n	800c410 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	617b      	str	r3, [r7, #20]
 800c3fe:	e007      	b.n	800c410 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800c400:	68fa      	ldr	r2, [r7, #12]
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	4013      	ands	r3, r2
 800c406:	68ba      	ldr	r2, [r7, #8]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d101      	bne.n	800c410 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c40c:	2301      	movs	r3, #1
 800c40e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800c410:	697b      	ldr	r3, [r7, #20]
}
 800c412:	4618      	mov	r0, r3
 800c414:	371c      	adds	r7, #28
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
	...

0800c420 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c420:	b580      	push	{r7, lr}
 800c422:	b086      	sub	sp, #24
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	68f9      	ldr	r1, [r7, #12]
 800c432:	4804      	ldr	r0, [pc, #16]	@ (800c444 <xEventGroupSetBitsFromISR+0x24>)
 800c434:	f003 f9dc 	bl	800f7f0 <xTimerPendFunctionCallFromISR>
 800c438:	6178      	str	r0, [r7, #20]

		return xReturn;
 800c43a:	697b      	ldr	r3, [r7, #20]
	}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3718      	adds	r7, #24
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	0800c3c1 	.word	0x0800c3c1

0800c448 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c448:	b480      	push	{r7}
 800c44a:	b083      	sub	sp, #12
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f103 0208 	add.w	r2, r3, #8
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f04f 32ff 	mov.w	r2, #4294967295
 800c460:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f103 0208 	add.w	r2, r3, #8
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f103 0208 	add.w	r2, r3, #8
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2200      	movs	r2, #0
 800c47a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c47c:	bf00      	nop
 800c47e:	370c      	adds	r7, #12
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr

0800c488 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c496:	bf00      	nop
 800c498:	370c      	adds	r7, #12
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr

0800c4a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c4a2:	b480      	push	{r7}
 800c4a4:	b085      	sub	sp, #20
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
 800c4aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	68fa      	ldr	r2, [r7, #12]
 800c4b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	689a      	ldr	r2, [r3, #8]
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	689b      	ldr	r3, [r3, #8]
 800c4c4:	683a      	ldr	r2, [r7, #0]
 800c4c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	683a      	ldr	r2, [r7, #0]
 800c4cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	1c5a      	adds	r2, r3, #1
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	601a      	str	r2, [r3, #0]
}
 800c4de:	bf00      	nop
 800c4e0:	3714      	adds	r7, #20
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr

0800c4ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c4ea:	b480      	push	{r7}
 800c4ec:	b085      	sub	sp, #20
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
 800c4f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c500:	d103      	bne.n	800c50a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	691b      	ldr	r3, [r3, #16]
 800c506:	60fb      	str	r3, [r7, #12]
 800c508:	e00c      	b.n	800c524 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	3308      	adds	r3, #8
 800c50e:	60fb      	str	r3, [r7, #12]
 800c510:	e002      	b.n	800c518 <vListInsert+0x2e>
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	60fb      	str	r3, [r7, #12]
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	68ba      	ldr	r2, [r7, #8]
 800c520:	429a      	cmp	r2, r3
 800c522:	d2f6      	bcs.n	800c512 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	685a      	ldr	r2, [r3, #4]
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	683a      	ldr	r2, [r7, #0]
 800c532:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	68fa      	ldr	r2, [r7, #12]
 800c538:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	683a      	ldr	r2, [r7, #0]
 800c53e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	1c5a      	adds	r2, r3, #1
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	601a      	str	r2, [r3, #0]
}
 800c550:	bf00      	nop
 800c552:	3714      	adds	r7, #20
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr

0800c55c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c55c:	b480      	push	{r7}
 800c55e:	b085      	sub	sp, #20
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	6892      	ldr	r2, [r2, #8]
 800c572:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	689b      	ldr	r3, [r3, #8]
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	6852      	ldr	r2, [r2, #4]
 800c57c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	429a      	cmp	r2, r3
 800c586:	d103      	bne.n	800c590 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	689a      	ldr	r2, [r3, #8]
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	1e5a      	subs	r2, r3, #1
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3714      	adds	r7, #20
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d10b      	bne.n	800c5dc <xQueueGenericReset+0x2c>
	__asm volatile
 800c5c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5c8:	f383 8811 	msr	BASEPRI, r3
 800c5cc:	f3bf 8f6f 	isb	sy
 800c5d0:	f3bf 8f4f 	dsb	sy
 800c5d4:	60bb      	str	r3, [r7, #8]
}
 800c5d6:	bf00      	nop
 800c5d8:	bf00      	nop
 800c5da:	e7fd      	b.n	800c5d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c5dc:	f003 fa5c 	bl	800fa98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681a      	ldr	r2, [r3, #0]
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5e8:	68f9      	ldr	r1, [r7, #12]
 800c5ea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c5ec:	fb01 f303 	mul.w	r3, r1, r3
 800c5f0:	441a      	add	r2, r3
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c60c:	3b01      	subs	r3, #1
 800c60e:	68f9      	ldr	r1, [r7, #12]
 800c610:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c612:	fb01 f303 	mul.w	r3, r1, r3
 800c616:	441a      	add	r2, r3
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	22ff      	movs	r2, #255	@ 0xff
 800c620:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	22ff      	movs	r2, #255	@ 0xff
 800c628:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d114      	bne.n	800c65c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	691b      	ldr	r3, [r3, #16]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d01a      	beq.n	800c670 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	3310      	adds	r3, #16
 800c63e:	4618      	mov	r0, r3
 800c640:	f001 feee 	bl	800e420 <xTaskRemoveFromEventList>
 800c644:	4603      	mov	r3, r0
 800c646:	2b00      	cmp	r3, #0
 800c648:	d012      	beq.n	800c670 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c64a:	4b0d      	ldr	r3, [pc, #52]	@ (800c680 <xQueueGenericReset+0xd0>)
 800c64c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c650:	601a      	str	r2, [r3, #0]
 800c652:	f3bf 8f4f 	dsb	sy
 800c656:	f3bf 8f6f 	isb	sy
 800c65a:	e009      	b.n	800c670 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	3310      	adds	r3, #16
 800c660:	4618      	mov	r0, r3
 800c662:	f7ff fef1 	bl	800c448 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	3324      	adds	r3, #36	@ 0x24
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7ff feec 	bl	800c448 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c670:	f003 fa44 	bl	800fafc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c674:	2301      	movs	r3, #1
}
 800c676:	4618      	mov	r0, r3
 800c678:	3710      	adds	r7, #16
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop
 800c680:	e000ed04 	.word	0xe000ed04

0800c684 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c684:	b580      	push	{r7, lr}
 800c686:	b08e      	sub	sp, #56	@ 0x38
 800c688:	af02      	add	r7, sp, #8
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
 800c690:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d10b      	bne.n	800c6b0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c69c:	f383 8811 	msr	BASEPRI, r3
 800c6a0:	f3bf 8f6f 	isb	sy
 800c6a4:	f3bf 8f4f 	dsb	sy
 800c6a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c6aa:	bf00      	nop
 800c6ac:	bf00      	nop
 800c6ae:	e7fd      	b.n	800c6ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d10b      	bne.n	800c6ce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ba:	f383 8811 	msr	BASEPRI, r3
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	f3bf 8f4f 	dsb	sy
 800c6c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c6c8:	bf00      	nop
 800c6ca:	bf00      	nop
 800c6cc:	e7fd      	b.n	800c6ca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d002      	beq.n	800c6da <xQueueGenericCreateStatic+0x56>
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d001      	beq.n	800c6de <xQueueGenericCreateStatic+0x5a>
 800c6da:	2301      	movs	r3, #1
 800c6dc:	e000      	b.n	800c6e0 <xQueueGenericCreateStatic+0x5c>
 800c6de:	2300      	movs	r3, #0
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d10b      	bne.n	800c6fc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c6e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6e8:	f383 8811 	msr	BASEPRI, r3
 800c6ec:	f3bf 8f6f 	isb	sy
 800c6f0:	f3bf 8f4f 	dsb	sy
 800c6f4:	623b      	str	r3, [r7, #32]
}
 800c6f6:	bf00      	nop
 800c6f8:	bf00      	nop
 800c6fa:	e7fd      	b.n	800c6f8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d102      	bne.n	800c708 <xQueueGenericCreateStatic+0x84>
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d101      	bne.n	800c70c <xQueueGenericCreateStatic+0x88>
 800c708:	2301      	movs	r3, #1
 800c70a:	e000      	b.n	800c70e <xQueueGenericCreateStatic+0x8a>
 800c70c:	2300      	movs	r3, #0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d10b      	bne.n	800c72a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c716:	f383 8811 	msr	BASEPRI, r3
 800c71a:	f3bf 8f6f 	isb	sy
 800c71e:	f3bf 8f4f 	dsb	sy
 800c722:	61fb      	str	r3, [r7, #28]
}
 800c724:	bf00      	nop
 800c726:	bf00      	nop
 800c728:	e7fd      	b.n	800c726 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c72a:	2350      	movs	r3, #80	@ 0x50
 800c72c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	2b50      	cmp	r3, #80	@ 0x50
 800c732:	d00b      	beq.n	800c74c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c738:	f383 8811 	msr	BASEPRI, r3
 800c73c:	f3bf 8f6f 	isb	sy
 800c740:	f3bf 8f4f 	dsb	sy
 800c744:	61bb      	str	r3, [r7, #24]
}
 800c746:	bf00      	nop
 800c748:	bf00      	nop
 800c74a:	e7fd      	b.n	800c748 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c74c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c754:	2b00      	cmp	r3, #0
 800c756:	d00d      	beq.n	800c774 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c75a:	2201      	movs	r2, #1
 800c75c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c760:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c766:	9300      	str	r3, [sp, #0]
 800c768:	4613      	mov	r3, r2
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	68b9      	ldr	r1, [r7, #8]
 800c76e:	68f8      	ldr	r0, [r7, #12]
 800c770:	f000 f840 	bl	800c7f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c776:	4618      	mov	r0, r3
 800c778:	3730      	adds	r7, #48	@ 0x30
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}

0800c77e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c77e:	b580      	push	{r7, lr}
 800c780:	b08a      	sub	sp, #40	@ 0x28
 800c782:	af02      	add	r7, sp, #8
 800c784:	60f8      	str	r0, [r7, #12]
 800c786:	60b9      	str	r1, [r7, #8]
 800c788:	4613      	mov	r3, r2
 800c78a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d10b      	bne.n	800c7aa <xQueueGenericCreate+0x2c>
	__asm volatile
 800c792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c796:	f383 8811 	msr	BASEPRI, r3
 800c79a:	f3bf 8f6f 	isb	sy
 800c79e:	f3bf 8f4f 	dsb	sy
 800c7a2:	613b      	str	r3, [r7, #16]
}
 800c7a4:	bf00      	nop
 800c7a6:	bf00      	nop
 800c7a8:	e7fd      	b.n	800c7a6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	68ba      	ldr	r2, [r7, #8]
 800c7ae:	fb02 f303 	mul.w	r3, r2, r3
 800c7b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	3350      	adds	r3, #80	@ 0x50
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f003 fa8f 	bl	800fcdc <pvPortMalloc>
 800c7be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c7c0:	69bb      	ldr	r3, [r7, #24]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d011      	beq.n	800c7ea <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c7c6:	69bb      	ldr	r3, [r7, #24]
 800c7c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	3350      	adds	r3, #80	@ 0x50
 800c7ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c7d0:	69bb      	ldr	r3, [r7, #24]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c7d8:	79fa      	ldrb	r2, [r7, #7]
 800c7da:	69bb      	ldr	r3, [r7, #24]
 800c7dc:	9300      	str	r3, [sp, #0]
 800c7de:	4613      	mov	r3, r2
 800c7e0:	697a      	ldr	r2, [r7, #20]
 800c7e2:	68b9      	ldr	r1, [r7, #8]
 800c7e4:	68f8      	ldr	r0, [r7, #12]
 800c7e6:	f000 f805 	bl	800c7f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c7ea:	69bb      	ldr	r3, [r7, #24]
	}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3720      	adds	r7, #32
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	607a      	str	r2, [r7, #4]
 800c800:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d103      	bne.n	800c810 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c808:	69bb      	ldr	r3, [r7, #24]
 800c80a:	69ba      	ldr	r2, [r7, #24]
 800c80c:	601a      	str	r2, [r3, #0]
 800c80e:	e002      	b.n	800c816 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c810:	69bb      	ldr	r3, [r7, #24]
 800c812:	687a      	ldr	r2, [r7, #4]
 800c814:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c816:	69bb      	ldr	r3, [r7, #24]
 800c818:	68fa      	ldr	r2, [r7, #12]
 800c81a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	68ba      	ldr	r2, [r7, #8]
 800c820:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c822:	2101      	movs	r1, #1
 800c824:	69b8      	ldr	r0, [r7, #24]
 800c826:	f7ff fec3 	bl	800c5b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c82a:	69bb      	ldr	r3, [r7, #24]
 800c82c:	78fa      	ldrb	r2, [r7, #3]
 800c82e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c832:	bf00      	nop
 800c834:	3710      	adds	r7, #16
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}

0800c83a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c83a:	b580      	push	{r7, lr}
 800c83c:	b082      	sub	sp, #8
 800c83e:	af00      	add	r7, sp, #0
 800c840:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d00e      	beq.n	800c866 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2200      	movs	r2, #0
 800c84c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2200      	movs	r2, #0
 800c852:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2200      	movs	r2, #0
 800c858:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c85a:	2300      	movs	r3, #0
 800c85c:	2200      	movs	r2, #0
 800c85e:	2100      	movs	r1, #0
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f000 f81d 	bl	800c8a0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c866:	bf00      	nop
 800c868:	3708      	adds	r7, #8
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c86e:	b580      	push	{r7, lr}
 800c870:	b086      	sub	sp, #24
 800c872:	af00      	add	r7, sp, #0
 800c874:	4603      	mov	r3, r0
 800c876:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c878:	2301      	movs	r3, #1
 800c87a:	617b      	str	r3, [r7, #20]
 800c87c:	2300      	movs	r3, #0
 800c87e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c880:	79fb      	ldrb	r3, [r7, #7]
 800c882:	461a      	mov	r2, r3
 800c884:	6939      	ldr	r1, [r7, #16]
 800c886:	6978      	ldr	r0, [r7, #20]
 800c888:	f7ff ff79 	bl	800c77e <xQueueGenericCreate>
 800c88c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c88e:	68f8      	ldr	r0, [r7, #12]
 800c890:	f7ff ffd3 	bl	800c83a <prvInitialiseMutex>

		return xNewQueue;
 800c894:	68fb      	ldr	r3, [r7, #12]
	}
 800c896:	4618      	mov	r0, r3
 800c898:	3718      	adds	r7, #24
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
	...

0800c8a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b08e      	sub	sp, #56	@ 0x38
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	60f8      	str	r0, [r7, #12]
 800c8a8:	60b9      	str	r1, [r7, #8]
 800c8aa:	607a      	str	r2, [r7, #4]
 800c8ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d10b      	bne.n	800c8d4 <xQueueGenericSend+0x34>
	__asm volatile
 800c8bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8c0:	f383 8811 	msr	BASEPRI, r3
 800c8c4:	f3bf 8f6f 	isb	sy
 800c8c8:	f3bf 8f4f 	dsb	sy
 800c8cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c8ce:	bf00      	nop
 800c8d0:	bf00      	nop
 800c8d2:	e7fd      	b.n	800c8d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d103      	bne.n	800c8e2 <xQueueGenericSend+0x42>
 800c8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d101      	bne.n	800c8e6 <xQueueGenericSend+0x46>
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e000      	b.n	800c8e8 <xQueueGenericSend+0x48>
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d10b      	bne.n	800c904 <xQueueGenericSend+0x64>
	__asm volatile
 800c8ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f0:	f383 8811 	msr	BASEPRI, r3
 800c8f4:	f3bf 8f6f 	isb	sy
 800c8f8:	f3bf 8f4f 	dsb	sy
 800c8fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c8fe:	bf00      	nop
 800c900:	bf00      	nop
 800c902:	e7fd      	b.n	800c900 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	2b02      	cmp	r3, #2
 800c908:	d103      	bne.n	800c912 <xQueueGenericSend+0x72>
 800c90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c90c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c90e:	2b01      	cmp	r3, #1
 800c910:	d101      	bne.n	800c916 <xQueueGenericSend+0x76>
 800c912:	2301      	movs	r3, #1
 800c914:	e000      	b.n	800c918 <xQueueGenericSend+0x78>
 800c916:	2300      	movs	r3, #0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d10b      	bne.n	800c934 <xQueueGenericSend+0x94>
	__asm volatile
 800c91c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c920:	f383 8811 	msr	BASEPRI, r3
 800c924:	f3bf 8f6f 	isb	sy
 800c928:	f3bf 8f4f 	dsb	sy
 800c92c:	623b      	str	r3, [r7, #32]
}
 800c92e:	bf00      	nop
 800c930:	bf00      	nop
 800c932:	e7fd      	b.n	800c930 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c934:	f002 f83c 	bl	800e9b0 <xTaskGetSchedulerState>
 800c938:	4603      	mov	r3, r0
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d102      	bne.n	800c944 <xQueueGenericSend+0xa4>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d101      	bne.n	800c948 <xQueueGenericSend+0xa8>
 800c944:	2301      	movs	r3, #1
 800c946:	e000      	b.n	800c94a <xQueueGenericSend+0xaa>
 800c948:	2300      	movs	r3, #0
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d10b      	bne.n	800c966 <xQueueGenericSend+0xc6>
	__asm volatile
 800c94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c952:	f383 8811 	msr	BASEPRI, r3
 800c956:	f3bf 8f6f 	isb	sy
 800c95a:	f3bf 8f4f 	dsb	sy
 800c95e:	61fb      	str	r3, [r7, #28]
}
 800c960:	bf00      	nop
 800c962:	bf00      	nop
 800c964:	e7fd      	b.n	800c962 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c966:	f003 f897 	bl	800fa98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c96a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c96c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c972:	429a      	cmp	r2, r3
 800c974:	d302      	bcc.n	800c97c <xQueueGenericSend+0xdc>
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	2b02      	cmp	r3, #2
 800c97a:	d129      	bne.n	800c9d0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c97c:	683a      	ldr	r2, [r7, #0]
 800c97e:	68b9      	ldr	r1, [r7, #8]
 800c980:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c982:	f000 fbb9 	bl	800d0f8 <prvCopyDataToQueue>
 800c986:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c98a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d010      	beq.n	800c9b2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c992:	3324      	adds	r3, #36	@ 0x24
 800c994:	4618      	mov	r0, r3
 800c996:	f001 fd43 	bl	800e420 <xTaskRemoveFromEventList>
 800c99a:	4603      	mov	r3, r0
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d013      	beq.n	800c9c8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c9a0:	4b3f      	ldr	r3, [pc, #252]	@ (800caa0 <xQueueGenericSend+0x200>)
 800c9a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9a6:	601a      	str	r2, [r3, #0]
 800c9a8:	f3bf 8f4f 	dsb	sy
 800c9ac:	f3bf 8f6f 	isb	sy
 800c9b0:	e00a      	b.n	800c9c8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d007      	beq.n	800c9c8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c9b8:	4b39      	ldr	r3, [pc, #228]	@ (800caa0 <xQueueGenericSend+0x200>)
 800c9ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9be:	601a      	str	r2, [r3, #0]
 800c9c0:	f3bf 8f4f 	dsb	sy
 800c9c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c9c8:	f003 f898 	bl	800fafc <vPortExitCritical>
				return pdPASS;
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e063      	b.n	800ca98 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d103      	bne.n	800c9de <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c9d6:	f003 f891 	bl	800fafc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	e05c      	b.n	800ca98 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c9de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d106      	bne.n	800c9f2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c9e4:	f107 0314 	add.w	r3, r7, #20
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f001 fde1 	bl	800e5b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c9f2:	f003 f883 	bl	800fafc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c9f6:	f001 f9d3 	bl	800dda0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c9fa:	f003 f84d 	bl	800fa98 <vPortEnterCritical>
 800c9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ca04:	b25b      	sxtb	r3, r3
 800ca06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca0a:	d103      	bne.n	800ca14 <xQueueGenericSend+0x174>
 800ca0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ca14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca1a:	b25b      	sxtb	r3, r3
 800ca1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca20:	d103      	bne.n	800ca2a <xQueueGenericSend+0x18a>
 800ca22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca24:	2200      	movs	r2, #0
 800ca26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ca2a:	f003 f867 	bl	800fafc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca2e:	1d3a      	adds	r2, r7, #4
 800ca30:	f107 0314 	add.w	r3, r7, #20
 800ca34:	4611      	mov	r1, r2
 800ca36:	4618      	mov	r0, r3
 800ca38:	f001 fdd0 	bl	800e5dc <xTaskCheckForTimeOut>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d124      	bne.n	800ca8c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ca42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ca44:	f000 fc50 	bl	800d2e8 <prvIsQueueFull>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d018      	beq.n	800ca80 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ca4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca50:	3310      	adds	r3, #16
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	4611      	mov	r1, r2
 800ca56:	4618      	mov	r0, r3
 800ca58:	f001 fc52 	bl	800e300 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ca5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ca5e:	f000 fbdb 	bl	800d218 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ca62:	f001 f9ab 	bl	800ddbc <xTaskResumeAll>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	f47f af7c 	bne.w	800c966 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ca6e:	4b0c      	ldr	r3, [pc, #48]	@ (800caa0 <xQueueGenericSend+0x200>)
 800ca70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca74:	601a      	str	r2, [r3, #0]
 800ca76:	f3bf 8f4f 	dsb	sy
 800ca7a:	f3bf 8f6f 	isb	sy
 800ca7e:	e772      	b.n	800c966 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ca80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ca82:	f000 fbc9 	bl	800d218 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca86:	f001 f999 	bl	800ddbc <xTaskResumeAll>
 800ca8a:	e76c      	b.n	800c966 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ca8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ca8e:	f000 fbc3 	bl	800d218 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca92:	f001 f993 	bl	800ddbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ca96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3738      	adds	r7, #56	@ 0x38
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	e000ed04 	.word	0xe000ed04

0800caa4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b090      	sub	sp, #64	@ 0x40
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	607a      	str	r2, [r7, #4]
 800cab0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800cab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d10b      	bne.n	800cad4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800cabc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cac0:	f383 8811 	msr	BASEPRI, r3
 800cac4:	f3bf 8f6f 	isb	sy
 800cac8:	f3bf 8f4f 	dsb	sy
 800cacc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cace:	bf00      	nop
 800cad0:	bf00      	nop
 800cad2:	e7fd      	b.n	800cad0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d103      	bne.n	800cae2 <xQueueGenericSendFromISR+0x3e>
 800cada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cadc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d101      	bne.n	800cae6 <xQueueGenericSendFromISR+0x42>
 800cae2:	2301      	movs	r3, #1
 800cae4:	e000      	b.n	800cae8 <xQueueGenericSendFromISR+0x44>
 800cae6:	2300      	movs	r3, #0
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d10b      	bne.n	800cb04 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800caec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caf0:	f383 8811 	msr	BASEPRI, r3
 800caf4:	f3bf 8f6f 	isb	sy
 800caf8:	f3bf 8f4f 	dsb	sy
 800cafc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cafe:	bf00      	nop
 800cb00:	bf00      	nop
 800cb02:	e7fd      	b.n	800cb00 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	2b02      	cmp	r3, #2
 800cb08:	d103      	bne.n	800cb12 <xQueueGenericSendFromISR+0x6e>
 800cb0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d101      	bne.n	800cb16 <xQueueGenericSendFromISR+0x72>
 800cb12:	2301      	movs	r3, #1
 800cb14:	e000      	b.n	800cb18 <xQueueGenericSendFromISR+0x74>
 800cb16:	2300      	movs	r3, #0
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d10b      	bne.n	800cb34 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800cb1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb20:	f383 8811 	msr	BASEPRI, r3
 800cb24:	f3bf 8f6f 	isb	sy
 800cb28:	f3bf 8f4f 	dsb	sy
 800cb2c:	623b      	str	r3, [r7, #32]
}
 800cb2e:	bf00      	nop
 800cb30:	bf00      	nop
 800cb32:	e7fd      	b.n	800cb30 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb34:	f003 f890 	bl	800fc58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cb38:	f3ef 8211 	mrs	r2, BASEPRI
 800cb3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb40:	f383 8811 	msr	BASEPRI, r3
 800cb44:	f3bf 8f6f 	isb	sy
 800cb48:	f3bf 8f4f 	dsb	sy
 800cb4c:	61fa      	str	r2, [r7, #28]
 800cb4e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cb50:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cb52:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cb54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d302      	bcc.n	800cb66 <xQueueGenericSendFromISR+0xc2>
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	2b02      	cmp	r3, #2
 800cb64:	d12f      	bne.n	800cbc6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cb66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cb6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb74:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cb76:	683a      	ldr	r2, [r7, #0]
 800cb78:	68b9      	ldr	r1, [r7, #8]
 800cb7a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cb7c:	f000 fabc 	bl	800d0f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cb80:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800cb84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb88:	d112      	bne.n	800cbb0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d016      	beq.n	800cbc0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb94:	3324      	adds	r3, #36	@ 0x24
 800cb96:	4618      	mov	r0, r3
 800cb98:	f001 fc42 	bl	800e420 <xTaskRemoveFromEventList>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d00e      	beq.n	800cbc0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d00b      	beq.n	800cbc0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2201      	movs	r2, #1
 800cbac:	601a      	str	r2, [r3, #0]
 800cbae:	e007      	b.n	800cbc0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cbb0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	b2db      	uxtb	r3, r3
 800cbb8:	b25a      	sxtb	r2, r3
 800cbba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800cbc4:	e001      	b.n	800cbca <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cbca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbcc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cbd4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cbd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3740      	adds	r7, #64	@ 0x40
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b08c      	sub	sp, #48	@ 0x30
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cbec:	2300      	movs	r3, #0
 800cbee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cbf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d10b      	bne.n	800cc12 <xQueueReceive+0x32>
	__asm volatile
 800cbfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbfe:	f383 8811 	msr	BASEPRI, r3
 800cc02:	f3bf 8f6f 	isb	sy
 800cc06:	f3bf 8f4f 	dsb	sy
 800cc0a:	623b      	str	r3, [r7, #32]
}
 800cc0c:	bf00      	nop
 800cc0e:	bf00      	nop
 800cc10:	e7fd      	b.n	800cc0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d103      	bne.n	800cc20 <xQueueReceive+0x40>
 800cc18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d101      	bne.n	800cc24 <xQueueReceive+0x44>
 800cc20:	2301      	movs	r3, #1
 800cc22:	e000      	b.n	800cc26 <xQueueReceive+0x46>
 800cc24:	2300      	movs	r3, #0
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d10b      	bne.n	800cc42 <xQueueReceive+0x62>
	__asm volatile
 800cc2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc2e:	f383 8811 	msr	BASEPRI, r3
 800cc32:	f3bf 8f6f 	isb	sy
 800cc36:	f3bf 8f4f 	dsb	sy
 800cc3a:	61fb      	str	r3, [r7, #28]
}
 800cc3c:	bf00      	nop
 800cc3e:	bf00      	nop
 800cc40:	e7fd      	b.n	800cc3e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc42:	f001 feb5 	bl	800e9b0 <xTaskGetSchedulerState>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d102      	bne.n	800cc52 <xQueueReceive+0x72>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d101      	bne.n	800cc56 <xQueueReceive+0x76>
 800cc52:	2301      	movs	r3, #1
 800cc54:	e000      	b.n	800cc58 <xQueueReceive+0x78>
 800cc56:	2300      	movs	r3, #0
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d10b      	bne.n	800cc74 <xQueueReceive+0x94>
	__asm volatile
 800cc5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc60:	f383 8811 	msr	BASEPRI, r3
 800cc64:	f3bf 8f6f 	isb	sy
 800cc68:	f3bf 8f4f 	dsb	sy
 800cc6c:	61bb      	str	r3, [r7, #24]
}
 800cc6e:	bf00      	nop
 800cc70:	bf00      	nop
 800cc72:	e7fd      	b.n	800cc70 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc74:	f002 ff10 	bl	800fa98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc7c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cc7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d01f      	beq.n	800ccc4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cc84:	68b9      	ldr	r1, [r7, #8]
 800cc86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc88:	f000 faa0 	bl	800d1cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cc8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc8e:	1e5a      	subs	r2, r3, #1
 800cc90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc92:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc96:	691b      	ldr	r3, [r3, #16]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d00f      	beq.n	800ccbc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc9e:	3310      	adds	r3, #16
 800cca0:	4618      	mov	r0, r3
 800cca2:	f001 fbbd 	bl	800e420 <xTaskRemoveFromEventList>
 800cca6:	4603      	mov	r3, r0
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d007      	beq.n	800ccbc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ccac:	4b3c      	ldr	r3, [pc, #240]	@ (800cda0 <xQueueReceive+0x1c0>)
 800ccae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccb2:	601a      	str	r2, [r3, #0]
 800ccb4:	f3bf 8f4f 	dsb	sy
 800ccb8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ccbc:	f002 ff1e 	bl	800fafc <vPortExitCritical>
				return pdPASS;
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	e069      	b.n	800cd98 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d103      	bne.n	800ccd2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ccca:	f002 ff17 	bl	800fafc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	e062      	b.n	800cd98 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ccd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d106      	bne.n	800cce6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ccd8:	f107 0310 	add.w	r3, r7, #16
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f001 fc67 	bl	800e5b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cce2:	2301      	movs	r3, #1
 800cce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cce6:	f002 ff09 	bl	800fafc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ccea:	f001 f859 	bl	800dda0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ccee:	f002 fed3 	bl	800fa98 <vPortEnterCritical>
 800ccf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccf4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ccf8:	b25b      	sxtb	r3, r3
 800ccfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccfe:	d103      	bne.n	800cd08 <xQueueReceive+0x128>
 800cd00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd02:	2200      	movs	r2, #0
 800cd04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cd08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cd0e:	b25b      	sxtb	r3, r3
 800cd10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd14:	d103      	bne.n	800cd1e <xQueueReceive+0x13e>
 800cd16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cd1e:	f002 feed 	bl	800fafc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd22:	1d3a      	adds	r2, r7, #4
 800cd24:	f107 0310 	add.w	r3, r7, #16
 800cd28:	4611      	mov	r1, r2
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f001 fc56 	bl	800e5dc <xTaskCheckForTimeOut>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d123      	bne.n	800cd7e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd38:	f000 fac0 	bl	800d2bc <prvIsQueueEmpty>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d017      	beq.n	800cd72 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cd42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd44:	3324      	adds	r3, #36	@ 0x24
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	4611      	mov	r1, r2
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f001 fad8 	bl	800e300 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cd50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd52:	f000 fa61 	bl	800d218 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cd56:	f001 f831 	bl	800ddbc <xTaskResumeAll>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d189      	bne.n	800cc74 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800cd60:	4b0f      	ldr	r3, [pc, #60]	@ (800cda0 <xQueueReceive+0x1c0>)
 800cd62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd66:	601a      	str	r2, [r3, #0]
 800cd68:	f3bf 8f4f 	dsb	sy
 800cd6c:	f3bf 8f6f 	isb	sy
 800cd70:	e780      	b.n	800cc74 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cd72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd74:	f000 fa50 	bl	800d218 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd78:	f001 f820 	bl	800ddbc <xTaskResumeAll>
 800cd7c:	e77a      	b.n	800cc74 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cd7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd80:	f000 fa4a 	bl	800d218 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd84:	f001 f81a 	bl	800ddbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd8a:	f000 fa97 	bl	800d2bc <prvIsQueueEmpty>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	f43f af6f 	beq.w	800cc74 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cd96:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3730      	adds	r7, #48	@ 0x30
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}
 800cda0:	e000ed04 	.word	0xe000ed04

0800cda4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b08e      	sub	sp, #56	@ 0x38
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cdba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d10b      	bne.n	800cdd8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800cdc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdc4:	f383 8811 	msr	BASEPRI, r3
 800cdc8:	f3bf 8f6f 	isb	sy
 800cdcc:	f3bf 8f4f 	dsb	sy
 800cdd0:	623b      	str	r3, [r7, #32]
}
 800cdd2:	bf00      	nop
 800cdd4:	bf00      	nop
 800cdd6:	e7fd      	b.n	800cdd4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cdd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d00b      	beq.n	800cdf8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800cde0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cde4:	f383 8811 	msr	BASEPRI, r3
 800cde8:	f3bf 8f6f 	isb	sy
 800cdec:	f3bf 8f4f 	dsb	sy
 800cdf0:	61fb      	str	r3, [r7, #28]
}
 800cdf2:	bf00      	nop
 800cdf4:	bf00      	nop
 800cdf6:	e7fd      	b.n	800cdf4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cdf8:	f001 fdda 	bl	800e9b0 <xTaskGetSchedulerState>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d102      	bne.n	800ce08 <xQueueSemaphoreTake+0x64>
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d101      	bne.n	800ce0c <xQueueSemaphoreTake+0x68>
 800ce08:	2301      	movs	r3, #1
 800ce0a:	e000      	b.n	800ce0e <xQueueSemaphoreTake+0x6a>
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d10b      	bne.n	800ce2a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800ce12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce16:	f383 8811 	msr	BASEPRI, r3
 800ce1a:	f3bf 8f6f 	isb	sy
 800ce1e:	f3bf 8f4f 	dsb	sy
 800ce22:	61bb      	str	r3, [r7, #24]
}
 800ce24:	bf00      	nop
 800ce26:	bf00      	nop
 800ce28:	e7fd      	b.n	800ce26 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce2a:	f002 fe35 	bl	800fa98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ce2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce32:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ce34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d024      	beq.n	800ce84 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ce3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce3c:	1e5a      	subs	r2, r3, #1
 800ce3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce40:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d104      	bne.n	800ce54 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ce4a:	f001 ff43 	bl	800ecd4 <pvTaskIncrementMutexHeldCount>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce52:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce56:	691b      	ldr	r3, [r3, #16]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d00f      	beq.n	800ce7c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce5e:	3310      	adds	r3, #16
 800ce60:	4618      	mov	r0, r3
 800ce62:	f001 fadd 	bl	800e420 <xTaskRemoveFromEventList>
 800ce66:	4603      	mov	r3, r0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d007      	beq.n	800ce7c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ce6c:	4b54      	ldr	r3, [pc, #336]	@ (800cfc0 <xQueueSemaphoreTake+0x21c>)
 800ce6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce72:	601a      	str	r2, [r3, #0]
 800ce74:	f3bf 8f4f 	dsb	sy
 800ce78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ce7c:	f002 fe3e 	bl	800fafc <vPortExitCritical>
				return pdPASS;
 800ce80:	2301      	movs	r3, #1
 800ce82:	e098      	b.n	800cfb6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d112      	bne.n	800ceb0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ce8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d00b      	beq.n	800cea8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800ce90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce94:	f383 8811 	msr	BASEPRI, r3
 800ce98:	f3bf 8f6f 	isb	sy
 800ce9c:	f3bf 8f4f 	dsb	sy
 800cea0:	617b      	str	r3, [r7, #20]
}
 800cea2:	bf00      	nop
 800cea4:	bf00      	nop
 800cea6:	e7fd      	b.n	800cea4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cea8:	f002 fe28 	bl	800fafc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ceac:	2300      	movs	r3, #0
 800ceae:	e082      	b.n	800cfb6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ceb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d106      	bne.n	800cec4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ceb6:	f107 030c 	add.w	r3, r7, #12
 800ceba:	4618      	mov	r0, r3
 800cebc:	f001 fb78 	bl	800e5b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cec0:	2301      	movs	r3, #1
 800cec2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cec4:	f002 fe1a 	bl	800fafc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cec8:	f000 ff6a 	bl	800dda0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cecc:	f002 fde4 	bl	800fa98 <vPortEnterCritical>
 800ced0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ced2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ced6:	b25b      	sxtb	r3, r3
 800ced8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cedc:	d103      	bne.n	800cee6 <xQueueSemaphoreTake+0x142>
 800cede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cee0:	2200      	movs	r2, #0
 800cee2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cee8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ceec:	b25b      	sxtb	r3, r3
 800ceee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cef2:	d103      	bne.n	800cefc <xQueueSemaphoreTake+0x158>
 800cef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cef6:	2200      	movs	r2, #0
 800cef8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cefc:	f002 fdfe 	bl	800fafc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf00:	463a      	mov	r2, r7
 800cf02:	f107 030c 	add.w	r3, r7, #12
 800cf06:	4611      	mov	r1, r2
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f001 fb67 	bl	800e5dc <xTaskCheckForTimeOut>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d132      	bne.n	800cf7a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cf16:	f000 f9d1 	bl	800d2bc <prvIsQueueEmpty>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d026      	beq.n	800cf6e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cf20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d109      	bne.n	800cf3c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800cf28:	f002 fdb6 	bl	800fa98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cf2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf2e:	689b      	ldr	r3, [r3, #8]
 800cf30:	4618      	mov	r0, r3
 800cf32:	f001 fd5b 	bl	800e9ec <xTaskPriorityInherit>
 800cf36:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800cf38:	f002 fde0 	bl	800fafc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cf3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf3e:	3324      	adds	r3, #36	@ 0x24
 800cf40:	683a      	ldr	r2, [r7, #0]
 800cf42:	4611      	mov	r1, r2
 800cf44:	4618      	mov	r0, r3
 800cf46:	f001 f9db 	bl	800e300 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cf4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cf4c:	f000 f964 	bl	800d218 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cf50:	f000 ff34 	bl	800ddbc <xTaskResumeAll>
 800cf54:	4603      	mov	r3, r0
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	f47f af67 	bne.w	800ce2a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800cf5c:	4b18      	ldr	r3, [pc, #96]	@ (800cfc0 <xQueueSemaphoreTake+0x21c>)
 800cf5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf62:	601a      	str	r2, [r3, #0]
 800cf64:	f3bf 8f4f 	dsb	sy
 800cf68:	f3bf 8f6f 	isb	sy
 800cf6c:	e75d      	b.n	800ce2a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cf6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cf70:	f000 f952 	bl	800d218 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf74:	f000 ff22 	bl	800ddbc <xTaskResumeAll>
 800cf78:	e757      	b.n	800ce2a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cf7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cf7c:	f000 f94c 	bl	800d218 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf80:	f000 ff1c 	bl	800ddbc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cf86:	f000 f999 	bl	800d2bc <prvIsQueueEmpty>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	f43f af4c 	beq.w	800ce2a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cf92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d00d      	beq.n	800cfb4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800cf98:	f002 fd7e 	bl	800fa98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cf9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cf9e:	f000 f893 	bl	800d0c8 <prvGetDisinheritPriorityAfterTimeout>
 800cfa2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cfa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfa6:	689b      	ldr	r3, [r3, #8]
 800cfa8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f001 fdf6 	bl	800eb9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cfb0:	f002 fda4 	bl	800fafc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cfb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3738      	adds	r7, #56	@ 0x38
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	e000ed04 	.word	0xe000ed04

0800cfc4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b08e      	sub	sp, #56	@ 0x38
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	60b9      	str	r1, [r7, #8]
 800cfce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cfd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d10b      	bne.n	800cff2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800cfda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfde:	f383 8811 	msr	BASEPRI, r3
 800cfe2:	f3bf 8f6f 	isb	sy
 800cfe6:	f3bf 8f4f 	dsb	sy
 800cfea:	623b      	str	r3, [r7, #32]
}
 800cfec:	bf00      	nop
 800cfee:	bf00      	nop
 800cff0:	e7fd      	b.n	800cfee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d103      	bne.n	800d000 <xQueueReceiveFromISR+0x3c>
 800cff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d101      	bne.n	800d004 <xQueueReceiveFromISR+0x40>
 800d000:	2301      	movs	r3, #1
 800d002:	e000      	b.n	800d006 <xQueueReceiveFromISR+0x42>
 800d004:	2300      	movs	r3, #0
 800d006:	2b00      	cmp	r3, #0
 800d008:	d10b      	bne.n	800d022 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d00e:	f383 8811 	msr	BASEPRI, r3
 800d012:	f3bf 8f6f 	isb	sy
 800d016:	f3bf 8f4f 	dsb	sy
 800d01a:	61fb      	str	r3, [r7, #28]
}
 800d01c:	bf00      	nop
 800d01e:	bf00      	nop
 800d020:	e7fd      	b.n	800d01e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d022:	f002 fe19 	bl	800fc58 <vPortValidateInterruptPriority>
	__asm volatile
 800d026:	f3ef 8211 	mrs	r2, BASEPRI
 800d02a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d02e:	f383 8811 	msr	BASEPRI, r3
 800d032:	f3bf 8f6f 	isb	sy
 800d036:	f3bf 8f4f 	dsb	sy
 800d03a:	61ba      	str	r2, [r7, #24]
 800d03c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d03e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d040:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d046:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d02f      	beq.n	800d0ae <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d050:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d054:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d058:	68b9      	ldr	r1, [r7, #8]
 800d05a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d05c:	f000 f8b6 	bl	800d1cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d062:	1e5a      	subs	r2, r3, #1
 800d064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d066:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d068:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d070:	d112      	bne.n	800d098 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d074:	691b      	ldr	r3, [r3, #16]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d016      	beq.n	800d0a8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d07c:	3310      	adds	r3, #16
 800d07e:	4618      	mov	r0, r3
 800d080:	f001 f9ce 	bl	800e420 <xTaskRemoveFromEventList>
 800d084:	4603      	mov	r3, r0
 800d086:	2b00      	cmp	r3, #0
 800d088:	d00e      	beq.n	800d0a8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d00b      	beq.n	800d0a8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2201      	movs	r2, #1
 800d094:	601a      	str	r2, [r3, #0]
 800d096:	e007      	b.n	800d0a8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d09c:	3301      	adds	r3, #1
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	b25a      	sxtb	r2, r3
 800d0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0ac:	e001      	b.n	800d0b2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	f383 8811 	msr	BASEPRI, r3
}
 800d0bc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d0be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3738      	adds	r7, #56	@ 0x38
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}

0800d0c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b085      	sub	sp, #20
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d006      	beq.n	800d0e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d0e2:	60fb      	str	r3, [r7, #12]
 800d0e4:	e001      	b.n	800d0ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
	}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3714      	adds	r7, #20
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr

0800d0f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b086      	sub	sp, #24
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	60f8      	str	r0, [r7, #12]
 800d100:	60b9      	str	r1, [r7, #8]
 800d102:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d104:	2300      	movs	r3, #0
 800d106:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d10c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d112:	2b00      	cmp	r3, #0
 800d114:	d10d      	bne.n	800d132 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d14d      	bne.n	800d1ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	689b      	ldr	r3, [r3, #8]
 800d122:	4618      	mov	r0, r3
 800d124:	f001 fcca 	bl	800eabc <xTaskPriorityDisinherit>
 800d128:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	2200      	movs	r2, #0
 800d12e:	609a      	str	r2, [r3, #8]
 800d130:	e043      	b.n	800d1ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d119      	bne.n	800d16c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	6858      	ldr	r0, [r3, #4]
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d140:	461a      	mov	r2, r3
 800d142:	68b9      	ldr	r1, [r7, #8]
 800d144:	f004 fca7 	bl	8011a96 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	685a      	ldr	r2, [r3, #4]
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d150:	441a      	add	r2, r3
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	685a      	ldr	r2, [r3, #4]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	689b      	ldr	r3, [r3, #8]
 800d15e:	429a      	cmp	r2, r3
 800d160:	d32b      	bcc.n	800d1ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681a      	ldr	r2, [r3, #0]
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	605a      	str	r2, [r3, #4]
 800d16a:	e026      	b.n	800d1ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	68d8      	ldr	r0, [r3, #12]
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d174:	461a      	mov	r2, r3
 800d176:	68b9      	ldr	r1, [r7, #8]
 800d178:	f004 fc8d 	bl	8011a96 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	68da      	ldr	r2, [r3, #12]
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d184:	425b      	negs	r3, r3
 800d186:	441a      	add	r2, r3
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	68da      	ldr	r2, [r3, #12]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	429a      	cmp	r2, r3
 800d196:	d207      	bcs.n	800d1a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	689a      	ldr	r2, [r3, #8]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1a0:	425b      	negs	r3, r3
 800d1a2:	441a      	add	r2, r3
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2b02      	cmp	r3, #2
 800d1ac:	d105      	bne.n	800d1ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d002      	beq.n	800d1ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	3b01      	subs	r3, #1
 800d1b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	1c5a      	adds	r2, r3, #1
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d1c2:	697b      	ldr	r3, [r7, #20]
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3718      	adds	r7, #24
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d018      	beq.n	800d210 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	68da      	ldr	r2, [r3, #12]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1e6:	441a      	add	r2, r3
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	68da      	ldr	r2, [r3, #12]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d303      	bcc.n	800d200 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	68d9      	ldr	r1, [r3, #12]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d208:	461a      	mov	r2, r3
 800d20a:	6838      	ldr	r0, [r7, #0]
 800d20c:	f004 fc43 	bl	8011a96 <memcpy>
	}
}
 800d210:	bf00      	nop
 800d212:	3708      	adds	r7, #8
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d220:	f002 fc3a 	bl	800fa98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d22a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d22c:	e011      	b.n	800d252 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d232:	2b00      	cmp	r3, #0
 800d234:	d012      	beq.n	800d25c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	3324      	adds	r3, #36	@ 0x24
 800d23a:	4618      	mov	r0, r3
 800d23c:	f001 f8f0 	bl	800e420 <xTaskRemoveFromEventList>
 800d240:	4603      	mov	r3, r0
 800d242:	2b00      	cmp	r3, #0
 800d244:	d001      	beq.n	800d24a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d246:	f001 fa2d 	bl	800e6a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d24a:	7bfb      	ldrb	r3, [r7, #15]
 800d24c:	3b01      	subs	r3, #1
 800d24e:	b2db      	uxtb	r3, r3
 800d250:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d256:	2b00      	cmp	r3, #0
 800d258:	dce9      	bgt.n	800d22e <prvUnlockQueue+0x16>
 800d25a:	e000      	b.n	800d25e <prvUnlockQueue+0x46>
					break;
 800d25c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	22ff      	movs	r2, #255	@ 0xff
 800d262:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d266:	f002 fc49 	bl	800fafc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d26a:	f002 fc15 	bl	800fa98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d274:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d276:	e011      	b.n	800d29c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	691b      	ldr	r3, [r3, #16]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d012      	beq.n	800d2a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	3310      	adds	r3, #16
 800d284:	4618      	mov	r0, r3
 800d286:	f001 f8cb 	bl	800e420 <xTaskRemoveFromEventList>
 800d28a:	4603      	mov	r3, r0
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d001      	beq.n	800d294 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d290:	f001 fa08 	bl	800e6a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d294:	7bbb      	ldrb	r3, [r7, #14]
 800d296:	3b01      	subs	r3, #1
 800d298:	b2db      	uxtb	r3, r3
 800d29a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d29c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	dce9      	bgt.n	800d278 <prvUnlockQueue+0x60>
 800d2a4:	e000      	b.n	800d2a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d2a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	22ff      	movs	r2, #255	@ 0xff
 800d2ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d2b0:	f002 fc24 	bl	800fafc <vPortExitCritical>
}
 800d2b4:	bf00      	nop
 800d2b6:	3710      	adds	r7, #16
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b084      	sub	sp, #16
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d2c4:	f002 fbe8 	bl	800fa98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d102      	bne.n	800d2d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	60fb      	str	r3, [r7, #12]
 800d2d4:	e001      	b.n	800d2da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d2da:	f002 fc0f 	bl	800fafc <vPortExitCritical>

	return xReturn;
 800d2de:	68fb      	ldr	r3, [r7, #12]
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3710      	adds	r7, #16
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d2f0:	f002 fbd2 	bl	800fa98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d102      	bne.n	800d306 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d300:	2301      	movs	r3, #1
 800d302:	60fb      	str	r3, [r7, #12]
 800d304:	e001      	b.n	800d30a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d306:	2300      	movs	r3, #0
 800d308:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d30a:	f002 fbf7 	bl	800fafc <vPortExitCritical>

	return xReturn;
 800d30e:	68fb      	ldr	r3, [r7, #12]
}
 800d310:	4618      	mov	r0, r3
 800d312:	3710      	adds	r7, #16
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d318:	b480      	push	{r7}
 800d31a:	b085      	sub	sp, #20
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d322:	2300      	movs	r3, #0
 800d324:	60fb      	str	r3, [r7, #12]
 800d326:	e014      	b.n	800d352 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d328:	4a0f      	ldr	r2, [pc, #60]	@ (800d368 <vQueueAddToRegistry+0x50>)
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d10b      	bne.n	800d34c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d334:	490c      	ldr	r1, [pc, #48]	@ (800d368 <vQueueAddToRegistry+0x50>)
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	683a      	ldr	r2, [r7, #0]
 800d33a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d33e:	4a0a      	ldr	r2, [pc, #40]	@ (800d368 <vQueueAddToRegistry+0x50>)
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	00db      	lsls	r3, r3, #3
 800d344:	4413      	add	r3, r2
 800d346:	687a      	ldr	r2, [r7, #4]
 800d348:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d34a:	e006      	b.n	800d35a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	3301      	adds	r3, #1
 800d350:	60fb      	str	r3, [r7, #12]
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	2b07      	cmp	r3, #7
 800d356:	d9e7      	bls.n	800d328 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d358:	bf00      	nop
 800d35a:	bf00      	nop
 800d35c:	3714      	adds	r7, #20
 800d35e:	46bd      	mov	sp, r7
 800d360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d364:	4770      	bx	lr
 800d366:	bf00      	nop
 800d368:	20000e14 	.word	0x20000e14

0800d36c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b086      	sub	sp, #24
 800d370:	af00      	add	r7, sp, #0
 800d372:	60f8      	str	r0, [r7, #12]
 800d374:	60b9      	str	r1, [r7, #8]
 800d376:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d37c:	f002 fb8c 	bl	800fa98 <vPortEnterCritical>
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d386:	b25b      	sxtb	r3, r3
 800d388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d38c:	d103      	bne.n	800d396 <vQueueWaitForMessageRestricted+0x2a>
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	2200      	movs	r2, #0
 800d392:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d39c:	b25b      	sxtb	r3, r3
 800d39e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3a2:	d103      	bne.n	800d3ac <vQueueWaitForMessageRestricted+0x40>
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d3ac:	f002 fba6 	bl	800fafc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d106      	bne.n	800d3c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	3324      	adds	r3, #36	@ 0x24
 800d3bc:	687a      	ldr	r2, [r7, #4]
 800d3be:	68b9      	ldr	r1, [r7, #8]
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f001 f801 	bl	800e3c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d3c6:	6978      	ldr	r0, [r7, #20]
 800d3c8:	f7ff ff26 	bl	800d218 <prvUnlockQueue>
	}
 800d3cc:	bf00      	nop
 800d3ce:	3718      	adds	r7, #24
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b08e      	sub	sp, #56	@ 0x38
 800d3d8:	af04      	add	r7, sp, #16
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	607a      	str	r2, [r7, #4]
 800d3e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d3e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d10b      	bne.n	800d400 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d3e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3ec:	f383 8811 	msr	BASEPRI, r3
 800d3f0:	f3bf 8f6f 	isb	sy
 800d3f4:	f3bf 8f4f 	dsb	sy
 800d3f8:	623b      	str	r3, [r7, #32]
}
 800d3fa:	bf00      	nop
 800d3fc:	bf00      	nop
 800d3fe:	e7fd      	b.n	800d3fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d402:	2b00      	cmp	r3, #0
 800d404:	d10b      	bne.n	800d41e <xTaskCreateStatic+0x4a>
	__asm volatile
 800d406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d40a:	f383 8811 	msr	BASEPRI, r3
 800d40e:	f3bf 8f6f 	isb	sy
 800d412:	f3bf 8f4f 	dsb	sy
 800d416:	61fb      	str	r3, [r7, #28]
}
 800d418:	bf00      	nop
 800d41a:	bf00      	nop
 800d41c:	e7fd      	b.n	800d41a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d41e:	23a8      	movs	r3, #168	@ 0xa8
 800d420:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	2ba8      	cmp	r3, #168	@ 0xa8
 800d426:	d00b      	beq.n	800d440 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d42c:	f383 8811 	msr	BASEPRI, r3
 800d430:	f3bf 8f6f 	isb	sy
 800d434:	f3bf 8f4f 	dsb	sy
 800d438:	61bb      	str	r3, [r7, #24]
}
 800d43a:	bf00      	nop
 800d43c:	bf00      	nop
 800d43e:	e7fd      	b.n	800d43c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d440:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d444:	2b00      	cmp	r3, #0
 800d446:	d01e      	beq.n	800d486 <xTaskCreateStatic+0xb2>
 800d448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d01b      	beq.n	800d486 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d450:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d454:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d456:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d45a:	2202      	movs	r2, #2
 800d45c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d460:	2300      	movs	r3, #0
 800d462:	9303      	str	r3, [sp, #12]
 800d464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d466:	9302      	str	r3, [sp, #8]
 800d468:	f107 0314 	add.w	r3, r7, #20
 800d46c:	9301      	str	r3, [sp, #4]
 800d46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d470:	9300      	str	r3, [sp, #0]
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	687a      	ldr	r2, [r7, #4]
 800d476:	68b9      	ldr	r1, [r7, #8]
 800d478:	68f8      	ldr	r0, [r7, #12]
 800d47a:	f000 f851 	bl	800d520 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d47e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d480:	f000 f8f6 	bl	800d670 <prvAddNewTaskToReadyList>
 800d484:	e001      	b.n	800d48a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d486:	2300      	movs	r3, #0
 800d488:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d48a:	697b      	ldr	r3, [r7, #20]
	}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3728      	adds	r7, #40	@ 0x28
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d494:	b580      	push	{r7, lr}
 800d496:	b08c      	sub	sp, #48	@ 0x30
 800d498:	af04      	add	r7, sp, #16
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	603b      	str	r3, [r7, #0]
 800d4a0:	4613      	mov	r3, r2
 800d4a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d4a4:	88fb      	ldrh	r3, [r7, #6]
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f002 fc17 	bl	800fcdc <pvPortMalloc>
 800d4ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d00e      	beq.n	800d4d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d4b6:	20a8      	movs	r0, #168	@ 0xa8
 800d4b8:	f002 fc10 	bl	800fcdc <pvPortMalloc>
 800d4bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d4be:	69fb      	ldr	r3, [r7, #28]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d003      	beq.n	800d4cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d4c4:	69fb      	ldr	r3, [r7, #28]
 800d4c6:	697a      	ldr	r2, [r7, #20]
 800d4c8:	631a      	str	r2, [r3, #48]	@ 0x30
 800d4ca:	e005      	b.n	800d4d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d4cc:	6978      	ldr	r0, [r7, #20]
 800d4ce:	f002 fcd3 	bl	800fe78 <vPortFree>
 800d4d2:	e001      	b.n	800d4d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d4d8:	69fb      	ldr	r3, [r7, #28]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d017      	beq.n	800d50e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d4de:	69fb      	ldr	r3, [r7, #28]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d4e6:	88fa      	ldrh	r2, [r7, #6]
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	9303      	str	r3, [sp, #12]
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	9302      	str	r3, [sp, #8]
 800d4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4f2:	9301      	str	r3, [sp, #4]
 800d4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4f6:	9300      	str	r3, [sp, #0]
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	68b9      	ldr	r1, [r7, #8]
 800d4fc:	68f8      	ldr	r0, [r7, #12]
 800d4fe:	f000 f80f 	bl	800d520 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d502:	69f8      	ldr	r0, [r7, #28]
 800d504:	f000 f8b4 	bl	800d670 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d508:	2301      	movs	r3, #1
 800d50a:	61bb      	str	r3, [r7, #24]
 800d50c:	e002      	b.n	800d514 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d50e:	f04f 33ff 	mov.w	r3, #4294967295
 800d512:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d514:	69bb      	ldr	r3, [r7, #24]
	}
 800d516:	4618      	mov	r0, r3
 800d518:	3720      	adds	r7, #32
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
	...

0800d520 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b088      	sub	sp, #32
 800d524:	af00      	add	r7, sp, #0
 800d526:	60f8      	str	r0, [r7, #12]
 800d528:	60b9      	str	r1, [r7, #8]
 800d52a:	607a      	str	r2, [r7, #4]
 800d52c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d530:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	009b      	lsls	r3, r3, #2
 800d536:	461a      	mov	r2, r3
 800d538:	21a5      	movs	r1, #165	@ 0xa5
 800d53a:	f004 f940 	bl	80117be <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d540:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d548:	3b01      	subs	r3, #1
 800d54a:	009b      	lsls	r3, r3, #2
 800d54c:	4413      	add	r3, r2
 800d54e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d550:	69bb      	ldr	r3, [r7, #24]
 800d552:	f023 0307 	bic.w	r3, r3, #7
 800d556:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d558:	69bb      	ldr	r3, [r7, #24]
 800d55a:	f003 0307 	and.w	r3, r3, #7
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d00b      	beq.n	800d57a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d566:	f383 8811 	msr	BASEPRI, r3
 800d56a:	f3bf 8f6f 	isb	sy
 800d56e:	f3bf 8f4f 	dsb	sy
 800d572:	617b      	str	r3, [r7, #20]
}
 800d574:	bf00      	nop
 800d576:	bf00      	nop
 800d578:	e7fd      	b.n	800d576 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d01f      	beq.n	800d5c0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d580:	2300      	movs	r3, #0
 800d582:	61fb      	str	r3, [r7, #28]
 800d584:	e012      	b.n	800d5ac <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d586:	68ba      	ldr	r2, [r7, #8]
 800d588:	69fb      	ldr	r3, [r7, #28]
 800d58a:	4413      	add	r3, r2
 800d58c:	7819      	ldrb	r1, [r3, #0]
 800d58e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d590:	69fb      	ldr	r3, [r7, #28]
 800d592:	4413      	add	r3, r2
 800d594:	3334      	adds	r3, #52	@ 0x34
 800d596:	460a      	mov	r2, r1
 800d598:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d59a:	68ba      	ldr	r2, [r7, #8]
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	4413      	add	r3, r2
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d006      	beq.n	800d5b4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d5a6:	69fb      	ldr	r3, [r7, #28]
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	61fb      	str	r3, [r7, #28]
 800d5ac:	69fb      	ldr	r3, [r7, #28]
 800d5ae:	2b0f      	cmp	r3, #15
 800d5b0:	d9e9      	bls.n	800d586 <prvInitialiseNewTask+0x66>
 800d5b2:	e000      	b.n	800d5b6 <prvInitialiseNewTask+0x96>
			{
				break;
 800d5b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d5be:	e003      	b.n	800d5c8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ca:	2b37      	cmp	r3, #55	@ 0x37
 800d5cc:	d901      	bls.n	800d5d2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d5ce:	2337      	movs	r3, #55	@ 0x37
 800d5d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d5d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d5dc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e6:	3304      	adds	r3, #4
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f7fe ff4d 	bl	800c488 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f0:	3318      	adds	r3, #24
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7fe ff48 	bl	800c488 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d600:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d606:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d60a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d60c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d610:	2200      	movs	r2, #0
 800d612:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d618:	2200      	movs	r2, #0
 800d61a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d620:	3354      	adds	r3, #84	@ 0x54
 800d622:	224c      	movs	r2, #76	@ 0x4c
 800d624:	2100      	movs	r1, #0
 800d626:	4618      	mov	r0, r3
 800d628:	f004 f8c9 	bl	80117be <memset>
 800d62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d62e:	4a0d      	ldr	r2, [pc, #52]	@ (800d664 <prvInitialiseNewTask+0x144>)
 800d630:	659a      	str	r2, [r3, #88]	@ 0x58
 800d632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d634:	4a0c      	ldr	r2, [pc, #48]	@ (800d668 <prvInitialiseNewTask+0x148>)
 800d636:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d63a:	4a0c      	ldr	r2, [pc, #48]	@ (800d66c <prvInitialiseNewTask+0x14c>)
 800d63c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d63e:	683a      	ldr	r2, [r7, #0]
 800d640:	68f9      	ldr	r1, [r7, #12]
 800d642:	69b8      	ldr	r0, [r7, #24]
 800d644:	f002 f8f4 	bl	800f830 <pxPortInitialiseStack>
 800d648:	4602      	mov	r2, r0
 800d64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d64c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d64e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d650:	2b00      	cmp	r3, #0
 800d652:	d002      	beq.n	800d65a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d658:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d65a:	bf00      	nop
 800d65c:	3720      	adds	r7, #32
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	2001159c 	.word	0x2001159c
 800d668:	20011604 	.word	0x20011604
 800d66c:	2001166c 	.word	0x2001166c

0800d670 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d678:	f002 fa0e 	bl	800fa98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d67c:	4b2d      	ldr	r3, [pc, #180]	@ (800d734 <prvAddNewTaskToReadyList+0xc4>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	3301      	adds	r3, #1
 800d682:	4a2c      	ldr	r2, [pc, #176]	@ (800d734 <prvAddNewTaskToReadyList+0xc4>)
 800d684:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d686:	4b2c      	ldr	r3, [pc, #176]	@ (800d738 <prvAddNewTaskToReadyList+0xc8>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d109      	bne.n	800d6a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d68e:	4a2a      	ldr	r2, [pc, #168]	@ (800d738 <prvAddNewTaskToReadyList+0xc8>)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d694:	4b27      	ldr	r3, [pc, #156]	@ (800d734 <prvAddNewTaskToReadyList+0xc4>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d110      	bne.n	800d6be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d69c:	f001 f826 	bl	800e6ec <prvInitialiseTaskLists>
 800d6a0:	e00d      	b.n	800d6be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d6a2:	4b26      	ldr	r3, [pc, #152]	@ (800d73c <prvAddNewTaskToReadyList+0xcc>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d109      	bne.n	800d6be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d6aa:	4b23      	ldr	r3, [pc, #140]	@ (800d738 <prvAddNewTaskToReadyList+0xc8>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d802      	bhi.n	800d6be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d6b8:	4a1f      	ldr	r2, [pc, #124]	@ (800d738 <prvAddNewTaskToReadyList+0xc8>)
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d6be:	4b20      	ldr	r3, [pc, #128]	@ (800d740 <prvAddNewTaskToReadyList+0xd0>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	4a1e      	ldr	r2, [pc, #120]	@ (800d740 <prvAddNewTaskToReadyList+0xd0>)
 800d6c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d6c8:	4b1d      	ldr	r3, [pc, #116]	@ (800d740 <prvAddNewTaskToReadyList+0xd0>)
 800d6ca:	681a      	ldr	r2, [r3, #0]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6d4:	4b1b      	ldr	r3, [pc, #108]	@ (800d744 <prvAddNewTaskToReadyList+0xd4>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d903      	bls.n	800d6e4 <prvAddNewTaskToReadyList+0x74>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6e0:	4a18      	ldr	r2, [pc, #96]	@ (800d744 <prvAddNewTaskToReadyList+0xd4>)
 800d6e2:	6013      	str	r3, [r2, #0]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6e8:	4613      	mov	r3, r2
 800d6ea:	009b      	lsls	r3, r3, #2
 800d6ec:	4413      	add	r3, r2
 800d6ee:	009b      	lsls	r3, r3, #2
 800d6f0:	4a15      	ldr	r2, [pc, #84]	@ (800d748 <prvAddNewTaskToReadyList+0xd8>)
 800d6f2:	441a      	add	r2, r3
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	3304      	adds	r3, #4
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	4610      	mov	r0, r2
 800d6fc:	f7fe fed1 	bl	800c4a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d700:	f002 f9fc 	bl	800fafc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d704:	4b0d      	ldr	r3, [pc, #52]	@ (800d73c <prvAddNewTaskToReadyList+0xcc>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d00e      	beq.n	800d72a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d70c:	4b0a      	ldr	r3, [pc, #40]	@ (800d738 <prvAddNewTaskToReadyList+0xc8>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d716:	429a      	cmp	r2, r3
 800d718:	d207      	bcs.n	800d72a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d71a:	4b0c      	ldr	r3, [pc, #48]	@ (800d74c <prvAddNewTaskToReadyList+0xdc>)
 800d71c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d720:	601a      	str	r2, [r3, #0]
 800d722:	f3bf 8f4f 	dsb	sy
 800d726:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d72a:	bf00      	nop
 800d72c:	3708      	adds	r7, #8
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
 800d732:	bf00      	nop
 800d734:	20001328 	.word	0x20001328
 800d738:	20000e54 	.word	0x20000e54
 800d73c:	20001334 	.word	0x20001334
 800d740:	20001344 	.word	0x20001344
 800d744:	20001330 	.word	0x20001330
 800d748:	20000e58 	.word	0x20000e58
 800d74c:	e000ed04 	.word	0xe000ed04

0800d750 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d758:	f002 f99e 	bl	800fa98 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d102      	bne.n	800d768 <vTaskDelete+0x18>
 800d762:	4b2d      	ldr	r3, [pc, #180]	@ (800d818 <vTaskDelete+0xc8>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	e000      	b.n	800d76a <vTaskDelete+0x1a>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	3304      	adds	r3, #4
 800d770:	4618      	mov	r0, r3
 800d772:	f7fe fef3 	bl	800c55c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d004      	beq.n	800d788 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	3318      	adds	r3, #24
 800d782:	4618      	mov	r0, r3
 800d784:	f7fe feea 	bl	800c55c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800d788:	4b24      	ldr	r3, [pc, #144]	@ (800d81c <vTaskDelete+0xcc>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	3301      	adds	r3, #1
 800d78e:	4a23      	ldr	r2, [pc, #140]	@ (800d81c <vTaskDelete+0xcc>)
 800d790:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800d792:	4b21      	ldr	r3, [pc, #132]	@ (800d818 <vTaskDelete+0xc8>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	68fa      	ldr	r2, [r7, #12]
 800d798:	429a      	cmp	r2, r3
 800d79a:	d10b      	bne.n	800d7b4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	3304      	adds	r3, #4
 800d7a0:	4619      	mov	r1, r3
 800d7a2:	481f      	ldr	r0, [pc, #124]	@ (800d820 <vTaskDelete+0xd0>)
 800d7a4:	f7fe fe7d 	bl	800c4a2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800d7a8:	4b1e      	ldr	r3, [pc, #120]	@ (800d824 <vTaskDelete+0xd4>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	4a1d      	ldr	r2, [pc, #116]	@ (800d824 <vTaskDelete+0xd4>)
 800d7b0:	6013      	str	r3, [r2, #0]
 800d7b2:	e009      	b.n	800d7c8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800d7b4:	4b1c      	ldr	r3, [pc, #112]	@ (800d828 <vTaskDelete+0xd8>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	3b01      	subs	r3, #1
 800d7ba:	4a1b      	ldr	r2, [pc, #108]	@ (800d828 <vTaskDelete+0xd8>)
 800d7bc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800d7be:	68f8      	ldr	r0, [r7, #12]
 800d7c0:	f001 f8a0 	bl	800e904 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800d7c4:	f001 f8d4 	bl	800e970 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800d7c8:	f002 f998 	bl	800fafc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800d7cc:	4b17      	ldr	r3, [pc, #92]	@ (800d82c <vTaskDelete+0xdc>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d01c      	beq.n	800d80e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800d7d4:	4b10      	ldr	r3, [pc, #64]	@ (800d818 <vTaskDelete+0xc8>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	68fa      	ldr	r2, [r7, #12]
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d117      	bne.n	800d80e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800d7de:	4b14      	ldr	r3, [pc, #80]	@ (800d830 <vTaskDelete+0xe0>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d00b      	beq.n	800d7fe <vTaskDelete+0xae>
	__asm volatile
 800d7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7ea:	f383 8811 	msr	BASEPRI, r3
 800d7ee:	f3bf 8f6f 	isb	sy
 800d7f2:	f3bf 8f4f 	dsb	sy
 800d7f6:	60bb      	str	r3, [r7, #8]
}
 800d7f8:	bf00      	nop
 800d7fa:	bf00      	nop
 800d7fc:	e7fd      	b.n	800d7fa <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800d7fe:	4b0d      	ldr	r3, [pc, #52]	@ (800d834 <vTaskDelete+0xe4>)
 800d800:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d804:	601a      	str	r2, [r3, #0]
 800d806:	f3bf 8f4f 	dsb	sy
 800d80a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d80e:	bf00      	nop
 800d810:	3710      	adds	r7, #16
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	20000e54 	.word	0x20000e54
 800d81c:	20001344 	.word	0x20001344
 800d820:	200012fc 	.word	0x200012fc
 800d824:	20001310 	.word	0x20001310
 800d828:	20001328 	.word	0x20001328
 800d82c:	20001334 	.word	0x20001334
 800d830:	20001350 	.word	0x20001350
 800d834:	e000ed04 	.word	0xe000ed04

0800d838 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b084      	sub	sp, #16
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d840:	2300      	movs	r3, #0
 800d842:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d018      	beq.n	800d87c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d84a:	4b14      	ldr	r3, [pc, #80]	@ (800d89c <vTaskDelay+0x64>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d00b      	beq.n	800d86a <vTaskDelay+0x32>
	__asm volatile
 800d852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d856:	f383 8811 	msr	BASEPRI, r3
 800d85a:	f3bf 8f6f 	isb	sy
 800d85e:	f3bf 8f4f 	dsb	sy
 800d862:	60bb      	str	r3, [r7, #8]
}
 800d864:	bf00      	nop
 800d866:	bf00      	nop
 800d868:	e7fd      	b.n	800d866 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d86a:	f000 fa99 	bl	800dda0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d86e:	2100      	movs	r1, #0
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f001 fbb1 	bl	800efd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d876:	f000 faa1 	bl	800ddbc <xTaskResumeAll>
 800d87a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d107      	bne.n	800d892 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d882:	4b07      	ldr	r3, [pc, #28]	@ (800d8a0 <vTaskDelay+0x68>)
 800d884:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d888:	601a      	str	r2, [r3, #0]
 800d88a:	f3bf 8f4f 	dsb	sy
 800d88e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d892:	bf00      	nop
 800d894:	3710      	adds	r7, #16
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}
 800d89a:	bf00      	nop
 800d89c:	20001350 	.word	0x20001350
 800d8a0:	e000ed04 	.word	0xe000ed04

0800d8a4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b088      	sub	sp, #32
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800d8b0:	69bb      	ldr	r3, [r7, #24]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d10b      	bne.n	800d8ce <eTaskGetState+0x2a>
	__asm volatile
 800d8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8ba:	f383 8811 	msr	BASEPRI, r3
 800d8be:	f3bf 8f6f 	isb	sy
 800d8c2:	f3bf 8f4f 	dsb	sy
 800d8c6:	60bb      	str	r3, [r7, #8]
}
 800d8c8:	bf00      	nop
 800d8ca:	bf00      	nop
 800d8cc:	e7fd      	b.n	800d8ca <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800d8ce:	4b24      	ldr	r3, [pc, #144]	@ (800d960 <eTaskGetState+0xbc>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	69ba      	ldr	r2, [r7, #24]
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d102      	bne.n	800d8de <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	77fb      	strb	r3, [r7, #31]
 800d8dc:	e03a      	b.n	800d954 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800d8de:	f002 f8db 	bl	800fa98 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800d8e2:	69bb      	ldr	r3, [r7, #24]
 800d8e4:	695b      	ldr	r3, [r3, #20]
 800d8e6:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800d8e8:	4b1e      	ldr	r3, [pc, #120]	@ (800d964 <eTaskGetState+0xc0>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800d8ee:	4b1e      	ldr	r3, [pc, #120]	@ (800d968 <eTaskGetState+0xc4>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800d8f4:	f002 f902 	bl	800fafc <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800d8f8:	697a      	ldr	r2, [r7, #20]
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d003      	beq.n	800d908 <eTaskGetState+0x64>
 800d900:	697a      	ldr	r2, [r7, #20]
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	429a      	cmp	r2, r3
 800d906:	d102      	bne.n	800d90e <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800d908:	2302      	movs	r3, #2
 800d90a:	77fb      	strb	r3, [r7, #31]
 800d90c:	e022      	b.n	800d954 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	4a16      	ldr	r2, [pc, #88]	@ (800d96c <eTaskGetState+0xc8>)
 800d912:	4293      	cmp	r3, r2
 800d914:	d112      	bne.n	800d93c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800d916:	69bb      	ldr	r3, [r7, #24]
 800d918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d10b      	bne.n	800d936 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800d924:	b2db      	uxtb	r3, r3
 800d926:	2b01      	cmp	r3, #1
 800d928:	d102      	bne.n	800d930 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800d92a:	2302      	movs	r3, #2
 800d92c:	77fb      	strb	r3, [r7, #31]
 800d92e:	e011      	b.n	800d954 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800d930:	2303      	movs	r3, #3
 800d932:	77fb      	strb	r3, [r7, #31]
 800d934:	e00e      	b.n	800d954 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800d936:	2302      	movs	r3, #2
 800d938:	77fb      	strb	r3, [r7, #31]
 800d93a:	e00b      	b.n	800d954 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	4a0c      	ldr	r2, [pc, #48]	@ (800d970 <eTaskGetState+0xcc>)
 800d940:	4293      	cmp	r3, r2
 800d942:	d002      	beq.n	800d94a <eTaskGetState+0xa6>
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d102      	bne.n	800d950 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800d94a:	2304      	movs	r3, #4
 800d94c:	77fb      	strb	r3, [r7, #31]
 800d94e:	e001      	b.n	800d954 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800d950:	2301      	movs	r3, #1
 800d952:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800d954:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800d956:	4618      	mov	r0, r3
 800d958:	3720      	adds	r7, #32
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	bf00      	nop
 800d960:	20000e54 	.word	0x20000e54
 800d964:	200012e0 	.word	0x200012e0
 800d968:	200012e4 	.word	0x200012e4
 800d96c:	20001314 	.word	0x20001314
 800d970:	200012fc 	.word	0x200012fc

0800d974 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800d974:	b580      	push	{r7, lr}
 800d976:	b088      	sub	sp, #32
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800d97e:	2300      	movs	r3, #0
 800d980:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	2b37      	cmp	r3, #55	@ 0x37
 800d986:	d90b      	bls.n	800d9a0 <vTaskPrioritySet+0x2c>
	__asm volatile
 800d988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d98c:	f383 8811 	msr	BASEPRI, r3
 800d990:	f3bf 8f6f 	isb	sy
 800d994:	f3bf 8f4f 	dsb	sy
 800d998:	60fb      	str	r3, [r7, #12]
}
 800d99a:	bf00      	nop
 800d99c:	bf00      	nop
 800d99e:	e7fd      	b.n	800d99c <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	2b37      	cmp	r3, #55	@ 0x37
 800d9a4:	d901      	bls.n	800d9aa <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d9a6:	2337      	movs	r3, #55	@ 0x37
 800d9a8:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800d9aa:	f002 f875 	bl	800fa98 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d102      	bne.n	800d9ba <vTaskPrioritySet+0x46>
 800d9b4:	4b3a      	ldr	r3, [pc, #232]	@ (800daa0 <vTaskPrioritySet+0x12c>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	e000      	b.n	800d9bc <vTaskPrioritySet+0x48>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800d9be:	69bb      	ldr	r3, [r7, #24]
 800d9c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d9c2:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800d9c4:	697a      	ldr	r2, [r7, #20]
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d063      	beq.n	800da94 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800d9cc:	683a      	ldr	r2, [r7, #0]
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d90d      	bls.n	800d9f0 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 800d9d4:	4b32      	ldr	r3, [pc, #200]	@ (800daa0 <vTaskPrioritySet+0x12c>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	69ba      	ldr	r2, [r7, #24]
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d00f      	beq.n	800d9fe <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800d9de:	4b30      	ldr	r3, [pc, #192]	@ (800daa0 <vTaskPrioritySet+0x12c>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9e4:	683a      	ldr	r2, [r7, #0]
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d309      	bcc.n	800d9fe <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	61fb      	str	r3, [r7, #28]
 800d9ee:	e006      	b.n	800d9fe <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800d9f0:	4b2b      	ldr	r3, [pc, #172]	@ (800daa0 <vTaskPrioritySet+0x12c>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	69ba      	ldr	r2, [r7, #24]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d101      	bne.n	800d9fe <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da02:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800da04:	69bb      	ldr	r3, [r7, #24]
 800da06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da08:	69bb      	ldr	r3, [r7, #24]
 800da0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da0c:	429a      	cmp	r2, r3
 800da0e:	d102      	bne.n	800da16 <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 800da10:	69bb      	ldr	r3, [r7, #24]
 800da12:	683a      	ldr	r2, [r7, #0]
 800da14:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800da16:	69bb      	ldr	r3, [r7, #24]
 800da18:	683a      	ldr	r2, [r7, #0]
 800da1a:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800da1c:	69bb      	ldr	r3, [r7, #24]
 800da1e:	699b      	ldr	r3, [r3, #24]
 800da20:	2b00      	cmp	r3, #0
 800da22:	db04      	blt.n	800da2e <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800da2a:	69bb      	ldr	r3, [r7, #24]
 800da2c:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800da2e:	69bb      	ldr	r3, [r7, #24]
 800da30:	6959      	ldr	r1, [r3, #20]
 800da32:	693a      	ldr	r2, [r7, #16]
 800da34:	4613      	mov	r3, r2
 800da36:	009b      	lsls	r3, r3, #2
 800da38:	4413      	add	r3, r2
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	4a19      	ldr	r2, [pc, #100]	@ (800daa4 <vTaskPrioritySet+0x130>)
 800da3e:	4413      	add	r3, r2
 800da40:	4299      	cmp	r1, r3
 800da42:	d11c      	bne.n	800da7e <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da44:	69bb      	ldr	r3, [r7, #24]
 800da46:	3304      	adds	r3, #4
 800da48:	4618      	mov	r0, r3
 800da4a:	f7fe fd87 	bl	800c55c <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800da4e:	69bb      	ldr	r3, [r7, #24]
 800da50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da52:	4b15      	ldr	r3, [pc, #84]	@ (800daa8 <vTaskPrioritySet+0x134>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	429a      	cmp	r2, r3
 800da58:	d903      	bls.n	800da62 <vTaskPrioritySet+0xee>
 800da5a:	69bb      	ldr	r3, [r7, #24]
 800da5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da5e:	4a12      	ldr	r2, [pc, #72]	@ (800daa8 <vTaskPrioritySet+0x134>)
 800da60:	6013      	str	r3, [r2, #0]
 800da62:	69bb      	ldr	r3, [r7, #24]
 800da64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da66:	4613      	mov	r3, r2
 800da68:	009b      	lsls	r3, r3, #2
 800da6a:	4413      	add	r3, r2
 800da6c:	009b      	lsls	r3, r3, #2
 800da6e:	4a0d      	ldr	r2, [pc, #52]	@ (800daa4 <vTaskPrioritySet+0x130>)
 800da70:	441a      	add	r2, r3
 800da72:	69bb      	ldr	r3, [r7, #24]
 800da74:	3304      	adds	r3, #4
 800da76:	4619      	mov	r1, r3
 800da78:	4610      	mov	r0, r2
 800da7a:	f7fe fd12 	bl	800c4a2 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800da7e:	69fb      	ldr	r3, [r7, #28]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d007      	beq.n	800da94 <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800da84:	4b09      	ldr	r3, [pc, #36]	@ (800daac <vTaskPrioritySet+0x138>)
 800da86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da8a:	601a      	str	r2, [r3, #0]
 800da8c:	f3bf 8f4f 	dsb	sy
 800da90:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800da94:	f002 f832 	bl	800fafc <vPortExitCritical>
	}
 800da98:	bf00      	nop
 800da9a:	3720      	adds	r7, #32
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	20000e54 	.word	0x20000e54
 800daa4:	20000e58 	.word	0x20000e58
 800daa8:	20001330 	.word	0x20001330
 800daac:	e000ed04 	.word	0xe000ed04

0800dab0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b084      	sub	sp, #16
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800dab8:	f001 ffee 	bl	800fa98 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d102      	bne.n	800dac8 <vTaskSuspend+0x18>
 800dac2:	4b30      	ldr	r3, [pc, #192]	@ (800db84 <vTaskSuspend+0xd4>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	e000      	b.n	800daca <vTaskSuspend+0x1a>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	3304      	adds	r3, #4
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7fe fd43 	bl	800c55c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d004      	beq.n	800dae8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	3318      	adds	r3, #24
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7fe fd3a 	bl	800c55c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	3304      	adds	r3, #4
 800daec:	4619      	mov	r1, r3
 800daee:	4826      	ldr	r0, [pc, #152]	@ (800db88 <vTaskSuspend+0xd8>)
 800daf0:	f7fe fcd7 	bl	800c4a2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800dafa:	b2db      	uxtb	r3, r3
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d103      	bne.n	800db08 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	2200      	movs	r2, #0
 800db04:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800db08:	f001 fff8 	bl	800fafc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800db0c:	4b1f      	ldr	r3, [pc, #124]	@ (800db8c <vTaskSuspend+0xdc>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d005      	beq.n	800db20 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800db14:	f001 ffc0 	bl	800fa98 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800db18:	f000 ff2a 	bl	800e970 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800db1c:	f001 ffee 	bl	800fafc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800db20:	4b18      	ldr	r3, [pc, #96]	@ (800db84 <vTaskSuspend+0xd4>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	68fa      	ldr	r2, [r7, #12]
 800db26:	429a      	cmp	r2, r3
 800db28:	d128      	bne.n	800db7c <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800db2a:	4b18      	ldr	r3, [pc, #96]	@ (800db8c <vTaskSuspend+0xdc>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d018      	beq.n	800db64 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800db32:	4b17      	ldr	r3, [pc, #92]	@ (800db90 <vTaskSuspend+0xe0>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d00b      	beq.n	800db52 <vTaskSuspend+0xa2>
	__asm volatile
 800db3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db3e:	f383 8811 	msr	BASEPRI, r3
 800db42:	f3bf 8f6f 	isb	sy
 800db46:	f3bf 8f4f 	dsb	sy
 800db4a:	60bb      	str	r3, [r7, #8]
}
 800db4c:	bf00      	nop
 800db4e:	bf00      	nop
 800db50:	e7fd      	b.n	800db4e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800db52:	4b10      	ldr	r3, [pc, #64]	@ (800db94 <vTaskSuspend+0xe4>)
 800db54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db58:	601a      	str	r2, [r3, #0]
 800db5a:	f3bf 8f4f 	dsb	sy
 800db5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db62:	e00b      	b.n	800db7c <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800db64:	4b08      	ldr	r3, [pc, #32]	@ (800db88 <vTaskSuspend+0xd8>)
 800db66:	681a      	ldr	r2, [r3, #0]
 800db68:	4b0b      	ldr	r3, [pc, #44]	@ (800db98 <vTaskSuspend+0xe8>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d103      	bne.n	800db78 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800db70:	4b04      	ldr	r3, [pc, #16]	@ (800db84 <vTaskSuspend+0xd4>)
 800db72:	2200      	movs	r2, #0
 800db74:	601a      	str	r2, [r3, #0]
	}
 800db76:	e001      	b.n	800db7c <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800db78:	f000 fb5c 	bl	800e234 <vTaskSwitchContext>
	}
 800db7c:	bf00      	nop
 800db7e:	3710      	adds	r7, #16
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}
 800db84:	20000e54 	.word	0x20000e54
 800db88:	20001314 	.word	0x20001314
 800db8c:	20001334 	.word	0x20001334
 800db90:	20001350 	.word	0x20001350
 800db94:	e000ed04 	.word	0xe000ed04
 800db98:	20001328 	.word	0x20001328

0800db9c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800db9c:	b480      	push	{r7}
 800db9e:	b087      	sub	sp, #28
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800dba4:	2300      	movs	r3, #0
 800dba6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d10b      	bne.n	800dbca <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800dbb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbb6:	f383 8811 	msr	BASEPRI, r3
 800dbba:	f3bf 8f6f 	isb	sy
 800dbbe:	f3bf 8f4f 	dsb	sy
 800dbc2:	60fb      	str	r3, [r7, #12]
}
 800dbc4:	bf00      	nop
 800dbc6:	bf00      	nop
 800dbc8:	e7fd      	b.n	800dbc6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	695b      	ldr	r3, [r3, #20]
 800dbce:	4a0a      	ldr	r2, [pc, #40]	@ (800dbf8 <prvTaskIsTaskSuspended+0x5c>)
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	d10a      	bne.n	800dbea <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbd8:	4a08      	ldr	r2, [pc, #32]	@ (800dbfc <prvTaskIsTaskSuspended+0x60>)
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d005      	beq.n	800dbea <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d101      	bne.n	800dbea <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dbea:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800dbec:	4618      	mov	r0, r3
 800dbee:	371c      	adds	r7, #28
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr
 800dbf8:	20001314 	.word	0x20001314
 800dbfc:	200012e8 	.word	0x200012e8

0800dc00 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d10b      	bne.n	800dc2a <vTaskResume+0x2a>
	__asm volatile
 800dc12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc16:	f383 8811 	msr	BASEPRI, r3
 800dc1a:	f3bf 8f6f 	isb	sy
 800dc1e:	f3bf 8f4f 	dsb	sy
 800dc22:	60bb      	str	r3, [r7, #8]
}
 800dc24:	bf00      	nop
 800dc26:	bf00      	nop
 800dc28:	e7fd      	b.n	800dc26 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800dc2a:	4b21      	ldr	r3, [pc, #132]	@ (800dcb0 <vTaskResume+0xb0>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	68fa      	ldr	r2, [r7, #12]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d038      	beq.n	800dca6 <vTaskResume+0xa6>
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d035      	beq.n	800dca6 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800dc3a:	f001 ff2d 	bl	800fa98 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800dc3e:	68f8      	ldr	r0, [r7, #12]
 800dc40:	f7ff ffac 	bl	800db9c <prvTaskIsTaskSuspended>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d02b      	beq.n	800dca2 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	3304      	adds	r3, #4
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7fe fc84 	bl	800c55c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc58:	4b16      	ldr	r3, [pc, #88]	@ (800dcb4 <vTaskResume+0xb4>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d903      	bls.n	800dc68 <vTaskResume+0x68>
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc64:	4a13      	ldr	r2, [pc, #76]	@ (800dcb4 <vTaskResume+0xb4>)
 800dc66:	6013      	str	r3, [r2, #0]
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc6c:	4613      	mov	r3, r2
 800dc6e:	009b      	lsls	r3, r3, #2
 800dc70:	4413      	add	r3, r2
 800dc72:	009b      	lsls	r3, r3, #2
 800dc74:	4a10      	ldr	r2, [pc, #64]	@ (800dcb8 <vTaskResume+0xb8>)
 800dc76:	441a      	add	r2, r3
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	3304      	adds	r3, #4
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	4610      	mov	r0, r2
 800dc80:	f7fe fc0f 	bl	800c4a2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc88:	4b09      	ldr	r3, [pc, #36]	@ (800dcb0 <vTaskResume+0xb0>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d307      	bcc.n	800dca2 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800dc92:	4b0a      	ldr	r3, [pc, #40]	@ (800dcbc <vTaskResume+0xbc>)
 800dc94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc98:	601a      	str	r2, [r3, #0]
 800dc9a:	f3bf 8f4f 	dsb	sy
 800dc9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800dca2:	f001 ff2b 	bl	800fafc <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dca6:	bf00      	nop
 800dca8:	3710      	adds	r7, #16
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	20000e54 	.word	0x20000e54
 800dcb4:	20001330 	.word	0x20001330
 800dcb8:	20000e58 	.word	0x20000e58
 800dcbc:	e000ed04 	.word	0xe000ed04

0800dcc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b08a      	sub	sp, #40	@ 0x28
 800dcc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dcca:	2300      	movs	r3, #0
 800dccc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dcce:	463a      	mov	r2, r7
 800dcd0:	1d39      	adds	r1, r7, #4
 800dcd2:	f107 0308 	add.w	r3, r7, #8
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7fe f9c6 	bl	800c068 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dcdc:	6839      	ldr	r1, [r7, #0]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	68ba      	ldr	r2, [r7, #8]
 800dce2:	9202      	str	r2, [sp, #8]
 800dce4:	9301      	str	r3, [sp, #4]
 800dce6:	2300      	movs	r3, #0
 800dce8:	9300      	str	r3, [sp, #0]
 800dcea:	2300      	movs	r3, #0
 800dcec:	460a      	mov	r2, r1
 800dcee:	4924      	ldr	r1, [pc, #144]	@ (800dd80 <vTaskStartScheduler+0xc0>)
 800dcf0:	4824      	ldr	r0, [pc, #144]	@ (800dd84 <vTaskStartScheduler+0xc4>)
 800dcf2:	f7ff fb6f 	bl	800d3d4 <xTaskCreateStatic>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	4a23      	ldr	r2, [pc, #140]	@ (800dd88 <vTaskStartScheduler+0xc8>)
 800dcfa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dcfc:	4b22      	ldr	r3, [pc, #136]	@ (800dd88 <vTaskStartScheduler+0xc8>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d002      	beq.n	800dd0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dd04:	2301      	movs	r3, #1
 800dd06:	617b      	str	r3, [r7, #20]
 800dd08:	e001      	b.n	800dd0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	2b01      	cmp	r3, #1
 800dd12:	d102      	bne.n	800dd1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dd14:	f001 f9b4 	bl	800f080 <xTimerCreateTimerTask>
 800dd18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d11b      	bne.n	800dd58 <vTaskStartScheduler+0x98>
	__asm volatile
 800dd20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd24:	f383 8811 	msr	BASEPRI, r3
 800dd28:	f3bf 8f6f 	isb	sy
 800dd2c:	f3bf 8f4f 	dsb	sy
 800dd30:	613b      	str	r3, [r7, #16]
}
 800dd32:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dd34:	4b15      	ldr	r3, [pc, #84]	@ (800dd8c <vTaskStartScheduler+0xcc>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	3354      	adds	r3, #84	@ 0x54
 800dd3a:	4a15      	ldr	r2, [pc, #84]	@ (800dd90 <vTaskStartScheduler+0xd0>)
 800dd3c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dd3e:	4b15      	ldr	r3, [pc, #84]	@ (800dd94 <vTaskStartScheduler+0xd4>)
 800dd40:	f04f 32ff 	mov.w	r2, #4294967295
 800dd44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dd46:	4b14      	ldr	r3, [pc, #80]	@ (800dd98 <vTaskStartScheduler+0xd8>)
 800dd48:	2201      	movs	r2, #1
 800dd4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dd4c:	4b13      	ldr	r3, [pc, #76]	@ (800dd9c <vTaskStartScheduler+0xdc>)
 800dd4e:	2200      	movs	r2, #0
 800dd50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dd52:	f001 fdfd 	bl	800f950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dd56:	e00f      	b.n	800dd78 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd5e:	d10b      	bne.n	800dd78 <vTaskStartScheduler+0xb8>
	__asm volatile
 800dd60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd64:	f383 8811 	msr	BASEPRI, r3
 800dd68:	f3bf 8f6f 	isb	sy
 800dd6c:	f3bf 8f4f 	dsb	sy
 800dd70:	60fb      	str	r3, [r7, #12]
}
 800dd72:	bf00      	nop
 800dd74:	bf00      	nop
 800dd76:	e7fd      	b.n	800dd74 <vTaskStartScheduler+0xb4>
}
 800dd78:	bf00      	nop
 800dd7a:	3718      	adds	r7, #24
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	0801430c 	.word	0x0801430c
 800dd84:	0800e6bd 	.word	0x0800e6bd
 800dd88:	2000134c 	.word	0x2000134c
 800dd8c:	20000e54 	.word	0x20000e54
 800dd90:	200003d4 	.word	0x200003d4
 800dd94:	20001348 	.word	0x20001348
 800dd98:	20001334 	.word	0x20001334
 800dd9c:	2000132c 	.word	0x2000132c

0800dda0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dda0:	b480      	push	{r7}
 800dda2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dda4:	4b04      	ldr	r3, [pc, #16]	@ (800ddb8 <vTaskSuspendAll+0x18>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	3301      	adds	r3, #1
 800ddaa:	4a03      	ldr	r2, [pc, #12]	@ (800ddb8 <vTaskSuspendAll+0x18>)
 800ddac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ddae:	bf00      	nop
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb6:	4770      	bx	lr
 800ddb8:	20001350 	.word	0x20001350

0800ddbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b084      	sub	sp, #16
 800ddc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ddca:	4b42      	ldr	r3, [pc, #264]	@ (800ded4 <xTaskResumeAll+0x118>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d10b      	bne.n	800ddea <xTaskResumeAll+0x2e>
	__asm volatile
 800ddd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddd6:	f383 8811 	msr	BASEPRI, r3
 800ddda:	f3bf 8f6f 	isb	sy
 800ddde:	f3bf 8f4f 	dsb	sy
 800dde2:	603b      	str	r3, [r7, #0]
}
 800dde4:	bf00      	nop
 800dde6:	bf00      	nop
 800dde8:	e7fd      	b.n	800dde6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ddea:	f001 fe55 	bl	800fa98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ddee:	4b39      	ldr	r3, [pc, #228]	@ (800ded4 <xTaskResumeAll+0x118>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	3b01      	subs	r3, #1
 800ddf4:	4a37      	ldr	r2, [pc, #220]	@ (800ded4 <xTaskResumeAll+0x118>)
 800ddf6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddf8:	4b36      	ldr	r3, [pc, #216]	@ (800ded4 <xTaskResumeAll+0x118>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d162      	bne.n	800dec6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800de00:	4b35      	ldr	r3, [pc, #212]	@ (800ded8 <xTaskResumeAll+0x11c>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d05e      	beq.n	800dec6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de08:	e02f      	b.n	800de6a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de0a:	4b34      	ldr	r3, [pc, #208]	@ (800dedc <xTaskResumeAll+0x120>)
 800de0c:	68db      	ldr	r3, [r3, #12]
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	3318      	adds	r3, #24
 800de16:	4618      	mov	r0, r3
 800de18:	f7fe fba0 	bl	800c55c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	3304      	adds	r3, #4
 800de20:	4618      	mov	r0, r3
 800de22:	f7fe fb9b 	bl	800c55c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de2a:	4b2d      	ldr	r3, [pc, #180]	@ (800dee0 <xTaskResumeAll+0x124>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d903      	bls.n	800de3a <xTaskResumeAll+0x7e>
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de36:	4a2a      	ldr	r2, [pc, #168]	@ (800dee0 <xTaskResumeAll+0x124>)
 800de38:	6013      	str	r3, [r2, #0]
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de3e:	4613      	mov	r3, r2
 800de40:	009b      	lsls	r3, r3, #2
 800de42:	4413      	add	r3, r2
 800de44:	009b      	lsls	r3, r3, #2
 800de46:	4a27      	ldr	r2, [pc, #156]	@ (800dee4 <xTaskResumeAll+0x128>)
 800de48:	441a      	add	r2, r3
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	3304      	adds	r3, #4
 800de4e:	4619      	mov	r1, r3
 800de50:	4610      	mov	r0, r2
 800de52:	f7fe fb26 	bl	800c4a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de5a:	4b23      	ldr	r3, [pc, #140]	@ (800dee8 <xTaskResumeAll+0x12c>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de60:	429a      	cmp	r2, r3
 800de62:	d302      	bcc.n	800de6a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800de64:	4b21      	ldr	r3, [pc, #132]	@ (800deec <xTaskResumeAll+0x130>)
 800de66:	2201      	movs	r2, #1
 800de68:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de6a:	4b1c      	ldr	r3, [pc, #112]	@ (800dedc <xTaskResumeAll+0x120>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d1cb      	bne.n	800de0a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d001      	beq.n	800de7c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800de78:	f000 fd7a 	bl	800e970 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800de7c:	4b1c      	ldr	r3, [pc, #112]	@ (800def0 <xTaskResumeAll+0x134>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d010      	beq.n	800deaa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800de88:	f000 f91a 	bl	800e0c0 <xTaskIncrementTick>
 800de8c:	4603      	mov	r3, r0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d002      	beq.n	800de98 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800de92:	4b16      	ldr	r3, [pc, #88]	@ (800deec <xTaskResumeAll+0x130>)
 800de94:	2201      	movs	r2, #1
 800de96:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	3b01      	subs	r3, #1
 800de9c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d1f1      	bne.n	800de88 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800dea4:	4b12      	ldr	r3, [pc, #72]	@ (800def0 <xTaskResumeAll+0x134>)
 800dea6:	2200      	movs	r2, #0
 800dea8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800deaa:	4b10      	ldr	r3, [pc, #64]	@ (800deec <xTaskResumeAll+0x130>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d009      	beq.n	800dec6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800deb2:	2301      	movs	r3, #1
 800deb4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800deb6:	4b0f      	ldr	r3, [pc, #60]	@ (800def4 <xTaskResumeAll+0x138>)
 800deb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800debc:	601a      	str	r2, [r3, #0]
 800debe:	f3bf 8f4f 	dsb	sy
 800dec2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dec6:	f001 fe19 	bl	800fafc <vPortExitCritical>

	return xAlreadyYielded;
 800deca:	68bb      	ldr	r3, [r7, #8]
}
 800decc:	4618      	mov	r0, r3
 800dece:	3710      	adds	r7, #16
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	20001350 	.word	0x20001350
 800ded8:	20001328 	.word	0x20001328
 800dedc:	200012e8 	.word	0x200012e8
 800dee0:	20001330 	.word	0x20001330
 800dee4:	20000e58 	.word	0x20000e58
 800dee8:	20000e54 	.word	0x20000e54
 800deec:	2000133c 	.word	0x2000133c
 800def0:	20001338 	.word	0x20001338
 800def4:	e000ed04 	.word	0xe000ed04

0800def8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800def8:	b480      	push	{r7}
 800defa:	b083      	sub	sp, #12
 800defc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800defe:	4b05      	ldr	r3, [pc, #20]	@ (800df14 <xTaskGetTickCount+0x1c>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800df04:	687b      	ldr	r3, [r7, #4]
}
 800df06:	4618      	mov	r0, r3
 800df08:	370c      	adds	r7, #12
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr
 800df12:	bf00      	nop
 800df14:	2000132c 	.word	0x2000132c

0800df18 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800df18:	b480      	push	{r7}
 800df1a:	b08b      	sub	sp, #44	@ 0x2c
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800df22:	2300      	movs	r3, #0
 800df24:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d05b      	beq.n	800dfe6 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	61bb      	str	r3, [r7, #24]
 800df32:	69bb      	ldr	r3, [r7, #24]
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	685a      	ldr	r2, [r3, #4]
 800df38:	69bb      	ldr	r3, [r7, #24]
 800df3a:	605a      	str	r2, [r3, #4]
 800df3c:	69bb      	ldr	r3, [r7, #24]
 800df3e:	685a      	ldr	r2, [r3, #4]
 800df40:	69bb      	ldr	r3, [r7, #24]
 800df42:	3308      	adds	r3, #8
 800df44:	429a      	cmp	r2, r3
 800df46:	d104      	bne.n	800df52 <prvSearchForNameWithinSingleList+0x3a>
 800df48:	69bb      	ldr	r3, [r7, #24]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	685a      	ldr	r2, [r3, #4]
 800df4e:	69bb      	ldr	r3, [r7, #24]
 800df50:	605a      	str	r2, [r3, #4]
 800df52:	69bb      	ldr	r3, [r7, #24]
 800df54:	685b      	ldr	r3, [r3, #4]
 800df56:	68db      	ldr	r3, [r3, #12]
 800df58:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	613b      	str	r3, [r7, #16]
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	685b      	ldr	r3, [r3, #4]
 800df62:	685a      	ldr	r2, [r3, #4]
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	605a      	str	r2, [r3, #4]
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	685a      	ldr	r2, [r3, #4]
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	3308      	adds	r3, #8
 800df70:	429a      	cmp	r2, r3
 800df72:	d104      	bne.n	800df7e <prvSearchForNameWithinSingleList+0x66>
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	685b      	ldr	r3, [r3, #4]
 800df78:	685a      	ldr	r2, [r3, #4]
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	605a      	str	r2, [r3, #4]
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	685b      	ldr	r3, [r3, #4]
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800df86:	2300      	movs	r3, #0
 800df88:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df8a:	2300      	movs	r3, #0
 800df8c:	623b      	str	r3, [r7, #32]
 800df8e:	e01c      	b.n	800dfca <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800df90:	68fa      	ldr	r2, [r7, #12]
 800df92:	6a3b      	ldr	r3, [r7, #32]
 800df94:	4413      	add	r3, r2
 800df96:	3334      	adds	r3, #52	@ 0x34
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800df9c:	683a      	ldr	r2, [r7, #0]
 800df9e:	6a3b      	ldr	r3, [r7, #32]
 800dfa0:	4413      	add	r3, r2
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	7afa      	ldrb	r2, [r7, #11]
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	d002      	beq.n	800dfb0 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800dfaa:	2301      	movs	r3, #1
 800dfac:	61fb      	str	r3, [r7, #28]
 800dfae:	e006      	b.n	800dfbe <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800dfb0:	7afb      	ldrb	r3, [r7, #11]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d103      	bne.n	800dfbe <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800dfba:	2301      	movs	r3, #1
 800dfbc:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800dfbe:	69fb      	ldr	r3, [r7, #28]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d106      	bne.n	800dfd2 <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dfc4:	6a3b      	ldr	r3, [r7, #32]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	623b      	str	r3, [r7, #32]
 800dfca:	6a3b      	ldr	r3, [r7, #32]
 800dfcc:	2b0f      	cmp	r3, #15
 800dfce:	d9df      	bls.n	800df90 <prvSearchForNameWithinSingleList+0x78>
 800dfd0:	e000      	b.n	800dfd4 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800dfd2:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800dfd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d104      	bne.n	800dfe4 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800dfda:	68fa      	ldr	r2, [r7, #12]
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d1bb      	bne.n	800df5a <prvSearchForNameWithinSingleList+0x42>
 800dfe2:	e000      	b.n	800dfe6 <prvSearchForNameWithinSingleList+0xce>
					break;
 800dfe4:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800dfe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	372c      	adds	r7, #44	@ 0x2c
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b086      	sub	sp, #24
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800dffc:	2338      	movs	r3, #56	@ 0x38
 800dffe:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f7f2 f8e5 	bl	80001d0 <strlen>
 800e006:	4603      	mov	r3, r0
 800e008:	2b0f      	cmp	r3, #15
 800e00a:	d90b      	bls.n	800e024 <xTaskGetHandle+0x30>
	__asm volatile
 800e00c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e010:	f383 8811 	msr	BASEPRI, r3
 800e014:	f3bf 8f6f 	isb	sy
 800e018:	f3bf 8f4f 	dsb	sy
 800e01c:	60fb      	str	r3, [r7, #12]
}
 800e01e:	bf00      	nop
 800e020:	bf00      	nop
 800e022:	e7fd      	b.n	800e020 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800e024:	f7ff febc 	bl	800dda0 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	3b01      	subs	r3, #1
 800e02c:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800e02e:	697a      	ldr	r2, [r7, #20]
 800e030:	4613      	mov	r3, r2
 800e032:	009b      	lsls	r3, r3, #2
 800e034:	4413      	add	r3, r2
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	4a1c      	ldr	r2, [pc, #112]	@ (800e0ac <xTaskGetHandle+0xb8>)
 800e03a:	4413      	add	r3, r2
 800e03c:	6879      	ldr	r1, [r7, #4]
 800e03e:	4618      	mov	r0, r3
 800e040:	f7ff ff6a 	bl	800df18 <prvSearchForNameWithinSingleList>
 800e044:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d103      	bne.n	800e054 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d1ea      	bne.n	800e028 <xTaskGetHandle+0x34>
 800e052:	e000      	b.n	800e056 <xTaskGetHandle+0x62>
					break;
 800e054:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d106      	bne.n	800e06a <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800e05c:	4b14      	ldr	r3, [pc, #80]	@ (800e0b0 <xTaskGetHandle+0xbc>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	6879      	ldr	r1, [r7, #4]
 800e062:	4618      	mov	r0, r3
 800e064:	f7ff ff58 	bl	800df18 <prvSearchForNameWithinSingleList>
 800e068:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d106      	bne.n	800e07e <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800e070:	4b10      	ldr	r3, [pc, #64]	@ (800e0b4 <xTaskGetHandle+0xc0>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	6879      	ldr	r1, [r7, #4]
 800e076:	4618      	mov	r0, r3
 800e078:	f7ff ff4e 	bl	800df18 <prvSearchForNameWithinSingleList>
 800e07c:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d104      	bne.n	800e08e <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800e084:	6879      	ldr	r1, [r7, #4]
 800e086:	480c      	ldr	r0, [pc, #48]	@ (800e0b8 <xTaskGetHandle+0xc4>)
 800e088:	f7ff ff46 	bl	800df18 <prvSearchForNameWithinSingleList>
 800e08c:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d104      	bne.n	800e09e <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800e094:	6879      	ldr	r1, [r7, #4]
 800e096:	4809      	ldr	r0, [pc, #36]	@ (800e0bc <xTaskGetHandle+0xc8>)
 800e098:	f7ff ff3e 	bl	800df18 <prvSearchForNameWithinSingleList>
 800e09c:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800e09e:	f7ff fe8d 	bl	800ddbc <xTaskResumeAll>

		return pxTCB;
 800e0a2:	693b      	ldr	r3, [r7, #16]
	}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3718      	adds	r7, #24
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}
 800e0ac:	20000e58 	.word	0x20000e58
 800e0b0:	200012e0 	.word	0x200012e0
 800e0b4:	200012e4 	.word	0x200012e4
 800e0b8:	20001314 	.word	0x20001314
 800e0bc:	200012fc 	.word	0x200012fc

0800e0c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b086      	sub	sp, #24
 800e0c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0ca:	4b4f      	ldr	r3, [pc, #316]	@ (800e208 <xTaskIncrementTick+0x148>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	f040 8090 	bne.w	800e1f4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e0d4:	4b4d      	ldr	r3, [pc, #308]	@ (800e20c <xTaskIncrementTick+0x14c>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	3301      	adds	r3, #1
 800e0da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e0dc:	4a4b      	ldr	r2, [pc, #300]	@ (800e20c <xTaskIncrementTick+0x14c>)
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d121      	bne.n	800e12c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e0e8:	4b49      	ldr	r3, [pc, #292]	@ (800e210 <xTaskIncrementTick+0x150>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d00b      	beq.n	800e10a <xTaskIncrementTick+0x4a>
	__asm volatile
 800e0f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0f6:	f383 8811 	msr	BASEPRI, r3
 800e0fa:	f3bf 8f6f 	isb	sy
 800e0fe:	f3bf 8f4f 	dsb	sy
 800e102:	603b      	str	r3, [r7, #0]
}
 800e104:	bf00      	nop
 800e106:	bf00      	nop
 800e108:	e7fd      	b.n	800e106 <xTaskIncrementTick+0x46>
 800e10a:	4b41      	ldr	r3, [pc, #260]	@ (800e210 <xTaskIncrementTick+0x150>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	60fb      	str	r3, [r7, #12]
 800e110:	4b40      	ldr	r3, [pc, #256]	@ (800e214 <xTaskIncrementTick+0x154>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	4a3e      	ldr	r2, [pc, #248]	@ (800e210 <xTaskIncrementTick+0x150>)
 800e116:	6013      	str	r3, [r2, #0]
 800e118:	4a3e      	ldr	r2, [pc, #248]	@ (800e214 <xTaskIncrementTick+0x154>)
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	6013      	str	r3, [r2, #0]
 800e11e:	4b3e      	ldr	r3, [pc, #248]	@ (800e218 <xTaskIncrementTick+0x158>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	3301      	adds	r3, #1
 800e124:	4a3c      	ldr	r2, [pc, #240]	@ (800e218 <xTaskIncrementTick+0x158>)
 800e126:	6013      	str	r3, [r2, #0]
 800e128:	f000 fc22 	bl	800e970 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e12c:	4b3b      	ldr	r3, [pc, #236]	@ (800e21c <xTaskIncrementTick+0x15c>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	693a      	ldr	r2, [r7, #16]
 800e132:	429a      	cmp	r2, r3
 800e134:	d349      	bcc.n	800e1ca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e136:	4b36      	ldr	r3, [pc, #216]	@ (800e210 <xTaskIncrementTick+0x150>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d104      	bne.n	800e14a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e140:	4b36      	ldr	r3, [pc, #216]	@ (800e21c <xTaskIncrementTick+0x15c>)
 800e142:	f04f 32ff 	mov.w	r2, #4294967295
 800e146:	601a      	str	r2, [r3, #0]
					break;
 800e148:	e03f      	b.n	800e1ca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e14a:	4b31      	ldr	r3, [pc, #196]	@ (800e210 <xTaskIncrementTick+0x150>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	68db      	ldr	r3, [r3, #12]
 800e152:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	685b      	ldr	r3, [r3, #4]
 800e158:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e15a:	693a      	ldr	r2, [r7, #16]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	429a      	cmp	r2, r3
 800e160:	d203      	bcs.n	800e16a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e162:	4a2e      	ldr	r2, [pc, #184]	@ (800e21c <xTaskIncrementTick+0x15c>)
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e168:	e02f      	b.n	800e1ca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	3304      	adds	r3, #4
 800e16e:	4618      	mov	r0, r3
 800e170:	f7fe f9f4 	bl	800c55c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d004      	beq.n	800e186 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	3318      	adds	r3, #24
 800e180:	4618      	mov	r0, r3
 800e182:	f7fe f9eb 	bl	800c55c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e18a:	4b25      	ldr	r3, [pc, #148]	@ (800e220 <xTaskIncrementTick+0x160>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	429a      	cmp	r2, r3
 800e190:	d903      	bls.n	800e19a <xTaskIncrementTick+0xda>
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e196:	4a22      	ldr	r2, [pc, #136]	@ (800e220 <xTaskIncrementTick+0x160>)
 800e198:	6013      	str	r3, [r2, #0]
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e19e:	4613      	mov	r3, r2
 800e1a0:	009b      	lsls	r3, r3, #2
 800e1a2:	4413      	add	r3, r2
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	4a1f      	ldr	r2, [pc, #124]	@ (800e224 <xTaskIncrementTick+0x164>)
 800e1a8:	441a      	add	r2, r3
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	3304      	adds	r3, #4
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	4610      	mov	r0, r2
 800e1b2:	f7fe f976 	bl	800c4a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1ba:	4b1b      	ldr	r3, [pc, #108]	@ (800e228 <xTaskIncrementTick+0x168>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d3b8      	bcc.n	800e136 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e1c8:	e7b5      	b.n	800e136 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e1ca:	4b17      	ldr	r3, [pc, #92]	@ (800e228 <xTaskIncrementTick+0x168>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1d0:	4914      	ldr	r1, [pc, #80]	@ (800e224 <xTaskIncrementTick+0x164>)
 800e1d2:	4613      	mov	r3, r2
 800e1d4:	009b      	lsls	r3, r3, #2
 800e1d6:	4413      	add	r3, r2
 800e1d8:	009b      	lsls	r3, r3, #2
 800e1da:	440b      	add	r3, r1
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	d901      	bls.n	800e1e6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e1e6:	4b11      	ldr	r3, [pc, #68]	@ (800e22c <xTaskIncrementTick+0x16c>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d007      	beq.n	800e1fe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	617b      	str	r3, [r7, #20]
 800e1f2:	e004      	b.n	800e1fe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e1f4:	4b0e      	ldr	r3, [pc, #56]	@ (800e230 <xTaskIncrementTick+0x170>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	3301      	adds	r3, #1
 800e1fa:	4a0d      	ldr	r2, [pc, #52]	@ (800e230 <xTaskIncrementTick+0x170>)
 800e1fc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e1fe:	697b      	ldr	r3, [r7, #20]
}
 800e200:	4618      	mov	r0, r3
 800e202:	3718      	adds	r7, #24
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}
 800e208:	20001350 	.word	0x20001350
 800e20c:	2000132c 	.word	0x2000132c
 800e210:	200012e0 	.word	0x200012e0
 800e214:	200012e4 	.word	0x200012e4
 800e218:	20001340 	.word	0x20001340
 800e21c:	20001348 	.word	0x20001348
 800e220:	20001330 	.word	0x20001330
 800e224:	20000e58 	.word	0x20000e58
 800e228:	20000e54 	.word	0x20000e54
 800e22c:	2000133c 	.word	0x2000133c
 800e230:	20001338 	.word	0x20001338

0800e234 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e234:	b480      	push	{r7}
 800e236:	b085      	sub	sp, #20
 800e238:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e23a:	4b2b      	ldr	r3, [pc, #172]	@ (800e2e8 <vTaskSwitchContext+0xb4>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d003      	beq.n	800e24a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e242:	4b2a      	ldr	r3, [pc, #168]	@ (800e2ec <vTaskSwitchContext+0xb8>)
 800e244:	2201      	movs	r2, #1
 800e246:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e248:	e047      	b.n	800e2da <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e24a:	4b28      	ldr	r3, [pc, #160]	@ (800e2ec <vTaskSwitchContext+0xb8>)
 800e24c:	2200      	movs	r2, #0
 800e24e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e250:	4b27      	ldr	r3, [pc, #156]	@ (800e2f0 <vTaskSwitchContext+0xbc>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	60fb      	str	r3, [r7, #12]
 800e256:	e011      	b.n	800e27c <vTaskSwitchContext+0x48>
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d10b      	bne.n	800e276 <vTaskSwitchContext+0x42>
	__asm volatile
 800e25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e262:	f383 8811 	msr	BASEPRI, r3
 800e266:	f3bf 8f6f 	isb	sy
 800e26a:	f3bf 8f4f 	dsb	sy
 800e26e:	607b      	str	r3, [r7, #4]
}
 800e270:	bf00      	nop
 800e272:	bf00      	nop
 800e274:	e7fd      	b.n	800e272 <vTaskSwitchContext+0x3e>
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	3b01      	subs	r3, #1
 800e27a:	60fb      	str	r3, [r7, #12]
 800e27c:	491d      	ldr	r1, [pc, #116]	@ (800e2f4 <vTaskSwitchContext+0xc0>)
 800e27e:	68fa      	ldr	r2, [r7, #12]
 800e280:	4613      	mov	r3, r2
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	4413      	add	r3, r2
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	440b      	add	r3, r1
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d0e3      	beq.n	800e258 <vTaskSwitchContext+0x24>
 800e290:	68fa      	ldr	r2, [r7, #12]
 800e292:	4613      	mov	r3, r2
 800e294:	009b      	lsls	r3, r3, #2
 800e296:	4413      	add	r3, r2
 800e298:	009b      	lsls	r3, r3, #2
 800e29a:	4a16      	ldr	r2, [pc, #88]	@ (800e2f4 <vTaskSwitchContext+0xc0>)
 800e29c:	4413      	add	r3, r2
 800e29e:	60bb      	str	r3, [r7, #8]
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	685a      	ldr	r2, [r3, #4]
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	605a      	str	r2, [r3, #4]
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	685a      	ldr	r2, [r3, #4]
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	3308      	adds	r3, #8
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d104      	bne.n	800e2c0 <vTaskSwitchContext+0x8c>
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	685b      	ldr	r3, [r3, #4]
 800e2ba:	685a      	ldr	r2, [r3, #4]
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	605a      	str	r2, [r3, #4]
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	68db      	ldr	r3, [r3, #12]
 800e2c6:	4a0c      	ldr	r2, [pc, #48]	@ (800e2f8 <vTaskSwitchContext+0xc4>)
 800e2c8:	6013      	str	r3, [r2, #0]
 800e2ca:	4a09      	ldr	r2, [pc, #36]	@ (800e2f0 <vTaskSwitchContext+0xbc>)
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e2d0:	4b09      	ldr	r3, [pc, #36]	@ (800e2f8 <vTaskSwitchContext+0xc4>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	3354      	adds	r3, #84	@ 0x54
 800e2d6:	4a09      	ldr	r2, [pc, #36]	@ (800e2fc <vTaskSwitchContext+0xc8>)
 800e2d8:	6013      	str	r3, [r2, #0]
}
 800e2da:	bf00      	nop
 800e2dc:	3714      	adds	r7, #20
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr
 800e2e6:	bf00      	nop
 800e2e8:	20001350 	.word	0x20001350
 800e2ec:	2000133c 	.word	0x2000133c
 800e2f0:	20001330 	.word	0x20001330
 800e2f4:	20000e58 	.word	0x20000e58
 800e2f8:	20000e54 	.word	0x20000e54
 800e2fc:	200003d4 	.word	0x200003d4

0800e300 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b084      	sub	sp, #16
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d10b      	bne.n	800e328 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e314:	f383 8811 	msr	BASEPRI, r3
 800e318:	f3bf 8f6f 	isb	sy
 800e31c:	f3bf 8f4f 	dsb	sy
 800e320:	60fb      	str	r3, [r7, #12]
}
 800e322:	bf00      	nop
 800e324:	bf00      	nop
 800e326:	e7fd      	b.n	800e324 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e328:	4b07      	ldr	r3, [pc, #28]	@ (800e348 <vTaskPlaceOnEventList+0x48>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	3318      	adds	r3, #24
 800e32e:	4619      	mov	r1, r3
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f7fe f8da 	bl	800c4ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e336:	2101      	movs	r1, #1
 800e338:	6838      	ldr	r0, [r7, #0]
 800e33a:	f000 fe4d 	bl	800efd8 <prvAddCurrentTaskToDelayedList>
}
 800e33e:	bf00      	nop
 800e340:	3710      	adds	r7, #16
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	20000e54 	.word	0x20000e54

0800e34c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b086      	sub	sp, #24
 800e350:	af00      	add	r7, sp, #0
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	60b9      	str	r1, [r7, #8]
 800e356:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d10b      	bne.n	800e376 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800e35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e362:	f383 8811 	msr	BASEPRI, r3
 800e366:	f3bf 8f6f 	isb	sy
 800e36a:	f3bf 8f4f 	dsb	sy
 800e36e:	617b      	str	r3, [r7, #20]
}
 800e370:	bf00      	nop
 800e372:	bf00      	nop
 800e374:	e7fd      	b.n	800e372 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800e376:	4b12      	ldr	r3, [pc, #72]	@ (800e3c0 <vTaskPlaceOnUnorderedEventList+0x74>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d10b      	bne.n	800e396 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800e37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e382:	f383 8811 	msr	BASEPRI, r3
 800e386:	f3bf 8f6f 	isb	sy
 800e38a:	f3bf 8f4f 	dsb	sy
 800e38e:	613b      	str	r3, [r7, #16]
}
 800e390:	bf00      	nop
 800e392:	bf00      	nop
 800e394:	e7fd      	b.n	800e392 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e396:	4b0b      	ldr	r3, [pc, #44]	@ (800e3c4 <vTaskPlaceOnUnorderedEventList+0x78>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	68ba      	ldr	r2, [r7, #8]
 800e39c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e3a0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e3a2:	4b08      	ldr	r3, [pc, #32]	@ (800e3c4 <vTaskPlaceOnUnorderedEventList+0x78>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	3318      	adds	r3, #24
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	68f8      	ldr	r0, [r7, #12]
 800e3ac:	f7fe f879 	bl	800c4a2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e3b0:	2101      	movs	r1, #1
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f000 fe10 	bl	800efd8 <prvAddCurrentTaskToDelayedList>
}
 800e3b8:	bf00      	nop
 800e3ba:	3718      	adds	r7, #24
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}
 800e3c0:	20001350 	.word	0x20001350
 800e3c4:	20000e54 	.word	0x20000e54

0800e3c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b086      	sub	sp, #24
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	60f8      	str	r0, [r7, #12]
 800e3d0:	60b9      	str	r1, [r7, #8]
 800e3d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d10b      	bne.n	800e3f2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e3da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3de:	f383 8811 	msr	BASEPRI, r3
 800e3e2:	f3bf 8f6f 	isb	sy
 800e3e6:	f3bf 8f4f 	dsb	sy
 800e3ea:	617b      	str	r3, [r7, #20]
}
 800e3ec:	bf00      	nop
 800e3ee:	bf00      	nop
 800e3f0:	e7fd      	b.n	800e3ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e3f2:	4b0a      	ldr	r3, [pc, #40]	@ (800e41c <vTaskPlaceOnEventListRestricted+0x54>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	3318      	adds	r3, #24
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	68f8      	ldr	r0, [r7, #12]
 800e3fc:	f7fe f851 	bl	800c4a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d002      	beq.n	800e40c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e406:	f04f 33ff 	mov.w	r3, #4294967295
 800e40a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e40c:	6879      	ldr	r1, [r7, #4]
 800e40e:	68b8      	ldr	r0, [r7, #8]
 800e410:	f000 fde2 	bl	800efd8 <prvAddCurrentTaskToDelayedList>
	}
 800e414:	bf00      	nop
 800e416:	3718      	adds	r7, #24
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}
 800e41c:	20000e54 	.word	0x20000e54

0800e420 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b086      	sub	sp, #24
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	68db      	ldr	r3, [r3, #12]
 800e42c:	68db      	ldr	r3, [r3, #12]
 800e42e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e430:	693b      	ldr	r3, [r7, #16]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d10b      	bne.n	800e44e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e43a:	f383 8811 	msr	BASEPRI, r3
 800e43e:	f3bf 8f6f 	isb	sy
 800e442:	f3bf 8f4f 	dsb	sy
 800e446:	60fb      	str	r3, [r7, #12]
}
 800e448:	bf00      	nop
 800e44a:	bf00      	nop
 800e44c:	e7fd      	b.n	800e44a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	3318      	adds	r3, #24
 800e452:	4618      	mov	r0, r3
 800e454:	f7fe f882 	bl	800c55c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e458:	4b1d      	ldr	r3, [pc, #116]	@ (800e4d0 <xTaskRemoveFromEventList+0xb0>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d11d      	bne.n	800e49c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	3304      	adds	r3, #4
 800e464:	4618      	mov	r0, r3
 800e466:	f7fe f879 	bl	800c55c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e46e:	4b19      	ldr	r3, [pc, #100]	@ (800e4d4 <xTaskRemoveFromEventList+0xb4>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	429a      	cmp	r2, r3
 800e474:	d903      	bls.n	800e47e <xTaskRemoveFromEventList+0x5e>
 800e476:	693b      	ldr	r3, [r7, #16]
 800e478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e47a:	4a16      	ldr	r2, [pc, #88]	@ (800e4d4 <xTaskRemoveFromEventList+0xb4>)
 800e47c:	6013      	str	r3, [r2, #0]
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e482:	4613      	mov	r3, r2
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	4413      	add	r3, r2
 800e488:	009b      	lsls	r3, r3, #2
 800e48a:	4a13      	ldr	r2, [pc, #76]	@ (800e4d8 <xTaskRemoveFromEventList+0xb8>)
 800e48c:	441a      	add	r2, r3
 800e48e:	693b      	ldr	r3, [r7, #16]
 800e490:	3304      	adds	r3, #4
 800e492:	4619      	mov	r1, r3
 800e494:	4610      	mov	r0, r2
 800e496:	f7fe f804 	bl	800c4a2 <vListInsertEnd>
 800e49a:	e005      	b.n	800e4a8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e49c:	693b      	ldr	r3, [r7, #16]
 800e49e:	3318      	adds	r3, #24
 800e4a0:	4619      	mov	r1, r3
 800e4a2:	480e      	ldr	r0, [pc, #56]	@ (800e4dc <xTaskRemoveFromEventList+0xbc>)
 800e4a4:	f7fd fffd 	bl	800c4a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4ac:	4b0c      	ldr	r3, [pc, #48]	@ (800e4e0 <xTaskRemoveFromEventList+0xc0>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d905      	bls.n	800e4c2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e4ba:	4b0a      	ldr	r3, [pc, #40]	@ (800e4e4 <xTaskRemoveFromEventList+0xc4>)
 800e4bc:	2201      	movs	r2, #1
 800e4be:	601a      	str	r2, [r3, #0]
 800e4c0:	e001      	b.n	800e4c6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e4c6:	697b      	ldr	r3, [r7, #20]
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3718      	adds	r7, #24
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}
 800e4d0:	20001350 	.word	0x20001350
 800e4d4:	20001330 	.word	0x20001330
 800e4d8:	20000e58 	.word	0x20000e58
 800e4dc:	200012e8 	.word	0x200012e8
 800e4e0:	20000e54 	.word	0x20000e54
 800e4e4:	2000133c 	.word	0x2000133c

0800e4e8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b086      	sub	sp, #24
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800e4f2:	4b2a      	ldr	r3, [pc, #168]	@ (800e59c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d10b      	bne.n	800e512 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800e4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4fe:	f383 8811 	msr	BASEPRI, r3
 800e502:	f3bf 8f6f 	isb	sy
 800e506:	f3bf 8f4f 	dsb	sy
 800e50a:	613b      	str	r3, [r7, #16]
}
 800e50c:	bf00      	nop
 800e50e:	bf00      	nop
 800e510:	e7fd      	b.n	800e50e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	68db      	ldr	r3, [r3, #12]
 800e520:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d10b      	bne.n	800e540 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800e528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e52c:	f383 8811 	msr	BASEPRI, r3
 800e530:	f3bf 8f6f 	isb	sy
 800e534:	f3bf 8f4f 	dsb	sy
 800e538:	60fb      	str	r3, [r7, #12]
}
 800e53a:	bf00      	nop
 800e53c:	bf00      	nop
 800e53e:	e7fd      	b.n	800e53c <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f7fe f80b 	bl	800c55c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e546:	697b      	ldr	r3, [r7, #20]
 800e548:	3304      	adds	r3, #4
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fe f806 	bl	800c55c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e554:	4b12      	ldr	r3, [pc, #72]	@ (800e5a0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	429a      	cmp	r2, r3
 800e55a:	d903      	bls.n	800e564 <vTaskRemoveFromUnorderedEventList+0x7c>
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e560:	4a0f      	ldr	r2, [pc, #60]	@ (800e5a0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e562:	6013      	str	r3, [r2, #0]
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e568:	4613      	mov	r3, r2
 800e56a:	009b      	lsls	r3, r3, #2
 800e56c:	4413      	add	r3, r2
 800e56e:	009b      	lsls	r3, r3, #2
 800e570:	4a0c      	ldr	r2, [pc, #48]	@ (800e5a4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800e572:	441a      	add	r2, r3
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	3304      	adds	r3, #4
 800e578:	4619      	mov	r1, r3
 800e57a:	4610      	mov	r0, r2
 800e57c:	f7fd ff91 	bl	800c4a2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e584:	4b08      	ldr	r3, [pc, #32]	@ (800e5a8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d902      	bls.n	800e594 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800e58e:	4b07      	ldr	r3, [pc, #28]	@ (800e5ac <vTaskRemoveFromUnorderedEventList+0xc4>)
 800e590:	2201      	movs	r2, #1
 800e592:	601a      	str	r2, [r3, #0]
	}
}
 800e594:	bf00      	nop
 800e596:	3718      	adds	r7, #24
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}
 800e59c:	20001350 	.word	0x20001350
 800e5a0:	20001330 	.word	0x20001330
 800e5a4:	20000e58 	.word	0x20000e58
 800e5a8:	20000e54 	.word	0x20000e54
 800e5ac:	2000133c 	.word	0x2000133c

0800e5b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e5b0:	b480      	push	{r7}
 800e5b2:	b083      	sub	sp, #12
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e5b8:	4b06      	ldr	r3, [pc, #24]	@ (800e5d4 <vTaskInternalSetTimeOutState+0x24>)
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e5c0:	4b05      	ldr	r3, [pc, #20]	@ (800e5d8 <vTaskInternalSetTimeOutState+0x28>)
 800e5c2:	681a      	ldr	r2, [r3, #0]
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	605a      	str	r2, [r3, #4]
}
 800e5c8:	bf00      	nop
 800e5ca:	370c      	adds	r7, #12
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d2:	4770      	bx	lr
 800e5d4:	20001340 	.word	0x20001340
 800e5d8:	2000132c 	.word	0x2000132c

0800e5dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b088      	sub	sp, #32
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d10b      	bne.n	800e604 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e5ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5f0:	f383 8811 	msr	BASEPRI, r3
 800e5f4:	f3bf 8f6f 	isb	sy
 800e5f8:	f3bf 8f4f 	dsb	sy
 800e5fc:	613b      	str	r3, [r7, #16]
}
 800e5fe:	bf00      	nop
 800e600:	bf00      	nop
 800e602:	e7fd      	b.n	800e600 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d10b      	bne.n	800e622 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e60a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e60e:	f383 8811 	msr	BASEPRI, r3
 800e612:	f3bf 8f6f 	isb	sy
 800e616:	f3bf 8f4f 	dsb	sy
 800e61a:	60fb      	str	r3, [r7, #12]
}
 800e61c:	bf00      	nop
 800e61e:	bf00      	nop
 800e620:	e7fd      	b.n	800e61e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e622:	f001 fa39 	bl	800fa98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e626:	4b1d      	ldr	r3, [pc, #116]	@ (800e69c <xTaskCheckForTimeOut+0xc0>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	69ba      	ldr	r2, [r7, #24]
 800e632:	1ad3      	subs	r3, r2, r3
 800e634:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e63e:	d102      	bne.n	800e646 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e640:	2300      	movs	r3, #0
 800e642:	61fb      	str	r3, [r7, #28]
 800e644:	e023      	b.n	800e68e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681a      	ldr	r2, [r3, #0]
 800e64a:	4b15      	ldr	r3, [pc, #84]	@ (800e6a0 <xTaskCheckForTimeOut+0xc4>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	429a      	cmp	r2, r3
 800e650:	d007      	beq.n	800e662 <xTaskCheckForTimeOut+0x86>
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	69ba      	ldr	r2, [r7, #24]
 800e658:	429a      	cmp	r2, r3
 800e65a:	d302      	bcc.n	800e662 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e65c:	2301      	movs	r3, #1
 800e65e:	61fb      	str	r3, [r7, #28]
 800e660:	e015      	b.n	800e68e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	697a      	ldr	r2, [r7, #20]
 800e668:	429a      	cmp	r2, r3
 800e66a:	d20b      	bcs.n	800e684 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	1ad2      	subs	r2, r2, r3
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f7ff ff99 	bl	800e5b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e67e:	2300      	movs	r3, #0
 800e680:	61fb      	str	r3, [r7, #28]
 800e682:	e004      	b.n	800e68e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	2200      	movs	r2, #0
 800e688:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e68a:	2301      	movs	r3, #1
 800e68c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e68e:	f001 fa35 	bl	800fafc <vPortExitCritical>

	return xReturn;
 800e692:	69fb      	ldr	r3, [r7, #28]
}
 800e694:	4618      	mov	r0, r3
 800e696:	3720      	adds	r7, #32
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}
 800e69c:	2000132c 	.word	0x2000132c
 800e6a0:	20001340 	.word	0x20001340

0800e6a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e6a8:	4b03      	ldr	r3, [pc, #12]	@ (800e6b8 <vTaskMissedYield+0x14>)
 800e6aa:	2201      	movs	r2, #1
 800e6ac:	601a      	str	r2, [r3, #0]
}
 800e6ae:	bf00      	nop
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b6:	4770      	bx	lr
 800e6b8:	2000133c 	.word	0x2000133c

0800e6bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e6c4:	f000 f852 	bl	800e76c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e6c8:	4b06      	ldr	r3, [pc, #24]	@ (800e6e4 <prvIdleTask+0x28>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	2b01      	cmp	r3, #1
 800e6ce:	d9f9      	bls.n	800e6c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e6d0:	4b05      	ldr	r3, [pc, #20]	@ (800e6e8 <prvIdleTask+0x2c>)
 800e6d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6d6:	601a      	str	r2, [r3, #0]
 800e6d8:	f3bf 8f4f 	dsb	sy
 800e6dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e6e0:	e7f0      	b.n	800e6c4 <prvIdleTask+0x8>
 800e6e2:	bf00      	nop
 800e6e4:	20000e58 	.word	0x20000e58
 800e6e8:	e000ed04 	.word	0xe000ed04

0800e6ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	607b      	str	r3, [r7, #4]
 800e6f6:	e00c      	b.n	800e712 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e6f8:	687a      	ldr	r2, [r7, #4]
 800e6fa:	4613      	mov	r3, r2
 800e6fc:	009b      	lsls	r3, r3, #2
 800e6fe:	4413      	add	r3, r2
 800e700:	009b      	lsls	r3, r3, #2
 800e702:	4a12      	ldr	r2, [pc, #72]	@ (800e74c <prvInitialiseTaskLists+0x60>)
 800e704:	4413      	add	r3, r2
 800e706:	4618      	mov	r0, r3
 800e708:	f7fd fe9e 	bl	800c448 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	3301      	adds	r3, #1
 800e710:	607b      	str	r3, [r7, #4]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2b37      	cmp	r3, #55	@ 0x37
 800e716:	d9ef      	bls.n	800e6f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e718:	480d      	ldr	r0, [pc, #52]	@ (800e750 <prvInitialiseTaskLists+0x64>)
 800e71a:	f7fd fe95 	bl	800c448 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e71e:	480d      	ldr	r0, [pc, #52]	@ (800e754 <prvInitialiseTaskLists+0x68>)
 800e720:	f7fd fe92 	bl	800c448 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e724:	480c      	ldr	r0, [pc, #48]	@ (800e758 <prvInitialiseTaskLists+0x6c>)
 800e726:	f7fd fe8f 	bl	800c448 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e72a:	480c      	ldr	r0, [pc, #48]	@ (800e75c <prvInitialiseTaskLists+0x70>)
 800e72c:	f7fd fe8c 	bl	800c448 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e730:	480b      	ldr	r0, [pc, #44]	@ (800e760 <prvInitialiseTaskLists+0x74>)
 800e732:	f7fd fe89 	bl	800c448 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e736:	4b0b      	ldr	r3, [pc, #44]	@ (800e764 <prvInitialiseTaskLists+0x78>)
 800e738:	4a05      	ldr	r2, [pc, #20]	@ (800e750 <prvInitialiseTaskLists+0x64>)
 800e73a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e73c:	4b0a      	ldr	r3, [pc, #40]	@ (800e768 <prvInitialiseTaskLists+0x7c>)
 800e73e:	4a05      	ldr	r2, [pc, #20]	@ (800e754 <prvInitialiseTaskLists+0x68>)
 800e740:	601a      	str	r2, [r3, #0]
}
 800e742:	bf00      	nop
 800e744:	3708      	adds	r7, #8
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
 800e74a:	bf00      	nop
 800e74c:	20000e58 	.word	0x20000e58
 800e750:	200012b8 	.word	0x200012b8
 800e754:	200012cc 	.word	0x200012cc
 800e758:	200012e8 	.word	0x200012e8
 800e75c:	200012fc 	.word	0x200012fc
 800e760:	20001314 	.word	0x20001314
 800e764:	200012e0 	.word	0x200012e0
 800e768:	200012e4 	.word	0x200012e4

0800e76c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b082      	sub	sp, #8
 800e770:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e772:	e019      	b.n	800e7a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e774:	f001 f990 	bl	800fa98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e778:	4b10      	ldr	r3, [pc, #64]	@ (800e7bc <prvCheckTasksWaitingTermination+0x50>)
 800e77a:	68db      	ldr	r3, [r3, #12]
 800e77c:	68db      	ldr	r3, [r3, #12]
 800e77e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	3304      	adds	r3, #4
 800e784:	4618      	mov	r0, r3
 800e786:	f7fd fee9 	bl	800c55c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e78a:	4b0d      	ldr	r3, [pc, #52]	@ (800e7c0 <prvCheckTasksWaitingTermination+0x54>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	3b01      	subs	r3, #1
 800e790:	4a0b      	ldr	r2, [pc, #44]	@ (800e7c0 <prvCheckTasksWaitingTermination+0x54>)
 800e792:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e794:	4b0b      	ldr	r3, [pc, #44]	@ (800e7c4 <prvCheckTasksWaitingTermination+0x58>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	3b01      	subs	r3, #1
 800e79a:	4a0a      	ldr	r2, [pc, #40]	@ (800e7c4 <prvCheckTasksWaitingTermination+0x58>)
 800e79c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e79e:	f001 f9ad 	bl	800fafc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f000 f8ae 	bl	800e904 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e7a8:	4b06      	ldr	r3, [pc, #24]	@ (800e7c4 <prvCheckTasksWaitingTermination+0x58>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d1e1      	bne.n	800e774 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e7b0:	bf00      	nop
 800e7b2:	bf00      	nop
 800e7b4:	3708      	adds	r7, #8
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}
 800e7ba:	bf00      	nop
 800e7bc:	200012fc 	.word	0x200012fc
 800e7c0:	20001328 	.word	0x20001328
 800e7c4:	20001310 	.word	0x20001310

0800e7c8 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b086      	sub	sp, #24
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	60f8      	str	r0, [r7, #12]
 800e7d0:	60b9      	str	r1, [r7, #8]
 800e7d2:	607a      	str	r2, [r7, #4]
 800e7d4:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d102      	bne.n	800e7e2 <vTaskGetInfo+0x1a>
 800e7dc:	4b2c      	ldr	r3, [pc, #176]	@ (800e890 <vTaskGetInfo+0xc8>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	e000      	b.n	800e7e4 <vTaskGetInfo+0x1c>
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	697a      	ldr	r2, [r7, #20]
 800e7ea:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800e806:	697b      	ldr	r3, [r7, #20]
 800e808:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	2200      	movs	r2, #0
 800e81a:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800e81c:	78fb      	ldrb	r3, [r7, #3]
 800e81e:	2b05      	cmp	r3, #5
 800e820:	d01a      	beq.n	800e858 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800e822:	4b1b      	ldr	r3, [pc, #108]	@ (800e890 <vTaskGetInfo+0xc8>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	697a      	ldr	r2, [r7, #20]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d103      	bne.n	800e834 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	2200      	movs	r2, #0
 800e830:	731a      	strb	r2, [r3, #12]
 800e832:	e018      	b.n	800e866 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	78fa      	ldrb	r2, [r7, #3]
 800e838:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800e83a:	78fb      	ldrb	r3, [r7, #3]
 800e83c:	2b03      	cmp	r3, #3
 800e83e:	d112      	bne.n	800e866 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800e840:	f7ff faae 	bl	800dda0 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d002      	beq.n	800e852 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	2202      	movs	r2, #2
 800e850:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800e852:	f7ff fab3 	bl	800ddbc <xTaskResumeAll>
 800e856:	e006      	b.n	800e866 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800e858:	6978      	ldr	r0, [r7, #20]
 800e85a:	f7ff f823 	bl	800d8a4 <eTaskGetState>
 800e85e:	4603      	mov	r3, r0
 800e860:	461a      	mov	r2, r3
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d009      	beq.n	800e880 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e870:	4618      	mov	r0, r3
 800e872:	f000 f80f 	bl	800e894 <prvTaskCheckFreeStackSpace>
 800e876:	4603      	mov	r3, r0
 800e878:	461a      	mov	r2, r3
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800e87e:	e002      	b.n	800e886 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	2200      	movs	r2, #0
 800e884:	841a      	strh	r2, [r3, #32]
	}
 800e886:	bf00      	nop
 800e888:	3718      	adds	r7, #24
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	20000e54 	.word	0x20000e54

0800e894 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800e894:	b480      	push	{r7}
 800e896:	b085      	sub	sp, #20
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800e89c:	2300      	movs	r3, #0
 800e89e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e8a0:	e005      	b.n	800e8ae <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	3301      	adds	r3, #1
 800e8a6:	607b      	str	r3, [r7, #4]
			ulCount++;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	781b      	ldrb	r3, [r3, #0]
 800e8b2:	2ba5      	cmp	r3, #165	@ 0xa5
 800e8b4:	d0f5      	beq.n	800e8a2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	089b      	lsrs	r3, r3, #2
 800e8ba:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	b29b      	uxth	r3, r3
	}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3714      	adds	r7, #20
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr

0800e8cc <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b086      	sub	sp, #24
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d102      	bne.n	800e8e0 <uxTaskGetStackHighWaterMark+0x14>
 800e8da:	4b09      	ldr	r3, [pc, #36]	@ (800e900 <uxTaskGetStackHighWaterMark+0x34>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	e000      	b.n	800e8e2 <uxTaskGetStackHighWaterMark+0x16>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8e8:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800e8ea:	6938      	ldr	r0, [r7, #16]
 800e8ec:	f7ff ffd2 	bl	800e894 <prvTaskCheckFreeStackSpace>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
	}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3718      	adds	r7, #24
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	20000e54 	.word	0x20000e54

0800e904 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e904:	b580      	push	{r7, lr}
 800e906:	b084      	sub	sp, #16
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	3354      	adds	r3, #84	@ 0x54
 800e910:	4618      	mov	r0, r3
 800e912:	f002 ffe7 	bl	80118e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d108      	bne.n	800e932 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e924:	4618      	mov	r0, r3
 800e926:	f001 faa7 	bl	800fe78 <vPortFree>
				vPortFree( pxTCB );
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f001 faa4 	bl	800fe78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e930:	e019      	b.n	800e966 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e938:	2b01      	cmp	r3, #1
 800e93a:	d103      	bne.n	800e944 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f001 fa9b 	bl	800fe78 <vPortFree>
	}
 800e942:	e010      	b.n	800e966 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e94a:	2b02      	cmp	r3, #2
 800e94c:	d00b      	beq.n	800e966 <prvDeleteTCB+0x62>
	__asm volatile
 800e94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e952:	f383 8811 	msr	BASEPRI, r3
 800e956:	f3bf 8f6f 	isb	sy
 800e95a:	f3bf 8f4f 	dsb	sy
 800e95e:	60fb      	str	r3, [r7, #12]
}
 800e960:	bf00      	nop
 800e962:	bf00      	nop
 800e964:	e7fd      	b.n	800e962 <prvDeleteTCB+0x5e>
	}
 800e966:	bf00      	nop
 800e968:	3710      	adds	r7, #16
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
	...

0800e970 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e970:	b480      	push	{r7}
 800e972:	b083      	sub	sp, #12
 800e974:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e976:	4b0c      	ldr	r3, [pc, #48]	@ (800e9a8 <prvResetNextTaskUnblockTime+0x38>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d104      	bne.n	800e98a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e980:	4b0a      	ldr	r3, [pc, #40]	@ (800e9ac <prvResetNextTaskUnblockTime+0x3c>)
 800e982:	f04f 32ff 	mov.w	r2, #4294967295
 800e986:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e988:	e008      	b.n	800e99c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e98a:	4b07      	ldr	r3, [pc, #28]	@ (800e9a8 <prvResetNextTaskUnblockTime+0x38>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	68db      	ldr	r3, [r3, #12]
 800e990:	68db      	ldr	r3, [r3, #12]
 800e992:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	685b      	ldr	r3, [r3, #4]
 800e998:	4a04      	ldr	r2, [pc, #16]	@ (800e9ac <prvResetNextTaskUnblockTime+0x3c>)
 800e99a:	6013      	str	r3, [r2, #0]
}
 800e99c:	bf00      	nop
 800e99e:	370c      	adds	r7, #12
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a6:	4770      	bx	lr
 800e9a8:	200012e0 	.word	0x200012e0
 800e9ac:	20001348 	.word	0x20001348

0800e9b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b083      	sub	sp, #12
 800e9b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e9b6:	4b0b      	ldr	r3, [pc, #44]	@ (800e9e4 <xTaskGetSchedulerState+0x34>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d102      	bne.n	800e9c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e9be:	2301      	movs	r3, #1
 800e9c0:	607b      	str	r3, [r7, #4]
 800e9c2:	e008      	b.n	800e9d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9c4:	4b08      	ldr	r3, [pc, #32]	@ (800e9e8 <xTaskGetSchedulerState+0x38>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d102      	bne.n	800e9d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e9cc:	2302      	movs	r3, #2
 800e9ce:	607b      	str	r3, [r7, #4]
 800e9d0:	e001      	b.n	800e9d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e9d6:	687b      	ldr	r3, [r7, #4]
	}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	370c      	adds	r7, #12
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr
 800e9e4:	20001334 	.word	0x20001334
 800e9e8:	20001350 	.word	0x20001350

0800e9ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b084      	sub	sp, #16
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d051      	beq.n	800eaa6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea06:	4b2a      	ldr	r3, [pc, #168]	@ (800eab0 <xTaskPriorityInherit+0xc4>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea0c:	429a      	cmp	r2, r3
 800ea0e:	d241      	bcs.n	800ea94 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	699b      	ldr	r3, [r3, #24]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	db06      	blt.n	800ea26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea18:	4b25      	ldr	r3, [pc, #148]	@ (800eab0 <xTaskPriorityInherit+0xc4>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea1e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	6959      	ldr	r1, [r3, #20]
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea2e:	4613      	mov	r3, r2
 800ea30:	009b      	lsls	r3, r3, #2
 800ea32:	4413      	add	r3, r2
 800ea34:	009b      	lsls	r3, r3, #2
 800ea36:	4a1f      	ldr	r2, [pc, #124]	@ (800eab4 <xTaskPriorityInherit+0xc8>)
 800ea38:	4413      	add	r3, r2
 800ea3a:	4299      	cmp	r1, r3
 800ea3c:	d122      	bne.n	800ea84 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	3304      	adds	r3, #4
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7fd fd8a 	bl	800c55c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ea48:	4b19      	ldr	r3, [pc, #100]	@ (800eab0 <xTaskPriorityInherit+0xc4>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea56:	4b18      	ldr	r3, [pc, #96]	@ (800eab8 <xTaskPriorityInherit+0xcc>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	d903      	bls.n	800ea66 <xTaskPriorityInherit+0x7a>
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea62:	4a15      	ldr	r2, [pc, #84]	@ (800eab8 <xTaskPriorityInherit+0xcc>)
 800ea64:	6013      	str	r3, [r2, #0]
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea6a:	4613      	mov	r3, r2
 800ea6c:	009b      	lsls	r3, r3, #2
 800ea6e:	4413      	add	r3, r2
 800ea70:	009b      	lsls	r3, r3, #2
 800ea72:	4a10      	ldr	r2, [pc, #64]	@ (800eab4 <xTaskPriorityInherit+0xc8>)
 800ea74:	441a      	add	r2, r3
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	3304      	adds	r3, #4
 800ea7a:	4619      	mov	r1, r3
 800ea7c:	4610      	mov	r0, r2
 800ea7e:	f7fd fd10 	bl	800c4a2 <vListInsertEnd>
 800ea82:	e004      	b.n	800ea8e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ea84:	4b0a      	ldr	r3, [pc, #40]	@ (800eab0 <xTaskPriorityInherit+0xc4>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ea8e:	2301      	movs	r3, #1
 800ea90:	60fb      	str	r3, [r7, #12]
 800ea92:	e008      	b.n	800eaa6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ea98:	4b05      	ldr	r3, [pc, #20]	@ (800eab0 <xTaskPriorityInherit+0xc4>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d201      	bcs.n	800eaa6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
	}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3710      	adds	r7, #16
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}
 800eab0:	20000e54 	.word	0x20000e54
 800eab4:	20000e58 	.word	0x20000e58
 800eab8:	20001330 	.word	0x20001330

0800eabc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b086      	sub	sp, #24
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eac8:	2300      	movs	r3, #0
 800eaca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d058      	beq.n	800eb84 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ead2:	4b2f      	ldr	r3, [pc, #188]	@ (800eb90 <xTaskPriorityDisinherit+0xd4>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	693a      	ldr	r2, [r7, #16]
 800ead8:	429a      	cmp	r2, r3
 800eada:	d00b      	beq.n	800eaf4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800eadc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eae0:	f383 8811 	msr	BASEPRI, r3
 800eae4:	f3bf 8f6f 	isb	sy
 800eae8:	f3bf 8f4f 	dsb	sy
 800eaec:	60fb      	str	r3, [r7, #12]
}
 800eaee:	bf00      	nop
 800eaf0:	bf00      	nop
 800eaf2:	e7fd      	b.n	800eaf0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d10b      	bne.n	800eb14 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800eafc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb00:	f383 8811 	msr	BASEPRI, r3
 800eb04:	f3bf 8f6f 	isb	sy
 800eb08:	f3bf 8f4f 	dsb	sy
 800eb0c:	60bb      	str	r3, [r7, #8]
}
 800eb0e:	bf00      	nop
 800eb10:	bf00      	nop
 800eb12:	e7fd      	b.n	800eb10 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb18:	1e5a      	subs	r2, r3, #1
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d02c      	beq.n	800eb84 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d128      	bne.n	800eb84 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	3304      	adds	r3, #4
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7fd fd10 	bl	800c55c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb48:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb54:	4b0f      	ldr	r3, [pc, #60]	@ (800eb94 <xTaskPriorityDisinherit+0xd8>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d903      	bls.n	800eb64 <xTaskPriorityDisinherit+0xa8>
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb60:	4a0c      	ldr	r2, [pc, #48]	@ (800eb94 <xTaskPriorityDisinherit+0xd8>)
 800eb62:	6013      	str	r3, [r2, #0]
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb68:	4613      	mov	r3, r2
 800eb6a:	009b      	lsls	r3, r3, #2
 800eb6c:	4413      	add	r3, r2
 800eb6e:	009b      	lsls	r3, r3, #2
 800eb70:	4a09      	ldr	r2, [pc, #36]	@ (800eb98 <xTaskPriorityDisinherit+0xdc>)
 800eb72:	441a      	add	r2, r3
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	3304      	adds	r3, #4
 800eb78:	4619      	mov	r1, r3
 800eb7a:	4610      	mov	r0, r2
 800eb7c:	f7fd fc91 	bl	800c4a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800eb80:	2301      	movs	r3, #1
 800eb82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eb84:	697b      	ldr	r3, [r7, #20]
	}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3718      	adds	r7, #24
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	20000e54 	.word	0x20000e54
 800eb94:	20001330 	.word	0x20001330
 800eb98:	20000e58 	.word	0x20000e58

0800eb9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b088      	sub	sp, #32
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ebaa:	2301      	movs	r3, #1
 800ebac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d06c      	beq.n	800ec8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ebb4:	69bb      	ldr	r3, [r7, #24]
 800ebb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d10b      	bne.n	800ebd4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ebbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebc0:	f383 8811 	msr	BASEPRI, r3
 800ebc4:	f3bf 8f6f 	isb	sy
 800ebc8:	f3bf 8f4f 	dsb	sy
 800ebcc:	60fb      	str	r3, [r7, #12]
}
 800ebce:	bf00      	nop
 800ebd0:	bf00      	nop
 800ebd2:	e7fd      	b.n	800ebd0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ebd4:	69bb      	ldr	r3, [r7, #24]
 800ebd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ebd8:	683a      	ldr	r2, [r7, #0]
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d902      	bls.n	800ebe4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	61fb      	str	r3, [r7, #28]
 800ebe2:	e002      	b.n	800ebea <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ebe4:	69bb      	ldr	r3, [r7, #24]
 800ebe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ebe8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ebea:	69bb      	ldr	r3, [r7, #24]
 800ebec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebee:	69fa      	ldr	r2, [r7, #28]
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d04c      	beq.n	800ec8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ebf4:	69bb      	ldr	r3, [r7, #24]
 800ebf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ebf8:	697a      	ldr	r2, [r7, #20]
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d147      	bne.n	800ec8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ebfe:	4b26      	ldr	r3, [pc, #152]	@ (800ec98 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	69ba      	ldr	r2, [r7, #24]
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d10b      	bne.n	800ec20 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ec08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec0c:	f383 8811 	msr	BASEPRI, r3
 800ec10:	f3bf 8f6f 	isb	sy
 800ec14:	f3bf 8f4f 	dsb	sy
 800ec18:	60bb      	str	r3, [r7, #8]
}
 800ec1a:	bf00      	nop
 800ec1c:	bf00      	nop
 800ec1e:	e7fd      	b.n	800ec1c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ec20:	69bb      	ldr	r3, [r7, #24]
 800ec22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec24:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ec26:	69bb      	ldr	r3, [r7, #24]
 800ec28:	69fa      	ldr	r2, [r7, #28]
 800ec2a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec2c:	69bb      	ldr	r3, [r7, #24]
 800ec2e:	699b      	ldr	r3, [r3, #24]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	db04      	blt.n	800ec3e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec34:	69fb      	ldr	r3, [r7, #28]
 800ec36:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ec3a:	69bb      	ldr	r3, [r7, #24]
 800ec3c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ec3e:	69bb      	ldr	r3, [r7, #24]
 800ec40:	6959      	ldr	r1, [r3, #20]
 800ec42:	693a      	ldr	r2, [r7, #16]
 800ec44:	4613      	mov	r3, r2
 800ec46:	009b      	lsls	r3, r3, #2
 800ec48:	4413      	add	r3, r2
 800ec4a:	009b      	lsls	r3, r3, #2
 800ec4c:	4a13      	ldr	r2, [pc, #76]	@ (800ec9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ec4e:	4413      	add	r3, r2
 800ec50:	4299      	cmp	r1, r3
 800ec52:	d11c      	bne.n	800ec8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec54:	69bb      	ldr	r3, [r7, #24]
 800ec56:	3304      	adds	r3, #4
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f7fd fc7f 	bl	800c55c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ec5e:	69bb      	ldr	r3, [r7, #24]
 800ec60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec62:	4b0f      	ldr	r3, [pc, #60]	@ (800eca0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d903      	bls.n	800ec72 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ec6a:	69bb      	ldr	r3, [r7, #24]
 800ec6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec6e:	4a0c      	ldr	r2, [pc, #48]	@ (800eca0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ec70:	6013      	str	r3, [r2, #0]
 800ec72:	69bb      	ldr	r3, [r7, #24]
 800ec74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec76:	4613      	mov	r3, r2
 800ec78:	009b      	lsls	r3, r3, #2
 800ec7a:	4413      	add	r3, r2
 800ec7c:	009b      	lsls	r3, r3, #2
 800ec7e:	4a07      	ldr	r2, [pc, #28]	@ (800ec9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ec80:	441a      	add	r2, r3
 800ec82:	69bb      	ldr	r3, [r7, #24]
 800ec84:	3304      	adds	r3, #4
 800ec86:	4619      	mov	r1, r3
 800ec88:	4610      	mov	r0, r2
 800ec8a:	f7fd fc0a 	bl	800c4a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ec8e:	bf00      	nop
 800ec90:	3720      	adds	r7, #32
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop
 800ec98:	20000e54 	.word	0x20000e54
 800ec9c:	20000e58 	.word	0x20000e58
 800eca0:	20001330 	.word	0x20001330

0800eca4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800eca4:	b480      	push	{r7}
 800eca6:	b083      	sub	sp, #12
 800eca8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800ecaa:	4b09      	ldr	r3, [pc, #36]	@ (800ecd0 <uxTaskResetEventItemValue+0x2c>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	699b      	ldr	r3, [r3, #24]
 800ecb0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecb2:	4b07      	ldr	r3, [pc, #28]	@ (800ecd0 <uxTaskResetEventItemValue+0x2c>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecb8:	4b05      	ldr	r3, [pc, #20]	@ (800ecd0 <uxTaskResetEventItemValue+0x2c>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800ecc0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800ecc2:	687b      	ldr	r3, [r7, #4]
}
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	370c      	adds	r7, #12
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr
 800ecd0:	20000e54 	.word	0x20000e54

0800ecd4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ecd4:	b480      	push	{r7}
 800ecd6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ecd8:	4b07      	ldr	r3, [pc, #28]	@ (800ecf8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d004      	beq.n	800ecea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ece0:	4b05      	ldr	r3, [pc, #20]	@ (800ecf8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ece6:	3201      	adds	r2, #1
 800ece8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ecea:	4b03      	ldr	r3, [pc, #12]	@ (800ecf8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ecec:	681b      	ldr	r3, [r3, #0]
	}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr
 800ecf8:	20000e54 	.word	0x20000e54

0800ecfc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b084      	sub	sp, #16
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
 800ed04:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ed06:	f000 fec7 	bl	800fa98 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ed0a:	4b20      	ldr	r3, [pc, #128]	@ (800ed8c <ulTaskNotifyTake+0x90>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d113      	bne.n	800ed3e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ed16:	4b1d      	ldr	r3, [pc, #116]	@ (800ed8c <ulTaskNotifyTake+0x90>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d00b      	beq.n	800ed3e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ed26:	2101      	movs	r1, #1
 800ed28:	6838      	ldr	r0, [r7, #0]
 800ed2a:	f000 f955 	bl	800efd8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ed2e:	4b18      	ldr	r3, [pc, #96]	@ (800ed90 <ulTaskNotifyTake+0x94>)
 800ed30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed34:	601a      	str	r2, [r3, #0]
 800ed36:	f3bf 8f4f 	dsb	sy
 800ed3a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ed3e:	f000 fedd 	bl	800fafc <vPortExitCritical>

		taskENTER_CRITICAL();
 800ed42:	f000 fea9 	bl	800fa98 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800ed46:	4b11      	ldr	r3, [pc, #68]	@ (800ed8c <ulTaskNotifyTake+0x90>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ed4e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d00e      	beq.n	800ed74 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d005      	beq.n	800ed68 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800ed5c:	4b0b      	ldr	r3, [pc, #44]	@ (800ed8c <ulTaskNotifyTake+0x90>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	2200      	movs	r2, #0
 800ed62:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800ed66:	e005      	b.n	800ed74 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800ed68:	4b08      	ldr	r3, [pc, #32]	@ (800ed8c <ulTaskNotifyTake+0x90>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	68fa      	ldr	r2, [r7, #12]
 800ed6e:	3a01      	subs	r2, #1
 800ed70:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ed74:	4b05      	ldr	r3, [pc, #20]	@ (800ed8c <ulTaskNotifyTake+0x90>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	2200      	movs	r2, #0
 800ed7a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800ed7e:	f000 febd 	bl	800fafc <vPortExitCritical>

		return ulReturn;
 800ed82:	68fb      	ldr	r3, [r7, #12]
	}
 800ed84:	4618      	mov	r0, r3
 800ed86:	3710      	adds	r7, #16
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}
 800ed8c:	20000e54 	.word	0x20000e54
 800ed90:	e000ed04 	.word	0xe000ed04

0800ed94 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b086      	sub	sp, #24
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	60f8      	str	r0, [r7, #12]
 800ed9c:	60b9      	str	r1, [r7, #8]
 800ed9e:	607a      	str	r2, [r7, #4]
 800eda0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800eda2:	f000 fe79 	bl	800fa98 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800eda6:	4b29      	ldr	r3, [pc, #164]	@ (800ee4c <xTaskNotifyWait+0xb8>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800edae:	b2db      	uxtb	r3, r3
 800edb0:	2b02      	cmp	r3, #2
 800edb2:	d01c      	beq.n	800edee <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800edb4:	4b25      	ldr	r3, [pc, #148]	@ (800ee4c <xTaskNotifyWait+0xb8>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800edbc:	68fa      	ldr	r2, [r7, #12]
 800edbe:	43d2      	mvns	r2, r2
 800edc0:	400a      	ands	r2, r1
 800edc2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800edc6:	4b21      	ldr	r3, [pc, #132]	@ (800ee4c <xTaskNotifyWait+0xb8>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	2201      	movs	r2, #1
 800edcc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d00b      	beq.n	800edee <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800edd6:	2101      	movs	r1, #1
 800edd8:	6838      	ldr	r0, [r7, #0]
 800edda:	f000 f8fd 	bl	800efd8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800edde:	4b1c      	ldr	r3, [pc, #112]	@ (800ee50 <xTaskNotifyWait+0xbc>)
 800ede0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ede4:	601a      	str	r2, [r3, #0]
 800ede6:	f3bf 8f4f 	dsb	sy
 800edea:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800edee:	f000 fe85 	bl	800fafc <vPortExitCritical>

		taskENTER_CRITICAL();
 800edf2:	f000 fe51 	bl	800fa98 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d005      	beq.n	800ee08 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800edfc:	4b13      	ldr	r3, [pc, #76]	@ (800ee4c <xTaskNotifyWait+0xb8>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ee08:	4b10      	ldr	r3, [pc, #64]	@ (800ee4c <xTaskNotifyWait+0xb8>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800ee10:	b2db      	uxtb	r3, r3
 800ee12:	2b02      	cmp	r3, #2
 800ee14:	d002      	beq.n	800ee1c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ee16:	2300      	movs	r3, #0
 800ee18:	617b      	str	r3, [r7, #20]
 800ee1a:	e00a      	b.n	800ee32 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ee1c:	4b0b      	ldr	r3, [pc, #44]	@ (800ee4c <xTaskNotifyWait+0xb8>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800ee24:	68ba      	ldr	r2, [r7, #8]
 800ee26:	43d2      	mvns	r2, r2
 800ee28:	400a      	ands	r2, r1
 800ee2a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800ee2e:	2301      	movs	r3, #1
 800ee30:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ee32:	4b06      	ldr	r3, [pc, #24]	@ (800ee4c <xTaskNotifyWait+0xb8>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	2200      	movs	r2, #0
 800ee38:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800ee3c:	f000 fe5e 	bl	800fafc <vPortExitCritical>

		return xReturn;
 800ee40:	697b      	ldr	r3, [r7, #20]
	}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3718      	adds	r7, #24
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}
 800ee4a:	bf00      	nop
 800ee4c:	20000e54 	.word	0x20000e54
 800ee50:	e000ed04 	.word	0xe000ed04

0800ee54 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b08a      	sub	sp, #40	@ 0x28
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	60f8      	str	r0, [r7, #12]
 800ee5c:	60b9      	str	r1, [r7, #8]
 800ee5e:	603b      	str	r3, [r7, #0]
 800ee60:	4613      	mov	r3, r2
 800ee62:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800ee64:	2301      	movs	r3, #1
 800ee66:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d10b      	bne.n	800ee86 <xTaskGenericNotify+0x32>
	__asm volatile
 800ee6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee72:	f383 8811 	msr	BASEPRI, r3
 800ee76:	f3bf 8f6f 	isb	sy
 800ee7a:	f3bf 8f4f 	dsb	sy
 800ee7e:	61bb      	str	r3, [r7, #24]
}
 800ee80:	bf00      	nop
 800ee82:	bf00      	nop
 800ee84:	e7fd      	b.n	800ee82 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ee8a:	f000 fe05 	bl	800fa98 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d004      	beq.n	800ee9e <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ee94:	6a3b      	ldr	r3, [r7, #32]
 800ee96:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ee9e:	6a3b      	ldr	r3, [r7, #32]
 800eea0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800eea4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800eea6:	6a3b      	ldr	r3, [r7, #32]
 800eea8:	2202      	movs	r2, #2
 800eeaa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800eeae:	79fb      	ldrb	r3, [r7, #7]
 800eeb0:	2b04      	cmp	r3, #4
 800eeb2:	d82e      	bhi.n	800ef12 <xTaskGenericNotify+0xbe>
 800eeb4:	a201      	add	r2, pc, #4	@ (adr r2, 800eebc <xTaskGenericNotify+0x68>)
 800eeb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeba:	bf00      	nop
 800eebc:	0800ef37 	.word	0x0800ef37
 800eec0:	0800eed1 	.word	0x0800eed1
 800eec4:	0800eee3 	.word	0x0800eee3
 800eec8:	0800eef3 	.word	0x0800eef3
 800eecc:	0800eefd 	.word	0x0800eefd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800eed0:	6a3b      	ldr	r3, [r7, #32]
 800eed2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	431a      	orrs	r2, r3
 800eeda:	6a3b      	ldr	r3, [r7, #32]
 800eedc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800eee0:	e02c      	b.n	800ef3c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800eee2:	6a3b      	ldr	r3, [r7, #32]
 800eee4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800eee8:	1c5a      	adds	r2, r3, #1
 800eeea:	6a3b      	ldr	r3, [r7, #32]
 800eeec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800eef0:	e024      	b.n	800ef3c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800eef2:	6a3b      	ldr	r3, [r7, #32]
 800eef4:	68ba      	ldr	r2, [r7, #8]
 800eef6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800eefa:	e01f      	b.n	800ef3c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800eefc:	7ffb      	ldrb	r3, [r7, #31]
 800eefe:	2b02      	cmp	r3, #2
 800ef00:	d004      	beq.n	800ef0c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ef02:	6a3b      	ldr	r3, [r7, #32]
 800ef04:	68ba      	ldr	r2, [r7, #8]
 800ef06:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ef0a:	e017      	b.n	800ef3c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800ef10:	e014      	b.n	800ef3c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ef12:	6a3b      	ldr	r3, [r7, #32]
 800ef14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ef18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef1c:	d00d      	beq.n	800ef3a <xTaskGenericNotify+0xe6>
	__asm volatile
 800ef1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef22:	f383 8811 	msr	BASEPRI, r3
 800ef26:	f3bf 8f6f 	isb	sy
 800ef2a:	f3bf 8f4f 	dsb	sy
 800ef2e:	617b      	str	r3, [r7, #20]
}
 800ef30:	bf00      	nop
 800ef32:	bf00      	nop
 800ef34:	e7fd      	b.n	800ef32 <xTaskGenericNotify+0xde>
					break;
 800ef36:	bf00      	nop
 800ef38:	e000      	b.n	800ef3c <xTaskGenericNotify+0xe8>

					break;
 800ef3a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ef3c:	7ffb      	ldrb	r3, [r7, #31]
 800ef3e:	2b01      	cmp	r3, #1
 800ef40:	d13b      	bne.n	800efba <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef42:	6a3b      	ldr	r3, [r7, #32]
 800ef44:	3304      	adds	r3, #4
 800ef46:	4618      	mov	r0, r3
 800ef48:	f7fd fb08 	bl	800c55c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ef4c:	6a3b      	ldr	r3, [r7, #32]
 800ef4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef50:	4b1d      	ldr	r3, [pc, #116]	@ (800efc8 <xTaskGenericNotify+0x174>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d903      	bls.n	800ef60 <xTaskGenericNotify+0x10c>
 800ef58:	6a3b      	ldr	r3, [r7, #32]
 800ef5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef5c:	4a1a      	ldr	r2, [pc, #104]	@ (800efc8 <xTaskGenericNotify+0x174>)
 800ef5e:	6013      	str	r3, [r2, #0]
 800ef60:	6a3b      	ldr	r3, [r7, #32]
 800ef62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef64:	4613      	mov	r3, r2
 800ef66:	009b      	lsls	r3, r3, #2
 800ef68:	4413      	add	r3, r2
 800ef6a:	009b      	lsls	r3, r3, #2
 800ef6c:	4a17      	ldr	r2, [pc, #92]	@ (800efcc <xTaskGenericNotify+0x178>)
 800ef6e:	441a      	add	r2, r3
 800ef70:	6a3b      	ldr	r3, [r7, #32]
 800ef72:	3304      	adds	r3, #4
 800ef74:	4619      	mov	r1, r3
 800ef76:	4610      	mov	r0, r2
 800ef78:	f7fd fa93 	bl	800c4a2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ef7c:	6a3b      	ldr	r3, [r7, #32]
 800ef7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d00b      	beq.n	800ef9c <xTaskGenericNotify+0x148>
	__asm volatile
 800ef84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef88:	f383 8811 	msr	BASEPRI, r3
 800ef8c:	f3bf 8f6f 	isb	sy
 800ef90:	f3bf 8f4f 	dsb	sy
 800ef94:	613b      	str	r3, [r7, #16]
}
 800ef96:	bf00      	nop
 800ef98:	bf00      	nop
 800ef9a:	e7fd      	b.n	800ef98 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ef9c:	6a3b      	ldr	r3, [r7, #32]
 800ef9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efa0:	4b0b      	ldr	r3, [pc, #44]	@ (800efd0 <xTaskGenericNotify+0x17c>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efa6:	429a      	cmp	r2, r3
 800efa8:	d907      	bls.n	800efba <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800efaa:	4b0a      	ldr	r3, [pc, #40]	@ (800efd4 <xTaskGenericNotify+0x180>)
 800efac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efb0:	601a      	str	r2, [r3, #0]
 800efb2:	f3bf 8f4f 	dsb	sy
 800efb6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800efba:	f000 fd9f 	bl	800fafc <vPortExitCritical>

		return xReturn;
 800efbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800efc0:	4618      	mov	r0, r3
 800efc2:	3728      	adds	r7, #40	@ 0x28
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}
 800efc8:	20001330 	.word	0x20001330
 800efcc:	20000e58 	.word	0x20000e58
 800efd0:	20000e54 	.word	0x20000e54
 800efd4:	e000ed04 	.word	0xe000ed04

0800efd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b084      	sub	sp, #16
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800efe2:	4b21      	ldr	r3, [pc, #132]	@ (800f068 <prvAddCurrentTaskToDelayedList+0x90>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efe8:	4b20      	ldr	r3, [pc, #128]	@ (800f06c <prvAddCurrentTaskToDelayedList+0x94>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	3304      	adds	r3, #4
 800efee:	4618      	mov	r0, r3
 800eff0:	f7fd fab4 	bl	800c55c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800effa:	d10a      	bne.n	800f012 <prvAddCurrentTaskToDelayedList+0x3a>
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d007      	beq.n	800f012 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f002:	4b1a      	ldr	r3, [pc, #104]	@ (800f06c <prvAddCurrentTaskToDelayedList+0x94>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	3304      	adds	r3, #4
 800f008:	4619      	mov	r1, r3
 800f00a:	4819      	ldr	r0, [pc, #100]	@ (800f070 <prvAddCurrentTaskToDelayedList+0x98>)
 800f00c:	f7fd fa49 	bl	800c4a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f010:	e026      	b.n	800f060 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f012:	68fa      	ldr	r2, [r7, #12]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	4413      	add	r3, r2
 800f018:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f01a:	4b14      	ldr	r3, [pc, #80]	@ (800f06c <prvAddCurrentTaskToDelayedList+0x94>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	68ba      	ldr	r2, [r7, #8]
 800f020:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f022:	68ba      	ldr	r2, [r7, #8]
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	429a      	cmp	r2, r3
 800f028:	d209      	bcs.n	800f03e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f02a:	4b12      	ldr	r3, [pc, #72]	@ (800f074 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f02c:	681a      	ldr	r2, [r3, #0]
 800f02e:	4b0f      	ldr	r3, [pc, #60]	@ (800f06c <prvAddCurrentTaskToDelayedList+0x94>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	3304      	adds	r3, #4
 800f034:	4619      	mov	r1, r3
 800f036:	4610      	mov	r0, r2
 800f038:	f7fd fa57 	bl	800c4ea <vListInsert>
}
 800f03c:	e010      	b.n	800f060 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f03e:	4b0e      	ldr	r3, [pc, #56]	@ (800f078 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f040:	681a      	ldr	r2, [r3, #0]
 800f042:	4b0a      	ldr	r3, [pc, #40]	@ (800f06c <prvAddCurrentTaskToDelayedList+0x94>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	3304      	adds	r3, #4
 800f048:	4619      	mov	r1, r3
 800f04a:	4610      	mov	r0, r2
 800f04c:	f7fd fa4d 	bl	800c4ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f050:	4b0a      	ldr	r3, [pc, #40]	@ (800f07c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	68ba      	ldr	r2, [r7, #8]
 800f056:	429a      	cmp	r2, r3
 800f058:	d202      	bcs.n	800f060 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f05a:	4a08      	ldr	r2, [pc, #32]	@ (800f07c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	6013      	str	r3, [r2, #0]
}
 800f060:	bf00      	nop
 800f062:	3710      	adds	r7, #16
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}
 800f068:	2000132c 	.word	0x2000132c
 800f06c:	20000e54 	.word	0x20000e54
 800f070:	20001314 	.word	0x20001314
 800f074:	200012e4 	.word	0x200012e4
 800f078:	200012e0 	.word	0x200012e0
 800f07c:	20001348 	.word	0x20001348

0800f080 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b08a      	sub	sp, #40	@ 0x28
 800f084:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f086:	2300      	movs	r3, #0
 800f088:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f08a:	f000 fb71 	bl	800f770 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f08e:	4b1d      	ldr	r3, [pc, #116]	@ (800f104 <xTimerCreateTimerTask+0x84>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d021      	beq.n	800f0da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f096:	2300      	movs	r3, #0
 800f098:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f09a:	2300      	movs	r3, #0
 800f09c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f09e:	1d3a      	adds	r2, r7, #4
 800f0a0:	f107 0108 	add.w	r1, r7, #8
 800f0a4:	f107 030c 	add.w	r3, r7, #12
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7fc fff7 	bl	800c09c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f0ae:	6879      	ldr	r1, [r7, #4]
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	68fa      	ldr	r2, [r7, #12]
 800f0b4:	9202      	str	r2, [sp, #8]
 800f0b6:	9301      	str	r3, [sp, #4]
 800f0b8:	2302      	movs	r3, #2
 800f0ba:	9300      	str	r3, [sp, #0]
 800f0bc:	2300      	movs	r3, #0
 800f0be:	460a      	mov	r2, r1
 800f0c0:	4911      	ldr	r1, [pc, #68]	@ (800f108 <xTimerCreateTimerTask+0x88>)
 800f0c2:	4812      	ldr	r0, [pc, #72]	@ (800f10c <xTimerCreateTimerTask+0x8c>)
 800f0c4:	f7fe f986 	bl	800d3d4 <xTaskCreateStatic>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	4a11      	ldr	r2, [pc, #68]	@ (800f110 <xTimerCreateTimerTask+0x90>)
 800f0cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f0ce:	4b10      	ldr	r3, [pc, #64]	@ (800f110 <xTimerCreateTimerTask+0x90>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d001      	beq.n	800f0da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f0da:	697b      	ldr	r3, [r7, #20]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d10b      	bne.n	800f0f8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0e4:	f383 8811 	msr	BASEPRI, r3
 800f0e8:	f3bf 8f6f 	isb	sy
 800f0ec:	f3bf 8f4f 	dsb	sy
 800f0f0:	613b      	str	r3, [r7, #16]
}
 800f0f2:	bf00      	nop
 800f0f4:	bf00      	nop
 800f0f6:	e7fd      	b.n	800f0f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f0f8:	697b      	ldr	r3, [r7, #20]
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3718      	adds	r7, #24
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}
 800f102:	bf00      	nop
 800f104:	20001384 	.word	0x20001384
 800f108:	08014314 	.word	0x08014314
 800f10c:	0800f309 	.word	0x0800f309
 800f110:	20001388 	.word	0x20001388

0800f114 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f114:	b580      	push	{r7, lr}
 800f116:	b088      	sub	sp, #32
 800f118:	af02      	add	r7, sp, #8
 800f11a:	60f8      	str	r0, [r7, #12]
 800f11c:	60b9      	str	r1, [r7, #8]
 800f11e:	607a      	str	r2, [r7, #4]
 800f120:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800f122:	202c      	movs	r0, #44	@ 0x2c
 800f124:	f000 fdda 	bl	800fcdc <pvPortMalloc>
 800f128:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d00d      	beq.n	800f14c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	2200      	movs	r2, #0
 800f134:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	9301      	str	r3, [sp, #4]
 800f13c:	6a3b      	ldr	r3, [r7, #32]
 800f13e:	9300      	str	r3, [sp, #0]
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	687a      	ldr	r2, [r7, #4]
 800f144:	68b9      	ldr	r1, [r7, #8]
 800f146:	68f8      	ldr	r0, [r7, #12]
 800f148:	f000 f805 	bl	800f156 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f14c:	697b      	ldr	r3, [r7, #20]
	}
 800f14e:	4618      	mov	r0, r3
 800f150:	3718      	adds	r7, #24
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}

0800f156 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f156:	b580      	push	{r7, lr}
 800f158:	b086      	sub	sp, #24
 800f15a:	af00      	add	r7, sp, #0
 800f15c:	60f8      	str	r0, [r7, #12]
 800f15e:	60b9      	str	r1, [r7, #8]
 800f160:	607a      	str	r2, [r7, #4]
 800f162:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d10b      	bne.n	800f182 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800f16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f16e:	f383 8811 	msr	BASEPRI, r3
 800f172:	f3bf 8f6f 	isb	sy
 800f176:	f3bf 8f4f 	dsb	sy
 800f17a:	617b      	str	r3, [r7, #20]
}
 800f17c:	bf00      	nop
 800f17e:	bf00      	nop
 800f180:	e7fd      	b.n	800f17e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f184:	2b00      	cmp	r3, #0
 800f186:	d01e      	beq.n	800f1c6 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f188:	f000 faf2 	bl	800f770 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f18e:	68fa      	ldr	r2, [r7, #12]
 800f190:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f194:	68ba      	ldr	r2, [r7, #8]
 800f196:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800f198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f19a:	683a      	ldr	r2, [r7, #0]
 800f19c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1a0:	6a3a      	ldr	r2, [r7, #32]
 800f1a2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1a6:	3304      	adds	r3, #4
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f7fd f96d 	bl	800c488 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d008      	beq.n	800f1c6 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f1ba:	f043 0304 	orr.w	r3, r3, #4
 800f1be:	b2da      	uxtb	r2, r3
 800f1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f1c6:	bf00      	nop
 800f1c8:	3718      	adds	r7, #24
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}
	...

0800f1d0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b08a      	sub	sp, #40	@ 0x28
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	60f8      	str	r0, [r7, #12]
 800f1d8:	60b9      	str	r1, [r7, #8]
 800f1da:	607a      	str	r2, [r7, #4]
 800f1dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d10b      	bne.n	800f200 <xTimerGenericCommand+0x30>
	__asm volatile
 800f1e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1ec:	f383 8811 	msr	BASEPRI, r3
 800f1f0:	f3bf 8f6f 	isb	sy
 800f1f4:	f3bf 8f4f 	dsb	sy
 800f1f8:	623b      	str	r3, [r7, #32]
}
 800f1fa:	bf00      	nop
 800f1fc:	bf00      	nop
 800f1fe:	e7fd      	b.n	800f1fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f200:	4b19      	ldr	r3, [pc, #100]	@ (800f268 <xTimerGenericCommand+0x98>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d02a      	beq.n	800f25e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	2b05      	cmp	r3, #5
 800f218:	dc18      	bgt.n	800f24c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f21a:	f7ff fbc9 	bl	800e9b0 <xTaskGetSchedulerState>
 800f21e:	4603      	mov	r3, r0
 800f220:	2b02      	cmp	r3, #2
 800f222:	d109      	bne.n	800f238 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f224:	4b10      	ldr	r3, [pc, #64]	@ (800f268 <xTimerGenericCommand+0x98>)
 800f226:	6818      	ldr	r0, [r3, #0]
 800f228:	f107 0110 	add.w	r1, r7, #16
 800f22c:	2300      	movs	r3, #0
 800f22e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f230:	f7fd fb36 	bl	800c8a0 <xQueueGenericSend>
 800f234:	6278      	str	r0, [r7, #36]	@ 0x24
 800f236:	e012      	b.n	800f25e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f238:	4b0b      	ldr	r3, [pc, #44]	@ (800f268 <xTimerGenericCommand+0x98>)
 800f23a:	6818      	ldr	r0, [r3, #0]
 800f23c:	f107 0110 	add.w	r1, r7, #16
 800f240:	2300      	movs	r3, #0
 800f242:	2200      	movs	r2, #0
 800f244:	f7fd fb2c 	bl	800c8a0 <xQueueGenericSend>
 800f248:	6278      	str	r0, [r7, #36]	@ 0x24
 800f24a:	e008      	b.n	800f25e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f24c:	4b06      	ldr	r3, [pc, #24]	@ (800f268 <xTimerGenericCommand+0x98>)
 800f24e:	6818      	ldr	r0, [r3, #0]
 800f250:	f107 0110 	add.w	r1, r7, #16
 800f254:	2300      	movs	r3, #0
 800f256:	683a      	ldr	r2, [r7, #0]
 800f258:	f7fd fc24 	bl	800caa4 <xQueueGenericSendFromISR>
 800f25c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f260:	4618      	mov	r0, r3
 800f262:	3728      	adds	r7, #40	@ 0x28
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}
 800f268:	20001384 	.word	0x20001384

0800f26c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b088      	sub	sp, #32
 800f270:	af02      	add	r7, sp, #8
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f276:	4b23      	ldr	r3, [pc, #140]	@ (800f304 <prvProcessExpiredTimer+0x98>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	68db      	ldr	r3, [r3, #12]
 800f27c:	68db      	ldr	r3, [r3, #12]
 800f27e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	3304      	adds	r3, #4
 800f284:	4618      	mov	r0, r3
 800f286:	f7fd f969 	bl	800c55c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f290:	f003 0304 	and.w	r3, r3, #4
 800f294:	2b00      	cmp	r3, #0
 800f296:	d023      	beq.n	800f2e0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	699a      	ldr	r2, [r3, #24]
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	18d1      	adds	r1, r2, r3
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	683a      	ldr	r2, [r7, #0]
 800f2a4:	6978      	ldr	r0, [r7, #20]
 800f2a6:	f000 f8d5 	bl	800f454 <prvInsertTimerInActiveList>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d020      	beq.n	800f2f2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	9300      	str	r3, [sp, #0]
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	687a      	ldr	r2, [r7, #4]
 800f2b8:	2100      	movs	r1, #0
 800f2ba:	6978      	ldr	r0, [r7, #20]
 800f2bc:	f7ff ff88 	bl	800f1d0 <xTimerGenericCommand>
 800f2c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f2c2:	693b      	ldr	r3, [r7, #16]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d114      	bne.n	800f2f2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f2c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2cc:	f383 8811 	msr	BASEPRI, r3
 800f2d0:	f3bf 8f6f 	isb	sy
 800f2d4:	f3bf 8f4f 	dsb	sy
 800f2d8:	60fb      	str	r3, [r7, #12]
}
 800f2da:	bf00      	nop
 800f2dc:	bf00      	nop
 800f2de:	e7fd      	b.n	800f2dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f2e6:	f023 0301 	bic.w	r3, r3, #1
 800f2ea:	b2da      	uxtb	r2, r3
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	6a1b      	ldr	r3, [r3, #32]
 800f2f6:	6978      	ldr	r0, [r7, #20]
 800f2f8:	4798      	blx	r3
}
 800f2fa:	bf00      	nop
 800f2fc:	3718      	adds	r7, #24
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}
 800f302:	bf00      	nop
 800f304:	2000137c 	.word	0x2000137c

0800f308 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b084      	sub	sp, #16
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f310:	f107 0308 	add.w	r3, r7, #8
 800f314:	4618      	mov	r0, r3
 800f316:	f000 f859 	bl	800f3cc <prvGetNextExpireTime>
 800f31a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	4619      	mov	r1, r3
 800f320:	68f8      	ldr	r0, [r7, #12]
 800f322:	f000 f805 	bl	800f330 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f326:	f000 f8d7 	bl	800f4d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f32a:	bf00      	nop
 800f32c:	e7f0      	b.n	800f310 <prvTimerTask+0x8>
	...

0800f330 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f33a:	f7fe fd31 	bl	800dda0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f33e:	f107 0308 	add.w	r3, r7, #8
 800f342:	4618      	mov	r0, r3
 800f344:	f000 f866 	bl	800f414 <prvSampleTimeNow>
 800f348:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d130      	bne.n	800f3b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d10a      	bne.n	800f36c <prvProcessTimerOrBlockTask+0x3c>
 800f356:	687a      	ldr	r2, [r7, #4]
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d806      	bhi.n	800f36c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f35e:	f7fe fd2d 	bl	800ddbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f362:	68f9      	ldr	r1, [r7, #12]
 800f364:	6878      	ldr	r0, [r7, #4]
 800f366:	f7ff ff81 	bl	800f26c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f36a:	e024      	b.n	800f3b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d008      	beq.n	800f384 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f372:	4b13      	ldr	r3, [pc, #76]	@ (800f3c0 <prvProcessTimerOrBlockTask+0x90>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d101      	bne.n	800f380 <prvProcessTimerOrBlockTask+0x50>
 800f37c:	2301      	movs	r3, #1
 800f37e:	e000      	b.n	800f382 <prvProcessTimerOrBlockTask+0x52>
 800f380:	2300      	movs	r3, #0
 800f382:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f384:	4b0f      	ldr	r3, [pc, #60]	@ (800f3c4 <prvProcessTimerOrBlockTask+0x94>)
 800f386:	6818      	ldr	r0, [r3, #0]
 800f388:	687a      	ldr	r2, [r7, #4]
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	1ad3      	subs	r3, r2, r3
 800f38e:	683a      	ldr	r2, [r7, #0]
 800f390:	4619      	mov	r1, r3
 800f392:	f7fd ffeb 	bl	800d36c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f396:	f7fe fd11 	bl	800ddbc <xTaskResumeAll>
 800f39a:	4603      	mov	r3, r0
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d10a      	bne.n	800f3b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f3a0:	4b09      	ldr	r3, [pc, #36]	@ (800f3c8 <prvProcessTimerOrBlockTask+0x98>)
 800f3a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f3a6:	601a      	str	r2, [r3, #0]
 800f3a8:	f3bf 8f4f 	dsb	sy
 800f3ac:	f3bf 8f6f 	isb	sy
}
 800f3b0:	e001      	b.n	800f3b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f3b2:	f7fe fd03 	bl	800ddbc <xTaskResumeAll>
}
 800f3b6:	bf00      	nop
 800f3b8:	3710      	adds	r7, #16
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}
 800f3be:	bf00      	nop
 800f3c0:	20001380 	.word	0x20001380
 800f3c4:	20001384 	.word	0x20001384
 800f3c8:	e000ed04 	.word	0xe000ed04

0800f3cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b085      	sub	sp, #20
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f3d4:	4b0e      	ldr	r3, [pc, #56]	@ (800f410 <prvGetNextExpireTime+0x44>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d101      	bne.n	800f3e2 <prvGetNextExpireTime+0x16>
 800f3de:	2201      	movs	r2, #1
 800f3e0:	e000      	b.n	800f3e4 <prvGetNextExpireTime+0x18>
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d105      	bne.n	800f3fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f3f0:	4b07      	ldr	r3, [pc, #28]	@ (800f410 <prvGetNextExpireTime+0x44>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	68db      	ldr	r3, [r3, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	60fb      	str	r3, [r7, #12]
 800f3fa:	e001      	b.n	800f400 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f400:	68fb      	ldr	r3, [r7, #12]
}
 800f402:	4618      	mov	r0, r3
 800f404:	3714      	adds	r7, #20
 800f406:	46bd      	mov	sp, r7
 800f408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40c:	4770      	bx	lr
 800f40e:	bf00      	nop
 800f410:	2000137c 	.word	0x2000137c

0800f414 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b084      	sub	sp, #16
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f41c:	f7fe fd6c 	bl	800def8 <xTaskGetTickCount>
 800f420:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f422:	4b0b      	ldr	r3, [pc, #44]	@ (800f450 <prvSampleTimeNow+0x3c>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	68fa      	ldr	r2, [r7, #12]
 800f428:	429a      	cmp	r2, r3
 800f42a:	d205      	bcs.n	800f438 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f42c:	f000 f93a 	bl	800f6a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2201      	movs	r2, #1
 800f434:	601a      	str	r2, [r3, #0]
 800f436:	e002      	b.n	800f43e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2200      	movs	r2, #0
 800f43c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f43e:	4a04      	ldr	r2, [pc, #16]	@ (800f450 <prvSampleTimeNow+0x3c>)
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f444:	68fb      	ldr	r3, [r7, #12]
}
 800f446:	4618      	mov	r0, r3
 800f448:	3710      	adds	r7, #16
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
 800f44e:	bf00      	nop
 800f450:	2000138c 	.word	0x2000138c

0800f454 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b086      	sub	sp, #24
 800f458:	af00      	add	r7, sp, #0
 800f45a:	60f8      	str	r0, [r7, #12]
 800f45c:	60b9      	str	r1, [r7, #8]
 800f45e:	607a      	str	r2, [r7, #4]
 800f460:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f462:	2300      	movs	r3, #0
 800f464:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	68ba      	ldr	r2, [r7, #8]
 800f46a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	68fa      	ldr	r2, [r7, #12]
 800f470:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f472:	68ba      	ldr	r2, [r7, #8]
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	429a      	cmp	r2, r3
 800f478:	d812      	bhi.n	800f4a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f47a:	687a      	ldr	r2, [r7, #4]
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	1ad2      	subs	r2, r2, r3
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	699b      	ldr	r3, [r3, #24]
 800f484:	429a      	cmp	r2, r3
 800f486:	d302      	bcc.n	800f48e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f488:	2301      	movs	r3, #1
 800f48a:	617b      	str	r3, [r7, #20]
 800f48c:	e01b      	b.n	800f4c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f48e:	4b10      	ldr	r3, [pc, #64]	@ (800f4d0 <prvInsertTimerInActiveList+0x7c>)
 800f490:	681a      	ldr	r2, [r3, #0]
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	3304      	adds	r3, #4
 800f496:	4619      	mov	r1, r3
 800f498:	4610      	mov	r0, r2
 800f49a:	f7fd f826 	bl	800c4ea <vListInsert>
 800f49e:	e012      	b.n	800f4c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f4a0:	687a      	ldr	r2, [r7, #4]
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	429a      	cmp	r2, r3
 800f4a6:	d206      	bcs.n	800f4b6 <prvInsertTimerInActiveList+0x62>
 800f4a8:	68ba      	ldr	r2, [r7, #8]
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	429a      	cmp	r2, r3
 800f4ae:	d302      	bcc.n	800f4b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	617b      	str	r3, [r7, #20]
 800f4b4:	e007      	b.n	800f4c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f4b6:	4b07      	ldr	r3, [pc, #28]	@ (800f4d4 <prvInsertTimerInActiveList+0x80>)
 800f4b8:	681a      	ldr	r2, [r3, #0]
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	3304      	adds	r3, #4
 800f4be:	4619      	mov	r1, r3
 800f4c0:	4610      	mov	r0, r2
 800f4c2:	f7fd f812 	bl	800c4ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f4c6:	697b      	ldr	r3, [r7, #20]
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3718      	adds	r7, #24
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}
 800f4d0:	20001380 	.word	0x20001380
 800f4d4:	2000137c 	.word	0x2000137c

0800f4d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b08e      	sub	sp, #56	@ 0x38
 800f4dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f4de:	e0ce      	b.n	800f67e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	da19      	bge.n	800f51a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f4e6:	1d3b      	adds	r3, r7, #4
 800f4e8:	3304      	adds	r3, #4
 800f4ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d10b      	bne.n	800f50a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4f6:	f383 8811 	msr	BASEPRI, r3
 800f4fa:	f3bf 8f6f 	isb	sy
 800f4fe:	f3bf 8f4f 	dsb	sy
 800f502:	61fb      	str	r3, [r7, #28]
}
 800f504:	bf00      	nop
 800f506:	bf00      	nop
 800f508:	e7fd      	b.n	800f506 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f50a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f510:	6850      	ldr	r0, [r2, #4]
 800f512:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f514:	6892      	ldr	r2, [r2, #8]
 800f516:	4611      	mov	r1, r2
 800f518:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	f2c0 80ae 	blt.w	800f67e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f528:	695b      	ldr	r3, [r3, #20]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d004      	beq.n	800f538 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f530:	3304      	adds	r3, #4
 800f532:	4618      	mov	r0, r3
 800f534:	f7fd f812 	bl	800c55c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f538:	463b      	mov	r3, r7
 800f53a:	4618      	mov	r0, r3
 800f53c:	f7ff ff6a 	bl	800f414 <prvSampleTimeNow>
 800f540:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2b09      	cmp	r3, #9
 800f546:	f200 8097 	bhi.w	800f678 <prvProcessReceivedCommands+0x1a0>
 800f54a:	a201      	add	r2, pc, #4	@ (adr r2, 800f550 <prvProcessReceivedCommands+0x78>)
 800f54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f550:	0800f579 	.word	0x0800f579
 800f554:	0800f579 	.word	0x0800f579
 800f558:	0800f579 	.word	0x0800f579
 800f55c:	0800f5ef 	.word	0x0800f5ef
 800f560:	0800f603 	.word	0x0800f603
 800f564:	0800f64f 	.word	0x0800f64f
 800f568:	0800f579 	.word	0x0800f579
 800f56c:	0800f579 	.word	0x0800f579
 800f570:	0800f5ef 	.word	0x0800f5ef
 800f574:	0800f603 	.word	0x0800f603
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f57a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f57e:	f043 0301 	orr.w	r3, r3, #1
 800f582:	b2da      	uxtb	r2, r3
 800f584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f586:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f58a:	68ba      	ldr	r2, [r7, #8]
 800f58c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f58e:	699b      	ldr	r3, [r3, #24]
 800f590:	18d1      	adds	r1, r2, r3
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f596:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f598:	f7ff ff5c 	bl	800f454 <prvInsertTimerInActiveList>
 800f59c:	4603      	mov	r3, r0
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d06c      	beq.n	800f67c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5a4:	6a1b      	ldr	r3, [r3, #32]
 800f5a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f5a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f5aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f5b0:	f003 0304 	and.w	r3, r3, #4
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d061      	beq.n	800f67c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f5b8:	68ba      	ldr	r2, [r7, #8]
 800f5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5bc:	699b      	ldr	r3, [r3, #24]
 800f5be:	441a      	add	r2, r3
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	9300      	str	r3, [sp, #0]
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	2100      	movs	r1, #0
 800f5c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f5ca:	f7ff fe01 	bl	800f1d0 <xTimerGenericCommand>
 800f5ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f5d0:	6a3b      	ldr	r3, [r7, #32]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d152      	bne.n	800f67c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5da:	f383 8811 	msr	BASEPRI, r3
 800f5de:	f3bf 8f6f 	isb	sy
 800f5e2:	f3bf 8f4f 	dsb	sy
 800f5e6:	61bb      	str	r3, [r7, #24]
}
 800f5e8:	bf00      	nop
 800f5ea:	bf00      	nop
 800f5ec:	e7fd      	b.n	800f5ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f5ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f5f4:	f023 0301 	bic.w	r3, r3, #1
 800f5f8:	b2da      	uxtb	r2, r3
 800f5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f600:	e03d      	b.n	800f67e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f604:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f608:	f043 0301 	orr.w	r3, r3, #1
 800f60c:	b2da      	uxtb	r2, r3
 800f60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f610:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f614:	68ba      	ldr	r2, [r7, #8]
 800f616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f618:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f61c:	699b      	ldr	r3, [r3, #24]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d10b      	bne.n	800f63a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f626:	f383 8811 	msr	BASEPRI, r3
 800f62a:	f3bf 8f6f 	isb	sy
 800f62e:	f3bf 8f4f 	dsb	sy
 800f632:	617b      	str	r3, [r7, #20]
}
 800f634:	bf00      	nop
 800f636:	bf00      	nop
 800f638:	e7fd      	b.n	800f636 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f63a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f63c:	699a      	ldr	r2, [r3, #24]
 800f63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f640:	18d1      	adds	r1, r2, r3
 800f642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f646:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f648:	f7ff ff04 	bl	800f454 <prvInsertTimerInActiveList>
					break;
 800f64c:	e017      	b.n	800f67e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f64e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f650:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f654:	f003 0302 	and.w	r3, r3, #2
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d103      	bne.n	800f664 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f65c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f65e:	f000 fc0b 	bl	800fe78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f662:	e00c      	b.n	800f67e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f666:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f66a:	f023 0301 	bic.w	r3, r3, #1
 800f66e:	b2da      	uxtb	r2, r3
 800f670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f672:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f676:	e002      	b.n	800f67e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f678:	bf00      	nop
 800f67a:	e000      	b.n	800f67e <prvProcessReceivedCommands+0x1a6>
					break;
 800f67c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f67e:	4b08      	ldr	r3, [pc, #32]	@ (800f6a0 <prvProcessReceivedCommands+0x1c8>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	1d39      	adds	r1, r7, #4
 800f684:	2200      	movs	r2, #0
 800f686:	4618      	mov	r0, r3
 800f688:	f7fd faaa 	bl	800cbe0 <xQueueReceive>
 800f68c:	4603      	mov	r3, r0
 800f68e:	2b00      	cmp	r3, #0
 800f690:	f47f af26 	bne.w	800f4e0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f694:	bf00      	nop
 800f696:	bf00      	nop
 800f698:	3730      	adds	r7, #48	@ 0x30
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}
 800f69e:	bf00      	nop
 800f6a0:	20001384 	.word	0x20001384

0800f6a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b088      	sub	sp, #32
 800f6a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f6aa:	e049      	b.n	800f740 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f6ac:	4b2e      	ldr	r3, [pc, #184]	@ (800f768 <prvSwitchTimerLists+0xc4>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	68db      	ldr	r3, [r3, #12]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6b6:	4b2c      	ldr	r3, [pc, #176]	@ (800f768 <prvSwitchTimerLists+0xc4>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	68db      	ldr	r3, [r3, #12]
 800f6bc:	68db      	ldr	r3, [r3, #12]
 800f6be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	3304      	adds	r3, #4
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7fc ff49 	bl	800c55c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	6a1b      	ldr	r3, [r3, #32]
 800f6ce:	68f8      	ldr	r0, [r7, #12]
 800f6d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f6d8:	f003 0304 	and.w	r3, r3, #4
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d02f      	beq.n	800f740 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	699b      	ldr	r3, [r3, #24]
 800f6e4:	693a      	ldr	r2, [r7, #16]
 800f6e6:	4413      	add	r3, r2
 800f6e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f6ea:	68ba      	ldr	r2, [r7, #8]
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d90e      	bls.n	800f710 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	68ba      	ldr	r2, [r7, #8]
 800f6f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	68fa      	ldr	r2, [r7, #12]
 800f6fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f6fe:	4b1a      	ldr	r3, [pc, #104]	@ (800f768 <prvSwitchTimerLists+0xc4>)
 800f700:	681a      	ldr	r2, [r3, #0]
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	3304      	adds	r3, #4
 800f706:	4619      	mov	r1, r3
 800f708:	4610      	mov	r0, r2
 800f70a:	f7fc feee 	bl	800c4ea <vListInsert>
 800f70e:	e017      	b.n	800f740 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f710:	2300      	movs	r3, #0
 800f712:	9300      	str	r3, [sp, #0]
 800f714:	2300      	movs	r3, #0
 800f716:	693a      	ldr	r2, [r7, #16]
 800f718:	2100      	movs	r1, #0
 800f71a:	68f8      	ldr	r0, [r7, #12]
 800f71c:	f7ff fd58 	bl	800f1d0 <xTimerGenericCommand>
 800f720:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d10b      	bne.n	800f740 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f72c:	f383 8811 	msr	BASEPRI, r3
 800f730:	f3bf 8f6f 	isb	sy
 800f734:	f3bf 8f4f 	dsb	sy
 800f738:	603b      	str	r3, [r7, #0]
}
 800f73a:	bf00      	nop
 800f73c:	bf00      	nop
 800f73e:	e7fd      	b.n	800f73c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f740:	4b09      	ldr	r3, [pc, #36]	@ (800f768 <prvSwitchTimerLists+0xc4>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d1b0      	bne.n	800f6ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f74a:	4b07      	ldr	r3, [pc, #28]	@ (800f768 <prvSwitchTimerLists+0xc4>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f750:	4b06      	ldr	r3, [pc, #24]	@ (800f76c <prvSwitchTimerLists+0xc8>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	4a04      	ldr	r2, [pc, #16]	@ (800f768 <prvSwitchTimerLists+0xc4>)
 800f756:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f758:	4a04      	ldr	r2, [pc, #16]	@ (800f76c <prvSwitchTimerLists+0xc8>)
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	6013      	str	r3, [r2, #0]
}
 800f75e:	bf00      	nop
 800f760:	3718      	adds	r7, #24
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}
 800f766:	bf00      	nop
 800f768:	2000137c 	.word	0x2000137c
 800f76c:	20001380 	.word	0x20001380

0800f770 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b082      	sub	sp, #8
 800f774:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f776:	f000 f98f 	bl	800fa98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f77a:	4b15      	ldr	r3, [pc, #84]	@ (800f7d0 <prvCheckForValidListAndQueue+0x60>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d120      	bne.n	800f7c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f782:	4814      	ldr	r0, [pc, #80]	@ (800f7d4 <prvCheckForValidListAndQueue+0x64>)
 800f784:	f7fc fe60 	bl	800c448 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f788:	4813      	ldr	r0, [pc, #76]	@ (800f7d8 <prvCheckForValidListAndQueue+0x68>)
 800f78a:	f7fc fe5d 	bl	800c448 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f78e:	4b13      	ldr	r3, [pc, #76]	@ (800f7dc <prvCheckForValidListAndQueue+0x6c>)
 800f790:	4a10      	ldr	r2, [pc, #64]	@ (800f7d4 <prvCheckForValidListAndQueue+0x64>)
 800f792:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f794:	4b12      	ldr	r3, [pc, #72]	@ (800f7e0 <prvCheckForValidListAndQueue+0x70>)
 800f796:	4a10      	ldr	r2, [pc, #64]	@ (800f7d8 <prvCheckForValidListAndQueue+0x68>)
 800f798:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f79a:	2300      	movs	r3, #0
 800f79c:	9300      	str	r3, [sp, #0]
 800f79e:	4b11      	ldr	r3, [pc, #68]	@ (800f7e4 <prvCheckForValidListAndQueue+0x74>)
 800f7a0:	4a11      	ldr	r2, [pc, #68]	@ (800f7e8 <prvCheckForValidListAndQueue+0x78>)
 800f7a2:	2110      	movs	r1, #16
 800f7a4:	200a      	movs	r0, #10
 800f7a6:	f7fc ff6d 	bl	800c684 <xQueueGenericCreateStatic>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	4a08      	ldr	r2, [pc, #32]	@ (800f7d0 <prvCheckForValidListAndQueue+0x60>)
 800f7ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f7b0:	4b07      	ldr	r3, [pc, #28]	@ (800f7d0 <prvCheckForValidListAndQueue+0x60>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d005      	beq.n	800f7c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f7b8:	4b05      	ldr	r3, [pc, #20]	@ (800f7d0 <prvCheckForValidListAndQueue+0x60>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	490b      	ldr	r1, [pc, #44]	@ (800f7ec <prvCheckForValidListAndQueue+0x7c>)
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f7fd fdaa 	bl	800d318 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f7c4:	f000 f99a 	bl	800fafc <vPortExitCritical>
}
 800f7c8:	bf00      	nop
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}
 800f7ce:	bf00      	nop
 800f7d0:	20001384 	.word	0x20001384
 800f7d4:	20001354 	.word	0x20001354
 800f7d8:	20001368 	.word	0x20001368
 800f7dc:	2000137c 	.word	0x2000137c
 800f7e0:	20001380 	.word	0x20001380
 800f7e4:	20001430 	.word	0x20001430
 800f7e8:	20001390 	.word	0x20001390
 800f7ec:	0801431c 	.word	0x0801431c

0800f7f0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b08a      	sub	sp, #40	@ 0x28
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	60f8      	str	r0, [r7, #12]
 800f7f8:	60b9      	str	r1, [r7, #8]
 800f7fa:	607a      	str	r2, [r7, #4]
 800f7fc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800f7fe:	f06f 0301 	mvn.w	r3, #1
 800f802:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f810:	4b06      	ldr	r3, [pc, #24]	@ (800f82c <xTimerPendFunctionCallFromISR+0x3c>)
 800f812:	6818      	ldr	r0, [r3, #0]
 800f814:	f107 0114 	add.w	r1, r7, #20
 800f818:	2300      	movs	r3, #0
 800f81a:	683a      	ldr	r2, [r7, #0]
 800f81c:	f7fd f942 	bl	800caa4 <xQueueGenericSendFromISR>
 800f820:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800f822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f824:	4618      	mov	r0, r3
 800f826:	3728      	adds	r7, #40	@ 0x28
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}
 800f82c:	20001384 	.word	0x20001384

0800f830 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f830:	b480      	push	{r7}
 800f832:	b085      	sub	sp, #20
 800f834:	af00      	add	r7, sp, #0
 800f836:	60f8      	str	r0, [r7, #12]
 800f838:	60b9      	str	r1, [r7, #8]
 800f83a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	3b04      	subs	r3, #4
 800f840:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f848:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	3b04      	subs	r3, #4
 800f84e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	f023 0201 	bic.w	r2, r3, #1
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	3b04      	subs	r3, #4
 800f85e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f860:	4a0c      	ldr	r2, [pc, #48]	@ (800f894 <pxPortInitialiseStack+0x64>)
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	3b14      	subs	r3, #20
 800f86a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f86c:	687a      	ldr	r2, [r7, #4]
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	3b04      	subs	r3, #4
 800f876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	f06f 0202 	mvn.w	r2, #2
 800f87e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	3b20      	subs	r3, #32
 800f884:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f886:	68fb      	ldr	r3, [r7, #12]
}
 800f888:	4618      	mov	r0, r3
 800f88a:	3714      	adds	r7, #20
 800f88c:	46bd      	mov	sp, r7
 800f88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f892:	4770      	bx	lr
 800f894:	0800f899 	.word	0x0800f899

0800f898 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f898:	b480      	push	{r7}
 800f89a:	b085      	sub	sp, #20
 800f89c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f89e:	2300      	movs	r3, #0
 800f8a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f8a2:	4b13      	ldr	r3, [pc, #76]	@ (800f8f0 <prvTaskExitError+0x58>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8aa:	d00b      	beq.n	800f8c4 <prvTaskExitError+0x2c>
	__asm volatile
 800f8ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8b0:	f383 8811 	msr	BASEPRI, r3
 800f8b4:	f3bf 8f6f 	isb	sy
 800f8b8:	f3bf 8f4f 	dsb	sy
 800f8bc:	60fb      	str	r3, [r7, #12]
}
 800f8be:	bf00      	nop
 800f8c0:	bf00      	nop
 800f8c2:	e7fd      	b.n	800f8c0 <prvTaskExitError+0x28>
	__asm volatile
 800f8c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8c8:	f383 8811 	msr	BASEPRI, r3
 800f8cc:	f3bf 8f6f 	isb	sy
 800f8d0:	f3bf 8f4f 	dsb	sy
 800f8d4:	60bb      	str	r3, [r7, #8]
}
 800f8d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f8d8:	bf00      	nop
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d0fc      	beq.n	800f8da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f8e0:	bf00      	nop
 800f8e2:	bf00      	nop
 800f8e4:	3714      	adds	r7, #20
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ec:	4770      	bx	lr
 800f8ee:	bf00      	nop
 800f8f0:	20000258 	.word	0x20000258
	...

0800f900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f900:	4b07      	ldr	r3, [pc, #28]	@ (800f920 <pxCurrentTCBConst2>)
 800f902:	6819      	ldr	r1, [r3, #0]
 800f904:	6808      	ldr	r0, [r1, #0]
 800f906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f90a:	f380 8809 	msr	PSP, r0
 800f90e:	f3bf 8f6f 	isb	sy
 800f912:	f04f 0000 	mov.w	r0, #0
 800f916:	f380 8811 	msr	BASEPRI, r0
 800f91a:	4770      	bx	lr
 800f91c:	f3af 8000 	nop.w

0800f920 <pxCurrentTCBConst2>:
 800f920:	20000e54 	.word	0x20000e54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f924:	bf00      	nop
 800f926:	bf00      	nop

0800f928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f928:	4808      	ldr	r0, [pc, #32]	@ (800f94c <prvPortStartFirstTask+0x24>)
 800f92a:	6800      	ldr	r0, [r0, #0]
 800f92c:	6800      	ldr	r0, [r0, #0]
 800f92e:	f380 8808 	msr	MSP, r0
 800f932:	f04f 0000 	mov.w	r0, #0
 800f936:	f380 8814 	msr	CONTROL, r0
 800f93a:	b662      	cpsie	i
 800f93c:	b661      	cpsie	f
 800f93e:	f3bf 8f4f 	dsb	sy
 800f942:	f3bf 8f6f 	isb	sy
 800f946:	df00      	svc	0
 800f948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f94a:	bf00      	nop
 800f94c:	e000ed08 	.word	0xe000ed08

0800f950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b086      	sub	sp, #24
 800f954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f956:	4b47      	ldr	r3, [pc, #284]	@ (800fa74 <xPortStartScheduler+0x124>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	4a47      	ldr	r2, [pc, #284]	@ (800fa78 <xPortStartScheduler+0x128>)
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d10b      	bne.n	800f978 <xPortStartScheduler+0x28>
	__asm volatile
 800f960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f964:	f383 8811 	msr	BASEPRI, r3
 800f968:	f3bf 8f6f 	isb	sy
 800f96c:	f3bf 8f4f 	dsb	sy
 800f970:	60fb      	str	r3, [r7, #12]
}
 800f972:	bf00      	nop
 800f974:	bf00      	nop
 800f976:	e7fd      	b.n	800f974 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f978:	4b3e      	ldr	r3, [pc, #248]	@ (800fa74 <xPortStartScheduler+0x124>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	4a3f      	ldr	r2, [pc, #252]	@ (800fa7c <xPortStartScheduler+0x12c>)
 800f97e:	4293      	cmp	r3, r2
 800f980:	d10b      	bne.n	800f99a <xPortStartScheduler+0x4a>
	__asm volatile
 800f982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f986:	f383 8811 	msr	BASEPRI, r3
 800f98a:	f3bf 8f6f 	isb	sy
 800f98e:	f3bf 8f4f 	dsb	sy
 800f992:	613b      	str	r3, [r7, #16]
}
 800f994:	bf00      	nop
 800f996:	bf00      	nop
 800f998:	e7fd      	b.n	800f996 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f99a:	4b39      	ldr	r3, [pc, #228]	@ (800fa80 <xPortStartScheduler+0x130>)
 800f99c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	b2db      	uxtb	r3, r3
 800f9a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	22ff      	movs	r2, #255	@ 0xff
 800f9aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	b2db      	uxtb	r3, r3
 800f9b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f9b4:	78fb      	ldrb	r3, [r7, #3]
 800f9b6:	b2db      	uxtb	r3, r3
 800f9b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f9bc:	b2da      	uxtb	r2, r3
 800f9be:	4b31      	ldr	r3, [pc, #196]	@ (800fa84 <xPortStartScheduler+0x134>)
 800f9c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f9c2:	4b31      	ldr	r3, [pc, #196]	@ (800fa88 <xPortStartScheduler+0x138>)
 800f9c4:	2207      	movs	r2, #7
 800f9c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f9c8:	e009      	b.n	800f9de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f9ca:	4b2f      	ldr	r3, [pc, #188]	@ (800fa88 <xPortStartScheduler+0x138>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	3b01      	subs	r3, #1
 800f9d0:	4a2d      	ldr	r2, [pc, #180]	@ (800fa88 <xPortStartScheduler+0x138>)
 800f9d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f9d4:	78fb      	ldrb	r3, [r7, #3]
 800f9d6:	b2db      	uxtb	r3, r3
 800f9d8:	005b      	lsls	r3, r3, #1
 800f9da:	b2db      	uxtb	r3, r3
 800f9dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f9de:	78fb      	ldrb	r3, [r7, #3]
 800f9e0:	b2db      	uxtb	r3, r3
 800f9e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f9e6:	2b80      	cmp	r3, #128	@ 0x80
 800f9e8:	d0ef      	beq.n	800f9ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f9ea:	4b27      	ldr	r3, [pc, #156]	@ (800fa88 <xPortStartScheduler+0x138>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	f1c3 0307 	rsb	r3, r3, #7
 800f9f2:	2b04      	cmp	r3, #4
 800f9f4:	d00b      	beq.n	800fa0e <xPortStartScheduler+0xbe>
	__asm volatile
 800f9f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9fa:	f383 8811 	msr	BASEPRI, r3
 800f9fe:	f3bf 8f6f 	isb	sy
 800fa02:	f3bf 8f4f 	dsb	sy
 800fa06:	60bb      	str	r3, [r7, #8]
}
 800fa08:	bf00      	nop
 800fa0a:	bf00      	nop
 800fa0c:	e7fd      	b.n	800fa0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fa0e:	4b1e      	ldr	r3, [pc, #120]	@ (800fa88 <xPortStartScheduler+0x138>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	021b      	lsls	r3, r3, #8
 800fa14:	4a1c      	ldr	r2, [pc, #112]	@ (800fa88 <xPortStartScheduler+0x138>)
 800fa16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fa18:	4b1b      	ldr	r3, [pc, #108]	@ (800fa88 <xPortStartScheduler+0x138>)
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fa20:	4a19      	ldr	r2, [pc, #100]	@ (800fa88 <xPortStartScheduler+0x138>)
 800fa22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	b2da      	uxtb	r2, r3
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fa2c:	4b17      	ldr	r3, [pc, #92]	@ (800fa8c <xPortStartScheduler+0x13c>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	4a16      	ldr	r2, [pc, #88]	@ (800fa8c <xPortStartScheduler+0x13c>)
 800fa32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fa36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fa38:	4b14      	ldr	r3, [pc, #80]	@ (800fa8c <xPortStartScheduler+0x13c>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	4a13      	ldr	r2, [pc, #76]	@ (800fa8c <xPortStartScheduler+0x13c>)
 800fa3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fa42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fa44:	f000 f8da 	bl	800fbfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fa48:	4b11      	ldr	r3, [pc, #68]	@ (800fa90 <xPortStartScheduler+0x140>)
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fa4e:	f000 f8f9 	bl	800fc44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fa52:	4b10      	ldr	r3, [pc, #64]	@ (800fa94 <xPortStartScheduler+0x144>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	4a0f      	ldr	r2, [pc, #60]	@ (800fa94 <xPortStartScheduler+0x144>)
 800fa58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fa5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fa5e:	f7ff ff63 	bl	800f928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fa62:	f7fe fbe7 	bl	800e234 <vTaskSwitchContext>
	prvTaskExitError();
 800fa66:	f7ff ff17 	bl	800f898 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fa6a:	2300      	movs	r3, #0
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3718      	adds	r7, #24
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}
 800fa74:	e000ed00 	.word	0xe000ed00
 800fa78:	410fc271 	.word	0x410fc271
 800fa7c:	410fc270 	.word	0x410fc270
 800fa80:	e000e400 	.word	0xe000e400
 800fa84:	20001480 	.word	0x20001480
 800fa88:	20001484 	.word	0x20001484
 800fa8c:	e000ed20 	.word	0xe000ed20
 800fa90:	20000258 	.word	0x20000258
 800fa94:	e000ef34 	.word	0xe000ef34

0800fa98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fa98:	b480      	push	{r7}
 800fa9a:	b083      	sub	sp, #12
 800fa9c:	af00      	add	r7, sp, #0
	__asm volatile
 800fa9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faa2:	f383 8811 	msr	BASEPRI, r3
 800faa6:	f3bf 8f6f 	isb	sy
 800faaa:	f3bf 8f4f 	dsb	sy
 800faae:	607b      	str	r3, [r7, #4]
}
 800fab0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fab2:	4b10      	ldr	r3, [pc, #64]	@ (800faf4 <vPortEnterCritical+0x5c>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	3301      	adds	r3, #1
 800fab8:	4a0e      	ldr	r2, [pc, #56]	@ (800faf4 <vPortEnterCritical+0x5c>)
 800faba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fabc:	4b0d      	ldr	r3, [pc, #52]	@ (800faf4 <vPortEnterCritical+0x5c>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	2b01      	cmp	r3, #1
 800fac2:	d110      	bne.n	800fae6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fac4:	4b0c      	ldr	r3, [pc, #48]	@ (800faf8 <vPortEnterCritical+0x60>)
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	b2db      	uxtb	r3, r3
 800faca:	2b00      	cmp	r3, #0
 800facc:	d00b      	beq.n	800fae6 <vPortEnterCritical+0x4e>
	__asm volatile
 800face:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fad2:	f383 8811 	msr	BASEPRI, r3
 800fad6:	f3bf 8f6f 	isb	sy
 800fada:	f3bf 8f4f 	dsb	sy
 800fade:	603b      	str	r3, [r7, #0]
}
 800fae0:	bf00      	nop
 800fae2:	bf00      	nop
 800fae4:	e7fd      	b.n	800fae2 <vPortEnterCritical+0x4a>
	}
}
 800fae6:	bf00      	nop
 800fae8:	370c      	adds	r7, #12
 800faea:	46bd      	mov	sp, r7
 800faec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf0:	4770      	bx	lr
 800faf2:	bf00      	nop
 800faf4:	20000258 	.word	0x20000258
 800faf8:	e000ed04 	.word	0xe000ed04

0800fafc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fafc:	b480      	push	{r7}
 800fafe:	b083      	sub	sp, #12
 800fb00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fb02:	4b12      	ldr	r3, [pc, #72]	@ (800fb4c <vPortExitCritical+0x50>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d10b      	bne.n	800fb22 <vPortExitCritical+0x26>
	__asm volatile
 800fb0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb0e:	f383 8811 	msr	BASEPRI, r3
 800fb12:	f3bf 8f6f 	isb	sy
 800fb16:	f3bf 8f4f 	dsb	sy
 800fb1a:	607b      	str	r3, [r7, #4]
}
 800fb1c:	bf00      	nop
 800fb1e:	bf00      	nop
 800fb20:	e7fd      	b.n	800fb1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fb22:	4b0a      	ldr	r3, [pc, #40]	@ (800fb4c <vPortExitCritical+0x50>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	3b01      	subs	r3, #1
 800fb28:	4a08      	ldr	r2, [pc, #32]	@ (800fb4c <vPortExitCritical+0x50>)
 800fb2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fb2c:	4b07      	ldr	r3, [pc, #28]	@ (800fb4c <vPortExitCritical+0x50>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d105      	bne.n	800fb40 <vPortExitCritical+0x44>
 800fb34:	2300      	movs	r3, #0
 800fb36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	f383 8811 	msr	BASEPRI, r3
}
 800fb3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fb40:	bf00      	nop
 800fb42:	370c      	adds	r7, #12
 800fb44:	46bd      	mov	sp, r7
 800fb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4a:	4770      	bx	lr
 800fb4c:	20000258 	.word	0x20000258

0800fb50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fb50:	f3ef 8009 	mrs	r0, PSP
 800fb54:	f3bf 8f6f 	isb	sy
 800fb58:	4b15      	ldr	r3, [pc, #84]	@ (800fbb0 <pxCurrentTCBConst>)
 800fb5a:	681a      	ldr	r2, [r3, #0]
 800fb5c:	f01e 0f10 	tst.w	lr, #16
 800fb60:	bf08      	it	eq
 800fb62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fb66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb6a:	6010      	str	r0, [r2, #0]
 800fb6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fb70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fb74:	f380 8811 	msr	BASEPRI, r0
 800fb78:	f3bf 8f4f 	dsb	sy
 800fb7c:	f3bf 8f6f 	isb	sy
 800fb80:	f7fe fb58 	bl	800e234 <vTaskSwitchContext>
 800fb84:	f04f 0000 	mov.w	r0, #0
 800fb88:	f380 8811 	msr	BASEPRI, r0
 800fb8c:	bc09      	pop	{r0, r3}
 800fb8e:	6819      	ldr	r1, [r3, #0]
 800fb90:	6808      	ldr	r0, [r1, #0]
 800fb92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb96:	f01e 0f10 	tst.w	lr, #16
 800fb9a:	bf08      	it	eq
 800fb9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fba0:	f380 8809 	msr	PSP, r0
 800fba4:	f3bf 8f6f 	isb	sy
 800fba8:	4770      	bx	lr
 800fbaa:	bf00      	nop
 800fbac:	f3af 8000 	nop.w

0800fbb0 <pxCurrentTCBConst>:
 800fbb0:	20000e54 	.word	0x20000e54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fbb4:	bf00      	nop
 800fbb6:	bf00      	nop

0800fbb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
	__asm volatile
 800fbbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbc2:	f383 8811 	msr	BASEPRI, r3
 800fbc6:	f3bf 8f6f 	isb	sy
 800fbca:	f3bf 8f4f 	dsb	sy
 800fbce:	607b      	str	r3, [r7, #4]
}
 800fbd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fbd2:	f7fe fa75 	bl	800e0c0 <xTaskIncrementTick>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d003      	beq.n	800fbe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fbdc:	4b06      	ldr	r3, [pc, #24]	@ (800fbf8 <xPortSysTickHandler+0x40>)
 800fbde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fbe2:	601a      	str	r2, [r3, #0]
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	f383 8811 	msr	BASEPRI, r3
}
 800fbee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fbf0:	bf00      	nop
 800fbf2:	3708      	adds	r7, #8
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}
 800fbf8:	e000ed04 	.word	0xe000ed04

0800fbfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fc00:	4b0b      	ldr	r3, [pc, #44]	@ (800fc30 <vPortSetupTimerInterrupt+0x34>)
 800fc02:	2200      	movs	r2, #0
 800fc04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fc06:	4b0b      	ldr	r3, [pc, #44]	@ (800fc34 <vPortSetupTimerInterrupt+0x38>)
 800fc08:	2200      	movs	r2, #0
 800fc0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fc0c:	4b0a      	ldr	r3, [pc, #40]	@ (800fc38 <vPortSetupTimerInterrupt+0x3c>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	4a0a      	ldr	r2, [pc, #40]	@ (800fc3c <vPortSetupTimerInterrupt+0x40>)
 800fc12:	fba2 2303 	umull	r2, r3, r2, r3
 800fc16:	099b      	lsrs	r3, r3, #6
 800fc18:	4a09      	ldr	r2, [pc, #36]	@ (800fc40 <vPortSetupTimerInterrupt+0x44>)
 800fc1a:	3b01      	subs	r3, #1
 800fc1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fc1e:	4b04      	ldr	r3, [pc, #16]	@ (800fc30 <vPortSetupTimerInterrupt+0x34>)
 800fc20:	2207      	movs	r2, #7
 800fc22:	601a      	str	r2, [r3, #0]
}
 800fc24:	bf00      	nop
 800fc26:	46bd      	mov	sp, r7
 800fc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2c:	4770      	bx	lr
 800fc2e:	bf00      	nop
 800fc30:	e000e010 	.word	0xe000e010
 800fc34:	e000e018 	.word	0xe000e018
 800fc38:	2000022c 	.word	0x2000022c
 800fc3c:	10624dd3 	.word	0x10624dd3
 800fc40:	e000e014 	.word	0xe000e014

0800fc44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fc44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fc54 <vPortEnableVFP+0x10>
 800fc48:	6801      	ldr	r1, [r0, #0]
 800fc4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fc4e:	6001      	str	r1, [r0, #0]
 800fc50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fc52:	bf00      	nop
 800fc54:	e000ed88 	.word	0xe000ed88

0800fc58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fc58:	b480      	push	{r7}
 800fc5a:	b085      	sub	sp, #20
 800fc5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fc5e:	f3ef 8305 	mrs	r3, IPSR
 800fc62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	2b0f      	cmp	r3, #15
 800fc68:	d915      	bls.n	800fc96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fc6a:	4a18      	ldr	r2, [pc, #96]	@ (800fccc <vPortValidateInterruptPriority+0x74>)
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	4413      	add	r3, r2
 800fc70:	781b      	ldrb	r3, [r3, #0]
 800fc72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fc74:	4b16      	ldr	r3, [pc, #88]	@ (800fcd0 <vPortValidateInterruptPriority+0x78>)
 800fc76:	781b      	ldrb	r3, [r3, #0]
 800fc78:	7afa      	ldrb	r2, [r7, #11]
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	d20b      	bcs.n	800fc96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fc7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc82:	f383 8811 	msr	BASEPRI, r3
 800fc86:	f3bf 8f6f 	isb	sy
 800fc8a:	f3bf 8f4f 	dsb	sy
 800fc8e:	607b      	str	r3, [r7, #4]
}
 800fc90:	bf00      	nop
 800fc92:	bf00      	nop
 800fc94:	e7fd      	b.n	800fc92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fc96:	4b0f      	ldr	r3, [pc, #60]	@ (800fcd4 <vPortValidateInterruptPriority+0x7c>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fc9e:	4b0e      	ldr	r3, [pc, #56]	@ (800fcd8 <vPortValidateInterruptPriority+0x80>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d90b      	bls.n	800fcbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800fca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcaa:	f383 8811 	msr	BASEPRI, r3
 800fcae:	f3bf 8f6f 	isb	sy
 800fcb2:	f3bf 8f4f 	dsb	sy
 800fcb6:	603b      	str	r3, [r7, #0]
}
 800fcb8:	bf00      	nop
 800fcba:	bf00      	nop
 800fcbc:	e7fd      	b.n	800fcba <vPortValidateInterruptPriority+0x62>
	}
 800fcbe:	bf00      	nop
 800fcc0:	3714      	adds	r7, #20
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc8:	4770      	bx	lr
 800fcca:	bf00      	nop
 800fccc:	e000e3f0 	.word	0xe000e3f0
 800fcd0:	20001480 	.word	0x20001480
 800fcd4:	e000ed0c 	.word	0xe000ed0c
 800fcd8:	20001484 	.word	0x20001484

0800fcdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b08a      	sub	sp, #40	@ 0x28
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fce4:	2300      	movs	r3, #0
 800fce6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fce8:	f7fe f85a 	bl	800dda0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fcec:	4b5c      	ldr	r3, [pc, #368]	@ (800fe60 <pvPortMalloc+0x184>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d101      	bne.n	800fcf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fcf4:	f000 f924 	bl	800ff40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fcf8:	4b5a      	ldr	r3, [pc, #360]	@ (800fe64 <pvPortMalloc+0x188>)
 800fcfa:	681a      	ldr	r2, [r3, #0]
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	4013      	ands	r3, r2
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	f040 8095 	bne.w	800fe30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d01e      	beq.n	800fd4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fd0c:	2208      	movs	r2, #8
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	4413      	add	r3, r2
 800fd12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f003 0307 	and.w	r3, r3, #7
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d015      	beq.n	800fd4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f023 0307 	bic.w	r3, r3, #7
 800fd24:	3308      	adds	r3, #8
 800fd26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f003 0307 	and.w	r3, r3, #7
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d00b      	beq.n	800fd4a <pvPortMalloc+0x6e>
	__asm volatile
 800fd32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd36:	f383 8811 	msr	BASEPRI, r3
 800fd3a:	f3bf 8f6f 	isb	sy
 800fd3e:	f3bf 8f4f 	dsb	sy
 800fd42:	617b      	str	r3, [r7, #20]
}
 800fd44:	bf00      	nop
 800fd46:	bf00      	nop
 800fd48:	e7fd      	b.n	800fd46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d06f      	beq.n	800fe30 <pvPortMalloc+0x154>
 800fd50:	4b45      	ldr	r3, [pc, #276]	@ (800fe68 <pvPortMalloc+0x18c>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	687a      	ldr	r2, [r7, #4]
 800fd56:	429a      	cmp	r2, r3
 800fd58:	d86a      	bhi.n	800fe30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fd5a:	4b44      	ldr	r3, [pc, #272]	@ (800fe6c <pvPortMalloc+0x190>)
 800fd5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fd5e:	4b43      	ldr	r3, [pc, #268]	@ (800fe6c <pvPortMalloc+0x190>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fd64:	e004      	b.n	800fd70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fd66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fd6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fd70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd72:	685b      	ldr	r3, [r3, #4]
 800fd74:	687a      	ldr	r2, [r7, #4]
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d903      	bls.n	800fd82 <pvPortMalloc+0xa6>
 800fd7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d1f1      	bne.n	800fd66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fd82:	4b37      	ldr	r3, [pc, #220]	@ (800fe60 <pvPortMalloc+0x184>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd88:	429a      	cmp	r2, r3
 800fd8a:	d051      	beq.n	800fe30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fd8c:	6a3b      	ldr	r3, [r7, #32]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	2208      	movs	r2, #8
 800fd92:	4413      	add	r3, r2
 800fd94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fd96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd98:	681a      	ldr	r2, [r3, #0]
 800fd9a:	6a3b      	ldr	r3, [r7, #32]
 800fd9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fd9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fda0:	685a      	ldr	r2, [r3, #4]
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	1ad2      	subs	r2, r2, r3
 800fda6:	2308      	movs	r3, #8
 800fda8:	005b      	lsls	r3, r3, #1
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d920      	bls.n	800fdf0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fdae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	4413      	add	r3, r2
 800fdb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fdb6:	69bb      	ldr	r3, [r7, #24]
 800fdb8:	f003 0307 	and.w	r3, r3, #7
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d00b      	beq.n	800fdd8 <pvPortMalloc+0xfc>
	__asm volatile
 800fdc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdc4:	f383 8811 	msr	BASEPRI, r3
 800fdc8:	f3bf 8f6f 	isb	sy
 800fdcc:	f3bf 8f4f 	dsb	sy
 800fdd0:	613b      	str	r3, [r7, #16]
}
 800fdd2:	bf00      	nop
 800fdd4:	bf00      	nop
 800fdd6:	e7fd      	b.n	800fdd4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fdd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdda:	685a      	ldr	r2, [r3, #4]
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	1ad2      	subs	r2, r2, r3
 800fde0:	69bb      	ldr	r3, [r7, #24]
 800fde2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fde6:	687a      	ldr	r2, [r7, #4]
 800fde8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fdea:	69b8      	ldr	r0, [r7, #24]
 800fdec:	f000 f90a 	bl	8010004 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fdf0:	4b1d      	ldr	r3, [pc, #116]	@ (800fe68 <pvPortMalloc+0x18c>)
 800fdf2:	681a      	ldr	r2, [r3, #0]
 800fdf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdf6:	685b      	ldr	r3, [r3, #4]
 800fdf8:	1ad3      	subs	r3, r2, r3
 800fdfa:	4a1b      	ldr	r2, [pc, #108]	@ (800fe68 <pvPortMalloc+0x18c>)
 800fdfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fdfe:	4b1a      	ldr	r3, [pc, #104]	@ (800fe68 <pvPortMalloc+0x18c>)
 800fe00:	681a      	ldr	r2, [r3, #0]
 800fe02:	4b1b      	ldr	r3, [pc, #108]	@ (800fe70 <pvPortMalloc+0x194>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	429a      	cmp	r2, r3
 800fe08:	d203      	bcs.n	800fe12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fe0a:	4b17      	ldr	r3, [pc, #92]	@ (800fe68 <pvPortMalloc+0x18c>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	4a18      	ldr	r2, [pc, #96]	@ (800fe70 <pvPortMalloc+0x194>)
 800fe10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fe12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe14:	685a      	ldr	r2, [r3, #4]
 800fe16:	4b13      	ldr	r3, [pc, #76]	@ (800fe64 <pvPortMalloc+0x188>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	431a      	orrs	r2, r3
 800fe1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fe20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe22:	2200      	movs	r2, #0
 800fe24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fe26:	4b13      	ldr	r3, [pc, #76]	@ (800fe74 <pvPortMalloc+0x198>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	3301      	adds	r3, #1
 800fe2c:	4a11      	ldr	r2, [pc, #68]	@ (800fe74 <pvPortMalloc+0x198>)
 800fe2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fe30:	f7fd ffc4 	bl	800ddbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe34:	69fb      	ldr	r3, [r7, #28]
 800fe36:	f003 0307 	and.w	r3, r3, #7
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d00b      	beq.n	800fe56 <pvPortMalloc+0x17a>
	__asm volatile
 800fe3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe42:	f383 8811 	msr	BASEPRI, r3
 800fe46:	f3bf 8f6f 	isb	sy
 800fe4a:	f3bf 8f4f 	dsb	sy
 800fe4e:	60fb      	str	r3, [r7, #12]
}
 800fe50:	bf00      	nop
 800fe52:	bf00      	nop
 800fe54:	e7fd      	b.n	800fe52 <pvPortMalloc+0x176>
	return pvReturn;
 800fe56:	69fb      	ldr	r3, [r7, #28]
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3728      	adds	r7, #40	@ 0x28
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}
 800fe60:	20010e90 	.word	0x20010e90
 800fe64:	20010ea4 	.word	0x20010ea4
 800fe68:	20010e94 	.word	0x20010e94
 800fe6c:	20010e88 	.word	0x20010e88
 800fe70:	20010e98 	.word	0x20010e98
 800fe74:	20010e9c 	.word	0x20010e9c

0800fe78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b086      	sub	sp, #24
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d04f      	beq.n	800ff2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fe8a:	2308      	movs	r3, #8
 800fe8c:	425b      	negs	r3, r3
 800fe8e:	697a      	ldr	r2, [r7, #20]
 800fe90:	4413      	add	r3, r2
 800fe92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fe98:	693b      	ldr	r3, [r7, #16]
 800fe9a:	685a      	ldr	r2, [r3, #4]
 800fe9c:	4b25      	ldr	r3, [pc, #148]	@ (800ff34 <vPortFree+0xbc>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	4013      	ands	r3, r2
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d10b      	bne.n	800febe <vPortFree+0x46>
	__asm volatile
 800fea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feaa:	f383 8811 	msr	BASEPRI, r3
 800feae:	f3bf 8f6f 	isb	sy
 800feb2:	f3bf 8f4f 	dsb	sy
 800feb6:	60fb      	str	r3, [r7, #12]
}
 800feb8:	bf00      	nop
 800feba:	bf00      	nop
 800febc:	e7fd      	b.n	800feba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800febe:	693b      	ldr	r3, [r7, #16]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d00b      	beq.n	800fede <vPortFree+0x66>
	__asm volatile
 800fec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feca:	f383 8811 	msr	BASEPRI, r3
 800fece:	f3bf 8f6f 	isb	sy
 800fed2:	f3bf 8f4f 	dsb	sy
 800fed6:	60bb      	str	r3, [r7, #8]
}
 800fed8:	bf00      	nop
 800feda:	bf00      	nop
 800fedc:	e7fd      	b.n	800feda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fede:	693b      	ldr	r3, [r7, #16]
 800fee0:	685a      	ldr	r2, [r3, #4]
 800fee2:	4b14      	ldr	r3, [pc, #80]	@ (800ff34 <vPortFree+0xbc>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	4013      	ands	r3, r2
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d01e      	beq.n	800ff2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800feec:	693b      	ldr	r3, [r7, #16]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d11a      	bne.n	800ff2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	685a      	ldr	r2, [r3, #4]
 800fef8:	4b0e      	ldr	r3, [pc, #56]	@ (800ff34 <vPortFree+0xbc>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	43db      	mvns	r3, r3
 800fefe:	401a      	ands	r2, r3
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ff04:	f7fd ff4c 	bl	800dda0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ff08:	693b      	ldr	r3, [r7, #16]
 800ff0a:	685a      	ldr	r2, [r3, #4]
 800ff0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ff38 <vPortFree+0xc0>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	4413      	add	r3, r2
 800ff12:	4a09      	ldr	r2, [pc, #36]	@ (800ff38 <vPortFree+0xc0>)
 800ff14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ff16:	6938      	ldr	r0, [r7, #16]
 800ff18:	f000 f874 	bl	8010004 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ff1c:	4b07      	ldr	r3, [pc, #28]	@ (800ff3c <vPortFree+0xc4>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	3301      	adds	r3, #1
 800ff22:	4a06      	ldr	r2, [pc, #24]	@ (800ff3c <vPortFree+0xc4>)
 800ff24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ff26:	f7fd ff49 	bl	800ddbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ff2a:	bf00      	nop
 800ff2c:	3718      	adds	r7, #24
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}
 800ff32:	bf00      	nop
 800ff34:	20010ea4 	.word	0x20010ea4
 800ff38:	20010e94 	.word	0x20010e94
 800ff3c:	20010ea0 	.word	0x20010ea0

0800ff40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ff40:	b480      	push	{r7}
 800ff42:	b085      	sub	sp, #20
 800ff44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ff46:	f44f 437a 	mov.w	r3, #64000	@ 0xfa00
 800ff4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ff4c:	4b27      	ldr	r3, [pc, #156]	@ (800ffec <prvHeapInit+0xac>)
 800ff4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	f003 0307 	and.w	r3, r3, #7
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d00c      	beq.n	800ff74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	3307      	adds	r3, #7
 800ff5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	f023 0307 	bic.w	r3, r3, #7
 800ff66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ff68:	68ba      	ldr	r2, [r7, #8]
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	1ad3      	subs	r3, r2, r3
 800ff6e:	4a1f      	ldr	r2, [pc, #124]	@ (800ffec <prvHeapInit+0xac>)
 800ff70:	4413      	add	r3, r2
 800ff72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ff78:	4a1d      	ldr	r2, [pc, #116]	@ (800fff0 <prvHeapInit+0xb0>)
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ff7e:	4b1c      	ldr	r3, [pc, #112]	@ (800fff0 <prvHeapInit+0xb0>)
 800ff80:	2200      	movs	r2, #0
 800ff82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	68ba      	ldr	r2, [r7, #8]
 800ff88:	4413      	add	r3, r2
 800ff8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ff8c:	2208      	movs	r2, #8
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	1a9b      	subs	r3, r3, r2
 800ff92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	f023 0307 	bic.w	r3, r3, #7
 800ff9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	4a15      	ldr	r2, [pc, #84]	@ (800fff4 <prvHeapInit+0xb4>)
 800ffa0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ffa2:	4b14      	ldr	r3, [pc, #80]	@ (800fff4 <prvHeapInit+0xb4>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ffaa:	4b12      	ldr	r3, [pc, #72]	@ (800fff4 <prvHeapInit+0xb4>)
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	2200      	movs	r2, #0
 800ffb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	68fa      	ldr	r2, [r7, #12]
 800ffba:	1ad2      	subs	r2, r2, r3
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ffc0:	4b0c      	ldr	r3, [pc, #48]	@ (800fff4 <prvHeapInit+0xb4>)
 800ffc2:	681a      	ldr	r2, [r3, #0]
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	685b      	ldr	r3, [r3, #4]
 800ffcc:	4a0a      	ldr	r2, [pc, #40]	@ (800fff8 <prvHeapInit+0xb8>)
 800ffce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	685b      	ldr	r3, [r3, #4]
 800ffd4:	4a09      	ldr	r2, [pc, #36]	@ (800fffc <prvHeapInit+0xbc>)
 800ffd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ffd8:	4b09      	ldr	r3, [pc, #36]	@ (8010000 <prvHeapInit+0xc0>)
 800ffda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ffde:	601a      	str	r2, [r3, #0]
}
 800ffe0:	bf00      	nop
 800ffe2:	3714      	adds	r7, #20
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffea:	4770      	bx	lr
 800ffec:	20001488 	.word	0x20001488
 800fff0:	20010e88 	.word	0x20010e88
 800fff4:	20010e90 	.word	0x20010e90
 800fff8:	20010e98 	.word	0x20010e98
 800fffc:	20010e94 	.word	0x20010e94
 8010000:	20010ea4 	.word	0x20010ea4

08010004 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010004:	b480      	push	{r7}
 8010006:	b085      	sub	sp, #20
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801000c:	4b28      	ldr	r3, [pc, #160]	@ (80100b0 <prvInsertBlockIntoFreeList+0xac>)
 801000e:	60fb      	str	r3, [r7, #12]
 8010010:	e002      	b.n	8010018 <prvInsertBlockIntoFreeList+0x14>
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	60fb      	str	r3, [r7, #12]
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	687a      	ldr	r2, [r7, #4]
 801001e:	429a      	cmp	r2, r3
 8010020:	d8f7      	bhi.n	8010012 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	68ba      	ldr	r2, [r7, #8]
 801002c:	4413      	add	r3, r2
 801002e:	687a      	ldr	r2, [r7, #4]
 8010030:	429a      	cmp	r2, r3
 8010032:	d108      	bne.n	8010046 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	685a      	ldr	r2, [r3, #4]
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	685b      	ldr	r3, [r3, #4]
 801003c:	441a      	add	r2, r3
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	685b      	ldr	r3, [r3, #4]
 801004e:	68ba      	ldr	r2, [r7, #8]
 8010050:	441a      	add	r2, r3
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	429a      	cmp	r2, r3
 8010058:	d118      	bne.n	801008c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	681a      	ldr	r2, [r3, #0]
 801005e:	4b15      	ldr	r3, [pc, #84]	@ (80100b4 <prvInsertBlockIntoFreeList+0xb0>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	429a      	cmp	r2, r3
 8010064:	d00d      	beq.n	8010082 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	685a      	ldr	r2, [r3, #4]
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	685b      	ldr	r3, [r3, #4]
 8010070:	441a      	add	r2, r3
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	681a      	ldr	r2, [r3, #0]
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	601a      	str	r2, [r3, #0]
 8010080:	e008      	b.n	8010094 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010082:	4b0c      	ldr	r3, [pc, #48]	@ (80100b4 <prvInsertBlockIntoFreeList+0xb0>)
 8010084:	681a      	ldr	r2, [r3, #0]
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	601a      	str	r2, [r3, #0]
 801008a:	e003      	b.n	8010094 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	681a      	ldr	r2, [r3, #0]
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010094:	68fa      	ldr	r2, [r7, #12]
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	429a      	cmp	r2, r3
 801009a:	d002      	beq.n	80100a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80100a2:	bf00      	nop
 80100a4:	3714      	adds	r7, #20
 80100a6:	46bd      	mov	sp, r7
 80100a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ac:	4770      	bx	lr
 80100ae:	bf00      	nop
 80100b0:	20010e88 	.word	0x20010e88
 80100b4:	20010e90 	.word	0x20010e90

080100b8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80100bc:	2201      	movs	r2, #1
 80100be:	490e      	ldr	r1, [pc, #56]	@ (80100f8 <MX_USB_HOST_Init+0x40>)
 80100c0:	480e      	ldr	r0, [pc, #56]	@ (80100fc <MX_USB_HOST_Init+0x44>)
 80100c2:	f7f9 feb5 	bl	8009e30 <USBH_Init>
 80100c6:	4603      	mov	r3, r0
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d001      	beq.n	80100d0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80100cc:	f7f2 ffc0 	bl	8003050 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80100d0:	490b      	ldr	r1, [pc, #44]	@ (8010100 <MX_USB_HOST_Init+0x48>)
 80100d2:	480a      	ldr	r0, [pc, #40]	@ (80100fc <MX_USB_HOST_Init+0x44>)
 80100d4:	f7f9 ff5c 	bl	8009f90 <USBH_RegisterClass>
 80100d8:	4603      	mov	r3, r0
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d001      	beq.n	80100e2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80100de:	f7f2 ffb7 	bl	8003050 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80100e2:	4806      	ldr	r0, [pc, #24]	@ (80100fc <MX_USB_HOST_Init+0x44>)
 80100e4:	f7f9 ffe0 	bl	800a0a8 <USBH_Start>
 80100e8:	4603      	mov	r3, r0
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d001      	beq.n	80100f2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80100ee:	f7f2 ffaf 	bl	8003050 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80100f2:	bf00      	nop
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	08010105 	.word	0x08010105
 80100fc:	20010ea8 	.word	0x20010ea8
 8010100:	20000238 	.word	0x20000238

08010104 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010104:	b480      	push	{r7}
 8010106:	b083      	sub	sp, #12
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
 801010c:	460b      	mov	r3, r1
 801010e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010110:	78fb      	ldrb	r3, [r7, #3]
 8010112:	3b01      	subs	r3, #1
 8010114:	2b04      	cmp	r3, #4
 8010116:	d819      	bhi.n	801014c <USBH_UserProcess+0x48>
 8010118:	a201      	add	r2, pc, #4	@ (adr r2, 8010120 <USBH_UserProcess+0x1c>)
 801011a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801011e:	bf00      	nop
 8010120:	0801014d 	.word	0x0801014d
 8010124:	0801013d 	.word	0x0801013d
 8010128:	0801014d 	.word	0x0801014d
 801012c:	08010145 	.word	0x08010145
 8010130:	08010135 	.word	0x08010135
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010134:	4b09      	ldr	r3, [pc, #36]	@ (801015c <USBH_UserProcess+0x58>)
 8010136:	2203      	movs	r2, #3
 8010138:	701a      	strb	r2, [r3, #0]
  break;
 801013a:	e008      	b.n	801014e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801013c:	4b07      	ldr	r3, [pc, #28]	@ (801015c <USBH_UserProcess+0x58>)
 801013e:	2202      	movs	r2, #2
 8010140:	701a      	strb	r2, [r3, #0]
  break;
 8010142:	e004      	b.n	801014e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010144:	4b05      	ldr	r3, [pc, #20]	@ (801015c <USBH_UserProcess+0x58>)
 8010146:	2201      	movs	r2, #1
 8010148:	701a      	strb	r2, [r3, #0]
  break;
 801014a:	e000      	b.n	801014e <USBH_UserProcess+0x4a>

  default:
  break;
 801014c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801014e:	bf00      	nop
 8010150:	370c      	adds	r7, #12
 8010152:	46bd      	mov	sp, r7
 8010154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010158:	4770      	bx	lr
 801015a:	bf00      	nop
 801015c:	2001128c 	.word	0x2001128c

08010160 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b08a      	sub	sp, #40	@ 0x28
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010168:	f107 0314 	add.w	r3, r7, #20
 801016c:	2200      	movs	r2, #0
 801016e:	601a      	str	r2, [r3, #0]
 8010170:	605a      	str	r2, [r3, #4]
 8010172:	609a      	str	r2, [r3, #8]
 8010174:	60da      	str	r2, [r3, #12]
 8010176:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010180:	d147      	bne.n	8010212 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010182:	2300      	movs	r3, #0
 8010184:	613b      	str	r3, [r7, #16]
 8010186:	4b25      	ldr	r3, [pc, #148]	@ (801021c <HAL_HCD_MspInit+0xbc>)
 8010188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801018a:	4a24      	ldr	r2, [pc, #144]	@ (801021c <HAL_HCD_MspInit+0xbc>)
 801018c:	f043 0301 	orr.w	r3, r3, #1
 8010190:	6313      	str	r3, [r2, #48]	@ 0x30
 8010192:	4b22      	ldr	r3, [pc, #136]	@ (801021c <HAL_HCD_MspInit+0xbc>)
 8010194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010196:	f003 0301 	and.w	r3, r3, #1
 801019a:	613b      	str	r3, [r7, #16]
 801019c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 801019e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80101a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80101a4:	2300      	movs	r3, #0
 80101a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101a8:	2300      	movs	r3, #0
 80101aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80101ac:	f107 0314 	add.w	r3, r7, #20
 80101b0:	4619      	mov	r1, r3
 80101b2:	481b      	ldr	r0, [pc, #108]	@ (8010220 <HAL_HCD_MspInit+0xc0>)
 80101b4:	f7f3 fcde 	bl	8003b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80101b8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80101bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80101be:	2302      	movs	r3, #2
 80101c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101c2:	2300      	movs	r3, #0
 80101c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80101c6:	2300      	movs	r3, #0
 80101c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80101ca:	230a      	movs	r3, #10
 80101cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80101ce:	f107 0314 	add.w	r3, r7, #20
 80101d2:	4619      	mov	r1, r3
 80101d4:	4812      	ldr	r0, [pc, #72]	@ (8010220 <HAL_HCD_MspInit+0xc0>)
 80101d6:	f7f3 fccd 	bl	8003b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80101da:	4b10      	ldr	r3, [pc, #64]	@ (801021c <HAL_HCD_MspInit+0xbc>)
 80101dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101de:	4a0f      	ldr	r2, [pc, #60]	@ (801021c <HAL_HCD_MspInit+0xbc>)
 80101e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80101e4:	6353      	str	r3, [r2, #52]	@ 0x34
 80101e6:	2300      	movs	r3, #0
 80101e8:	60fb      	str	r3, [r7, #12]
 80101ea:	4b0c      	ldr	r3, [pc, #48]	@ (801021c <HAL_HCD_MspInit+0xbc>)
 80101ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101ee:	4a0b      	ldr	r2, [pc, #44]	@ (801021c <HAL_HCD_MspInit+0xbc>)
 80101f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80101f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80101f6:	4b09      	ldr	r3, [pc, #36]	@ (801021c <HAL_HCD_MspInit+0xbc>)
 80101f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80101fe:	60fb      	str	r3, [r7, #12]
 8010200:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010202:	2200      	movs	r2, #0
 8010204:	2105      	movs	r1, #5
 8010206:	2043      	movs	r0, #67	@ 0x43
 8010208:	f7f3 fbf8 	bl	80039fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801020c:	2043      	movs	r0, #67	@ 0x43
 801020e:	f7f3 fc11 	bl	8003a34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010212:	bf00      	nop
 8010214:	3728      	adds	r7, #40	@ 0x28
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}
 801021a:	bf00      	nop
 801021c:	40023800 	.word	0x40023800
 8010220:	40020000 	.word	0x40020000

08010224 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b082      	sub	sp, #8
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8010232:	4618      	mov	r0, r3
 8010234:	f7fa fbe9 	bl	800aa0a <USBH_LL_IncTimer>
}
 8010238:	bf00      	nop
 801023a:	3708      	adds	r7, #8
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}

08010240 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b082      	sub	sp, #8
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 801024e:	4618      	mov	r0, r3
 8010250:	f7fa fc2d 	bl	800aaae <USBH_LL_Connect>
}
 8010254:	bf00      	nop
 8010256:	3708      	adds	r7, #8
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}

0801025c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b082      	sub	sp, #8
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 801026a:	4618      	mov	r0, r3
 801026c:	f7fa fc42 	bl	800aaf4 <USBH_LL_Disconnect>
}
 8010270:	bf00      	nop
 8010272:	3708      	adds	r7, #8
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}

08010278 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b082      	sub	sp, #8
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	460b      	mov	r3, r1
 8010282:	70fb      	strb	r3, [r7, #3]
 8010284:	4613      	mov	r3, r2
 8010286:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 801028e:	4618      	mov	r0, r3
 8010290:	f7fa fc79 	bl	800ab86 <USBH_LL_NotifyURBChange>
#endif
}
 8010294:	bf00      	nop
 8010296:	3708      	adds	r7, #8
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}

0801029c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7fa fbd7 	bl	800aa5e <USBH_LL_PortEnabled>
}
 80102b0:	bf00      	nop
 80102b2:	3708      	adds	r7, #8
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}

080102b8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b082      	sub	sp, #8
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7fa fbe3 	bl	800aa92 <USBH_LL_PortDisabled>
}
 80102cc:	bf00      	nop
 80102ce:	3708      	adds	r7, #8
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}

080102d4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b082      	sub	sp, #8
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80102e2:	2b01      	cmp	r3, #1
 80102e4:	d12a      	bne.n	801033c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80102e6:	4a18      	ldr	r2, [pc, #96]	@ (8010348 <USBH_LL_Init+0x74>)
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	4a15      	ldr	r2, [pc, #84]	@ (8010348 <USBH_LL_Init+0x74>)
 80102f2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80102f6:	4b14      	ldr	r3, [pc, #80]	@ (8010348 <USBH_LL_Init+0x74>)
 80102f8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80102fc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80102fe:	4b12      	ldr	r3, [pc, #72]	@ (8010348 <USBH_LL_Init+0x74>)
 8010300:	2208      	movs	r2, #8
 8010302:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010304:	4b10      	ldr	r3, [pc, #64]	@ (8010348 <USBH_LL_Init+0x74>)
 8010306:	2201      	movs	r2, #1
 8010308:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801030a:	4b0f      	ldr	r3, [pc, #60]	@ (8010348 <USBH_LL_Init+0x74>)
 801030c:	2200      	movs	r2, #0
 801030e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010310:	4b0d      	ldr	r3, [pc, #52]	@ (8010348 <USBH_LL_Init+0x74>)
 8010312:	2202      	movs	r2, #2
 8010314:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010316:	4b0c      	ldr	r3, [pc, #48]	@ (8010348 <USBH_LL_Init+0x74>)
 8010318:	2200      	movs	r2, #0
 801031a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801031c:	480a      	ldr	r0, [pc, #40]	@ (8010348 <USBH_LL_Init+0x74>)
 801031e:	f7f3 fe34 	bl	8003f8a <HAL_HCD_Init>
 8010322:	4603      	mov	r3, r0
 8010324:	2b00      	cmp	r3, #0
 8010326:	d001      	beq.n	801032c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010328:	f7f2 fe92 	bl	8003050 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801032c:	4806      	ldr	r0, [pc, #24]	@ (8010348 <USBH_LL_Init+0x74>)
 801032e:	f7f4 fa18 	bl	8004762 <HAL_HCD_GetCurrentFrame>
 8010332:	4603      	mov	r3, r0
 8010334:	4619      	mov	r1, r3
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f7fa fb58 	bl	800a9ec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801033c:	2300      	movs	r3, #0
}
 801033e:	4618      	mov	r0, r3
 8010340:	3708      	adds	r7, #8
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}
 8010346:	bf00      	nop
 8010348:	20011290 	.word	0x20011290

0801034c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b084      	sub	sp, #16
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010354:	2300      	movs	r3, #0
 8010356:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010358:	2300      	movs	r3, #0
 801035a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010362:	4618      	mov	r0, r3
 8010364:	f7f4 f987 	bl	8004676 <HAL_HCD_Start>
 8010368:	4603      	mov	r3, r0
 801036a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801036c:	7bfb      	ldrb	r3, [r7, #15]
 801036e:	4618      	mov	r0, r3
 8010370:	f000 f95c 	bl	801062c <USBH_Get_USB_Status>
 8010374:	4603      	mov	r3, r0
 8010376:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010378:	7bbb      	ldrb	r3, [r7, #14]
}
 801037a:	4618      	mov	r0, r3
 801037c:	3710      	adds	r7, #16
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}

08010382 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010382:	b580      	push	{r7, lr}
 8010384:	b084      	sub	sp, #16
 8010386:	af00      	add	r7, sp, #0
 8010388:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801038a:	2300      	movs	r3, #0
 801038c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801038e:	2300      	movs	r3, #0
 8010390:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010398:	4618      	mov	r0, r3
 801039a:	f7f4 f98f 	bl	80046bc <HAL_HCD_Stop>
 801039e:	4603      	mov	r3, r0
 80103a0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80103a2:	7bfb      	ldrb	r3, [r7, #15]
 80103a4:	4618      	mov	r0, r3
 80103a6:	f000 f941 	bl	801062c <USBH_Get_USB_Status>
 80103aa:	4603      	mov	r3, r0
 80103ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	3710      	adds	r7, #16
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}

080103b8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b084      	sub	sp, #16
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80103c0:	2301      	movs	r3, #1
 80103c2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80103ca:	4618      	mov	r0, r3
 80103cc:	f7f4 f9d7 	bl	800477e <HAL_HCD_GetCurrentSpeed>
 80103d0:	4603      	mov	r3, r0
 80103d2:	2b02      	cmp	r3, #2
 80103d4:	d00c      	beq.n	80103f0 <USBH_LL_GetSpeed+0x38>
 80103d6:	2b02      	cmp	r3, #2
 80103d8:	d80d      	bhi.n	80103f6 <USBH_LL_GetSpeed+0x3e>
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d002      	beq.n	80103e4 <USBH_LL_GetSpeed+0x2c>
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d003      	beq.n	80103ea <USBH_LL_GetSpeed+0x32>
 80103e2:	e008      	b.n	80103f6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80103e4:	2300      	movs	r3, #0
 80103e6:	73fb      	strb	r3, [r7, #15]
    break;
 80103e8:	e008      	b.n	80103fc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80103ea:	2301      	movs	r3, #1
 80103ec:	73fb      	strb	r3, [r7, #15]
    break;
 80103ee:	e005      	b.n	80103fc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80103f0:	2302      	movs	r3, #2
 80103f2:	73fb      	strb	r3, [r7, #15]
    break;
 80103f4:	e002      	b.n	80103fc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80103f6:	2301      	movs	r3, #1
 80103f8:	73fb      	strb	r3, [r7, #15]
    break;
 80103fa:	bf00      	nop
  }
  return  speed;
 80103fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80103fe:	4618      	mov	r0, r3
 8010400:	3710      	adds	r7, #16
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}

08010406 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010406:	b580      	push	{r7, lr}
 8010408:	b084      	sub	sp, #16
 801040a:	af00      	add	r7, sp, #0
 801040c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801040e:	2300      	movs	r3, #0
 8010410:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010412:	2300      	movs	r3, #0
 8010414:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801041c:	4618      	mov	r0, r3
 801041e:	f7f4 f96a 	bl	80046f6 <HAL_HCD_ResetPort>
 8010422:	4603      	mov	r3, r0
 8010424:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010426:	7bfb      	ldrb	r3, [r7, #15]
 8010428:	4618      	mov	r0, r3
 801042a:	f000 f8ff 	bl	801062c <USBH_Get_USB_Status>
 801042e:	4603      	mov	r3, r0
 8010430:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010432:	7bbb      	ldrb	r3, [r7, #14]
}
 8010434:	4618      	mov	r0, r3
 8010436:	3710      	adds	r7, #16
 8010438:	46bd      	mov	sp, r7
 801043a:	bd80      	pop	{r7, pc}

0801043c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b082      	sub	sp, #8
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
 8010444:	460b      	mov	r3, r1
 8010446:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801044e:	78fa      	ldrb	r2, [r7, #3]
 8010450:	4611      	mov	r1, r2
 8010452:	4618      	mov	r0, r3
 8010454:	f7f4 f971 	bl	800473a <HAL_HCD_HC_GetXferCount>
 8010458:	4603      	mov	r3, r0
}
 801045a:	4618      	mov	r0, r3
 801045c:	3708      	adds	r7, #8
 801045e:	46bd      	mov	sp, r7
 8010460:	bd80      	pop	{r7, pc}

08010462 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010462:	b590      	push	{r4, r7, lr}
 8010464:	b089      	sub	sp, #36	@ 0x24
 8010466:	af04      	add	r7, sp, #16
 8010468:	6078      	str	r0, [r7, #4]
 801046a:	4608      	mov	r0, r1
 801046c:	4611      	mov	r1, r2
 801046e:	461a      	mov	r2, r3
 8010470:	4603      	mov	r3, r0
 8010472:	70fb      	strb	r3, [r7, #3]
 8010474:	460b      	mov	r3, r1
 8010476:	70bb      	strb	r3, [r7, #2]
 8010478:	4613      	mov	r3, r2
 801047a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801047c:	2300      	movs	r3, #0
 801047e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010480:	2300      	movs	r3, #0
 8010482:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801048a:	787c      	ldrb	r4, [r7, #1]
 801048c:	78ba      	ldrb	r2, [r7, #2]
 801048e:	78f9      	ldrb	r1, [r7, #3]
 8010490:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010492:	9302      	str	r3, [sp, #8]
 8010494:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010498:	9301      	str	r3, [sp, #4]
 801049a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801049e:	9300      	str	r3, [sp, #0]
 80104a0:	4623      	mov	r3, r4
 80104a2:	f7f3 fdd4 	bl	800404e <HAL_HCD_HC_Init>
 80104a6:	4603      	mov	r3, r0
 80104a8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80104aa:	7bfb      	ldrb	r3, [r7, #15]
 80104ac:	4618      	mov	r0, r3
 80104ae:	f000 f8bd 	bl	801062c <USBH_Get_USB_Status>
 80104b2:	4603      	mov	r3, r0
 80104b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3714      	adds	r7, #20
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd90      	pop	{r4, r7, pc}

080104c0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b084      	sub	sp, #16
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	460b      	mov	r3, r1
 80104ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104cc:	2300      	movs	r3, #0
 80104ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80104d0:	2300      	movs	r3, #0
 80104d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80104da:	78fa      	ldrb	r2, [r7, #3]
 80104dc:	4611      	mov	r1, r2
 80104de:	4618      	mov	r0, r3
 80104e0:	f7f3 fe44 	bl	800416c <HAL_HCD_HC_Halt>
 80104e4:	4603      	mov	r3, r0
 80104e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80104e8:	7bfb      	ldrb	r3, [r7, #15]
 80104ea:	4618      	mov	r0, r3
 80104ec:	f000 f89e 	bl	801062c <USBH_Get_USB_Status>
 80104f0:	4603      	mov	r3, r0
 80104f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80104f6:	4618      	mov	r0, r3
 80104f8:	3710      	adds	r7, #16
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}

080104fe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80104fe:	b590      	push	{r4, r7, lr}
 8010500:	b089      	sub	sp, #36	@ 0x24
 8010502:	af04      	add	r7, sp, #16
 8010504:	6078      	str	r0, [r7, #4]
 8010506:	4608      	mov	r0, r1
 8010508:	4611      	mov	r1, r2
 801050a:	461a      	mov	r2, r3
 801050c:	4603      	mov	r3, r0
 801050e:	70fb      	strb	r3, [r7, #3]
 8010510:	460b      	mov	r3, r1
 8010512:	70bb      	strb	r3, [r7, #2]
 8010514:	4613      	mov	r3, r2
 8010516:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010518:	2300      	movs	r3, #0
 801051a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801051c:	2300      	movs	r3, #0
 801051e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8010526:	787c      	ldrb	r4, [r7, #1]
 8010528:	78ba      	ldrb	r2, [r7, #2]
 801052a:	78f9      	ldrb	r1, [r7, #3]
 801052c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010530:	9303      	str	r3, [sp, #12]
 8010532:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010534:	9302      	str	r3, [sp, #8]
 8010536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010538:	9301      	str	r3, [sp, #4]
 801053a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801053e:	9300      	str	r3, [sp, #0]
 8010540:	4623      	mov	r3, r4
 8010542:	f7f3 fe37 	bl	80041b4 <HAL_HCD_HC_SubmitRequest>
 8010546:	4603      	mov	r3, r0
 8010548:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801054a:	7bfb      	ldrb	r3, [r7, #15]
 801054c:	4618      	mov	r0, r3
 801054e:	f000 f86d 	bl	801062c <USBH_Get_USB_Status>
 8010552:	4603      	mov	r3, r0
 8010554:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010556:	7bbb      	ldrb	r3, [r7, #14]
}
 8010558:	4618      	mov	r0, r3
 801055a:	3714      	adds	r7, #20
 801055c:	46bd      	mov	sp, r7
 801055e:	bd90      	pop	{r4, r7, pc}

08010560 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b082      	sub	sp, #8
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	460b      	mov	r3, r1
 801056a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010572:	78fa      	ldrb	r2, [r7, #3]
 8010574:	4611      	mov	r1, r2
 8010576:	4618      	mov	r0, r3
 8010578:	f7f4 f8cb 	bl	8004712 <HAL_HCD_HC_GetURBState>
 801057c:	4603      	mov	r3, r0
}
 801057e:	4618      	mov	r0, r3
 8010580:	3708      	adds	r7, #8
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}

08010586 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010586:	b580      	push	{r7, lr}
 8010588:	b082      	sub	sp, #8
 801058a:	af00      	add	r7, sp, #0
 801058c:	6078      	str	r0, [r7, #4]
 801058e:	460b      	mov	r3, r1
 8010590:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8010598:	2b01      	cmp	r3, #1
 801059a:	d103      	bne.n	80105a4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801059c:	78fb      	ldrb	r3, [r7, #3]
 801059e:	4618      	mov	r0, r3
 80105a0:	f000 f870 	bl	8010684 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80105a4:	20c8      	movs	r0, #200	@ 0xc8
 80105a6:	f7f3 f94d 	bl	8003844 <HAL_Delay>
  return USBH_OK;
 80105aa:	2300      	movs	r3, #0
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3708      	adds	r7, #8
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}

080105b4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80105b4:	b480      	push	{r7}
 80105b6:	b085      	sub	sp, #20
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
 80105bc:	460b      	mov	r3, r1
 80105be:	70fb      	strb	r3, [r7, #3]
 80105c0:	4613      	mov	r3, r2
 80105c2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80105ca:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80105cc:	78fb      	ldrb	r3, [r7, #3]
 80105ce:	68fa      	ldr	r2, [r7, #12]
 80105d0:	212c      	movs	r1, #44	@ 0x2c
 80105d2:	fb01 f303 	mul.w	r3, r1, r3
 80105d6:	4413      	add	r3, r2
 80105d8:	333b      	adds	r3, #59	@ 0x3b
 80105da:	781b      	ldrb	r3, [r3, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d009      	beq.n	80105f4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80105e0:	78fb      	ldrb	r3, [r7, #3]
 80105e2:	68fa      	ldr	r2, [r7, #12]
 80105e4:	212c      	movs	r1, #44	@ 0x2c
 80105e6:	fb01 f303 	mul.w	r3, r1, r3
 80105ea:	4413      	add	r3, r2
 80105ec:	3354      	adds	r3, #84	@ 0x54
 80105ee:	78ba      	ldrb	r2, [r7, #2]
 80105f0:	701a      	strb	r2, [r3, #0]
 80105f2:	e008      	b.n	8010606 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80105f4:	78fb      	ldrb	r3, [r7, #3]
 80105f6:	68fa      	ldr	r2, [r7, #12]
 80105f8:	212c      	movs	r1, #44	@ 0x2c
 80105fa:	fb01 f303 	mul.w	r3, r1, r3
 80105fe:	4413      	add	r3, r2
 8010600:	3355      	adds	r3, #85	@ 0x55
 8010602:	78ba      	ldrb	r2, [r7, #2]
 8010604:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010606:	2300      	movs	r3, #0
}
 8010608:	4618      	mov	r0, r3
 801060a:	3714      	adds	r7, #20
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr

08010614 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b082      	sub	sp, #8
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801061c:	6878      	ldr	r0, [r7, #4]
 801061e:	f7f3 f911 	bl	8003844 <HAL_Delay>
}
 8010622:	bf00      	nop
 8010624:	3708      	adds	r7, #8
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
	...

0801062c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801062c:	b480      	push	{r7}
 801062e:	b085      	sub	sp, #20
 8010630:	af00      	add	r7, sp, #0
 8010632:	4603      	mov	r3, r0
 8010634:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010636:	2300      	movs	r3, #0
 8010638:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801063a:	79fb      	ldrb	r3, [r7, #7]
 801063c:	2b03      	cmp	r3, #3
 801063e:	d817      	bhi.n	8010670 <USBH_Get_USB_Status+0x44>
 8010640:	a201      	add	r2, pc, #4	@ (adr r2, 8010648 <USBH_Get_USB_Status+0x1c>)
 8010642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010646:	bf00      	nop
 8010648:	08010659 	.word	0x08010659
 801064c:	0801065f 	.word	0x0801065f
 8010650:	08010665 	.word	0x08010665
 8010654:	0801066b 	.word	0x0801066b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010658:	2300      	movs	r3, #0
 801065a:	73fb      	strb	r3, [r7, #15]
    break;
 801065c:	e00b      	b.n	8010676 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801065e:	2302      	movs	r3, #2
 8010660:	73fb      	strb	r3, [r7, #15]
    break;
 8010662:	e008      	b.n	8010676 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010664:	2301      	movs	r3, #1
 8010666:	73fb      	strb	r3, [r7, #15]
    break;
 8010668:	e005      	b.n	8010676 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801066a:	2302      	movs	r3, #2
 801066c:	73fb      	strb	r3, [r7, #15]
    break;
 801066e:	e002      	b.n	8010676 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010670:	2302      	movs	r3, #2
 8010672:	73fb      	strb	r3, [r7, #15]
    break;
 8010674:	bf00      	nop
  }
  return usb_status;
 8010676:	7bfb      	ldrb	r3, [r7, #15]
}
 8010678:	4618      	mov	r0, r3
 801067a:	3714      	adds	r7, #20
 801067c:	46bd      	mov	sp, r7
 801067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010682:	4770      	bx	lr

08010684 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b084      	sub	sp, #16
 8010688:	af00      	add	r7, sp, #0
 801068a:	4603      	mov	r3, r0
 801068c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801068e:	79fb      	ldrb	r3, [r7, #7]
 8010690:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010692:	79fb      	ldrb	r3, [r7, #7]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d102      	bne.n	801069e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8010698:	2301      	movs	r3, #1
 801069a:	73fb      	strb	r3, [r7, #15]
 801069c:	e001      	b.n	80106a2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801069e:	2300      	movs	r3, #0
 80106a0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80106a2:	7bfb      	ldrb	r3, [r7, #15]
 80106a4:	461a      	mov	r2, r3
 80106a6:	2101      	movs	r1, #1
 80106a8:	4803      	ldr	r0, [pc, #12]	@ (80106b8 <MX_DriverVbusFS+0x34>)
 80106aa:	f7f3 fc17 	bl	8003edc <HAL_GPIO_WritePin>
}
 80106ae:	bf00      	nop
 80106b0:	3710      	adds	r7, #16
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}
 80106b6:	bf00      	nop
 80106b8:	40020800 	.word	0x40020800

080106bc <atof>:
 80106bc:	2100      	movs	r1, #0
 80106be:	f000 bec7 	b.w	8011450 <strtod>

080106c2 <atoi>:
 80106c2:	220a      	movs	r2, #10
 80106c4:	2100      	movs	r1, #0
 80106c6:	f000 bf49 	b.w	801155c <strtol>
	...

080106cc <malloc>:
 80106cc:	4b02      	ldr	r3, [pc, #8]	@ (80106d8 <malloc+0xc>)
 80106ce:	4601      	mov	r1, r0
 80106d0:	6818      	ldr	r0, [r3, #0]
 80106d2:	f000 b82d 	b.w	8010730 <_malloc_r>
 80106d6:	bf00      	nop
 80106d8:	200003d4 	.word	0x200003d4

080106dc <free>:
 80106dc:	4b02      	ldr	r3, [pc, #8]	@ (80106e8 <free+0xc>)
 80106de:	4601      	mov	r1, r0
 80106e0:	6818      	ldr	r0, [r3, #0]
 80106e2:	f001 ba0f 	b.w	8011b04 <_free_r>
 80106e6:	bf00      	nop
 80106e8:	200003d4 	.word	0x200003d4

080106ec <sbrk_aligned>:
 80106ec:	b570      	push	{r4, r5, r6, lr}
 80106ee:	4e0f      	ldr	r6, [pc, #60]	@ (801072c <sbrk_aligned+0x40>)
 80106f0:	460c      	mov	r4, r1
 80106f2:	6831      	ldr	r1, [r6, #0]
 80106f4:	4605      	mov	r5, r0
 80106f6:	b911      	cbnz	r1, 80106fe <sbrk_aligned+0x12>
 80106f8:	f001 f976 	bl	80119e8 <_sbrk_r>
 80106fc:	6030      	str	r0, [r6, #0]
 80106fe:	4621      	mov	r1, r4
 8010700:	4628      	mov	r0, r5
 8010702:	f001 f971 	bl	80119e8 <_sbrk_r>
 8010706:	1c43      	adds	r3, r0, #1
 8010708:	d103      	bne.n	8010712 <sbrk_aligned+0x26>
 801070a:	f04f 34ff 	mov.w	r4, #4294967295
 801070e:	4620      	mov	r0, r4
 8010710:	bd70      	pop	{r4, r5, r6, pc}
 8010712:	1cc4      	adds	r4, r0, #3
 8010714:	f024 0403 	bic.w	r4, r4, #3
 8010718:	42a0      	cmp	r0, r4
 801071a:	d0f8      	beq.n	801070e <sbrk_aligned+0x22>
 801071c:	1a21      	subs	r1, r4, r0
 801071e:	4628      	mov	r0, r5
 8010720:	f001 f962 	bl	80119e8 <_sbrk_r>
 8010724:	3001      	adds	r0, #1
 8010726:	d1f2      	bne.n	801070e <sbrk_aligned+0x22>
 8010728:	e7ef      	b.n	801070a <sbrk_aligned+0x1e>
 801072a:	bf00      	nop
 801072c:	20011594 	.word	0x20011594

08010730 <_malloc_r>:
 8010730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010734:	1ccd      	adds	r5, r1, #3
 8010736:	f025 0503 	bic.w	r5, r5, #3
 801073a:	3508      	adds	r5, #8
 801073c:	2d0c      	cmp	r5, #12
 801073e:	bf38      	it	cc
 8010740:	250c      	movcc	r5, #12
 8010742:	2d00      	cmp	r5, #0
 8010744:	4606      	mov	r6, r0
 8010746:	db01      	blt.n	801074c <_malloc_r+0x1c>
 8010748:	42a9      	cmp	r1, r5
 801074a:	d904      	bls.n	8010756 <_malloc_r+0x26>
 801074c:	230c      	movs	r3, #12
 801074e:	6033      	str	r3, [r6, #0]
 8010750:	2000      	movs	r0, #0
 8010752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010756:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801082c <_malloc_r+0xfc>
 801075a:	f000 f869 	bl	8010830 <__malloc_lock>
 801075e:	f8d8 3000 	ldr.w	r3, [r8]
 8010762:	461c      	mov	r4, r3
 8010764:	bb44      	cbnz	r4, 80107b8 <_malloc_r+0x88>
 8010766:	4629      	mov	r1, r5
 8010768:	4630      	mov	r0, r6
 801076a:	f7ff ffbf 	bl	80106ec <sbrk_aligned>
 801076e:	1c43      	adds	r3, r0, #1
 8010770:	4604      	mov	r4, r0
 8010772:	d158      	bne.n	8010826 <_malloc_r+0xf6>
 8010774:	f8d8 4000 	ldr.w	r4, [r8]
 8010778:	4627      	mov	r7, r4
 801077a:	2f00      	cmp	r7, #0
 801077c:	d143      	bne.n	8010806 <_malloc_r+0xd6>
 801077e:	2c00      	cmp	r4, #0
 8010780:	d04b      	beq.n	801081a <_malloc_r+0xea>
 8010782:	6823      	ldr	r3, [r4, #0]
 8010784:	4639      	mov	r1, r7
 8010786:	4630      	mov	r0, r6
 8010788:	eb04 0903 	add.w	r9, r4, r3
 801078c:	f001 f92c 	bl	80119e8 <_sbrk_r>
 8010790:	4581      	cmp	r9, r0
 8010792:	d142      	bne.n	801081a <_malloc_r+0xea>
 8010794:	6821      	ldr	r1, [r4, #0]
 8010796:	1a6d      	subs	r5, r5, r1
 8010798:	4629      	mov	r1, r5
 801079a:	4630      	mov	r0, r6
 801079c:	f7ff ffa6 	bl	80106ec <sbrk_aligned>
 80107a0:	3001      	adds	r0, #1
 80107a2:	d03a      	beq.n	801081a <_malloc_r+0xea>
 80107a4:	6823      	ldr	r3, [r4, #0]
 80107a6:	442b      	add	r3, r5
 80107a8:	6023      	str	r3, [r4, #0]
 80107aa:	f8d8 3000 	ldr.w	r3, [r8]
 80107ae:	685a      	ldr	r2, [r3, #4]
 80107b0:	bb62      	cbnz	r2, 801080c <_malloc_r+0xdc>
 80107b2:	f8c8 7000 	str.w	r7, [r8]
 80107b6:	e00f      	b.n	80107d8 <_malloc_r+0xa8>
 80107b8:	6822      	ldr	r2, [r4, #0]
 80107ba:	1b52      	subs	r2, r2, r5
 80107bc:	d420      	bmi.n	8010800 <_malloc_r+0xd0>
 80107be:	2a0b      	cmp	r2, #11
 80107c0:	d917      	bls.n	80107f2 <_malloc_r+0xc2>
 80107c2:	1961      	adds	r1, r4, r5
 80107c4:	42a3      	cmp	r3, r4
 80107c6:	6025      	str	r5, [r4, #0]
 80107c8:	bf18      	it	ne
 80107ca:	6059      	strne	r1, [r3, #4]
 80107cc:	6863      	ldr	r3, [r4, #4]
 80107ce:	bf08      	it	eq
 80107d0:	f8c8 1000 	streq.w	r1, [r8]
 80107d4:	5162      	str	r2, [r4, r5]
 80107d6:	604b      	str	r3, [r1, #4]
 80107d8:	4630      	mov	r0, r6
 80107da:	f000 f82f 	bl	801083c <__malloc_unlock>
 80107de:	f104 000b 	add.w	r0, r4, #11
 80107e2:	1d23      	adds	r3, r4, #4
 80107e4:	f020 0007 	bic.w	r0, r0, #7
 80107e8:	1ac2      	subs	r2, r0, r3
 80107ea:	bf1c      	itt	ne
 80107ec:	1a1b      	subne	r3, r3, r0
 80107ee:	50a3      	strne	r3, [r4, r2]
 80107f0:	e7af      	b.n	8010752 <_malloc_r+0x22>
 80107f2:	6862      	ldr	r2, [r4, #4]
 80107f4:	42a3      	cmp	r3, r4
 80107f6:	bf0c      	ite	eq
 80107f8:	f8c8 2000 	streq.w	r2, [r8]
 80107fc:	605a      	strne	r2, [r3, #4]
 80107fe:	e7eb      	b.n	80107d8 <_malloc_r+0xa8>
 8010800:	4623      	mov	r3, r4
 8010802:	6864      	ldr	r4, [r4, #4]
 8010804:	e7ae      	b.n	8010764 <_malloc_r+0x34>
 8010806:	463c      	mov	r4, r7
 8010808:	687f      	ldr	r7, [r7, #4]
 801080a:	e7b6      	b.n	801077a <_malloc_r+0x4a>
 801080c:	461a      	mov	r2, r3
 801080e:	685b      	ldr	r3, [r3, #4]
 8010810:	42a3      	cmp	r3, r4
 8010812:	d1fb      	bne.n	801080c <_malloc_r+0xdc>
 8010814:	2300      	movs	r3, #0
 8010816:	6053      	str	r3, [r2, #4]
 8010818:	e7de      	b.n	80107d8 <_malloc_r+0xa8>
 801081a:	230c      	movs	r3, #12
 801081c:	6033      	str	r3, [r6, #0]
 801081e:	4630      	mov	r0, r6
 8010820:	f000 f80c 	bl	801083c <__malloc_unlock>
 8010824:	e794      	b.n	8010750 <_malloc_r+0x20>
 8010826:	6005      	str	r5, [r0, #0]
 8010828:	e7d6      	b.n	80107d8 <_malloc_r+0xa8>
 801082a:	bf00      	nop
 801082c:	20011598 	.word	0x20011598

08010830 <__malloc_lock>:
 8010830:	4801      	ldr	r0, [pc, #4]	@ (8010838 <__malloc_lock+0x8>)
 8010832:	f001 b926 	b.w	8011a82 <__retarget_lock_acquire_recursive>
 8010836:	bf00      	nop
 8010838:	200116dc 	.word	0x200116dc

0801083c <__malloc_unlock>:
 801083c:	4801      	ldr	r0, [pc, #4]	@ (8010844 <__malloc_unlock+0x8>)
 801083e:	f001 b921 	b.w	8011a84 <__retarget_lock_release_recursive>
 8010842:	bf00      	nop
 8010844:	200116dc 	.word	0x200116dc

08010848 <sulp>:
 8010848:	b570      	push	{r4, r5, r6, lr}
 801084a:	4604      	mov	r4, r0
 801084c:	460d      	mov	r5, r1
 801084e:	ec45 4b10 	vmov	d0, r4, r5
 8010852:	4616      	mov	r6, r2
 8010854:	f002 f858 	bl	8012908 <__ulp>
 8010858:	ec51 0b10 	vmov	r0, r1, d0
 801085c:	b17e      	cbz	r6, 801087e <sulp+0x36>
 801085e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010862:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010866:	2b00      	cmp	r3, #0
 8010868:	dd09      	ble.n	801087e <sulp+0x36>
 801086a:	051b      	lsls	r3, r3, #20
 801086c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010870:	2400      	movs	r4, #0
 8010872:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010876:	4622      	mov	r2, r4
 8010878:	462b      	mov	r3, r5
 801087a:	f7ef febd 	bl	80005f8 <__aeabi_dmul>
 801087e:	ec41 0b10 	vmov	d0, r0, r1
 8010882:	bd70      	pop	{r4, r5, r6, pc}
 8010884:	0000      	movs	r0, r0
	...

08010888 <_strtod_l>:
 8010888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801088c:	b09f      	sub	sp, #124	@ 0x7c
 801088e:	460c      	mov	r4, r1
 8010890:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010892:	2200      	movs	r2, #0
 8010894:	921a      	str	r2, [sp, #104]	@ 0x68
 8010896:	9005      	str	r0, [sp, #20]
 8010898:	f04f 0a00 	mov.w	sl, #0
 801089c:	f04f 0b00 	mov.w	fp, #0
 80108a0:	460a      	mov	r2, r1
 80108a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80108a4:	7811      	ldrb	r1, [r2, #0]
 80108a6:	292b      	cmp	r1, #43	@ 0x2b
 80108a8:	d04a      	beq.n	8010940 <_strtod_l+0xb8>
 80108aa:	d838      	bhi.n	801091e <_strtod_l+0x96>
 80108ac:	290d      	cmp	r1, #13
 80108ae:	d832      	bhi.n	8010916 <_strtod_l+0x8e>
 80108b0:	2908      	cmp	r1, #8
 80108b2:	d832      	bhi.n	801091a <_strtod_l+0x92>
 80108b4:	2900      	cmp	r1, #0
 80108b6:	d03b      	beq.n	8010930 <_strtod_l+0xa8>
 80108b8:	2200      	movs	r2, #0
 80108ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80108bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80108be:	782a      	ldrb	r2, [r5, #0]
 80108c0:	2a30      	cmp	r2, #48	@ 0x30
 80108c2:	f040 80b2 	bne.w	8010a2a <_strtod_l+0x1a2>
 80108c6:	786a      	ldrb	r2, [r5, #1]
 80108c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80108cc:	2a58      	cmp	r2, #88	@ 0x58
 80108ce:	d16e      	bne.n	80109ae <_strtod_l+0x126>
 80108d0:	9302      	str	r3, [sp, #8]
 80108d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108d4:	9301      	str	r3, [sp, #4]
 80108d6:	ab1a      	add	r3, sp, #104	@ 0x68
 80108d8:	9300      	str	r3, [sp, #0]
 80108da:	4a8f      	ldr	r2, [pc, #572]	@ (8010b18 <_strtod_l+0x290>)
 80108dc:	9805      	ldr	r0, [sp, #20]
 80108de:	ab1b      	add	r3, sp, #108	@ 0x6c
 80108e0:	a919      	add	r1, sp, #100	@ 0x64
 80108e2:	f001 f9c1 	bl	8011c68 <__gethex>
 80108e6:	f010 060f 	ands.w	r6, r0, #15
 80108ea:	4604      	mov	r4, r0
 80108ec:	d005      	beq.n	80108fa <_strtod_l+0x72>
 80108ee:	2e06      	cmp	r6, #6
 80108f0:	d128      	bne.n	8010944 <_strtod_l+0xbc>
 80108f2:	3501      	adds	r5, #1
 80108f4:	2300      	movs	r3, #0
 80108f6:	9519      	str	r5, [sp, #100]	@ 0x64
 80108f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80108fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	f040 858e 	bne.w	801141e <_strtod_l+0xb96>
 8010902:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010904:	b1cb      	cbz	r3, 801093a <_strtod_l+0xb2>
 8010906:	4652      	mov	r2, sl
 8010908:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801090c:	ec43 2b10 	vmov	d0, r2, r3
 8010910:	b01f      	add	sp, #124	@ 0x7c
 8010912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010916:	2920      	cmp	r1, #32
 8010918:	d1ce      	bne.n	80108b8 <_strtod_l+0x30>
 801091a:	3201      	adds	r2, #1
 801091c:	e7c1      	b.n	80108a2 <_strtod_l+0x1a>
 801091e:	292d      	cmp	r1, #45	@ 0x2d
 8010920:	d1ca      	bne.n	80108b8 <_strtod_l+0x30>
 8010922:	2101      	movs	r1, #1
 8010924:	910e      	str	r1, [sp, #56]	@ 0x38
 8010926:	1c51      	adds	r1, r2, #1
 8010928:	9119      	str	r1, [sp, #100]	@ 0x64
 801092a:	7852      	ldrb	r2, [r2, #1]
 801092c:	2a00      	cmp	r2, #0
 801092e:	d1c5      	bne.n	80108bc <_strtod_l+0x34>
 8010930:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010932:	9419      	str	r4, [sp, #100]	@ 0x64
 8010934:	2b00      	cmp	r3, #0
 8010936:	f040 8570 	bne.w	801141a <_strtod_l+0xb92>
 801093a:	4652      	mov	r2, sl
 801093c:	465b      	mov	r3, fp
 801093e:	e7e5      	b.n	801090c <_strtod_l+0x84>
 8010940:	2100      	movs	r1, #0
 8010942:	e7ef      	b.n	8010924 <_strtod_l+0x9c>
 8010944:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010946:	b13a      	cbz	r2, 8010958 <_strtod_l+0xd0>
 8010948:	2135      	movs	r1, #53	@ 0x35
 801094a:	a81c      	add	r0, sp, #112	@ 0x70
 801094c:	f002 f8d6 	bl	8012afc <__copybits>
 8010950:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010952:	9805      	ldr	r0, [sp, #20]
 8010954:	f001 fcac 	bl	80122b0 <_Bfree>
 8010958:	3e01      	subs	r6, #1
 801095a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801095c:	2e04      	cmp	r6, #4
 801095e:	d806      	bhi.n	801096e <_strtod_l+0xe6>
 8010960:	e8df f006 	tbb	[pc, r6]
 8010964:	201d0314 	.word	0x201d0314
 8010968:	14          	.byte	0x14
 8010969:	00          	.byte	0x00
 801096a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801096e:	05e1      	lsls	r1, r4, #23
 8010970:	bf48      	it	mi
 8010972:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010976:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801097a:	0d1b      	lsrs	r3, r3, #20
 801097c:	051b      	lsls	r3, r3, #20
 801097e:	2b00      	cmp	r3, #0
 8010980:	d1bb      	bne.n	80108fa <_strtod_l+0x72>
 8010982:	f001 f853 	bl	8011a2c <__errno>
 8010986:	2322      	movs	r3, #34	@ 0x22
 8010988:	6003      	str	r3, [r0, #0]
 801098a:	e7b6      	b.n	80108fa <_strtod_l+0x72>
 801098c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010990:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010994:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010998:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801099c:	e7e7      	b.n	801096e <_strtod_l+0xe6>
 801099e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8010b20 <_strtod_l+0x298>
 80109a2:	e7e4      	b.n	801096e <_strtod_l+0xe6>
 80109a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80109a8:	f04f 3aff 	mov.w	sl, #4294967295
 80109ac:	e7df      	b.n	801096e <_strtod_l+0xe6>
 80109ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80109b0:	1c5a      	adds	r2, r3, #1
 80109b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80109b4:	785b      	ldrb	r3, [r3, #1]
 80109b6:	2b30      	cmp	r3, #48	@ 0x30
 80109b8:	d0f9      	beq.n	80109ae <_strtod_l+0x126>
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d09d      	beq.n	80108fa <_strtod_l+0x72>
 80109be:	2301      	movs	r3, #1
 80109c0:	2700      	movs	r7, #0
 80109c2:	9308      	str	r3, [sp, #32]
 80109c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80109c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80109c8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80109ca:	46b9      	mov	r9, r7
 80109cc:	220a      	movs	r2, #10
 80109ce:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80109d0:	7805      	ldrb	r5, [r0, #0]
 80109d2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80109d6:	b2d9      	uxtb	r1, r3
 80109d8:	2909      	cmp	r1, #9
 80109da:	d928      	bls.n	8010a2e <_strtod_l+0x1a6>
 80109dc:	494f      	ldr	r1, [pc, #316]	@ (8010b1c <_strtod_l+0x294>)
 80109de:	2201      	movs	r2, #1
 80109e0:	f000 ff02 	bl	80117e8 <strncmp>
 80109e4:	2800      	cmp	r0, #0
 80109e6:	d032      	beq.n	8010a4e <_strtod_l+0x1c6>
 80109e8:	2000      	movs	r0, #0
 80109ea:	462a      	mov	r2, r5
 80109ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80109ee:	464d      	mov	r5, r9
 80109f0:	4603      	mov	r3, r0
 80109f2:	2a65      	cmp	r2, #101	@ 0x65
 80109f4:	d001      	beq.n	80109fa <_strtod_l+0x172>
 80109f6:	2a45      	cmp	r2, #69	@ 0x45
 80109f8:	d114      	bne.n	8010a24 <_strtod_l+0x19c>
 80109fa:	b91d      	cbnz	r5, 8010a04 <_strtod_l+0x17c>
 80109fc:	9a08      	ldr	r2, [sp, #32]
 80109fe:	4302      	orrs	r2, r0
 8010a00:	d096      	beq.n	8010930 <_strtod_l+0xa8>
 8010a02:	2500      	movs	r5, #0
 8010a04:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010a06:	1c62      	adds	r2, r4, #1
 8010a08:	9219      	str	r2, [sp, #100]	@ 0x64
 8010a0a:	7862      	ldrb	r2, [r4, #1]
 8010a0c:	2a2b      	cmp	r2, #43	@ 0x2b
 8010a0e:	d07a      	beq.n	8010b06 <_strtod_l+0x27e>
 8010a10:	2a2d      	cmp	r2, #45	@ 0x2d
 8010a12:	d07e      	beq.n	8010b12 <_strtod_l+0x28a>
 8010a14:	f04f 0c00 	mov.w	ip, #0
 8010a18:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010a1c:	2909      	cmp	r1, #9
 8010a1e:	f240 8085 	bls.w	8010b2c <_strtod_l+0x2a4>
 8010a22:	9419      	str	r4, [sp, #100]	@ 0x64
 8010a24:	f04f 0800 	mov.w	r8, #0
 8010a28:	e0a5      	b.n	8010b76 <_strtod_l+0x2ee>
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	e7c8      	b.n	80109c0 <_strtod_l+0x138>
 8010a2e:	f1b9 0f08 	cmp.w	r9, #8
 8010a32:	bfd8      	it	le
 8010a34:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8010a36:	f100 0001 	add.w	r0, r0, #1
 8010a3a:	bfda      	itte	le
 8010a3c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010a40:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8010a42:	fb02 3707 	mlagt	r7, r2, r7, r3
 8010a46:	f109 0901 	add.w	r9, r9, #1
 8010a4a:	9019      	str	r0, [sp, #100]	@ 0x64
 8010a4c:	e7bf      	b.n	80109ce <_strtod_l+0x146>
 8010a4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010a50:	1c5a      	adds	r2, r3, #1
 8010a52:	9219      	str	r2, [sp, #100]	@ 0x64
 8010a54:	785a      	ldrb	r2, [r3, #1]
 8010a56:	f1b9 0f00 	cmp.w	r9, #0
 8010a5a:	d03b      	beq.n	8010ad4 <_strtod_l+0x24c>
 8010a5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8010a5e:	464d      	mov	r5, r9
 8010a60:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010a64:	2b09      	cmp	r3, #9
 8010a66:	d912      	bls.n	8010a8e <_strtod_l+0x206>
 8010a68:	2301      	movs	r3, #1
 8010a6a:	e7c2      	b.n	80109f2 <_strtod_l+0x16a>
 8010a6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010a6e:	1c5a      	adds	r2, r3, #1
 8010a70:	9219      	str	r2, [sp, #100]	@ 0x64
 8010a72:	785a      	ldrb	r2, [r3, #1]
 8010a74:	3001      	adds	r0, #1
 8010a76:	2a30      	cmp	r2, #48	@ 0x30
 8010a78:	d0f8      	beq.n	8010a6c <_strtod_l+0x1e4>
 8010a7a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010a7e:	2b08      	cmp	r3, #8
 8010a80:	f200 84d2 	bhi.w	8011428 <_strtod_l+0xba0>
 8010a84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010a86:	900a      	str	r0, [sp, #40]	@ 0x28
 8010a88:	2000      	movs	r0, #0
 8010a8a:	930c      	str	r3, [sp, #48]	@ 0x30
 8010a8c:	4605      	mov	r5, r0
 8010a8e:	3a30      	subs	r2, #48	@ 0x30
 8010a90:	f100 0301 	add.w	r3, r0, #1
 8010a94:	d018      	beq.n	8010ac8 <_strtod_l+0x240>
 8010a96:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010a98:	4419      	add	r1, r3
 8010a9a:	910a      	str	r1, [sp, #40]	@ 0x28
 8010a9c:	462e      	mov	r6, r5
 8010a9e:	f04f 0e0a 	mov.w	lr, #10
 8010aa2:	1c71      	adds	r1, r6, #1
 8010aa4:	eba1 0c05 	sub.w	ip, r1, r5
 8010aa8:	4563      	cmp	r3, ip
 8010aaa:	dc15      	bgt.n	8010ad8 <_strtod_l+0x250>
 8010aac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8010ab0:	182b      	adds	r3, r5, r0
 8010ab2:	2b08      	cmp	r3, #8
 8010ab4:	f105 0501 	add.w	r5, r5, #1
 8010ab8:	4405      	add	r5, r0
 8010aba:	dc1a      	bgt.n	8010af2 <_strtod_l+0x26a>
 8010abc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010abe:	230a      	movs	r3, #10
 8010ac0:	fb03 2301 	mla	r3, r3, r1, r2
 8010ac4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010aca:	1c51      	adds	r1, r2, #1
 8010acc:	9119      	str	r1, [sp, #100]	@ 0x64
 8010ace:	7852      	ldrb	r2, [r2, #1]
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	e7c5      	b.n	8010a60 <_strtod_l+0x1d8>
 8010ad4:	4648      	mov	r0, r9
 8010ad6:	e7ce      	b.n	8010a76 <_strtod_l+0x1ee>
 8010ad8:	2e08      	cmp	r6, #8
 8010ada:	dc05      	bgt.n	8010ae8 <_strtod_l+0x260>
 8010adc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8010ade:	fb0e f606 	mul.w	r6, lr, r6
 8010ae2:	960b      	str	r6, [sp, #44]	@ 0x2c
 8010ae4:	460e      	mov	r6, r1
 8010ae6:	e7dc      	b.n	8010aa2 <_strtod_l+0x21a>
 8010ae8:	2910      	cmp	r1, #16
 8010aea:	bfd8      	it	le
 8010aec:	fb0e f707 	mulle.w	r7, lr, r7
 8010af0:	e7f8      	b.n	8010ae4 <_strtod_l+0x25c>
 8010af2:	2b0f      	cmp	r3, #15
 8010af4:	bfdc      	itt	le
 8010af6:	230a      	movle	r3, #10
 8010af8:	fb03 2707 	mlale	r7, r3, r7, r2
 8010afc:	e7e3      	b.n	8010ac6 <_strtod_l+0x23e>
 8010afe:	2300      	movs	r3, #0
 8010b00:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b02:	2301      	movs	r3, #1
 8010b04:	e77a      	b.n	80109fc <_strtod_l+0x174>
 8010b06:	f04f 0c00 	mov.w	ip, #0
 8010b0a:	1ca2      	adds	r2, r4, #2
 8010b0c:	9219      	str	r2, [sp, #100]	@ 0x64
 8010b0e:	78a2      	ldrb	r2, [r4, #2]
 8010b10:	e782      	b.n	8010a18 <_strtod_l+0x190>
 8010b12:	f04f 0c01 	mov.w	ip, #1
 8010b16:	e7f8      	b.n	8010b0a <_strtod_l+0x282>
 8010b18:	080145ac 	.word	0x080145ac
 8010b1c:	080143d8 	.word	0x080143d8
 8010b20:	7ff00000 	.word	0x7ff00000
 8010b24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010b26:	1c51      	adds	r1, r2, #1
 8010b28:	9119      	str	r1, [sp, #100]	@ 0x64
 8010b2a:	7852      	ldrb	r2, [r2, #1]
 8010b2c:	2a30      	cmp	r2, #48	@ 0x30
 8010b2e:	d0f9      	beq.n	8010b24 <_strtod_l+0x29c>
 8010b30:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010b34:	2908      	cmp	r1, #8
 8010b36:	f63f af75 	bhi.w	8010a24 <_strtod_l+0x19c>
 8010b3a:	3a30      	subs	r2, #48	@ 0x30
 8010b3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8010b3e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010b40:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010b42:	f04f 080a 	mov.w	r8, #10
 8010b46:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010b48:	1c56      	adds	r6, r2, #1
 8010b4a:	9619      	str	r6, [sp, #100]	@ 0x64
 8010b4c:	7852      	ldrb	r2, [r2, #1]
 8010b4e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010b52:	f1be 0f09 	cmp.w	lr, #9
 8010b56:	d939      	bls.n	8010bcc <_strtod_l+0x344>
 8010b58:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010b5a:	1a76      	subs	r6, r6, r1
 8010b5c:	2e08      	cmp	r6, #8
 8010b5e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010b62:	dc03      	bgt.n	8010b6c <_strtod_l+0x2e4>
 8010b64:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010b66:	4588      	cmp	r8, r1
 8010b68:	bfa8      	it	ge
 8010b6a:	4688      	movge	r8, r1
 8010b6c:	f1bc 0f00 	cmp.w	ip, #0
 8010b70:	d001      	beq.n	8010b76 <_strtod_l+0x2ee>
 8010b72:	f1c8 0800 	rsb	r8, r8, #0
 8010b76:	2d00      	cmp	r5, #0
 8010b78:	d14e      	bne.n	8010c18 <_strtod_l+0x390>
 8010b7a:	9908      	ldr	r1, [sp, #32]
 8010b7c:	4308      	orrs	r0, r1
 8010b7e:	f47f aebc 	bne.w	80108fa <_strtod_l+0x72>
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	f47f aed4 	bne.w	8010930 <_strtod_l+0xa8>
 8010b88:	2a69      	cmp	r2, #105	@ 0x69
 8010b8a:	d028      	beq.n	8010bde <_strtod_l+0x356>
 8010b8c:	dc25      	bgt.n	8010bda <_strtod_l+0x352>
 8010b8e:	2a49      	cmp	r2, #73	@ 0x49
 8010b90:	d025      	beq.n	8010bde <_strtod_l+0x356>
 8010b92:	2a4e      	cmp	r2, #78	@ 0x4e
 8010b94:	f47f aecc 	bne.w	8010930 <_strtod_l+0xa8>
 8010b98:	499a      	ldr	r1, [pc, #616]	@ (8010e04 <_strtod_l+0x57c>)
 8010b9a:	a819      	add	r0, sp, #100	@ 0x64
 8010b9c:	f001 fa86 	bl	80120ac <__match>
 8010ba0:	2800      	cmp	r0, #0
 8010ba2:	f43f aec5 	beq.w	8010930 <_strtod_l+0xa8>
 8010ba6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010ba8:	781b      	ldrb	r3, [r3, #0]
 8010baa:	2b28      	cmp	r3, #40	@ 0x28
 8010bac:	d12e      	bne.n	8010c0c <_strtod_l+0x384>
 8010bae:	4996      	ldr	r1, [pc, #600]	@ (8010e08 <_strtod_l+0x580>)
 8010bb0:	aa1c      	add	r2, sp, #112	@ 0x70
 8010bb2:	a819      	add	r0, sp, #100	@ 0x64
 8010bb4:	f001 fa8e 	bl	80120d4 <__hexnan>
 8010bb8:	2805      	cmp	r0, #5
 8010bba:	d127      	bne.n	8010c0c <_strtod_l+0x384>
 8010bbc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010bbe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8010bc2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010bc6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010bca:	e696      	b.n	80108fa <_strtod_l+0x72>
 8010bcc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010bce:	fb08 2101 	mla	r1, r8, r1, r2
 8010bd2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8010bd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8010bd8:	e7b5      	b.n	8010b46 <_strtod_l+0x2be>
 8010bda:	2a6e      	cmp	r2, #110	@ 0x6e
 8010bdc:	e7da      	b.n	8010b94 <_strtod_l+0x30c>
 8010bde:	498b      	ldr	r1, [pc, #556]	@ (8010e0c <_strtod_l+0x584>)
 8010be0:	a819      	add	r0, sp, #100	@ 0x64
 8010be2:	f001 fa63 	bl	80120ac <__match>
 8010be6:	2800      	cmp	r0, #0
 8010be8:	f43f aea2 	beq.w	8010930 <_strtod_l+0xa8>
 8010bec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010bee:	4988      	ldr	r1, [pc, #544]	@ (8010e10 <_strtod_l+0x588>)
 8010bf0:	3b01      	subs	r3, #1
 8010bf2:	a819      	add	r0, sp, #100	@ 0x64
 8010bf4:	9319      	str	r3, [sp, #100]	@ 0x64
 8010bf6:	f001 fa59 	bl	80120ac <__match>
 8010bfa:	b910      	cbnz	r0, 8010c02 <_strtod_l+0x37a>
 8010bfc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010bfe:	3301      	adds	r3, #1
 8010c00:	9319      	str	r3, [sp, #100]	@ 0x64
 8010c02:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8010e20 <_strtod_l+0x598>
 8010c06:	f04f 0a00 	mov.w	sl, #0
 8010c0a:	e676      	b.n	80108fa <_strtod_l+0x72>
 8010c0c:	4881      	ldr	r0, [pc, #516]	@ (8010e14 <_strtod_l+0x58c>)
 8010c0e:	f000 ff53 	bl	8011ab8 <nan>
 8010c12:	ec5b ab10 	vmov	sl, fp, d0
 8010c16:	e670      	b.n	80108fa <_strtod_l+0x72>
 8010c18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c1a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010c1c:	eba8 0303 	sub.w	r3, r8, r3
 8010c20:	f1b9 0f00 	cmp.w	r9, #0
 8010c24:	bf08      	it	eq
 8010c26:	46a9      	moveq	r9, r5
 8010c28:	2d10      	cmp	r5, #16
 8010c2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c2c:	462c      	mov	r4, r5
 8010c2e:	bfa8      	it	ge
 8010c30:	2410      	movge	r4, #16
 8010c32:	f7ef fc67 	bl	8000504 <__aeabi_ui2d>
 8010c36:	2d09      	cmp	r5, #9
 8010c38:	4682      	mov	sl, r0
 8010c3a:	468b      	mov	fp, r1
 8010c3c:	dc13      	bgt.n	8010c66 <_strtod_l+0x3de>
 8010c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	f43f ae5a 	beq.w	80108fa <_strtod_l+0x72>
 8010c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c48:	dd78      	ble.n	8010d3c <_strtod_l+0x4b4>
 8010c4a:	2b16      	cmp	r3, #22
 8010c4c:	dc5f      	bgt.n	8010d0e <_strtod_l+0x486>
 8010c4e:	4972      	ldr	r1, [pc, #456]	@ (8010e18 <_strtod_l+0x590>)
 8010c50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010c54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c58:	4652      	mov	r2, sl
 8010c5a:	465b      	mov	r3, fp
 8010c5c:	f7ef fccc 	bl	80005f8 <__aeabi_dmul>
 8010c60:	4682      	mov	sl, r0
 8010c62:	468b      	mov	fp, r1
 8010c64:	e649      	b.n	80108fa <_strtod_l+0x72>
 8010c66:	4b6c      	ldr	r3, [pc, #432]	@ (8010e18 <_strtod_l+0x590>)
 8010c68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010c6c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010c70:	f7ef fcc2 	bl	80005f8 <__aeabi_dmul>
 8010c74:	4682      	mov	sl, r0
 8010c76:	4638      	mov	r0, r7
 8010c78:	468b      	mov	fp, r1
 8010c7a:	f7ef fc43 	bl	8000504 <__aeabi_ui2d>
 8010c7e:	4602      	mov	r2, r0
 8010c80:	460b      	mov	r3, r1
 8010c82:	4650      	mov	r0, sl
 8010c84:	4659      	mov	r1, fp
 8010c86:	f7ef fb01 	bl	800028c <__adddf3>
 8010c8a:	2d0f      	cmp	r5, #15
 8010c8c:	4682      	mov	sl, r0
 8010c8e:	468b      	mov	fp, r1
 8010c90:	ddd5      	ble.n	8010c3e <_strtod_l+0x3b6>
 8010c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c94:	1b2c      	subs	r4, r5, r4
 8010c96:	441c      	add	r4, r3
 8010c98:	2c00      	cmp	r4, #0
 8010c9a:	f340 8093 	ble.w	8010dc4 <_strtod_l+0x53c>
 8010c9e:	f014 030f 	ands.w	r3, r4, #15
 8010ca2:	d00a      	beq.n	8010cba <_strtod_l+0x432>
 8010ca4:	495c      	ldr	r1, [pc, #368]	@ (8010e18 <_strtod_l+0x590>)
 8010ca6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010caa:	4652      	mov	r2, sl
 8010cac:	465b      	mov	r3, fp
 8010cae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010cb2:	f7ef fca1 	bl	80005f8 <__aeabi_dmul>
 8010cb6:	4682      	mov	sl, r0
 8010cb8:	468b      	mov	fp, r1
 8010cba:	f034 040f 	bics.w	r4, r4, #15
 8010cbe:	d073      	beq.n	8010da8 <_strtod_l+0x520>
 8010cc0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010cc4:	dd49      	ble.n	8010d5a <_strtod_l+0x4d2>
 8010cc6:	2400      	movs	r4, #0
 8010cc8:	46a0      	mov	r8, r4
 8010cca:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010ccc:	46a1      	mov	r9, r4
 8010cce:	9a05      	ldr	r2, [sp, #20]
 8010cd0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8010e20 <_strtod_l+0x598>
 8010cd4:	2322      	movs	r3, #34	@ 0x22
 8010cd6:	6013      	str	r3, [r2, #0]
 8010cd8:	f04f 0a00 	mov.w	sl, #0
 8010cdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	f43f ae0b 	beq.w	80108fa <_strtod_l+0x72>
 8010ce4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010ce6:	9805      	ldr	r0, [sp, #20]
 8010ce8:	f001 fae2 	bl	80122b0 <_Bfree>
 8010cec:	9805      	ldr	r0, [sp, #20]
 8010cee:	4649      	mov	r1, r9
 8010cf0:	f001 fade 	bl	80122b0 <_Bfree>
 8010cf4:	9805      	ldr	r0, [sp, #20]
 8010cf6:	4641      	mov	r1, r8
 8010cf8:	f001 fada 	bl	80122b0 <_Bfree>
 8010cfc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010cfe:	9805      	ldr	r0, [sp, #20]
 8010d00:	f001 fad6 	bl	80122b0 <_Bfree>
 8010d04:	9805      	ldr	r0, [sp, #20]
 8010d06:	4621      	mov	r1, r4
 8010d08:	f001 fad2 	bl	80122b0 <_Bfree>
 8010d0c:	e5f5      	b.n	80108fa <_strtod_l+0x72>
 8010d0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d10:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8010d14:	4293      	cmp	r3, r2
 8010d16:	dbbc      	blt.n	8010c92 <_strtod_l+0x40a>
 8010d18:	4c3f      	ldr	r4, [pc, #252]	@ (8010e18 <_strtod_l+0x590>)
 8010d1a:	f1c5 050f 	rsb	r5, r5, #15
 8010d1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010d22:	4652      	mov	r2, sl
 8010d24:	465b      	mov	r3, fp
 8010d26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d2a:	f7ef fc65 	bl	80005f8 <__aeabi_dmul>
 8010d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d30:	1b5d      	subs	r5, r3, r5
 8010d32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010d36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010d3a:	e78f      	b.n	8010c5c <_strtod_l+0x3d4>
 8010d3c:	3316      	adds	r3, #22
 8010d3e:	dba8      	blt.n	8010c92 <_strtod_l+0x40a>
 8010d40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d42:	eba3 0808 	sub.w	r8, r3, r8
 8010d46:	4b34      	ldr	r3, [pc, #208]	@ (8010e18 <_strtod_l+0x590>)
 8010d48:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8010d4c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010d50:	4650      	mov	r0, sl
 8010d52:	4659      	mov	r1, fp
 8010d54:	f7ef fd7a 	bl	800084c <__aeabi_ddiv>
 8010d58:	e782      	b.n	8010c60 <_strtod_l+0x3d8>
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	4f2f      	ldr	r7, [pc, #188]	@ (8010e1c <_strtod_l+0x594>)
 8010d5e:	1124      	asrs	r4, r4, #4
 8010d60:	4650      	mov	r0, sl
 8010d62:	4659      	mov	r1, fp
 8010d64:	461e      	mov	r6, r3
 8010d66:	2c01      	cmp	r4, #1
 8010d68:	dc21      	bgt.n	8010dae <_strtod_l+0x526>
 8010d6a:	b10b      	cbz	r3, 8010d70 <_strtod_l+0x4e8>
 8010d6c:	4682      	mov	sl, r0
 8010d6e:	468b      	mov	fp, r1
 8010d70:	492a      	ldr	r1, [pc, #168]	@ (8010e1c <_strtod_l+0x594>)
 8010d72:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010d76:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010d7a:	4652      	mov	r2, sl
 8010d7c:	465b      	mov	r3, fp
 8010d7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d82:	f7ef fc39 	bl	80005f8 <__aeabi_dmul>
 8010d86:	4b26      	ldr	r3, [pc, #152]	@ (8010e20 <_strtod_l+0x598>)
 8010d88:	460a      	mov	r2, r1
 8010d8a:	400b      	ands	r3, r1
 8010d8c:	4925      	ldr	r1, [pc, #148]	@ (8010e24 <_strtod_l+0x59c>)
 8010d8e:	428b      	cmp	r3, r1
 8010d90:	4682      	mov	sl, r0
 8010d92:	d898      	bhi.n	8010cc6 <_strtod_l+0x43e>
 8010d94:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010d98:	428b      	cmp	r3, r1
 8010d9a:	bf86      	itte	hi
 8010d9c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8010e28 <_strtod_l+0x5a0>
 8010da0:	f04f 3aff 	movhi.w	sl, #4294967295
 8010da4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010da8:	2300      	movs	r3, #0
 8010daa:	9308      	str	r3, [sp, #32]
 8010dac:	e076      	b.n	8010e9c <_strtod_l+0x614>
 8010dae:	07e2      	lsls	r2, r4, #31
 8010db0:	d504      	bpl.n	8010dbc <_strtod_l+0x534>
 8010db2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010db6:	f7ef fc1f 	bl	80005f8 <__aeabi_dmul>
 8010dba:	2301      	movs	r3, #1
 8010dbc:	3601      	adds	r6, #1
 8010dbe:	1064      	asrs	r4, r4, #1
 8010dc0:	3708      	adds	r7, #8
 8010dc2:	e7d0      	b.n	8010d66 <_strtod_l+0x4de>
 8010dc4:	d0f0      	beq.n	8010da8 <_strtod_l+0x520>
 8010dc6:	4264      	negs	r4, r4
 8010dc8:	f014 020f 	ands.w	r2, r4, #15
 8010dcc:	d00a      	beq.n	8010de4 <_strtod_l+0x55c>
 8010dce:	4b12      	ldr	r3, [pc, #72]	@ (8010e18 <_strtod_l+0x590>)
 8010dd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010dd4:	4650      	mov	r0, sl
 8010dd6:	4659      	mov	r1, fp
 8010dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ddc:	f7ef fd36 	bl	800084c <__aeabi_ddiv>
 8010de0:	4682      	mov	sl, r0
 8010de2:	468b      	mov	fp, r1
 8010de4:	1124      	asrs	r4, r4, #4
 8010de6:	d0df      	beq.n	8010da8 <_strtod_l+0x520>
 8010de8:	2c1f      	cmp	r4, #31
 8010dea:	dd1f      	ble.n	8010e2c <_strtod_l+0x5a4>
 8010dec:	2400      	movs	r4, #0
 8010dee:	46a0      	mov	r8, r4
 8010df0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010df2:	46a1      	mov	r9, r4
 8010df4:	9a05      	ldr	r2, [sp, #20]
 8010df6:	2322      	movs	r3, #34	@ 0x22
 8010df8:	f04f 0a00 	mov.w	sl, #0
 8010dfc:	f04f 0b00 	mov.w	fp, #0
 8010e00:	6013      	str	r3, [r2, #0]
 8010e02:	e76b      	b.n	8010cdc <_strtod_l+0x454>
 8010e04:	080143e3 	.word	0x080143e3
 8010e08:	08014598 	.word	0x08014598
 8010e0c:	080143da 	.word	0x080143da
 8010e10:	080143dd 	.word	0x080143dd
 8010e14:	0801449a 	.word	0x0801449a
 8010e18:	08014720 	.word	0x08014720
 8010e1c:	080146f8 	.word	0x080146f8
 8010e20:	7ff00000 	.word	0x7ff00000
 8010e24:	7ca00000 	.word	0x7ca00000
 8010e28:	7fefffff 	.word	0x7fefffff
 8010e2c:	f014 0310 	ands.w	r3, r4, #16
 8010e30:	bf18      	it	ne
 8010e32:	236a      	movne	r3, #106	@ 0x6a
 8010e34:	4ea9      	ldr	r6, [pc, #676]	@ (80110dc <_strtod_l+0x854>)
 8010e36:	9308      	str	r3, [sp, #32]
 8010e38:	4650      	mov	r0, sl
 8010e3a:	4659      	mov	r1, fp
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	07e7      	lsls	r7, r4, #31
 8010e40:	d504      	bpl.n	8010e4c <_strtod_l+0x5c4>
 8010e42:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010e46:	f7ef fbd7 	bl	80005f8 <__aeabi_dmul>
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	1064      	asrs	r4, r4, #1
 8010e4e:	f106 0608 	add.w	r6, r6, #8
 8010e52:	d1f4      	bne.n	8010e3e <_strtod_l+0x5b6>
 8010e54:	b10b      	cbz	r3, 8010e5a <_strtod_l+0x5d2>
 8010e56:	4682      	mov	sl, r0
 8010e58:	468b      	mov	fp, r1
 8010e5a:	9b08      	ldr	r3, [sp, #32]
 8010e5c:	b1b3      	cbz	r3, 8010e8c <_strtod_l+0x604>
 8010e5e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010e62:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	4659      	mov	r1, fp
 8010e6a:	dd0f      	ble.n	8010e8c <_strtod_l+0x604>
 8010e6c:	2b1f      	cmp	r3, #31
 8010e6e:	dd56      	ble.n	8010f1e <_strtod_l+0x696>
 8010e70:	2b34      	cmp	r3, #52	@ 0x34
 8010e72:	bfde      	ittt	le
 8010e74:	f04f 33ff 	movle.w	r3, #4294967295
 8010e78:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8010e7c:	4093      	lslle	r3, r2
 8010e7e:	f04f 0a00 	mov.w	sl, #0
 8010e82:	bfcc      	ite	gt
 8010e84:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010e88:	ea03 0b01 	andle.w	fp, r3, r1
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	2300      	movs	r3, #0
 8010e90:	4650      	mov	r0, sl
 8010e92:	4659      	mov	r1, fp
 8010e94:	f7ef fe18 	bl	8000ac8 <__aeabi_dcmpeq>
 8010e98:	2800      	cmp	r0, #0
 8010e9a:	d1a7      	bne.n	8010dec <_strtod_l+0x564>
 8010e9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010e9e:	9300      	str	r3, [sp, #0]
 8010ea0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010ea2:	9805      	ldr	r0, [sp, #20]
 8010ea4:	462b      	mov	r3, r5
 8010ea6:	464a      	mov	r2, r9
 8010ea8:	f001 fa6a 	bl	8012380 <__s2b>
 8010eac:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010eae:	2800      	cmp	r0, #0
 8010eb0:	f43f af09 	beq.w	8010cc6 <_strtod_l+0x43e>
 8010eb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010eb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010eb8:	2a00      	cmp	r2, #0
 8010eba:	eba3 0308 	sub.w	r3, r3, r8
 8010ebe:	bfa8      	it	ge
 8010ec0:	2300      	movge	r3, #0
 8010ec2:	9312      	str	r3, [sp, #72]	@ 0x48
 8010ec4:	2400      	movs	r4, #0
 8010ec6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010eca:	9316      	str	r3, [sp, #88]	@ 0x58
 8010ecc:	46a0      	mov	r8, r4
 8010ece:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010ed0:	9805      	ldr	r0, [sp, #20]
 8010ed2:	6859      	ldr	r1, [r3, #4]
 8010ed4:	f001 f9ac 	bl	8012230 <_Balloc>
 8010ed8:	4681      	mov	r9, r0
 8010eda:	2800      	cmp	r0, #0
 8010edc:	f43f aef7 	beq.w	8010cce <_strtod_l+0x446>
 8010ee0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010ee2:	691a      	ldr	r2, [r3, #16]
 8010ee4:	3202      	adds	r2, #2
 8010ee6:	f103 010c 	add.w	r1, r3, #12
 8010eea:	0092      	lsls	r2, r2, #2
 8010eec:	300c      	adds	r0, #12
 8010eee:	f000 fdd2 	bl	8011a96 <memcpy>
 8010ef2:	ec4b ab10 	vmov	d0, sl, fp
 8010ef6:	9805      	ldr	r0, [sp, #20]
 8010ef8:	aa1c      	add	r2, sp, #112	@ 0x70
 8010efa:	a91b      	add	r1, sp, #108	@ 0x6c
 8010efc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010f00:	f001 fd72 	bl	80129e8 <__d2b>
 8010f04:	901a      	str	r0, [sp, #104]	@ 0x68
 8010f06:	2800      	cmp	r0, #0
 8010f08:	f43f aee1 	beq.w	8010cce <_strtod_l+0x446>
 8010f0c:	9805      	ldr	r0, [sp, #20]
 8010f0e:	2101      	movs	r1, #1
 8010f10:	f001 facc 	bl	80124ac <__i2b>
 8010f14:	4680      	mov	r8, r0
 8010f16:	b948      	cbnz	r0, 8010f2c <_strtod_l+0x6a4>
 8010f18:	f04f 0800 	mov.w	r8, #0
 8010f1c:	e6d7      	b.n	8010cce <_strtod_l+0x446>
 8010f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8010f22:	fa02 f303 	lsl.w	r3, r2, r3
 8010f26:	ea03 0a0a 	and.w	sl, r3, sl
 8010f2a:	e7af      	b.n	8010e8c <_strtod_l+0x604>
 8010f2c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010f2e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010f30:	2d00      	cmp	r5, #0
 8010f32:	bfab      	itete	ge
 8010f34:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010f36:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010f38:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010f3a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010f3c:	bfac      	ite	ge
 8010f3e:	18ef      	addge	r7, r5, r3
 8010f40:	1b5e      	sublt	r6, r3, r5
 8010f42:	9b08      	ldr	r3, [sp, #32]
 8010f44:	1aed      	subs	r5, r5, r3
 8010f46:	4415      	add	r5, r2
 8010f48:	4b65      	ldr	r3, [pc, #404]	@ (80110e0 <_strtod_l+0x858>)
 8010f4a:	3d01      	subs	r5, #1
 8010f4c:	429d      	cmp	r5, r3
 8010f4e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010f52:	da50      	bge.n	8010ff6 <_strtod_l+0x76e>
 8010f54:	1b5b      	subs	r3, r3, r5
 8010f56:	2b1f      	cmp	r3, #31
 8010f58:	eba2 0203 	sub.w	r2, r2, r3
 8010f5c:	f04f 0101 	mov.w	r1, #1
 8010f60:	dc3d      	bgt.n	8010fde <_strtod_l+0x756>
 8010f62:	fa01 f303 	lsl.w	r3, r1, r3
 8010f66:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010f68:	2300      	movs	r3, #0
 8010f6a:	9310      	str	r3, [sp, #64]	@ 0x40
 8010f6c:	18bd      	adds	r5, r7, r2
 8010f6e:	9b08      	ldr	r3, [sp, #32]
 8010f70:	42af      	cmp	r7, r5
 8010f72:	4416      	add	r6, r2
 8010f74:	441e      	add	r6, r3
 8010f76:	463b      	mov	r3, r7
 8010f78:	bfa8      	it	ge
 8010f7a:	462b      	movge	r3, r5
 8010f7c:	42b3      	cmp	r3, r6
 8010f7e:	bfa8      	it	ge
 8010f80:	4633      	movge	r3, r6
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	bfc2      	ittt	gt
 8010f86:	1aed      	subgt	r5, r5, r3
 8010f88:	1af6      	subgt	r6, r6, r3
 8010f8a:	1aff      	subgt	r7, r7, r3
 8010f8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	dd16      	ble.n	8010fc0 <_strtod_l+0x738>
 8010f92:	4641      	mov	r1, r8
 8010f94:	9805      	ldr	r0, [sp, #20]
 8010f96:	461a      	mov	r2, r3
 8010f98:	f001 fb40 	bl	801261c <__pow5mult>
 8010f9c:	4680      	mov	r8, r0
 8010f9e:	2800      	cmp	r0, #0
 8010fa0:	d0ba      	beq.n	8010f18 <_strtod_l+0x690>
 8010fa2:	4601      	mov	r1, r0
 8010fa4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010fa6:	9805      	ldr	r0, [sp, #20]
 8010fa8:	f001 fa96 	bl	80124d8 <__multiply>
 8010fac:	900a      	str	r0, [sp, #40]	@ 0x28
 8010fae:	2800      	cmp	r0, #0
 8010fb0:	f43f ae8d 	beq.w	8010cce <_strtod_l+0x446>
 8010fb4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010fb6:	9805      	ldr	r0, [sp, #20]
 8010fb8:	f001 f97a 	bl	80122b0 <_Bfree>
 8010fbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010fbe:	931a      	str	r3, [sp, #104]	@ 0x68
 8010fc0:	2d00      	cmp	r5, #0
 8010fc2:	dc1d      	bgt.n	8011000 <_strtod_l+0x778>
 8010fc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	dd23      	ble.n	8011012 <_strtod_l+0x78a>
 8010fca:	4649      	mov	r1, r9
 8010fcc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010fce:	9805      	ldr	r0, [sp, #20]
 8010fd0:	f001 fb24 	bl	801261c <__pow5mult>
 8010fd4:	4681      	mov	r9, r0
 8010fd6:	b9e0      	cbnz	r0, 8011012 <_strtod_l+0x78a>
 8010fd8:	f04f 0900 	mov.w	r9, #0
 8010fdc:	e677      	b.n	8010cce <_strtod_l+0x446>
 8010fde:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010fe2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010fe6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010fea:	35e2      	adds	r5, #226	@ 0xe2
 8010fec:	fa01 f305 	lsl.w	r3, r1, r5
 8010ff0:	9310      	str	r3, [sp, #64]	@ 0x40
 8010ff2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010ff4:	e7ba      	b.n	8010f6c <_strtod_l+0x6e4>
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	9310      	str	r3, [sp, #64]	@ 0x40
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010ffe:	e7b5      	b.n	8010f6c <_strtod_l+0x6e4>
 8011000:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011002:	9805      	ldr	r0, [sp, #20]
 8011004:	462a      	mov	r2, r5
 8011006:	f001 fb63 	bl	80126d0 <__lshift>
 801100a:	901a      	str	r0, [sp, #104]	@ 0x68
 801100c:	2800      	cmp	r0, #0
 801100e:	d1d9      	bne.n	8010fc4 <_strtod_l+0x73c>
 8011010:	e65d      	b.n	8010cce <_strtod_l+0x446>
 8011012:	2e00      	cmp	r6, #0
 8011014:	dd07      	ble.n	8011026 <_strtod_l+0x79e>
 8011016:	4649      	mov	r1, r9
 8011018:	9805      	ldr	r0, [sp, #20]
 801101a:	4632      	mov	r2, r6
 801101c:	f001 fb58 	bl	80126d0 <__lshift>
 8011020:	4681      	mov	r9, r0
 8011022:	2800      	cmp	r0, #0
 8011024:	d0d8      	beq.n	8010fd8 <_strtod_l+0x750>
 8011026:	2f00      	cmp	r7, #0
 8011028:	dd08      	ble.n	801103c <_strtod_l+0x7b4>
 801102a:	4641      	mov	r1, r8
 801102c:	9805      	ldr	r0, [sp, #20]
 801102e:	463a      	mov	r2, r7
 8011030:	f001 fb4e 	bl	80126d0 <__lshift>
 8011034:	4680      	mov	r8, r0
 8011036:	2800      	cmp	r0, #0
 8011038:	f43f ae49 	beq.w	8010cce <_strtod_l+0x446>
 801103c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801103e:	9805      	ldr	r0, [sp, #20]
 8011040:	464a      	mov	r2, r9
 8011042:	f001 fbcd 	bl	80127e0 <__mdiff>
 8011046:	4604      	mov	r4, r0
 8011048:	2800      	cmp	r0, #0
 801104a:	f43f ae40 	beq.w	8010cce <_strtod_l+0x446>
 801104e:	68c3      	ldr	r3, [r0, #12]
 8011050:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011052:	2300      	movs	r3, #0
 8011054:	60c3      	str	r3, [r0, #12]
 8011056:	4641      	mov	r1, r8
 8011058:	f001 fba6 	bl	80127a8 <__mcmp>
 801105c:	2800      	cmp	r0, #0
 801105e:	da45      	bge.n	80110ec <_strtod_l+0x864>
 8011060:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011062:	ea53 030a 	orrs.w	r3, r3, sl
 8011066:	d16b      	bne.n	8011140 <_strtod_l+0x8b8>
 8011068:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801106c:	2b00      	cmp	r3, #0
 801106e:	d167      	bne.n	8011140 <_strtod_l+0x8b8>
 8011070:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011074:	0d1b      	lsrs	r3, r3, #20
 8011076:	051b      	lsls	r3, r3, #20
 8011078:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801107c:	d960      	bls.n	8011140 <_strtod_l+0x8b8>
 801107e:	6963      	ldr	r3, [r4, #20]
 8011080:	b913      	cbnz	r3, 8011088 <_strtod_l+0x800>
 8011082:	6923      	ldr	r3, [r4, #16]
 8011084:	2b01      	cmp	r3, #1
 8011086:	dd5b      	ble.n	8011140 <_strtod_l+0x8b8>
 8011088:	4621      	mov	r1, r4
 801108a:	2201      	movs	r2, #1
 801108c:	9805      	ldr	r0, [sp, #20]
 801108e:	f001 fb1f 	bl	80126d0 <__lshift>
 8011092:	4641      	mov	r1, r8
 8011094:	4604      	mov	r4, r0
 8011096:	f001 fb87 	bl	80127a8 <__mcmp>
 801109a:	2800      	cmp	r0, #0
 801109c:	dd50      	ble.n	8011140 <_strtod_l+0x8b8>
 801109e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80110a2:	9a08      	ldr	r2, [sp, #32]
 80110a4:	0d1b      	lsrs	r3, r3, #20
 80110a6:	051b      	lsls	r3, r3, #20
 80110a8:	2a00      	cmp	r2, #0
 80110aa:	d06a      	beq.n	8011182 <_strtod_l+0x8fa>
 80110ac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80110b0:	d867      	bhi.n	8011182 <_strtod_l+0x8fa>
 80110b2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80110b6:	f67f ae9d 	bls.w	8010df4 <_strtod_l+0x56c>
 80110ba:	4b0a      	ldr	r3, [pc, #40]	@ (80110e4 <_strtod_l+0x85c>)
 80110bc:	4650      	mov	r0, sl
 80110be:	4659      	mov	r1, fp
 80110c0:	2200      	movs	r2, #0
 80110c2:	f7ef fa99 	bl	80005f8 <__aeabi_dmul>
 80110c6:	4b08      	ldr	r3, [pc, #32]	@ (80110e8 <_strtod_l+0x860>)
 80110c8:	400b      	ands	r3, r1
 80110ca:	4682      	mov	sl, r0
 80110cc:	468b      	mov	fp, r1
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	f47f ae08 	bne.w	8010ce4 <_strtod_l+0x45c>
 80110d4:	9a05      	ldr	r2, [sp, #20]
 80110d6:	2322      	movs	r3, #34	@ 0x22
 80110d8:	6013      	str	r3, [r2, #0]
 80110da:	e603      	b.n	8010ce4 <_strtod_l+0x45c>
 80110dc:	080145c0 	.word	0x080145c0
 80110e0:	fffffc02 	.word	0xfffffc02
 80110e4:	39500000 	.word	0x39500000
 80110e8:	7ff00000 	.word	0x7ff00000
 80110ec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80110f0:	d165      	bne.n	80111be <_strtod_l+0x936>
 80110f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80110f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80110f8:	b35a      	cbz	r2, 8011152 <_strtod_l+0x8ca>
 80110fa:	4a9f      	ldr	r2, [pc, #636]	@ (8011378 <_strtod_l+0xaf0>)
 80110fc:	4293      	cmp	r3, r2
 80110fe:	d12b      	bne.n	8011158 <_strtod_l+0x8d0>
 8011100:	9b08      	ldr	r3, [sp, #32]
 8011102:	4651      	mov	r1, sl
 8011104:	b303      	cbz	r3, 8011148 <_strtod_l+0x8c0>
 8011106:	4b9d      	ldr	r3, [pc, #628]	@ (801137c <_strtod_l+0xaf4>)
 8011108:	465a      	mov	r2, fp
 801110a:	4013      	ands	r3, r2
 801110c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011110:	f04f 32ff 	mov.w	r2, #4294967295
 8011114:	d81b      	bhi.n	801114e <_strtod_l+0x8c6>
 8011116:	0d1b      	lsrs	r3, r3, #20
 8011118:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801111c:	fa02 f303 	lsl.w	r3, r2, r3
 8011120:	4299      	cmp	r1, r3
 8011122:	d119      	bne.n	8011158 <_strtod_l+0x8d0>
 8011124:	4b96      	ldr	r3, [pc, #600]	@ (8011380 <_strtod_l+0xaf8>)
 8011126:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011128:	429a      	cmp	r2, r3
 801112a:	d102      	bne.n	8011132 <_strtod_l+0x8aa>
 801112c:	3101      	adds	r1, #1
 801112e:	f43f adce 	beq.w	8010cce <_strtod_l+0x446>
 8011132:	4b92      	ldr	r3, [pc, #584]	@ (801137c <_strtod_l+0xaf4>)
 8011134:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011136:	401a      	ands	r2, r3
 8011138:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801113c:	f04f 0a00 	mov.w	sl, #0
 8011140:	9b08      	ldr	r3, [sp, #32]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d1b9      	bne.n	80110ba <_strtod_l+0x832>
 8011146:	e5cd      	b.n	8010ce4 <_strtod_l+0x45c>
 8011148:	f04f 33ff 	mov.w	r3, #4294967295
 801114c:	e7e8      	b.n	8011120 <_strtod_l+0x898>
 801114e:	4613      	mov	r3, r2
 8011150:	e7e6      	b.n	8011120 <_strtod_l+0x898>
 8011152:	ea53 030a 	orrs.w	r3, r3, sl
 8011156:	d0a2      	beq.n	801109e <_strtod_l+0x816>
 8011158:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801115a:	b1db      	cbz	r3, 8011194 <_strtod_l+0x90c>
 801115c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801115e:	4213      	tst	r3, r2
 8011160:	d0ee      	beq.n	8011140 <_strtod_l+0x8b8>
 8011162:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011164:	9a08      	ldr	r2, [sp, #32]
 8011166:	4650      	mov	r0, sl
 8011168:	4659      	mov	r1, fp
 801116a:	b1bb      	cbz	r3, 801119c <_strtod_l+0x914>
 801116c:	f7ff fb6c 	bl	8010848 <sulp>
 8011170:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011174:	ec53 2b10 	vmov	r2, r3, d0
 8011178:	f7ef f888 	bl	800028c <__adddf3>
 801117c:	4682      	mov	sl, r0
 801117e:	468b      	mov	fp, r1
 8011180:	e7de      	b.n	8011140 <_strtod_l+0x8b8>
 8011182:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011186:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801118a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801118e:	f04f 3aff 	mov.w	sl, #4294967295
 8011192:	e7d5      	b.n	8011140 <_strtod_l+0x8b8>
 8011194:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011196:	ea13 0f0a 	tst.w	r3, sl
 801119a:	e7e1      	b.n	8011160 <_strtod_l+0x8d8>
 801119c:	f7ff fb54 	bl	8010848 <sulp>
 80111a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80111a4:	ec53 2b10 	vmov	r2, r3, d0
 80111a8:	f7ef f86e 	bl	8000288 <__aeabi_dsub>
 80111ac:	2200      	movs	r2, #0
 80111ae:	2300      	movs	r3, #0
 80111b0:	4682      	mov	sl, r0
 80111b2:	468b      	mov	fp, r1
 80111b4:	f7ef fc88 	bl	8000ac8 <__aeabi_dcmpeq>
 80111b8:	2800      	cmp	r0, #0
 80111ba:	d0c1      	beq.n	8011140 <_strtod_l+0x8b8>
 80111bc:	e61a      	b.n	8010df4 <_strtod_l+0x56c>
 80111be:	4641      	mov	r1, r8
 80111c0:	4620      	mov	r0, r4
 80111c2:	f001 fc69 	bl	8012a98 <__ratio>
 80111c6:	ec57 6b10 	vmov	r6, r7, d0
 80111ca:	2200      	movs	r2, #0
 80111cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80111d0:	4630      	mov	r0, r6
 80111d2:	4639      	mov	r1, r7
 80111d4:	f7ef fc8c 	bl	8000af0 <__aeabi_dcmple>
 80111d8:	2800      	cmp	r0, #0
 80111da:	d06f      	beq.n	80112bc <_strtod_l+0xa34>
 80111dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d17a      	bne.n	80112d8 <_strtod_l+0xa50>
 80111e2:	f1ba 0f00 	cmp.w	sl, #0
 80111e6:	d158      	bne.n	801129a <_strtod_l+0xa12>
 80111e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d15a      	bne.n	80112a8 <_strtod_l+0xa20>
 80111f2:	4b64      	ldr	r3, [pc, #400]	@ (8011384 <_strtod_l+0xafc>)
 80111f4:	2200      	movs	r2, #0
 80111f6:	4630      	mov	r0, r6
 80111f8:	4639      	mov	r1, r7
 80111fa:	f7ef fc6f 	bl	8000adc <__aeabi_dcmplt>
 80111fe:	2800      	cmp	r0, #0
 8011200:	d159      	bne.n	80112b6 <_strtod_l+0xa2e>
 8011202:	4630      	mov	r0, r6
 8011204:	4639      	mov	r1, r7
 8011206:	4b60      	ldr	r3, [pc, #384]	@ (8011388 <_strtod_l+0xb00>)
 8011208:	2200      	movs	r2, #0
 801120a:	f7ef f9f5 	bl	80005f8 <__aeabi_dmul>
 801120e:	4606      	mov	r6, r0
 8011210:	460f      	mov	r7, r1
 8011212:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011216:	9606      	str	r6, [sp, #24]
 8011218:	9307      	str	r3, [sp, #28]
 801121a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801121e:	4d57      	ldr	r5, [pc, #348]	@ (801137c <_strtod_l+0xaf4>)
 8011220:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011224:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011226:	401d      	ands	r5, r3
 8011228:	4b58      	ldr	r3, [pc, #352]	@ (801138c <_strtod_l+0xb04>)
 801122a:	429d      	cmp	r5, r3
 801122c:	f040 80b2 	bne.w	8011394 <_strtod_l+0xb0c>
 8011230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011232:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011236:	ec4b ab10 	vmov	d0, sl, fp
 801123a:	f001 fb65 	bl	8012908 <__ulp>
 801123e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011242:	ec51 0b10 	vmov	r0, r1, d0
 8011246:	f7ef f9d7 	bl	80005f8 <__aeabi_dmul>
 801124a:	4652      	mov	r2, sl
 801124c:	465b      	mov	r3, fp
 801124e:	f7ef f81d 	bl	800028c <__adddf3>
 8011252:	460b      	mov	r3, r1
 8011254:	4949      	ldr	r1, [pc, #292]	@ (801137c <_strtod_l+0xaf4>)
 8011256:	4a4e      	ldr	r2, [pc, #312]	@ (8011390 <_strtod_l+0xb08>)
 8011258:	4019      	ands	r1, r3
 801125a:	4291      	cmp	r1, r2
 801125c:	4682      	mov	sl, r0
 801125e:	d942      	bls.n	80112e6 <_strtod_l+0xa5e>
 8011260:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011262:	4b47      	ldr	r3, [pc, #284]	@ (8011380 <_strtod_l+0xaf8>)
 8011264:	429a      	cmp	r2, r3
 8011266:	d103      	bne.n	8011270 <_strtod_l+0x9e8>
 8011268:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801126a:	3301      	adds	r3, #1
 801126c:	f43f ad2f 	beq.w	8010cce <_strtod_l+0x446>
 8011270:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011380 <_strtod_l+0xaf8>
 8011274:	f04f 3aff 	mov.w	sl, #4294967295
 8011278:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801127a:	9805      	ldr	r0, [sp, #20]
 801127c:	f001 f818 	bl	80122b0 <_Bfree>
 8011280:	9805      	ldr	r0, [sp, #20]
 8011282:	4649      	mov	r1, r9
 8011284:	f001 f814 	bl	80122b0 <_Bfree>
 8011288:	9805      	ldr	r0, [sp, #20]
 801128a:	4641      	mov	r1, r8
 801128c:	f001 f810 	bl	80122b0 <_Bfree>
 8011290:	9805      	ldr	r0, [sp, #20]
 8011292:	4621      	mov	r1, r4
 8011294:	f001 f80c 	bl	80122b0 <_Bfree>
 8011298:	e619      	b.n	8010ece <_strtod_l+0x646>
 801129a:	f1ba 0f01 	cmp.w	sl, #1
 801129e:	d103      	bne.n	80112a8 <_strtod_l+0xa20>
 80112a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	f43f ada6 	beq.w	8010df4 <_strtod_l+0x56c>
 80112a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8011358 <_strtod_l+0xad0>
 80112ac:	4f35      	ldr	r7, [pc, #212]	@ (8011384 <_strtod_l+0xafc>)
 80112ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80112b2:	2600      	movs	r6, #0
 80112b4:	e7b1      	b.n	801121a <_strtod_l+0x992>
 80112b6:	4f34      	ldr	r7, [pc, #208]	@ (8011388 <_strtod_l+0xb00>)
 80112b8:	2600      	movs	r6, #0
 80112ba:	e7aa      	b.n	8011212 <_strtod_l+0x98a>
 80112bc:	4b32      	ldr	r3, [pc, #200]	@ (8011388 <_strtod_l+0xb00>)
 80112be:	4630      	mov	r0, r6
 80112c0:	4639      	mov	r1, r7
 80112c2:	2200      	movs	r2, #0
 80112c4:	f7ef f998 	bl	80005f8 <__aeabi_dmul>
 80112c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112ca:	4606      	mov	r6, r0
 80112cc:	460f      	mov	r7, r1
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d09f      	beq.n	8011212 <_strtod_l+0x98a>
 80112d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80112d6:	e7a0      	b.n	801121a <_strtod_l+0x992>
 80112d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011360 <_strtod_l+0xad8>
 80112dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80112e0:	ec57 6b17 	vmov	r6, r7, d7
 80112e4:	e799      	b.n	801121a <_strtod_l+0x992>
 80112e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80112ea:	9b08      	ldr	r3, [sp, #32]
 80112ec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d1c1      	bne.n	8011278 <_strtod_l+0x9f0>
 80112f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80112f8:	0d1b      	lsrs	r3, r3, #20
 80112fa:	051b      	lsls	r3, r3, #20
 80112fc:	429d      	cmp	r5, r3
 80112fe:	d1bb      	bne.n	8011278 <_strtod_l+0x9f0>
 8011300:	4630      	mov	r0, r6
 8011302:	4639      	mov	r1, r7
 8011304:	f7ef fc4a 	bl	8000b9c <__aeabi_d2lz>
 8011308:	f7ef f948 	bl	800059c <__aeabi_l2d>
 801130c:	4602      	mov	r2, r0
 801130e:	460b      	mov	r3, r1
 8011310:	4630      	mov	r0, r6
 8011312:	4639      	mov	r1, r7
 8011314:	f7ee ffb8 	bl	8000288 <__aeabi_dsub>
 8011318:	460b      	mov	r3, r1
 801131a:	4602      	mov	r2, r0
 801131c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011320:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011326:	ea46 060a 	orr.w	r6, r6, sl
 801132a:	431e      	orrs	r6, r3
 801132c:	d06f      	beq.n	801140e <_strtod_l+0xb86>
 801132e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011368 <_strtod_l+0xae0>)
 8011330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011334:	f7ef fbd2 	bl	8000adc <__aeabi_dcmplt>
 8011338:	2800      	cmp	r0, #0
 801133a:	f47f acd3 	bne.w	8010ce4 <_strtod_l+0x45c>
 801133e:	a30c      	add	r3, pc, #48	@ (adr r3, 8011370 <_strtod_l+0xae8>)
 8011340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011344:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011348:	f7ef fbe6 	bl	8000b18 <__aeabi_dcmpgt>
 801134c:	2800      	cmp	r0, #0
 801134e:	d093      	beq.n	8011278 <_strtod_l+0x9f0>
 8011350:	e4c8      	b.n	8010ce4 <_strtod_l+0x45c>
 8011352:	bf00      	nop
 8011354:	f3af 8000 	nop.w
 8011358:	00000000 	.word	0x00000000
 801135c:	bff00000 	.word	0xbff00000
 8011360:	00000000 	.word	0x00000000
 8011364:	3ff00000 	.word	0x3ff00000
 8011368:	94a03595 	.word	0x94a03595
 801136c:	3fdfffff 	.word	0x3fdfffff
 8011370:	35afe535 	.word	0x35afe535
 8011374:	3fe00000 	.word	0x3fe00000
 8011378:	000fffff 	.word	0x000fffff
 801137c:	7ff00000 	.word	0x7ff00000
 8011380:	7fefffff 	.word	0x7fefffff
 8011384:	3ff00000 	.word	0x3ff00000
 8011388:	3fe00000 	.word	0x3fe00000
 801138c:	7fe00000 	.word	0x7fe00000
 8011390:	7c9fffff 	.word	0x7c9fffff
 8011394:	9b08      	ldr	r3, [sp, #32]
 8011396:	b323      	cbz	r3, 80113e2 <_strtod_l+0xb5a>
 8011398:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801139c:	d821      	bhi.n	80113e2 <_strtod_l+0xb5a>
 801139e:	a328      	add	r3, pc, #160	@ (adr r3, 8011440 <_strtod_l+0xbb8>)
 80113a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a4:	4630      	mov	r0, r6
 80113a6:	4639      	mov	r1, r7
 80113a8:	f7ef fba2 	bl	8000af0 <__aeabi_dcmple>
 80113ac:	b1a0      	cbz	r0, 80113d8 <_strtod_l+0xb50>
 80113ae:	4639      	mov	r1, r7
 80113b0:	4630      	mov	r0, r6
 80113b2:	f7ef fbbb 	bl	8000b2c <__aeabi_d2uiz>
 80113b6:	2801      	cmp	r0, #1
 80113b8:	bf38      	it	cc
 80113ba:	2001      	movcc	r0, #1
 80113bc:	f7ef f8a2 	bl	8000504 <__aeabi_ui2d>
 80113c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80113c2:	4606      	mov	r6, r0
 80113c4:	460f      	mov	r7, r1
 80113c6:	b9fb      	cbnz	r3, 8011408 <_strtod_l+0xb80>
 80113c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80113cc:	9014      	str	r0, [sp, #80]	@ 0x50
 80113ce:	9315      	str	r3, [sp, #84]	@ 0x54
 80113d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80113d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80113d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80113da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80113de:	1b5b      	subs	r3, r3, r5
 80113e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80113e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80113e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80113ea:	f001 fa8d 	bl	8012908 <__ulp>
 80113ee:	4650      	mov	r0, sl
 80113f0:	ec53 2b10 	vmov	r2, r3, d0
 80113f4:	4659      	mov	r1, fp
 80113f6:	f7ef f8ff 	bl	80005f8 <__aeabi_dmul>
 80113fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80113fe:	f7ee ff45 	bl	800028c <__adddf3>
 8011402:	4682      	mov	sl, r0
 8011404:	468b      	mov	fp, r1
 8011406:	e770      	b.n	80112ea <_strtod_l+0xa62>
 8011408:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801140c:	e7e0      	b.n	80113d0 <_strtod_l+0xb48>
 801140e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011448 <_strtod_l+0xbc0>)
 8011410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011414:	f7ef fb62 	bl	8000adc <__aeabi_dcmplt>
 8011418:	e798      	b.n	801134c <_strtod_l+0xac4>
 801141a:	2300      	movs	r3, #0
 801141c:	930e      	str	r3, [sp, #56]	@ 0x38
 801141e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011420:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011422:	6013      	str	r3, [r2, #0]
 8011424:	f7ff ba6d 	b.w	8010902 <_strtod_l+0x7a>
 8011428:	2a65      	cmp	r2, #101	@ 0x65
 801142a:	f43f ab68 	beq.w	8010afe <_strtod_l+0x276>
 801142e:	2a45      	cmp	r2, #69	@ 0x45
 8011430:	f43f ab65 	beq.w	8010afe <_strtod_l+0x276>
 8011434:	2301      	movs	r3, #1
 8011436:	f7ff bba0 	b.w	8010b7a <_strtod_l+0x2f2>
 801143a:	bf00      	nop
 801143c:	f3af 8000 	nop.w
 8011440:	ffc00000 	.word	0xffc00000
 8011444:	41dfffff 	.word	0x41dfffff
 8011448:	94a03595 	.word	0x94a03595
 801144c:	3fcfffff 	.word	0x3fcfffff

08011450 <strtod>:
 8011450:	460a      	mov	r2, r1
 8011452:	4601      	mov	r1, r0
 8011454:	4802      	ldr	r0, [pc, #8]	@ (8011460 <strtod+0x10>)
 8011456:	4b03      	ldr	r3, [pc, #12]	@ (8011464 <strtod+0x14>)
 8011458:	6800      	ldr	r0, [r0, #0]
 801145a:	f7ff ba15 	b.w	8010888 <_strtod_l>
 801145e:	bf00      	nop
 8011460:	200003d4 	.word	0x200003d4
 8011464:	20000268 	.word	0x20000268

08011468 <_strtol_l.isra.0>:
 8011468:	2b24      	cmp	r3, #36	@ 0x24
 801146a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801146e:	4686      	mov	lr, r0
 8011470:	4690      	mov	r8, r2
 8011472:	d801      	bhi.n	8011478 <_strtol_l.isra.0+0x10>
 8011474:	2b01      	cmp	r3, #1
 8011476:	d106      	bne.n	8011486 <_strtol_l.isra.0+0x1e>
 8011478:	f000 fad8 	bl	8011a2c <__errno>
 801147c:	2316      	movs	r3, #22
 801147e:	6003      	str	r3, [r0, #0]
 8011480:	2000      	movs	r0, #0
 8011482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011486:	4834      	ldr	r0, [pc, #208]	@ (8011558 <_strtol_l.isra.0+0xf0>)
 8011488:	460d      	mov	r5, r1
 801148a:	462a      	mov	r2, r5
 801148c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011490:	5d06      	ldrb	r6, [r0, r4]
 8011492:	f016 0608 	ands.w	r6, r6, #8
 8011496:	d1f8      	bne.n	801148a <_strtol_l.isra.0+0x22>
 8011498:	2c2d      	cmp	r4, #45	@ 0x2d
 801149a:	d110      	bne.n	80114be <_strtol_l.isra.0+0x56>
 801149c:	782c      	ldrb	r4, [r5, #0]
 801149e:	2601      	movs	r6, #1
 80114a0:	1c95      	adds	r5, r2, #2
 80114a2:	f033 0210 	bics.w	r2, r3, #16
 80114a6:	d115      	bne.n	80114d4 <_strtol_l.isra.0+0x6c>
 80114a8:	2c30      	cmp	r4, #48	@ 0x30
 80114aa:	d10d      	bne.n	80114c8 <_strtol_l.isra.0+0x60>
 80114ac:	782a      	ldrb	r2, [r5, #0]
 80114ae:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80114b2:	2a58      	cmp	r2, #88	@ 0x58
 80114b4:	d108      	bne.n	80114c8 <_strtol_l.isra.0+0x60>
 80114b6:	786c      	ldrb	r4, [r5, #1]
 80114b8:	3502      	adds	r5, #2
 80114ba:	2310      	movs	r3, #16
 80114bc:	e00a      	b.n	80114d4 <_strtol_l.isra.0+0x6c>
 80114be:	2c2b      	cmp	r4, #43	@ 0x2b
 80114c0:	bf04      	itt	eq
 80114c2:	782c      	ldrbeq	r4, [r5, #0]
 80114c4:	1c95      	addeq	r5, r2, #2
 80114c6:	e7ec      	b.n	80114a2 <_strtol_l.isra.0+0x3a>
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d1f6      	bne.n	80114ba <_strtol_l.isra.0+0x52>
 80114cc:	2c30      	cmp	r4, #48	@ 0x30
 80114ce:	bf14      	ite	ne
 80114d0:	230a      	movne	r3, #10
 80114d2:	2308      	moveq	r3, #8
 80114d4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80114d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80114dc:	2200      	movs	r2, #0
 80114de:	fbbc f9f3 	udiv	r9, ip, r3
 80114e2:	4610      	mov	r0, r2
 80114e4:	fb03 ca19 	mls	sl, r3, r9, ip
 80114e8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80114ec:	2f09      	cmp	r7, #9
 80114ee:	d80f      	bhi.n	8011510 <_strtol_l.isra.0+0xa8>
 80114f0:	463c      	mov	r4, r7
 80114f2:	42a3      	cmp	r3, r4
 80114f4:	dd1b      	ble.n	801152e <_strtol_l.isra.0+0xc6>
 80114f6:	1c57      	adds	r7, r2, #1
 80114f8:	d007      	beq.n	801150a <_strtol_l.isra.0+0xa2>
 80114fa:	4581      	cmp	r9, r0
 80114fc:	d314      	bcc.n	8011528 <_strtol_l.isra.0+0xc0>
 80114fe:	d101      	bne.n	8011504 <_strtol_l.isra.0+0x9c>
 8011500:	45a2      	cmp	sl, r4
 8011502:	db11      	blt.n	8011528 <_strtol_l.isra.0+0xc0>
 8011504:	fb00 4003 	mla	r0, r0, r3, r4
 8011508:	2201      	movs	r2, #1
 801150a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801150e:	e7eb      	b.n	80114e8 <_strtol_l.isra.0+0x80>
 8011510:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011514:	2f19      	cmp	r7, #25
 8011516:	d801      	bhi.n	801151c <_strtol_l.isra.0+0xb4>
 8011518:	3c37      	subs	r4, #55	@ 0x37
 801151a:	e7ea      	b.n	80114f2 <_strtol_l.isra.0+0x8a>
 801151c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011520:	2f19      	cmp	r7, #25
 8011522:	d804      	bhi.n	801152e <_strtol_l.isra.0+0xc6>
 8011524:	3c57      	subs	r4, #87	@ 0x57
 8011526:	e7e4      	b.n	80114f2 <_strtol_l.isra.0+0x8a>
 8011528:	f04f 32ff 	mov.w	r2, #4294967295
 801152c:	e7ed      	b.n	801150a <_strtol_l.isra.0+0xa2>
 801152e:	1c53      	adds	r3, r2, #1
 8011530:	d108      	bne.n	8011544 <_strtol_l.isra.0+0xdc>
 8011532:	2322      	movs	r3, #34	@ 0x22
 8011534:	f8ce 3000 	str.w	r3, [lr]
 8011538:	4660      	mov	r0, ip
 801153a:	f1b8 0f00 	cmp.w	r8, #0
 801153e:	d0a0      	beq.n	8011482 <_strtol_l.isra.0+0x1a>
 8011540:	1e69      	subs	r1, r5, #1
 8011542:	e006      	b.n	8011552 <_strtol_l.isra.0+0xea>
 8011544:	b106      	cbz	r6, 8011548 <_strtol_l.isra.0+0xe0>
 8011546:	4240      	negs	r0, r0
 8011548:	f1b8 0f00 	cmp.w	r8, #0
 801154c:	d099      	beq.n	8011482 <_strtol_l.isra.0+0x1a>
 801154e:	2a00      	cmp	r2, #0
 8011550:	d1f6      	bne.n	8011540 <_strtol_l.isra.0+0xd8>
 8011552:	f8c8 1000 	str.w	r1, [r8]
 8011556:	e794      	b.n	8011482 <_strtol_l.isra.0+0x1a>
 8011558:	080145e9 	.word	0x080145e9

0801155c <strtol>:
 801155c:	4613      	mov	r3, r2
 801155e:	460a      	mov	r2, r1
 8011560:	4601      	mov	r1, r0
 8011562:	4802      	ldr	r0, [pc, #8]	@ (801156c <strtol+0x10>)
 8011564:	6800      	ldr	r0, [r0, #0]
 8011566:	f7ff bf7f 	b.w	8011468 <_strtol_l.isra.0>
 801156a:	bf00      	nop
 801156c:	200003d4 	.word	0x200003d4

08011570 <std>:
 8011570:	2300      	movs	r3, #0
 8011572:	b510      	push	{r4, lr}
 8011574:	4604      	mov	r4, r0
 8011576:	e9c0 3300 	strd	r3, r3, [r0]
 801157a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801157e:	6083      	str	r3, [r0, #8]
 8011580:	8181      	strh	r1, [r0, #12]
 8011582:	6643      	str	r3, [r0, #100]	@ 0x64
 8011584:	81c2      	strh	r2, [r0, #14]
 8011586:	6183      	str	r3, [r0, #24]
 8011588:	4619      	mov	r1, r3
 801158a:	2208      	movs	r2, #8
 801158c:	305c      	adds	r0, #92	@ 0x5c
 801158e:	f000 f916 	bl	80117be <memset>
 8011592:	4b0d      	ldr	r3, [pc, #52]	@ (80115c8 <std+0x58>)
 8011594:	6263      	str	r3, [r4, #36]	@ 0x24
 8011596:	4b0d      	ldr	r3, [pc, #52]	@ (80115cc <std+0x5c>)
 8011598:	62a3      	str	r3, [r4, #40]	@ 0x28
 801159a:	4b0d      	ldr	r3, [pc, #52]	@ (80115d0 <std+0x60>)
 801159c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801159e:	4b0d      	ldr	r3, [pc, #52]	@ (80115d4 <std+0x64>)
 80115a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80115a2:	4b0d      	ldr	r3, [pc, #52]	@ (80115d8 <std+0x68>)
 80115a4:	6224      	str	r4, [r4, #32]
 80115a6:	429c      	cmp	r4, r3
 80115a8:	d006      	beq.n	80115b8 <std+0x48>
 80115aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80115ae:	4294      	cmp	r4, r2
 80115b0:	d002      	beq.n	80115b8 <std+0x48>
 80115b2:	33d0      	adds	r3, #208	@ 0xd0
 80115b4:	429c      	cmp	r4, r3
 80115b6:	d105      	bne.n	80115c4 <std+0x54>
 80115b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80115bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115c0:	f000 ba5e 	b.w	8011a80 <__retarget_lock_init_recursive>
 80115c4:	bd10      	pop	{r4, pc}
 80115c6:	bf00      	nop
 80115c8:	08011739 	.word	0x08011739
 80115cc:	0801175b 	.word	0x0801175b
 80115d0:	08011793 	.word	0x08011793
 80115d4:	080117b7 	.word	0x080117b7
 80115d8:	2001159c 	.word	0x2001159c

080115dc <stdio_exit_handler>:
 80115dc:	4a02      	ldr	r2, [pc, #8]	@ (80115e8 <stdio_exit_handler+0xc>)
 80115de:	4903      	ldr	r1, [pc, #12]	@ (80115ec <stdio_exit_handler+0x10>)
 80115e0:	4803      	ldr	r0, [pc, #12]	@ (80115f0 <stdio_exit_handler+0x14>)
 80115e2:	f000 b869 	b.w	80116b8 <_fwalk_sglue>
 80115e6:	bf00      	nop
 80115e8:	2000025c 	.word	0x2000025c
 80115ec:	0801326d 	.word	0x0801326d
 80115f0:	200003d8 	.word	0x200003d8

080115f4 <cleanup_stdio>:
 80115f4:	6841      	ldr	r1, [r0, #4]
 80115f6:	4b0c      	ldr	r3, [pc, #48]	@ (8011628 <cleanup_stdio+0x34>)
 80115f8:	4299      	cmp	r1, r3
 80115fa:	b510      	push	{r4, lr}
 80115fc:	4604      	mov	r4, r0
 80115fe:	d001      	beq.n	8011604 <cleanup_stdio+0x10>
 8011600:	f001 fe34 	bl	801326c <_fflush_r>
 8011604:	68a1      	ldr	r1, [r4, #8]
 8011606:	4b09      	ldr	r3, [pc, #36]	@ (801162c <cleanup_stdio+0x38>)
 8011608:	4299      	cmp	r1, r3
 801160a:	d002      	beq.n	8011612 <cleanup_stdio+0x1e>
 801160c:	4620      	mov	r0, r4
 801160e:	f001 fe2d 	bl	801326c <_fflush_r>
 8011612:	68e1      	ldr	r1, [r4, #12]
 8011614:	4b06      	ldr	r3, [pc, #24]	@ (8011630 <cleanup_stdio+0x3c>)
 8011616:	4299      	cmp	r1, r3
 8011618:	d004      	beq.n	8011624 <cleanup_stdio+0x30>
 801161a:	4620      	mov	r0, r4
 801161c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011620:	f001 be24 	b.w	801326c <_fflush_r>
 8011624:	bd10      	pop	{r4, pc}
 8011626:	bf00      	nop
 8011628:	2001159c 	.word	0x2001159c
 801162c:	20011604 	.word	0x20011604
 8011630:	2001166c 	.word	0x2001166c

08011634 <global_stdio_init.part.0>:
 8011634:	b510      	push	{r4, lr}
 8011636:	4b0b      	ldr	r3, [pc, #44]	@ (8011664 <global_stdio_init.part.0+0x30>)
 8011638:	4c0b      	ldr	r4, [pc, #44]	@ (8011668 <global_stdio_init.part.0+0x34>)
 801163a:	4a0c      	ldr	r2, [pc, #48]	@ (801166c <global_stdio_init.part.0+0x38>)
 801163c:	601a      	str	r2, [r3, #0]
 801163e:	4620      	mov	r0, r4
 8011640:	2200      	movs	r2, #0
 8011642:	2104      	movs	r1, #4
 8011644:	f7ff ff94 	bl	8011570 <std>
 8011648:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801164c:	2201      	movs	r2, #1
 801164e:	2109      	movs	r1, #9
 8011650:	f7ff ff8e 	bl	8011570 <std>
 8011654:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011658:	2202      	movs	r2, #2
 801165a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801165e:	2112      	movs	r1, #18
 8011660:	f7ff bf86 	b.w	8011570 <std>
 8011664:	200116d4 	.word	0x200116d4
 8011668:	2001159c 	.word	0x2001159c
 801166c:	080115dd 	.word	0x080115dd

08011670 <__sfp_lock_acquire>:
 8011670:	4801      	ldr	r0, [pc, #4]	@ (8011678 <__sfp_lock_acquire+0x8>)
 8011672:	f000 ba06 	b.w	8011a82 <__retarget_lock_acquire_recursive>
 8011676:	bf00      	nop
 8011678:	200116dd 	.word	0x200116dd

0801167c <__sfp_lock_release>:
 801167c:	4801      	ldr	r0, [pc, #4]	@ (8011684 <__sfp_lock_release+0x8>)
 801167e:	f000 ba01 	b.w	8011a84 <__retarget_lock_release_recursive>
 8011682:	bf00      	nop
 8011684:	200116dd 	.word	0x200116dd

08011688 <__sinit>:
 8011688:	b510      	push	{r4, lr}
 801168a:	4604      	mov	r4, r0
 801168c:	f7ff fff0 	bl	8011670 <__sfp_lock_acquire>
 8011690:	6a23      	ldr	r3, [r4, #32]
 8011692:	b11b      	cbz	r3, 801169c <__sinit+0x14>
 8011694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011698:	f7ff bff0 	b.w	801167c <__sfp_lock_release>
 801169c:	4b04      	ldr	r3, [pc, #16]	@ (80116b0 <__sinit+0x28>)
 801169e:	6223      	str	r3, [r4, #32]
 80116a0:	4b04      	ldr	r3, [pc, #16]	@ (80116b4 <__sinit+0x2c>)
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d1f5      	bne.n	8011694 <__sinit+0xc>
 80116a8:	f7ff ffc4 	bl	8011634 <global_stdio_init.part.0>
 80116ac:	e7f2      	b.n	8011694 <__sinit+0xc>
 80116ae:	bf00      	nop
 80116b0:	080115f5 	.word	0x080115f5
 80116b4:	200116d4 	.word	0x200116d4

080116b8 <_fwalk_sglue>:
 80116b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116bc:	4607      	mov	r7, r0
 80116be:	4688      	mov	r8, r1
 80116c0:	4614      	mov	r4, r2
 80116c2:	2600      	movs	r6, #0
 80116c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80116c8:	f1b9 0901 	subs.w	r9, r9, #1
 80116cc:	d505      	bpl.n	80116da <_fwalk_sglue+0x22>
 80116ce:	6824      	ldr	r4, [r4, #0]
 80116d0:	2c00      	cmp	r4, #0
 80116d2:	d1f7      	bne.n	80116c4 <_fwalk_sglue+0xc>
 80116d4:	4630      	mov	r0, r6
 80116d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116da:	89ab      	ldrh	r3, [r5, #12]
 80116dc:	2b01      	cmp	r3, #1
 80116de:	d907      	bls.n	80116f0 <_fwalk_sglue+0x38>
 80116e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80116e4:	3301      	adds	r3, #1
 80116e6:	d003      	beq.n	80116f0 <_fwalk_sglue+0x38>
 80116e8:	4629      	mov	r1, r5
 80116ea:	4638      	mov	r0, r7
 80116ec:	47c0      	blx	r8
 80116ee:	4306      	orrs	r6, r0
 80116f0:	3568      	adds	r5, #104	@ 0x68
 80116f2:	e7e9      	b.n	80116c8 <_fwalk_sglue+0x10>

080116f4 <siprintf>:
 80116f4:	b40e      	push	{r1, r2, r3}
 80116f6:	b510      	push	{r4, lr}
 80116f8:	b09d      	sub	sp, #116	@ 0x74
 80116fa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80116fc:	9002      	str	r0, [sp, #8]
 80116fe:	9006      	str	r0, [sp, #24]
 8011700:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011704:	480a      	ldr	r0, [pc, #40]	@ (8011730 <siprintf+0x3c>)
 8011706:	9107      	str	r1, [sp, #28]
 8011708:	9104      	str	r1, [sp, #16]
 801170a:	490a      	ldr	r1, [pc, #40]	@ (8011734 <siprintf+0x40>)
 801170c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011710:	9105      	str	r1, [sp, #20]
 8011712:	2400      	movs	r4, #0
 8011714:	a902      	add	r1, sp, #8
 8011716:	6800      	ldr	r0, [r0, #0]
 8011718:	9301      	str	r3, [sp, #4]
 801171a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801171c:	f001 fa9a 	bl	8012c54 <_svfiprintf_r>
 8011720:	9b02      	ldr	r3, [sp, #8]
 8011722:	701c      	strb	r4, [r3, #0]
 8011724:	b01d      	add	sp, #116	@ 0x74
 8011726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801172a:	b003      	add	sp, #12
 801172c:	4770      	bx	lr
 801172e:	bf00      	nop
 8011730:	200003d4 	.word	0x200003d4
 8011734:	ffff0208 	.word	0xffff0208

08011738 <__sread>:
 8011738:	b510      	push	{r4, lr}
 801173a:	460c      	mov	r4, r1
 801173c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011740:	f000 f940 	bl	80119c4 <_read_r>
 8011744:	2800      	cmp	r0, #0
 8011746:	bfab      	itete	ge
 8011748:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801174a:	89a3      	ldrhlt	r3, [r4, #12]
 801174c:	181b      	addge	r3, r3, r0
 801174e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011752:	bfac      	ite	ge
 8011754:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011756:	81a3      	strhlt	r3, [r4, #12]
 8011758:	bd10      	pop	{r4, pc}

0801175a <__swrite>:
 801175a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801175e:	461f      	mov	r7, r3
 8011760:	898b      	ldrh	r3, [r1, #12]
 8011762:	05db      	lsls	r3, r3, #23
 8011764:	4605      	mov	r5, r0
 8011766:	460c      	mov	r4, r1
 8011768:	4616      	mov	r6, r2
 801176a:	d505      	bpl.n	8011778 <__swrite+0x1e>
 801176c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011770:	2302      	movs	r3, #2
 8011772:	2200      	movs	r2, #0
 8011774:	f000 f914 	bl	80119a0 <_lseek_r>
 8011778:	89a3      	ldrh	r3, [r4, #12]
 801177a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801177e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011782:	81a3      	strh	r3, [r4, #12]
 8011784:	4632      	mov	r2, r6
 8011786:	463b      	mov	r3, r7
 8011788:	4628      	mov	r0, r5
 801178a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801178e:	f000 b93b 	b.w	8011a08 <_write_r>

08011792 <__sseek>:
 8011792:	b510      	push	{r4, lr}
 8011794:	460c      	mov	r4, r1
 8011796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801179a:	f000 f901 	bl	80119a0 <_lseek_r>
 801179e:	1c43      	adds	r3, r0, #1
 80117a0:	89a3      	ldrh	r3, [r4, #12]
 80117a2:	bf15      	itete	ne
 80117a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80117a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80117aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80117ae:	81a3      	strheq	r3, [r4, #12]
 80117b0:	bf18      	it	ne
 80117b2:	81a3      	strhne	r3, [r4, #12]
 80117b4:	bd10      	pop	{r4, pc}

080117b6 <__sclose>:
 80117b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117ba:	f000 b883 	b.w	80118c4 <_close_r>

080117be <memset>:
 80117be:	4402      	add	r2, r0
 80117c0:	4603      	mov	r3, r0
 80117c2:	4293      	cmp	r3, r2
 80117c4:	d100      	bne.n	80117c8 <memset+0xa>
 80117c6:	4770      	bx	lr
 80117c8:	f803 1b01 	strb.w	r1, [r3], #1
 80117cc:	e7f9      	b.n	80117c2 <memset+0x4>

080117ce <strchr>:
 80117ce:	b2c9      	uxtb	r1, r1
 80117d0:	4603      	mov	r3, r0
 80117d2:	4618      	mov	r0, r3
 80117d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117d8:	b112      	cbz	r2, 80117e0 <strchr+0x12>
 80117da:	428a      	cmp	r2, r1
 80117dc:	d1f9      	bne.n	80117d2 <strchr+0x4>
 80117de:	4770      	bx	lr
 80117e0:	2900      	cmp	r1, #0
 80117e2:	bf18      	it	ne
 80117e4:	2000      	movne	r0, #0
 80117e6:	4770      	bx	lr

080117e8 <strncmp>:
 80117e8:	b510      	push	{r4, lr}
 80117ea:	b16a      	cbz	r2, 8011808 <strncmp+0x20>
 80117ec:	3901      	subs	r1, #1
 80117ee:	1884      	adds	r4, r0, r2
 80117f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80117f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80117f8:	429a      	cmp	r2, r3
 80117fa:	d103      	bne.n	8011804 <strncmp+0x1c>
 80117fc:	42a0      	cmp	r0, r4
 80117fe:	d001      	beq.n	8011804 <strncmp+0x1c>
 8011800:	2a00      	cmp	r2, #0
 8011802:	d1f5      	bne.n	80117f0 <strncmp+0x8>
 8011804:	1ad0      	subs	r0, r2, r3
 8011806:	bd10      	pop	{r4, pc}
 8011808:	4610      	mov	r0, r2
 801180a:	e7fc      	b.n	8011806 <strncmp+0x1e>

0801180c <strtok>:
 801180c:	4b16      	ldr	r3, [pc, #88]	@ (8011868 <strtok+0x5c>)
 801180e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011812:	681f      	ldr	r7, [r3, #0]
 8011814:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8011816:	4605      	mov	r5, r0
 8011818:	460e      	mov	r6, r1
 801181a:	b9ec      	cbnz	r4, 8011858 <strtok+0x4c>
 801181c:	2050      	movs	r0, #80	@ 0x50
 801181e:	f7fe ff55 	bl	80106cc <malloc>
 8011822:	4602      	mov	r2, r0
 8011824:	6478      	str	r0, [r7, #68]	@ 0x44
 8011826:	b920      	cbnz	r0, 8011832 <strtok+0x26>
 8011828:	4b10      	ldr	r3, [pc, #64]	@ (801186c <strtok+0x60>)
 801182a:	4811      	ldr	r0, [pc, #68]	@ (8011870 <strtok+0x64>)
 801182c:	215b      	movs	r1, #91	@ 0x5b
 801182e:	f000 f94b 	bl	8011ac8 <__assert_func>
 8011832:	e9c0 4400 	strd	r4, r4, [r0]
 8011836:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801183a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801183e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8011842:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8011846:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801184a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801184e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8011852:	6184      	str	r4, [r0, #24]
 8011854:	7704      	strb	r4, [r0, #28]
 8011856:	6244      	str	r4, [r0, #36]	@ 0x24
 8011858:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801185a:	4631      	mov	r1, r6
 801185c:	4628      	mov	r0, r5
 801185e:	2301      	movs	r3, #1
 8011860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011864:	f000 b806 	b.w	8011874 <__strtok_r>
 8011868:	200003d4 	.word	0x200003d4
 801186c:	080143e6 	.word	0x080143e6
 8011870:	080143fd 	.word	0x080143fd

08011874 <__strtok_r>:
 8011874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011876:	4604      	mov	r4, r0
 8011878:	b908      	cbnz	r0, 801187e <__strtok_r+0xa>
 801187a:	6814      	ldr	r4, [r2, #0]
 801187c:	b144      	cbz	r4, 8011890 <__strtok_r+0x1c>
 801187e:	4620      	mov	r0, r4
 8011880:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011884:	460f      	mov	r7, r1
 8011886:	f817 6b01 	ldrb.w	r6, [r7], #1
 801188a:	b91e      	cbnz	r6, 8011894 <__strtok_r+0x20>
 801188c:	b965      	cbnz	r5, 80118a8 <__strtok_r+0x34>
 801188e:	6015      	str	r5, [r2, #0]
 8011890:	2000      	movs	r0, #0
 8011892:	e005      	b.n	80118a0 <__strtok_r+0x2c>
 8011894:	42b5      	cmp	r5, r6
 8011896:	d1f6      	bne.n	8011886 <__strtok_r+0x12>
 8011898:	2b00      	cmp	r3, #0
 801189a:	d1f0      	bne.n	801187e <__strtok_r+0xa>
 801189c:	6014      	str	r4, [r2, #0]
 801189e:	7003      	strb	r3, [r0, #0]
 80118a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118a2:	461c      	mov	r4, r3
 80118a4:	e00c      	b.n	80118c0 <__strtok_r+0x4c>
 80118a6:	b91d      	cbnz	r5, 80118b0 <__strtok_r+0x3c>
 80118a8:	4627      	mov	r7, r4
 80118aa:	f814 3b01 	ldrb.w	r3, [r4], #1
 80118ae:	460e      	mov	r6, r1
 80118b0:	f816 5b01 	ldrb.w	r5, [r6], #1
 80118b4:	42ab      	cmp	r3, r5
 80118b6:	d1f6      	bne.n	80118a6 <__strtok_r+0x32>
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d0f2      	beq.n	80118a2 <__strtok_r+0x2e>
 80118bc:	2300      	movs	r3, #0
 80118be:	703b      	strb	r3, [r7, #0]
 80118c0:	6014      	str	r4, [r2, #0]
 80118c2:	e7ed      	b.n	80118a0 <__strtok_r+0x2c>

080118c4 <_close_r>:
 80118c4:	b538      	push	{r3, r4, r5, lr}
 80118c6:	4d06      	ldr	r5, [pc, #24]	@ (80118e0 <_close_r+0x1c>)
 80118c8:	2300      	movs	r3, #0
 80118ca:	4604      	mov	r4, r0
 80118cc:	4608      	mov	r0, r1
 80118ce:	602b      	str	r3, [r5, #0]
 80118d0:	f7f1 fed0 	bl	8003674 <_close>
 80118d4:	1c43      	adds	r3, r0, #1
 80118d6:	d102      	bne.n	80118de <_close_r+0x1a>
 80118d8:	682b      	ldr	r3, [r5, #0]
 80118da:	b103      	cbz	r3, 80118de <_close_r+0x1a>
 80118dc:	6023      	str	r3, [r4, #0]
 80118de:	bd38      	pop	{r3, r4, r5, pc}
 80118e0:	200116d8 	.word	0x200116d8

080118e4 <_reclaim_reent>:
 80118e4:	4b2d      	ldr	r3, [pc, #180]	@ (801199c <_reclaim_reent+0xb8>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	4283      	cmp	r3, r0
 80118ea:	b570      	push	{r4, r5, r6, lr}
 80118ec:	4604      	mov	r4, r0
 80118ee:	d053      	beq.n	8011998 <_reclaim_reent+0xb4>
 80118f0:	69c3      	ldr	r3, [r0, #28]
 80118f2:	b31b      	cbz	r3, 801193c <_reclaim_reent+0x58>
 80118f4:	68db      	ldr	r3, [r3, #12]
 80118f6:	b163      	cbz	r3, 8011912 <_reclaim_reent+0x2e>
 80118f8:	2500      	movs	r5, #0
 80118fa:	69e3      	ldr	r3, [r4, #28]
 80118fc:	68db      	ldr	r3, [r3, #12]
 80118fe:	5959      	ldr	r1, [r3, r5]
 8011900:	b9b1      	cbnz	r1, 8011930 <_reclaim_reent+0x4c>
 8011902:	3504      	adds	r5, #4
 8011904:	2d80      	cmp	r5, #128	@ 0x80
 8011906:	d1f8      	bne.n	80118fa <_reclaim_reent+0x16>
 8011908:	69e3      	ldr	r3, [r4, #28]
 801190a:	4620      	mov	r0, r4
 801190c:	68d9      	ldr	r1, [r3, #12]
 801190e:	f000 f8f9 	bl	8011b04 <_free_r>
 8011912:	69e3      	ldr	r3, [r4, #28]
 8011914:	6819      	ldr	r1, [r3, #0]
 8011916:	b111      	cbz	r1, 801191e <_reclaim_reent+0x3a>
 8011918:	4620      	mov	r0, r4
 801191a:	f000 f8f3 	bl	8011b04 <_free_r>
 801191e:	69e3      	ldr	r3, [r4, #28]
 8011920:	689d      	ldr	r5, [r3, #8]
 8011922:	b15d      	cbz	r5, 801193c <_reclaim_reent+0x58>
 8011924:	4629      	mov	r1, r5
 8011926:	4620      	mov	r0, r4
 8011928:	682d      	ldr	r5, [r5, #0]
 801192a:	f000 f8eb 	bl	8011b04 <_free_r>
 801192e:	e7f8      	b.n	8011922 <_reclaim_reent+0x3e>
 8011930:	680e      	ldr	r6, [r1, #0]
 8011932:	4620      	mov	r0, r4
 8011934:	f000 f8e6 	bl	8011b04 <_free_r>
 8011938:	4631      	mov	r1, r6
 801193a:	e7e1      	b.n	8011900 <_reclaim_reent+0x1c>
 801193c:	6961      	ldr	r1, [r4, #20]
 801193e:	b111      	cbz	r1, 8011946 <_reclaim_reent+0x62>
 8011940:	4620      	mov	r0, r4
 8011942:	f000 f8df 	bl	8011b04 <_free_r>
 8011946:	69e1      	ldr	r1, [r4, #28]
 8011948:	b111      	cbz	r1, 8011950 <_reclaim_reent+0x6c>
 801194a:	4620      	mov	r0, r4
 801194c:	f000 f8da 	bl	8011b04 <_free_r>
 8011950:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011952:	b111      	cbz	r1, 801195a <_reclaim_reent+0x76>
 8011954:	4620      	mov	r0, r4
 8011956:	f000 f8d5 	bl	8011b04 <_free_r>
 801195a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801195c:	b111      	cbz	r1, 8011964 <_reclaim_reent+0x80>
 801195e:	4620      	mov	r0, r4
 8011960:	f000 f8d0 	bl	8011b04 <_free_r>
 8011964:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8011966:	b111      	cbz	r1, 801196e <_reclaim_reent+0x8a>
 8011968:	4620      	mov	r0, r4
 801196a:	f000 f8cb 	bl	8011b04 <_free_r>
 801196e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011970:	b111      	cbz	r1, 8011978 <_reclaim_reent+0x94>
 8011972:	4620      	mov	r0, r4
 8011974:	f000 f8c6 	bl	8011b04 <_free_r>
 8011978:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801197a:	b111      	cbz	r1, 8011982 <_reclaim_reent+0x9e>
 801197c:	4620      	mov	r0, r4
 801197e:	f000 f8c1 	bl	8011b04 <_free_r>
 8011982:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011984:	b111      	cbz	r1, 801198c <_reclaim_reent+0xa8>
 8011986:	4620      	mov	r0, r4
 8011988:	f000 f8bc 	bl	8011b04 <_free_r>
 801198c:	6a23      	ldr	r3, [r4, #32]
 801198e:	b11b      	cbz	r3, 8011998 <_reclaim_reent+0xb4>
 8011990:	4620      	mov	r0, r4
 8011992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011996:	4718      	bx	r3
 8011998:	bd70      	pop	{r4, r5, r6, pc}
 801199a:	bf00      	nop
 801199c:	200003d4 	.word	0x200003d4

080119a0 <_lseek_r>:
 80119a0:	b538      	push	{r3, r4, r5, lr}
 80119a2:	4d07      	ldr	r5, [pc, #28]	@ (80119c0 <_lseek_r+0x20>)
 80119a4:	4604      	mov	r4, r0
 80119a6:	4608      	mov	r0, r1
 80119a8:	4611      	mov	r1, r2
 80119aa:	2200      	movs	r2, #0
 80119ac:	602a      	str	r2, [r5, #0]
 80119ae:	461a      	mov	r2, r3
 80119b0:	f7f1 fe87 	bl	80036c2 <_lseek>
 80119b4:	1c43      	adds	r3, r0, #1
 80119b6:	d102      	bne.n	80119be <_lseek_r+0x1e>
 80119b8:	682b      	ldr	r3, [r5, #0]
 80119ba:	b103      	cbz	r3, 80119be <_lseek_r+0x1e>
 80119bc:	6023      	str	r3, [r4, #0]
 80119be:	bd38      	pop	{r3, r4, r5, pc}
 80119c0:	200116d8 	.word	0x200116d8

080119c4 <_read_r>:
 80119c4:	b538      	push	{r3, r4, r5, lr}
 80119c6:	4d07      	ldr	r5, [pc, #28]	@ (80119e4 <_read_r+0x20>)
 80119c8:	4604      	mov	r4, r0
 80119ca:	4608      	mov	r0, r1
 80119cc:	4611      	mov	r1, r2
 80119ce:	2200      	movs	r2, #0
 80119d0:	602a      	str	r2, [r5, #0]
 80119d2:	461a      	mov	r2, r3
 80119d4:	f7f1 fe15 	bl	8003602 <_read>
 80119d8:	1c43      	adds	r3, r0, #1
 80119da:	d102      	bne.n	80119e2 <_read_r+0x1e>
 80119dc:	682b      	ldr	r3, [r5, #0]
 80119de:	b103      	cbz	r3, 80119e2 <_read_r+0x1e>
 80119e0:	6023      	str	r3, [r4, #0]
 80119e2:	bd38      	pop	{r3, r4, r5, pc}
 80119e4:	200116d8 	.word	0x200116d8

080119e8 <_sbrk_r>:
 80119e8:	b538      	push	{r3, r4, r5, lr}
 80119ea:	4d06      	ldr	r5, [pc, #24]	@ (8011a04 <_sbrk_r+0x1c>)
 80119ec:	2300      	movs	r3, #0
 80119ee:	4604      	mov	r4, r0
 80119f0:	4608      	mov	r0, r1
 80119f2:	602b      	str	r3, [r5, #0]
 80119f4:	f7f1 fe72 	bl	80036dc <_sbrk>
 80119f8:	1c43      	adds	r3, r0, #1
 80119fa:	d102      	bne.n	8011a02 <_sbrk_r+0x1a>
 80119fc:	682b      	ldr	r3, [r5, #0]
 80119fe:	b103      	cbz	r3, 8011a02 <_sbrk_r+0x1a>
 8011a00:	6023      	str	r3, [r4, #0]
 8011a02:	bd38      	pop	{r3, r4, r5, pc}
 8011a04:	200116d8 	.word	0x200116d8

08011a08 <_write_r>:
 8011a08:	b538      	push	{r3, r4, r5, lr}
 8011a0a:	4d07      	ldr	r5, [pc, #28]	@ (8011a28 <_write_r+0x20>)
 8011a0c:	4604      	mov	r4, r0
 8011a0e:	4608      	mov	r0, r1
 8011a10:	4611      	mov	r1, r2
 8011a12:	2200      	movs	r2, #0
 8011a14:	602a      	str	r2, [r5, #0]
 8011a16:	461a      	mov	r2, r3
 8011a18:	f7f1 fe10 	bl	800363c <_write>
 8011a1c:	1c43      	adds	r3, r0, #1
 8011a1e:	d102      	bne.n	8011a26 <_write_r+0x1e>
 8011a20:	682b      	ldr	r3, [r5, #0]
 8011a22:	b103      	cbz	r3, 8011a26 <_write_r+0x1e>
 8011a24:	6023      	str	r3, [r4, #0]
 8011a26:	bd38      	pop	{r3, r4, r5, pc}
 8011a28:	200116d8 	.word	0x200116d8

08011a2c <__errno>:
 8011a2c:	4b01      	ldr	r3, [pc, #4]	@ (8011a34 <__errno+0x8>)
 8011a2e:	6818      	ldr	r0, [r3, #0]
 8011a30:	4770      	bx	lr
 8011a32:	bf00      	nop
 8011a34:	200003d4 	.word	0x200003d4

08011a38 <__libc_init_array>:
 8011a38:	b570      	push	{r4, r5, r6, lr}
 8011a3a:	4d0d      	ldr	r5, [pc, #52]	@ (8011a70 <__libc_init_array+0x38>)
 8011a3c:	4c0d      	ldr	r4, [pc, #52]	@ (8011a74 <__libc_init_array+0x3c>)
 8011a3e:	1b64      	subs	r4, r4, r5
 8011a40:	10a4      	asrs	r4, r4, #2
 8011a42:	2600      	movs	r6, #0
 8011a44:	42a6      	cmp	r6, r4
 8011a46:	d109      	bne.n	8011a5c <__libc_init_array+0x24>
 8011a48:	4d0b      	ldr	r5, [pc, #44]	@ (8011a78 <__libc_init_array+0x40>)
 8011a4a:	4c0c      	ldr	r4, [pc, #48]	@ (8011a7c <__libc_init_array+0x44>)
 8011a4c:	f001 ff50 	bl	80138f0 <_init>
 8011a50:	1b64      	subs	r4, r4, r5
 8011a52:	10a4      	asrs	r4, r4, #2
 8011a54:	2600      	movs	r6, #0
 8011a56:	42a6      	cmp	r6, r4
 8011a58:	d105      	bne.n	8011a66 <__libc_init_array+0x2e>
 8011a5a:	bd70      	pop	{r4, r5, r6, pc}
 8011a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a60:	4798      	blx	r3
 8011a62:	3601      	adds	r6, #1
 8011a64:	e7ee      	b.n	8011a44 <__libc_init_array+0xc>
 8011a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a6a:	4798      	blx	r3
 8011a6c:	3601      	adds	r6, #1
 8011a6e:	e7f2      	b.n	8011a56 <__libc_init_array+0x1e>
 8011a70:	080147f0 	.word	0x080147f0
 8011a74:	080147f0 	.word	0x080147f0
 8011a78:	080147f0 	.word	0x080147f0
 8011a7c:	080147f4 	.word	0x080147f4

08011a80 <__retarget_lock_init_recursive>:
 8011a80:	4770      	bx	lr

08011a82 <__retarget_lock_acquire_recursive>:
 8011a82:	4770      	bx	lr

08011a84 <__retarget_lock_release_recursive>:
 8011a84:	4770      	bx	lr

08011a86 <strcpy>:
 8011a86:	4603      	mov	r3, r0
 8011a88:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a8c:	f803 2b01 	strb.w	r2, [r3], #1
 8011a90:	2a00      	cmp	r2, #0
 8011a92:	d1f9      	bne.n	8011a88 <strcpy+0x2>
 8011a94:	4770      	bx	lr

08011a96 <memcpy>:
 8011a96:	440a      	add	r2, r1
 8011a98:	4291      	cmp	r1, r2
 8011a9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8011a9e:	d100      	bne.n	8011aa2 <memcpy+0xc>
 8011aa0:	4770      	bx	lr
 8011aa2:	b510      	push	{r4, lr}
 8011aa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011aa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011aac:	4291      	cmp	r1, r2
 8011aae:	d1f9      	bne.n	8011aa4 <memcpy+0xe>
 8011ab0:	bd10      	pop	{r4, pc}
 8011ab2:	0000      	movs	r0, r0
 8011ab4:	0000      	movs	r0, r0
	...

08011ab8 <nan>:
 8011ab8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011ac0 <nan+0x8>
 8011abc:	4770      	bx	lr
 8011abe:	bf00      	nop
 8011ac0:	00000000 	.word	0x00000000
 8011ac4:	7ff80000 	.word	0x7ff80000

08011ac8 <__assert_func>:
 8011ac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011aca:	4614      	mov	r4, r2
 8011acc:	461a      	mov	r2, r3
 8011ace:	4b09      	ldr	r3, [pc, #36]	@ (8011af4 <__assert_func+0x2c>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	4605      	mov	r5, r0
 8011ad4:	68d8      	ldr	r0, [r3, #12]
 8011ad6:	b14c      	cbz	r4, 8011aec <__assert_func+0x24>
 8011ad8:	4b07      	ldr	r3, [pc, #28]	@ (8011af8 <__assert_func+0x30>)
 8011ada:	9100      	str	r1, [sp, #0]
 8011adc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011ae0:	4906      	ldr	r1, [pc, #24]	@ (8011afc <__assert_func+0x34>)
 8011ae2:	462b      	mov	r3, r5
 8011ae4:	f001 fbea 	bl	80132bc <fiprintf>
 8011ae8:	f001 fc14 	bl	8013314 <abort>
 8011aec:	4b04      	ldr	r3, [pc, #16]	@ (8011b00 <__assert_func+0x38>)
 8011aee:	461c      	mov	r4, r3
 8011af0:	e7f3      	b.n	8011ada <__assert_func+0x12>
 8011af2:	bf00      	nop
 8011af4:	200003d4 	.word	0x200003d4
 8011af8:	0801445f 	.word	0x0801445f
 8011afc:	0801446c 	.word	0x0801446c
 8011b00:	0801449a 	.word	0x0801449a

08011b04 <_free_r>:
 8011b04:	b538      	push	{r3, r4, r5, lr}
 8011b06:	4605      	mov	r5, r0
 8011b08:	2900      	cmp	r1, #0
 8011b0a:	d041      	beq.n	8011b90 <_free_r+0x8c>
 8011b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b10:	1f0c      	subs	r4, r1, #4
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	bfb8      	it	lt
 8011b16:	18e4      	addlt	r4, r4, r3
 8011b18:	f7fe fe8a 	bl	8010830 <__malloc_lock>
 8011b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8011b94 <_free_r+0x90>)
 8011b1e:	6813      	ldr	r3, [r2, #0]
 8011b20:	b933      	cbnz	r3, 8011b30 <_free_r+0x2c>
 8011b22:	6063      	str	r3, [r4, #4]
 8011b24:	6014      	str	r4, [r2, #0]
 8011b26:	4628      	mov	r0, r5
 8011b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b2c:	f7fe be86 	b.w	801083c <__malloc_unlock>
 8011b30:	42a3      	cmp	r3, r4
 8011b32:	d908      	bls.n	8011b46 <_free_r+0x42>
 8011b34:	6820      	ldr	r0, [r4, #0]
 8011b36:	1821      	adds	r1, r4, r0
 8011b38:	428b      	cmp	r3, r1
 8011b3a:	bf01      	itttt	eq
 8011b3c:	6819      	ldreq	r1, [r3, #0]
 8011b3e:	685b      	ldreq	r3, [r3, #4]
 8011b40:	1809      	addeq	r1, r1, r0
 8011b42:	6021      	streq	r1, [r4, #0]
 8011b44:	e7ed      	b.n	8011b22 <_free_r+0x1e>
 8011b46:	461a      	mov	r2, r3
 8011b48:	685b      	ldr	r3, [r3, #4]
 8011b4a:	b10b      	cbz	r3, 8011b50 <_free_r+0x4c>
 8011b4c:	42a3      	cmp	r3, r4
 8011b4e:	d9fa      	bls.n	8011b46 <_free_r+0x42>
 8011b50:	6811      	ldr	r1, [r2, #0]
 8011b52:	1850      	adds	r0, r2, r1
 8011b54:	42a0      	cmp	r0, r4
 8011b56:	d10b      	bne.n	8011b70 <_free_r+0x6c>
 8011b58:	6820      	ldr	r0, [r4, #0]
 8011b5a:	4401      	add	r1, r0
 8011b5c:	1850      	adds	r0, r2, r1
 8011b5e:	4283      	cmp	r3, r0
 8011b60:	6011      	str	r1, [r2, #0]
 8011b62:	d1e0      	bne.n	8011b26 <_free_r+0x22>
 8011b64:	6818      	ldr	r0, [r3, #0]
 8011b66:	685b      	ldr	r3, [r3, #4]
 8011b68:	6053      	str	r3, [r2, #4]
 8011b6a:	4408      	add	r0, r1
 8011b6c:	6010      	str	r0, [r2, #0]
 8011b6e:	e7da      	b.n	8011b26 <_free_r+0x22>
 8011b70:	d902      	bls.n	8011b78 <_free_r+0x74>
 8011b72:	230c      	movs	r3, #12
 8011b74:	602b      	str	r3, [r5, #0]
 8011b76:	e7d6      	b.n	8011b26 <_free_r+0x22>
 8011b78:	6820      	ldr	r0, [r4, #0]
 8011b7a:	1821      	adds	r1, r4, r0
 8011b7c:	428b      	cmp	r3, r1
 8011b7e:	bf04      	itt	eq
 8011b80:	6819      	ldreq	r1, [r3, #0]
 8011b82:	685b      	ldreq	r3, [r3, #4]
 8011b84:	6063      	str	r3, [r4, #4]
 8011b86:	bf04      	itt	eq
 8011b88:	1809      	addeq	r1, r1, r0
 8011b8a:	6021      	streq	r1, [r4, #0]
 8011b8c:	6054      	str	r4, [r2, #4]
 8011b8e:	e7ca      	b.n	8011b26 <_free_r+0x22>
 8011b90:	bd38      	pop	{r3, r4, r5, pc}
 8011b92:	bf00      	nop
 8011b94:	20011598 	.word	0x20011598

08011b98 <rshift>:
 8011b98:	6903      	ldr	r3, [r0, #16]
 8011b9a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011b9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ba2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011ba6:	f100 0414 	add.w	r4, r0, #20
 8011baa:	dd45      	ble.n	8011c38 <rshift+0xa0>
 8011bac:	f011 011f 	ands.w	r1, r1, #31
 8011bb0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011bb4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011bb8:	d10c      	bne.n	8011bd4 <rshift+0x3c>
 8011bba:	f100 0710 	add.w	r7, r0, #16
 8011bbe:	4629      	mov	r1, r5
 8011bc0:	42b1      	cmp	r1, r6
 8011bc2:	d334      	bcc.n	8011c2e <rshift+0x96>
 8011bc4:	1a9b      	subs	r3, r3, r2
 8011bc6:	009b      	lsls	r3, r3, #2
 8011bc8:	1eea      	subs	r2, r5, #3
 8011bca:	4296      	cmp	r6, r2
 8011bcc:	bf38      	it	cc
 8011bce:	2300      	movcc	r3, #0
 8011bd0:	4423      	add	r3, r4
 8011bd2:	e015      	b.n	8011c00 <rshift+0x68>
 8011bd4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011bd8:	f1c1 0820 	rsb	r8, r1, #32
 8011bdc:	40cf      	lsrs	r7, r1
 8011bde:	f105 0e04 	add.w	lr, r5, #4
 8011be2:	46a1      	mov	r9, r4
 8011be4:	4576      	cmp	r6, lr
 8011be6:	46f4      	mov	ip, lr
 8011be8:	d815      	bhi.n	8011c16 <rshift+0x7e>
 8011bea:	1a9a      	subs	r2, r3, r2
 8011bec:	0092      	lsls	r2, r2, #2
 8011bee:	3a04      	subs	r2, #4
 8011bf0:	3501      	adds	r5, #1
 8011bf2:	42ae      	cmp	r6, r5
 8011bf4:	bf38      	it	cc
 8011bf6:	2200      	movcc	r2, #0
 8011bf8:	18a3      	adds	r3, r4, r2
 8011bfa:	50a7      	str	r7, [r4, r2]
 8011bfc:	b107      	cbz	r7, 8011c00 <rshift+0x68>
 8011bfe:	3304      	adds	r3, #4
 8011c00:	1b1a      	subs	r2, r3, r4
 8011c02:	42a3      	cmp	r3, r4
 8011c04:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011c08:	bf08      	it	eq
 8011c0a:	2300      	moveq	r3, #0
 8011c0c:	6102      	str	r2, [r0, #16]
 8011c0e:	bf08      	it	eq
 8011c10:	6143      	streq	r3, [r0, #20]
 8011c12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c16:	f8dc c000 	ldr.w	ip, [ip]
 8011c1a:	fa0c fc08 	lsl.w	ip, ip, r8
 8011c1e:	ea4c 0707 	orr.w	r7, ip, r7
 8011c22:	f849 7b04 	str.w	r7, [r9], #4
 8011c26:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011c2a:	40cf      	lsrs	r7, r1
 8011c2c:	e7da      	b.n	8011be4 <rshift+0x4c>
 8011c2e:	f851 cb04 	ldr.w	ip, [r1], #4
 8011c32:	f847 cf04 	str.w	ip, [r7, #4]!
 8011c36:	e7c3      	b.n	8011bc0 <rshift+0x28>
 8011c38:	4623      	mov	r3, r4
 8011c3a:	e7e1      	b.n	8011c00 <rshift+0x68>

08011c3c <__hexdig_fun>:
 8011c3c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011c40:	2b09      	cmp	r3, #9
 8011c42:	d802      	bhi.n	8011c4a <__hexdig_fun+0xe>
 8011c44:	3820      	subs	r0, #32
 8011c46:	b2c0      	uxtb	r0, r0
 8011c48:	4770      	bx	lr
 8011c4a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011c4e:	2b05      	cmp	r3, #5
 8011c50:	d801      	bhi.n	8011c56 <__hexdig_fun+0x1a>
 8011c52:	3847      	subs	r0, #71	@ 0x47
 8011c54:	e7f7      	b.n	8011c46 <__hexdig_fun+0xa>
 8011c56:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011c5a:	2b05      	cmp	r3, #5
 8011c5c:	d801      	bhi.n	8011c62 <__hexdig_fun+0x26>
 8011c5e:	3827      	subs	r0, #39	@ 0x27
 8011c60:	e7f1      	b.n	8011c46 <__hexdig_fun+0xa>
 8011c62:	2000      	movs	r0, #0
 8011c64:	4770      	bx	lr
	...

08011c68 <__gethex>:
 8011c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c6c:	b085      	sub	sp, #20
 8011c6e:	468a      	mov	sl, r1
 8011c70:	9302      	str	r3, [sp, #8]
 8011c72:	680b      	ldr	r3, [r1, #0]
 8011c74:	9001      	str	r0, [sp, #4]
 8011c76:	4690      	mov	r8, r2
 8011c78:	1c9c      	adds	r4, r3, #2
 8011c7a:	46a1      	mov	r9, r4
 8011c7c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011c80:	2830      	cmp	r0, #48	@ 0x30
 8011c82:	d0fa      	beq.n	8011c7a <__gethex+0x12>
 8011c84:	eba9 0303 	sub.w	r3, r9, r3
 8011c88:	f1a3 0b02 	sub.w	fp, r3, #2
 8011c8c:	f7ff ffd6 	bl	8011c3c <__hexdig_fun>
 8011c90:	4605      	mov	r5, r0
 8011c92:	2800      	cmp	r0, #0
 8011c94:	d168      	bne.n	8011d68 <__gethex+0x100>
 8011c96:	49a0      	ldr	r1, [pc, #640]	@ (8011f18 <__gethex+0x2b0>)
 8011c98:	2201      	movs	r2, #1
 8011c9a:	4648      	mov	r0, r9
 8011c9c:	f7ff fda4 	bl	80117e8 <strncmp>
 8011ca0:	4607      	mov	r7, r0
 8011ca2:	2800      	cmp	r0, #0
 8011ca4:	d167      	bne.n	8011d76 <__gethex+0x10e>
 8011ca6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011caa:	4626      	mov	r6, r4
 8011cac:	f7ff ffc6 	bl	8011c3c <__hexdig_fun>
 8011cb0:	2800      	cmp	r0, #0
 8011cb2:	d062      	beq.n	8011d7a <__gethex+0x112>
 8011cb4:	4623      	mov	r3, r4
 8011cb6:	7818      	ldrb	r0, [r3, #0]
 8011cb8:	2830      	cmp	r0, #48	@ 0x30
 8011cba:	4699      	mov	r9, r3
 8011cbc:	f103 0301 	add.w	r3, r3, #1
 8011cc0:	d0f9      	beq.n	8011cb6 <__gethex+0x4e>
 8011cc2:	f7ff ffbb 	bl	8011c3c <__hexdig_fun>
 8011cc6:	fab0 f580 	clz	r5, r0
 8011cca:	096d      	lsrs	r5, r5, #5
 8011ccc:	f04f 0b01 	mov.w	fp, #1
 8011cd0:	464a      	mov	r2, r9
 8011cd2:	4616      	mov	r6, r2
 8011cd4:	3201      	adds	r2, #1
 8011cd6:	7830      	ldrb	r0, [r6, #0]
 8011cd8:	f7ff ffb0 	bl	8011c3c <__hexdig_fun>
 8011cdc:	2800      	cmp	r0, #0
 8011cde:	d1f8      	bne.n	8011cd2 <__gethex+0x6a>
 8011ce0:	498d      	ldr	r1, [pc, #564]	@ (8011f18 <__gethex+0x2b0>)
 8011ce2:	2201      	movs	r2, #1
 8011ce4:	4630      	mov	r0, r6
 8011ce6:	f7ff fd7f 	bl	80117e8 <strncmp>
 8011cea:	2800      	cmp	r0, #0
 8011cec:	d13f      	bne.n	8011d6e <__gethex+0x106>
 8011cee:	b944      	cbnz	r4, 8011d02 <__gethex+0x9a>
 8011cf0:	1c74      	adds	r4, r6, #1
 8011cf2:	4622      	mov	r2, r4
 8011cf4:	4616      	mov	r6, r2
 8011cf6:	3201      	adds	r2, #1
 8011cf8:	7830      	ldrb	r0, [r6, #0]
 8011cfa:	f7ff ff9f 	bl	8011c3c <__hexdig_fun>
 8011cfe:	2800      	cmp	r0, #0
 8011d00:	d1f8      	bne.n	8011cf4 <__gethex+0x8c>
 8011d02:	1ba4      	subs	r4, r4, r6
 8011d04:	00a7      	lsls	r7, r4, #2
 8011d06:	7833      	ldrb	r3, [r6, #0]
 8011d08:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011d0c:	2b50      	cmp	r3, #80	@ 0x50
 8011d0e:	d13e      	bne.n	8011d8e <__gethex+0x126>
 8011d10:	7873      	ldrb	r3, [r6, #1]
 8011d12:	2b2b      	cmp	r3, #43	@ 0x2b
 8011d14:	d033      	beq.n	8011d7e <__gethex+0x116>
 8011d16:	2b2d      	cmp	r3, #45	@ 0x2d
 8011d18:	d034      	beq.n	8011d84 <__gethex+0x11c>
 8011d1a:	1c71      	adds	r1, r6, #1
 8011d1c:	2400      	movs	r4, #0
 8011d1e:	7808      	ldrb	r0, [r1, #0]
 8011d20:	f7ff ff8c 	bl	8011c3c <__hexdig_fun>
 8011d24:	1e43      	subs	r3, r0, #1
 8011d26:	b2db      	uxtb	r3, r3
 8011d28:	2b18      	cmp	r3, #24
 8011d2a:	d830      	bhi.n	8011d8e <__gethex+0x126>
 8011d2c:	f1a0 0210 	sub.w	r2, r0, #16
 8011d30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011d34:	f7ff ff82 	bl	8011c3c <__hexdig_fun>
 8011d38:	f100 3cff 	add.w	ip, r0, #4294967295
 8011d3c:	fa5f fc8c 	uxtb.w	ip, ip
 8011d40:	f1bc 0f18 	cmp.w	ip, #24
 8011d44:	f04f 030a 	mov.w	r3, #10
 8011d48:	d91e      	bls.n	8011d88 <__gethex+0x120>
 8011d4a:	b104      	cbz	r4, 8011d4e <__gethex+0xe6>
 8011d4c:	4252      	negs	r2, r2
 8011d4e:	4417      	add	r7, r2
 8011d50:	f8ca 1000 	str.w	r1, [sl]
 8011d54:	b1ed      	cbz	r5, 8011d92 <__gethex+0x12a>
 8011d56:	f1bb 0f00 	cmp.w	fp, #0
 8011d5a:	bf0c      	ite	eq
 8011d5c:	2506      	moveq	r5, #6
 8011d5e:	2500      	movne	r5, #0
 8011d60:	4628      	mov	r0, r5
 8011d62:	b005      	add	sp, #20
 8011d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d68:	2500      	movs	r5, #0
 8011d6a:	462c      	mov	r4, r5
 8011d6c:	e7b0      	b.n	8011cd0 <__gethex+0x68>
 8011d6e:	2c00      	cmp	r4, #0
 8011d70:	d1c7      	bne.n	8011d02 <__gethex+0x9a>
 8011d72:	4627      	mov	r7, r4
 8011d74:	e7c7      	b.n	8011d06 <__gethex+0x9e>
 8011d76:	464e      	mov	r6, r9
 8011d78:	462f      	mov	r7, r5
 8011d7a:	2501      	movs	r5, #1
 8011d7c:	e7c3      	b.n	8011d06 <__gethex+0x9e>
 8011d7e:	2400      	movs	r4, #0
 8011d80:	1cb1      	adds	r1, r6, #2
 8011d82:	e7cc      	b.n	8011d1e <__gethex+0xb6>
 8011d84:	2401      	movs	r4, #1
 8011d86:	e7fb      	b.n	8011d80 <__gethex+0x118>
 8011d88:	fb03 0002 	mla	r0, r3, r2, r0
 8011d8c:	e7ce      	b.n	8011d2c <__gethex+0xc4>
 8011d8e:	4631      	mov	r1, r6
 8011d90:	e7de      	b.n	8011d50 <__gethex+0xe8>
 8011d92:	eba6 0309 	sub.w	r3, r6, r9
 8011d96:	3b01      	subs	r3, #1
 8011d98:	4629      	mov	r1, r5
 8011d9a:	2b07      	cmp	r3, #7
 8011d9c:	dc0a      	bgt.n	8011db4 <__gethex+0x14c>
 8011d9e:	9801      	ldr	r0, [sp, #4]
 8011da0:	f000 fa46 	bl	8012230 <_Balloc>
 8011da4:	4604      	mov	r4, r0
 8011da6:	b940      	cbnz	r0, 8011dba <__gethex+0x152>
 8011da8:	4b5c      	ldr	r3, [pc, #368]	@ (8011f1c <__gethex+0x2b4>)
 8011daa:	4602      	mov	r2, r0
 8011dac:	21e4      	movs	r1, #228	@ 0xe4
 8011dae:	485c      	ldr	r0, [pc, #368]	@ (8011f20 <__gethex+0x2b8>)
 8011db0:	f7ff fe8a 	bl	8011ac8 <__assert_func>
 8011db4:	3101      	adds	r1, #1
 8011db6:	105b      	asrs	r3, r3, #1
 8011db8:	e7ef      	b.n	8011d9a <__gethex+0x132>
 8011dba:	f100 0a14 	add.w	sl, r0, #20
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	4655      	mov	r5, sl
 8011dc2:	469b      	mov	fp, r3
 8011dc4:	45b1      	cmp	r9, r6
 8011dc6:	d337      	bcc.n	8011e38 <__gethex+0x1d0>
 8011dc8:	f845 bb04 	str.w	fp, [r5], #4
 8011dcc:	eba5 050a 	sub.w	r5, r5, sl
 8011dd0:	10ad      	asrs	r5, r5, #2
 8011dd2:	6125      	str	r5, [r4, #16]
 8011dd4:	4658      	mov	r0, fp
 8011dd6:	f000 fb1d 	bl	8012414 <__hi0bits>
 8011dda:	016d      	lsls	r5, r5, #5
 8011ddc:	f8d8 6000 	ldr.w	r6, [r8]
 8011de0:	1a2d      	subs	r5, r5, r0
 8011de2:	42b5      	cmp	r5, r6
 8011de4:	dd54      	ble.n	8011e90 <__gethex+0x228>
 8011de6:	1bad      	subs	r5, r5, r6
 8011de8:	4629      	mov	r1, r5
 8011dea:	4620      	mov	r0, r4
 8011dec:	f000 fea9 	bl	8012b42 <__any_on>
 8011df0:	4681      	mov	r9, r0
 8011df2:	b178      	cbz	r0, 8011e14 <__gethex+0x1ac>
 8011df4:	1e6b      	subs	r3, r5, #1
 8011df6:	1159      	asrs	r1, r3, #5
 8011df8:	f003 021f 	and.w	r2, r3, #31
 8011dfc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011e00:	f04f 0901 	mov.w	r9, #1
 8011e04:	fa09 f202 	lsl.w	r2, r9, r2
 8011e08:	420a      	tst	r2, r1
 8011e0a:	d003      	beq.n	8011e14 <__gethex+0x1ac>
 8011e0c:	454b      	cmp	r3, r9
 8011e0e:	dc36      	bgt.n	8011e7e <__gethex+0x216>
 8011e10:	f04f 0902 	mov.w	r9, #2
 8011e14:	4629      	mov	r1, r5
 8011e16:	4620      	mov	r0, r4
 8011e18:	f7ff febe 	bl	8011b98 <rshift>
 8011e1c:	442f      	add	r7, r5
 8011e1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011e22:	42bb      	cmp	r3, r7
 8011e24:	da42      	bge.n	8011eac <__gethex+0x244>
 8011e26:	9801      	ldr	r0, [sp, #4]
 8011e28:	4621      	mov	r1, r4
 8011e2a:	f000 fa41 	bl	80122b0 <_Bfree>
 8011e2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e30:	2300      	movs	r3, #0
 8011e32:	6013      	str	r3, [r2, #0]
 8011e34:	25a3      	movs	r5, #163	@ 0xa3
 8011e36:	e793      	b.n	8011d60 <__gethex+0xf8>
 8011e38:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011e3c:	2a2e      	cmp	r2, #46	@ 0x2e
 8011e3e:	d012      	beq.n	8011e66 <__gethex+0x1fe>
 8011e40:	2b20      	cmp	r3, #32
 8011e42:	d104      	bne.n	8011e4e <__gethex+0x1e6>
 8011e44:	f845 bb04 	str.w	fp, [r5], #4
 8011e48:	f04f 0b00 	mov.w	fp, #0
 8011e4c:	465b      	mov	r3, fp
 8011e4e:	7830      	ldrb	r0, [r6, #0]
 8011e50:	9303      	str	r3, [sp, #12]
 8011e52:	f7ff fef3 	bl	8011c3c <__hexdig_fun>
 8011e56:	9b03      	ldr	r3, [sp, #12]
 8011e58:	f000 000f 	and.w	r0, r0, #15
 8011e5c:	4098      	lsls	r0, r3
 8011e5e:	ea4b 0b00 	orr.w	fp, fp, r0
 8011e62:	3304      	adds	r3, #4
 8011e64:	e7ae      	b.n	8011dc4 <__gethex+0x15c>
 8011e66:	45b1      	cmp	r9, r6
 8011e68:	d8ea      	bhi.n	8011e40 <__gethex+0x1d8>
 8011e6a:	492b      	ldr	r1, [pc, #172]	@ (8011f18 <__gethex+0x2b0>)
 8011e6c:	9303      	str	r3, [sp, #12]
 8011e6e:	2201      	movs	r2, #1
 8011e70:	4630      	mov	r0, r6
 8011e72:	f7ff fcb9 	bl	80117e8 <strncmp>
 8011e76:	9b03      	ldr	r3, [sp, #12]
 8011e78:	2800      	cmp	r0, #0
 8011e7a:	d1e1      	bne.n	8011e40 <__gethex+0x1d8>
 8011e7c:	e7a2      	b.n	8011dc4 <__gethex+0x15c>
 8011e7e:	1ea9      	subs	r1, r5, #2
 8011e80:	4620      	mov	r0, r4
 8011e82:	f000 fe5e 	bl	8012b42 <__any_on>
 8011e86:	2800      	cmp	r0, #0
 8011e88:	d0c2      	beq.n	8011e10 <__gethex+0x1a8>
 8011e8a:	f04f 0903 	mov.w	r9, #3
 8011e8e:	e7c1      	b.n	8011e14 <__gethex+0x1ac>
 8011e90:	da09      	bge.n	8011ea6 <__gethex+0x23e>
 8011e92:	1b75      	subs	r5, r6, r5
 8011e94:	4621      	mov	r1, r4
 8011e96:	9801      	ldr	r0, [sp, #4]
 8011e98:	462a      	mov	r2, r5
 8011e9a:	f000 fc19 	bl	80126d0 <__lshift>
 8011e9e:	1b7f      	subs	r7, r7, r5
 8011ea0:	4604      	mov	r4, r0
 8011ea2:	f100 0a14 	add.w	sl, r0, #20
 8011ea6:	f04f 0900 	mov.w	r9, #0
 8011eaa:	e7b8      	b.n	8011e1e <__gethex+0x1b6>
 8011eac:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011eb0:	42bd      	cmp	r5, r7
 8011eb2:	dd6f      	ble.n	8011f94 <__gethex+0x32c>
 8011eb4:	1bed      	subs	r5, r5, r7
 8011eb6:	42ae      	cmp	r6, r5
 8011eb8:	dc34      	bgt.n	8011f24 <__gethex+0x2bc>
 8011eba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011ebe:	2b02      	cmp	r3, #2
 8011ec0:	d022      	beq.n	8011f08 <__gethex+0x2a0>
 8011ec2:	2b03      	cmp	r3, #3
 8011ec4:	d024      	beq.n	8011f10 <__gethex+0x2a8>
 8011ec6:	2b01      	cmp	r3, #1
 8011ec8:	d115      	bne.n	8011ef6 <__gethex+0x28e>
 8011eca:	42ae      	cmp	r6, r5
 8011ecc:	d113      	bne.n	8011ef6 <__gethex+0x28e>
 8011ece:	2e01      	cmp	r6, #1
 8011ed0:	d10b      	bne.n	8011eea <__gethex+0x282>
 8011ed2:	9a02      	ldr	r2, [sp, #8]
 8011ed4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011ed8:	6013      	str	r3, [r2, #0]
 8011eda:	2301      	movs	r3, #1
 8011edc:	6123      	str	r3, [r4, #16]
 8011ede:	f8ca 3000 	str.w	r3, [sl]
 8011ee2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ee4:	2562      	movs	r5, #98	@ 0x62
 8011ee6:	601c      	str	r4, [r3, #0]
 8011ee8:	e73a      	b.n	8011d60 <__gethex+0xf8>
 8011eea:	1e71      	subs	r1, r6, #1
 8011eec:	4620      	mov	r0, r4
 8011eee:	f000 fe28 	bl	8012b42 <__any_on>
 8011ef2:	2800      	cmp	r0, #0
 8011ef4:	d1ed      	bne.n	8011ed2 <__gethex+0x26a>
 8011ef6:	9801      	ldr	r0, [sp, #4]
 8011ef8:	4621      	mov	r1, r4
 8011efa:	f000 f9d9 	bl	80122b0 <_Bfree>
 8011efe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011f00:	2300      	movs	r3, #0
 8011f02:	6013      	str	r3, [r2, #0]
 8011f04:	2550      	movs	r5, #80	@ 0x50
 8011f06:	e72b      	b.n	8011d60 <__gethex+0xf8>
 8011f08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d1f3      	bne.n	8011ef6 <__gethex+0x28e>
 8011f0e:	e7e0      	b.n	8011ed2 <__gethex+0x26a>
 8011f10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d1dd      	bne.n	8011ed2 <__gethex+0x26a>
 8011f16:	e7ee      	b.n	8011ef6 <__gethex+0x28e>
 8011f18:	080143d8 	.word	0x080143d8
 8011f1c:	0801449b 	.word	0x0801449b
 8011f20:	080144ac 	.word	0x080144ac
 8011f24:	1e6f      	subs	r7, r5, #1
 8011f26:	f1b9 0f00 	cmp.w	r9, #0
 8011f2a:	d130      	bne.n	8011f8e <__gethex+0x326>
 8011f2c:	b127      	cbz	r7, 8011f38 <__gethex+0x2d0>
 8011f2e:	4639      	mov	r1, r7
 8011f30:	4620      	mov	r0, r4
 8011f32:	f000 fe06 	bl	8012b42 <__any_on>
 8011f36:	4681      	mov	r9, r0
 8011f38:	117a      	asrs	r2, r7, #5
 8011f3a:	2301      	movs	r3, #1
 8011f3c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011f40:	f007 071f 	and.w	r7, r7, #31
 8011f44:	40bb      	lsls	r3, r7
 8011f46:	4213      	tst	r3, r2
 8011f48:	4629      	mov	r1, r5
 8011f4a:	4620      	mov	r0, r4
 8011f4c:	bf18      	it	ne
 8011f4e:	f049 0902 	orrne.w	r9, r9, #2
 8011f52:	f7ff fe21 	bl	8011b98 <rshift>
 8011f56:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011f5a:	1b76      	subs	r6, r6, r5
 8011f5c:	2502      	movs	r5, #2
 8011f5e:	f1b9 0f00 	cmp.w	r9, #0
 8011f62:	d047      	beq.n	8011ff4 <__gethex+0x38c>
 8011f64:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011f68:	2b02      	cmp	r3, #2
 8011f6a:	d015      	beq.n	8011f98 <__gethex+0x330>
 8011f6c:	2b03      	cmp	r3, #3
 8011f6e:	d017      	beq.n	8011fa0 <__gethex+0x338>
 8011f70:	2b01      	cmp	r3, #1
 8011f72:	d109      	bne.n	8011f88 <__gethex+0x320>
 8011f74:	f019 0f02 	tst.w	r9, #2
 8011f78:	d006      	beq.n	8011f88 <__gethex+0x320>
 8011f7a:	f8da 3000 	ldr.w	r3, [sl]
 8011f7e:	ea49 0903 	orr.w	r9, r9, r3
 8011f82:	f019 0f01 	tst.w	r9, #1
 8011f86:	d10e      	bne.n	8011fa6 <__gethex+0x33e>
 8011f88:	f045 0510 	orr.w	r5, r5, #16
 8011f8c:	e032      	b.n	8011ff4 <__gethex+0x38c>
 8011f8e:	f04f 0901 	mov.w	r9, #1
 8011f92:	e7d1      	b.n	8011f38 <__gethex+0x2d0>
 8011f94:	2501      	movs	r5, #1
 8011f96:	e7e2      	b.n	8011f5e <__gethex+0x2f6>
 8011f98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011f9a:	f1c3 0301 	rsb	r3, r3, #1
 8011f9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011fa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d0f0      	beq.n	8011f88 <__gethex+0x320>
 8011fa6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011faa:	f104 0314 	add.w	r3, r4, #20
 8011fae:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011fb2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011fb6:	f04f 0c00 	mov.w	ip, #0
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fc0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011fc4:	d01b      	beq.n	8011ffe <__gethex+0x396>
 8011fc6:	3201      	adds	r2, #1
 8011fc8:	6002      	str	r2, [r0, #0]
 8011fca:	2d02      	cmp	r5, #2
 8011fcc:	f104 0314 	add.w	r3, r4, #20
 8011fd0:	d13c      	bne.n	801204c <__gethex+0x3e4>
 8011fd2:	f8d8 2000 	ldr.w	r2, [r8]
 8011fd6:	3a01      	subs	r2, #1
 8011fd8:	42b2      	cmp	r2, r6
 8011fda:	d109      	bne.n	8011ff0 <__gethex+0x388>
 8011fdc:	1171      	asrs	r1, r6, #5
 8011fde:	2201      	movs	r2, #1
 8011fe0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011fe4:	f006 061f 	and.w	r6, r6, #31
 8011fe8:	fa02 f606 	lsl.w	r6, r2, r6
 8011fec:	421e      	tst	r6, r3
 8011fee:	d13a      	bne.n	8012066 <__gethex+0x3fe>
 8011ff0:	f045 0520 	orr.w	r5, r5, #32
 8011ff4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ff6:	601c      	str	r4, [r3, #0]
 8011ff8:	9b02      	ldr	r3, [sp, #8]
 8011ffa:	601f      	str	r7, [r3, #0]
 8011ffc:	e6b0      	b.n	8011d60 <__gethex+0xf8>
 8011ffe:	4299      	cmp	r1, r3
 8012000:	f843 cc04 	str.w	ip, [r3, #-4]
 8012004:	d8d9      	bhi.n	8011fba <__gethex+0x352>
 8012006:	68a3      	ldr	r3, [r4, #8]
 8012008:	459b      	cmp	fp, r3
 801200a:	db17      	blt.n	801203c <__gethex+0x3d4>
 801200c:	6861      	ldr	r1, [r4, #4]
 801200e:	9801      	ldr	r0, [sp, #4]
 8012010:	3101      	adds	r1, #1
 8012012:	f000 f90d 	bl	8012230 <_Balloc>
 8012016:	4681      	mov	r9, r0
 8012018:	b918      	cbnz	r0, 8012022 <__gethex+0x3ba>
 801201a:	4b1a      	ldr	r3, [pc, #104]	@ (8012084 <__gethex+0x41c>)
 801201c:	4602      	mov	r2, r0
 801201e:	2184      	movs	r1, #132	@ 0x84
 8012020:	e6c5      	b.n	8011dae <__gethex+0x146>
 8012022:	6922      	ldr	r2, [r4, #16]
 8012024:	3202      	adds	r2, #2
 8012026:	f104 010c 	add.w	r1, r4, #12
 801202a:	0092      	lsls	r2, r2, #2
 801202c:	300c      	adds	r0, #12
 801202e:	f7ff fd32 	bl	8011a96 <memcpy>
 8012032:	4621      	mov	r1, r4
 8012034:	9801      	ldr	r0, [sp, #4]
 8012036:	f000 f93b 	bl	80122b0 <_Bfree>
 801203a:	464c      	mov	r4, r9
 801203c:	6923      	ldr	r3, [r4, #16]
 801203e:	1c5a      	adds	r2, r3, #1
 8012040:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012044:	6122      	str	r2, [r4, #16]
 8012046:	2201      	movs	r2, #1
 8012048:	615a      	str	r2, [r3, #20]
 801204a:	e7be      	b.n	8011fca <__gethex+0x362>
 801204c:	6922      	ldr	r2, [r4, #16]
 801204e:	455a      	cmp	r2, fp
 8012050:	dd0b      	ble.n	801206a <__gethex+0x402>
 8012052:	2101      	movs	r1, #1
 8012054:	4620      	mov	r0, r4
 8012056:	f7ff fd9f 	bl	8011b98 <rshift>
 801205a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801205e:	3701      	adds	r7, #1
 8012060:	42bb      	cmp	r3, r7
 8012062:	f6ff aee0 	blt.w	8011e26 <__gethex+0x1be>
 8012066:	2501      	movs	r5, #1
 8012068:	e7c2      	b.n	8011ff0 <__gethex+0x388>
 801206a:	f016 061f 	ands.w	r6, r6, #31
 801206e:	d0fa      	beq.n	8012066 <__gethex+0x3fe>
 8012070:	4453      	add	r3, sl
 8012072:	f1c6 0620 	rsb	r6, r6, #32
 8012076:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801207a:	f000 f9cb 	bl	8012414 <__hi0bits>
 801207e:	42b0      	cmp	r0, r6
 8012080:	dbe7      	blt.n	8012052 <__gethex+0x3ea>
 8012082:	e7f0      	b.n	8012066 <__gethex+0x3fe>
 8012084:	0801449b 	.word	0x0801449b

08012088 <L_shift>:
 8012088:	f1c2 0208 	rsb	r2, r2, #8
 801208c:	0092      	lsls	r2, r2, #2
 801208e:	b570      	push	{r4, r5, r6, lr}
 8012090:	f1c2 0620 	rsb	r6, r2, #32
 8012094:	6843      	ldr	r3, [r0, #4]
 8012096:	6804      	ldr	r4, [r0, #0]
 8012098:	fa03 f506 	lsl.w	r5, r3, r6
 801209c:	432c      	orrs	r4, r5
 801209e:	40d3      	lsrs	r3, r2
 80120a0:	6004      	str	r4, [r0, #0]
 80120a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80120a6:	4288      	cmp	r0, r1
 80120a8:	d3f4      	bcc.n	8012094 <L_shift+0xc>
 80120aa:	bd70      	pop	{r4, r5, r6, pc}

080120ac <__match>:
 80120ac:	b530      	push	{r4, r5, lr}
 80120ae:	6803      	ldr	r3, [r0, #0]
 80120b0:	3301      	adds	r3, #1
 80120b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80120b6:	b914      	cbnz	r4, 80120be <__match+0x12>
 80120b8:	6003      	str	r3, [r0, #0]
 80120ba:	2001      	movs	r0, #1
 80120bc:	bd30      	pop	{r4, r5, pc}
 80120be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120c2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80120c6:	2d19      	cmp	r5, #25
 80120c8:	bf98      	it	ls
 80120ca:	3220      	addls	r2, #32
 80120cc:	42a2      	cmp	r2, r4
 80120ce:	d0f0      	beq.n	80120b2 <__match+0x6>
 80120d0:	2000      	movs	r0, #0
 80120d2:	e7f3      	b.n	80120bc <__match+0x10>

080120d4 <__hexnan>:
 80120d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120d8:	680b      	ldr	r3, [r1, #0]
 80120da:	6801      	ldr	r1, [r0, #0]
 80120dc:	115e      	asrs	r6, r3, #5
 80120de:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80120e2:	f013 031f 	ands.w	r3, r3, #31
 80120e6:	b087      	sub	sp, #28
 80120e8:	bf18      	it	ne
 80120ea:	3604      	addne	r6, #4
 80120ec:	2500      	movs	r5, #0
 80120ee:	1f37      	subs	r7, r6, #4
 80120f0:	4682      	mov	sl, r0
 80120f2:	4690      	mov	r8, r2
 80120f4:	9301      	str	r3, [sp, #4]
 80120f6:	f846 5c04 	str.w	r5, [r6, #-4]
 80120fa:	46b9      	mov	r9, r7
 80120fc:	463c      	mov	r4, r7
 80120fe:	9502      	str	r5, [sp, #8]
 8012100:	46ab      	mov	fp, r5
 8012102:	784a      	ldrb	r2, [r1, #1]
 8012104:	1c4b      	adds	r3, r1, #1
 8012106:	9303      	str	r3, [sp, #12]
 8012108:	b342      	cbz	r2, 801215c <__hexnan+0x88>
 801210a:	4610      	mov	r0, r2
 801210c:	9105      	str	r1, [sp, #20]
 801210e:	9204      	str	r2, [sp, #16]
 8012110:	f7ff fd94 	bl	8011c3c <__hexdig_fun>
 8012114:	2800      	cmp	r0, #0
 8012116:	d151      	bne.n	80121bc <__hexnan+0xe8>
 8012118:	9a04      	ldr	r2, [sp, #16]
 801211a:	9905      	ldr	r1, [sp, #20]
 801211c:	2a20      	cmp	r2, #32
 801211e:	d818      	bhi.n	8012152 <__hexnan+0x7e>
 8012120:	9b02      	ldr	r3, [sp, #8]
 8012122:	459b      	cmp	fp, r3
 8012124:	dd13      	ble.n	801214e <__hexnan+0x7a>
 8012126:	454c      	cmp	r4, r9
 8012128:	d206      	bcs.n	8012138 <__hexnan+0x64>
 801212a:	2d07      	cmp	r5, #7
 801212c:	dc04      	bgt.n	8012138 <__hexnan+0x64>
 801212e:	462a      	mov	r2, r5
 8012130:	4649      	mov	r1, r9
 8012132:	4620      	mov	r0, r4
 8012134:	f7ff ffa8 	bl	8012088 <L_shift>
 8012138:	4544      	cmp	r4, r8
 801213a:	d952      	bls.n	80121e2 <__hexnan+0x10e>
 801213c:	2300      	movs	r3, #0
 801213e:	f1a4 0904 	sub.w	r9, r4, #4
 8012142:	f844 3c04 	str.w	r3, [r4, #-4]
 8012146:	f8cd b008 	str.w	fp, [sp, #8]
 801214a:	464c      	mov	r4, r9
 801214c:	461d      	mov	r5, r3
 801214e:	9903      	ldr	r1, [sp, #12]
 8012150:	e7d7      	b.n	8012102 <__hexnan+0x2e>
 8012152:	2a29      	cmp	r2, #41	@ 0x29
 8012154:	d157      	bne.n	8012206 <__hexnan+0x132>
 8012156:	3102      	adds	r1, #2
 8012158:	f8ca 1000 	str.w	r1, [sl]
 801215c:	f1bb 0f00 	cmp.w	fp, #0
 8012160:	d051      	beq.n	8012206 <__hexnan+0x132>
 8012162:	454c      	cmp	r4, r9
 8012164:	d206      	bcs.n	8012174 <__hexnan+0xa0>
 8012166:	2d07      	cmp	r5, #7
 8012168:	dc04      	bgt.n	8012174 <__hexnan+0xa0>
 801216a:	462a      	mov	r2, r5
 801216c:	4649      	mov	r1, r9
 801216e:	4620      	mov	r0, r4
 8012170:	f7ff ff8a 	bl	8012088 <L_shift>
 8012174:	4544      	cmp	r4, r8
 8012176:	d936      	bls.n	80121e6 <__hexnan+0x112>
 8012178:	f1a8 0204 	sub.w	r2, r8, #4
 801217c:	4623      	mov	r3, r4
 801217e:	f853 1b04 	ldr.w	r1, [r3], #4
 8012182:	f842 1f04 	str.w	r1, [r2, #4]!
 8012186:	429f      	cmp	r7, r3
 8012188:	d2f9      	bcs.n	801217e <__hexnan+0xaa>
 801218a:	1b3b      	subs	r3, r7, r4
 801218c:	f023 0303 	bic.w	r3, r3, #3
 8012190:	3304      	adds	r3, #4
 8012192:	3401      	adds	r4, #1
 8012194:	3e03      	subs	r6, #3
 8012196:	42b4      	cmp	r4, r6
 8012198:	bf88      	it	hi
 801219a:	2304      	movhi	r3, #4
 801219c:	4443      	add	r3, r8
 801219e:	2200      	movs	r2, #0
 80121a0:	f843 2b04 	str.w	r2, [r3], #4
 80121a4:	429f      	cmp	r7, r3
 80121a6:	d2fb      	bcs.n	80121a0 <__hexnan+0xcc>
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	b91b      	cbnz	r3, 80121b4 <__hexnan+0xe0>
 80121ac:	4547      	cmp	r7, r8
 80121ae:	d128      	bne.n	8012202 <__hexnan+0x12e>
 80121b0:	2301      	movs	r3, #1
 80121b2:	603b      	str	r3, [r7, #0]
 80121b4:	2005      	movs	r0, #5
 80121b6:	b007      	add	sp, #28
 80121b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121bc:	3501      	adds	r5, #1
 80121be:	2d08      	cmp	r5, #8
 80121c0:	f10b 0b01 	add.w	fp, fp, #1
 80121c4:	dd06      	ble.n	80121d4 <__hexnan+0x100>
 80121c6:	4544      	cmp	r4, r8
 80121c8:	d9c1      	bls.n	801214e <__hexnan+0x7a>
 80121ca:	2300      	movs	r3, #0
 80121cc:	f844 3c04 	str.w	r3, [r4, #-4]
 80121d0:	2501      	movs	r5, #1
 80121d2:	3c04      	subs	r4, #4
 80121d4:	6822      	ldr	r2, [r4, #0]
 80121d6:	f000 000f 	and.w	r0, r0, #15
 80121da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80121de:	6020      	str	r0, [r4, #0]
 80121e0:	e7b5      	b.n	801214e <__hexnan+0x7a>
 80121e2:	2508      	movs	r5, #8
 80121e4:	e7b3      	b.n	801214e <__hexnan+0x7a>
 80121e6:	9b01      	ldr	r3, [sp, #4]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d0dd      	beq.n	80121a8 <__hexnan+0xd4>
 80121ec:	f1c3 0320 	rsb	r3, r3, #32
 80121f0:	f04f 32ff 	mov.w	r2, #4294967295
 80121f4:	40da      	lsrs	r2, r3
 80121f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80121fa:	4013      	ands	r3, r2
 80121fc:	f846 3c04 	str.w	r3, [r6, #-4]
 8012200:	e7d2      	b.n	80121a8 <__hexnan+0xd4>
 8012202:	3f04      	subs	r7, #4
 8012204:	e7d0      	b.n	80121a8 <__hexnan+0xd4>
 8012206:	2004      	movs	r0, #4
 8012208:	e7d5      	b.n	80121b6 <__hexnan+0xe2>

0801220a <__ascii_mbtowc>:
 801220a:	b082      	sub	sp, #8
 801220c:	b901      	cbnz	r1, 8012210 <__ascii_mbtowc+0x6>
 801220e:	a901      	add	r1, sp, #4
 8012210:	b142      	cbz	r2, 8012224 <__ascii_mbtowc+0x1a>
 8012212:	b14b      	cbz	r3, 8012228 <__ascii_mbtowc+0x1e>
 8012214:	7813      	ldrb	r3, [r2, #0]
 8012216:	600b      	str	r3, [r1, #0]
 8012218:	7812      	ldrb	r2, [r2, #0]
 801221a:	1e10      	subs	r0, r2, #0
 801221c:	bf18      	it	ne
 801221e:	2001      	movne	r0, #1
 8012220:	b002      	add	sp, #8
 8012222:	4770      	bx	lr
 8012224:	4610      	mov	r0, r2
 8012226:	e7fb      	b.n	8012220 <__ascii_mbtowc+0x16>
 8012228:	f06f 0001 	mvn.w	r0, #1
 801222c:	e7f8      	b.n	8012220 <__ascii_mbtowc+0x16>
	...

08012230 <_Balloc>:
 8012230:	b570      	push	{r4, r5, r6, lr}
 8012232:	69c6      	ldr	r6, [r0, #28]
 8012234:	4604      	mov	r4, r0
 8012236:	460d      	mov	r5, r1
 8012238:	b976      	cbnz	r6, 8012258 <_Balloc+0x28>
 801223a:	2010      	movs	r0, #16
 801223c:	f7fe fa46 	bl	80106cc <malloc>
 8012240:	4602      	mov	r2, r0
 8012242:	61e0      	str	r0, [r4, #28]
 8012244:	b920      	cbnz	r0, 8012250 <_Balloc+0x20>
 8012246:	4b18      	ldr	r3, [pc, #96]	@ (80122a8 <_Balloc+0x78>)
 8012248:	4818      	ldr	r0, [pc, #96]	@ (80122ac <_Balloc+0x7c>)
 801224a:	216b      	movs	r1, #107	@ 0x6b
 801224c:	f7ff fc3c 	bl	8011ac8 <__assert_func>
 8012250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012254:	6006      	str	r6, [r0, #0]
 8012256:	60c6      	str	r6, [r0, #12]
 8012258:	69e6      	ldr	r6, [r4, #28]
 801225a:	68f3      	ldr	r3, [r6, #12]
 801225c:	b183      	cbz	r3, 8012280 <_Balloc+0x50>
 801225e:	69e3      	ldr	r3, [r4, #28]
 8012260:	68db      	ldr	r3, [r3, #12]
 8012262:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012266:	b9b8      	cbnz	r0, 8012298 <_Balloc+0x68>
 8012268:	2101      	movs	r1, #1
 801226a:	fa01 f605 	lsl.w	r6, r1, r5
 801226e:	1d72      	adds	r2, r6, #5
 8012270:	0092      	lsls	r2, r2, #2
 8012272:	4620      	mov	r0, r4
 8012274:	f001 f855 	bl	8013322 <_calloc_r>
 8012278:	b160      	cbz	r0, 8012294 <_Balloc+0x64>
 801227a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801227e:	e00e      	b.n	801229e <_Balloc+0x6e>
 8012280:	2221      	movs	r2, #33	@ 0x21
 8012282:	2104      	movs	r1, #4
 8012284:	4620      	mov	r0, r4
 8012286:	f001 f84c 	bl	8013322 <_calloc_r>
 801228a:	69e3      	ldr	r3, [r4, #28]
 801228c:	60f0      	str	r0, [r6, #12]
 801228e:	68db      	ldr	r3, [r3, #12]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d1e4      	bne.n	801225e <_Balloc+0x2e>
 8012294:	2000      	movs	r0, #0
 8012296:	bd70      	pop	{r4, r5, r6, pc}
 8012298:	6802      	ldr	r2, [r0, #0]
 801229a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801229e:	2300      	movs	r3, #0
 80122a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80122a4:	e7f7      	b.n	8012296 <_Balloc+0x66>
 80122a6:	bf00      	nop
 80122a8:	080143e6 	.word	0x080143e6
 80122ac:	0801450c 	.word	0x0801450c

080122b0 <_Bfree>:
 80122b0:	b570      	push	{r4, r5, r6, lr}
 80122b2:	69c6      	ldr	r6, [r0, #28]
 80122b4:	4605      	mov	r5, r0
 80122b6:	460c      	mov	r4, r1
 80122b8:	b976      	cbnz	r6, 80122d8 <_Bfree+0x28>
 80122ba:	2010      	movs	r0, #16
 80122bc:	f7fe fa06 	bl	80106cc <malloc>
 80122c0:	4602      	mov	r2, r0
 80122c2:	61e8      	str	r0, [r5, #28]
 80122c4:	b920      	cbnz	r0, 80122d0 <_Bfree+0x20>
 80122c6:	4b09      	ldr	r3, [pc, #36]	@ (80122ec <_Bfree+0x3c>)
 80122c8:	4809      	ldr	r0, [pc, #36]	@ (80122f0 <_Bfree+0x40>)
 80122ca:	218f      	movs	r1, #143	@ 0x8f
 80122cc:	f7ff fbfc 	bl	8011ac8 <__assert_func>
 80122d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80122d4:	6006      	str	r6, [r0, #0]
 80122d6:	60c6      	str	r6, [r0, #12]
 80122d8:	b13c      	cbz	r4, 80122ea <_Bfree+0x3a>
 80122da:	69eb      	ldr	r3, [r5, #28]
 80122dc:	6862      	ldr	r2, [r4, #4]
 80122de:	68db      	ldr	r3, [r3, #12]
 80122e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80122e4:	6021      	str	r1, [r4, #0]
 80122e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80122ea:	bd70      	pop	{r4, r5, r6, pc}
 80122ec:	080143e6 	.word	0x080143e6
 80122f0:	0801450c 	.word	0x0801450c

080122f4 <__multadd>:
 80122f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122f8:	690d      	ldr	r5, [r1, #16]
 80122fa:	4607      	mov	r7, r0
 80122fc:	460c      	mov	r4, r1
 80122fe:	461e      	mov	r6, r3
 8012300:	f101 0c14 	add.w	ip, r1, #20
 8012304:	2000      	movs	r0, #0
 8012306:	f8dc 3000 	ldr.w	r3, [ip]
 801230a:	b299      	uxth	r1, r3
 801230c:	fb02 6101 	mla	r1, r2, r1, r6
 8012310:	0c1e      	lsrs	r6, r3, #16
 8012312:	0c0b      	lsrs	r3, r1, #16
 8012314:	fb02 3306 	mla	r3, r2, r6, r3
 8012318:	b289      	uxth	r1, r1
 801231a:	3001      	adds	r0, #1
 801231c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012320:	4285      	cmp	r5, r0
 8012322:	f84c 1b04 	str.w	r1, [ip], #4
 8012326:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801232a:	dcec      	bgt.n	8012306 <__multadd+0x12>
 801232c:	b30e      	cbz	r6, 8012372 <__multadd+0x7e>
 801232e:	68a3      	ldr	r3, [r4, #8]
 8012330:	42ab      	cmp	r3, r5
 8012332:	dc19      	bgt.n	8012368 <__multadd+0x74>
 8012334:	6861      	ldr	r1, [r4, #4]
 8012336:	4638      	mov	r0, r7
 8012338:	3101      	adds	r1, #1
 801233a:	f7ff ff79 	bl	8012230 <_Balloc>
 801233e:	4680      	mov	r8, r0
 8012340:	b928      	cbnz	r0, 801234e <__multadd+0x5a>
 8012342:	4602      	mov	r2, r0
 8012344:	4b0c      	ldr	r3, [pc, #48]	@ (8012378 <__multadd+0x84>)
 8012346:	480d      	ldr	r0, [pc, #52]	@ (801237c <__multadd+0x88>)
 8012348:	21ba      	movs	r1, #186	@ 0xba
 801234a:	f7ff fbbd 	bl	8011ac8 <__assert_func>
 801234e:	6922      	ldr	r2, [r4, #16]
 8012350:	3202      	adds	r2, #2
 8012352:	f104 010c 	add.w	r1, r4, #12
 8012356:	0092      	lsls	r2, r2, #2
 8012358:	300c      	adds	r0, #12
 801235a:	f7ff fb9c 	bl	8011a96 <memcpy>
 801235e:	4621      	mov	r1, r4
 8012360:	4638      	mov	r0, r7
 8012362:	f7ff ffa5 	bl	80122b0 <_Bfree>
 8012366:	4644      	mov	r4, r8
 8012368:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801236c:	3501      	adds	r5, #1
 801236e:	615e      	str	r6, [r3, #20]
 8012370:	6125      	str	r5, [r4, #16]
 8012372:	4620      	mov	r0, r4
 8012374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012378:	0801449b 	.word	0x0801449b
 801237c:	0801450c 	.word	0x0801450c

08012380 <__s2b>:
 8012380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012384:	460c      	mov	r4, r1
 8012386:	4615      	mov	r5, r2
 8012388:	461f      	mov	r7, r3
 801238a:	2209      	movs	r2, #9
 801238c:	3308      	adds	r3, #8
 801238e:	4606      	mov	r6, r0
 8012390:	fb93 f3f2 	sdiv	r3, r3, r2
 8012394:	2100      	movs	r1, #0
 8012396:	2201      	movs	r2, #1
 8012398:	429a      	cmp	r2, r3
 801239a:	db09      	blt.n	80123b0 <__s2b+0x30>
 801239c:	4630      	mov	r0, r6
 801239e:	f7ff ff47 	bl	8012230 <_Balloc>
 80123a2:	b940      	cbnz	r0, 80123b6 <__s2b+0x36>
 80123a4:	4602      	mov	r2, r0
 80123a6:	4b19      	ldr	r3, [pc, #100]	@ (801240c <__s2b+0x8c>)
 80123a8:	4819      	ldr	r0, [pc, #100]	@ (8012410 <__s2b+0x90>)
 80123aa:	21d3      	movs	r1, #211	@ 0xd3
 80123ac:	f7ff fb8c 	bl	8011ac8 <__assert_func>
 80123b0:	0052      	lsls	r2, r2, #1
 80123b2:	3101      	adds	r1, #1
 80123b4:	e7f0      	b.n	8012398 <__s2b+0x18>
 80123b6:	9b08      	ldr	r3, [sp, #32]
 80123b8:	6143      	str	r3, [r0, #20]
 80123ba:	2d09      	cmp	r5, #9
 80123bc:	f04f 0301 	mov.w	r3, #1
 80123c0:	6103      	str	r3, [r0, #16]
 80123c2:	dd16      	ble.n	80123f2 <__s2b+0x72>
 80123c4:	f104 0909 	add.w	r9, r4, #9
 80123c8:	46c8      	mov	r8, r9
 80123ca:	442c      	add	r4, r5
 80123cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80123d0:	4601      	mov	r1, r0
 80123d2:	3b30      	subs	r3, #48	@ 0x30
 80123d4:	220a      	movs	r2, #10
 80123d6:	4630      	mov	r0, r6
 80123d8:	f7ff ff8c 	bl	80122f4 <__multadd>
 80123dc:	45a0      	cmp	r8, r4
 80123de:	d1f5      	bne.n	80123cc <__s2b+0x4c>
 80123e0:	f1a5 0408 	sub.w	r4, r5, #8
 80123e4:	444c      	add	r4, r9
 80123e6:	1b2d      	subs	r5, r5, r4
 80123e8:	1963      	adds	r3, r4, r5
 80123ea:	42bb      	cmp	r3, r7
 80123ec:	db04      	blt.n	80123f8 <__s2b+0x78>
 80123ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123f2:	340a      	adds	r4, #10
 80123f4:	2509      	movs	r5, #9
 80123f6:	e7f6      	b.n	80123e6 <__s2b+0x66>
 80123f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80123fc:	4601      	mov	r1, r0
 80123fe:	3b30      	subs	r3, #48	@ 0x30
 8012400:	220a      	movs	r2, #10
 8012402:	4630      	mov	r0, r6
 8012404:	f7ff ff76 	bl	80122f4 <__multadd>
 8012408:	e7ee      	b.n	80123e8 <__s2b+0x68>
 801240a:	bf00      	nop
 801240c:	0801449b 	.word	0x0801449b
 8012410:	0801450c 	.word	0x0801450c

08012414 <__hi0bits>:
 8012414:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012418:	4603      	mov	r3, r0
 801241a:	bf36      	itet	cc
 801241c:	0403      	lslcc	r3, r0, #16
 801241e:	2000      	movcs	r0, #0
 8012420:	2010      	movcc	r0, #16
 8012422:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012426:	bf3c      	itt	cc
 8012428:	021b      	lslcc	r3, r3, #8
 801242a:	3008      	addcc	r0, #8
 801242c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012430:	bf3c      	itt	cc
 8012432:	011b      	lslcc	r3, r3, #4
 8012434:	3004      	addcc	r0, #4
 8012436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801243a:	bf3c      	itt	cc
 801243c:	009b      	lslcc	r3, r3, #2
 801243e:	3002      	addcc	r0, #2
 8012440:	2b00      	cmp	r3, #0
 8012442:	db05      	blt.n	8012450 <__hi0bits+0x3c>
 8012444:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012448:	f100 0001 	add.w	r0, r0, #1
 801244c:	bf08      	it	eq
 801244e:	2020      	moveq	r0, #32
 8012450:	4770      	bx	lr

08012452 <__lo0bits>:
 8012452:	6803      	ldr	r3, [r0, #0]
 8012454:	4602      	mov	r2, r0
 8012456:	f013 0007 	ands.w	r0, r3, #7
 801245a:	d00b      	beq.n	8012474 <__lo0bits+0x22>
 801245c:	07d9      	lsls	r1, r3, #31
 801245e:	d421      	bmi.n	80124a4 <__lo0bits+0x52>
 8012460:	0798      	lsls	r0, r3, #30
 8012462:	bf49      	itett	mi
 8012464:	085b      	lsrmi	r3, r3, #1
 8012466:	089b      	lsrpl	r3, r3, #2
 8012468:	2001      	movmi	r0, #1
 801246a:	6013      	strmi	r3, [r2, #0]
 801246c:	bf5c      	itt	pl
 801246e:	6013      	strpl	r3, [r2, #0]
 8012470:	2002      	movpl	r0, #2
 8012472:	4770      	bx	lr
 8012474:	b299      	uxth	r1, r3
 8012476:	b909      	cbnz	r1, 801247c <__lo0bits+0x2a>
 8012478:	0c1b      	lsrs	r3, r3, #16
 801247a:	2010      	movs	r0, #16
 801247c:	b2d9      	uxtb	r1, r3
 801247e:	b909      	cbnz	r1, 8012484 <__lo0bits+0x32>
 8012480:	3008      	adds	r0, #8
 8012482:	0a1b      	lsrs	r3, r3, #8
 8012484:	0719      	lsls	r1, r3, #28
 8012486:	bf04      	itt	eq
 8012488:	091b      	lsreq	r3, r3, #4
 801248a:	3004      	addeq	r0, #4
 801248c:	0799      	lsls	r1, r3, #30
 801248e:	bf04      	itt	eq
 8012490:	089b      	lsreq	r3, r3, #2
 8012492:	3002      	addeq	r0, #2
 8012494:	07d9      	lsls	r1, r3, #31
 8012496:	d403      	bmi.n	80124a0 <__lo0bits+0x4e>
 8012498:	085b      	lsrs	r3, r3, #1
 801249a:	f100 0001 	add.w	r0, r0, #1
 801249e:	d003      	beq.n	80124a8 <__lo0bits+0x56>
 80124a0:	6013      	str	r3, [r2, #0]
 80124a2:	4770      	bx	lr
 80124a4:	2000      	movs	r0, #0
 80124a6:	4770      	bx	lr
 80124a8:	2020      	movs	r0, #32
 80124aa:	4770      	bx	lr

080124ac <__i2b>:
 80124ac:	b510      	push	{r4, lr}
 80124ae:	460c      	mov	r4, r1
 80124b0:	2101      	movs	r1, #1
 80124b2:	f7ff febd 	bl	8012230 <_Balloc>
 80124b6:	4602      	mov	r2, r0
 80124b8:	b928      	cbnz	r0, 80124c6 <__i2b+0x1a>
 80124ba:	4b05      	ldr	r3, [pc, #20]	@ (80124d0 <__i2b+0x24>)
 80124bc:	4805      	ldr	r0, [pc, #20]	@ (80124d4 <__i2b+0x28>)
 80124be:	f240 1145 	movw	r1, #325	@ 0x145
 80124c2:	f7ff fb01 	bl	8011ac8 <__assert_func>
 80124c6:	2301      	movs	r3, #1
 80124c8:	6144      	str	r4, [r0, #20]
 80124ca:	6103      	str	r3, [r0, #16]
 80124cc:	bd10      	pop	{r4, pc}
 80124ce:	bf00      	nop
 80124d0:	0801449b 	.word	0x0801449b
 80124d4:	0801450c 	.word	0x0801450c

080124d8 <__multiply>:
 80124d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124dc:	4617      	mov	r7, r2
 80124de:	690a      	ldr	r2, [r1, #16]
 80124e0:	693b      	ldr	r3, [r7, #16]
 80124e2:	429a      	cmp	r2, r3
 80124e4:	bfa8      	it	ge
 80124e6:	463b      	movge	r3, r7
 80124e8:	4689      	mov	r9, r1
 80124ea:	bfa4      	itt	ge
 80124ec:	460f      	movge	r7, r1
 80124ee:	4699      	movge	r9, r3
 80124f0:	693d      	ldr	r5, [r7, #16]
 80124f2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80124f6:	68bb      	ldr	r3, [r7, #8]
 80124f8:	6879      	ldr	r1, [r7, #4]
 80124fa:	eb05 060a 	add.w	r6, r5, sl
 80124fe:	42b3      	cmp	r3, r6
 8012500:	b085      	sub	sp, #20
 8012502:	bfb8      	it	lt
 8012504:	3101      	addlt	r1, #1
 8012506:	f7ff fe93 	bl	8012230 <_Balloc>
 801250a:	b930      	cbnz	r0, 801251a <__multiply+0x42>
 801250c:	4602      	mov	r2, r0
 801250e:	4b41      	ldr	r3, [pc, #260]	@ (8012614 <__multiply+0x13c>)
 8012510:	4841      	ldr	r0, [pc, #260]	@ (8012618 <__multiply+0x140>)
 8012512:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012516:	f7ff fad7 	bl	8011ac8 <__assert_func>
 801251a:	f100 0414 	add.w	r4, r0, #20
 801251e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8012522:	4623      	mov	r3, r4
 8012524:	2200      	movs	r2, #0
 8012526:	4573      	cmp	r3, lr
 8012528:	d320      	bcc.n	801256c <__multiply+0x94>
 801252a:	f107 0814 	add.w	r8, r7, #20
 801252e:	f109 0114 	add.w	r1, r9, #20
 8012532:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8012536:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801253a:	9302      	str	r3, [sp, #8]
 801253c:	1beb      	subs	r3, r5, r7
 801253e:	3b15      	subs	r3, #21
 8012540:	f023 0303 	bic.w	r3, r3, #3
 8012544:	3304      	adds	r3, #4
 8012546:	3715      	adds	r7, #21
 8012548:	42bd      	cmp	r5, r7
 801254a:	bf38      	it	cc
 801254c:	2304      	movcc	r3, #4
 801254e:	9301      	str	r3, [sp, #4]
 8012550:	9b02      	ldr	r3, [sp, #8]
 8012552:	9103      	str	r1, [sp, #12]
 8012554:	428b      	cmp	r3, r1
 8012556:	d80c      	bhi.n	8012572 <__multiply+0x9a>
 8012558:	2e00      	cmp	r6, #0
 801255a:	dd03      	ble.n	8012564 <__multiply+0x8c>
 801255c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012560:	2b00      	cmp	r3, #0
 8012562:	d055      	beq.n	8012610 <__multiply+0x138>
 8012564:	6106      	str	r6, [r0, #16]
 8012566:	b005      	add	sp, #20
 8012568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801256c:	f843 2b04 	str.w	r2, [r3], #4
 8012570:	e7d9      	b.n	8012526 <__multiply+0x4e>
 8012572:	f8b1 a000 	ldrh.w	sl, [r1]
 8012576:	f1ba 0f00 	cmp.w	sl, #0
 801257a:	d01f      	beq.n	80125bc <__multiply+0xe4>
 801257c:	46c4      	mov	ip, r8
 801257e:	46a1      	mov	r9, r4
 8012580:	2700      	movs	r7, #0
 8012582:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012586:	f8d9 3000 	ldr.w	r3, [r9]
 801258a:	fa1f fb82 	uxth.w	fp, r2
 801258e:	b29b      	uxth	r3, r3
 8012590:	fb0a 330b 	mla	r3, sl, fp, r3
 8012594:	443b      	add	r3, r7
 8012596:	f8d9 7000 	ldr.w	r7, [r9]
 801259a:	0c12      	lsrs	r2, r2, #16
 801259c:	0c3f      	lsrs	r7, r7, #16
 801259e:	fb0a 7202 	mla	r2, sl, r2, r7
 80125a2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80125a6:	b29b      	uxth	r3, r3
 80125a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80125ac:	4565      	cmp	r5, ip
 80125ae:	f849 3b04 	str.w	r3, [r9], #4
 80125b2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80125b6:	d8e4      	bhi.n	8012582 <__multiply+0xaa>
 80125b8:	9b01      	ldr	r3, [sp, #4]
 80125ba:	50e7      	str	r7, [r4, r3]
 80125bc:	9b03      	ldr	r3, [sp, #12]
 80125be:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80125c2:	3104      	adds	r1, #4
 80125c4:	f1b9 0f00 	cmp.w	r9, #0
 80125c8:	d020      	beq.n	801260c <__multiply+0x134>
 80125ca:	6823      	ldr	r3, [r4, #0]
 80125cc:	4647      	mov	r7, r8
 80125ce:	46a4      	mov	ip, r4
 80125d0:	f04f 0a00 	mov.w	sl, #0
 80125d4:	f8b7 b000 	ldrh.w	fp, [r7]
 80125d8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80125dc:	fb09 220b 	mla	r2, r9, fp, r2
 80125e0:	4452      	add	r2, sl
 80125e2:	b29b      	uxth	r3, r3
 80125e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80125e8:	f84c 3b04 	str.w	r3, [ip], #4
 80125ec:	f857 3b04 	ldr.w	r3, [r7], #4
 80125f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80125f4:	f8bc 3000 	ldrh.w	r3, [ip]
 80125f8:	fb09 330a 	mla	r3, r9, sl, r3
 80125fc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8012600:	42bd      	cmp	r5, r7
 8012602:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012606:	d8e5      	bhi.n	80125d4 <__multiply+0xfc>
 8012608:	9a01      	ldr	r2, [sp, #4]
 801260a:	50a3      	str	r3, [r4, r2]
 801260c:	3404      	adds	r4, #4
 801260e:	e79f      	b.n	8012550 <__multiply+0x78>
 8012610:	3e01      	subs	r6, #1
 8012612:	e7a1      	b.n	8012558 <__multiply+0x80>
 8012614:	0801449b 	.word	0x0801449b
 8012618:	0801450c 	.word	0x0801450c

0801261c <__pow5mult>:
 801261c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012620:	4615      	mov	r5, r2
 8012622:	f012 0203 	ands.w	r2, r2, #3
 8012626:	4607      	mov	r7, r0
 8012628:	460e      	mov	r6, r1
 801262a:	d007      	beq.n	801263c <__pow5mult+0x20>
 801262c:	4c25      	ldr	r4, [pc, #148]	@ (80126c4 <__pow5mult+0xa8>)
 801262e:	3a01      	subs	r2, #1
 8012630:	2300      	movs	r3, #0
 8012632:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012636:	f7ff fe5d 	bl	80122f4 <__multadd>
 801263a:	4606      	mov	r6, r0
 801263c:	10ad      	asrs	r5, r5, #2
 801263e:	d03d      	beq.n	80126bc <__pow5mult+0xa0>
 8012640:	69fc      	ldr	r4, [r7, #28]
 8012642:	b97c      	cbnz	r4, 8012664 <__pow5mult+0x48>
 8012644:	2010      	movs	r0, #16
 8012646:	f7fe f841 	bl	80106cc <malloc>
 801264a:	4602      	mov	r2, r0
 801264c:	61f8      	str	r0, [r7, #28]
 801264e:	b928      	cbnz	r0, 801265c <__pow5mult+0x40>
 8012650:	4b1d      	ldr	r3, [pc, #116]	@ (80126c8 <__pow5mult+0xac>)
 8012652:	481e      	ldr	r0, [pc, #120]	@ (80126cc <__pow5mult+0xb0>)
 8012654:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012658:	f7ff fa36 	bl	8011ac8 <__assert_func>
 801265c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012660:	6004      	str	r4, [r0, #0]
 8012662:	60c4      	str	r4, [r0, #12]
 8012664:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012668:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801266c:	b94c      	cbnz	r4, 8012682 <__pow5mult+0x66>
 801266e:	f240 2171 	movw	r1, #625	@ 0x271
 8012672:	4638      	mov	r0, r7
 8012674:	f7ff ff1a 	bl	80124ac <__i2b>
 8012678:	2300      	movs	r3, #0
 801267a:	f8c8 0008 	str.w	r0, [r8, #8]
 801267e:	4604      	mov	r4, r0
 8012680:	6003      	str	r3, [r0, #0]
 8012682:	f04f 0900 	mov.w	r9, #0
 8012686:	07eb      	lsls	r3, r5, #31
 8012688:	d50a      	bpl.n	80126a0 <__pow5mult+0x84>
 801268a:	4631      	mov	r1, r6
 801268c:	4622      	mov	r2, r4
 801268e:	4638      	mov	r0, r7
 8012690:	f7ff ff22 	bl	80124d8 <__multiply>
 8012694:	4631      	mov	r1, r6
 8012696:	4680      	mov	r8, r0
 8012698:	4638      	mov	r0, r7
 801269a:	f7ff fe09 	bl	80122b0 <_Bfree>
 801269e:	4646      	mov	r6, r8
 80126a0:	106d      	asrs	r5, r5, #1
 80126a2:	d00b      	beq.n	80126bc <__pow5mult+0xa0>
 80126a4:	6820      	ldr	r0, [r4, #0]
 80126a6:	b938      	cbnz	r0, 80126b8 <__pow5mult+0x9c>
 80126a8:	4622      	mov	r2, r4
 80126aa:	4621      	mov	r1, r4
 80126ac:	4638      	mov	r0, r7
 80126ae:	f7ff ff13 	bl	80124d8 <__multiply>
 80126b2:	6020      	str	r0, [r4, #0]
 80126b4:	f8c0 9000 	str.w	r9, [r0]
 80126b8:	4604      	mov	r4, r0
 80126ba:	e7e4      	b.n	8012686 <__pow5mult+0x6a>
 80126bc:	4630      	mov	r0, r6
 80126be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126c2:	bf00      	nop
 80126c4:	080146ec 	.word	0x080146ec
 80126c8:	080143e6 	.word	0x080143e6
 80126cc:	0801450c 	.word	0x0801450c

080126d0 <__lshift>:
 80126d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126d4:	460c      	mov	r4, r1
 80126d6:	6849      	ldr	r1, [r1, #4]
 80126d8:	6923      	ldr	r3, [r4, #16]
 80126da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80126de:	68a3      	ldr	r3, [r4, #8]
 80126e0:	4607      	mov	r7, r0
 80126e2:	4691      	mov	r9, r2
 80126e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80126e8:	f108 0601 	add.w	r6, r8, #1
 80126ec:	42b3      	cmp	r3, r6
 80126ee:	db0b      	blt.n	8012708 <__lshift+0x38>
 80126f0:	4638      	mov	r0, r7
 80126f2:	f7ff fd9d 	bl	8012230 <_Balloc>
 80126f6:	4605      	mov	r5, r0
 80126f8:	b948      	cbnz	r0, 801270e <__lshift+0x3e>
 80126fa:	4602      	mov	r2, r0
 80126fc:	4b28      	ldr	r3, [pc, #160]	@ (80127a0 <__lshift+0xd0>)
 80126fe:	4829      	ldr	r0, [pc, #164]	@ (80127a4 <__lshift+0xd4>)
 8012700:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012704:	f7ff f9e0 	bl	8011ac8 <__assert_func>
 8012708:	3101      	adds	r1, #1
 801270a:	005b      	lsls	r3, r3, #1
 801270c:	e7ee      	b.n	80126ec <__lshift+0x1c>
 801270e:	2300      	movs	r3, #0
 8012710:	f100 0114 	add.w	r1, r0, #20
 8012714:	f100 0210 	add.w	r2, r0, #16
 8012718:	4618      	mov	r0, r3
 801271a:	4553      	cmp	r3, sl
 801271c:	db33      	blt.n	8012786 <__lshift+0xb6>
 801271e:	6920      	ldr	r0, [r4, #16]
 8012720:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012724:	f104 0314 	add.w	r3, r4, #20
 8012728:	f019 091f 	ands.w	r9, r9, #31
 801272c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012730:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012734:	d02b      	beq.n	801278e <__lshift+0xbe>
 8012736:	f1c9 0e20 	rsb	lr, r9, #32
 801273a:	468a      	mov	sl, r1
 801273c:	2200      	movs	r2, #0
 801273e:	6818      	ldr	r0, [r3, #0]
 8012740:	fa00 f009 	lsl.w	r0, r0, r9
 8012744:	4310      	orrs	r0, r2
 8012746:	f84a 0b04 	str.w	r0, [sl], #4
 801274a:	f853 2b04 	ldr.w	r2, [r3], #4
 801274e:	459c      	cmp	ip, r3
 8012750:	fa22 f20e 	lsr.w	r2, r2, lr
 8012754:	d8f3      	bhi.n	801273e <__lshift+0x6e>
 8012756:	ebac 0304 	sub.w	r3, ip, r4
 801275a:	3b15      	subs	r3, #21
 801275c:	f023 0303 	bic.w	r3, r3, #3
 8012760:	3304      	adds	r3, #4
 8012762:	f104 0015 	add.w	r0, r4, #21
 8012766:	4560      	cmp	r0, ip
 8012768:	bf88      	it	hi
 801276a:	2304      	movhi	r3, #4
 801276c:	50ca      	str	r2, [r1, r3]
 801276e:	b10a      	cbz	r2, 8012774 <__lshift+0xa4>
 8012770:	f108 0602 	add.w	r6, r8, #2
 8012774:	3e01      	subs	r6, #1
 8012776:	4638      	mov	r0, r7
 8012778:	612e      	str	r6, [r5, #16]
 801277a:	4621      	mov	r1, r4
 801277c:	f7ff fd98 	bl	80122b0 <_Bfree>
 8012780:	4628      	mov	r0, r5
 8012782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012786:	f842 0f04 	str.w	r0, [r2, #4]!
 801278a:	3301      	adds	r3, #1
 801278c:	e7c5      	b.n	801271a <__lshift+0x4a>
 801278e:	3904      	subs	r1, #4
 8012790:	f853 2b04 	ldr.w	r2, [r3], #4
 8012794:	f841 2f04 	str.w	r2, [r1, #4]!
 8012798:	459c      	cmp	ip, r3
 801279a:	d8f9      	bhi.n	8012790 <__lshift+0xc0>
 801279c:	e7ea      	b.n	8012774 <__lshift+0xa4>
 801279e:	bf00      	nop
 80127a0:	0801449b 	.word	0x0801449b
 80127a4:	0801450c 	.word	0x0801450c

080127a8 <__mcmp>:
 80127a8:	690a      	ldr	r2, [r1, #16]
 80127aa:	4603      	mov	r3, r0
 80127ac:	6900      	ldr	r0, [r0, #16]
 80127ae:	1a80      	subs	r0, r0, r2
 80127b0:	b530      	push	{r4, r5, lr}
 80127b2:	d10e      	bne.n	80127d2 <__mcmp+0x2a>
 80127b4:	3314      	adds	r3, #20
 80127b6:	3114      	adds	r1, #20
 80127b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80127bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80127c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80127c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80127c8:	4295      	cmp	r5, r2
 80127ca:	d003      	beq.n	80127d4 <__mcmp+0x2c>
 80127cc:	d205      	bcs.n	80127da <__mcmp+0x32>
 80127ce:	f04f 30ff 	mov.w	r0, #4294967295
 80127d2:	bd30      	pop	{r4, r5, pc}
 80127d4:	42a3      	cmp	r3, r4
 80127d6:	d3f3      	bcc.n	80127c0 <__mcmp+0x18>
 80127d8:	e7fb      	b.n	80127d2 <__mcmp+0x2a>
 80127da:	2001      	movs	r0, #1
 80127dc:	e7f9      	b.n	80127d2 <__mcmp+0x2a>
	...

080127e0 <__mdiff>:
 80127e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127e4:	4689      	mov	r9, r1
 80127e6:	4606      	mov	r6, r0
 80127e8:	4611      	mov	r1, r2
 80127ea:	4648      	mov	r0, r9
 80127ec:	4614      	mov	r4, r2
 80127ee:	f7ff ffdb 	bl	80127a8 <__mcmp>
 80127f2:	1e05      	subs	r5, r0, #0
 80127f4:	d112      	bne.n	801281c <__mdiff+0x3c>
 80127f6:	4629      	mov	r1, r5
 80127f8:	4630      	mov	r0, r6
 80127fa:	f7ff fd19 	bl	8012230 <_Balloc>
 80127fe:	4602      	mov	r2, r0
 8012800:	b928      	cbnz	r0, 801280e <__mdiff+0x2e>
 8012802:	4b3f      	ldr	r3, [pc, #252]	@ (8012900 <__mdiff+0x120>)
 8012804:	f240 2137 	movw	r1, #567	@ 0x237
 8012808:	483e      	ldr	r0, [pc, #248]	@ (8012904 <__mdiff+0x124>)
 801280a:	f7ff f95d 	bl	8011ac8 <__assert_func>
 801280e:	2301      	movs	r3, #1
 8012810:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012814:	4610      	mov	r0, r2
 8012816:	b003      	add	sp, #12
 8012818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801281c:	bfbc      	itt	lt
 801281e:	464b      	movlt	r3, r9
 8012820:	46a1      	movlt	r9, r4
 8012822:	4630      	mov	r0, r6
 8012824:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012828:	bfba      	itte	lt
 801282a:	461c      	movlt	r4, r3
 801282c:	2501      	movlt	r5, #1
 801282e:	2500      	movge	r5, #0
 8012830:	f7ff fcfe 	bl	8012230 <_Balloc>
 8012834:	4602      	mov	r2, r0
 8012836:	b918      	cbnz	r0, 8012840 <__mdiff+0x60>
 8012838:	4b31      	ldr	r3, [pc, #196]	@ (8012900 <__mdiff+0x120>)
 801283a:	f240 2145 	movw	r1, #581	@ 0x245
 801283e:	e7e3      	b.n	8012808 <__mdiff+0x28>
 8012840:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012844:	6926      	ldr	r6, [r4, #16]
 8012846:	60c5      	str	r5, [r0, #12]
 8012848:	f109 0310 	add.w	r3, r9, #16
 801284c:	f109 0514 	add.w	r5, r9, #20
 8012850:	f104 0e14 	add.w	lr, r4, #20
 8012854:	f100 0b14 	add.w	fp, r0, #20
 8012858:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801285c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012860:	9301      	str	r3, [sp, #4]
 8012862:	46d9      	mov	r9, fp
 8012864:	f04f 0c00 	mov.w	ip, #0
 8012868:	9b01      	ldr	r3, [sp, #4]
 801286a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801286e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012872:	9301      	str	r3, [sp, #4]
 8012874:	fa1f f38a 	uxth.w	r3, sl
 8012878:	4619      	mov	r1, r3
 801287a:	b283      	uxth	r3, r0
 801287c:	1acb      	subs	r3, r1, r3
 801287e:	0c00      	lsrs	r0, r0, #16
 8012880:	4463      	add	r3, ip
 8012882:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012886:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801288a:	b29b      	uxth	r3, r3
 801288c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012890:	4576      	cmp	r6, lr
 8012892:	f849 3b04 	str.w	r3, [r9], #4
 8012896:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801289a:	d8e5      	bhi.n	8012868 <__mdiff+0x88>
 801289c:	1b33      	subs	r3, r6, r4
 801289e:	3b15      	subs	r3, #21
 80128a0:	f023 0303 	bic.w	r3, r3, #3
 80128a4:	3415      	adds	r4, #21
 80128a6:	3304      	adds	r3, #4
 80128a8:	42a6      	cmp	r6, r4
 80128aa:	bf38      	it	cc
 80128ac:	2304      	movcc	r3, #4
 80128ae:	441d      	add	r5, r3
 80128b0:	445b      	add	r3, fp
 80128b2:	461e      	mov	r6, r3
 80128b4:	462c      	mov	r4, r5
 80128b6:	4544      	cmp	r4, r8
 80128b8:	d30e      	bcc.n	80128d8 <__mdiff+0xf8>
 80128ba:	f108 0103 	add.w	r1, r8, #3
 80128be:	1b49      	subs	r1, r1, r5
 80128c0:	f021 0103 	bic.w	r1, r1, #3
 80128c4:	3d03      	subs	r5, #3
 80128c6:	45a8      	cmp	r8, r5
 80128c8:	bf38      	it	cc
 80128ca:	2100      	movcc	r1, #0
 80128cc:	440b      	add	r3, r1
 80128ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80128d2:	b191      	cbz	r1, 80128fa <__mdiff+0x11a>
 80128d4:	6117      	str	r7, [r2, #16]
 80128d6:	e79d      	b.n	8012814 <__mdiff+0x34>
 80128d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80128dc:	46e6      	mov	lr, ip
 80128de:	0c08      	lsrs	r0, r1, #16
 80128e0:	fa1c fc81 	uxtah	ip, ip, r1
 80128e4:	4471      	add	r1, lr
 80128e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80128ea:	b289      	uxth	r1, r1
 80128ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80128f0:	f846 1b04 	str.w	r1, [r6], #4
 80128f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80128f8:	e7dd      	b.n	80128b6 <__mdiff+0xd6>
 80128fa:	3f01      	subs	r7, #1
 80128fc:	e7e7      	b.n	80128ce <__mdiff+0xee>
 80128fe:	bf00      	nop
 8012900:	0801449b 	.word	0x0801449b
 8012904:	0801450c 	.word	0x0801450c

08012908 <__ulp>:
 8012908:	b082      	sub	sp, #8
 801290a:	ed8d 0b00 	vstr	d0, [sp]
 801290e:	9a01      	ldr	r2, [sp, #4]
 8012910:	4b0f      	ldr	r3, [pc, #60]	@ (8012950 <__ulp+0x48>)
 8012912:	4013      	ands	r3, r2
 8012914:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012918:	2b00      	cmp	r3, #0
 801291a:	dc08      	bgt.n	801292e <__ulp+0x26>
 801291c:	425b      	negs	r3, r3
 801291e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8012922:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012926:	da04      	bge.n	8012932 <__ulp+0x2a>
 8012928:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801292c:	4113      	asrs	r3, r2
 801292e:	2200      	movs	r2, #0
 8012930:	e008      	b.n	8012944 <__ulp+0x3c>
 8012932:	f1a2 0314 	sub.w	r3, r2, #20
 8012936:	2b1e      	cmp	r3, #30
 8012938:	bfda      	itte	le
 801293a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801293e:	40da      	lsrle	r2, r3
 8012940:	2201      	movgt	r2, #1
 8012942:	2300      	movs	r3, #0
 8012944:	4619      	mov	r1, r3
 8012946:	4610      	mov	r0, r2
 8012948:	ec41 0b10 	vmov	d0, r0, r1
 801294c:	b002      	add	sp, #8
 801294e:	4770      	bx	lr
 8012950:	7ff00000 	.word	0x7ff00000

08012954 <__b2d>:
 8012954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012958:	6906      	ldr	r6, [r0, #16]
 801295a:	f100 0814 	add.w	r8, r0, #20
 801295e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012962:	1f37      	subs	r7, r6, #4
 8012964:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012968:	4610      	mov	r0, r2
 801296a:	f7ff fd53 	bl	8012414 <__hi0bits>
 801296e:	f1c0 0320 	rsb	r3, r0, #32
 8012972:	280a      	cmp	r0, #10
 8012974:	600b      	str	r3, [r1, #0]
 8012976:	491b      	ldr	r1, [pc, #108]	@ (80129e4 <__b2d+0x90>)
 8012978:	dc15      	bgt.n	80129a6 <__b2d+0x52>
 801297a:	f1c0 0c0b 	rsb	ip, r0, #11
 801297e:	fa22 f30c 	lsr.w	r3, r2, ip
 8012982:	45b8      	cmp	r8, r7
 8012984:	ea43 0501 	orr.w	r5, r3, r1
 8012988:	bf34      	ite	cc
 801298a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801298e:	2300      	movcs	r3, #0
 8012990:	3015      	adds	r0, #21
 8012992:	fa02 f000 	lsl.w	r0, r2, r0
 8012996:	fa23 f30c 	lsr.w	r3, r3, ip
 801299a:	4303      	orrs	r3, r0
 801299c:	461c      	mov	r4, r3
 801299e:	ec45 4b10 	vmov	d0, r4, r5
 80129a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129a6:	45b8      	cmp	r8, r7
 80129a8:	bf3a      	itte	cc
 80129aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80129ae:	f1a6 0708 	subcc.w	r7, r6, #8
 80129b2:	2300      	movcs	r3, #0
 80129b4:	380b      	subs	r0, #11
 80129b6:	d012      	beq.n	80129de <__b2d+0x8a>
 80129b8:	f1c0 0120 	rsb	r1, r0, #32
 80129bc:	fa23 f401 	lsr.w	r4, r3, r1
 80129c0:	4082      	lsls	r2, r0
 80129c2:	4322      	orrs	r2, r4
 80129c4:	4547      	cmp	r7, r8
 80129c6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80129ca:	bf8c      	ite	hi
 80129cc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80129d0:	2200      	movls	r2, #0
 80129d2:	4083      	lsls	r3, r0
 80129d4:	40ca      	lsrs	r2, r1
 80129d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80129da:	4313      	orrs	r3, r2
 80129dc:	e7de      	b.n	801299c <__b2d+0x48>
 80129de:	ea42 0501 	orr.w	r5, r2, r1
 80129e2:	e7db      	b.n	801299c <__b2d+0x48>
 80129e4:	3ff00000 	.word	0x3ff00000

080129e8 <__d2b>:
 80129e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80129ec:	460f      	mov	r7, r1
 80129ee:	2101      	movs	r1, #1
 80129f0:	ec59 8b10 	vmov	r8, r9, d0
 80129f4:	4616      	mov	r6, r2
 80129f6:	f7ff fc1b 	bl	8012230 <_Balloc>
 80129fa:	4604      	mov	r4, r0
 80129fc:	b930      	cbnz	r0, 8012a0c <__d2b+0x24>
 80129fe:	4602      	mov	r2, r0
 8012a00:	4b23      	ldr	r3, [pc, #140]	@ (8012a90 <__d2b+0xa8>)
 8012a02:	4824      	ldr	r0, [pc, #144]	@ (8012a94 <__d2b+0xac>)
 8012a04:	f240 310f 	movw	r1, #783	@ 0x30f
 8012a08:	f7ff f85e 	bl	8011ac8 <__assert_func>
 8012a0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012a10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012a14:	b10d      	cbz	r5, 8012a1a <__d2b+0x32>
 8012a16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012a1a:	9301      	str	r3, [sp, #4]
 8012a1c:	f1b8 0300 	subs.w	r3, r8, #0
 8012a20:	d023      	beq.n	8012a6a <__d2b+0x82>
 8012a22:	4668      	mov	r0, sp
 8012a24:	9300      	str	r3, [sp, #0]
 8012a26:	f7ff fd14 	bl	8012452 <__lo0bits>
 8012a2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012a2e:	b1d0      	cbz	r0, 8012a66 <__d2b+0x7e>
 8012a30:	f1c0 0320 	rsb	r3, r0, #32
 8012a34:	fa02 f303 	lsl.w	r3, r2, r3
 8012a38:	430b      	orrs	r3, r1
 8012a3a:	40c2      	lsrs	r2, r0
 8012a3c:	6163      	str	r3, [r4, #20]
 8012a3e:	9201      	str	r2, [sp, #4]
 8012a40:	9b01      	ldr	r3, [sp, #4]
 8012a42:	61a3      	str	r3, [r4, #24]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	bf0c      	ite	eq
 8012a48:	2201      	moveq	r2, #1
 8012a4a:	2202      	movne	r2, #2
 8012a4c:	6122      	str	r2, [r4, #16]
 8012a4e:	b1a5      	cbz	r5, 8012a7a <__d2b+0x92>
 8012a50:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012a54:	4405      	add	r5, r0
 8012a56:	603d      	str	r5, [r7, #0]
 8012a58:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012a5c:	6030      	str	r0, [r6, #0]
 8012a5e:	4620      	mov	r0, r4
 8012a60:	b003      	add	sp, #12
 8012a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a66:	6161      	str	r1, [r4, #20]
 8012a68:	e7ea      	b.n	8012a40 <__d2b+0x58>
 8012a6a:	a801      	add	r0, sp, #4
 8012a6c:	f7ff fcf1 	bl	8012452 <__lo0bits>
 8012a70:	9b01      	ldr	r3, [sp, #4]
 8012a72:	6163      	str	r3, [r4, #20]
 8012a74:	3020      	adds	r0, #32
 8012a76:	2201      	movs	r2, #1
 8012a78:	e7e8      	b.n	8012a4c <__d2b+0x64>
 8012a7a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012a7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012a82:	6038      	str	r0, [r7, #0]
 8012a84:	6918      	ldr	r0, [r3, #16]
 8012a86:	f7ff fcc5 	bl	8012414 <__hi0bits>
 8012a8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012a8e:	e7e5      	b.n	8012a5c <__d2b+0x74>
 8012a90:	0801449b 	.word	0x0801449b
 8012a94:	0801450c 	.word	0x0801450c

08012a98 <__ratio>:
 8012a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a9c:	b085      	sub	sp, #20
 8012a9e:	e9cd 1000 	strd	r1, r0, [sp]
 8012aa2:	a902      	add	r1, sp, #8
 8012aa4:	f7ff ff56 	bl	8012954 <__b2d>
 8012aa8:	9800      	ldr	r0, [sp, #0]
 8012aaa:	a903      	add	r1, sp, #12
 8012aac:	ec55 4b10 	vmov	r4, r5, d0
 8012ab0:	f7ff ff50 	bl	8012954 <__b2d>
 8012ab4:	9b01      	ldr	r3, [sp, #4]
 8012ab6:	6919      	ldr	r1, [r3, #16]
 8012ab8:	9b00      	ldr	r3, [sp, #0]
 8012aba:	691b      	ldr	r3, [r3, #16]
 8012abc:	1ac9      	subs	r1, r1, r3
 8012abe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012ac2:	1a9b      	subs	r3, r3, r2
 8012ac4:	ec5b ab10 	vmov	sl, fp, d0
 8012ac8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	bfce      	itee	gt
 8012ad0:	462a      	movgt	r2, r5
 8012ad2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012ad6:	465a      	movle	r2, fp
 8012ad8:	462f      	mov	r7, r5
 8012ada:	46d9      	mov	r9, fp
 8012adc:	bfcc      	ite	gt
 8012ade:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012ae2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012ae6:	464b      	mov	r3, r9
 8012ae8:	4652      	mov	r2, sl
 8012aea:	4620      	mov	r0, r4
 8012aec:	4639      	mov	r1, r7
 8012aee:	f7ed fead 	bl	800084c <__aeabi_ddiv>
 8012af2:	ec41 0b10 	vmov	d0, r0, r1
 8012af6:	b005      	add	sp, #20
 8012af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012afc <__copybits>:
 8012afc:	3901      	subs	r1, #1
 8012afe:	b570      	push	{r4, r5, r6, lr}
 8012b00:	1149      	asrs	r1, r1, #5
 8012b02:	6914      	ldr	r4, [r2, #16]
 8012b04:	3101      	adds	r1, #1
 8012b06:	f102 0314 	add.w	r3, r2, #20
 8012b0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012b0e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012b12:	1f05      	subs	r5, r0, #4
 8012b14:	42a3      	cmp	r3, r4
 8012b16:	d30c      	bcc.n	8012b32 <__copybits+0x36>
 8012b18:	1aa3      	subs	r3, r4, r2
 8012b1a:	3b11      	subs	r3, #17
 8012b1c:	f023 0303 	bic.w	r3, r3, #3
 8012b20:	3211      	adds	r2, #17
 8012b22:	42a2      	cmp	r2, r4
 8012b24:	bf88      	it	hi
 8012b26:	2300      	movhi	r3, #0
 8012b28:	4418      	add	r0, r3
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	4288      	cmp	r0, r1
 8012b2e:	d305      	bcc.n	8012b3c <__copybits+0x40>
 8012b30:	bd70      	pop	{r4, r5, r6, pc}
 8012b32:	f853 6b04 	ldr.w	r6, [r3], #4
 8012b36:	f845 6f04 	str.w	r6, [r5, #4]!
 8012b3a:	e7eb      	b.n	8012b14 <__copybits+0x18>
 8012b3c:	f840 3b04 	str.w	r3, [r0], #4
 8012b40:	e7f4      	b.n	8012b2c <__copybits+0x30>

08012b42 <__any_on>:
 8012b42:	f100 0214 	add.w	r2, r0, #20
 8012b46:	6900      	ldr	r0, [r0, #16]
 8012b48:	114b      	asrs	r3, r1, #5
 8012b4a:	4298      	cmp	r0, r3
 8012b4c:	b510      	push	{r4, lr}
 8012b4e:	db11      	blt.n	8012b74 <__any_on+0x32>
 8012b50:	dd0a      	ble.n	8012b68 <__any_on+0x26>
 8012b52:	f011 011f 	ands.w	r1, r1, #31
 8012b56:	d007      	beq.n	8012b68 <__any_on+0x26>
 8012b58:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012b5c:	fa24 f001 	lsr.w	r0, r4, r1
 8012b60:	fa00 f101 	lsl.w	r1, r0, r1
 8012b64:	428c      	cmp	r4, r1
 8012b66:	d10b      	bne.n	8012b80 <__any_on+0x3e>
 8012b68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012b6c:	4293      	cmp	r3, r2
 8012b6e:	d803      	bhi.n	8012b78 <__any_on+0x36>
 8012b70:	2000      	movs	r0, #0
 8012b72:	bd10      	pop	{r4, pc}
 8012b74:	4603      	mov	r3, r0
 8012b76:	e7f7      	b.n	8012b68 <__any_on+0x26>
 8012b78:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012b7c:	2900      	cmp	r1, #0
 8012b7e:	d0f5      	beq.n	8012b6c <__any_on+0x2a>
 8012b80:	2001      	movs	r0, #1
 8012b82:	e7f6      	b.n	8012b72 <__any_on+0x30>

08012b84 <__ascii_wctomb>:
 8012b84:	4603      	mov	r3, r0
 8012b86:	4608      	mov	r0, r1
 8012b88:	b141      	cbz	r1, 8012b9c <__ascii_wctomb+0x18>
 8012b8a:	2aff      	cmp	r2, #255	@ 0xff
 8012b8c:	d904      	bls.n	8012b98 <__ascii_wctomb+0x14>
 8012b8e:	228a      	movs	r2, #138	@ 0x8a
 8012b90:	601a      	str	r2, [r3, #0]
 8012b92:	f04f 30ff 	mov.w	r0, #4294967295
 8012b96:	4770      	bx	lr
 8012b98:	700a      	strb	r2, [r1, #0]
 8012b9a:	2001      	movs	r0, #1
 8012b9c:	4770      	bx	lr

08012b9e <__ssputs_r>:
 8012b9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ba2:	688e      	ldr	r6, [r1, #8]
 8012ba4:	461f      	mov	r7, r3
 8012ba6:	42be      	cmp	r6, r7
 8012ba8:	680b      	ldr	r3, [r1, #0]
 8012baa:	4682      	mov	sl, r0
 8012bac:	460c      	mov	r4, r1
 8012bae:	4690      	mov	r8, r2
 8012bb0:	d82d      	bhi.n	8012c0e <__ssputs_r+0x70>
 8012bb2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012bb6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012bba:	d026      	beq.n	8012c0a <__ssputs_r+0x6c>
 8012bbc:	6965      	ldr	r5, [r4, #20]
 8012bbe:	6909      	ldr	r1, [r1, #16]
 8012bc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012bc4:	eba3 0901 	sub.w	r9, r3, r1
 8012bc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012bcc:	1c7b      	adds	r3, r7, #1
 8012bce:	444b      	add	r3, r9
 8012bd0:	106d      	asrs	r5, r5, #1
 8012bd2:	429d      	cmp	r5, r3
 8012bd4:	bf38      	it	cc
 8012bd6:	461d      	movcc	r5, r3
 8012bd8:	0553      	lsls	r3, r2, #21
 8012bda:	d527      	bpl.n	8012c2c <__ssputs_r+0x8e>
 8012bdc:	4629      	mov	r1, r5
 8012bde:	f7fd fda7 	bl	8010730 <_malloc_r>
 8012be2:	4606      	mov	r6, r0
 8012be4:	b360      	cbz	r0, 8012c40 <__ssputs_r+0xa2>
 8012be6:	6921      	ldr	r1, [r4, #16]
 8012be8:	464a      	mov	r2, r9
 8012bea:	f7fe ff54 	bl	8011a96 <memcpy>
 8012bee:	89a3      	ldrh	r3, [r4, #12]
 8012bf0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012bf8:	81a3      	strh	r3, [r4, #12]
 8012bfa:	6126      	str	r6, [r4, #16]
 8012bfc:	6165      	str	r5, [r4, #20]
 8012bfe:	444e      	add	r6, r9
 8012c00:	eba5 0509 	sub.w	r5, r5, r9
 8012c04:	6026      	str	r6, [r4, #0]
 8012c06:	60a5      	str	r5, [r4, #8]
 8012c08:	463e      	mov	r6, r7
 8012c0a:	42be      	cmp	r6, r7
 8012c0c:	d900      	bls.n	8012c10 <__ssputs_r+0x72>
 8012c0e:	463e      	mov	r6, r7
 8012c10:	6820      	ldr	r0, [r4, #0]
 8012c12:	4632      	mov	r2, r6
 8012c14:	4641      	mov	r1, r8
 8012c16:	f000 fb63 	bl	80132e0 <memmove>
 8012c1a:	68a3      	ldr	r3, [r4, #8]
 8012c1c:	1b9b      	subs	r3, r3, r6
 8012c1e:	60a3      	str	r3, [r4, #8]
 8012c20:	6823      	ldr	r3, [r4, #0]
 8012c22:	4433      	add	r3, r6
 8012c24:	6023      	str	r3, [r4, #0]
 8012c26:	2000      	movs	r0, #0
 8012c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c2c:	462a      	mov	r2, r5
 8012c2e:	f000 fb8c 	bl	801334a <_realloc_r>
 8012c32:	4606      	mov	r6, r0
 8012c34:	2800      	cmp	r0, #0
 8012c36:	d1e0      	bne.n	8012bfa <__ssputs_r+0x5c>
 8012c38:	6921      	ldr	r1, [r4, #16]
 8012c3a:	4650      	mov	r0, sl
 8012c3c:	f7fe ff62 	bl	8011b04 <_free_r>
 8012c40:	230c      	movs	r3, #12
 8012c42:	f8ca 3000 	str.w	r3, [sl]
 8012c46:	89a3      	ldrh	r3, [r4, #12]
 8012c48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c4c:	81a3      	strh	r3, [r4, #12]
 8012c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8012c52:	e7e9      	b.n	8012c28 <__ssputs_r+0x8a>

08012c54 <_svfiprintf_r>:
 8012c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c58:	4698      	mov	r8, r3
 8012c5a:	898b      	ldrh	r3, [r1, #12]
 8012c5c:	061b      	lsls	r3, r3, #24
 8012c5e:	b09d      	sub	sp, #116	@ 0x74
 8012c60:	4607      	mov	r7, r0
 8012c62:	460d      	mov	r5, r1
 8012c64:	4614      	mov	r4, r2
 8012c66:	d510      	bpl.n	8012c8a <_svfiprintf_r+0x36>
 8012c68:	690b      	ldr	r3, [r1, #16]
 8012c6a:	b973      	cbnz	r3, 8012c8a <_svfiprintf_r+0x36>
 8012c6c:	2140      	movs	r1, #64	@ 0x40
 8012c6e:	f7fd fd5f 	bl	8010730 <_malloc_r>
 8012c72:	6028      	str	r0, [r5, #0]
 8012c74:	6128      	str	r0, [r5, #16]
 8012c76:	b930      	cbnz	r0, 8012c86 <_svfiprintf_r+0x32>
 8012c78:	230c      	movs	r3, #12
 8012c7a:	603b      	str	r3, [r7, #0]
 8012c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c80:	b01d      	add	sp, #116	@ 0x74
 8012c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c86:	2340      	movs	r3, #64	@ 0x40
 8012c88:	616b      	str	r3, [r5, #20]
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c8e:	2320      	movs	r3, #32
 8012c90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012c94:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c98:	2330      	movs	r3, #48	@ 0x30
 8012c9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012e38 <_svfiprintf_r+0x1e4>
 8012c9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012ca2:	f04f 0901 	mov.w	r9, #1
 8012ca6:	4623      	mov	r3, r4
 8012ca8:	469a      	mov	sl, r3
 8012caa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cae:	b10a      	cbz	r2, 8012cb4 <_svfiprintf_r+0x60>
 8012cb0:	2a25      	cmp	r2, #37	@ 0x25
 8012cb2:	d1f9      	bne.n	8012ca8 <_svfiprintf_r+0x54>
 8012cb4:	ebba 0b04 	subs.w	fp, sl, r4
 8012cb8:	d00b      	beq.n	8012cd2 <_svfiprintf_r+0x7e>
 8012cba:	465b      	mov	r3, fp
 8012cbc:	4622      	mov	r2, r4
 8012cbe:	4629      	mov	r1, r5
 8012cc0:	4638      	mov	r0, r7
 8012cc2:	f7ff ff6c 	bl	8012b9e <__ssputs_r>
 8012cc6:	3001      	adds	r0, #1
 8012cc8:	f000 80a7 	beq.w	8012e1a <_svfiprintf_r+0x1c6>
 8012ccc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012cce:	445a      	add	r2, fp
 8012cd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8012cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	f000 809f 	beq.w	8012e1a <_svfiprintf_r+0x1c6>
 8012cdc:	2300      	movs	r3, #0
 8012cde:	f04f 32ff 	mov.w	r2, #4294967295
 8012ce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ce6:	f10a 0a01 	add.w	sl, sl, #1
 8012cea:	9304      	str	r3, [sp, #16]
 8012cec:	9307      	str	r3, [sp, #28]
 8012cee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012cf2:	931a      	str	r3, [sp, #104]	@ 0x68
 8012cf4:	4654      	mov	r4, sl
 8012cf6:	2205      	movs	r2, #5
 8012cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cfc:	484e      	ldr	r0, [pc, #312]	@ (8012e38 <_svfiprintf_r+0x1e4>)
 8012cfe:	f7ed fa6f 	bl	80001e0 <memchr>
 8012d02:	9a04      	ldr	r2, [sp, #16]
 8012d04:	b9d8      	cbnz	r0, 8012d3e <_svfiprintf_r+0xea>
 8012d06:	06d0      	lsls	r0, r2, #27
 8012d08:	bf44      	itt	mi
 8012d0a:	2320      	movmi	r3, #32
 8012d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012d10:	0711      	lsls	r1, r2, #28
 8012d12:	bf44      	itt	mi
 8012d14:	232b      	movmi	r3, #43	@ 0x2b
 8012d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8012d1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d20:	d015      	beq.n	8012d4e <_svfiprintf_r+0xfa>
 8012d22:	9a07      	ldr	r2, [sp, #28]
 8012d24:	4654      	mov	r4, sl
 8012d26:	2000      	movs	r0, #0
 8012d28:	f04f 0c0a 	mov.w	ip, #10
 8012d2c:	4621      	mov	r1, r4
 8012d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d32:	3b30      	subs	r3, #48	@ 0x30
 8012d34:	2b09      	cmp	r3, #9
 8012d36:	d94b      	bls.n	8012dd0 <_svfiprintf_r+0x17c>
 8012d38:	b1b0      	cbz	r0, 8012d68 <_svfiprintf_r+0x114>
 8012d3a:	9207      	str	r2, [sp, #28]
 8012d3c:	e014      	b.n	8012d68 <_svfiprintf_r+0x114>
 8012d3e:	eba0 0308 	sub.w	r3, r0, r8
 8012d42:	fa09 f303 	lsl.w	r3, r9, r3
 8012d46:	4313      	orrs	r3, r2
 8012d48:	9304      	str	r3, [sp, #16]
 8012d4a:	46a2      	mov	sl, r4
 8012d4c:	e7d2      	b.n	8012cf4 <_svfiprintf_r+0xa0>
 8012d4e:	9b03      	ldr	r3, [sp, #12]
 8012d50:	1d19      	adds	r1, r3, #4
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	9103      	str	r1, [sp, #12]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	bfbb      	ittet	lt
 8012d5a:	425b      	neglt	r3, r3
 8012d5c:	f042 0202 	orrlt.w	r2, r2, #2
 8012d60:	9307      	strge	r3, [sp, #28]
 8012d62:	9307      	strlt	r3, [sp, #28]
 8012d64:	bfb8      	it	lt
 8012d66:	9204      	strlt	r2, [sp, #16]
 8012d68:	7823      	ldrb	r3, [r4, #0]
 8012d6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8012d6c:	d10a      	bne.n	8012d84 <_svfiprintf_r+0x130>
 8012d6e:	7863      	ldrb	r3, [r4, #1]
 8012d70:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d72:	d132      	bne.n	8012dda <_svfiprintf_r+0x186>
 8012d74:	9b03      	ldr	r3, [sp, #12]
 8012d76:	1d1a      	adds	r2, r3, #4
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	9203      	str	r2, [sp, #12]
 8012d7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012d80:	3402      	adds	r4, #2
 8012d82:	9305      	str	r3, [sp, #20]
 8012d84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012e48 <_svfiprintf_r+0x1f4>
 8012d88:	7821      	ldrb	r1, [r4, #0]
 8012d8a:	2203      	movs	r2, #3
 8012d8c:	4650      	mov	r0, sl
 8012d8e:	f7ed fa27 	bl	80001e0 <memchr>
 8012d92:	b138      	cbz	r0, 8012da4 <_svfiprintf_r+0x150>
 8012d94:	9b04      	ldr	r3, [sp, #16]
 8012d96:	eba0 000a 	sub.w	r0, r0, sl
 8012d9a:	2240      	movs	r2, #64	@ 0x40
 8012d9c:	4082      	lsls	r2, r0
 8012d9e:	4313      	orrs	r3, r2
 8012da0:	3401      	adds	r4, #1
 8012da2:	9304      	str	r3, [sp, #16]
 8012da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012da8:	4824      	ldr	r0, [pc, #144]	@ (8012e3c <_svfiprintf_r+0x1e8>)
 8012daa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012dae:	2206      	movs	r2, #6
 8012db0:	f7ed fa16 	bl	80001e0 <memchr>
 8012db4:	2800      	cmp	r0, #0
 8012db6:	d036      	beq.n	8012e26 <_svfiprintf_r+0x1d2>
 8012db8:	4b21      	ldr	r3, [pc, #132]	@ (8012e40 <_svfiprintf_r+0x1ec>)
 8012dba:	bb1b      	cbnz	r3, 8012e04 <_svfiprintf_r+0x1b0>
 8012dbc:	9b03      	ldr	r3, [sp, #12]
 8012dbe:	3307      	adds	r3, #7
 8012dc0:	f023 0307 	bic.w	r3, r3, #7
 8012dc4:	3308      	adds	r3, #8
 8012dc6:	9303      	str	r3, [sp, #12]
 8012dc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012dca:	4433      	add	r3, r6
 8012dcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8012dce:	e76a      	b.n	8012ca6 <_svfiprintf_r+0x52>
 8012dd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8012dd4:	460c      	mov	r4, r1
 8012dd6:	2001      	movs	r0, #1
 8012dd8:	e7a8      	b.n	8012d2c <_svfiprintf_r+0xd8>
 8012dda:	2300      	movs	r3, #0
 8012ddc:	3401      	adds	r4, #1
 8012dde:	9305      	str	r3, [sp, #20]
 8012de0:	4619      	mov	r1, r3
 8012de2:	f04f 0c0a 	mov.w	ip, #10
 8012de6:	4620      	mov	r0, r4
 8012de8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012dec:	3a30      	subs	r2, #48	@ 0x30
 8012dee:	2a09      	cmp	r2, #9
 8012df0:	d903      	bls.n	8012dfa <_svfiprintf_r+0x1a6>
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d0c6      	beq.n	8012d84 <_svfiprintf_r+0x130>
 8012df6:	9105      	str	r1, [sp, #20]
 8012df8:	e7c4      	b.n	8012d84 <_svfiprintf_r+0x130>
 8012dfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8012dfe:	4604      	mov	r4, r0
 8012e00:	2301      	movs	r3, #1
 8012e02:	e7f0      	b.n	8012de6 <_svfiprintf_r+0x192>
 8012e04:	ab03      	add	r3, sp, #12
 8012e06:	9300      	str	r3, [sp, #0]
 8012e08:	462a      	mov	r2, r5
 8012e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8012e44 <_svfiprintf_r+0x1f0>)
 8012e0c:	a904      	add	r1, sp, #16
 8012e0e:	4638      	mov	r0, r7
 8012e10:	f3af 8000 	nop.w
 8012e14:	1c42      	adds	r2, r0, #1
 8012e16:	4606      	mov	r6, r0
 8012e18:	d1d6      	bne.n	8012dc8 <_svfiprintf_r+0x174>
 8012e1a:	89ab      	ldrh	r3, [r5, #12]
 8012e1c:	065b      	lsls	r3, r3, #25
 8012e1e:	f53f af2d 	bmi.w	8012c7c <_svfiprintf_r+0x28>
 8012e22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012e24:	e72c      	b.n	8012c80 <_svfiprintf_r+0x2c>
 8012e26:	ab03      	add	r3, sp, #12
 8012e28:	9300      	str	r3, [sp, #0]
 8012e2a:	462a      	mov	r2, r5
 8012e2c:	4b05      	ldr	r3, [pc, #20]	@ (8012e44 <_svfiprintf_r+0x1f0>)
 8012e2e:	a904      	add	r1, sp, #16
 8012e30:	4638      	mov	r0, r7
 8012e32:	f000 f879 	bl	8012f28 <_printf_i>
 8012e36:	e7ed      	b.n	8012e14 <_svfiprintf_r+0x1c0>
 8012e38:	08014565 	.word	0x08014565
 8012e3c:	0801456f 	.word	0x0801456f
 8012e40:	00000000 	.word	0x00000000
 8012e44:	08012b9f 	.word	0x08012b9f
 8012e48:	0801456b 	.word	0x0801456b

08012e4c <_printf_common>:
 8012e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e50:	4616      	mov	r6, r2
 8012e52:	4698      	mov	r8, r3
 8012e54:	688a      	ldr	r2, [r1, #8]
 8012e56:	690b      	ldr	r3, [r1, #16]
 8012e58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012e5c:	4293      	cmp	r3, r2
 8012e5e:	bfb8      	it	lt
 8012e60:	4613      	movlt	r3, r2
 8012e62:	6033      	str	r3, [r6, #0]
 8012e64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012e68:	4607      	mov	r7, r0
 8012e6a:	460c      	mov	r4, r1
 8012e6c:	b10a      	cbz	r2, 8012e72 <_printf_common+0x26>
 8012e6e:	3301      	adds	r3, #1
 8012e70:	6033      	str	r3, [r6, #0]
 8012e72:	6823      	ldr	r3, [r4, #0]
 8012e74:	0699      	lsls	r1, r3, #26
 8012e76:	bf42      	ittt	mi
 8012e78:	6833      	ldrmi	r3, [r6, #0]
 8012e7a:	3302      	addmi	r3, #2
 8012e7c:	6033      	strmi	r3, [r6, #0]
 8012e7e:	6825      	ldr	r5, [r4, #0]
 8012e80:	f015 0506 	ands.w	r5, r5, #6
 8012e84:	d106      	bne.n	8012e94 <_printf_common+0x48>
 8012e86:	f104 0a19 	add.w	sl, r4, #25
 8012e8a:	68e3      	ldr	r3, [r4, #12]
 8012e8c:	6832      	ldr	r2, [r6, #0]
 8012e8e:	1a9b      	subs	r3, r3, r2
 8012e90:	42ab      	cmp	r3, r5
 8012e92:	dc26      	bgt.n	8012ee2 <_printf_common+0x96>
 8012e94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012e98:	6822      	ldr	r2, [r4, #0]
 8012e9a:	3b00      	subs	r3, #0
 8012e9c:	bf18      	it	ne
 8012e9e:	2301      	movne	r3, #1
 8012ea0:	0692      	lsls	r2, r2, #26
 8012ea2:	d42b      	bmi.n	8012efc <_printf_common+0xb0>
 8012ea4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012ea8:	4641      	mov	r1, r8
 8012eaa:	4638      	mov	r0, r7
 8012eac:	47c8      	blx	r9
 8012eae:	3001      	adds	r0, #1
 8012eb0:	d01e      	beq.n	8012ef0 <_printf_common+0xa4>
 8012eb2:	6823      	ldr	r3, [r4, #0]
 8012eb4:	6922      	ldr	r2, [r4, #16]
 8012eb6:	f003 0306 	and.w	r3, r3, #6
 8012eba:	2b04      	cmp	r3, #4
 8012ebc:	bf02      	ittt	eq
 8012ebe:	68e5      	ldreq	r5, [r4, #12]
 8012ec0:	6833      	ldreq	r3, [r6, #0]
 8012ec2:	1aed      	subeq	r5, r5, r3
 8012ec4:	68a3      	ldr	r3, [r4, #8]
 8012ec6:	bf0c      	ite	eq
 8012ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012ecc:	2500      	movne	r5, #0
 8012ece:	4293      	cmp	r3, r2
 8012ed0:	bfc4      	itt	gt
 8012ed2:	1a9b      	subgt	r3, r3, r2
 8012ed4:	18ed      	addgt	r5, r5, r3
 8012ed6:	2600      	movs	r6, #0
 8012ed8:	341a      	adds	r4, #26
 8012eda:	42b5      	cmp	r5, r6
 8012edc:	d11a      	bne.n	8012f14 <_printf_common+0xc8>
 8012ede:	2000      	movs	r0, #0
 8012ee0:	e008      	b.n	8012ef4 <_printf_common+0xa8>
 8012ee2:	2301      	movs	r3, #1
 8012ee4:	4652      	mov	r2, sl
 8012ee6:	4641      	mov	r1, r8
 8012ee8:	4638      	mov	r0, r7
 8012eea:	47c8      	blx	r9
 8012eec:	3001      	adds	r0, #1
 8012eee:	d103      	bne.n	8012ef8 <_printf_common+0xac>
 8012ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ef8:	3501      	adds	r5, #1
 8012efa:	e7c6      	b.n	8012e8a <_printf_common+0x3e>
 8012efc:	18e1      	adds	r1, r4, r3
 8012efe:	1c5a      	adds	r2, r3, #1
 8012f00:	2030      	movs	r0, #48	@ 0x30
 8012f02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012f06:	4422      	add	r2, r4
 8012f08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012f0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012f10:	3302      	adds	r3, #2
 8012f12:	e7c7      	b.n	8012ea4 <_printf_common+0x58>
 8012f14:	2301      	movs	r3, #1
 8012f16:	4622      	mov	r2, r4
 8012f18:	4641      	mov	r1, r8
 8012f1a:	4638      	mov	r0, r7
 8012f1c:	47c8      	blx	r9
 8012f1e:	3001      	adds	r0, #1
 8012f20:	d0e6      	beq.n	8012ef0 <_printf_common+0xa4>
 8012f22:	3601      	adds	r6, #1
 8012f24:	e7d9      	b.n	8012eda <_printf_common+0x8e>
	...

08012f28 <_printf_i>:
 8012f28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012f2c:	7e0f      	ldrb	r7, [r1, #24]
 8012f2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012f30:	2f78      	cmp	r7, #120	@ 0x78
 8012f32:	4691      	mov	r9, r2
 8012f34:	4680      	mov	r8, r0
 8012f36:	460c      	mov	r4, r1
 8012f38:	469a      	mov	sl, r3
 8012f3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012f3e:	d807      	bhi.n	8012f50 <_printf_i+0x28>
 8012f40:	2f62      	cmp	r7, #98	@ 0x62
 8012f42:	d80a      	bhi.n	8012f5a <_printf_i+0x32>
 8012f44:	2f00      	cmp	r7, #0
 8012f46:	f000 80d1 	beq.w	80130ec <_printf_i+0x1c4>
 8012f4a:	2f58      	cmp	r7, #88	@ 0x58
 8012f4c:	f000 80b8 	beq.w	80130c0 <_printf_i+0x198>
 8012f50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012f54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012f58:	e03a      	b.n	8012fd0 <_printf_i+0xa8>
 8012f5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012f5e:	2b15      	cmp	r3, #21
 8012f60:	d8f6      	bhi.n	8012f50 <_printf_i+0x28>
 8012f62:	a101      	add	r1, pc, #4	@ (adr r1, 8012f68 <_printf_i+0x40>)
 8012f64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012f68:	08012fc1 	.word	0x08012fc1
 8012f6c:	08012fd5 	.word	0x08012fd5
 8012f70:	08012f51 	.word	0x08012f51
 8012f74:	08012f51 	.word	0x08012f51
 8012f78:	08012f51 	.word	0x08012f51
 8012f7c:	08012f51 	.word	0x08012f51
 8012f80:	08012fd5 	.word	0x08012fd5
 8012f84:	08012f51 	.word	0x08012f51
 8012f88:	08012f51 	.word	0x08012f51
 8012f8c:	08012f51 	.word	0x08012f51
 8012f90:	08012f51 	.word	0x08012f51
 8012f94:	080130d3 	.word	0x080130d3
 8012f98:	08012fff 	.word	0x08012fff
 8012f9c:	0801308d 	.word	0x0801308d
 8012fa0:	08012f51 	.word	0x08012f51
 8012fa4:	08012f51 	.word	0x08012f51
 8012fa8:	080130f5 	.word	0x080130f5
 8012fac:	08012f51 	.word	0x08012f51
 8012fb0:	08012fff 	.word	0x08012fff
 8012fb4:	08012f51 	.word	0x08012f51
 8012fb8:	08012f51 	.word	0x08012f51
 8012fbc:	08013095 	.word	0x08013095
 8012fc0:	6833      	ldr	r3, [r6, #0]
 8012fc2:	1d1a      	adds	r2, r3, #4
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	6032      	str	r2, [r6, #0]
 8012fc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012fcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012fd0:	2301      	movs	r3, #1
 8012fd2:	e09c      	b.n	801310e <_printf_i+0x1e6>
 8012fd4:	6833      	ldr	r3, [r6, #0]
 8012fd6:	6820      	ldr	r0, [r4, #0]
 8012fd8:	1d19      	adds	r1, r3, #4
 8012fda:	6031      	str	r1, [r6, #0]
 8012fdc:	0606      	lsls	r6, r0, #24
 8012fde:	d501      	bpl.n	8012fe4 <_printf_i+0xbc>
 8012fe0:	681d      	ldr	r5, [r3, #0]
 8012fe2:	e003      	b.n	8012fec <_printf_i+0xc4>
 8012fe4:	0645      	lsls	r5, r0, #25
 8012fe6:	d5fb      	bpl.n	8012fe0 <_printf_i+0xb8>
 8012fe8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012fec:	2d00      	cmp	r5, #0
 8012fee:	da03      	bge.n	8012ff8 <_printf_i+0xd0>
 8012ff0:	232d      	movs	r3, #45	@ 0x2d
 8012ff2:	426d      	negs	r5, r5
 8012ff4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ff8:	4858      	ldr	r0, [pc, #352]	@ (801315c <_printf_i+0x234>)
 8012ffa:	230a      	movs	r3, #10
 8012ffc:	e011      	b.n	8013022 <_printf_i+0xfa>
 8012ffe:	6821      	ldr	r1, [r4, #0]
 8013000:	6833      	ldr	r3, [r6, #0]
 8013002:	0608      	lsls	r0, r1, #24
 8013004:	f853 5b04 	ldr.w	r5, [r3], #4
 8013008:	d402      	bmi.n	8013010 <_printf_i+0xe8>
 801300a:	0649      	lsls	r1, r1, #25
 801300c:	bf48      	it	mi
 801300e:	b2ad      	uxthmi	r5, r5
 8013010:	2f6f      	cmp	r7, #111	@ 0x6f
 8013012:	4852      	ldr	r0, [pc, #328]	@ (801315c <_printf_i+0x234>)
 8013014:	6033      	str	r3, [r6, #0]
 8013016:	bf14      	ite	ne
 8013018:	230a      	movne	r3, #10
 801301a:	2308      	moveq	r3, #8
 801301c:	2100      	movs	r1, #0
 801301e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013022:	6866      	ldr	r6, [r4, #4]
 8013024:	60a6      	str	r6, [r4, #8]
 8013026:	2e00      	cmp	r6, #0
 8013028:	db05      	blt.n	8013036 <_printf_i+0x10e>
 801302a:	6821      	ldr	r1, [r4, #0]
 801302c:	432e      	orrs	r6, r5
 801302e:	f021 0104 	bic.w	r1, r1, #4
 8013032:	6021      	str	r1, [r4, #0]
 8013034:	d04b      	beq.n	80130ce <_printf_i+0x1a6>
 8013036:	4616      	mov	r6, r2
 8013038:	fbb5 f1f3 	udiv	r1, r5, r3
 801303c:	fb03 5711 	mls	r7, r3, r1, r5
 8013040:	5dc7      	ldrb	r7, [r0, r7]
 8013042:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013046:	462f      	mov	r7, r5
 8013048:	42bb      	cmp	r3, r7
 801304a:	460d      	mov	r5, r1
 801304c:	d9f4      	bls.n	8013038 <_printf_i+0x110>
 801304e:	2b08      	cmp	r3, #8
 8013050:	d10b      	bne.n	801306a <_printf_i+0x142>
 8013052:	6823      	ldr	r3, [r4, #0]
 8013054:	07df      	lsls	r7, r3, #31
 8013056:	d508      	bpl.n	801306a <_printf_i+0x142>
 8013058:	6923      	ldr	r3, [r4, #16]
 801305a:	6861      	ldr	r1, [r4, #4]
 801305c:	4299      	cmp	r1, r3
 801305e:	bfde      	ittt	le
 8013060:	2330      	movle	r3, #48	@ 0x30
 8013062:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013066:	f106 36ff 	addle.w	r6, r6, #4294967295
 801306a:	1b92      	subs	r2, r2, r6
 801306c:	6122      	str	r2, [r4, #16]
 801306e:	f8cd a000 	str.w	sl, [sp]
 8013072:	464b      	mov	r3, r9
 8013074:	aa03      	add	r2, sp, #12
 8013076:	4621      	mov	r1, r4
 8013078:	4640      	mov	r0, r8
 801307a:	f7ff fee7 	bl	8012e4c <_printf_common>
 801307e:	3001      	adds	r0, #1
 8013080:	d14a      	bne.n	8013118 <_printf_i+0x1f0>
 8013082:	f04f 30ff 	mov.w	r0, #4294967295
 8013086:	b004      	add	sp, #16
 8013088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801308c:	6823      	ldr	r3, [r4, #0]
 801308e:	f043 0320 	orr.w	r3, r3, #32
 8013092:	6023      	str	r3, [r4, #0]
 8013094:	4832      	ldr	r0, [pc, #200]	@ (8013160 <_printf_i+0x238>)
 8013096:	2778      	movs	r7, #120	@ 0x78
 8013098:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801309c:	6823      	ldr	r3, [r4, #0]
 801309e:	6831      	ldr	r1, [r6, #0]
 80130a0:	061f      	lsls	r7, r3, #24
 80130a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80130a6:	d402      	bmi.n	80130ae <_printf_i+0x186>
 80130a8:	065f      	lsls	r7, r3, #25
 80130aa:	bf48      	it	mi
 80130ac:	b2ad      	uxthmi	r5, r5
 80130ae:	6031      	str	r1, [r6, #0]
 80130b0:	07d9      	lsls	r1, r3, #31
 80130b2:	bf44      	itt	mi
 80130b4:	f043 0320 	orrmi.w	r3, r3, #32
 80130b8:	6023      	strmi	r3, [r4, #0]
 80130ba:	b11d      	cbz	r5, 80130c4 <_printf_i+0x19c>
 80130bc:	2310      	movs	r3, #16
 80130be:	e7ad      	b.n	801301c <_printf_i+0xf4>
 80130c0:	4826      	ldr	r0, [pc, #152]	@ (801315c <_printf_i+0x234>)
 80130c2:	e7e9      	b.n	8013098 <_printf_i+0x170>
 80130c4:	6823      	ldr	r3, [r4, #0]
 80130c6:	f023 0320 	bic.w	r3, r3, #32
 80130ca:	6023      	str	r3, [r4, #0]
 80130cc:	e7f6      	b.n	80130bc <_printf_i+0x194>
 80130ce:	4616      	mov	r6, r2
 80130d0:	e7bd      	b.n	801304e <_printf_i+0x126>
 80130d2:	6833      	ldr	r3, [r6, #0]
 80130d4:	6825      	ldr	r5, [r4, #0]
 80130d6:	6961      	ldr	r1, [r4, #20]
 80130d8:	1d18      	adds	r0, r3, #4
 80130da:	6030      	str	r0, [r6, #0]
 80130dc:	062e      	lsls	r6, r5, #24
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	d501      	bpl.n	80130e6 <_printf_i+0x1be>
 80130e2:	6019      	str	r1, [r3, #0]
 80130e4:	e002      	b.n	80130ec <_printf_i+0x1c4>
 80130e6:	0668      	lsls	r0, r5, #25
 80130e8:	d5fb      	bpl.n	80130e2 <_printf_i+0x1ba>
 80130ea:	8019      	strh	r1, [r3, #0]
 80130ec:	2300      	movs	r3, #0
 80130ee:	6123      	str	r3, [r4, #16]
 80130f0:	4616      	mov	r6, r2
 80130f2:	e7bc      	b.n	801306e <_printf_i+0x146>
 80130f4:	6833      	ldr	r3, [r6, #0]
 80130f6:	1d1a      	adds	r2, r3, #4
 80130f8:	6032      	str	r2, [r6, #0]
 80130fa:	681e      	ldr	r6, [r3, #0]
 80130fc:	6862      	ldr	r2, [r4, #4]
 80130fe:	2100      	movs	r1, #0
 8013100:	4630      	mov	r0, r6
 8013102:	f7ed f86d 	bl	80001e0 <memchr>
 8013106:	b108      	cbz	r0, 801310c <_printf_i+0x1e4>
 8013108:	1b80      	subs	r0, r0, r6
 801310a:	6060      	str	r0, [r4, #4]
 801310c:	6863      	ldr	r3, [r4, #4]
 801310e:	6123      	str	r3, [r4, #16]
 8013110:	2300      	movs	r3, #0
 8013112:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013116:	e7aa      	b.n	801306e <_printf_i+0x146>
 8013118:	6923      	ldr	r3, [r4, #16]
 801311a:	4632      	mov	r2, r6
 801311c:	4649      	mov	r1, r9
 801311e:	4640      	mov	r0, r8
 8013120:	47d0      	blx	sl
 8013122:	3001      	adds	r0, #1
 8013124:	d0ad      	beq.n	8013082 <_printf_i+0x15a>
 8013126:	6823      	ldr	r3, [r4, #0]
 8013128:	079b      	lsls	r3, r3, #30
 801312a:	d413      	bmi.n	8013154 <_printf_i+0x22c>
 801312c:	68e0      	ldr	r0, [r4, #12]
 801312e:	9b03      	ldr	r3, [sp, #12]
 8013130:	4298      	cmp	r0, r3
 8013132:	bfb8      	it	lt
 8013134:	4618      	movlt	r0, r3
 8013136:	e7a6      	b.n	8013086 <_printf_i+0x15e>
 8013138:	2301      	movs	r3, #1
 801313a:	4632      	mov	r2, r6
 801313c:	4649      	mov	r1, r9
 801313e:	4640      	mov	r0, r8
 8013140:	47d0      	blx	sl
 8013142:	3001      	adds	r0, #1
 8013144:	d09d      	beq.n	8013082 <_printf_i+0x15a>
 8013146:	3501      	adds	r5, #1
 8013148:	68e3      	ldr	r3, [r4, #12]
 801314a:	9903      	ldr	r1, [sp, #12]
 801314c:	1a5b      	subs	r3, r3, r1
 801314e:	42ab      	cmp	r3, r5
 8013150:	dcf2      	bgt.n	8013138 <_printf_i+0x210>
 8013152:	e7eb      	b.n	801312c <_printf_i+0x204>
 8013154:	2500      	movs	r5, #0
 8013156:	f104 0619 	add.w	r6, r4, #25
 801315a:	e7f5      	b.n	8013148 <_printf_i+0x220>
 801315c:	08014576 	.word	0x08014576
 8013160:	08014587 	.word	0x08014587

08013164 <__sflush_r>:
 8013164:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801316c:	0716      	lsls	r6, r2, #28
 801316e:	4605      	mov	r5, r0
 8013170:	460c      	mov	r4, r1
 8013172:	d454      	bmi.n	801321e <__sflush_r+0xba>
 8013174:	684b      	ldr	r3, [r1, #4]
 8013176:	2b00      	cmp	r3, #0
 8013178:	dc02      	bgt.n	8013180 <__sflush_r+0x1c>
 801317a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801317c:	2b00      	cmp	r3, #0
 801317e:	dd48      	ble.n	8013212 <__sflush_r+0xae>
 8013180:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013182:	2e00      	cmp	r6, #0
 8013184:	d045      	beq.n	8013212 <__sflush_r+0xae>
 8013186:	2300      	movs	r3, #0
 8013188:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801318c:	682f      	ldr	r7, [r5, #0]
 801318e:	6a21      	ldr	r1, [r4, #32]
 8013190:	602b      	str	r3, [r5, #0]
 8013192:	d030      	beq.n	80131f6 <__sflush_r+0x92>
 8013194:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013196:	89a3      	ldrh	r3, [r4, #12]
 8013198:	0759      	lsls	r1, r3, #29
 801319a:	d505      	bpl.n	80131a8 <__sflush_r+0x44>
 801319c:	6863      	ldr	r3, [r4, #4]
 801319e:	1ad2      	subs	r2, r2, r3
 80131a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80131a2:	b10b      	cbz	r3, 80131a8 <__sflush_r+0x44>
 80131a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80131a6:	1ad2      	subs	r2, r2, r3
 80131a8:	2300      	movs	r3, #0
 80131aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80131ac:	6a21      	ldr	r1, [r4, #32]
 80131ae:	4628      	mov	r0, r5
 80131b0:	47b0      	blx	r6
 80131b2:	1c43      	adds	r3, r0, #1
 80131b4:	89a3      	ldrh	r3, [r4, #12]
 80131b6:	d106      	bne.n	80131c6 <__sflush_r+0x62>
 80131b8:	6829      	ldr	r1, [r5, #0]
 80131ba:	291d      	cmp	r1, #29
 80131bc:	d82b      	bhi.n	8013216 <__sflush_r+0xb2>
 80131be:	4a2a      	ldr	r2, [pc, #168]	@ (8013268 <__sflush_r+0x104>)
 80131c0:	40ca      	lsrs	r2, r1
 80131c2:	07d6      	lsls	r6, r2, #31
 80131c4:	d527      	bpl.n	8013216 <__sflush_r+0xb2>
 80131c6:	2200      	movs	r2, #0
 80131c8:	6062      	str	r2, [r4, #4]
 80131ca:	04d9      	lsls	r1, r3, #19
 80131cc:	6922      	ldr	r2, [r4, #16]
 80131ce:	6022      	str	r2, [r4, #0]
 80131d0:	d504      	bpl.n	80131dc <__sflush_r+0x78>
 80131d2:	1c42      	adds	r2, r0, #1
 80131d4:	d101      	bne.n	80131da <__sflush_r+0x76>
 80131d6:	682b      	ldr	r3, [r5, #0]
 80131d8:	b903      	cbnz	r3, 80131dc <__sflush_r+0x78>
 80131da:	6560      	str	r0, [r4, #84]	@ 0x54
 80131dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80131de:	602f      	str	r7, [r5, #0]
 80131e0:	b1b9      	cbz	r1, 8013212 <__sflush_r+0xae>
 80131e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80131e6:	4299      	cmp	r1, r3
 80131e8:	d002      	beq.n	80131f0 <__sflush_r+0x8c>
 80131ea:	4628      	mov	r0, r5
 80131ec:	f7fe fc8a 	bl	8011b04 <_free_r>
 80131f0:	2300      	movs	r3, #0
 80131f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80131f4:	e00d      	b.n	8013212 <__sflush_r+0xae>
 80131f6:	2301      	movs	r3, #1
 80131f8:	4628      	mov	r0, r5
 80131fa:	47b0      	blx	r6
 80131fc:	4602      	mov	r2, r0
 80131fe:	1c50      	adds	r0, r2, #1
 8013200:	d1c9      	bne.n	8013196 <__sflush_r+0x32>
 8013202:	682b      	ldr	r3, [r5, #0]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d0c6      	beq.n	8013196 <__sflush_r+0x32>
 8013208:	2b1d      	cmp	r3, #29
 801320a:	d001      	beq.n	8013210 <__sflush_r+0xac>
 801320c:	2b16      	cmp	r3, #22
 801320e:	d11e      	bne.n	801324e <__sflush_r+0xea>
 8013210:	602f      	str	r7, [r5, #0]
 8013212:	2000      	movs	r0, #0
 8013214:	e022      	b.n	801325c <__sflush_r+0xf8>
 8013216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801321a:	b21b      	sxth	r3, r3
 801321c:	e01b      	b.n	8013256 <__sflush_r+0xf2>
 801321e:	690f      	ldr	r7, [r1, #16]
 8013220:	2f00      	cmp	r7, #0
 8013222:	d0f6      	beq.n	8013212 <__sflush_r+0xae>
 8013224:	0793      	lsls	r3, r2, #30
 8013226:	680e      	ldr	r6, [r1, #0]
 8013228:	bf08      	it	eq
 801322a:	694b      	ldreq	r3, [r1, #20]
 801322c:	600f      	str	r7, [r1, #0]
 801322e:	bf18      	it	ne
 8013230:	2300      	movne	r3, #0
 8013232:	eba6 0807 	sub.w	r8, r6, r7
 8013236:	608b      	str	r3, [r1, #8]
 8013238:	f1b8 0f00 	cmp.w	r8, #0
 801323c:	dde9      	ble.n	8013212 <__sflush_r+0xae>
 801323e:	6a21      	ldr	r1, [r4, #32]
 8013240:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013242:	4643      	mov	r3, r8
 8013244:	463a      	mov	r2, r7
 8013246:	4628      	mov	r0, r5
 8013248:	47b0      	blx	r6
 801324a:	2800      	cmp	r0, #0
 801324c:	dc08      	bgt.n	8013260 <__sflush_r+0xfc>
 801324e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013256:	81a3      	strh	r3, [r4, #12]
 8013258:	f04f 30ff 	mov.w	r0, #4294967295
 801325c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013260:	4407      	add	r7, r0
 8013262:	eba8 0800 	sub.w	r8, r8, r0
 8013266:	e7e7      	b.n	8013238 <__sflush_r+0xd4>
 8013268:	20400001 	.word	0x20400001

0801326c <_fflush_r>:
 801326c:	b538      	push	{r3, r4, r5, lr}
 801326e:	690b      	ldr	r3, [r1, #16]
 8013270:	4605      	mov	r5, r0
 8013272:	460c      	mov	r4, r1
 8013274:	b913      	cbnz	r3, 801327c <_fflush_r+0x10>
 8013276:	2500      	movs	r5, #0
 8013278:	4628      	mov	r0, r5
 801327a:	bd38      	pop	{r3, r4, r5, pc}
 801327c:	b118      	cbz	r0, 8013286 <_fflush_r+0x1a>
 801327e:	6a03      	ldr	r3, [r0, #32]
 8013280:	b90b      	cbnz	r3, 8013286 <_fflush_r+0x1a>
 8013282:	f7fe fa01 	bl	8011688 <__sinit>
 8013286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d0f3      	beq.n	8013276 <_fflush_r+0xa>
 801328e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013290:	07d0      	lsls	r0, r2, #31
 8013292:	d404      	bmi.n	801329e <_fflush_r+0x32>
 8013294:	0599      	lsls	r1, r3, #22
 8013296:	d402      	bmi.n	801329e <_fflush_r+0x32>
 8013298:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801329a:	f7fe fbf2 	bl	8011a82 <__retarget_lock_acquire_recursive>
 801329e:	4628      	mov	r0, r5
 80132a0:	4621      	mov	r1, r4
 80132a2:	f7ff ff5f 	bl	8013164 <__sflush_r>
 80132a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80132a8:	07da      	lsls	r2, r3, #31
 80132aa:	4605      	mov	r5, r0
 80132ac:	d4e4      	bmi.n	8013278 <_fflush_r+0xc>
 80132ae:	89a3      	ldrh	r3, [r4, #12]
 80132b0:	059b      	lsls	r3, r3, #22
 80132b2:	d4e1      	bmi.n	8013278 <_fflush_r+0xc>
 80132b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80132b6:	f7fe fbe5 	bl	8011a84 <__retarget_lock_release_recursive>
 80132ba:	e7dd      	b.n	8013278 <_fflush_r+0xc>

080132bc <fiprintf>:
 80132bc:	b40e      	push	{r1, r2, r3}
 80132be:	b503      	push	{r0, r1, lr}
 80132c0:	4601      	mov	r1, r0
 80132c2:	ab03      	add	r3, sp, #12
 80132c4:	4805      	ldr	r0, [pc, #20]	@ (80132dc <fiprintf+0x20>)
 80132c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80132ca:	6800      	ldr	r0, [r0, #0]
 80132cc:	9301      	str	r3, [sp, #4]
 80132ce:	f000 f893 	bl	80133f8 <_vfiprintf_r>
 80132d2:	b002      	add	sp, #8
 80132d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80132d8:	b003      	add	sp, #12
 80132da:	4770      	bx	lr
 80132dc:	200003d4 	.word	0x200003d4

080132e0 <memmove>:
 80132e0:	4288      	cmp	r0, r1
 80132e2:	b510      	push	{r4, lr}
 80132e4:	eb01 0402 	add.w	r4, r1, r2
 80132e8:	d902      	bls.n	80132f0 <memmove+0x10>
 80132ea:	4284      	cmp	r4, r0
 80132ec:	4623      	mov	r3, r4
 80132ee:	d807      	bhi.n	8013300 <memmove+0x20>
 80132f0:	1e43      	subs	r3, r0, #1
 80132f2:	42a1      	cmp	r1, r4
 80132f4:	d008      	beq.n	8013308 <memmove+0x28>
 80132f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80132fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80132fe:	e7f8      	b.n	80132f2 <memmove+0x12>
 8013300:	4402      	add	r2, r0
 8013302:	4601      	mov	r1, r0
 8013304:	428a      	cmp	r2, r1
 8013306:	d100      	bne.n	801330a <memmove+0x2a>
 8013308:	bd10      	pop	{r4, pc}
 801330a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801330e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013312:	e7f7      	b.n	8013304 <memmove+0x24>

08013314 <abort>:
 8013314:	b508      	push	{r3, lr}
 8013316:	2006      	movs	r0, #6
 8013318:	f000 fa42 	bl	80137a0 <raise>
 801331c:	2001      	movs	r0, #1
 801331e:	f7f0 f965 	bl	80035ec <_exit>

08013322 <_calloc_r>:
 8013322:	b570      	push	{r4, r5, r6, lr}
 8013324:	fba1 5402 	umull	r5, r4, r1, r2
 8013328:	b934      	cbnz	r4, 8013338 <_calloc_r+0x16>
 801332a:	4629      	mov	r1, r5
 801332c:	f7fd fa00 	bl	8010730 <_malloc_r>
 8013330:	4606      	mov	r6, r0
 8013332:	b928      	cbnz	r0, 8013340 <_calloc_r+0x1e>
 8013334:	4630      	mov	r0, r6
 8013336:	bd70      	pop	{r4, r5, r6, pc}
 8013338:	220c      	movs	r2, #12
 801333a:	6002      	str	r2, [r0, #0]
 801333c:	2600      	movs	r6, #0
 801333e:	e7f9      	b.n	8013334 <_calloc_r+0x12>
 8013340:	462a      	mov	r2, r5
 8013342:	4621      	mov	r1, r4
 8013344:	f7fe fa3b 	bl	80117be <memset>
 8013348:	e7f4      	b.n	8013334 <_calloc_r+0x12>

0801334a <_realloc_r>:
 801334a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801334e:	4607      	mov	r7, r0
 8013350:	4614      	mov	r4, r2
 8013352:	460d      	mov	r5, r1
 8013354:	b921      	cbnz	r1, 8013360 <_realloc_r+0x16>
 8013356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801335a:	4611      	mov	r1, r2
 801335c:	f7fd b9e8 	b.w	8010730 <_malloc_r>
 8013360:	b92a      	cbnz	r2, 801336e <_realloc_r+0x24>
 8013362:	f7fe fbcf 	bl	8011b04 <_free_r>
 8013366:	4625      	mov	r5, r4
 8013368:	4628      	mov	r0, r5
 801336a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801336e:	f000 fa33 	bl	80137d8 <_malloc_usable_size_r>
 8013372:	4284      	cmp	r4, r0
 8013374:	4606      	mov	r6, r0
 8013376:	d802      	bhi.n	801337e <_realloc_r+0x34>
 8013378:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801337c:	d8f4      	bhi.n	8013368 <_realloc_r+0x1e>
 801337e:	4621      	mov	r1, r4
 8013380:	4638      	mov	r0, r7
 8013382:	f7fd f9d5 	bl	8010730 <_malloc_r>
 8013386:	4680      	mov	r8, r0
 8013388:	b908      	cbnz	r0, 801338e <_realloc_r+0x44>
 801338a:	4645      	mov	r5, r8
 801338c:	e7ec      	b.n	8013368 <_realloc_r+0x1e>
 801338e:	42b4      	cmp	r4, r6
 8013390:	4622      	mov	r2, r4
 8013392:	4629      	mov	r1, r5
 8013394:	bf28      	it	cs
 8013396:	4632      	movcs	r2, r6
 8013398:	f7fe fb7d 	bl	8011a96 <memcpy>
 801339c:	4629      	mov	r1, r5
 801339e:	4638      	mov	r0, r7
 80133a0:	f7fe fbb0 	bl	8011b04 <_free_r>
 80133a4:	e7f1      	b.n	801338a <_realloc_r+0x40>

080133a6 <__sfputc_r>:
 80133a6:	6893      	ldr	r3, [r2, #8]
 80133a8:	3b01      	subs	r3, #1
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	b410      	push	{r4}
 80133ae:	6093      	str	r3, [r2, #8]
 80133b0:	da08      	bge.n	80133c4 <__sfputc_r+0x1e>
 80133b2:	6994      	ldr	r4, [r2, #24]
 80133b4:	42a3      	cmp	r3, r4
 80133b6:	db01      	blt.n	80133bc <__sfputc_r+0x16>
 80133b8:	290a      	cmp	r1, #10
 80133ba:	d103      	bne.n	80133c4 <__sfputc_r+0x1e>
 80133bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80133c0:	f000 b932 	b.w	8013628 <__swbuf_r>
 80133c4:	6813      	ldr	r3, [r2, #0]
 80133c6:	1c58      	adds	r0, r3, #1
 80133c8:	6010      	str	r0, [r2, #0]
 80133ca:	7019      	strb	r1, [r3, #0]
 80133cc:	4608      	mov	r0, r1
 80133ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80133d2:	4770      	bx	lr

080133d4 <__sfputs_r>:
 80133d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133d6:	4606      	mov	r6, r0
 80133d8:	460f      	mov	r7, r1
 80133da:	4614      	mov	r4, r2
 80133dc:	18d5      	adds	r5, r2, r3
 80133de:	42ac      	cmp	r4, r5
 80133e0:	d101      	bne.n	80133e6 <__sfputs_r+0x12>
 80133e2:	2000      	movs	r0, #0
 80133e4:	e007      	b.n	80133f6 <__sfputs_r+0x22>
 80133e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133ea:	463a      	mov	r2, r7
 80133ec:	4630      	mov	r0, r6
 80133ee:	f7ff ffda 	bl	80133a6 <__sfputc_r>
 80133f2:	1c43      	adds	r3, r0, #1
 80133f4:	d1f3      	bne.n	80133de <__sfputs_r+0xa>
 80133f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080133f8 <_vfiprintf_r>:
 80133f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133fc:	460d      	mov	r5, r1
 80133fe:	b09d      	sub	sp, #116	@ 0x74
 8013400:	4614      	mov	r4, r2
 8013402:	4698      	mov	r8, r3
 8013404:	4606      	mov	r6, r0
 8013406:	b118      	cbz	r0, 8013410 <_vfiprintf_r+0x18>
 8013408:	6a03      	ldr	r3, [r0, #32]
 801340a:	b90b      	cbnz	r3, 8013410 <_vfiprintf_r+0x18>
 801340c:	f7fe f93c 	bl	8011688 <__sinit>
 8013410:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013412:	07d9      	lsls	r1, r3, #31
 8013414:	d405      	bmi.n	8013422 <_vfiprintf_r+0x2a>
 8013416:	89ab      	ldrh	r3, [r5, #12]
 8013418:	059a      	lsls	r2, r3, #22
 801341a:	d402      	bmi.n	8013422 <_vfiprintf_r+0x2a>
 801341c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801341e:	f7fe fb30 	bl	8011a82 <__retarget_lock_acquire_recursive>
 8013422:	89ab      	ldrh	r3, [r5, #12]
 8013424:	071b      	lsls	r3, r3, #28
 8013426:	d501      	bpl.n	801342c <_vfiprintf_r+0x34>
 8013428:	692b      	ldr	r3, [r5, #16]
 801342a:	b99b      	cbnz	r3, 8013454 <_vfiprintf_r+0x5c>
 801342c:	4629      	mov	r1, r5
 801342e:	4630      	mov	r0, r6
 8013430:	f000 f938 	bl	80136a4 <__swsetup_r>
 8013434:	b170      	cbz	r0, 8013454 <_vfiprintf_r+0x5c>
 8013436:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013438:	07dc      	lsls	r4, r3, #31
 801343a:	d504      	bpl.n	8013446 <_vfiprintf_r+0x4e>
 801343c:	f04f 30ff 	mov.w	r0, #4294967295
 8013440:	b01d      	add	sp, #116	@ 0x74
 8013442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013446:	89ab      	ldrh	r3, [r5, #12]
 8013448:	0598      	lsls	r0, r3, #22
 801344a:	d4f7      	bmi.n	801343c <_vfiprintf_r+0x44>
 801344c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801344e:	f7fe fb19 	bl	8011a84 <__retarget_lock_release_recursive>
 8013452:	e7f3      	b.n	801343c <_vfiprintf_r+0x44>
 8013454:	2300      	movs	r3, #0
 8013456:	9309      	str	r3, [sp, #36]	@ 0x24
 8013458:	2320      	movs	r3, #32
 801345a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801345e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013462:	2330      	movs	r3, #48	@ 0x30
 8013464:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013614 <_vfiprintf_r+0x21c>
 8013468:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801346c:	f04f 0901 	mov.w	r9, #1
 8013470:	4623      	mov	r3, r4
 8013472:	469a      	mov	sl, r3
 8013474:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013478:	b10a      	cbz	r2, 801347e <_vfiprintf_r+0x86>
 801347a:	2a25      	cmp	r2, #37	@ 0x25
 801347c:	d1f9      	bne.n	8013472 <_vfiprintf_r+0x7a>
 801347e:	ebba 0b04 	subs.w	fp, sl, r4
 8013482:	d00b      	beq.n	801349c <_vfiprintf_r+0xa4>
 8013484:	465b      	mov	r3, fp
 8013486:	4622      	mov	r2, r4
 8013488:	4629      	mov	r1, r5
 801348a:	4630      	mov	r0, r6
 801348c:	f7ff ffa2 	bl	80133d4 <__sfputs_r>
 8013490:	3001      	adds	r0, #1
 8013492:	f000 80a7 	beq.w	80135e4 <_vfiprintf_r+0x1ec>
 8013496:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013498:	445a      	add	r2, fp
 801349a:	9209      	str	r2, [sp, #36]	@ 0x24
 801349c:	f89a 3000 	ldrb.w	r3, [sl]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	f000 809f 	beq.w	80135e4 <_vfiprintf_r+0x1ec>
 80134a6:	2300      	movs	r3, #0
 80134a8:	f04f 32ff 	mov.w	r2, #4294967295
 80134ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80134b0:	f10a 0a01 	add.w	sl, sl, #1
 80134b4:	9304      	str	r3, [sp, #16]
 80134b6:	9307      	str	r3, [sp, #28]
 80134b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80134bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80134be:	4654      	mov	r4, sl
 80134c0:	2205      	movs	r2, #5
 80134c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134c6:	4853      	ldr	r0, [pc, #332]	@ (8013614 <_vfiprintf_r+0x21c>)
 80134c8:	f7ec fe8a 	bl	80001e0 <memchr>
 80134cc:	9a04      	ldr	r2, [sp, #16]
 80134ce:	b9d8      	cbnz	r0, 8013508 <_vfiprintf_r+0x110>
 80134d0:	06d1      	lsls	r1, r2, #27
 80134d2:	bf44      	itt	mi
 80134d4:	2320      	movmi	r3, #32
 80134d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80134da:	0713      	lsls	r3, r2, #28
 80134dc:	bf44      	itt	mi
 80134de:	232b      	movmi	r3, #43	@ 0x2b
 80134e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80134e4:	f89a 3000 	ldrb.w	r3, [sl]
 80134e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80134ea:	d015      	beq.n	8013518 <_vfiprintf_r+0x120>
 80134ec:	9a07      	ldr	r2, [sp, #28]
 80134ee:	4654      	mov	r4, sl
 80134f0:	2000      	movs	r0, #0
 80134f2:	f04f 0c0a 	mov.w	ip, #10
 80134f6:	4621      	mov	r1, r4
 80134f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80134fc:	3b30      	subs	r3, #48	@ 0x30
 80134fe:	2b09      	cmp	r3, #9
 8013500:	d94b      	bls.n	801359a <_vfiprintf_r+0x1a2>
 8013502:	b1b0      	cbz	r0, 8013532 <_vfiprintf_r+0x13a>
 8013504:	9207      	str	r2, [sp, #28]
 8013506:	e014      	b.n	8013532 <_vfiprintf_r+0x13a>
 8013508:	eba0 0308 	sub.w	r3, r0, r8
 801350c:	fa09 f303 	lsl.w	r3, r9, r3
 8013510:	4313      	orrs	r3, r2
 8013512:	9304      	str	r3, [sp, #16]
 8013514:	46a2      	mov	sl, r4
 8013516:	e7d2      	b.n	80134be <_vfiprintf_r+0xc6>
 8013518:	9b03      	ldr	r3, [sp, #12]
 801351a:	1d19      	adds	r1, r3, #4
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	9103      	str	r1, [sp, #12]
 8013520:	2b00      	cmp	r3, #0
 8013522:	bfbb      	ittet	lt
 8013524:	425b      	neglt	r3, r3
 8013526:	f042 0202 	orrlt.w	r2, r2, #2
 801352a:	9307      	strge	r3, [sp, #28]
 801352c:	9307      	strlt	r3, [sp, #28]
 801352e:	bfb8      	it	lt
 8013530:	9204      	strlt	r2, [sp, #16]
 8013532:	7823      	ldrb	r3, [r4, #0]
 8013534:	2b2e      	cmp	r3, #46	@ 0x2e
 8013536:	d10a      	bne.n	801354e <_vfiprintf_r+0x156>
 8013538:	7863      	ldrb	r3, [r4, #1]
 801353a:	2b2a      	cmp	r3, #42	@ 0x2a
 801353c:	d132      	bne.n	80135a4 <_vfiprintf_r+0x1ac>
 801353e:	9b03      	ldr	r3, [sp, #12]
 8013540:	1d1a      	adds	r2, r3, #4
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	9203      	str	r2, [sp, #12]
 8013546:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801354a:	3402      	adds	r4, #2
 801354c:	9305      	str	r3, [sp, #20]
 801354e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013624 <_vfiprintf_r+0x22c>
 8013552:	7821      	ldrb	r1, [r4, #0]
 8013554:	2203      	movs	r2, #3
 8013556:	4650      	mov	r0, sl
 8013558:	f7ec fe42 	bl	80001e0 <memchr>
 801355c:	b138      	cbz	r0, 801356e <_vfiprintf_r+0x176>
 801355e:	9b04      	ldr	r3, [sp, #16]
 8013560:	eba0 000a 	sub.w	r0, r0, sl
 8013564:	2240      	movs	r2, #64	@ 0x40
 8013566:	4082      	lsls	r2, r0
 8013568:	4313      	orrs	r3, r2
 801356a:	3401      	adds	r4, #1
 801356c:	9304      	str	r3, [sp, #16]
 801356e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013572:	4829      	ldr	r0, [pc, #164]	@ (8013618 <_vfiprintf_r+0x220>)
 8013574:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013578:	2206      	movs	r2, #6
 801357a:	f7ec fe31 	bl	80001e0 <memchr>
 801357e:	2800      	cmp	r0, #0
 8013580:	d03f      	beq.n	8013602 <_vfiprintf_r+0x20a>
 8013582:	4b26      	ldr	r3, [pc, #152]	@ (801361c <_vfiprintf_r+0x224>)
 8013584:	bb1b      	cbnz	r3, 80135ce <_vfiprintf_r+0x1d6>
 8013586:	9b03      	ldr	r3, [sp, #12]
 8013588:	3307      	adds	r3, #7
 801358a:	f023 0307 	bic.w	r3, r3, #7
 801358e:	3308      	adds	r3, #8
 8013590:	9303      	str	r3, [sp, #12]
 8013592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013594:	443b      	add	r3, r7
 8013596:	9309      	str	r3, [sp, #36]	@ 0x24
 8013598:	e76a      	b.n	8013470 <_vfiprintf_r+0x78>
 801359a:	fb0c 3202 	mla	r2, ip, r2, r3
 801359e:	460c      	mov	r4, r1
 80135a0:	2001      	movs	r0, #1
 80135a2:	e7a8      	b.n	80134f6 <_vfiprintf_r+0xfe>
 80135a4:	2300      	movs	r3, #0
 80135a6:	3401      	adds	r4, #1
 80135a8:	9305      	str	r3, [sp, #20]
 80135aa:	4619      	mov	r1, r3
 80135ac:	f04f 0c0a 	mov.w	ip, #10
 80135b0:	4620      	mov	r0, r4
 80135b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80135b6:	3a30      	subs	r2, #48	@ 0x30
 80135b8:	2a09      	cmp	r2, #9
 80135ba:	d903      	bls.n	80135c4 <_vfiprintf_r+0x1cc>
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d0c6      	beq.n	801354e <_vfiprintf_r+0x156>
 80135c0:	9105      	str	r1, [sp, #20]
 80135c2:	e7c4      	b.n	801354e <_vfiprintf_r+0x156>
 80135c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80135c8:	4604      	mov	r4, r0
 80135ca:	2301      	movs	r3, #1
 80135cc:	e7f0      	b.n	80135b0 <_vfiprintf_r+0x1b8>
 80135ce:	ab03      	add	r3, sp, #12
 80135d0:	9300      	str	r3, [sp, #0]
 80135d2:	462a      	mov	r2, r5
 80135d4:	4b12      	ldr	r3, [pc, #72]	@ (8013620 <_vfiprintf_r+0x228>)
 80135d6:	a904      	add	r1, sp, #16
 80135d8:	4630      	mov	r0, r6
 80135da:	f3af 8000 	nop.w
 80135de:	4607      	mov	r7, r0
 80135e0:	1c78      	adds	r0, r7, #1
 80135e2:	d1d6      	bne.n	8013592 <_vfiprintf_r+0x19a>
 80135e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80135e6:	07d9      	lsls	r1, r3, #31
 80135e8:	d405      	bmi.n	80135f6 <_vfiprintf_r+0x1fe>
 80135ea:	89ab      	ldrh	r3, [r5, #12]
 80135ec:	059a      	lsls	r2, r3, #22
 80135ee:	d402      	bmi.n	80135f6 <_vfiprintf_r+0x1fe>
 80135f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80135f2:	f7fe fa47 	bl	8011a84 <__retarget_lock_release_recursive>
 80135f6:	89ab      	ldrh	r3, [r5, #12]
 80135f8:	065b      	lsls	r3, r3, #25
 80135fa:	f53f af1f 	bmi.w	801343c <_vfiprintf_r+0x44>
 80135fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013600:	e71e      	b.n	8013440 <_vfiprintf_r+0x48>
 8013602:	ab03      	add	r3, sp, #12
 8013604:	9300      	str	r3, [sp, #0]
 8013606:	462a      	mov	r2, r5
 8013608:	4b05      	ldr	r3, [pc, #20]	@ (8013620 <_vfiprintf_r+0x228>)
 801360a:	a904      	add	r1, sp, #16
 801360c:	4630      	mov	r0, r6
 801360e:	f7ff fc8b 	bl	8012f28 <_printf_i>
 8013612:	e7e4      	b.n	80135de <_vfiprintf_r+0x1e6>
 8013614:	08014565 	.word	0x08014565
 8013618:	0801456f 	.word	0x0801456f
 801361c:	00000000 	.word	0x00000000
 8013620:	080133d5 	.word	0x080133d5
 8013624:	0801456b 	.word	0x0801456b

08013628 <__swbuf_r>:
 8013628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801362a:	460e      	mov	r6, r1
 801362c:	4614      	mov	r4, r2
 801362e:	4605      	mov	r5, r0
 8013630:	b118      	cbz	r0, 801363a <__swbuf_r+0x12>
 8013632:	6a03      	ldr	r3, [r0, #32]
 8013634:	b90b      	cbnz	r3, 801363a <__swbuf_r+0x12>
 8013636:	f7fe f827 	bl	8011688 <__sinit>
 801363a:	69a3      	ldr	r3, [r4, #24]
 801363c:	60a3      	str	r3, [r4, #8]
 801363e:	89a3      	ldrh	r3, [r4, #12]
 8013640:	071a      	lsls	r2, r3, #28
 8013642:	d501      	bpl.n	8013648 <__swbuf_r+0x20>
 8013644:	6923      	ldr	r3, [r4, #16]
 8013646:	b943      	cbnz	r3, 801365a <__swbuf_r+0x32>
 8013648:	4621      	mov	r1, r4
 801364a:	4628      	mov	r0, r5
 801364c:	f000 f82a 	bl	80136a4 <__swsetup_r>
 8013650:	b118      	cbz	r0, 801365a <__swbuf_r+0x32>
 8013652:	f04f 37ff 	mov.w	r7, #4294967295
 8013656:	4638      	mov	r0, r7
 8013658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801365a:	6823      	ldr	r3, [r4, #0]
 801365c:	6922      	ldr	r2, [r4, #16]
 801365e:	1a98      	subs	r0, r3, r2
 8013660:	6963      	ldr	r3, [r4, #20]
 8013662:	b2f6      	uxtb	r6, r6
 8013664:	4283      	cmp	r3, r0
 8013666:	4637      	mov	r7, r6
 8013668:	dc05      	bgt.n	8013676 <__swbuf_r+0x4e>
 801366a:	4621      	mov	r1, r4
 801366c:	4628      	mov	r0, r5
 801366e:	f7ff fdfd 	bl	801326c <_fflush_r>
 8013672:	2800      	cmp	r0, #0
 8013674:	d1ed      	bne.n	8013652 <__swbuf_r+0x2a>
 8013676:	68a3      	ldr	r3, [r4, #8]
 8013678:	3b01      	subs	r3, #1
 801367a:	60a3      	str	r3, [r4, #8]
 801367c:	6823      	ldr	r3, [r4, #0]
 801367e:	1c5a      	adds	r2, r3, #1
 8013680:	6022      	str	r2, [r4, #0]
 8013682:	701e      	strb	r6, [r3, #0]
 8013684:	6962      	ldr	r2, [r4, #20]
 8013686:	1c43      	adds	r3, r0, #1
 8013688:	429a      	cmp	r2, r3
 801368a:	d004      	beq.n	8013696 <__swbuf_r+0x6e>
 801368c:	89a3      	ldrh	r3, [r4, #12]
 801368e:	07db      	lsls	r3, r3, #31
 8013690:	d5e1      	bpl.n	8013656 <__swbuf_r+0x2e>
 8013692:	2e0a      	cmp	r6, #10
 8013694:	d1df      	bne.n	8013656 <__swbuf_r+0x2e>
 8013696:	4621      	mov	r1, r4
 8013698:	4628      	mov	r0, r5
 801369a:	f7ff fde7 	bl	801326c <_fflush_r>
 801369e:	2800      	cmp	r0, #0
 80136a0:	d0d9      	beq.n	8013656 <__swbuf_r+0x2e>
 80136a2:	e7d6      	b.n	8013652 <__swbuf_r+0x2a>

080136a4 <__swsetup_r>:
 80136a4:	b538      	push	{r3, r4, r5, lr}
 80136a6:	4b29      	ldr	r3, [pc, #164]	@ (801374c <__swsetup_r+0xa8>)
 80136a8:	4605      	mov	r5, r0
 80136aa:	6818      	ldr	r0, [r3, #0]
 80136ac:	460c      	mov	r4, r1
 80136ae:	b118      	cbz	r0, 80136b8 <__swsetup_r+0x14>
 80136b0:	6a03      	ldr	r3, [r0, #32]
 80136b2:	b90b      	cbnz	r3, 80136b8 <__swsetup_r+0x14>
 80136b4:	f7fd ffe8 	bl	8011688 <__sinit>
 80136b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80136bc:	0719      	lsls	r1, r3, #28
 80136be:	d422      	bmi.n	8013706 <__swsetup_r+0x62>
 80136c0:	06da      	lsls	r2, r3, #27
 80136c2:	d407      	bmi.n	80136d4 <__swsetup_r+0x30>
 80136c4:	2209      	movs	r2, #9
 80136c6:	602a      	str	r2, [r5, #0]
 80136c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80136cc:	81a3      	strh	r3, [r4, #12]
 80136ce:	f04f 30ff 	mov.w	r0, #4294967295
 80136d2:	e033      	b.n	801373c <__swsetup_r+0x98>
 80136d4:	0758      	lsls	r0, r3, #29
 80136d6:	d512      	bpl.n	80136fe <__swsetup_r+0x5a>
 80136d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80136da:	b141      	cbz	r1, 80136ee <__swsetup_r+0x4a>
 80136dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80136e0:	4299      	cmp	r1, r3
 80136e2:	d002      	beq.n	80136ea <__swsetup_r+0x46>
 80136e4:	4628      	mov	r0, r5
 80136e6:	f7fe fa0d 	bl	8011b04 <_free_r>
 80136ea:	2300      	movs	r3, #0
 80136ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80136ee:	89a3      	ldrh	r3, [r4, #12]
 80136f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80136f4:	81a3      	strh	r3, [r4, #12]
 80136f6:	2300      	movs	r3, #0
 80136f8:	6063      	str	r3, [r4, #4]
 80136fa:	6923      	ldr	r3, [r4, #16]
 80136fc:	6023      	str	r3, [r4, #0]
 80136fe:	89a3      	ldrh	r3, [r4, #12]
 8013700:	f043 0308 	orr.w	r3, r3, #8
 8013704:	81a3      	strh	r3, [r4, #12]
 8013706:	6923      	ldr	r3, [r4, #16]
 8013708:	b94b      	cbnz	r3, 801371e <__swsetup_r+0x7a>
 801370a:	89a3      	ldrh	r3, [r4, #12]
 801370c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013710:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013714:	d003      	beq.n	801371e <__swsetup_r+0x7a>
 8013716:	4621      	mov	r1, r4
 8013718:	4628      	mov	r0, r5
 801371a:	f000 f88b 	bl	8013834 <__smakebuf_r>
 801371e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013722:	f013 0201 	ands.w	r2, r3, #1
 8013726:	d00a      	beq.n	801373e <__swsetup_r+0x9a>
 8013728:	2200      	movs	r2, #0
 801372a:	60a2      	str	r2, [r4, #8]
 801372c:	6962      	ldr	r2, [r4, #20]
 801372e:	4252      	negs	r2, r2
 8013730:	61a2      	str	r2, [r4, #24]
 8013732:	6922      	ldr	r2, [r4, #16]
 8013734:	b942      	cbnz	r2, 8013748 <__swsetup_r+0xa4>
 8013736:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801373a:	d1c5      	bne.n	80136c8 <__swsetup_r+0x24>
 801373c:	bd38      	pop	{r3, r4, r5, pc}
 801373e:	0799      	lsls	r1, r3, #30
 8013740:	bf58      	it	pl
 8013742:	6962      	ldrpl	r2, [r4, #20]
 8013744:	60a2      	str	r2, [r4, #8]
 8013746:	e7f4      	b.n	8013732 <__swsetup_r+0x8e>
 8013748:	2000      	movs	r0, #0
 801374a:	e7f7      	b.n	801373c <__swsetup_r+0x98>
 801374c:	200003d4 	.word	0x200003d4

08013750 <_raise_r>:
 8013750:	291f      	cmp	r1, #31
 8013752:	b538      	push	{r3, r4, r5, lr}
 8013754:	4605      	mov	r5, r0
 8013756:	460c      	mov	r4, r1
 8013758:	d904      	bls.n	8013764 <_raise_r+0x14>
 801375a:	2316      	movs	r3, #22
 801375c:	6003      	str	r3, [r0, #0]
 801375e:	f04f 30ff 	mov.w	r0, #4294967295
 8013762:	bd38      	pop	{r3, r4, r5, pc}
 8013764:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013766:	b112      	cbz	r2, 801376e <_raise_r+0x1e>
 8013768:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801376c:	b94b      	cbnz	r3, 8013782 <_raise_r+0x32>
 801376e:	4628      	mov	r0, r5
 8013770:	f000 f830 	bl	80137d4 <_getpid_r>
 8013774:	4622      	mov	r2, r4
 8013776:	4601      	mov	r1, r0
 8013778:	4628      	mov	r0, r5
 801377a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801377e:	f000 b817 	b.w	80137b0 <_kill_r>
 8013782:	2b01      	cmp	r3, #1
 8013784:	d00a      	beq.n	801379c <_raise_r+0x4c>
 8013786:	1c59      	adds	r1, r3, #1
 8013788:	d103      	bne.n	8013792 <_raise_r+0x42>
 801378a:	2316      	movs	r3, #22
 801378c:	6003      	str	r3, [r0, #0]
 801378e:	2001      	movs	r0, #1
 8013790:	e7e7      	b.n	8013762 <_raise_r+0x12>
 8013792:	2100      	movs	r1, #0
 8013794:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013798:	4620      	mov	r0, r4
 801379a:	4798      	blx	r3
 801379c:	2000      	movs	r0, #0
 801379e:	e7e0      	b.n	8013762 <_raise_r+0x12>

080137a0 <raise>:
 80137a0:	4b02      	ldr	r3, [pc, #8]	@ (80137ac <raise+0xc>)
 80137a2:	4601      	mov	r1, r0
 80137a4:	6818      	ldr	r0, [r3, #0]
 80137a6:	f7ff bfd3 	b.w	8013750 <_raise_r>
 80137aa:	bf00      	nop
 80137ac:	200003d4 	.word	0x200003d4

080137b0 <_kill_r>:
 80137b0:	b538      	push	{r3, r4, r5, lr}
 80137b2:	4d07      	ldr	r5, [pc, #28]	@ (80137d0 <_kill_r+0x20>)
 80137b4:	2300      	movs	r3, #0
 80137b6:	4604      	mov	r4, r0
 80137b8:	4608      	mov	r0, r1
 80137ba:	4611      	mov	r1, r2
 80137bc:	602b      	str	r3, [r5, #0]
 80137be:	f7ef ff05 	bl	80035cc <_kill>
 80137c2:	1c43      	adds	r3, r0, #1
 80137c4:	d102      	bne.n	80137cc <_kill_r+0x1c>
 80137c6:	682b      	ldr	r3, [r5, #0]
 80137c8:	b103      	cbz	r3, 80137cc <_kill_r+0x1c>
 80137ca:	6023      	str	r3, [r4, #0]
 80137cc:	bd38      	pop	{r3, r4, r5, pc}
 80137ce:	bf00      	nop
 80137d0:	200116d8 	.word	0x200116d8

080137d4 <_getpid_r>:
 80137d4:	f7ef bef2 	b.w	80035bc <_getpid>

080137d8 <_malloc_usable_size_r>:
 80137d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137dc:	1f18      	subs	r0, r3, #4
 80137de:	2b00      	cmp	r3, #0
 80137e0:	bfbc      	itt	lt
 80137e2:	580b      	ldrlt	r3, [r1, r0]
 80137e4:	18c0      	addlt	r0, r0, r3
 80137e6:	4770      	bx	lr

080137e8 <__swhatbuf_r>:
 80137e8:	b570      	push	{r4, r5, r6, lr}
 80137ea:	460c      	mov	r4, r1
 80137ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137f0:	2900      	cmp	r1, #0
 80137f2:	b096      	sub	sp, #88	@ 0x58
 80137f4:	4615      	mov	r5, r2
 80137f6:	461e      	mov	r6, r3
 80137f8:	da0d      	bge.n	8013816 <__swhatbuf_r+0x2e>
 80137fa:	89a3      	ldrh	r3, [r4, #12]
 80137fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013800:	f04f 0100 	mov.w	r1, #0
 8013804:	bf14      	ite	ne
 8013806:	2340      	movne	r3, #64	@ 0x40
 8013808:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801380c:	2000      	movs	r0, #0
 801380e:	6031      	str	r1, [r6, #0]
 8013810:	602b      	str	r3, [r5, #0]
 8013812:	b016      	add	sp, #88	@ 0x58
 8013814:	bd70      	pop	{r4, r5, r6, pc}
 8013816:	466a      	mov	r2, sp
 8013818:	f000 f848 	bl	80138ac <_fstat_r>
 801381c:	2800      	cmp	r0, #0
 801381e:	dbec      	blt.n	80137fa <__swhatbuf_r+0x12>
 8013820:	9901      	ldr	r1, [sp, #4]
 8013822:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013826:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801382a:	4259      	negs	r1, r3
 801382c:	4159      	adcs	r1, r3
 801382e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013832:	e7eb      	b.n	801380c <__swhatbuf_r+0x24>

08013834 <__smakebuf_r>:
 8013834:	898b      	ldrh	r3, [r1, #12]
 8013836:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013838:	079d      	lsls	r5, r3, #30
 801383a:	4606      	mov	r6, r0
 801383c:	460c      	mov	r4, r1
 801383e:	d507      	bpl.n	8013850 <__smakebuf_r+0x1c>
 8013840:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013844:	6023      	str	r3, [r4, #0]
 8013846:	6123      	str	r3, [r4, #16]
 8013848:	2301      	movs	r3, #1
 801384a:	6163      	str	r3, [r4, #20]
 801384c:	b003      	add	sp, #12
 801384e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013850:	ab01      	add	r3, sp, #4
 8013852:	466a      	mov	r2, sp
 8013854:	f7ff ffc8 	bl	80137e8 <__swhatbuf_r>
 8013858:	9f00      	ldr	r7, [sp, #0]
 801385a:	4605      	mov	r5, r0
 801385c:	4639      	mov	r1, r7
 801385e:	4630      	mov	r0, r6
 8013860:	f7fc ff66 	bl	8010730 <_malloc_r>
 8013864:	b948      	cbnz	r0, 801387a <__smakebuf_r+0x46>
 8013866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801386a:	059a      	lsls	r2, r3, #22
 801386c:	d4ee      	bmi.n	801384c <__smakebuf_r+0x18>
 801386e:	f023 0303 	bic.w	r3, r3, #3
 8013872:	f043 0302 	orr.w	r3, r3, #2
 8013876:	81a3      	strh	r3, [r4, #12]
 8013878:	e7e2      	b.n	8013840 <__smakebuf_r+0xc>
 801387a:	89a3      	ldrh	r3, [r4, #12]
 801387c:	6020      	str	r0, [r4, #0]
 801387e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013882:	81a3      	strh	r3, [r4, #12]
 8013884:	9b01      	ldr	r3, [sp, #4]
 8013886:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801388a:	b15b      	cbz	r3, 80138a4 <__smakebuf_r+0x70>
 801388c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013890:	4630      	mov	r0, r6
 8013892:	f000 f81d 	bl	80138d0 <_isatty_r>
 8013896:	b128      	cbz	r0, 80138a4 <__smakebuf_r+0x70>
 8013898:	89a3      	ldrh	r3, [r4, #12]
 801389a:	f023 0303 	bic.w	r3, r3, #3
 801389e:	f043 0301 	orr.w	r3, r3, #1
 80138a2:	81a3      	strh	r3, [r4, #12]
 80138a4:	89a3      	ldrh	r3, [r4, #12]
 80138a6:	431d      	orrs	r5, r3
 80138a8:	81a5      	strh	r5, [r4, #12]
 80138aa:	e7cf      	b.n	801384c <__smakebuf_r+0x18>

080138ac <_fstat_r>:
 80138ac:	b538      	push	{r3, r4, r5, lr}
 80138ae:	4d07      	ldr	r5, [pc, #28]	@ (80138cc <_fstat_r+0x20>)
 80138b0:	2300      	movs	r3, #0
 80138b2:	4604      	mov	r4, r0
 80138b4:	4608      	mov	r0, r1
 80138b6:	4611      	mov	r1, r2
 80138b8:	602b      	str	r3, [r5, #0]
 80138ba:	f7ef fee7 	bl	800368c <_fstat>
 80138be:	1c43      	adds	r3, r0, #1
 80138c0:	d102      	bne.n	80138c8 <_fstat_r+0x1c>
 80138c2:	682b      	ldr	r3, [r5, #0]
 80138c4:	b103      	cbz	r3, 80138c8 <_fstat_r+0x1c>
 80138c6:	6023      	str	r3, [r4, #0]
 80138c8:	bd38      	pop	{r3, r4, r5, pc}
 80138ca:	bf00      	nop
 80138cc:	200116d8 	.word	0x200116d8

080138d0 <_isatty_r>:
 80138d0:	b538      	push	{r3, r4, r5, lr}
 80138d2:	4d06      	ldr	r5, [pc, #24]	@ (80138ec <_isatty_r+0x1c>)
 80138d4:	2300      	movs	r3, #0
 80138d6:	4604      	mov	r4, r0
 80138d8:	4608      	mov	r0, r1
 80138da:	602b      	str	r3, [r5, #0]
 80138dc:	f7ef fee6 	bl	80036ac <_isatty>
 80138e0:	1c43      	adds	r3, r0, #1
 80138e2:	d102      	bne.n	80138ea <_isatty_r+0x1a>
 80138e4:	682b      	ldr	r3, [r5, #0]
 80138e6:	b103      	cbz	r3, 80138ea <_isatty_r+0x1a>
 80138e8:	6023      	str	r3, [r4, #0]
 80138ea:	bd38      	pop	{r3, r4, r5, pc}
 80138ec:	200116d8 	.word	0x200116d8

080138f0 <_init>:
 80138f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138f2:	bf00      	nop
 80138f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138f6:	bc08      	pop	{r3}
 80138f8:	469e      	mov	lr, r3
 80138fa:	4770      	bx	lr

080138fc <_fini>:
 80138fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138fe:	bf00      	nop
 8013900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013902:	bc08      	pop	{r3}
 8013904:	469e      	mov	lr, r3
 8013906:	4770      	bx	lr
