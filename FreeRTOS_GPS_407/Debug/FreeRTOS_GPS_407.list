
FreeRTOS_GPS_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018d50  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001370  08018ee0  08018ee0  00019ee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a250  0801a250  0001c3fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a250  0801a250  0001b250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a258  0801a258  0001c3fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a258  0801a258  0001b258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a25c  0801a25c  0001b25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003fc  20000000  0801a260  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013864  20000400  0801a65c  0001c400  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20013c64  0801a65c  0001cc64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c3fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000312b1  00000000  00000000  0001c42c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007a75  00000000  00000000  0004d6dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002670  00000000  00000000  00055158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001da5  00000000  00000000  000577c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cbe3  00000000  00000000  0005956d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003657e  00000000  00000000  00086150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e603c  00000000  00000000  000bc6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a270a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b740  00000000  00000000  001a2750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  001ade90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000400 	.word	0x20000400
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018ec8 	.word	0x08018ec8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000404 	.word	0x20000404
 80001cc:	08018ec8 	.word	0x08018ec8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b9be 	b.w	8000f9c <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f83c 	bl	8000ca4 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff5b 	bl	8000afc <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fcd1 	bl	8000618 <__aeabi_dmul>
 8000c76:	f7ff ffa7 	bl	8000bc8 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc52 	bl	8000524 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fcc8 	bl	8000618 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fb0a 	bl	80002a8 <__aeabi_dsub>
 8000c94:	f7ff ff98 	bl	8000bc8 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <__udivmoddi4>:
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca8:	9d08      	ldr	r5, [sp, #32]
 8000caa:	468e      	mov	lr, r1
 8000cac:	4604      	mov	r4, r0
 8000cae:	4688      	mov	r8, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14a      	bne.n	8000d4a <__udivmoddi4+0xa6>
 8000cb4:	428a      	cmp	r2, r1
 8000cb6:	4617      	mov	r7, r2
 8000cb8:	d962      	bls.n	8000d80 <__udivmoddi4+0xdc>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	b14e      	cbz	r6, 8000cd4 <__udivmoddi4+0x30>
 8000cc0:	f1c6 0320 	rsb	r3, r6, #32
 8000cc4:	fa01 f806 	lsl.w	r8, r1, r6
 8000cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ccc:	40b7      	lsls	r7, r6
 8000cce:	ea43 0808 	orr.w	r8, r3, r8
 8000cd2:	40b4      	lsls	r4, r6
 8000cd4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ce0:	0c23      	lsrs	r3, r4, #16
 8000ce2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ce6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cea:	fb01 f20c 	mul.w	r2, r1, ip
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x62>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cf8:	f080 80ea 	bcs.w	8000ed0 <__udivmoddi4+0x22c>
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	f240 80e7 	bls.w	8000ed0 <__udivmoddi4+0x22c>
 8000d02:	3902      	subs	r1, #2
 8000d04:	443b      	add	r3, r7
 8000d06:	1a9a      	subs	r2, r3, r2
 8000d08:	b2a3      	uxth	r3, r4
 8000d0a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d0e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d16:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1a:	459c      	cmp	ip, r3
 8000d1c:	d909      	bls.n	8000d32 <__udivmoddi4+0x8e>
 8000d1e:	18fb      	adds	r3, r7, r3
 8000d20:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d24:	f080 80d6 	bcs.w	8000ed4 <__udivmoddi4+0x230>
 8000d28:	459c      	cmp	ip, r3
 8000d2a:	f240 80d3 	bls.w	8000ed4 <__udivmoddi4+0x230>
 8000d2e:	443b      	add	r3, r7
 8000d30:	3802      	subs	r0, #2
 8000d32:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d36:	eba3 030c 	sub.w	r3, r3, ip
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	b11d      	cbz	r5, 8000d46 <__udivmoddi4+0xa2>
 8000d3e:	40f3      	lsrs	r3, r6
 8000d40:	2200      	movs	r2, #0
 8000d42:	e9c5 3200 	strd	r3, r2, [r5]
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d905      	bls.n	8000d5a <__udivmoddi4+0xb6>
 8000d4e:	b10d      	cbz	r5, 8000d54 <__udivmoddi4+0xb0>
 8000d50:	e9c5 0100 	strd	r0, r1, [r5]
 8000d54:	2100      	movs	r1, #0
 8000d56:	4608      	mov	r0, r1
 8000d58:	e7f5      	b.n	8000d46 <__udivmoddi4+0xa2>
 8000d5a:	fab3 f183 	clz	r1, r3
 8000d5e:	2900      	cmp	r1, #0
 8000d60:	d146      	bne.n	8000df0 <__udivmoddi4+0x14c>
 8000d62:	4573      	cmp	r3, lr
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xc8>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 8105 	bhi.w	8000f76 <__udivmoddi4+0x2d2>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	4690      	mov	r8, r2
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e5      	beq.n	8000d46 <__udivmoddi4+0xa2>
 8000d7a:	e9c5 4800 	strd	r4, r8, [r5]
 8000d7e:	e7e2      	b.n	8000d46 <__udivmoddi4+0xa2>
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	f000 8090 	beq.w	8000ea6 <__udivmoddi4+0x202>
 8000d86:	fab2 f682 	clz	r6, r2
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	f040 80a4 	bne.w	8000ed8 <__udivmoddi4+0x234>
 8000d90:	1a8a      	subs	r2, r1, r2
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	b280      	uxth	r0, r0
 8000d9a:	b2bc      	uxth	r4, r7
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000da2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000da6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000daa:	fb04 f20c 	mul.w	r2, r4, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x11e>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000db8:	d202      	bcs.n	8000dc0 <__udivmoddi4+0x11c>
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	f200 80e0 	bhi.w	8000f80 <__udivmoddi4+0x2dc>
 8000dc0:	46c4      	mov	ip, r8
 8000dc2:	1a9b      	subs	r3, r3, r2
 8000dc4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dc8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dcc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dd0:	fb02 f404 	mul.w	r4, r2, r4
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	d907      	bls.n	8000de8 <__udivmoddi4+0x144>
 8000dd8:	18fb      	adds	r3, r7, r3
 8000dda:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dde:	d202      	bcs.n	8000de6 <__udivmoddi4+0x142>
 8000de0:	429c      	cmp	r4, r3
 8000de2:	f200 80ca 	bhi.w	8000f7a <__udivmoddi4+0x2d6>
 8000de6:	4602      	mov	r2, r0
 8000de8:	1b1b      	subs	r3, r3, r4
 8000dea:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dee:	e7a5      	b.n	8000d3c <__udivmoddi4+0x98>
 8000df0:	f1c1 0620 	rsb	r6, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 f706 	lsr.w	r7, r2, r6
 8000dfa:	431f      	orrs	r7, r3
 8000dfc:	fa0e f401 	lsl.w	r4, lr, r1
 8000e00:	fa20 f306 	lsr.w	r3, r0, r6
 8000e04:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e08:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e12:	fa1f fc87 	uxth.w	ip, r7
 8000e16:	fbbe f0f9 	udiv	r0, lr, r9
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e20:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e24:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x1a0>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e36:	f080 809c 	bcs.w	8000f72 <__udivmoddi4+0x2ce>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	f240 8099 	bls.w	8000f72 <__udivmoddi4+0x2ce>
 8000e40:	3802      	subs	r0, #2
 8000e42:	443c      	add	r4, r7
 8000e44:	eba4 040e 	sub.w	r4, r4, lr
 8000e48:	fa1f fe83 	uxth.w	lr, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e58:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e5c:	45a4      	cmp	ip, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1ce>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e66:	f080 8082 	bcs.w	8000f6e <__udivmoddi4+0x2ca>
 8000e6a:	45a4      	cmp	ip, r4
 8000e6c:	d97f      	bls.n	8000f6e <__udivmoddi4+0x2ca>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	443c      	add	r4, r7
 8000e72:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e76:	eba4 040c 	sub.w	r4, r4, ip
 8000e7a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e7e:	4564      	cmp	r4, ip
 8000e80:	4673      	mov	r3, lr
 8000e82:	46e1      	mov	r9, ip
 8000e84:	d362      	bcc.n	8000f4c <__udivmoddi4+0x2a8>
 8000e86:	d05f      	beq.n	8000f48 <__udivmoddi4+0x2a4>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x1fe>
 8000e8a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e8e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e92:	fa04 f606 	lsl.w	r6, r4, r6
 8000e96:	fa22 f301 	lsr.w	r3, r2, r1
 8000e9a:	431e      	orrs	r6, r3
 8000e9c:	40cc      	lsrs	r4, r1
 8000e9e:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e74f      	b.n	8000d46 <__udivmoddi4+0xa2>
 8000ea6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eaa:	0c01      	lsrs	r1, r0, #16
 8000eac:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000eb0:	b280      	uxth	r0, r0
 8000eb2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	4638      	mov	r0, r7
 8000eba:	463c      	mov	r4, r7
 8000ebc:	46b8      	mov	r8, r7
 8000ebe:	46be      	mov	lr, r7
 8000ec0:	2620      	movs	r6, #32
 8000ec2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ec6:	eba2 0208 	sub.w	r2, r2, r8
 8000eca:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ece:	e766      	b.n	8000d9e <__udivmoddi4+0xfa>
 8000ed0:	4601      	mov	r1, r0
 8000ed2:	e718      	b.n	8000d06 <__udivmoddi4+0x62>
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	e72c      	b.n	8000d32 <__udivmoddi4+0x8e>
 8000ed8:	f1c6 0220 	rsb	r2, r6, #32
 8000edc:	fa2e f302 	lsr.w	r3, lr, r2
 8000ee0:	40b7      	lsls	r7, r6
 8000ee2:	40b1      	lsls	r1, r6
 8000ee4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ee8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eec:	430a      	orrs	r2, r1
 8000eee:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ef2:	b2bc      	uxth	r4, r7
 8000ef4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ef8:	0c11      	lsrs	r1, r2, #16
 8000efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efe:	fb08 f904 	mul.w	r9, r8, r4
 8000f02:	40b0      	lsls	r0, r6
 8000f04:	4589      	cmp	r9, r1
 8000f06:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f0a:	b280      	uxth	r0, r0
 8000f0c:	d93e      	bls.n	8000f8c <__udivmoddi4+0x2e8>
 8000f0e:	1879      	adds	r1, r7, r1
 8000f10:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f14:	d201      	bcs.n	8000f1a <__udivmoddi4+0x276>
 8000f16:	4589      	cmp	r9, r1
 8000f18:	d81f      	bhi.n	8000f5a <__udivmoddi4+0x2b6>
 8000f1a:	eba1 0109 	sub.w	r1, r1, r9
 8000f1e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f22:	fb09 f804 	mul.w	r8, r9, r4
 8000f26:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2a:	b292      	uxth	r2, r2
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	4542      	cmp	r2, r8
 8000f32:	d229      	bcs.n	8000f88 <__udivmoddi4+0x2e4>
 8000f34:	18ba      	adds	r2, r7, r2
 8000f36:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f3a:	d2c4      	bcs.n	8000ec6 <__udivmoddi4+0x222>
 8000f3c:	4542      	cmp	r2, r8
 8000f3e:	d2c2      	bcs.n	8000ec6 <__udivmoddi4+0x222>
 8000f40:	f1a9 0102 	sub.w	r1, r9, #2
 8000f44:	443a      	add	r2, r7
 8000f46:	e7be      	b.n	8000ec6 <__udivmoddi4+0x222>
 8000f48:	45f0      	cmp	r8, lr
 8000f4a:	d29d      	bcs.n	8000e88 <__udivmoddi4+0x1e4>
 8000f4c:	ebbe 0302 	subs.w	r3, lr, r2
 8000f50:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f54:	3801      	subs	r0, #1
 8000f56:	46e1      	mov	r9, ip
 8000f58:	e796      	b.n	8000e88 <__udivmoddi4+0x1e4>
 8000f5a:	eba7 0909 	sub.w	r9, r7, r9
 8000f5e:	4449      	add	r1, r9
 8000f60:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f64:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f68:	fb09 f804 	mul.w	r8, r9, r4
 8000f6c:	e7db      	b.n	8000f26 <__udivmoddi4+0x282>
 8000f6e:	4673      	mov	r3, lr
 8000f70:	e77f      	b.n	8000e72 <__udivmoddi4+0x1ce>
 8000f72:	4650      	mov	r0, sl
 8000f74:	e766      	b.n	8000e44 <__udivmoddi4+0x1a0>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e6fd      	b.n	8000d76 <__udivmoddi4+0xd2>
 8000f7a:	443b      	add	r3, r7
 8000f7c:	3a02      	subs	r2, #2
 8000f7e:	e733      	b.n	8000de8 <__udivmoddi4+0x144>
 8000f80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f84:	443b      	add	r3, r7
 8000f86:	e71c      	b.n	8000dc2 <__udivmoddi4+0x11e>
 8000f88:	4649      	mov	r1, r9
 8000f8a:	e79c      	b.n	8000ec6 <__udivmoddi4+0x222>
 8000f8c:	eba1 0109 	sub.w	r1, r1, r9
 8000f90:	46c4      	mov	ip, r8
 8000f92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f96:	fb09 f804 	mul.w	r8, r9, r4
 8000f9a:	e7c4      	b.n	8000f26 <__udivmoddi4+0x282>

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <PrintLog>:
* De coordinaten zijn doubles en deze kunnen niet eenvoudig worden geprint dus dat moet slim worden geconverteerd naar een int.<BR>
* Display data: Status, latitude, longitude, course en tijd van de log.
* @return void.
*/
void PrintLog(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
	double temp;

	for (int i = 0; i < logIndex; i++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	e0b5      	b.n	8001118 <PrintLog+0x178>
	{
		UART_puts("\r\r\n=============================================================== Log Number = ");
 8000fac:	4862      	ldr	r0, [pc, #392]	@ (8001138 <PrintLog+0x198>)
 8000fae:	f002 fbd7 	bl	8003760 <UART_puts>
		UART_putint(i);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 fbef 	bl	8003798 <UART_putint>

		UART_puts("\rStatus: ");
 8000fba:	4860      	ldr	r0, [pc, #384]	@ (800113c <PrintLog+0x19c>)
 8000fbc:	f002 fbd0 	bl	8003760 <UART_puts>
		UART_putchar(LogArray[i].Route.status);
 8000fc0:	495f      	ldr	r1, [pc, #380]	@ (8001140 <PrintLog+0x1a0>)
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	440b      	add	r3, r1
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f002 fbb3 	bl	800373c <UART_putchar>

		UART_puts("\rLatitude: ");
 8000fd6:	485b      	ldr	r0, [pc, #364]	@ (8001144 <PrintLog+0x1a4>)
 8000fd8:	f002 fbc2 	bl	8003760 <UART_puts>
		temp = LogArray[i].Route.latitude;
 8000fdc:	4958      	ldr	r1, [pc, #352]	@ (8001140 <PrintLog+0x1a0>)
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	440b      	add	r3, r1
 8000fea:	3308      	adds	r3, #8
 8000fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff0:	e9c7 2300 	strd	r2, r3, [r7]
		UART_putint((int)temp);
 8000ff4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ff8:	f7ff fdbe 	bl	8000b78 <__aeabi_d2iz>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 fbca 	bl	8003798 <UART_putint>
		UART_putchar('.');
 8001004:	202e      	movs	r0, #46	@ 0x2e
 8001006:	f002 fb99 	bl	800373c <UART_putchar>
		temp = (temp - (int)temp) * 10000000000;  // 10 decimalen uitprinten
 800100a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800100e:	f7ff fdb3 	bl	8000b78 <__aeabi_d2iz>
 8001012:	4603      	mov	r3, r0
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fa95 	bl	8000544 <__aeabi_i2d>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001022:	f7ff f941 	bl	80002a8 <__aeabi_dsub>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4610      	mov	r0, r2
 800102c:	4619      	mov	r1, r3
 800102e:	a340      	add	r3, pc, #256	@ (adr r3, 8001130 <PrintLog+0x190>)
 8001030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001034:	f7ff faf0 	bl	8000618 <__aeabi_dmul>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	e9c7 2300 	strd	r2, r3, [r7]
		UART_putint((int)temp);
 8001040:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001044:	f7ff fd98 	bl	8000b78 <__aeabi_d2iz>
 8001048:	4603      	mov	r3, r0
 800104a:	4618      	mov	r0, r3
 800104c:	f002 fba4 	bl	8003798 <UART_putint>


		UART_puts("\rLongitude: ");
 8001050:	483d      	ldr	r0, [pc, #244]	@ (8001148 <PrintLog+0x1a8>)
 8001052:	f002 fb85 	bl	8003760 <UART_puts>
		temp = LogArray[i].Route.longitude;
 8001056:	493a      	ldr	r1, [pc, #232]	@ (8001140 <PrintLog+0x1a0>)
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	440b      	add	r3, r1
 8001064:	3310      	adds	r3, #16
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	e9c7 2300 	strd	r2, r3, [r7]
		UART_putint((int)temp);
 800106e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001072:	f7ff fd81 	bl	8000b78 <__aeabi_d2iz>
 8001076:	4603      	mov	r3, r0
 8001078:	4618      	mov	r0, r3
 800107a:	f002 fb8d 	bl	8003798 <UART_putint>
		UART_putchar('.');
 800107e:	202e      	movs	r0, #46	@ 0x2e
 8001080:	f002 fb5c 	bl	800373c <UART_putchar>
		temp = (temp - (int)temp) * 10000000000;
 8001084:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001088:	f7ff fd76 	bl	8000b78 <__aeabi_d2iz>
 800108c:	4603      	mov	r3, r0
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fa58 	bl	8000544 <__aeabi_i2d>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	e9d7 0100 	ldrd	r0, r1, [r7]
 800109c:	f7ff f904 	bl	80002a8 <__aeabi_dsub>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	a321      	add	r3, pc, #132	@ (adr r3, 8001130 <PrintLog+0x190>)
 80010aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ae:	f7ff fab3 	bl	8000618 <__aeabi_dmul>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	e9c7 2300 	strd	r2, r3, [r7]
		UART_putint((int)temp);
 80010ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010be:	f7ff fd5b 	bl	8000b78 <__aeabi_d2iz>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f002 fb67 	bl	8003798 <UART_putint>


		UART_puts("\rCourse: ");
 80010ca:	4820      	ldr	r0, [pc, #128]	@ (800114c <PrintLog+0x1ac>)
 80010cc:	f002 fb48 	bl	8003760 <UART_puts>
		UART_putint((int)LogArray[i].Route.course);
 80010d0:	491b      	ldr	r1, [pc, #108]	@ (8001140 <PrintLog+0x1a0>)
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	4613      	mov	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	440b      	add	r3, r1
 80010de:	3318      	adds	r3, #24
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	f7ff fd46 	bl	8000b78 <__aeabi_d2iz>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f002 fb52 	bl	8003798 <UART_putint>


		UART_puts("\rTijd sinds start rijden: ");
 80010f4:	4816      	ldr	r0, [pc, #88]	@ (8001150 <PrintLog+0x1b0>)
 80010f6:	f002 fb33 	bl	8003760 <UART_puts>
		UART_putint(LogArray[i].TijdSindsStart);
 80010fa:	4911      	ldr	r1, [pc, #68]	@ (8001140 <PrintLog+0x1a0>)
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	440b      	add	r3, r1
 8001108:	3320      	adds	r3, #32
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f002 fb43 	bl	8003798 <UART_putint>
	for (int i = 0; i < logIndex; i++)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3301      	adds	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <PrintLog+0x1b4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	429a      	cmp	r2, r3
 8001120:	f6ff af44 	blt.w	8000fac <PrintLog+0xc>
	}
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000000 	.word	0x20000000
 8001134:	4202a05f 	.word	0x4202a05f
 8001138:	08018ee0 	.word	0x08018ee0
 800113c:	08018f34 	.word	0x08018f34
 8001140:	20000920 	.word	0x20000920
 8001144:	08018f40 	.word	0x08018f40
 8001148:	08018f4c 	.word	0x08018f4c
 800114c:	08018f5c 	.word	0x08018f5c
 8001150:	08018f68 	.word	0x08018f68
 8001154:	20002860 	.word	0x20002860

08001158 <ARM_keys_IRQ>:
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void.
*/

void ARM_keys_IRQ (void *argument)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b095      	sub	sp, #84	@ 0x54
 800115c:	af02      	add	r7, sp, #8
 800115e:	6078      	str	r0, [r7, #4]
	unsigned int 	key;

	unsigned int 	j = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	647b      	str	r3, [r7, #68]	@ 0x44
	TickType_t		start = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	643b      	str	r3, [r7, #64]	@ 0x40
	TickType_t		stop;
	osThreadId_t 	hARM_keys;
	osThreadId_t 	hData_opslaanTask;
	TaskStatus_t    TaskDetails;
	PTASKDATA 		ptd = tasks;
 8001168:	4b9a      	ldr	r3, [pc, #616]	@ (80013d4 <ARM_keys_IRQ+0x27c>)
 800116a:	63fb      	str	r3, [r7, #60]	@ 0x3c

	ptd++;
 800116c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800116e:	3330      	adds	r3, #48	@ 0x30
 8001170:	63fb      	str	r3, [r7, #60]	@ 0x3c

	UART_puts("\r\n"); UART_puts((char *)__func__); UART_puts(" started");
 8001172:	4899      	ldr	r0, [pc, #612]	@ (80013d8 <ARM_keys_IRQ+0x280>)
 8001174:	f002 faf4 	bl	8003760 <UART_puts>
 8001178:	4898      	ldr	r0, [pc, #608]	@ (80013dc <ARM_keys_IRQ+0x284>)
 800117a:	f002 faf1 	bl	8003760 <UART_puts>
 800117e:	4898      	ldr	r0, [pc, #608]	@ (80013e0 <ARM_keys_IRQ+0x288>)
 8001180:	f002 faee 	bl	8003760 <UART_puts>

	vTaskSuspend(GetTaskhandle("drive_task"));					// stopt de drivetask bij opstart
 8001184:	4897      	ldr	r0, [pc, #604]	@ (80013e4 <ARM_keys_IRQ+0x28c>)
 8001186:	f001 f987 	bl	8002498 <GetTaskhandle>
 800118a:	4603      	mov	r3, r0
 800118c:	4618      	mov	r0, r3
 800118e:	f00f fae9 	bl	8010764 <vTaskSuspend>
	xTimerStop(hTimerLog, 0);									// stopt de timer die de log opslaat
 8001192:	4b95      	ldr	r3, [pc, #596]	@ (80013e8 <ARM_keys_IRQ+0x290>)
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	2300      	movs	r3, #0
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2300      	movs	r3, #0
 800119c:	2200      	movs	r2, #0
 800119e:	2103      	movs	r1, #3
 80011a0:	f010 fe8e 	bl	8011ec0 <xTimerGenericCommand>

	if (!(hARM_keys = GetTaskhandle("ARM_keys_task")))
 80011a4:	4891      	ldr	r0, [pc, #580]	@ (80013ec <ARM_keys_IRQ+0x294>)
 80011a6:	f001 f977 	bl	8002498 <GetTaskhandle>
 80011aa:	63b8      	str	r0, [r7, #56]	@ 0x38
 80011ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d102      	bne.n	80011b8 <ARM_keys_IRQ+0x60>
		error_HaltOS("Err:ARM_hndle");
 80011b2:	488f      	ldr	r0, [pc, #572]	@ (80013f0 <ARM_keys_IRQ+0x298>)
 80011b4:	f001 f816 	bl	80021e4 <error_HaltOS>
	if (!(hData_opslaanTask = GetTaskhandle("data_opslaanTask")))
 80011b8:	488e      	ldr	r0, [pc, #568]	@ (80013f4 <ARM_keys_IRQ+0x29c>)
 80011ba:	f001 f96d 	bl	8002498 <GetTaskhandle>
 80011be:	6378      	str	r0, [r7, #52]	@ 0x34
 80011c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d102      	bne.n	80011cc <ARM_keys_IRQ+0x74>
		error_HaltOS("Err:data_opslaan handle");
 80011c6:	488c      	ldr	r0, [pc, #560]	@ (80013f8 <ARM_keys_IRQ+0x2a0>)
 80011c8:	f001 f80c 	bl	80021e4 <error_HaltOS>

    while (1)
	{

		// wait for ISR (EXTI0_IRQHandler()) to signal that a key is pressed
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 80011cc:	4b8b      	ldr	r3, [pc, #556]	@ (80013fc <ARM_keys_IRQ+0x2a4>)
 80011ce:	6818      	ldr	r0, [r3, #0]
 80011d0:	f04f 33ff 	mov.w	r3, #4294967295
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2300      	movs	r3, #0
 80011d8:	2201      	movs	r2, #1
 80011da:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80011de:	f00d fde5 	bl	800edac <xEventGroupWaitBits>
 80011e2:	6338      	str	r0, [r7, #48]	@ 0x30

		vTaskGetInfo(GetTaskhandle("data_opslaanTask"), &TaskDetails, pdFALSE, eInvalid);
 80011e4:	4883      	ldr	r0, [pc, #524]	@ (80013f4 <ARM_keys_IRQ+0x29c>)
 80011e6:	f001 f957 	bl	8002498 <GetTaskhandle>
 80011ea:	f107 0108 	add.w	r1, r7, #8
 80011ee:	2305      	movs	r3, #5
 80011f0:	2200      	movs	r2, #0
 80011f2:	f010 f961 	bl	80114b8 <vTaskGetInfo>

		if (((key == 0x0001) || (key == 0x0002)) && ((TaskDetails.eCurrentState) != eSuspended) )// verzend alleen als task niet suspended is.
 80011f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d002      	beq.n	8001202 <ARM_keys_IRQ+0xaa>
 80011fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d108      	bne.n	8001214 <ARM_keys_IRQ+0xbc>
 8001202:	7d3b      	ldrb	r3, [r7, #20]
 8001204:	2b03      	cmp	r3, #3
 8001206:	d005      	beq.n	8001214 <ARM_keys_IRQ+0xbc>
			xTaskNotify(hData_opslaanTask, key, eSetValueWithOverwrite); 	// notify Data_opslaanTask with value
 8001208:	2300      	movs	r3, #0
 800120a:	2203      	movs	r2, #3
 800120c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800120e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001210:	f010 fc98 	bl	8011b44 <xTaskGenericNotify>

		if (key == 0x0004)
 8001214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001216:	2b04      	cmp	r3, #4
 8001218:	f040 80c5 	bne.w	80013a6 <ARM_keys_IRQ+0x24e>
		{
			j++;
 800121c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800121e:	3301      	adds	r3, #1
 8001220:	647b      	str	r3, [r7, #68]	@ 0x44

			if(j%2 == 0)
 8001222:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b00      	cmp	r3, #0
 800122a:	d15c      	bne.n	80012e6 <ARM_keys_IRQ+0x18e>
			{
				xSemaphoreTake(hGNRMC_Struct_Sem, portMAX_DELAY);			// wacht totdat de task klaar is met de mutex
 800122c:	4b74      	ldr	r3, [pc, #464]	@ (8001400 <ARM_keys_IRQ+0x2a8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f04f 31ff 	mov.w	r1, #4294967295
 8001234:	4618      	mov	r0, r3
 8001236:	f00e fc09 	bl	800fa4c <xQueueSemaphoreTake>
				vTaskResume(GetTaskhandle("data_opslaanTask"));				// start de waypoints opslaan task
 800123a:	486e      	ldr	r0, [pc, #440]	@ (80013f4 <ARM_keys_IRQ+0x29c>)
 800123c:	f001 f92c 	bl	8002498 <GetTaskhandle>
 8001240:	4603      	mov	r3, r0
 8001242:	4618      	mov	r0, r3
 8001244:	f00f fb36 	bl	80108b4 <vTaskResume>
				vTaskSuspend(GetTaskhandle("drive_task"));					// stopt de drivetask
 8001248:	4866      	ldr	r0, [pc, #408]	@ (80013e4 <ARM_keys_IRQ+0x28c>)
 800124a:	f001 f925 	bl	8002498 <GetTaskhandle>
 800124e:	4603      	mov	r3, r0
 8001250:	4618      	mov	r0, r3
 8001252:	f00f fa87 	bl	8010764 <vTaskSuspend>
				HAL_GPIO_WritePin(GPIOD, LEDRED, GPIO_PIN_SET);				// rode led is route opslaan
 8001256:	2201      	movs	r2, #1
 8001258:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800125c:	4869      	ldr	r0, [pc, #420]	@ (8001404 <ARM_keys_IRQ+0x2ac>)
 800125e:	f003 ff13 	bl	8005088 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, LEDGREEN, GPIO_PIN_RESET);			// groene led is drive mode
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001268:	4866      	ldr	r0, [pc, #408]	@ (8001404 <ARM_keys_IRQ+0x2ac>)
 800126a:	f003 ff0d 	bl	8005088 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, Ard_Bit1_Pin, RESET);				// reset alle bit pins naar arduino anders blijven motoren draaien na het uitgaan van drive mode
 800126e:	2200      	movs	r2, #0
 8001270:	2180      	movs	r1, #128	@ 0x80
 8001272:	4865      	ldr	r0, [pc, #404]	@ (8001408 <ARM_keys_IRQ+0x2b0>)
 8001274:	f003 ff08 	bl	8005088 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, Ard_Bit2_Pin, RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800127e:	4862      	ldr	r0, [pc, #392]	@ (8001408 <ARM_keys_IRQ+0x2b0>)
 8001280:	f003 ff02 	bl	8005088 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, Ard_Bit3_Pin, RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800128a:	485f      	ldr	r0, [pc, #380]	@ (8001408 <ARM_keys_IRQ+0x2b0>)
 800128c:	f003 fefc 	bl	8005088 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, Ard_Bit4_Pin, RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001296:	485c      	ldr	r0, [pc, #368]	@ (8001408 <ARM_keys_IRQ+0x2b0>)
 8001298:	f003 fef6 	bl	8005088 <HAL_GPIO_WritePin>
				xSemaphoreGive(hGNRMC_Struct_Sem);
 800129c:	4b58      	ldr	r3, [pc, #352]	@ (8001400 <ARM_keys_IRQ+0x2a8>)
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	2300      	movs	r3, #0
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	f00e f94f 	bl	800f548 <xQueueGenericSend>

				stop = xTaskGetTickCount() - start;							// slaat de vertreken tijd op sinds drive_task is gestart. max 4294967 sec
 80012aa:	f00f fc7f 	bl	8010bac <xTaskGetTickCount>
 80012ae:	4602      	mov	r2, r0
 80012b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
				UART_puts("\rtijds sinds start drive mode: ");	UART_putint(stop/1000); 	UART_puts(" seconden");
 80012b6:	4855      	ldr	r0, [pc, #340]	@ (800140c <ARM_keys_IRQ+0x2b4>)
 80012b8:	f002 fa52 	bl	8003760 <UART_puts>
 80012bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012be:	4a54      	ldr	r2, [pc, #336]	@ (8001410 <ARM_keys_IRQ+0x2b8>)
 80012c0:	fba2 2303 	umull	r2, r3, r2, r3
 80012c4:	099b      	lsrs	r3, r3, #6
 80012c6:	4618      	mov	r0, r3
 80012c8:	f002 fa66 	bl	8003798 <UART_putint>
 80012cc:	4851      	ldr	r0, [pc, #324]	@ (8001414 <ARM_keys_IRQ+0x2bc>)
 80012ce:	f002 fa47 	bl	8003760 <UART_puts>

				xTimerStop(hTimerLog, 0);									// stopt de log timer als waypoints worden opgeslagen
 80012d2:	4b45      	ldr	r3, [pc, #276]	@ (80013e8 <ARM_keys_IRQ+0x290>)
 80012d4:	6818      	ldr	r0, [r3, #0]
 80012d6:	2300      	movs	r3, #0
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2300      	movs	r3, #0
 80012dc:	2200      	movs	r2, #0
 80012de:	2103      	movs	r1, #3
 80012e0:	f010 fdee 	bl	8011ec0 <xTimerGenericCommand>
 80012e4:	e05f      	b.n	80013a6 <ARM_keys_IRQ+0x24e>

			}
			else if(j%2 == 1)
 80012e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d05a      	beq.n	80013a6 <ARM_keys_IRQ+0x24e>
			{
				for (HoeveelheidWaypoints = 0; waypoints[HoeveelheidWaypoints].longitude != 0; HoeveelheidWaypoints++){} 					// aantal gezette waypoints bepalen
 80012f0:	4b49      	ldr	r3, [pc, #292]	@ (8001418 <ARM_keys_IRQ+0x2c0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	e004      	b.n	8001302 <ARM_keys_IRQ+0x1aa>
 80012f8:	4b47      	ldr	r3, [pc, #284]	@ (8001418 <ARM_keys_IRQ+0x2c0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a46      	ldr	r2, [pc, #280]	@ (8001418 <ARM_keys_IRQ+0x2c0>)
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	4b45      	ldr	r3, [pc, #276]	@ (8001418 <ARM_keys_IRQ+0x2c0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a45      	ldr	r2, [pc, #276]	@ (800141c <ARM_keys_IRQ+0x2c4>)
 8001308:	015b      	lsls	r3, r3, #5
 800130a:	4413      	add	r3, r2
 800130c:	3310      	adds	r3, #16
 800130e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001312:	f04f 0200 	mov.w	r2, #0
 8001316:	f04f 0300 	mov.w	r3, #0
 800131a:	f7ff fbe5 	bl	8000ae8 <__aeabi_dcmpeq>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0e9      	beq.n	80012f8 <ARM_keys_IRQ+0x1a0>
				UART_puts("\rwaypoints = "); UART_putint(HoeveelheidWaypoints);
 8001324:	483e      	ldr	r0, [pc, #248]	@ (8001420 <ARM_keys_IRQ+0x2c8>)
 8001326:	f002 fa1b 	bl	8003760 <UART_puts>
 800132a:	4b3b      	ldr	r3, [pc, #236]	@ (8001418 <ARM_keys_IRQ+0x2c0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f002 fa32 	bl	8003798 <UART_putint>

				xSemaphoreTake(hGNRMC_Struct_Sem, portMAX_DELAY);			// wacht totdat de task klaar is met de mutex
 8001334:	4b32      	ldr	r3, [pc, #200]	@ (8001400 <ARM_keys_IRQ+0x2a8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	4618      	mov	r0, r3
 800133e:	f00e fb85 	bl	800fa4c <xQueueSemaphoreTake>
				vTaskSuspend(GetTaskhandle("data_opslaanTask"));			// start de waypoints opslaan task
 8001342:	482c      	ldr	r0, [pc, #176]	@ (80013f4 <ARM_keys_IRQ+0x29c>)
 8001344:	f001 f8a8 	bl	8002498 <GetTaskhandle>
 8001348:	4603      	mov	r3, r0
 800134a:	4618      	mov	r0, r3
 800134c:	f00f fa0a 	bl	8010764 <vTaskSuspend>
				vTaskResume(GetTaskhandle("drive_task"));					// start de drivetask
 8001350:	4824      	ldr	r0, [pc, #144]	@ (80013e4 <ARM_keys_IRQ+0x28c>)
 8001352:	f001 f8a1 	bl	8002498 <GetTaskhandle>
 8001356:	4603      	mov	r3, r0
 8001358:	4618      	mov	r0, r3
 800135a:	f00f faab 	bl	80108b4 <vTaskResume>
				HAL_GPIO_WritePin(GPIOD, LEDRED, GPIO_PIN_RESET);			// rode led is route opslaan
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001364:	4827      	ldr	r0, [pc, #156]	@ (8001404 <ARM_keys_IRQ+0x2ac>)
 8001366:	f003 fe8f 	bl	8005088 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, LEDGREEN, GPIO_PIN_SET);			// groene led is drive mode
 800136a:	2201      	movs	r2, #1
 800136c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001370:	4824      	ldr	r0, [pc, #144]	@ (8001404 <ARM_keys_IRQ+0x2ac>)
 8001372:	f003 fe89 	bl	8005088 <HAL_GPIO_WritePin>
				xSemaphoreGive(hGNRMC_Struct_Sem);
 8001376:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <ARM_keys_IRQ+0x2a8>)
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	2300      	movs	r3, #0
 800137c:	2200      	movs	r2, #0
 800137e:	2100      	movs	r1, #0
 8001380:	f00e f8e2 	bl	800f548 <xQueueGenericSend>

				ResetLogArray();											// Nieuw begin van drive mode dus ook nieuwe log
 8001384:	f001 fc1c 	bl	8002bc0 <ResetLogArray>
				xTimerStart(hTimerLog, 0);									// start de log timer als drivemode aan staat
 8001388:	4b17      	ldr	r3, [pc, #92]	@ (80013e8 <ARM_keys_IRQ+0x290>)
 800138a:	681c      	ldr	r4, [r3, #0]
 800138c:	f00f fc0e 	bl	8010bac <xTaskGetTickCount>
 8001390:	4602      	mov	r2, r0
 8001392:	2300      	movs	r3, #0
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	2300      	movs	r3, #0
 8001398:	2101      	movs	r1, #1
 800139a:	4620      	mov	r0, r4
 800139c:	f010 fd90 	bl	8011ec0 <xTimerGenericCommand>

				start = xTaskGetTickCount();								// als de drive_task wordt gestart wordt de begintijd opgeslagen
 80013a0:	f00f fc04 	bl	8010bac <xTaskGetTickCount>
 80013a4:	6438      	str	r0, [r7, #64]	@ 0x40
			}
		}
		if(key == 0x0003) // reset behaalde waypoints
 80013a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d107      	bne.n	80013bc <ARM_keys_IRQ+0x264>
		{
			HoeveelheidWaypoints = 0;
 80013ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <ARM_keys_IRQ+0x2c0>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
			WaypointIndex = 0;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001424 <ARM_keys_IRQ+0x2cc>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
			ResetCourseIndex();
 80013b8:	f000 f878 	bl	80014ac <ResetCourseIndex>
		}

		if(key == 0x000D)
 80013bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013be:	2b0d      	cmp	r3, #13
 80013c0:	d101      	bne.n	80013c6 <ARM_keys_IRQ+0x26e>
			PrintLog();
 80013c2:	f7ff fded 	bl	8000fa0 <PrintLog>

		xTaskNotify(hARM_keys, key, eSetValueWithOverwrite); // notify task2 with value
 80013c6:	2300      	movs	r3, #0
 80013c8:	2203      	movs	r2, #3
 80013ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80013cc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80013ce:	f010 fbb9 	bl	8011b44 <xTaskGenericNotify>
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 80013d2:	e6fb      	b.n	80011cc <ARM_keys_IRQ+0x74>
 80013d4:	20000008 	.word	0x20000008
 80013d8:	08018f84 	.word	0x08018f84
 80013dc:	08019af4 	.word	0x08019af4
 80013e0:	08018f88 	.word	0x08018f88
 80013e4:	08018f94 	.word	0x08018f94
 80013e8:	20000448 	.word	0x20000448
 80013ec:	08018fa0 	.word	0x08018fa0
 80013f0:	08018fb0 	.word	0x08018fb0
 80013f4:	08018fc0 	.word	0x08018fc0
 80013f8:	08018fd4 	.word	0x08018fd4
 80013fc:	20000440 	.word	0x20000440
 8001400:	20000438 	.word	0x20000438
 8001404:	40020c00 	.word	0x40020c00
 8001408:	40021000 	.word	0x40021000
 800140c:	08018fec 	.word	0x08018fec
 8001410:	10624dd3 	.word	0x10624dd3
 8001414:	0801900c 	.word	0x0801900c
 8001418:	20002864 	.word	0x20002864
 800141c:	20000528 	.word	0x20000528
 8001420:	08019018 	.word	0x08019018
 8001424:	2000041c 	.word	0x2000041c

08001428 <ARM_keys_task>:
* een schwung...
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen.
* @return void.
*/
void ARM_keys_task (void *argument)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	uint32_t 	 key;

	while(TRUE)
	{
		// WAITING FOR users key
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 8001430:	f107 020c 	add.w	r2, r7, #12
 8001434:	f04f 33ff 	mov.w	r3, #4294967295
 8001438:	f04f 31ff 	mov.w	r1, #4294967295
 800143c:	2000      	movs	r0, #0
 800143e:	f010 fb21 	bl	8011a84 <xTaskNotifyWait>
        		 	 	 0xffffffff, 		// ULONG_MAX, reset the notification value to 0 on exit.
    	                 &key, 				// Notified value.
    	                 portMAX_DELAY);  	// Block indefinitely.

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // krijg toegang (mutex) tot leds
 8001442:	4b16      	ldr	r3, [pc, #88]	@ (800149c <ARM_keys_task+0x74>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f04f 31ff 	mov.w	r1, #4294967295
 800144a:	4618      	mov	r0, r3
 800144c:	f00e fafe 	bl	800fa4c <xQueueSemaphoreTake>

    	LED_put((unsigned char)key); // set 8 leds-byte to key-value
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	4618      	mov	r0, r3
 8001456:	f002 f937 	bl	80036c8 <LED_put>
		osDelay(500);
 800145a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800145e:	f00d fb0b 	bl	800ea78 <osDelay>

		if (Uart_debug_out & ARMKEYS_DEBUG_OUT)
 8001462:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <ARM_keys_task+0x78>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <ARM_keys_task+0x54>
		{
			UART_puts("\r\n\tARM_key pressed to leds: "); UART_putint(key);
 800146e:	480d      	ldr	r0, [pc, #52]	@ (80014a4 <ARM_keys_task+0x7c>)
 8001470:	f002 f976 	bl	8003760 <UART_puts>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4618      	mov	r0, r3
 8001478:	f002 f98e 	bl	8003798 <UART_putint>
		}

	    xSemaphoreGive(hLED_Sem); // geef toegang (mutex) vrij
 800147c:	4b07      	ldr	r3, [pc, #28]	@ (800149c <ARM_keys_task+0x74>)
 800147e:	6818      	ldr	r0, [r3, #0]
 8001480:	2300      	movs	r3, #0
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	f00e f85f 	bl	800f548 <xQueueGenericSend>

     	taskYIELD(); // done, force context switch
 800148a:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <ARM_keys_task+0x80>)
 800148c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	f3bf 8f4f 	dsb	sy
 8001496:	f3bf 8f6f 	isb	sy
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 800149a:	e7c9      	b.n	8001430 <ARM_keys_task+0x8>
 800149c:	20000434 	.word	0x20000434
 80014a0:	20000428 	.word	0x20000428
 80014a4:	08019028 	.word	0x08019028
 80014a8:	e000ed04 	.word	0xe000ed04

080014ac <ResetCourseIndex>:
int GemCourseIndex = 0;
int TotaleCourse = 0;

// Resetten van de gemmidelde course die wordt berekend
void ResetCourseIndex(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
	GemCourseIndex = 0;
 80014b0:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <ResetCourseIndex+0x1c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
	TotaleCourse = 0;
 80014b6:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <ResetCourseIndex+0x20>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000420 	.word	0x20000420
 80014cc:	20000424 	.word	0x20000424

080014d0 <DtoR>:

// Graden naar radialen
double DtoR(double Graden)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	ed87 0b00 	vstr	d0, [r7]
	return(PI * Graden / 180);
 80014da:	a30e      	add	r3, pc, #56	@ (adr r3, 8001514 <DtoR+0x44>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014e4:	f7ff f898 	bl	8000618 <__aeabi_dmul>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <DtoR+0x40>)
 80014f6:	f7ff f9b9 	bl	800086c <__aeabi_ddiv>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	ec43 2b17 	vmov	d7, r2, r3
}
 8001502:	eeb0 0a47 	vmov.f32	s0, s14
 8001506:	eef0 0a67 	vmov.f32	s1, s15
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40668000 	.word	0x40668000
 8001514:	54411744 	.word	0x54411744
 8001518:	400921fb 	.word	0x400921fb
 800151c:	00000000 	.word	0x00000000

08001520 <RtoD>:

// Radialen naar graden
double RtoD(double Radialen)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	ed87 0b00 	vstr	d0, [r7]
    return (Radialen * 180.0 / PI);
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <RtoD+0x48>)
 8001530:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001534:	f7ff f870 	bl	8000618 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	a307      	add	r3, pc, #28	@ (adr r3, 8001560 <RtoD+0x40>)
 8001542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001546:	f7ff f991 	bl	800086c <__aeabi_ddiv>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001552:	eeb0 0a47 	vmov.f32	s0, s14
 8001556:	eef0 0a67 	vmov.f32	s1, s15
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	54411744 	.word	0x54411744
 8001564:	400921fb 	.word	0x400921fb
 8001568:	40668000 	.word	0x40668000
 800156c:	00000000 	.word	0x00000000

08001570 <Afstand_Course_Bepalen>:
* @brief Functie voor het bepalen van de afstand tussen huidige positie en waypoint. <BR>
* Eigelijk ben je aan het pythagorassen maar dan met de extra stap van de bolling van de aarde.
* @return void
*/
int Afstand_Course_Bepalen(void)
{
 8001570:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001574:	b092      	sub	sp, #72	@ 0x48
 8001576:	af00      	add	r7, sp, #0
	double radPosLong = DtoR(GNRMC_data.longitude);
 8001578:	4b9d      	ldr	r3, [pc, #628]	@ (80017f0 <Afstand_Course_Bepalen+0x280>)
 800157a:	ed93 7b04 	vldr	d7, [r3, #16]
 800157e:	eeb0 0a47 	vmov.f32	s0, s14
 8001582:	eef0 0a67 	vmov.f32	s1, s15
 8001586:	f7ff ffa3 	bl	80014d0 <DtoR>
 800158a:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
	double radPosLati = DtoR(GNRMC_data.latitude);
 800158e:	4b98      	ldr	r3, [pc, #608]	@ (80017f0 <Afstand_Course_Bepalen+0x280>)
 8001590:	ed93 7b02 	vldr	d7, [r3, #8]
 8001594:	eeb0 0a47 	vmov.f32	s0, s14
 8001598:	eef0 0a67 	vmov.f32	s1, s15
 800159c:	f7ff ff98 	bl	80014d0 <DtoR>
 80015a0:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38

	double radWayLong = DtoR(waypoints[WaypointIndex].longitude);
 80015a4:	4b93      	ldr	r3, [pc, #588]	@ (80017f4 <Afstand_Course_Bepalen+0x284>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a93      	ldr	r2, [pc, #588]	@ (80017f8 <Afstand_Course_Bepalen+0x288>)
 80015aa:	015b      	lsls	r3, r3, #5
 80015ac:	4413      	add	r3, r2
 80015ae:	3310      	adds	r3, #16
 80015b0:	ed93 7b00 	vldr	d7, [r3]
 80015b4:	eeb0 0a47 	vmov.f32	s0, s14
 80015b8:	eef0 0a67 	vmov.f32	s1, s15
 80015bc:	f7ff ff88 	bl	80014d0 <DtoR>
 80015c0:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
	double radWayLati = DtoR(waypoints[WaypointIndex].latitude);
 80015c4:	4b8b      	ldr	r3, [pc, #556]	@ (80017f4 <Afstand_Course_Bepalen+0x284>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a8b      	ldr	r2, [pc, #556]	@ (80017f8 <Afstand_Course_Bepalen+0x288>)
 80015ca:	015b      	lsls	r3, r3, #5
 80015cc:	4413      	add	r3, r2
 80015ce:	3308      	adds	r3, #8
 80015d0:	ed93 7b00 	vldr	d7, [r3]
 80015d4:	eeb0 0a47 	vmov.f32	s0, s14
 80015d8:	eef0 0a67 	vmov.f32	s1, s15
 80015dc:	f7ff ff78 	bl	80014d0 <DtoR>
 80015e0:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28

	// Equirectangular approximation toepassen om de afstand tot waypoint en course te vinden naar waypoint
	// De gebruikte formules zijn te vinden op "https://www.movable-type.co.uk/scripts/latlong.html"
	// Omdat de afstanden tussen de punten relatief klein zijn zou de bolling van de aarde ook verwaarloosd worden
	double x_l = (radWayLong-radPosLong) * cos((radWayLati+radPosLati)/2);
 80015e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80015e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80015ec:	f7fe fe5c 	bl	80002a8 <__aeabi_dsub>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4614      	mov	r4, r2
 80015f6:	461d      	mov	r5, r3
 80015f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80015fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001600:	f7fe fe54 	bl	80002ac <__adddf3>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001614:	f7ff f92a 	bl	800086c <__aeabi_ddiv>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	ec43 2b17 	vmov	d7, r2, r3
 8001620:	eeb0 0a47 	vmov.f32	s0, s14
 8001624:	eef0 0a67 	vmov.f32	s1, s15
 8001628:	f015 ff96 	bl	8017558 <cos>
 800162c:	ec53 2b10 	vmov	r2, r3, d0
 8001630:	4620      	mov	r0, r4
 8001632:	4629      	mov	r1, r5
 8001634:	f7fe fff0 	bl	8000618 <__aeabi_dmul>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double y_l = radWayLati-radPosLati;
 8001640:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001644:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001648:	f7fe fe2e 	bl	80002a8 <__aeabi_dsub>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	e9c7 2306 	strd	r2, r3, [r7, #24]
	vector.lengte = r_aarde * sqrt(x_l*x_l + y_l*y_l);
 8001654:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001658:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800165c:	f7fe ffdc 	bl	8000618 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4614      	mov	r4, r2
 8001666:	461d      	mov	r5, r3
 8001668:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800166c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001670:	f7fe ffd2 	bl	8000618 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4620      	mov	r0, r4
 800167a:	4629      	mov	r1, r5
 800167c:	f7fe fe16 	bl	80002ac <__adddf3>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	ec43 2b17 	vmov	d7, r2, r3
 8001688:	eeb0 0a47 	vmov.f32	s0, s14
 800168c:	eef0 0a67 	vmov.f32	s1, s15
 8001690:	f015 ff36 	bl	8017500 <sqrt>
 8001694:	ec51 0b10 	vmov	r0, r1, d0
 8001698:	a351      	add	r3, pc, #324	@ (adr r3, 80017e0 <Afstand_Course_Bepalen+0x270>)
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	f7fe ffbb 	bl	8000618 <__aeabi_dmul>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4955      	ldr	r1, [pc, #340]	@ (80017fc <Afstand_Course_Bepalen+0x28c>)
 80016a8:	e9c1 2300 	strd	r2, r3, [r1]

	// Bearing vanaf de leaphy richting de waypoint berekenen
	// De gebruikte formules zijn te vinden op "https://www.movable-type.co.uk/scripts/latlong.html"
	double deltaLong = radWayLong - radPosLong;
 80016ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80016b0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80016b4:	f7fe fdf8 	bl	80002a8 <__aeabi_dsub>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double y_c = sin(deltaLong) * cos(radWayLati);
 80016c0:	ed97 0b04 	vldr	d0, [r7, #16]
 80016c4:	f015 ff9c 	bl	8017600 <sin>
 80016c8:	ec55 4b10 	vmov	r4, r5, d0
 80016cc:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80016d0:	f015 ff42 	bl	8017558 <cos>
 80016d4:	ec53 2b10 	vmov	r2, r3, d0
 80016d8:	4620      	mov	r0, r4
 80016da:	4629      	mov	r1, r5
 80016dc:	f7fe ff9c 	bl	8000618 <__aeabi_dmul>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double x_c = cos(radPosLati) * sin(radWayLati) - sin(radPosLati) * cos(radWayLati) * cos(deltaLong);
 80016e8:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80016ec:	f015 ff34 	bl	8017558 <cos>
 80016f0:	ec55 4b10 	vmov	r4, r5, d0
 80016f4:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80016f8:	f015 ff82 	bl	8017600 <sin>
 80016fc:	ec53 2b10 	vmov	r2, r3, d0
 8001700:	4620      	mov	r0, r4
 8001702:	4629      	mov	r1, r5
 8001704:	f7fe ff88 	bl	8000618 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4614      	mov	r4, r2
 800170e:	461d      	mov	r5, r3
 8001710:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001714:	f015 ff74 	bl	8017600 <sin>
 8001718:	ec59 8b10 	vmov	r8, r9, d0
 800171c:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001720:	f015 ff1a 	bl	8017558 <cos>
 8001724:	ec53 2b10 	vmov	r2, r3, d0
 8001728:	4640      	mov	r0, r8
 800172a:	4649      	mov	r1, r9
 800172c:	f7fe ff74 	bl	8000618 <__aeabi_dmul>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4690      	mov	r8, r2
 8001736:	4699      	mov	r9, r3
 8001738:	ed97 0b04 	vldr	d0, [r7, #16]
 800173c:	f015 ff0c 	bl	8017558 <cos>
 8001740:	ec53 2b10 	vmov	r2, r3, d0
 8001744:	4640      	mov	r0, r8
 8001746:	4649      	mov	r1, r9
 8001748:	f7fe ff66 	bl	8000618 <__aeabi_dmul>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4620      	mov	r0, r4
 8001752:	4629      	mov	r1, r5
 8001754:	f7fe fda8 	bl	80002a8 <__aeabi_dsub>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	e9c7 2300 	strd	r2, r3, [r7]
	vector.course = (int)(fmod(RtoD(atan2(y_c, x_c)) + 360.0, 360.0));
 8001760:	ed97 1b00 	vldr	d1, [r7]
 8001764:	ed97 0b02 	vldr	d0, [r7, #8]
 8001768:	f015 fe9a 	bl	80174a0 <atan2>
 800176c:	eeb0 7a40 	vmov.f32	s14, s0
 8001770:	eef0 7a60 	vmov.f32	s15, s1
 8001774:	eeb0 0a47 	vmov.f32	s0, s14
 8001778:	eef0 0a67 	vmov.f32	s1, s15
 800177c:	f7ff fed0 	bl	8001520 <RtoD>
 8001780:	ec51 0b10 	vmov	r0, r1, d0
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	4b1d      	ldr	r3, [pc, #116]	@ (8001800 <Afstand_Course_Bepalen+0x290>)
 800178a:	f7fe fd8f 	bl	80002ac <__adddf3>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	ec43 2b17 	vmov	d7, r2, r3
 8001796:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 80017e8 <Afstand_Course_Bepalen+0x278>
 800179a:	eeb0 0a47 	vmov.f32	s0, s14
 800179e:	eef0 0a67 	vmov.f32	s1, s15
 80017a2:	f015 fe7f 	bl	80174a4 <fmod>
 80017a6:	ec53 2b10 	vmov	r2, r3, d0
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	f7ff f9e3 	bl	8000b78 <__aeabi_d2iz>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4a11      	ldr	r2, [pc, #68]	@ (80017fc <Afstand_Course_Bepalen+0x28c>)
 80017b6:	6093      	str	r3, [r2, #8]

	// Bepalen of de Leaphy op de waypoint is
	if(vector.lengte < Waypoint_Drempel)
 80017b8:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <Afstand_Course_Bepalen+0x28c>)
 80017ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <Afstand_Course_Bepalen+0x294>)
 80017c4:	f7ff f99a 	bl	8000afc <__aeabi_dcmplt>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <Afstand_Course_Bepalen+0x262>
		return 1;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <Afstand_Course_Bepalen+0x264>
	return 0;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3748      	adds	r7, #72	@ 0x48
 80017d8:	46bd      	mov	sp, r7
 80017da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017de:	bf00      	nop
 80017e0:	00000000 	.word	0x00000000
 80017e4:	41584dae 	.word	0x41584dae
 80017e8:	00000000 	.word	0x00000000
 80017ec:	40768000 	.word	0x40768000
 80017f0:	200004a8 	.word	0x200004a8
 80017f4:	2000041c 	.word	0x2000041c
 80017f8:	20000528 	.word	0x20000528
 80017fc:	200008e8 	.word	0x200008e8
 8001800:	40768000 	.word	0x40768000
 8001804:	40080000 	.word	0x40080000

08001808 <Leaphy_Actie_Bepalen>:
* @brief Functie om te bepalen wat de actie van de leaphy moet zijn op basis van de eerder berekende course naar de waypoint en de huidige course.
* @param int afstand gelezen door de sensor
* @return void
*/
char Leaphy_Actie_Bepalen(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
	// Kijken of we binnen bereik zijn van de drempelwaarde met de HC-SR04
	if(distance < 40)
 800180e:	4b63      	ldr	r3, [pc, #396]	@ (800199c <Leaphy_Actie_Bepalen+0x194>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	2b27      	cmp	r3, #39	@ 0x27
 8001814:	d803      	bhi.n	800181e <Leaphy_Actie_Bepalen+0x16>
	{
		ResetCourseIndex();
 8001816:	f7ff fe49 	bl	80014ac <ResetCourseIndex>
		return 0x06;
 800181a:	2306      	movs	r3, #6
 800181c:	e0b9      	b.n	8001992 <Leaphy_Actie_Bepalen+0x18a>
	}

	// Als er course data is bijvoegen in totale course en index verhogen om een gemmidelde course te kunnen berekenen
	if(GNRMC_data.course && (GemCourseIndex < COURSEINDEXDREMPEL))
 800181e:	4b60      	ldr	r3, [pc, #384]	@ (80019a0 <Leaphy_Actie_Bepalen+0x198>)
 8001820:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	f7ff f95c 	bl	8000ae8 <__aeabi_dcmpeq>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d12f      	bne.n	8001896 <Leaphy_Actie_Bepalen+0x8e>
 8001836:	4b5b      	ldr	r3, [pc, #364]	@ (80019a4 <Leaphy_Actie_Bepalen+0x19c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b02      	cmp	r3, #2
 800183c:	dc2b      	bgt.n	8001896 <Leaphy_Actie_Bepalen+0x8e>
	{
		TotaleCourse += GNRMC_data.course;	// Afgelopen courses bij elkaar optellen
 800183e:	4b5a      	ldr	r3, [pc, #360]	@ (80019a8 <Leaphy_Actie_Bepalen+0x1a0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fe7e 	bl	8000544 <__aeabi_i2d>
 8001848:	4b55      	ldr	r3, [pc, #340]	@ (80019a0 <Leaphy_Actie_Bepalen+0x198>)
 800184a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800184e:	f7fe fd2d 	bl	80002ac <__adddf3>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	f7ff f98d 	bl	8000b78 <__aeabi_d2iz>
 800185e:	4603      	mov	r3, r0
 8001860:	4a51      	ldr	r2, [pc, #324]	@ (80019a8 <Leaphy_Actie_Bepalen+0x1a0>)
 8001862:	6013      	str	r3, [r2, #0]
		GemCourseIndex++;
 8001864:	4b4f      	ldr	r3, [pc, #316]	@ (80019a4 <Leaphy_Actie_Bepalen+0x19c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	3301      	adds	r3, #1
 800186a:	4a4e      	ldr	r2, [pc, #312]	@ (80019a4 <Leaphy_Actie_Bepalen+0x19c>)
 800186c:	6013      	str	r3, [r2, #0]

		if (Uart_debug_out & DRIVEMODE_DEBUG_OUT)
 800186e:	4b4f      	ldr	r3, [pc, #316]	@ (80019ac <Leaphy_Actie_Bepalen+0x1a4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 8001876:	2b00      	cmp	r3, #0
 8001878:	d007      	beq.n	800188a <Leaphy_Actie_Bepalen+0x82>
		{
			UART_puts("\rGemCourseIndex = "); UART_putint(GemCourseIndex);
 800187a:	484d      	ldr	r0, [pc, #308]	@ (80019b0 <Leaphy_Actie_Bepalen+0x1a8>)
 800187c:	f001 ff70 	bl	8003760 <UART_puts>
 8001880:	4b48      	ldr	r3, [pc, #288]	@ (80019a4 <Leaphy_Actie_Bepalen+0x19c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f001 ff87 	bl	8003798 <UART_putint>
		}

		// Als de drempel waarde van hoeveelheid punten nog niet overschreden is return 0x01
		if(GemCourseIndex < COURSEINDEXDREMPEL)
 800188a:	4b46      	ldr	r3, [pc, #280]	@ (80019a4 <Leaphy_Actie_Bepalen+0x19c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b02      	cmp	r3, #2
 8001890:	dc13      	bgt.n	80018ba <Leaphy_Actie_Bepalen+0xb2>
			return 0x01;
 8001892:	2301      	movs	r3, #1
 8001894:	e07d      	b.n	8001992 <Leaphy_Actie_Bepalen+0x18a>
	}
	// Als er geen course data is rechtdoor bljven lopen tot er wel data is
	else if(!(GNRMC_data.course) && (GemCourseIndex < COURSEINDEXDREMPEL))
 8001896:	4b42      	ldr	r3, [pc, #264]	@ (80019a0 <Leaphy_Actie_Bepalen+0x198>)
 8001898:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	f7ff f920 	bl	8000ae8 <__aeabi_dcmpeq>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <Leaphy_Actie_Bepalen+0xb2>
 80018ae:	4b3d      	ldr	r3, [pc, #244]	@ (80019a4 <Leaphy_Actie_Bepalen+0x19c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	dc01      	bgt.n	80018ba <Leaphy_Actie_Bepalen+0xb2>
		return 0x01;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e06b      	b.n	8001992 <Leaphy_Actie_Bepalen+0x18a>

	// Gemmidelde course berekenen als sample size bereikt is
	if(GemCourseIndex >= COURSEINDEXDREMPEL)
 80018ba:	4b3a      	ldr	r3, [pc, #232]	@ (80019a4 <Leaphy_Actie_Bepalen+0x19c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	dd07      	ble.n	80018d2 <Leaphy_Actie_Bepalen+0xca>
	{
		TotaleCourse = TotaleCourse / GemCourseIndex;
 80018c2:	4b39      	ldr	r3, [pc, #228]	@ (80019a8 <Leaphy_Actie_Bepalen+0x1a0>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	4b37      	ldr	r3, [pc, #220]	@ (80019a4 <Leaphy_Actie_Bepalen+0x19c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80018ce:	4a36      	ldr	r2, [pc, #216]	@ (80019a8 <Leaphy_Actie_Bepalen+0x1a0>)
 80018d0:	6013      	str	r3, [r2, #0]
	}

	int course = ((int)TotaleCourse + 360) % 360;	// Normaliseren van de course
 80018d2:	4b35      	ldr	r3, [pc, #212]	@ (80019a8 <Leaphy_Actie_Bepalen+0x1a0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80018da:	4a36      	ldr	r2, [pc, #216]	@ (80019b4 <Leaphy_Actie_Bepalen+0x1ac>)
 80018dc:	fb82 1203 	smull	r1, r2, r2, r3
 80018e0:	441a      	add	r2, r3
 80018e2:	1211      	asrs	r1, r2, #8
 80018e4:	17da      	asrs	r2, r3, #31
 80018e6:	1a8a      	subs	r2, r1, r2
 80018e8:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80018ec:	fb01 f202 	mul.w	r2, r1, r2
 80018f0:	1a9b      	subs	r3, r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]
	int courseDiff = vector.course - course;
 80018f4:	4b30      	ldr	r3, [pc, #192]	@ (80019b8 <Leaphy_Actie_Bepalen+0x1b0>)
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	60bb      	str	r3, [r7, #8]

	if (Uart_debug_out & DRIVEMODE_DEBUG_OUT)
 80018fe:	4b2b      	ldr	r3, [pc, #172]	@ (80019ac <Leaphy_Actie_Bepalen+0x1a4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 8001906:	2b00      	cmp	r3, #0
 8001908:	d015      	beq.n	8001936 <Leaphy_Actie_Bepalen+0x12e>
		{
			UART_puts("\rHuidigeCourse = "); UART_putint(course);
 800190a:	482c      	ldr	r0, [pc, #176]	@ (80019bc <Leaphy_Actie_Bepalen+0x1b4>)
 800190c:	f001 ff28 	bl	8003760 <UART_puts>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4618      	mov	r0, r3
 8001914:	f001 ff40 	bl	8003798 <UART_putint>
			UART_puts("\rTotaleCourse = "); UART_putint(TotaleCourse);
 8001918:	4829      	ldr	r0, [pc, #164]	@ (80019c0 <Leaphy_Actie_Bepalen+0x1b8>)
 800191a:	f001 ff21 	bl	8003760 <UART_puts>
 800191e:	4b22      	ldr	r3, [pc, #136]	@ (80019a8 <Leaphy_Actie_Bepalen+0x1a0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f001 ff38 	bl	8003798 <UART_putint>
			UART_puts("\rCourseDiff = "); UART_putint(courseDiff);
 8001928:	4826      	ldr	r0, [pc, #152]	@ (80019c4 <Leaphy_Actie_Bepalen+0x1bc>)
 800192a:	f001 ff19 	bl	8003760 <UART_puts>
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	4618      	mov	r0, r3
 8001932:	f001 ff31 	bl	8003798 <UART_putint>
		}

	// Bepaal aan de hand van het verschil in course hoe erg er gecorrigeerd moet worden.
	int absDiff = abs(courseDiff);
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	bfb8      	it	lt
 800193c:	425b      	neglt	r3, r3
 800193e:	607b      	str	r3, [r7, #4]
	if(courseDiff < 0)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	da10      	bge.n	8001968 <Leaphy_Actie_Bepalen+0x160>
	{
		if(absDiff >= 180)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2bb3      	cmp	r3, #179	@ 0xb3
 800194a:	dd01      	ble.n	8001950 <Leaphy_Actie_Bepalen+0x148>
			return 0x03;		// Snel Rechts
 800194c:	2303      	movs	r3, #3
 800194e:	e020      	b.n	8001992 <Leaphy_Actie_Bepalen+0x18a>
		if(absDiff < 10)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b09      	cmp	r3, #9
 8001954:	dc01      	bgt.n	800195a <Leaphy_Actie_Bepalen+0x152>
			return 0x01;		// Rechtdoor
 8001956:	2301      	movs	r3, #1
 8001958:	e01b      	b.n	8001992 <Leaphy_Actie_Bepalen+0x18a>
		if(absDiff < 150)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b95      	cmp	r3, #149	@ 0x95
 800195e:	dc01      	bgt.n	8001964 <Leaphy_Actie_Bepalen+0x15c>
			return 0x04;		// Links
 8001960:	2304      	movs	r3, #4
 8001962:	e016      	b.n	8001992 <Leaphy_Actie_Bepalen+0x18a>
		return 0x05;			// Snel Links
 8001964:	2305      	movs	r3, #5
 8001966:	e014      	b.n	8001992 <Leaphy_Actie_Bepalen+0x18a>
	}
	else if(courseDiff > 0)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	dd10      	ble.n	8001990 <Leaphy_Actie_Bepalen+0x188>
	{
		if(courseDiff >= 180)
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	2bb3      	cmp	r3, #179	@ 0xb3
 8001972:	dd01      	ble.n	8001978 <Leaphy_Actie_Bepalen+0x170>
			return 0x05;		// Snel Links
 8001974:	2305      	movs	r3, #5
 8001976:	e00c      	b.n	8001992 <Leaphy_Actie_Bepalen+0x18a>
		if(courseDiff < 10)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2b09      	cmp	r3, #9
 800197c:	dc01      	bgt.n	8001982 <Leaphy_Actie_Bepalen+0x17a>
			return 0x01;		// Rechtdoor
 800197e:	2301      	movs	r3, #1
 8001980:	e007      	b.n	8001992 <Leaphy_Actie_Bepalen+0x18a>
		if(courseDiff < 150)
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2b95      	cmp	r3, #149	@ 0x95
 8001986:	dc01      	bgt.n	800198c <Leaphy_Actie_Bepalen+0x184>
			return 0x02;		// Rechts
 8001988:	2302      	movs	r3, #2
 800198a:	e002      	b.n	8001992 <Leaphy_Actie_Bepalen+0x18a>
		return 0x03;			// Snel Rechts
 800198c:	2303      	movs	r3, #3
 800198e:	e000      	b.n	8001992 <Leaphy_Actie_Bepalen+0x18a>
	}
	return 0x01;
 8001990:	2301      	movs	r3, #1
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20002874 	.word	0x20002874
 80019a0:	200004a8 	.word	0x200004a8
 80019a4:	20000420 	.word	0x20000420
 80019a8:	20000424 	.word	0x20000424
 80019ac:	20000428 	.word	0x20000428
 80019b0:	08019048 	.word	0x08019048
 80019b4:	b60b60b7 	.word	0xb60b60b7
 80019b8:	200008e8 	.word	0x200008e8
 80019bc:	0801905c 	.word	0x0801905c
 80019c0:	08019070 	.word	0x08019070
 80019c4:	08019084 	.word	0x08019084

080019c8 <Leaphy_Data_Sturen>:
* @brief Functie om de pins aan te sturen die de arduino op de leaphy kan uitlezen.
* @param char data die naar de arduino gestuurd moet worden.
* @return void
*/
void Leaphy_Data_Sturen(char data)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]

	// 4 bits data naar de Arduino sturen. Bits worden bepaald afhankelijk van de functie Leaphy_actie_Bepalen
	if(0b0001 & data)
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d005      	beq.n	80019ea <Leaphy_Data_Sturen+0x22>
		HAL_GPIO_WritePin(GPIOE, Ard_Bit1_Pin, SET);
 80019de:	2201      	movs	r2, #1
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	4846      	ldr	r0, [pc, #280]	@ (8001afc <Leaphy_Data_Sturen+0x134>)
 80019e4:	f003 fb50 	bl	8005088 <HAL_GPIO_WritePin>
 80019e8:	e004      	b.n	80019f4 <Leaphy_Data_Sturen+0x2c>
	else
		HAL_GPIO_WritePin(GPIOE, Ard_Bit1_Pin, RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2180      	movs	r1, #128	@ 0x80
 80019ee:	4843      	ldr	r0, [pc, #268]	@ (8001afc <Leaphy_Data_Sturen+0x134>)
 80019f0:	f003 fb4a 	bl	8005088 <HAL_GPIO_WritePin>
	if(0b0010 & data)
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d006      	beq.n	8001a0e <Leaphy_Data_Sturen+0x46>
		HAL_GPIO_WritePin(GPIOE, Ard_Bit2_Pin, SET);
 8001a00:	2201      	movs	r2, #1
 8001a02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a06:	483d      	ldr	r0, [pc, #244]	@ (8001afc <Leaphy_Data_Sturen+0x134>)
 8001a08:	f003 fb3e 	bl	8005088 <HAL_GPIO_WritePin>
 8001a0c:	e005      	b.n	8001a1a <Leaphy_Data_Sturen+0x52>
	else
		HAL_GPIO_WritePin(GPIOE, Ard_Bit2_Pin, RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a14:	4839      	ldr	r0, [pc, #228]	@ (8001afc <Leaphy_Data_Sturen+0x134>)
 8001a16:	f003 fb37 	bl	8005088 <HAL_GPIO_WritePin>
	if(0b0100 & data)
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d006      	beq.n	8001a34 <Leaphy_Data_Sturen+0x6c>
		HAL_GPIO_WritePin(GPIOE, Ard_Bit3_Pin, SET);
 8001a26:	2201      	movs	r2, #1
 8001a28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a2c:	4833      	ldr	r0, [pc, #204]	@ (8001afc <Leaphy_Data_Sturen+0x134>)
 8001a2e:	f003 fb2b 	bl	8005088 <HAL_GPIO_WritePin>
 8001a32:	e005      	b.n	8001a40 <Leaphy_Data_Sturen+0x78>
	else
		HAL_GPIO_WritePin(GPIOE, Ard_Bit3_Pin, RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a3a:	4830      	ldr	r0, [pc, #192]	@ (8001afc <Leaphy_Data_Sturen+0x134>)
 8001a3c:	f003 fb24 	bl	8005088 <HAL_GPIO_WritePin>
	if(0b1000 & data)
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <Leaphy_Data_Sturen+0x92>
		HAL_GPIO_WritePin(GPIOE, Ard_Bit4_Pin, SET);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a52:	482a      	ldr	r0, [pc, #168]	@ (8001afc <Leaphy_Data_Sturen+0x134>)
 8001a54:	f003 fb18 	bl	8005088 <HAL_GPIO_WritePin>
 8001a58:	e005      	b.n	8001a66 <Leaphy_Data_Sturen+0x9e>
	else
		HAL_GPIO_WritePin(GPIOE, Ard_Bit4_Pin, RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a60:	4826      	ldr	r0, [pc, #152]	@ (8001afc <Leaphy_Data_Sturen+0x134>)
 8001a62:	f003 fb11 	bl	8005088 <HAL_GPIO_WritePin>

	// print voor het testen
	if (Uart_debug_out & DRIVEMODE_DEBUG_OUT)
 8001a66:	4b26      	ldr	r3, [pc, #152]	@ (8001b00 <Leaphy_Data_Sturen+0x138>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d040      	beq.n	8001af4 <Leaphy_Data_Sturen+0x12c>
	{
		switch(data)
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	2b0e      	cmp	r3, #14
 8001a78:	d838      	bhi.n	8001aec <Leaphy_Data_Sturen+0x124>
 8001a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a80 <Leaphy_Data_Sturen+0xb8>)
 8001a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a80:	08001abd 	.word	0x08001abd
 8001a84:	08001ac5 	.word	0x08001ac5
 8001a88:	08001acd 	.word	0x08001acd
 8001a8c:	08001ad5 	.word	0x08001ad5
 8001a90:	08001add 	.word	0x08001add
 8001a94:	08001aed 	.word	0x08001aed
 8001a98:	08001aed 	.word	0x08001aed
 8001a9c:	08001aed 	.word	0x08001aed
 8001aa0:	08001aed 	.word	0x08001aed
 8001aa4:	08001aed 	.word	0x08001aed
 8001aa8:	08001aed 	.word	0x08001aed
 8001aac:	08001aed 	.word	0x08001aed
 8001ab0:	08001aed 	.word	0x08001aed
 8001ab4:	08001aed 	.word	0x08001aed
 8001ab8:	08001ae5 	.word	0x08001ae5
		{
		case 0x01:	UART_puts("\rRechtdoor");
 8001abc:	4811      	ldr	r0, [pc, #68]	@ (8001b04 <Leaphy_Data_Sturen+0x13c>)
 8001abe:	f001 fe4f 	bl	8003760 <UART_puts>
					break;
 8001ac2:	e017      	b.n	8001af4 <Leaphy_Data_Sturen+0x12c>
		case 0x02:	UART_puts("\rLangzaam naar rechts");
 8001ac4:	4810      	ldr	r0, [pc, #64]	@ (8001b08 <Leaphy_Data_Sturen+0x140>)
 8001ac6:	f001 fe4b 	bl	8003760 <UART_puts>
					break;
 8001aca:	e013      	b.n	8001af4 <Leaphy_Data_Sturen+0x12c>
		case 0x03:	UART_puts("\rSnel naar rechts");
 8001acc:	480f      	ldr	r0, [pc, #60]	@ (8001b0c <Leaphy_Data_Sturen+0x144>)
 8001ace:	f001 fe47 	bl	8003760 <UART_puts>
					break;
 8001ad2:	e00f      	b.n	8001af4 <Leaphy_Data_Sturen+0x12c>
		case 0x04:	UART_puts("\rLangzaam naar links");
 8001ad4:	480e      	ldr	r0, [pc, #56]	@ (8001b10 <Leaphy_Data_Sturen+0x148>)
 8001ad6:	f001 fe43 	bl	8003760 <UART_puts>
					break;
 8001ada:	e00b      	b.n	8001af4 <Leaphy_Data_Sturen+0x12c>
		case 0x05:	UART_puts("\rSnel naar links");
 8001adc:	480d      	ldr	r0, [pc, #52]	@ (8001b14 <Leaphy_Data_Sturen+0x14c>)
 8001ade:	f001 fe3f 	bl	8003760 <UART_puts>
					break;
 8001ae2:	e007      	b.n	8001af4 <Leaphy_Data_Sturen+0x12c>
		case 0x0F:  UART_puts("\rGeen course data beschikbaar");
 8001ae4:	480c      	ldr	r0, [pc, #48]	@ (8001b18 <Leaphy_Data_Sturen+0x150>)
 8001ae6:	f001 fe3b 	bl	8003760 <UART_puts>
					break;
 8001aea:	e003      	b.n	8001af4 <Leaphy_Data_Sturen+0x12c>
		default:	UART_puts("\rError kan geen keuze maken");
 8001aec:	480b      	ldr	r0, [pc, #44]	@ (8001b1c <Leaphy_Data_Sturen+0x154>)
 8001aee:	f001 fe37 	bl	8003760 <UART_puts>
					break;
 8001af2:	bf00      	nop
		}
	}
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40021000 	.word	0x40021000
 8001b00:	20000428 	.word	0x20000428
 8001b04:	08019094 	.word	0x08019094
 8001b08:	080190a0 	.word	0x080190a0
 8001b0c:	080190b8 	.word	0x080190b8
 8001b10:	080190cc 	.word	0x080190cc
 8001b14:	080190e4 	.word	0x080190e4
 8001b18:	080190f8 	.word	0x080190f8
 8001b1c:	08019118 	.word	0x08019118

08001b20 <drive_task>:
* @brief Deze drive_task moet worden gestart als knopje hiervoor wordt ingedrukt.<BR>
* Dan moet de leaphy de waypoints volgens zonder tegen een muur aan te botsen.
* @return void
*/
void drive_task(void* argument)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);				// Starten PWM timer voor buzzer
 8001b28:	2108      	movs	r1, #8
 8001b2a:	4856      	ldr	r0, [pc, #344]	@ (8001c84 <drive_task+0x164>)
 8001b2c:	f007 fa40 	bl	8008fb0 <HAL_TIM_PWM_Start>
	uint16_t timer_arr = __HAL_TIM_GET_AUTORELOAD(&htim8);	// ARR ophalen van de timer
 8001b30:	4b54      	ldr	r3, [pc, #336]	@ (8001c84 <drive_task+0x164>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b36:	81fb      	strh	r3, [r7, #14]

	while(TRUE)
	{
		ulTaskNotifyTake(0x00, portMAX_DELAY);				// Task notify ontvangen of van GNRMC_Parser of GetDistance
 8001b38:	f04f 31ff 	mov.w	r1, #4294967295
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f00f ff55 	bl	80119ec <ulTaskNotifyTake>
		xSemaphoreTake(hGNRMC_Struct_Sem, portMAX_DELAY);
 8001b42:	4b51      	ldr	r3, [pc, #324]	@ (8001c88 <drive_task+0x168>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f04f 31ff 	mov.w	r1, #4294967295
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f00d ff7e 	bl	800fa4c <xQueueSemaphoreTake>

		// Buzzer aansturen als er geen course data is
		if(!(GNRMC_data.course))
 8001b50:	4b4e      	ldr	r3, [pc, #312]	@ (8001c8c <drive_task+0x16c>)
 8001b52:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	f7fe ffc3 	bl	8000ae8 <__aeabi_dcmpeq>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d016      	beq.n	8001b96 <drive_task+0x76>
		{
			// Buzzer aansturen
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, timer_arr * 0.20f);
 8001b68:	89fb      	ldrh	r3, [r7, #14]
 8001b6a:	ee07 3a90 	vmov	s15, r3
 8001b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b72:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001c90 <drive_task+0x170>
 8001b76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b7a:	4b42      	ldr	r3, [pc, #264]	@ (8001c84 <drive_task+0x164>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b82:	ee17 2a90 	vmov	r2, s15
 8001b86:	63da      	str	r2, [r3, #60]	@ 0x3c
			osDelay(50);
 8001b88:	2032      	movs	r0, #50	@ 0x32
 8001b8a:	f00c ff75 	bl	800ea78 <osDelay>
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, timer_arr * 0.00f);
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c84 <drive_task+0x164>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2200      	movs	r2, #0
 8001b94:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
		int WPBehaald = Afstand_Course_Bepalen();			// Berekenen wat de afstand en course is vanaf de Leaphy naar de huidige waypoint en returnt 1 of 0 afhankelijk van waypoint behaald
 8001b96:	f7ff fceb 	bl	8001570 <Afstand_Course_Bepalen>
 8001b9a:	60b8      	str	r0, [r7, #8]

		xSemaphoreGive(hGNRMC_Struct_Sem);
 8001b9c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c88 <drive_task+0x168>)
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	f00d fccf 	bl	800f548 <xQueueGenericSend>

		// als WPBehaald 1 is wordt de teller l verhoogd om het volgende waypoint aantegeven voor Afstand_course_Bepalen
		if((WPBehaald == 1) && (WaypointIndex <= HoeveelheidWaypoints) && (HoeveelheidWaypoints > 0))
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d139      	bne.n	8001c24 <drive_task+0x104>
 8001bb0:	4b38      	ldr	r3, [pc, #224]	@ (8001c94 <drive_task+0x174>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b38      	ldr	r3, [pc, #224]	@ (8001c98 <drive_task+0x178>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dc33      	bgt.n	8001c24 <drive_task+0x104>
 8001bbc:	4b36      	ldr	r3, [pc, #216]	@ (8001c98 <drive_task+0x178>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	dd2f      	ble.n	8001c24 <drive_task+0x104>
		{
			WaypointIndex++;
 8001bc4:	4b33      	ldr	r3, [pc, #204]	@ (8001c94 <drive_task+0x174>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	4a32      	ldr	r2, [pc, #200]	@ (8001c94 <drive_task+0x174>)
 8001bcc:	6013      	str	r3, [r2, #0]
			ResetCourseIndex();
 8001bce:	f7ff fc6d 	bl	80014ac <ResetCourseIndex>

			// Buzzer aansturen
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, timer_arr * 0.50f);
 8001bd2:	89fb      	ldrh	r3, [r7, #14]
 8001bd4:	ee07 3a90 	vmov	s15, r3
 8001bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bdc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001be4:	4b27      	ldr	r3, [pc, #156]	@ (8001c84 <drive_task+0x164>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bec:	ee17 2a90 	vmov	r2, s15
 8001bf0:	63da      	str	r2, [r3, #60]	@ 0x3c
			osDelay(100);
 8001bf2:	2064      	movs	r0, #100	@ 0x64
 8001bf4:	f00c ff40 	bl	800ea78 <osDelay>
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, timer_arr * 0.00f);
 8001bf8:	4b22      	ldr	r3, [pc, #136]	@ (8001c84 <drive_task+0x164>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	63da      	str	r2, [r3, #60]	@ 0x3c

			if(WaypointIndex >= HoeveelheidWaypoints)
 8001c00:	4b24      	ldr	r3, [pc, #144]	@ (8001c94 <drive_task+0x174>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b24      	ldr	r3, [pc, #144]	@ (8001c98 <drive_task+0x178>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	db0b      	blt.n	8001c24 <drive_task+0x104>
			{
				LCD_clear();
 8001c0c:	f001 fb78 	bl	8003300 <LCD_clear>
				LCD_put("Alle Waypoints behaald");
 8001c10:	4822      	ldr	r0, [pc, #136]	@ (8001c9c <drive_task+0x17c>)
 8001c12:	f001 fc3f 	bl	8003494 <LCD_put>
				xEventGroupSetBits(hKEY_Event, 0x0004); // Knop simuleren om drive mode uiteschakelen als alle waypoints behaald zijn
 8001c16:	4b22      	ldr	r3, [pc, #136]	@ (8001ca0 <drive_task+0x180>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2104      	movs	r1, #4
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f00d f997 	bl	800ef50 <xEventGroupSetBits>
				continue;
 8001c22:	e02e      	b.n	8001c82 <drive_task+0x162>
			}
		}

		Leaphy_Data_Sturen(Leaphy_Actie_Bepalen());	  	// Leaphy aansturen op basis van gemmidelde course, huidige locatie en waypoint
 8001c24:	f7ff fdf0 	bl	8001808 <Leaphy_Actie_Bepalen>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fecc 	bl	80019c8 <Leaphy_Data_Sturen>

		// Resetten van de course index als de sample size is bereikt
		if(GemCourseIndex >= COURSEINDEXDREMPEL)
 8001c30:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca4 <drive_task+0x184>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	dd04      	ble.n	8001c42 <drive_task+0x122>
		{
			osDelay(90);
 8001c38:	205a      	movs	r0, #90	@ 0x5a
 8001c3a:	f00c ff1d 	bl	800ea78 <osDelay>
			ResetCourseIndex();
 8001c3e:	f7ff fc35 	bl	80014ac <ResetCourseIndex>
		}

		// Displayen van hoeveel waypoints behaald zijn en afstand tot volgende waypoint
		LCD_clear();
 8001c42:	f001 fb5d 	bl	8003300 <LCD_clear>
		LCD_putint(WaypointIndex);
 8001c46:	4b13      	ldr	r3, [pc, #76]	@ (8001c94 <drive_task+0x174>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f001 fc5c 	bl	8003508 <LCD_putint>
		LCD_put("/");
 8001c50:	4815      	ldr	r0, [pc, #84]	@ (8001ca8 <drive_task+0x188>)
 8001c52:	f001 fc1f 	bl	8003494 <LCD_put>
		LCD_putint(HoeveelheidWaypoints);
 8001c56:	4b10      	ldr	r3, [pc, #64]	@ (8001c98 <drive_task+0x178>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f001 fc54 	bl	8003508 <LCD_putint>
		LCD_put(" Behaald");
 8001c60:	4812      	ldr	r0, [pc, #72]	@ (8001cac <drive_task+0x18c>)
 8001c62:	f001 fc17 	bl	8003494 <LCD_put>
		LCD_put("    Afstand = ");
 8001c66:	4812      	ldr	r0, [pc, #72]	@ (8001cb0 <drive_task+0x190>)
 8001c68:	f001 fc14 	bl	8003494 <LCD_put>
		LCD_putint((int)vector.lengte);
 8001c6c:	4b11      	ldr	r3, [pc, #68]	@ (8001cb4 <drive_task+0x194>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	f7fe ff7f 	bl	8000b78 <__aeabi_d2iz>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f001 fc43 	bl	8003508 <LCD_putint>
	{
 8001c82:	e759      	b.n	8001b38 <drive_task+0x18>
 8001c84:	2000296c 	.word	0x2000296c
 8001c88:	20000438 	.word	0x20000438
 8001c8c:	200004a8 	.word	0x200004a8
 8001c90:	3e4ccccd 	.word	0x3e4ccccd
 8001c94:	2000041c 	.word	0x2000041c
 8001c98:	20002864 	.word	0x20002864
 8001c9c:	08019134 	.word	0x08019134
 8001ca0:	20000440 	.word	0x20000440
 8001ca4:	20000420 	.word	0x20000420
 8001ca8:	0801914c 	.word	0x0801914c
 8001cac:	08019150 	.word	0x08019150
 8001cb0:	0801915c 	.word	0x0801915c
 8001cb4:	200008e8 	.word	0x200008e8

08001cb8 <UART_keys_IRQ>:
* 2. notifies/stuurt command-string naar andere task
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_keys_IRQ (void *argument)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08c      	sub	sp, #48	@ 0x30
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
    char  		    buffer[QSIZE_UART];
    char		    buffer_copy[QSIZE_UART];
	int 			pos = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int             finish = FALSE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
	osThreadId_t    hTask;

	UART_puts((char *)__func__); UART_puts("started, enter key on terminal...\r\n");
 8001cc8:	4847      	ldr	r0, [pc, #284]	@ (8001de8 <UART_keys_IRQ+0x130>)
 8001cca:	f001 fd49 	bl	8003760 <UART_puts>
 8001cce:	4847      	ldr	r0, [pc, #284]	@ (8001dec <UART_keys_IRQ+0x134>)
 8001cd0:	f001 fd46 	bl	8003760 <UART_puts>

	if (!(hTask = xTaskGetHandle("UART_menu")))
 8001cd4:	4846      	ldr	r0, [pc, #280]	@ (8001df0 <UART_keys_IRQ+0x138>)
 8001cd6:	f00e ffe7 	bl	8010ca8 <xTaskGetHandle>
 8001cda:	6278      	str	r0, [r7, #36]	@ 0x24
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d102      	bne.n	8001ce8 <UART_keys_IRQ+0x30>
		error_HaltOS("Err:UART_hndl 0");
 8001ce2:	4844      	ldr	r0, [pc, #272]	@ (8001df4 <UART_keys_IRQ+0x13c>)
 8001ce4:	f000 fa7e 	bl	80021e4 <error_HaltOS>
    {
		// laat de VIC de q vullen, die per char in onze eigen string geplaatst wordt
		// tot LFEED gedrukt is of qsize-1 bereikt is.
		// nb: argument 2 is het adres waar ik het q-char in zet
		// nb: q-receive haalt gelijk de buffer leeg (q-peek niet).
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 8001ce8:	4b43      	ldr	r3, [pc, #268]	@ (8001df8 <UART_keys_IRQ+0x140>)
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	f107 0218 	add.w	r2, r7, #24
 8001cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f00d fdc5 	bl	800f888 <xQueueReceive>

		// negeer dit char bij geen data: -1, 255, of CR of spatie
		if (buffer[pos] == 0 || buffer[pos] == -1 || buffer[pos] == 255 || buffer[pos] == CRETURN || buffer[pos] == 32)
 8001cfe:	f107 0218 	add.w	r2, r7, #24
 8001d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d04:	4413      	add	r3, r2
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d06b      	beq.n	8001de4 <UART_keys_IRQ+0x12c>
 8001d0c:	f107 0218 	add.w	r2, r7, #24
 8001d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d12:	4413      	add	r3, r2
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2bff      	cmp	r3, #255	@ 0xff
 8001d18:	d064      	beq.n	8001de4 <UART_keys_IRQ+0x12c>
 8001d1a:	f107 0218 	add.w	r2, r7, #24
 8001d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d20:	4413      	add	r3, r2
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b0d      	cmp	r3, #13
 8001d26:	d05d      	beq.n	8001de4 <UART_keys_IRQ+0x12c>
 8001d28:	f107 0218 	add.w	r2, r7, #24
 8001d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d2e:	4413      	add	r3, r2
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b20      	cmp	r3, #32
 8001d34:	d056      	beq.n	8001de4 <UART_keys_IRQ+0x12c>
			continue;

		//UART_putchar(buffer[pos]);  // echo

		// check of de string gesloten was of gesloten moet worden...
		if (buffer[pos] == LFEED)     // close als LF gedrukt
 8001d36:	f107 0218 	add.w	r2, r7, #24
 8001d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d3c:	4413      	add	r3, r2
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b0a      	cmp	r3, #10
 8001d42:	d108      	bne.n	8001d56 <UART_keys_IRQ+0x9e>
		{
			buffer[pos] = '\0';
 8001d44:	f107 0218 	add.w	r2, r7, #24
 8001d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d4a:	4413      	add	r3, r2
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 8001d50:	2301      	movs	r3, #1
 8001d52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d54:	e00d      	b.n	8001d72 <UART_keys_IRQ+0xba>

		}
		else if (pos == QSIZE_UART - 2) // close if end of buf
 8001d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d10a      	bne.n	8001d72 <UART_keys_IRQ+0xba>
		{
			buffer[++pos] = '\0';       // first, skip to last position, then close string
 8001d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d5e:	3301      	adds	r3, #1
 8001d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d62:	f107 0218 	add.w	r2, r7, #24
 8001d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d68:	4413      	add	r3, r2
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		if (finish)
 8001d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d031      	beq.n	8001ddc <UART_keys_IRQ+0x124>
		{
			// de volgende taak krijgt een copy van de string
			// mijn eigen buffer kan zo gelijk weer gevuld worden door de ISR
			strcpy(buffer_copy, buffer);
 8001d78:	f107 0218 	add.w	r2, r7, #24
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f013 f92f 	bl	8014fe6 <strcpy>
			memset(buffer, 0, QSIZE_UART); // clear original buffer
 8001d88:	f107 0318 	add.w	r3, r7, #24
 8001d8c:	220a      	movs	r2, #10
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f012 ffc0 	bl	8014d16 <memset>
			finish = FALSE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	62bb      	str	r3, [r7, #40]	@ 0x28
			pos = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

			xTaskNotify(hTask, buffer_copy, eSetValueWithOverwrite); // notify task2 with copy
 8001d9e:	f107 010c 	add.w	r1, r7, #12
 8001da2:	2300      	movs	r3, #0
 8001da4:	2203      	movs	r2, #3
 8001da6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001da8:	f00f fecc 	bl	8011b44 <xTaskGenericNotify>

			if (Uart_debug_out & UART_DEBUG_OUT)
 8001dac:	4b13      	ldr	r3, [pc, #76]	@ (8001dfc <UART_keys_IRQ+0x144>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d097      	beq.n	8001ce8 <UART_keys_IRQ+0x30>
			{
				UART_puts("\n\r"); UART_puts((char *)__func__);
 8001db8:	4811      	ldr	r0, [pc, #68]	@ (8001e00 <UART_keys_IRQ+0x148>)
 8001dba:	f001 fcd1 	bl	8003760 <UART_puts>
 8001dbe:	480a      	ldr	r0, [pc, #40]	@ (8001de8 <UART_keys_IRQ+0x130>)
 8001dc0:	f001 fcce 	bl	8003760 <UART_puts>
				UART_puts(": UART_menu notified with "); UART_puts(buffer_copy);
 8001dc4:	480f      	ldr	r0, [pc, #60]	@ (8001e04 <UART_keys_IRQ+0x14c>)
 8001dc6:	f001 fccb 	bl	8003760 <UART_puts>
 8001dca:	f107 030c 	add.w	r3, r7, #12
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f001 fcc6 	bl	8003760 <UART_puts>
				UART_puts("\r\n");
 8001dd4:	480c      	ldr	r0, [pc, #48]	@ (8001e08 <UART_keys_IRQ+0x150>)
 8001dd6:	f001 fcc3 	bl	8003760 <UART_puts>
 8001dda:	e785      	b.n	8001ce8 <UART_keys_IRQ+0x30>
			}
		}
		else
			pos++;
 8001ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dde:	3301      	adds	r3, #1
 8001de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001de2:	e781      	b.n	8001ce8 <UART_keys_IRQ+0x30>
			continue;
 8001de4:	bf00      	nop
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 8001de6:	e77f      	b.n	8001ce8 <UART_keys_IRQ+0x30>
 8001de8:	08019b04 	.word	0x08019b04
 8001dec:	080191b8 	.word	0x080191b8
 8001df0:	0801916c 	.word	0x0801916c
 8001df4:	080191dc 	.word	0x080191dc
 8001df8:	2000042c 	.word	0x2000042c
 8001dfc:	20000428 	.word	0x20000428
 8001e00:	0801919c 	.word	0x0801919c
 8001e04:	080191ec 	.word	0x080191ec
 8001e08:	080191b4 	.word	0x080191b4

08001e0c <UART_menu>:
* geinterpreteerd.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_menu (void *argument)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	char   *s;
	char   *tok = ",";  // token if command is more than 1 char
 8001e14:	4bad      	ldr	r3, [pc, #692]	@ (80020cc <UART_menu+0x2c0>)
 8001e16:	61fb      	str	r3, [r7, #28]
	int     val1, val2;

	UART_puts((char *)__func__); UART_puts("started\n\r");
 8001e18:	48ad      	ldr	r0, [pc, #692]	@ (80020d0 <UART_menu+0x2c4>)
 8001e1a:	f001 fca1 	bl	8003760 <UART_puts>
 8001e1e:	48ad      	ldr	r0, [pc, #692]	@ (80020d4 <UART_menu+0x2c8>)
 8001e20:	f001 fc9e 	bl	8003760 <UART_puts>

	while (TRUE)
	{
		// wacht op de string; let op de cast van (unsigned long) naar (char *)!
		// want de waarde die ik terug krijg is een pointer.
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295
 8001e28:	2001      	movs	r0, #1
 8001e2a:	f00f fddf 	bl	80119ec <ulTaskNotifyTake>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	61bb      	str	r3, [r7, #24]

		// check het eerste (en vaak enige) karakter van de inkomende command-string
		// toupper() zorgt ervoor dat het eerste karakter hoofdletter wordt, zo hoef ik niet op kleine
		// letters te checken.
		switch (toupper((unsigned char)s[0]))
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	75fb      	strb	r3, [r7, #23]
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	4aa6      	ldr	r2, [pc, #664]	@ (80020d8 <UART_menu+0x2cc>)
 8001e3e:	4413      	add	r3, r2
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d102      	bne.n	8001e50 <UART_menu+0x44>
 8001e4a:	7dfb      	ldrb	r3, [r7, #23]
 8001e4c:	3b20      	subs	r3, #32
 8001e4e:	e000      	b.n	8001e52 <UART_menu+0x46>
 8001e50:	7dfb      	ldrb	r3, [r7, #23]
 8001e52:	3b30      	subs	r3, #48	@ 0x30
 8001e54:	2b24      	cmp	r3, #36	@ 0x24
 8001e56:	d84d      	bhi.n	8001ef4 <UART_menu+0xe8>
 8001e58:	a201      	add	r2, pc, #4	@ (adr r2, 8001e60 <UART_menu+0x54>)
 8001e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5e:	bf00      	nop
 8001e60:	08001f03 	.word	0x08001f03
 8001e64:	08001f3f 	.word	0x08001f3f
 8001e68:	08001f6b 	.word	0x08001f6b
 8001e6c:	08001f97 	.word	0x08001f97
 8001e70:	08001fc3 	.word	0x08001fc3
 8001e74:	08001fef 	.word	0x08001fef
 8001e78:	0800201b 	.word	0x0800201b
 8001e7c:	08001ef5 	.word	0x08001ef5
 8001e80:	08001ef5 	.word	0x08001ef5
 8001e84:	08001ef5 	.word	0x08001ef5
 8001e88:	08001ef5 	.word	0x08001ef5
 8001e8c:	08001ef5 	.word	0x08001ef5
 8001e90:	08001ef5 	.word	0x08001ef5
 8001e94:	08001ef5 	.word	0x08001ef5
 8001e98:	08001ef5 	.word	0x08001ef5
 8001e9c:	08001ef5 	.word	0x08001ef5
 8001ea0:	08001ef5 	.word	0x08001ef5
 8001ea4:	08001ef5 	.word	0x08001ef5
 8001ea8:	08001ef5 	.word	0x08001ef5
 8001eac:	08001ef5 	.word	0x08001ef5
 8001eb0:	08001ef5 	.word	0x08001ef5
 8001eb4:	08001ef5 	.word	0x08001ef5
 8001eb8:	08001ef5 	.word	0x08001ef5
 8001ebc:	08001ef5 	.word	0x08001ef5
 8001ec0:	08001ef5 	.word	0x08001ef5
 8001ec4:	08001ef5 	.word	0x08001ef5
 8001ec8:	08001ef5 	.word	0x08001ef5
 8001ecc:	08001ef5 	.word	0x08001ef5
 8001ed0:	08001ef5 	.word	0x08001ef5
 8001ed4:	08002047 	.word	0x08002047
 8001ed8:	08001ef5 	.word	0x08001ef5
 8001edc:	08001ef5 	.word	0x08001ef5
 8001ee0:	08002053 	.word	0x08002053
 8001ee4:	08001ef5 	.word	0x08001ef5
 8001ee8:	08001ef5 	.word	0x08001ef5
 8001eec:	08002097 	.word	0x08002097
 8001ef0:	0800204d 	.word	0x0800204d
		{
		default:  UART_puts(s);
 8001ef4:	69b8      	ldr	r0, [r7, #24]
 8001ef6:	f001 fc33 	bl	8003760 <UART_puts>
				  UART_puts(" (unkown command)\r\n");
 8001efa:	4878      	ldr	r0, [pc, #480]	@ (80020dc <UART_menu+0x2d0>)
 8001efc:	f001 fc30 	bl	8003760 <UART_puts>
				  break;
 8001f00:	e0e3      	b.n	80020ca <UART_menu+0x2be>

		/// <b>0 - 5</b>: Togglet verschillende debug-outputs naar UART
		case '0': Uart_debug_out = (Uart_debug_out ? DEBUG_OUT_NONE : DEBUG_OUT_ALL);
 8001f02:	4b77      	ldr	r3, [pc, #476]	@ (80020e0 <UART_menu+0x2d4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <UART_menu+0x102>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	e000      	b.n	8001f10 <UART_menu+0x104>
 8001f0e:	23ff      	movs	r3, #255	@ 0xff
 8001f10:	4a73      	ldr	r2, [pc, #460]	@ (80020e0 <UART_menu+0x2d4>)
 8001f12:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nall debug output = ");
 8001f14:	4873      	ldr	r0, [pc, #460]	@ (80020e4 <UART_menu+0x2d8>)
 8001f16:	f001 fc23 	bl	8003760 <UART_puts>
		  	  	  UART_puts(Uart_debug_out == DEBUG_OUT_ALL ? "ON\r\n" : "OFF\r\n");
 8001f1a:	4b71      	ldr	r3, [pc, #452]	@ (80020e0 <UART_menu+0x2d4>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2bff      	cmp	r3, #255	@ 0xff
 8001f20:	d101      	bne.n	8001f26 <UART_menu+0x11a>
 8001f22:	4b71      	ldr	r3, [pc, #452]	@ (80020e8 <UART_menu+0x2dc>)
 8001f24:	e000      	b.n	8001f28 <UART_menu+0x11c>
 8001f26:	4b71      	ldr	r3, [pc, #452]	@ (80020ec <UART_menu+0x2e0>)
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f001 fc19 	bl	8003760 <UART_puts>

		  	  	  // als alle output uitgezet wordt, is het handig om gelijk het menu te laten zien.
		  	  	  if (Uart_debug_out == DEBUG_OUT_NONE)
 8001f2e:	4b6c      	ldr	r3, [pc, #432]	@ (80020e0 <UART_menu+0x2d4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 80c4 	bne.w	80020c0 <UART_menu+0x2b4>
		  	  		  DisplayMenu();
 8001f38:	f000 f946 	bl	80021c8 <DisplayMenu>
				  break;
 8001f3c:	e0c0      	b.n	80020c0 <UART_menu+0x2b4>

		case '1': Uart_debug_out ^= LEDS_DEBUG_OUT; // toggle output on/off
 8001f3e:	4b68      	ldr	r3, [pc, #416]	@ (80020e0 <UART_menu+0x2d4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f083 0301 	eor.w	r3, r3, #1
 8001f46:	4a66      	ldr	r2, [pc, #408]	@ (80020e0 <UART_menu+0x2d4>)
 8001f48:	6013      	str	r3, [r2, #0]
				  UART_puts("\r\nleds output = ");
 8001f4a:	4869      	ldr	r0, [pc, #420]	@ (80020f0 <UART_menu+0x2e4>)
 8001f4c:	f001 fc08 	bl	8003760 <UART_puts>
				  UART_puts(Uart_debug_out & LEDS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001f50:	4b63      	ldr	r3, [pc, #396]	@ (80020e0 <UART_menu+0x2d4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <UART_menu+0x154>
 8001f5c:	4b62      	ldr	r3, [pc, #392]	@ (80020e8 <UART_menu+0x2dc>)
 8001f5e:	e000      	b.n	8001f62 <UART_menu+0x156>
 8001f60:	4b62      	ldr	r3, [pc, #392]	@ (80020ec <UART_menu+0x2e0>)
 8001f62:	4618      	mov	r0, r3
 8001f64:	f001 fbfc 	bl	8003760 <UART_puts>
				  break;
 8001f68:	e0af      	b.n	80020ca <UART_menu+0x2be>

		case '2': Uart_debug_out ^= ARMKEYS_DEBUG_OUT; // toggle output on/off
 8001f6a:	4b5d      	ldr	r3, [pc, #372]	@ (80020e0 <UART_menu+0x2d4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f083 0302 	eor.w	r3, r3, #2
 8001f72:	4a5b      	ldr	r2, [pc, #364]	@ (80020e0 <UART_menu+0x2d4>)
 8001f74:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\narmkeys output = ");
 8001f76:	485f      	ldr	r0, [pc, #380]	@ (80020f4 <UART_menu+0x2e8>)
 8001f78:	f001 fbf2 	bl	8003760 <UART_puts>
		  	      UART_puts(Uart_debug_out & ARMKEYS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001f7c:	4b58      	ldr	r3, [pc, #352]	@ (80020e0 <UART_menu+0x2d4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <UART_menu+0x180>
 8001f88:	4b57      	ldr	r3, [pc, #348]	@ (80020e8 <UART_menu+0x2dc>)
 8001f8a:	e000      	b.n	8001f8e <UART_menu+0x182>
 8001f8c:	4b57      	ldr	r3, [pc, #348]	@ (80020ec <UART_menu+0x2e0>)
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f001 fbe6 	bl	8003760 <UART_puts>
				  break;
 8001f94:	e099      	b.n	80020ca <UART_menu+0x2be>

		case '3': Uart_debug_out ^= UART_DEBUG_OUT; // toggle output on/off
 8001f96:	4b52      	ldr	r3, [pc, #328]	@ (80020e0 <UART_menu+0x2d4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f083 0304 	eor.w	r3, r3, #4
 8001f9e:	4a50      	ldr	r2, [pc, #320]	@ (80020e0 <UART_menu+0x2d4>)
 8001fa0:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\nuart output = ");
 8001fa2:	4855      	ldr	r0, [pc, #340]	@ (80020f8 <UART_menu+0x2ec>)
 8001fa4:	f001 fbdc 	bl	8003760 <UART_puts>
		  	      UART_puts(Uart_debug_out & UART_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001fa8:	4b4d      	ldr	r3, [pc, #308]	@ (80020e0 <UART_menu+0x2d4>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <UART_menu+0x1ac>
 8001fb4:	4b4c      	ldr	r3, [pc, #304]	@ (80020e8 <UART_menu+0x2dc>)
 8001fb6:	e000      	b.n	8001fba <UART_menu+0x1ae>
 8001fb8:	4b4c      	ldr	r3, [pc, #304]	@ (80020ec <UART_menu+0x2e0>)
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f001 fbd0 	bl	8003760 <UART_puts>
				  break;
 8001fc0:	e083      	b.n	80020ca <UART_menu+0x2be>

		case '4': Uart_debug_out ^= STUDENT_DEBUG_OUT; // toggle output on/off
 8001fc2:	4b47      	ldr	r3, [pc, #284]	@ (80020e0 <UART_menu+0x2d4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f083 0308 	eor.w	r3, r3, #8
 8001fca:	4a45      	ldr	r2, [pc, #276]	@ (80020e0 <UART_menu+0x2d4>)
 8001fcc:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nstudent output = ");
 8001fce:	484b      	ldr	r0, [pc, #300]	@ (80020fc <UART_menu+0x2f0>)
 8001fd0:	f001 fbc6 	bl	8003760 <UART_puts>
		  	  	  UART_puts(Uart_debug_out & STUDENT_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001fd4:	4b42      	ldr	r3, [pc, #264]	@ (80020e0 <UART_menu+0x2d4>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <UART_menu+0x1d8>
 8001fe0:	4b41      	ldr	r3, [pc, #260]	@ (80020e8 <UART_menu+0x2dc>)
 8001fe2:	e000      	b.n	8001fe6 <UART_menu+0x1da>
 8001fe4:	4b41      	ldr	r3, [pc, #260]	@ (80020ec <UART_menu+0x2e0>)
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f001 fbba 	bl	8003760 <UART_puts>
				  break;
 8001fec:	e06d      	b.n	80020ca <UART_menu+0x2be>

		case '5': Uart_debug_out ^= GPS_DEBUG_OUT; // toggle output on/off
 8001fee:	4b3c      	ldr	r3, [pc, #240]	@ (80020e0 <UART_menu+0x2d4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f083 0310 	eor.w	r3, r3, #16
 8001ff6:	4a3a      	ldr	r2, [pc, #232]	@ (80020e0 <UART_menu+0x2d4>)
 8001ff8:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nGPS output = ");
 8001ffa:	4841      	ldr	r0, [pc, #260]	@ (8002100 <UART_menu+0x2f4>)
 8001ffc:	f001 fbb0 	bl	8003760 <UART_puts>
		  	  	  UART_puts(Uart_debug_out & GPS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8002000:	4b37      	ldr	r3, [pc, #220]	@ (80020e0 <UART_menu+0x2d4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0310 	and.w	r3, r3, #16
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <UART_menu+0x204>
 800200c:	4b36      	ldr	r3, [pc, #216]	@ (80020e8 <UART_menu+0x2dc>)
 800200e:	e000      	b.n	8002012 <UART_menu+0x206>
 8002010:	4b36      	ldr	r3, [pc, #216]	@ (80020ec <UART_menu+0x2e0>)
 8002012:	4618      	mov	r0, r3
 8002014:	f001 fba4 	bl	8003760 <UART_puts>
				  break;
 8002018:	e057      	b.n	80020ca <UART_menu+0x2be>

		case '6': Uart_debug_out ^= DRIVEMODE_DEBUG_OUT; // toggle output on/off
 800201a:	4b31      	ldr	r3, [pc, #196]	@ (80020e0 <UART_menu+0x2d4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f083 0324 	eor.w	r3, r3, #36	@ 0x24
 8002022:	4a2f      	ldr	r2, [pc, #188]	@ (80020e0 <UART_menu+0x2d4>)
 8002024:	6013      	str	r3, [r2, #0]
				  UART_puts("\r\nDrive mode output = ");
 8002026:	4837      	ldr	r0, [pc, #220]	@ (8002104 <UART_menu+0x2f8>)
 8002028:	f001 fb9a 	bl	8003760 <UART_puts>
				  UART_puts(Uart_debug_out & GPS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 800202c:	4b2c      	ldr	r3, [pc, #176]	@ (80020e0 <UART_menu+0x2d4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <UART_menu+0x230>
 8002038:	4b2b      	ldr	r3, [pc, #172]	@ (80020e8 <UART_menu+0x2dc>)
 800203a:	e000      	b.n	800203e <UART_menu+0x232>
 800203c:	4b2b      	ldr	r3, [pc, #172]	@ (80020ec <UART_menu+0x2e0>)
 800203e:	4618      	mov	r0, r3
 8002040:	f001 fb8e 	bl	8003760 <UART_puts>
				  break;
 8002044:	e041      	b.n	80020ca <UART_menu+0x2be>

		case 'M': DisplayMenu(); /// M: Displays het menu (zie my_app.c)
 8002046:	f000 f8bf 	bl	80021c8 <DisplayMenu>
				  break;
 800204a:	e03e      	b.n	80020ca <UART_menu+0x2be>

		case 'T': DisplayTaskData(); /// T: Displays de stackdata van alle Tasks
 800204c:	f000 faca 	bl	80025e4 <DisplayTaskData>
				  break;
 8002050:	e03b      	b.n	80020ca <UART_menu+0x2be>
		case 'P': /// P: Verandert de Prioriteit van een taak
				  /// commando, als: <b>"t,9,20"</b> betekent: set Task 9 op priority 20
				  //  eerst: de 2 waarden worden uit de string gehaald met strtok()
			      //  dan: de strings worden naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 't,'
 8002052:	69f9      	ldr	r1, [r7, #28]
 8002054:	69b8      	ldr	r0, [r7, #24]
 8002056:	f012 fe85 	bl	8014d64 <strtok>
 800205a:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 800205c:	69f9      	ldr	r1, [r7, #28]
 800205e:	2000      	movs	r0, #0
 8002060:	f012 fe80 	bl	8014d64 <strtok>
 8002064:	61b8      	str	r0, [r7, #24]
 8002066:	69b8      	ldr	r0, [r7, #24]
 8002068:	f011 f9a5 	bl	80133b6 <atoi>
 800206c:	6138      	str	r0, [r7, #16]
				  s = strtok(NULL, tok); val2 = atoi(s); // volgende = priority
 800206e:	69f9      	ldr	r1, [r7, #28]
 8002070:	2000      	movs	r0, #0
 8002072:	f012 fe77 	bl	8014d64 <strtok>
 8002076:	61b8      	str	r0, [r7, #24]
 8002078:	69b8      	ldr	r0, [r7, #24]
 800207a:	f011 f99c 	bl	80133b6 <atoi>
 800207e:	60f8      	str	r0, [r7, #12]
				  if (val1 && val2)						 // kleine validiteitscontrole
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d01e      	beq.n	80020c4 <UART_menu+0x2b8>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d01b      	beq.n	80020c4 <UART_menu+0x2b8>
					  SetTaskPriority(val1, val2);
 800208c:	68f9      	ldr	r1, [r7, #12]
 800208e:	6938      	ldr	r0, [r7, #16]
 8002090:	f000 fa24 	bl	80024dc <SetTaskPriority>
				  break;
 8002094:	e016      	b.n	80020c4 <UART_menu+0x2b8>
		case 'S': /// S: Start/Stop task
				  /// commando, als: <b>"s,9"</b> betekent: start/stop Task 9
				  //  eerst: de waarde worden uit de string gehaald met strtok()
			      //  dan: de string wordt naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 's,'
 8002096:	69f9      	ldr	r1, [r7, #28]
 8002098:	69b8      	ldr	r0, [r7, #24]
 800209a:	f012 fe63 	bl	8014d64 <strtok>
 800209e:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 80020a0:	69f9      	ldr	r1, [r7, #28]
 80020a2:	2000      	movs	r0, #0
 80020a4:	f012 fe5e 	bl	8014d64 <strtok>
 80020a8:	61b8      	str	r0, [r7, #24]
 80020aa:	69b8      	ldr	r0, [r7, #24]
 80020ac:	f011 f983 	bl	80133b6 <atoi>
 80020b0:	6138      	str	r0, [r7, #16]
				  if (val1)						 // kleine validiteitscontrole
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d007      	beq.n	80020c8 <UART_menu+0x2bc>
					  StartStopTask(val1);
 80020b8:	6938      	ldr	r0, [r7, #16]
 80020ba:	f000 fa4b 	bl	8002554 <StartStopTask>
				  break;
 80020be:	e003      	b.n	80020c8 <UART_menu+0x2bc>
				  break;
 80020c0:	bf00      	nop
 80020c2:	e6af      	b.n	8001e24 <UART_menu+0x18>
				  break;
 80020c4:	bf00      	nop
 80020c6:	e6ad      	b.n	8001e24 <UART_menu+0x18>
				  break;
 80020c8:	bf00      	nop
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80020ca:	e6ab      	b.n	8001e24 <UART_menu+0x18>
 80020cc:	08019208 	.word	0x08019208
 80020d0:	08019b14 	.word	0x08019b14
 80020d4:	0801920c 	.word	0x0801920c
 80020d8:	08019de8 	.word	0x08019de8
 80020dc:	08019218 	.word	0x08019218
 80020e0:	20000428 	.word	0x20000428
 80020e4:	0801922c 	.word	0x0801922c
 80020e8:	08019244 	.word	0x08019244
 80020ec:	0801924c 	.word	0x0801924c
 80020f0:	08019254 	.word	0x08019254
 80020f4:	08019268 	.word	0x08019268
 80020f8:	0801927c 	.word	0x0801927c
 80020fc:	08019290 	.word	0x08019290
 8002100:	080192a4 	.word	0x080192a4
 8002104:	080192b4 	.word	0x080192b4

08002108 <DisplayVersion>:
* Les: je ziet hoe je handig een lange string kunt opstellen met het '\'-karakter.
* @return void
* @author MSC
*/
void DisplayVersion(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b09c      	sub	sp, #112	@ 0x70
 800210c:	af00      	add	r7, sp, #0
	char infobuf[100];
    osVersion_t osv;

    char *functionality =
 800210e:	4b24      	ldr	r3, [pc, #144]	@ (80021a0 <DisplayVersion+0x98>)
 8002110:	66fb      	str	r3, [r7, #108]	@ 0x6c
en hoe je makkelijk tasks aanmaakt (admin.c) en hoe je de bidirectionele omgang \r\n\
met de UART-comport gebruikt.\r\n\
Zie verder de Doxygen documentatie van de applicatie.\r\n\
Michiel Scager (update: april 2023)\r\n";

	LCD_clear();
 8002112:	f001 f8f5 	bl	8003300 <LCD_clear>
	LCD_puts(app_nameLCD);
 8002116:	4b23      	ldr	r3, [pc, #140]	@ (80021a4 <DisplayVersion+0x9c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f001 f9e8 	bl	80034f0 <LCD_puts>

	UART_puts(app_name);
 8002120:	4b21      	ldr	r3, [pc, #132]	@ (80021a8 <DisplayVersion+0xa0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f001 fb1b 	bl	8003760 <UART_puts>
	UART_puts(functionality);
 800212a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800212c:	f001 fb18 	bl	8003760 <UART_puts>

 	osKernelGetInfo(&osv, infobuf, sizeof(infobuf));
 8002130:	f107 0108 	add.w	r1, r7, #8
 8002134:	463b      	mov	r3, r7
 8002136:	2264      	movs	r2, #100	@ 0x64
 8002138:	4618      	mov	r0, r3
 800213a:	f00c fba7 	bl	800e88c <osKernelGetInfo>
	UART_puts("\t-----");
 800213e:	481b      	ldr	r0, [pc, #108]	@ (80021ac <DisplayVersion+0xa4>)
 8002140:	f001 fb0e 	bl	8003760 <UART_puts>
	UART_puts("\r\n\t");                       UART_puts(infobuf);
 8002144:	481a      	ldr	r0, [pc, #104]	@ (80021b0 <DisplayVersion+0xa8>)
 8002146:	f001 fb0b 	bl	8003760 <UART_puts>
 800214a:	f107 0308 	add.w	r3, r7, #8
 800214e:	4618      	mov	r0, r3
 8002150:	f001 fb06 	bl	8003760 <UART_puts>
	UART_puts("\r\n\tVersion: ");              UART_putint(osv.kernel);
 8002154:	4817      	ldr	r0, [pc, #92]	@ (80021b4 <DisplayVersion+0xac>)
 8002156:	f001 fb03 	bl	8003760 <UART_puts>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4618      	mov	r0, r3
 800215e:	f001 fb1b 	bl	8003798 <UART_putint>
	UART_puts("\r\n\tOS Timer freq (MHz): " ); UART_putint(osKernelGetSysTimerFreq()/1000000);
 8002162:	4815      	ldr	r0, [pc, #84]	@ (80021b8 <DisplayVersion+0xb0>)
 8002164:	f001 fafc 	bl	8003760 <UART_puts>
 8002168:	f00c fbe8 	bl	800e93c <osKernelGetSysTimerFreq>
 800216c:	4603      	mov	r3, r0
 800216e:	4a13      	ldr	r2, [pc, #76]	@ (80021bc <DisplayVersion+0xb4>)
 8002170:	fba2 2303 	umull	r2, r3, r2, r3
 8002174:	0c9b      	lsrs	r3, r3, #18
 8002176:	4618      	mov	r0, r3
 8002178:	f001 fb0e 	bl	8003798 <UART_putint>
	UART_puts("\r\n\tOS Tick freq (Hz): " );   UART_putint(osKernelGetTickFreq());
 800217c:	4810      	ldr	r0, [pc, #64]	@ (80021c0 <DisplayVersion+0xb8>)
 800217e:	f001 faef 	bl	8003760 <UART_puts>
 8002182:	f00c fbd1 	bl	800e928 <osKernelGetTickFreq>
 8002186:	4603      	mov	r3, r0
 8002188:	4618      	mov	r0, r3
 800218a:	f001 fb05 	bl	8003798 <UART_putint>
	UART_puts("\r\n\t-----\r\n");
 800218e:	480d      	ldr	r0, [pc, #52]	@ (80021c4 <DisplayVersion+0xbc>)
 8002190:	f001 fae6 	bl	8003760 <UART_puts>

    DisplayMenu();
 8002194:	f000 f818 	bl	80021c8 <DisplayMenu>
}
 8002198:	bf00      	nop
 800219a:	3770      	adds	r7, #112	@ 0x70
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	08019380 	.word	0x08019380
 80021a4:	20000004 	.word	0x20000004
 80021a8:	20000000 	.word	0x20000000
 80021ac:	080194f0 	.word	0x080194f0
 80021b0:	080194f8 	.word	0x080194f8
 80021b4:	080194fc 	.word	0x080194fc
 80021b8:	0801950c 	.word	0x0801950c
 80021bc:	431bde83 	.word	0x431bde83
 80021c0:	08019528 	.word	0x08019528
 80021c4:	08019540 	.word	0x08019540

080021c8 <DisplayMenu>:
* User Interface (menu) naar UART.
* @return void
* @author MSC
*/
void DisplayMenu(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
	char *menu =
 80021ce:	4b04      	ldr	r3, [pc, #16]	@ (80021e0 <DisplayMenu+0x18>)
 80021d0:	607b      	str	r3, [r7, #4]
 p : change TASK PRIORITY, eg. 'p,7,20' sets priority of task 7 to 20\r\n\
 t : display TASK DATA (number, priority, stack usage, status)\r\n\
 s : start/stop TASK, eg. s,7 starts or stops task 7\r\n\
=====================================================================\r\n";

    UART_puts(menu);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f001 fac4 	bl	8003760 <UART_puts>
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	0801954c 	.word	0x0801954c

080021e4 <error_HaltOS>:
* dus op UART en LCD.
* @param msg Foutmelding
* @return void
*/
void error_HaltOS(char *msg)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
	LCD_puts(msg);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f001 f97f 	bl	80034f0 <LCD_puts>
	UART_puts(msg); UART_puts(". Application halted\r\n");
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f001 fab4 	bl	8003760 <UART_puts>
 80021f8:	4805      	ldr	r0, [pc, #20]	@ (8002210 <error_HaltOS+0x2c>)
 80021fa:	f001 fab1 	bl	8003760 <UART_puts>

	BUZZER_put(1000);
 80021fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002202:	f000 ff3b 	bl	800307c <BUZZER_put>
	vTaskSuspendAll(); // stop alle tasks
 8002206:	f00e fc25 	bl	8010a54 <vTaskSuspendAll>

	while (TRUE)
 800220a:	bf00      	nop
 800220c:	e7fd      	b.n	800220a <error_HaltOS+0x26>
 800220e:	bf00      	nop
 8002210:	0801978c 	.word	0x0801978c

08002214 <CreateHandles>:
/**
* @brief Creates alle handles voor deze applicatie
* @return void
*/
void CreateHandles(void)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b083      	sub	sp, #12
 8002218:	af02      	add	r7, sp, #8
	if (!(hLED_Sem = xSemaphoreCreateMutex()))
 800221a:	2001      	movs	r0, #1
 800221c:	f00d f97b 	bl	800f516 <xQueueCreateMutex>
 8002220:	4603      	mov	r3, r0
 8002222:	4a46      	ldr	r2, [pc, #280]	@ (800233c <CreateHandles+0x128>)
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b45      	ldr	r3, [pc, #276]	@ (800233c <CreateHandles+0x128>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d102      	bne.n	8002234 <CreateHandles+0x20>
		error_HaltOS("Error hLED_Sem");
 800222e:	4844      	ldr	r0, [pc, #272]	@ (8002340 <CreateHandles+0x12c>)
 8002230:	f7ff ffd8 	bl	80021e4 <error_HaltOS>

	if (!(hGNRMC_Struct_Sem = xSemaphoreCreateMutex()))
 8002234:	2001      	movs	r0, #1
 8002236:	f00d f96e 	bl	800f516 <xQueueCreateMutex>
 800223a:	4603      	mov	r3, r0
 800223c:	4a41      	ldr	r2, [pc, #260]	@ (8002344 <CreateHandles+0x130>)
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	4b40      	ldr	r3, [pc, #256]	@ (8002344 <CreateHandles+0x130>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d102      	bne.n	800224e <CreateHandles+0x3a>
		error_HaltOS("Error hGNRMC_Struct_Sem");
 8002248:	483f      	ldr	r0, [pc, #252]	@ (8002348 <CreateHandles+0x134>)
 800224a:	f7ff ffcb 	bl	80021e4 <error_HaltOS>

	if (!(hLog_Struct_Sem = xSemaphoreCreateMutex()))
 800224e:	2001      	movs	r0, #1
 8002250:	f00d f961 	bl	800f516 <xQueueCreateMutex>
 8002254:	4603      	mov	r3, r0
 8002256:	4a3d      	ldr	r2, [pc, #244]	@ (800234c <CreateHandles+0x138>)
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b3c      	ldr	r3, [pc, #240]	@ (800234c <CreateHandles+0x138>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d102      	bne.n	8002268 <CreateHandles+0x54>
		error_HaltOS("Error hLog_Struct_Sem");
 8002262:	483b      	ldr	r0, [pc, #236]	@ (8002350 <CreateHandles+0x13c>)
 8002264:	f7ff ffbe 	bl	80021e4 <error_HaltOS>

	if (!(hUART_Queue = xQueueCreate(QSIZE_UART, sizeof(unsigned int))))
 8002268:	2200      	movs	r2, #0
 800226a:	2104      	movs	r1, #4
 800226c:	200a      	movs	r0, #10
 800226e:	f00d f8da 	bl	800f426 <xQueueGenericCreate>
 8002272:	4603      	mov	r3, r0
 8002274:	4a37      	ldr	r2, [pc, #220]	@ (8002354 <CreateHandles+0x140>)
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	4b36      	ldr	r3, [pc, #216]	@ (8002354 <CreateHandles+0x140>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d102      	bne.n	8002286 <CreateHandles+0x72>
		error_HaltOS("Error hUART_Q");
 8002280:	4835      	ldr	r0, [pc, #212]	@ (8002358 <CreateHandles+0x144>)
 8002282:	f7ff ffaf 	bl	80021e4 <error_HaltOS>

	if (!(hGPS_Queue = xQueueCreate(GPS_MAXLEN, sizeof(unsigned char))))
 8002286:	2200      	movs	r2, #0
 8002288:	2101      	movs	r1, #1
 800228a:	2053      	movs	r0, #83	@ 0x53
 800228c:	f00d f8cb 	bl	800f426 <xQueueGenericCreate>
 8002290:	4603      	mov	r3, r0
 8002292:	4a32      	ldr	r2, [pc, #200]	@ (800235c <CreateHandles+0x148>)
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	4b31      	ldr	r3, [pc, #196]	@ (800235c <CreateHandles+0x148>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d102      	bne.n	80022a4 <CreateHandles+0x90>
		error_HaltOS("Error hGPS_Q");
 800229e:	4830      	ldr	r0, [pc, #192]	@ (8002360 <CreateHandles+0x14c>)
 80022a0:	f7ff ffa0 	bl	80021e4 <error_HaltOS>

	if (!(hKEY_Event = xEventGroupCreate()))
 80022a4:	f00c fd68 	bl	800ed78 <xEventGroupCreate>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4a2e      	ldr	r2, [pc, #184]	@ (8002364 <CreateHandles+0x150>)
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002364 <CreateHandles+0x150>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d102      	bne.n	80022bc <CreateHandles+0xa8>
		error_HaltOS("Error hLCD_Event");
 80022b6:	482c      	ldr	r0, [pc, #176]	@ (8002368 <CreateHandles+0x154>)
 80022b8:	f7ff ff94 	bl	80021e4 <error_HaltOS>

	if (!(hTimer1 = xTimerCreate("Timer_1", pdMS_TO_TICKS(TIMER1_DELAY), pdTRUE, 0, (TimerCallbackFunction_t)Timer1_Handler)))
 80022bc:	4b2b      	ldr	r3, [pc, #172]	@ (800236c <CreateHandles+0x158>)
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2300      	movs	r3, #0
 80022c2:	2201      	movs	r2, #1
 80022c4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80022c8:	4829      	ldr	r0, [pc, #164]	@ (8002370 <CreateHandles+0x15c>)
 80022ca:	f00f fd9b 	bl	8011e04 <xTimerCreate>
 80022ce:	4603      	mov	r3, r0
 80022d0:	4a28      	ldr	r2, [pc, #160]	@ (8002374 <CreateHandles+0x160>)
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b27      	ldr	r3, [pc, #156]	@ (8002374 <CreateHandles+0x160>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <CreateHandles+0xce>
		error_HaltOS("Error hTimer1");
 80022dc:	4826      	ldr	r0, [pc, #152]	@ (8002378 <CreateHandles+0x164>)
 80022de:	f7ff ff81 	bl	80021e4 <error_HaltOS>

	if (!(hTimerLog = xTimerCreate("TimerLog", pdMS_TO_TICKS(TIMERLOG_DELAY), pdTRUE, 0, (TimerCallbackFunction_t)TimerLog_Handler)))
 80022e2:	4b26      	ldr	r3, [pc, #152]	@ (800237c <CreateHandles+0x168>)
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	2300      	movs	r3, #0
 80022e8:	2201      	movs	r2, #1
 80022ea:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80022ee:	4824      	ldr	r0, [pc, #144]	@ (8002380 <CreateHandles+0x16c>)
 80022f0:	f00f fd88 	bl	8011e04 <xTimerCreate>
 80022f4:	4603      	mov	r3, r0
 80022f6:	4a23      	ldr	r2, [pc, #140]	@ (8002384 <CreateHandles+0x170>)
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	4b22      	ldr	r3, [pc, #136]	@ (8002384 <CreateHandles+0x170>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d102      	bne.n	8002308 <CreateHandles+0xf4>
			error_HaltOS("Error hTimerLog");
 8002302:	4821      	ldr	r0, [pc, #132]	@ (8002388 <CreateHandles+0x174>)
 8002304:	f7ff ff6e 	bl	80021e4 <error_HaltOS>

	UART_puts("\n\rAll handles created successfully.");
 8002308:	4820      	ldr	r0, [pc, #128]	@ (800238c <CreateHandles+0x178>)
 800230a:	f001 fa29 	bl	8003760 <UART_puts>

	UART_puts("\n\rTimer set to: ");
 800230e:	4820      	ldr	r0, [pc, #128]	@ (8002390 <CreateHandles+0x17c>)
 8002310:	f001 fa26 	bl	8003760 <UART_puts>
	UART_putint((int)TIMER1_DELAY); // (int)-cast is nodig!
 8002314:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002318:	f001 fa3e 	bl	8003798 <UART_putint>
	xTimerStart(hTimer1, 0); // start de timer...
 800231c:	4b15      	ldr	r3, [pc, #84]	@ (8002374 <CreateHandles+0x160>)
 800231e:	681c      	ldr	r4, [r3, #0]
 8002320:	f00e fc44 	bl	8010bac <xTaskGetTickCount>
 8002324:	4602      	mov	r2, r0
 8002326:	2300      	movs	r3, #0
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	2300      	movs	r3, #0
 800232c:	2101      	movs	r1, #1
 800232e:	4620      	mov	r0, r4
 8002330:	f00f fdc6 	bl	8011ec0 <xTimerGenericCommand>
}
 8002334:	bf00      	nop
 8002336:	3704      	adds	r7, #4
 8002338:	46bd      	mov	sp, r7
 800233a:	bd90      	pop	{r4, r7, pc}
 800233c:	20000434 	.word	0x20000434
 8002340:	080197a4 	.word	0x080197a4
 8002344:	20000438 	.word	0x20000438
 8002348:	080197b4 	.word	0x080197b4
 800234c:	2000043c 	.word	0x2000043c
 8002350:	080197cc 	.word	0x080197cc
 8002354:	2000042c 	.word	0x2000042c
 8002358:	080197e4 	.word	0x080197e4
 800235c:	20000430 	.word	0x20000430
 8002360:	080197f4 	.word	0x080197f4
 8002364:	20000440 	.word	0x20000440
 8002368:	08019804 	.word	0x08019804
 800236c:	08002395 	.word	0x08002395
 8002370:	08019818 	.word	0x08019818
 8002374:	20000444 	.word	0x20000444
 8002378:	08019820 	.word	0x08019820
 800237c:	080023ad 	.word	0x080023ad
 8002380:	08019830 	.word	0x08019830
 8002384:	20000448 	.word	0x20000448
 8002388:	0801983c 	.word	0x0801983c
 800238c:	0801984c 	.word	0x0801984c
 8002390:	08019870 	.word	0x08019870

08002394 <Timer1_Handler>:
* @brief Vangt de FreeRTOS software-interrupt op en toggelt een ledje
* @param hTimer1 De handle van de timer
* @return void
*/
void Timer1_Handler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, LEDBLUE);   // turns led on/off
 8002398:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800239c:	4802      	ldr	r0, [pc, #8]	@ (80023a8 <Timer1_Handler+0x14>)
 800239e:	f002 fe8c 	bl	80050ba <HAL_GPIO_TogglePin>
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40020c00 	.word	0x40020c00

080023ac <TimerLog_Handler>:
* @brief Vangt de FreeRTOS software-interrupt op van TimerLog en slaat op dat moment een punt op als log in een array
* @param hTimerLog De handle van de timer
* @return void
*/
void TimerLog_Handler(void)
{
 80023ac:	b5b0      	push	{r4, r5, r7, lr}
 80023ae:	af00      	add	r7, sp, #0
	xSemaphoreTake(hLog_Struct_Sem, portMAX_DELAY);					// pak mutex zodat niet halverwegen het schrijven naar het array, nieuwe data in de struct wordt gestopt
 80023b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002428 <TimerLog_Handler+0x7c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f04f 31ff 	mov.w	r1, #4294967295
 80023b8:	4618      	mov	r0, r3
 80023ba:	f00d fb47 	bl	800fa4c <xQueueSemaphoreTake>

	    if(logIndex < MAX_LOGS)										// Check of er nog ruimte is in de array
 80023be:	4b1b      	ldr	r3, [pc, #108]	@ (800242c <TimerLog_Handler+0x80>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2bc7      	cmp	r3, #199	@ 0xc7
 80023c4:	dc27      	bgt.n	8002416 <TimerLog_Handler+0x6a>
	    {
	    	LogArray[logIndex] = DataLog;							// Kopieer huidige dataLog naar array
 80023c6:	4b19      	ldr	r3, [pc, #100]	@ (800242c <TimerLog_Handler+0x80>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4919      	ldr	r1, [pc, #100]	@ (8002430 <TimerLog_Handler+0x84>)
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	440b      	add	r3, r1
 80023d6:	4a17      	ldr	r2, [pc, #92]	@ (8002434 <TimerLog_Handler+0x88>)
 80023d8:	461c      	mov	r4, r3
 80023da:	4615      	mov	r5, r2
 80023dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023e8:	e884 0003 	stmia.w	r4, {r0, r1}
	        LogArray[logIndex].TijdSindsStart = (logIndex*3+3);		// +3 want positie 0 is al na 3 seconde. dus positie 1 is na 6 seconde enz...
 80023ec:	4b0f      	ldr	r3, [pc, #60]	@ (800242c <TimerLog_Handler+0x80>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	1c59      	adds	r1, r3, #1
 80023f2:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <TimerLog_Handler+0x80>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	460b      	mov	r3, r1
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4419      	add	r1, r3
 80023fc:	480c      	ldr	r0, [pc, #48]	@ (8002430 <TimerLog_Handler+0x84>)
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4403      	add	r3, r0
 8002408:	3320      	adds	r3, #32
 800240a:	6019      	str	r1, [r3, #0]
	        logIndex++;
 800240c:	4b07      	ldr	r3, [pc, #28]	@ (800242c <TimerLog_Handler+0x80>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	4a06      	ldr	r2, [pc, #24]	@ (800242c <TimerLog_Handler+0x80>)
 8002414:	6013      	str	r3, [r2, #0]
	    }

	    xSemaphoreGive(hLog_Struct_Sem);							// geef mutex zodat er weer nieuwe data in de struct kan worden geschreven voor een nieuw log 'punt'
 8002416:	4b04      	ldr	r3, [pc, #16]	@ (8002428 <TimerLog_Handler+0x7c>)
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	2300      	movs	r3, #0
 800241c:	2200      	movs	r2, #0
 800241e:	2100      	movs	r1, #0
 8002420:	f00d f892 	bl	800f548 <xQueueGenericSend>

}
 8002424:	bf00      	nop
 8002426:	bdb0      	pop	{r4, r5, r7, pc}
 8002428:	2000043c 	.word	0x2000043c
 800242c:	20002860 	.word	0x20002860
 8002430:	20000920 	.word	0x20000920
 8002434:	200008f8 	.word	0x200008f8

08002438 <CreateTasks>:
* Let op. Eerst wordt de scheduler gestopt, dan de taken gecreëerd, dan de scheduler gestopt.
* Waarom? Anders gaan taken gelijk beginnen en wachten op taken die nog niet bestaan, dat geeft een rommeltje.
* @return void
*/
void CreateTasks(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
	PTASKDATA ptd = tasks; // tasks == &tasks[0]: both are addresses of first struct
 800243e:	4b14      	ldr	r3, [pc, #80]	@ (8002490 <CreateTasks+0x58>)
 8002440:	607b      	str	r3, [r7, #4]
	vTaskSuspendAll(); // zet de scheduler stil en dwing FreeRTOS om eerst alle taken te starten
 8002442:	f00e fb07 	bl	8010a54 <vTaskSuspendAll>

	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 8002446:	e016      	b.n	8002476 <CreateTasks+0x3e>
	{
		UART_puts("\r\nCreated: ");
 8002448:	4812      	ldr	r0, [pc, #72]	@ (8002494 <CreateTasks+0x5c>)
 800244a:	f001 f989 	bl	8003760 <UART_puts>
		UART_puts((char *)ptd->attr.name);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	4618      	mov	r0, r3
 8002454:	f001 f984 	bl	8003760 <UART_puts>

		// nb. kijk naar de haakjes van argument 3: het gaat om het adres van (structure attr).
		ptd->hTask = osThreadNew(ptd->func, ptd->argument, &(ptd->attr));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6859      	ldr	r1, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3308      	adds	r3, #8
 8002464:	461a      	mov	r2, r3
 8002466:	f00c fa75 	bl	800e954 <osThreadNew>
 800246a:	4602      	mov	r2, r0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3330      	adds	r3, #48	@ 0x30
 8002474:	607b      	str	r3, [r7, #4]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1e4      	bne.n	8002448 <CreateTasks+0x10>
	}

	xTaskResumeAll();   // start nu de scheduler: play ball
 800247e:	f00e faf7 	bl	8010a70 <xTaskResumeAll>
	DisplayTaskData();  // display alle taskdata op UART
 8002482:	f000 f8af 	bl	80025e4 <DisplayTaskData>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000008 	.word	0x20000008
 8002494:	08019884 	.word	0x08019884

08002498 <GetTaskhandle>:
* de OS-functie xTaskGetHandle() gebruikt worden. Alleen is 'mijn' functie sneller.
* @param *taskname De tasknaam
* @return osThreadId_t De taskhandle
*/
osThreadId_t GetTaskhandle(char *taskname)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	PTASKDATA ptd = tasks;
 80024a0:	4b0d      	ldr	r3, [pc, #52]	@ (80024d8 <GetTaskhandle+0x40>)
 80024a2:	60fb      	str	r3, [r7, #12]

	for (; ptd->func != NULL; ptd++)
 80024a4:	e00e      	b.n	80024c4 <GetTaskhandle+0x2c>
		if (!strcmp(taskname, ptd->attr.name))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	4619      	mov	r1, r3
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7fd fe8f 	bl	80001d0 <strcmp>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d102      	bne.n	80024be <GetTaskhandle+0x26>
			return (ptd->hTask);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024bc:	e007      	b.n	80024ce <GetTaskhandle+0x36>
	for (; ptd->func != NULL; ptd++)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	3330      	adds	r3, #48	@ 0x30
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1ec      	bne.n	80024a6 <GetTaskhandle+0xe>

	return (NULL); // if task was not found...
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000008 	.word	0x20000008

080024dc <SetTaskPriority>:
* @param task_id Task identifier
* @param new_priority Nieuwe prioriteit
* @return void
*/
void SetTaskPriority(int task_id, int new_priority)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
	PTASKDATA ptd = tasks;
 80024e6:	4b18      	ldr	r3, [pc, #96]	@ (8002548 <SetTaskPriority+0x6c>)
 80024e8:	60fb      	str	r3, [r7, #12]
	unsigned int 	task_nr;


	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 80024ea:	2301      	movs	r3, #1
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	e023      	b.n	8002538 <SetTaskPriority+0x5c>
		if (task_nr == task_id) // hebbes
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d119      	bne.n	800252c <SetTaskPriority+0x50>
		{
			ptd->attr.priority = new_priority;			// struct-member
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	621a      	str	r2, [r3, #32]
			vTaskPrioritySet(ptd->hTask, new_priority); // taskpriority
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	4611      	mov	r1, r2
 8002506:	4618      	mov	r0, r3
 8002508:	f00e f88e 	bl	8010628 <vTaskPrioritySet>
			// of
			// osThreadSetPriority(ptd->hTask, new_priority);

			UART_puts("\r\nSet task "); UART_puts(ptd->attr.name);
 800250c:	480f      	ldr	r0, [pc, #60]	@ (800254c <SetTaskPriority+0x70>)
 800250e:	f001 f927 	bl	8003760 <UART_puts>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	4618      	mov	r0, r3
 8002518:	f001 f922 	bl	8003760 <UART_puts>
			UART_puts("'s priority to: "); UART_putint(new_priority);
 800251c:	480c      	ldr	r0, [pc, #48]	@ (8002550 <SetTaskPriority+0x74>)
 800251e:	f001 f91f 	bl	8003760 <UART_puts>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f001 f937 	bl	8003798 <UART_putint>
			return;
 800252a:	e009      	b.n	8002540 <SetTaskPriority+0x64>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	3330      	adds	r3, #48	@ 0x30
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	3301      	adds	r3, #1
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1d7      	bne.n	80024f0 <SetTaskPriority+0x14>
		}
}
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000008 	.word	0x20000008
 800254c:	08019890 	.word	0x08019890
 8002550:	0801989c 	.word	0x0801989c

08002554 <StartStopTask>:
* je alle tasks die op die mutex wachten. En als je de task stopt die de UART leest,
* schiet je jezelf ook in de voet.
* @return void
*/
void StartStopTask(int task_id)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08e      	sub	sp, #56	@ 0x38
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	PTASKDATA ptd = tasks;
 800255c:	4b1d      	ldr	r3, [pc, #116]	@ (80025d4 <StartStopTask+0x80>)
 800255e:	637b      	str	r3, [r7, #52]	@ 0x34
	unsigned int 	task_nr;
	TaskStatus_t    xTaskDetails;

	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8002560:	2301      	movs	r3, #1
 8002562:	633b      	str	r3, [r7, #48]	@ 0x30
 8002564:	e02e      	b.n	80025c4 <StartStopTask+0x70>
		if (task_nr == task_id) // hebbes
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800256a:	429a      	cmp	r2, r3
 800256c:	d124      	bne.n	80025b8 <StartStopTask+0x64>
		{
			vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid);
 800256e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002570:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002572:	f107 010c 	add.w	r1, r7, #12
 8002576:	2305      	movs	r3, #5
 8002578:	2201      	movs	r2, #1
 800257a:	f00e ff9d 	bl	80114b8 <vTaskGetInfo>
			UART_puts("\r\n");
 800257e:	4816      	ldr	r0, [pc, #88]	@ (80025d8 <StartStopTask+0x84>)
 8002580:	f001 f8ee 	bl	8003760 <UART_puts>
			UART_puts(ptd->attr.name);
 8002584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4618      	mov	r0, r3
 800258a:	f001 f8e9 	bl	8003760 <UART_puts>

			// een task kan meerdere statussen hebben; het wordt simpeler
			// als je alleen de eSuspended checkt.
			if (xTaskDetails.eCurrentState == eSuspended)
 800258e:	7e3b      	ldrb	r3, [r7, #24]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d108      	bne.n	80025a6 <StartStopTask+0x52>
			{
				vTaskResume(ptd->hTask);
 8002594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002598:	4618      	mov	r0, r3
 800259a:	f00e f98b 	bl	80108b4 <vTaskResume>
				UART_puts(" resumed.");
 800259e:	480f      	ldr	r0, [pc, #60]	@ (80025dc <StartStopTask+0x88>)
 80025a0:	f001 f8de 	bl	8003760 <UART_puts>
			else // bv. eBlocked, eRunning, eInvalid etc.
			{
				vTaskSuspend(ptd->hTask);
				UART_puts(" suspended.");
			}
			return;
 80025a4:	e012      	b.n	80025cc <StartStopTask+0x78>
				vTaskSuspend(ptd->hTask);
 80025a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025aa:	4618      	mov	r0, r3
 80025ac:	f00e f8da 	bl	8010764 <vTaskSuspend>
				UART_puts(" suspended.");
 80025b0:	480b      	ldr	r0, [pc, #44]	@ (80025e0 <StartStopTask+0x8c>)
 80025b2:	f001 f8d5 	bl	8003760 <UART_puts>
 80025b6:	e009      	b.n	80025cc <StartStopTask+0x78>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 80025b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ba:	3330      	adds	r3, #48	@ 0x30
 80025bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80025be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c0:	3301      	adds	r3, #1
 80025c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80025c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1cc      	bne.n	8002566 <StartStopTask+0x12>
		}
}
 80025cc:	3738      	adds	r7, #56	@ 0x38
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000008 	.word	0x20000008
 80025d8:	080198b0 	.word	0x080198b0
 80025dc:	080198b4 	.word	0x080198b4
 80025e0:	080198c0 	.word	0x080198c0

080025e4 <DisplayTaskData>:
/**
* @brief Displays de stack-gegevens van alle taken op de UART
* @return void
*/
void DisplayTaskData(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08e      	sub	sp, #56	@ 0x38
 80025e8:	af00      	add	r7, sp, #0
	PTASKDATA    ptd = tasks;
 80025ea:	4b47      	ldr	r3, [pc, #284]	@ (8002708 <DisplayTaskData+0x124>)
 80025ec:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t  highwatermark;
	TaskStatus_t xTaskDetails;
	unsigned int free, totalalloc = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	633b      	str	r3, [r7, #48]	@ 0x30

	unsigned int task_nr; // tasknr for changing priority

	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 80025f2:	2301      	movs	r3, #1
 80025f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025f6:	e062      	b.n	80026be <DisplayTaskData+0xda>
	{
		highwatermark = uxTaskGetStackHighWaterMark(ptd->hTask); 	// amount of free bytes
 80025f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fc:	4618      	mov	r0, r3
 80025fe:	f00e ffdd 	bl	80115bc <uxTaskGetStackHighWaterMark>
 8002602:	62b8      	str	r0, [r7, #40]	@ 0x28
		free = (highwatermark * 100) / ptd->attr.stack_size; 		// in percentage
 8002604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002606:	2264      	movs	r2, #100	@ 0x64
 8002608:	fb03 f202 	mul.w	r2, r3, r2
 800260c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	fbb2 f3f3 	udiv	r3, r2, r3
 8002614:	627b      	str	r3, [r7, #36]	@ 0x24
		totalalloc += ptd->attr.stack_size;
 8002616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800261c:	4413      	add	r3, r2
 800261e:	633b      	str	r3, [r7, #48]	@ 0x30

		vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid); // get task status
 8002620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002622:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002624:	4639      	mov	r1, r7
 8002626:	2305      	movs	r3, #5
 8002628:	2201      	movs	r2, #1
 800262a:	f00e ff45 	bl	80114b8 <vTaskGetInfo>

		UART_puts("\r\n\t[");        UART_putint(task_nr); UART_puts("] ");
 800262e:	4837      	ldr	r0, [pc, #220]	@ (800270c <DisplayTaskData+0x128>)
 8002630:	f001 f896 	bl	8003760 <UART_puts>
 8002634:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002636:	f001 f8af 	bl	8003798 <UART_putint>
 800263a:	4835      	ldr	r0, [pc, #212]	@ (8002710 <DisplayTaskData+0x12c>)
 800263c:	f001 f890 	bl	8003760 <UART_puts>
		UART_puts(ptd->attr.name);
 8002640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	4618      	mov	r0, r3
 8002646:	f001 f88b 	bl	8003760 <UART_puts>
		UART_puts("\t priority: ");  UART_putint(ptd->attr.priority);
 800264a:	4832      	ldr	r0, [pc, #200]	@ (8002714 <DisplayTaskData+0x130>)
 800264c:	f001 f888 	bl	8003760 <UART_puts>
 8002650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	4618      	mov	r0, r3
 8002656:	f001 f89f 	bl	8003798 <UART_putint>
		UART_puts("\t stacksize: "); UART_putint(ptd->attr.stack_size * 4);
 800265a:	482f      	ldr	r0, [pc, #188]	@ (8002718 <DisplayTaskData+0x134>)
 800265c:	f001 f880 	bl	8003760 <UART_puts>
 8002660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4618      	mov	r0, r3
 8002668:	f001 f896 	bl	8003798 <UART_putint>
		UART_puts("\t free: ");  UART_putint((ptd->attr.stack_size- highwatermark) * 4);
 800266c:	482b      	ldr	r0, [pc, #172]	@ (800271c <DisplayTaskData+0x138>)
 800266e:	f001 f877 	bl	8003760 <UART_puts>
 8002672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002674:	69da      	ldr	r2, [r3, #28]
 8002676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4618      	mov	r0, r3
 800267e:	f001 f88b 	bl	8003798 <UART_putint>
		UART_puts("\t used: ");      UART_putint(100 - free); UART_puts("%");
 8002682:	4827      	ldr	r0, [pc, #156]	@ (8002720 <DisplayTaskData+0x13c>)
 8002684:	f001 f86c 	bl	8003760 <UART_puts>
 8002688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268a:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800268e:	4618      	mov	r0, r3
 8002690:	f001 f882 	bl	8003798 <UART_putint>
 8002694:	4823      	ldr	r0, [pc, #140]	@ (8002724 <DisplayTaskData+0x140>)
 8002696:	f001 f863 	bl	8003760 <UART_puts>
		UART_puts("\t status: ");    UART_puts(xTaskDetails.eCurrentState == eSuspended ? "suspended": "running");
 800269a:	4823      	ldr	r0, [pc, #140]	@ (8002728 <DisplayTaskData+0x144>)
 800269c:	f001 f860 	bl	8003760 <UART_puts>
 80026a0:	7b3b      	ldrb	r3, [r7, #12]
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d101      	bne.n	80026aa <DisplayTaskData+0xc6>
 80026a6:	4b21      	ldr	r3, [pc, #132]	@ (800272c <DisplayTaskData+0x148>)
 80026a8:	e000      	b.n	80026ac <DisplayTaskData+0xc8>
 80026aa:	4b21      	ldr	r3, [pc, #132]	@ (8002730 <DisplayTaskData+0x14c>)
 80026ac:	4618      	mov	r0, r3
 80026ae:	f001 f857 	bl	8003760 <UART_puts>
	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 80026b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026b4:	3330      	adds	r3, #48	@ 0x30
 80026b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80026b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ba:	3301      	adds	r3, #1
 80026bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d198      	bne.n	80025f8 <DisplayTaskData+0x14>
	}
	UART_puts("\r\n\tTotal heap: "); UART_putint(configTOTAL_HEAP_SIZE);
 80026c6:	481b      	ldr	r0, [pc, #108]	@ (8002734 <DisplayTaskData+0x150>)
 80026c8:	f001 f84a 	bl	8003760 <UART_puts>
 80026cc:	f44f 407a 	mov.w	r0, #64000	@ 0xfa00
 80026d0:	f001 f862 	bl	8003798 <UART_putint>
	UART_puts("    Allocated task stack: "); UART_putint(totalalloc * 4);
 80026d4:	4818      	ldr	r0, [pc, #96]	@ (8002738 <DisplayTaskData+0x154>)
 80026d6:	f001 f843 	bl	8003760 <UART_puts>
 80026da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4618      	mov	r0, r3
 80026e0:	f001 f85a 	bl	8003798 <UART_putint>
	UART_puts("    Free heap space: "); UART_putint(configTOTAL_HEAP_SIZE - (totalalloc * 4));
 80026e4:	4815      	ldr	r0, [pc, #84]	@ (800273c <DisplayTaskData+0x158>)
 80026e6:	f001 f83b 	bl	8003760 <UART_puts>
 80026ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ec:	f5c3 537a 	rsb	r3, r3, #16000	@ 0x3e80
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f001 f850 	bl	8003798 <UART_putint>
	UART_puts("\r\n");
 80026f8:	4811      	ldr	r0, [pc, #68]	@ (8002740 <DisplayTaskData+0x15c>)
 80026fa:	f001 f831 	bl	8003760 <UART_puts>
}
 80026fe:	bf00      	nop
 8002700:	3738      	adds	r7, #56	@ 0x38
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000008 	.word	0x20000008
 800270c:	080198cc 	.word	0x080198cc
 8002710:	080198d4 	.word	0x080198d4
 8002714:	080198d8 	.word	0x080198d8
 8002718:	080198e8 	.word	0x080198e8
 800271c:	080198f8 	.word	0x080198f8
 8002720:	08019904 	.word	0x08019904
 8002724:	08019910 	.word	0x08019910
 8002728:	08019914 	.word	0x08019914
 800272c:	08019920 	.word	0x08019920
 8002730:	0801992c 	.word	0x0801992c
 8002734:	08019934 	.word	0x08019934
 8002738:	08019944 	.word	0x08019944
 800273c:	08019960 	.word	0x08019960
 8002740:	080198b0 	.word	0x080198b0

08002744 <split_nmea_fields>:
* Door te kijken naar de komma in de string en deze te vervangen met een \0 knip je de grote string in kleine strings.
* @param char pointer op de boodschap, char pointer op de fields array, int max aantal fields
* @return void
*/
void split_nmea_fields(char *message, char *fields[], int max_fields)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
    int i = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	61fb      	str	r3, [r7, #28]
    char *start = message; 					// pointer naar begin msgbuffer
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	61bb      	str	r3, [r7, #24]
    while (i < max_fields)					// Blijf herhalen tot max_fields
 8002758:	e015      	b.n	8002786 <split_nmea_fields+0x42>
    {
        fields[i++] = start;				// Pointer naar begin van elke string opslaan
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	61fa      	str	r2, [r7, #28]
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	4413      	add	r3, r2
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	601a      	str	r2, [r3, #0]
        char *comma = strchr(start, ',');	// pointer naar ',' wijzen
 800276a:	212c      	movs	r1, #44	@ 0x2c
 800276c:	69b8      	ldr	r0, [r7, #24]
 800276e:	f012 fada 	bl	8014d26 <strchr>
 8002772:	6178      	str	r0, [r7, #20]
        if (!comma)							// als er geen ',' zijn break
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <split_nmea_fields+0x4c>
			break;
        *comma = '\0';						// ',' vervangen met '\0' zodat het tot strings gemaakt wordt
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
        start = comma + 1;					// nieuwe start aangeven string terminator + 1
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	3301      	adds	r3, #1
 8002784:	61bb      	str	r3, [r7, #24]
    while (i < max_fields)					// Blijf herhalen tot max_fields
 8002786:	69fa      	ldr	r2, [r7, #28]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	429a      	cmp	r2, r3
 800278c:	dbe5      	blt.n	800275a <split_nmea_fields+0x16>
    }
}
 800278e:	e000      	b.n	8002792 <split_nmea_fields+0x4e>
			break;
 8002790:	bf00      	nop
}
 8002792:	bf00      	nop
 8002794:	3720      	adds	r7, #32
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <fill_GNRMC>:
* GNRMC-struct, mbv strcpy(); en split_nmea_fields(); <BR>
* De struct bevat nu alleen chars vervolgens worden die omgezet met atof();.
* @return void
*/
void fill_GNRMC(char *message)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b096      	sub	sp, #88	@ 0x58
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	// example: $GNRMC,164435.000,A,5205.9505,N,00507.0873,E,0.49,21.70,140423,,,A
	//          id    , time     ,s,

	char *fields[20];						// array van pointers
	split_nmea_fields(message, fields, 20);
 80027a4:	f107 0308 	add.w	r3, r7, #8
 80027a8:	2214      	movs	r2, #20
 80027aa:	4619      	mov	r1, r3
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff ffc9 	bl	8002744 <split_nmea_fields>

	// een field komt overeen met een string dus string 1 bevindt zich op positie 0 en is in dit geval de header
	strcpy(gnrmc.head, fields[0]);
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	4619      	mov	r1, r3
 80027b6:	4829      	ldr	r0, [pc, #164]	@ (800285c <fill_GNRMC+0xc0>)
 80027b8:	f012 fc15 	bl	8014fe6 <strcpy>
	gnrmc.status = fields[2][0];
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	781a      	ldrb	r2, [r3, #0]
 80027c0:	4b26      	ldr	r3, [pc, #152]	@ (800285c <fill_GNRMC+0xc0>)
 80027c2:	749a      	strb	r2, [r3, #18]
	strcpy(gnrmc.latitude, fields[3]);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	4619      	mov	r1, r3
 80027c8:	4825      	ldr	r0, [pc, #148]	@ (8002860 <fill_GNRMC+0xc4>)
 80027ca:	f012 fc0c 	bl	8014fe6 <strcpy>
	strcpy(gnrmc.longitude, fields[5]);
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	4619      	mov	r1, r3
 80027d2:	4824      	ldr	r0, [pc, #144]	@ (8002864 <fill_GNRMC+0xc8>)
 80027d4:	f012 fc07 	bl	8014fe6 <strcpy>
	strcpy(gnrmc.speed, fields[7]);
 80027d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027da:	4619      	mov	r1, r3
 80027dc:	4822      	ldr	r0, [pc, #136]	@ (8002868 <fill_GNRMC+0xcc>)
 80027de:	f012 fc02 	bl	8014fe6 <strcpy>
	strcpy(gnrmc.course, fields[8]);
 80027e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e4:	4619      	mov	r1, r3
 80027e6:	4821      	ldr	r0, [pc, #132]	@ (800286c <fill_GNRMC+0xd0>)
 80027e8:	f012 fbfd 	bl	8014fe6 <strcpy>

	if (Uart_debug_out & GPS_DEBUG_OUT)
 80027ec:	4b20      	ldr	r3, [pc, #128]	@ (8002870 <fill_GNRMC+0xd4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d025      	beq.n	8002844 <fill_GNRMC+0xa8>
	{
		UART_puts("\r\n\t GPS type: \t");  UART_puts(gnrmc.head);
 80027f8:	481e      	ldr	r0, [pc, #120]	@ (8002874 <fill_GNRMC+0xd8>)
 80027fa:	f000 ffb1 	bl	8003760 <UART_puts>
 80027fe:	4817      	ldr	r0, [pc, #92]	@ (800285c <fill_GNRMC+0xc0>)
 8002800:	f000 ffae 	bl	8003760 <UART_puts>
		UART_puts("\r\n\t status: \t\t");  UART_putchar(gnrmc.status);
 8002804:	481c      	ldr	r0, [pc, #112]	@ (8002878 <fill_GNRMC+0xdc>)
 8002806:	f000 ffab 	bl	8003760 <UART_puts>
 800280a:	4b14      	ldr	r3, [pc, #80]	@ (800285c <fill_GNRMC+0xc0>)
 800280c:	7c9b      	ldrb	r3, [r3, #18]
 800280e:	4618      	mov	r0, r3
 8002810:	f000 ff94 	bl	800373c <UART_putchar>
		UART_puts("\r\n\t latitude:\t\t"); UART_puts(gnrmc.latitude);
 8002814:	4819      	ldr	r0, [pc, #100]	@ (800287c <fill_GNRMC+0xe0>)
 8002816:	f000 ffa3 	bl	8003760 <UART_puts>
 800281a:	4811      	ldr	r0, [pc, #68]	@ (8002860 <fill_GNRMC+0xc4>)
 800281c:	f000 ffa0 	bl	8003760 <UART_puts>
		UART_puts("\r\n\t longitude:\t");  UART_puts(gnrmc.longitude);
 8002820:	4817      	ldr	r0, [pc, #92]	@ (8002880 <fill_GNRMC+0xe4>)
 8002822:	f000 ff9d 	bl	8003760 <UART_puts>
 8002826:	480f      	ldr	r0, [pc, #60]	@ (8002864 <fill_GNRMC+0xc8>)
 8002828:	f000 ff9a 	bl	8003760 <UART_puts>
		UART_puts("\r\n\t speed:    \t");  UART_puts(gnrmc.speed);
 800282c:	4815      	ldr	r0, [pc, #84]	@ (8002884 <fill_GNRMC+0xe8>)
 800282e:	f000 ff97 	bl	8003760 <UART_puts>
 8002832:	480d      	ldr	r0, [pc, #52]	@ (8002868 <fill_GNRMC+0xcc>)
 8002834:	f000 ff94 	bl	8003760 <UART_puts>
		UART_puts("\r\n\t course:   \t");  UART_puts(gnrmc.course);
 8002838:	4813      	ldr	r0, [pc, #76]	@ (8002888 <fill_GNRMC+0xec>)
 800283a:	f000 ff91 	bl	8003760 <UART_puts>
 800283e:	480b      	ldr	r0, [pc, #44]	@ (800286c <fill_GNRMC+0xd0>)
 8002840:	f000 ff8e 	bl	8003760 <UART_puts>
	}
	xTaskNotify(GetTaskhandle("GNRMC_Parser"), 0, eNoAction);
 8002844:	4811      	ldr	r0, [pc, #68]	@ (800288c <fill_GNRMC+0xf0>)
 8002846:	f7ff fe27 	bl	8002498 <GetTaskhandle>
 800284a:	2300      	movs	r3, #0
 800284c:	2200      	movs	r2, #0
 800284e:	2100      	movs	r1, #0
 8002850:	f00f f978 	bl	8011b44 <xTaskGenericNotify>
}
 8002854:	bf00      	nop
 8002856:	3758      	adds	r7, #88	@ 0x58
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	2000044c 	.word	0x2000044c
 8002860:	2000045f 	.word	0x2000045f
 8002864:	2000046d 	.word	0x2000046d
 8002868:	2000047b 	.word	0x2000047b
 800286c:	20000484 	.word	0x20000484
 8002870:	20000428 	.word	0x20000428
 8002874:	08019978 	.word	0x08019978
 8002878:	08019988 	.word	0x08019988
 800287c:	08019998 	.word	0x08019998
 8002880:	080199a8 	.word	0x080199a8
 8002884:	080199b8 	.word	0x080199b8
 8002888:	080199c8 	.word	0x080199c8
 800288c:	080199d8 	.word	0x080199d8

08002890 <GPS_getNMEA>:
* binnenkomen. * De handler zet elk inkomende character gelijk op een queue, die hier uitgelezen wordt.
* Vervolgens wordt hiervan een GPS-message opgebouwd en verwerkt.
* @return void
*/
void GPS_getNMEA (void *argument)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b09c      	sub	sp, #112	@ 0x70
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
    char  Q_char;   			// char to receive from queue
	char  MSG_buff[GPS_MAXLEN]; // buffer for GPS-string
	int   pos = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	int   cs;                   // checksum-flag
	int   new_msg = FALSE;      // do we encounter a '$'-char?
 800289c:	2300      	movs	r3, #0
 800289e:	66bb      	str	r3, [r7, #104]	@ 0x68
	int   msg_type = 0;         // do we want this message to be interpreted?
 80028a0:	2300      	movs	r3, #0
 80028a2:	667b      	str	r3, [r7, #100]	@ 0x64

	UART_puts((char *)__func__); UART_puts("started\n\r");
 80028a4:	4855      	ldr	r0, [pc, #340]	@ (80029fc <GPS_getNMEA+0x16c>)
 80028a6:	f000 ff5b 	bl	8003760 <UART_puts>
 80028aa:	4855      	ldr	r0, [pc, #340]	@ (8002a00 <GPS_getNMEA+0x170>)
 80028ac:	f000 ff58 	bl	8003760 <UART_puts>

	while (TRUE)
	{
		xQueueReceive(hGPS_Queue, &Q_char, portMAX_DELAY); // get one char from the q
 80028b0:	4b54      	ldr	r3, [pc, #336]	@ (8002a04 <GPS_getNMEA+0x174>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f107 015f 	add.w	r1, r7, #95	@ 0x5f
 80028b8:	f04f 32ff 	mov.w	r2, #4294967295
 80028bc:	4618      	mov	r0, r3
 80028be:	f00c ffe3 	bl	800f888 <xQueueReceive>

		//UART_putchar(Q_buff);  // echo, for testing

		if (Q_char == '$') // gotcha, new datastring started
 80028c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80028c6:	2b24      	cmp	r3, #36	@ 0x24
 80028c8:	d10a      	bne.n	80028e0 <GPS_getNMEA+0x50>
		{
			memset(MSG_buff, 0, sizeof(MSG_buff)); // clear buff
 80028ca:	f107 030c 	add.w	r3, r7, #12
 80028ce:	2253      	movs	r2, #83	@ 0x53
 80028d0:	2100      	movs	r1, #0
 80028d2:	4618      	mov	r0, r3
 80028d4:	f012 fa1f 	bl	8014d16 <memset>
			pos = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	66fb      	str	r3, [r7, #108]	@ 0x6c
			new_msg = TRUE; // from now on, chars are valid to receive
 80028dc:	2301      	movs	r3, #1
 80028de:	66bb      	str	r3, [r7, #104]	@ 0x68
		}

		if (new_msg == FALSE) // char only valid if started by $
 80028e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 8088 	beq.w	80029f8 <GPS_getNMEA+0x168>
			continue;

		MSG_buff[pos] = Q_char; // copy char read from Q into the msg-buf
 80028e8:	f897 105f 	ldrb.w	r1, [r7, #95]	@ 0x5f
 80028ec:	f107 020c 	add.w	r2, r7, #12
 80028f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028f2:	4413      	add	r3, r2
 80028f4:	460a      	mov	r2, r1
 80028f6:	701a      	strb	r2, [r3, #0]

		// if pos==5, the message type (f.i. "$GPGSA) is complete, so we now we can determine
		// if we want the rest of the message... else we skip the rest characters
		if (pos == 5)
 80028f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028fa:	2b05      	cmp	r3, #5
 80028fc:	d130      	bne.n	8002960 <GPS_getNMEA+0xd0>
		{
			msg_type = 0; // reset
 80028fe:	2300      	movs	r3, #0
 8002900:	667b      	str	r3, [r7, #100]	@ 0x64

			// next, we decide which message types we want to interpret
			// and we set the message-type for later use...
			if      (!strncmp(&MSG_buff[1], "GNRMC", 5)) msg_type = eGNRMC;
 8002902:	f107 030c 	add.w	r3, r7, #12
 8002906:	3301      	adds	r3, #1
 8002908:	2205      	movs	r2, #5
 800290a:	493f      	ldr	r1, [pc, #252]	@ (8002a08 <GPS_getNMEA+0x178>)
 800290c:	4618      	mov	r0, r3
 800290e:	f012 fa17 	bl	8014d40 <strncmp>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d102      	bne.n	800291e <GPS_getNMEA+0x8e>
 8002918:	2301      	movs	r3, #1
 800291a:	667b      	str	r3, [r7, #100]	@ 0x64
 800291c:	e01a      	b.n	8002954 <GPS_getNMEA+0xc4>
			else if (!strncmp(&MSG_buff[1], "GPGSA", 5)) msg_type = eGPGSA;
 800291e:	f107 030c 	add.w	r3, r7, #12
 8002922:	3301      	adds	r3, #1
 8002924:	2205      	movs	r2, #5
 8002926:	4939      	ldr	r1, [pc, #228]	@ (8002a0c <GPS_getNMEA+0x17c>)
 8002928:	4618      	mov	r0, r3
 800292a:	f012 fa09 	bl	8014d40 <strncmp>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d102      	bne.n	800293a <GPS_getNMEA+0xaa>
 8002934:	2302      	movs	r3, #2
 8002936:	667b      	str	r3, [r7, #100]	@ 0x64
 8002938:	e00c      	b.n	8002954 <GPS_getNMEA+0xc4>
			else if (!strncmp(&MSG_buff[1], "GNGGA", 5)) msg_type = eGNGGA;
 800293a:	f107 030c 	add.w	r3, r7, #12
 800293e:	3301      	adds	r3, #1
 8002940:	2205      	movs	r2, #5
 8002942:	4933      	ldr	r1, [pc, #204]	@ (8002a10 <GPS_getNMEA+0x180>)
 8002944:	4618      	mov	r0, r3
 8002946:	f012 f9fb 	bl	8014d40 <strncmp>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <GPS_getNMEA+0xc4>
 8002950:	2303      	movs	r3, #3
 8002952:	667b      	str	r3, [r7, #100]	@ 0x64

			if (!msg_type) // not an interesting message type
 8002954:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002956:	2b00      	cmp	r3, #0
 8002958:	d102      	bne.n	8002960 <GPS_getNMEA+0xd0>
			{
				new_msg = FALSE;
 800295a:	2300      	movs	r3, #0
 800295c:	66bb      	str	r3, [r7, #104]	@ 0x68
				continue;
 800295e:	e04c      	b.n	80029fa <GPS_getNMEA+0x16a>
			}
		}

		// if we are here, we are reading the rest of the message into the msg_buff
		////////////////////////////////////////////////////////////////////////////
		if (pos >= GPS_MAXLEN - 1) // avoid overflow (should not happen, but still...)
 8002960:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002962:	2b51      	cmp	r3, #81	@ 0x51
 8002964:	dd02      	ble.n	800296c <GPS_getNMEA+0xdc>
		{
			new_msg = FALSE; // ignore it
 8002966:	2300      	movs	r3, #0
 8002968:	66bb      	str	r3, [r7, #104]	@ 0x68
			continue;
 800296a:	e046      	b.n	80029fa <GPS_getNMEA+0x16a>
		}

		if (MSG_buff[pos] == '\r') // end of message encountered - all messages end with <CR-13><LF-10>
 800296c:	f107 020c 	add.w	r2, r7, #12
 8002970:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002972:	4413      	add	r3, r2
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b0d      	cmp	r3, #13
 8002978:	d13a      	bne.n	80029f0 <GPS_getNMEA+0x160>
		{
			MSG_buff[pos] = '\0';          // close string
 800297a:	f107 020c 	add.w	r2, r7, #12
 800297e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002980:	4413      	add	r3, r2
 8002982:	2200      	movs	r2, #0
 8002984:	701a      	strb	r2, [r3, #0]
			cs = checksum_valid(MSG_buff); // note, checksumchars (eg "*43") are removed from string
 8002986:	f107 030c 	add.w	r3, r7, #12
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f88e 	bl	8002aac <checksum_valid>
 8002990:	6638      	str	r0, [r7, #96]	@ 0x60

			if (Uart_debug_out & GPS_DEBUG_OUT) // output to uart if wanted
 8002992:	4b20      	ldr	r3, [pc, #128]	@ (8002a14 <GPS_getNMEA+0x184>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	d010      	beq.n	80029c0 <GPS_getNMEA+0x130>
			{
				UART_puts("\r\nGPS (UART4): "); UART_puts(MSG_buff);
 800299e:	481e      	ldr	r0, [pc, #120]	@ (8002a18 <GPS_getNMEA+0x188>)
 80029a0:	f000 fede 	bl	8003760 <UART_puts>
 80029a4:	f107 030c 	add.w	r3, r7, #12
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 fed9 	bl	8003760 <UART_puts>
				UART_puts( cs ? " [cs:OK]\r\n" : " [cs:ERR]\r\n");
 80029ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <GPS_getNMEA+0x128>
 80029b4:	4b19      	ldr	r3, [pc, #100]	@ (8002a1c <GPS_getNMEA+0x18c>)
 80029b6:	e000      	b.n	80029ba <GPS_getNMEA+0x12a>
 80029b8:	4b19      	ldr	r3, [pc, #100]	@ (8002a20 <GPS_getNMEA+0x190>)
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 fed0 	bl	8003760 <UART_puts>
			}

			if (cs) // checksum okay, so interpret the message
 80029c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d011      	beq.n	80029ea <GPS_getNMEA+0x15a>
			{
				switch(msg_type) // extract data from msg into right struct
 80029c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d007      	beq.n	80029dc <GPS_getNMEA+0x14c>
 80029cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	dd0a      	ble.n	80029e8 <GPS_getNMEA+0x158>
 80029d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029d4:	3b02      	subs	r3, #2
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d806      	bhi.n	80029e8 <GPS_getNMEA+0x158>
				{
				case eGNRMC: fill_GNRMC(MSG_buff);
						     // use the data...
						     break;
				case eGPGSA:
				case eGNGGA: break;
 80029da:	e006      	b.n	80029ea <GPS_getNMEA+0x15a>
				case eGNRMC: fill_GNRMC(MSG_buff);
 80029dc:	f107 030c 	add.w	r3, r7, #12
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fedb 	bl	800279c <fill_GNRMC>
						     break;
 80029e6:	e000      	b.n	80029ea <GPS_getNMEA+0x15a>
				default:     break;
 80029e8:	bf00      	nop
				}
			}

			new_msg = FALSE; // new message possible
 80029ea:	2300      	movs	r3, #0
 80029ec:	66bb      	str	r3, [r7, #104]	@ 0x68
			continue;
 80029ee:	e004      	b.n	80029fa <GPS_getNMEA+0x16a>
		}
		pos++; // proceed reading next char from the queue
 80029f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029f2:	3301      	adds	r3, #1
 80029f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80029f6:	e75b      	b.n	80028b0 <GPS_getNMEA+0x20>
			continue;
 80029f8:	bf00      	nop
		xQueueReceive(hGPS_Queue, &Q_char, portMAX_DELAY); // get one char from the q
 80029fa:	e759      	b.n	80028b0 <GPS_getNMEA+0x20>
 80029fc:	08019b20 	.word	0x08019b20
 8002a00:	080199e8 	.word	0x080199e8
 8002a04:	20000430 	.word	0x20000430
 8002a08:	080199f4 	.word	0x080199f4
 8002a0c:	080199fc 	.word	0x080199fc
 8002a10:	08019a04 	.word	0x08019a04
 8002a14:	20000428 	.word	0x20000428
 8002a18:	08019a0c 	.word	0x08019a0c
 8002a1c:	08019a1c 	.word	0x08019a1c
 8002a20:	08019a28 	.word	0x08019a28

08002a24 <hex2int>:
}


// source: file:///C:/craigpeacock/NMEA-GPS
int hex2int(char *c)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
	int value;

	value = hexchar2int(c[0]);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 f813 	bl	8002a5c <hexchar2int>
 8002a36:	60f8      	str	r0, [r7, #12]
	value = value << 4;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	60fb      	str	r3, [r7, #12]
	value += hexchar2int(c[1]);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3301      	adds	r3, #1
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 f809 	bl	8002a5c <hexchar2int>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4413      	add	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]

	return value;
 8002a52:	68fb      	ldr	r3, [r7, #12]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <hexchar2int>:


int hexchar2int(char c)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9')
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	2b2f      	cmp	r3, #47	@ 0x2f
 8002a6a:	d905      	bls.n	8002a78 <hexchar2int+0x1c>
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	2b39      	cmp	r3, #57	@ 0x39
 8002a70:	d802      	bhi.n	8002a78 <hexchar2int+0x1c>
        return (c - '0');
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	3b30      	subs	r3, #48	@ 0x30
 8002a76:	e013      	b.n	8002aa0 <hexchar2int+0x44>
    if (c >= 'A' && c <= 'F')
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	2b40      	cmp	r3, #64	@ 0x40
 8002a7c:	d905      	bls.n	8002a8a <hexchar2int+0x2e>
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	2b46      	cmp	r3, #70	@ 0x46
 8002a82:	d802      	bhi.n	8002a8a <hexchar2int+0x2e>
        return (c - 'A' + 10);
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	3b37      	subs	r3, #55	@ 0x37
 8002a88:	e00a      	b.n	8002aa0 <hexchar2int+0x44>
    if (c >= 'a' && c <= 'f')
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	2b60      	cmp	r3, #96	@ 0x60
 8002a8e:	d905      	bls.n	8002a9c <hexchar2int+0x40>
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	2b66      	cmp	r3, #102	@ 0x66
 8002a94:	d802      	bhi.n	8002a9c <hexchar2int+0x40>
        return (c - 'a' + 10);
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	3b57      	subs	r3, #87	@ 0x57
 8002a9a:	e001      	b.n	8002aa0 <hexchar2int+0x44>
    return (-1);
 8002a9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <checksum_valid>:


// source: file:///C:/craigpeacock/NMEA-GPS
int checksum_valid(char *string)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
	char *checksum_str;
	int checksum, i;
	unsigned char calculated_checksum = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	74fb      	strb	r3, [r7, #19]

	// Checksum is postcede by *
	if ((checksum_str = strchr(string, '*')))
 8002ab8:	212a      	movs	r1, #42	@ 0x2a
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f012 f933 	bl	8014d26 <strchr>
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d022      	beq.n	8002b0e <checksum_valid+0x62>
	{
		*checksum_str = '\0'; // Remove checksum from string
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
		// Calculate checksum, starting after $ (i = 1)
		for (i = 1; i < strlen(string); i++)
 8002ace:	2301      	movs	r3, #1
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	e009      	b.n	8002ae8 <checksum_valid+0x3c>
			calculated_checksum = calculated_checksum ^ string[i];
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	4413      	add	r3, r2
 8002ada:	781a      	ldrb	r2, [r3, #0]
 8002adc:	7cfb      	ldrb	r3, [r7, #19]
 8002ade:	4053      	eors	r3, r2
 8002ae0:	74fb      	strb	r3, [r7, #19]
		for (i = 1; i < strlen(string); i++)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7fd fbd1 	bl	8000290 <strlen>
 8002aee:	4602      	mov	r2, r0
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d8ee      	bhi.n	8002ad4 <checksum_valid+0x28>

		checksum = hex2int((char *)checksum_str+1);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	3301      	adds	r3, #1
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff ff92 	bl	8002a24 <hex2int>
 8002b00:	60b8      	str	r0, [r7, #8]
		//printf("Checksum Str [%s], Checksum %02X, Calculated Checksum %02X\r\n",(char *)checksum_str+1, checksum, calculated_checksum);
		if (checksum == calculated_checksum)
 8002b02:	7cfb      	ldrb	r3, [r7, #19]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d101      	bne.n	8002b0e <checksum_valid+0x62>
			return (1);
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <checksum_valid+0x64>
	}

	return (0);
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <Average_Bepalen_Waypoints>:
* @brief functie om gemiddelde van 3 datapunten op de slaan voor nauwkeurigere locatie.
* @param int i
* @return void
*/
void Average_Bepalen_Waypoints(int i)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	waypoints[i].latitude = (average[0].latitude + average[1].latitude + average[2].latitude)/3; 	//gemiddelde wordt berekend en opgeslagen
 8002b20:	4b24      	ldr	r3, [pc, #144]	@ (8002bb4 <Average_Bepalen_Waypoints+0x9c>)
 8002b22:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002b26:	4b23      	ldr	r3, [pc, #140]	@ (8002bb4 <Average_Bepalen_Waypoints+0x9c>)
 8002b28:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002b2c:	f7fd fbbe 	bl	80002ac <__adddf3>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4610      	mov	r0, r2
 8002b36:	4619      	mov	r1, r3
 8002b38:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb4 <Average_Bepalen_Waypoints+0x9c>)
 8002b3a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8002b3e:	f7fd fbb5 	bl	80002ac <__adddf3>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4610      	mov	r0, r2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb8 <Average_Bepalen_Waypoints+0xa0>)
 8002b50:	f7fd fe8c 	bl	800086c <__aeabi_ddiv>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4818      	ldr	r0, [pc, #96]	@ (8002bbc <Average_Bepalen_Waypoints+0xa4>)
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	0149      	lsls	r1, r1, #5
 8002b5e:	4401      	add	r1, r0
 8002b60:	3108      	adds	r1, #8
 8002b62:	e9c1 2300 	strd	r2, r3, [r1]
	waypoints[i].longitude = (average[0].longitude + average[1].longitude + average[2].longitude)/3;
 8002b66:	4b13      	ldr	r3, [pc, #76]	@ (8002bb4 <Average_Bepalen_Waypoints+0x9c>)
 8002b68:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002b6c:	4b11      	ldr	r3, [pc, #68]	@ (8002bb4 <Average_Bepalen_Waypoints+0x9c>)
 8002b6e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002b72:	f7fd fb9b 	bl	80002ac <__adddf3>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb4 <Average_Bepalen_Waypoints+0x9c>)
 8002b80:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002b84:	f7fd fb92 	bl	80002ac <__adddf3>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	4b08      	ldr	r3, [pc, #32]	@ (8002bb8 <Average_Bepalen_Waypoints+0xa0>)
 8002b96:	f7fd fe69 	bl	800086c <__aeabi_ddiv>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4807      	ldr	r0, [pc, #28]	@ (8002bbc <Average_Bepalen_Waypoints+0xa4>)
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	0149      	lsls	r1, r1, #5
 8002ba4:	4401      	add	r1, r0
 8002ba6:	3110      	adds	r1, #16
 8002ba8:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002bac:	bf00      	nop
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	200004c8 	.word	0x200004c8
 8002bb8:	40080000 	.word	0x40080000
 8002bbc:	20000528 	.word	0x20000528

08002bc0 <ResetLogArray>:
* @brief functie om de LogArray[] te resetten.
* @param void
* @return void
*/
void ResetLogArray(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
    xSemaphoreTake(hLog_Struct_Sem, portMAX_DELAY);
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf8 <ResetLogArray+0x38>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f00c ff3d 	bl	800fa4c <xQueueSemaphoreTake>
    memset(LogArray, 0, sizeof(LogArray));
 8002bd2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4808      	ldr	r0, [pc, #32]	@ (8002bfc <ResetLogArray+0x3c>)
 8002bda:	f012 f89c 	bl	8014d16 <memset>
    logIndex = 0;
 8002bde:	4b08      	ldr	r3, [pc, #32]	@ (8002c00 <ResetLogArray+0x40>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
    xSemaphoreGive(hLog_Struct_Sem);
 8002be4:	4b04      	ldr	r3, [pc, #16]	@ (8002bf8 <ResetLogArray+0x38>)
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	2300      	movs	r3, #0
 8002bea:	2200      	movs	r2, #0
 8002bec:	2100      	movs	r1, #0
 8002bee:	f00c fcab 	bl	800f548 <xQueueGenericSend>
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	2000043c 	.word	0x2000043c
 8002bfc:	20000920 	.word	0x20000920
 8002c00:	20002860 	.word	0x20002860

08002c04 <GNRMC_Parser>:
* Vervolgens wordt deze data in een Data_Parser struct gestopt.
* Deze struct wordt door een teller in een nieuwe array gezet om hiervan het gemiddelde uit te rekenen.
* @return void
*/
void GNRMC_Parser(void* argument)
{
 8002c04:	b5b0      	push	{r4, r5, r7, lr}
 8002c06:	b092      	sub	sp, #72	@ 0x48
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	int i = 0; 												// teller voor schrijven naar average array voor nauwkeurigere waypoint opslaan
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	647b      	str	r3, [r7, #68]	@ 0x44
	char val2[10];
	TaskStatus_t    TaskDetails;

	while(TRUE)
	{
		xTaskNotifyWait(0,0, NULL, portMAX_DELAY);			// wacht op notify van fill_GNRMC in gps.c
 8002c10:	f04f 33ff 	mov.w	r3, #4294967295
 8002c14:	2200      	movs	r2, #0
 8002c16:	2100      	movs	r1, #0
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f00e ff33 	bl	8011a84 <xTaskNotifyWait>

		xSemaphoreTake(hGNRMC_Struct_Sem, portMAX_DELAY); 	// wacht op toegang tot de mutex;
 8002c1e:	4b72      	ldr	r3, [pc, #456]	@ (8002de8 <GNRMC_Parser+0x1e4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f04f 31ff 	mov.w	r1, #4294967295
 8002c26:	4618      	mov	r0, r3
 8002c28:	f00c ff10 	bl	800fa4c <xQueueSemaphoreTake>

		if(!(gnrmc.status == 'A'))							// status check
 8002c2c:	4b6f      	ldr	r3, [pc, #444]	@ (8002dec <GNRMC_Parser+0x1e8>)
 8002c2e:	7c9b      	ldrb	r3, [r3, #18]
 8002c30:	2b41      	cmp	r3, #65	@ 0x41
 8002c32:	d00a      	beq.n	8002c4a <GNRMC_Parser+0x46>
		{
			GNRMC_data.status = 'V';
 8002c34:	4b6e      	ldr	r3, [pc, #440]	@ (8002df0 <GNRMC_Parser+0x1ec>)
 8002c36:	2256      	movs	r2, #86	@ 0x56
 8002c38:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(hGNRMC_Struct_Sem);
 8002c3a:	4b6b      	ldr	r3, [pc, #428]	@ (8002de8 <GNRMC_Parser+0x1e4>)
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	2200      	movs	r2, #0
 8002c42:	2100      	movs	r1, #0
 8002c44:	f00c fc80 	bl	800f548 <xQueueGenericSend>
			continue;
 8002c48:	e0cc      	b.n	8002de4 <GNRMC_Parser+0x1e0>
		}

		memset(&GNRMC_data, 0, sizeof(Data_Parser)); 		// clear the struct
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4868      	ldr	r0, [pc, #416]	@ (8002df0 <GNRMC_Parser+0x1ec>)
 8002c50:	f012 f861 	bl	8014d16 <memset>
		memset(val1, 0, sizeof(val1));						// val1 en val2 clearen
 8002c54:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c58:	220a      	movs	r2, #10
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f012 f85a 	bl	8014d16 <memset>
		memset(val2, 0, sizeof(val2));
 8002c62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c66:	220a      	movs	r2, #10
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f012 f853 	bl	8014d16 <memset>

		memcpy(val1, gnrmc.latitude, 2);					// val1 en val2 vullen val1 krijgt eerste 2 karakters en val2 krijgt 3 t/m 8
 8002c70:	4b5e      	ldr	r3, [pc, #376]	@ (8002dec <GNRMC_Parser+0x1e8>)
 8002c72:	f8b3 3013 	ldrh.w	r3, [r3, #19]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	873b      	strh	r3, [r7, #56]	@ 0x38
		memcpy(val2, gnrmc.latitude+2, 8);
 8002c7a:	495e      	ldr	r1, [pc, #376]	@ (8002df4 <GNRMC_Parser+0x1f0>)
 8002c7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c80:	2208      	movs	r2, #8
 8002c82:	4618      	mov	r0, r3
 8002c84:	f012 f9b7 	bl	8014ff6 <memcpy>
		GNRMC_data.latitude = (atof(val1))+(atof(val2)/60);	// atof conversie bij val1 en val2, val2 nog delen door 60 om tot juiste conversie te komen
 8002c88:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f010 fb8f 	bl	80133b0 <atof>
 8002c92:	ec55 4b10 	vmov	r4, r5, d0
 8002c96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f010 fb88 	bl	80133b0 <atof>
 8002ca0:	ec51 0b10 	vmov	r0, r1, d0
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	4b53      	ldr	r3, [pc, #332]	@ (8002df8 <GNRMC_Parser+0x1f4>)
 8002caa:	f7fd fddf 	bl	800086c <__aeabi_ddiv>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	f7fd faf9 	bl	80002ac <__adddf3>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	494c      	ldr	r1, [pc, #304]	@ (8002df0 <GNRMC_Parser+0x1ec>)
 8002cc0:	e9c1 2302 	strd	r2, r3, [r1, #8]
		memset(val1, 0, sizeof(val1));						// val1 en val2 clearen
 8002cc4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002cc8:	220a      	movs	r2, #10
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f012 f822 	bl	8014d16 <memset>
		memset(val2, 0, sizeof(val2));
 8002cd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cd6:	220a      	movs	r2, #10
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f012 f81b 	bl	8014d16 <memset>
		memcpy(val1, gnrmc.longitude, 3);					// val1 en val2 vullen val1 krijgt eerste 3 karakters en val2 krijgt 4 t/m 8
 8002ce0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	4945      	ldr	r1, [pc, #276]	@ (8002dfc <GNRMC_Parser+0x1f8>)
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f012 f984 	bl	8014ff6 <memcpy>
		memcpy(val2, gnrmc.longitude+3, 8);
 8002cee:	4944      	ldr	r1, [pc, #272]	@ (8002e00 <GNRMC_Parser+0x1fc>)
 8002cf0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cf4:	2208      	movs	r2, #8
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f012 f97d 	bl	8014ff6 <memcpy>
		GNRMC_data.longitude = (atof(val1))+(atof(val2)/60);// atof conversie bij val1 en val2, val2 nog delen door 60 om tot juiste conversie te komen
 8002cfc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d00:	4618      	mov	r0, r3
 8002d02:	f010 fb55 	bl	80133b0 <atof>
 8002d06:	ec55 4b10 	vmov	r4, r5, d0
 8002d0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f010 fb4e 	bl	80133b0 <atof>
 8002d14:	ec51 0b10 	vmov	r0, r1, d0
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	4b36      	ldr	r3, [pc, #216]	@ (8002df8 <GNRMC_Parser+0x1f4>)
 8002d1e:	f7fd fda5 	bl	800086c <__aeabi_ddiv>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4620      	mov	r0, r4
 8002d28:	4629      	mov	r1, r5
 8002d2a:	f7fd fabf 	bl	80002ac <__adddf3>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	492f      	ldr	r1, [pc, #188]	@ (8002df0 <GNRMC_Parser+0x1ec>)
 8002d34:	e9c1 2304 	strd	r2, r3, [r1, #16]
		GNRMC_data.course = atof(gnrmc.course);
 8002d38:	4832      	ldr	r0, [pc, #200]	@ (8002e04 <GNRMC_Parser+0x200>)
 8002d3a:	f010 fb39 	bl	80133b0 <atof>
 8002d3e:	eeb0 7a40 	vmov.f32	s14, s0
 8002d42:	eef0 7a60 	vmov.f32	s15, s1
 8002d46:	4b2a      	ldr	r3, [pc, #168]	@ (8002df0 <GNRMC_Parser+0x1ec>)
 8002d48:	ed83 7b06 	vstr	d7, [r3, #24]
		GNRMC_data.status = 'A';							// Valid status meegeven voor later gebruik
 8002d4c:	4b28      	ldr	r3, [pc, #160]	@ (8002df0 <GNRMC_Parser+0x1ec>)
 8002d4e:	2241      	movs	r2, #65	@ 0x41
 8002d50:	701a      	strb	r2, [r3, #0]

		average[i] = GNRMC_data;							// zet data round robin in average[].
 8002d52:	4a2d      	ldr	r2, [pc, #180]	@ (8002e08 <GNRMC_Parser+0x204>)
 8002d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d56:	015b      	lsls	r3, r3, #5
 8002d58:	4413      	add	r3, r2
 8002d5a:	4a25      	ldr	r2, [pc, #148]	@ (8002df0 <GNRMC_Parser+0x1ec>)
 8002d5c:	461c      	mov	r4, r3
 8002d5e:	4615      	mov	r5, r2
 8002d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d64:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002d68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		xSemaphoreGive(hGNRMC_Struct_Sem); 					// geef de mutex weer vrij voor een ander
 8002d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8002de8 <GNRMC_Parser+0x1e4>)
 8002d6e:	6818      	ldr	r0, [r3, #0]
 8002d70:	2300      	movs	r3, #0
 8002d72:	2200      	movs	r2, #0
 8002d74:	2100      	movs	r1, #0
 8002d76:	f00c fbe7 	bl	800f548 <xQueueGenericSend>

		vTaskGetInfo(GetTaskhandle("drive_task"), &TaskDetails, pdFALSE, eInvalid);
 8002d7a:	4824      	ldr	r0, [pc, #144]	@ (8002e0c <GNRMC_Parser+0x208>)
 8002d7c:	f7ff fb8c 	bl	8002498 <GetTaskhandle>
 8002d80:	f107 0108 	add.w	r1, r7, #8
 8002d84:	2305      	movs	r3, #5
 8002d86:	2200      	movs	r2, #0
 8002d88:	f00e fb96 	bl	80114b8 <vTaskGetInfo>
		if((TaskDetails.eCurrentState) != eSuspended)		// kijken of drivetask suspended is als ie dat niet is wordt een tasknotify gestuurd
 8002d8c:	7d3b      	ldrb	r3, [r7, #20]
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d007      	beq.n	8002da2 <GNRMC_Parser+0x19e>
			xTaskNotifyGive(GetTaskhandle("drive_task"));
 8002d92:	481e      	ldr	r0, [pc, #120]	@ (8002e0c <GNRMC_Parser+0x208>)
 8002d94:	f7ff fb80 	bl	8002498 <GetTaskhandle>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	f00e fed1 	bl	8011b44 <xTaskGenericNotify>

		xSemaphoreTake(hLog_Struct_Sem, portMAX_DELAY);		// pak de mutex zodat halve data word geschreven als een log 'punt'
 8002da2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e10 <GNRMC_Parser+0x20c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f04f 31ff 	mov.w	r1, #4294967295
 8002daa:	4618      	mov	r0, r3
 8002dac:	f00c fe4e 	bl	800fa4c <xQueueSemaphoreTake>
		DataLog.Route = GNRMC_data;
 8002db0:	4a18      	ldr	r2, [pc, #96]	@ (8002e14 <GNRMC_Parser+0x210>)
 8002db2:	4b0f      	ldr	r3, [pc, #60]	@ (8002df0 <GNRMC_Parser+0x1ec>)
 8002db4:	4614      	mov	r4, r2
 8002db6:	461d      	mov	r5, r3
 8002db8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dbc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002dc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		xSemaphoreGive(hLog_Struct_Sem);					// geef mutex terug zodat de sturct kan worden opgslagen log 'punt'
 8002dc4:	4b12      	ldr	r3, [pc, #72]	@ (8002e10 <GNRMC_Parser+0x20c>)
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2100      	movs	r1, #0
 8002dce:	f00c fbbb 	bl	800f548 <xQueueGenericSend>

		i++;
 8002dd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	647b      	str	r3, [r7, #68]	@ 0x44
		if(i >= 3)											// als average[] vol is, dan opnieuw beginnen met vullen
 8002dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	f77f af18 	ble.w	8002c10 <GNRMC_Parser+0xc>
			i = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	647b      	str	r3, [r7, #68]	@ 0x44
		xTaskNotifyWait(0,0, NULL, portMAX_DELAY);			// wacht op notify van fill_GNRMC in gps.c
 8002de4:	e714      	b.n	8002c10 <GNRMC_Parser+0xc>
 8002de6:	bf00      	nop
 8002de8:	20000438 	.word	0x20000438
 8002dec:	2000044c 	.word	0x2000044c
 8002df0:	200004a8 	.word	0x200004a8
 8002df4:	20000461 	.word	0x20000461
 8002df8:	404e0000 	.word	0x404e0000
 8002dfc:	2000046d 	.word	0x2000046d
 8002e00:	20000470 	.word	0x20000470
 8002e04:	20000484 	.word	0x20000484
 8002e08:	200004c8 	.word	0x200004c8
 8002e0c:	08019a34 	.word	0x08019a34
 8002e10:	2000043c 	.word	0x2000043c
 8002e14:	200008f8 	.word	0x200008f8

08002e18 <data_opslaanTask>:
* @brief het gemiddelde van wat er in average[] staat wordt opgeslagen met een knop op het ARM-bordje voor meer nauwkeurigheid.<BR>
* Ook kan deze opgeslagen waypoints gerest kunnen worden met een andere knop. Deze knop krijgt de task door van ARM_keys_IRQ
* @return void
*/
void data_opslaanTask(void *argument)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	uint32_t key;
	int i = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60fb      	str	r3, [r7, #12]
	while(TRUE)
	{
		xTaskNotifyWait (0x00, 0xffffffff, &key, portMAX_DELAY);		// wacht op ARM_keys_IRQ
 8002e24:	f107 0208 	add.w	r2, r7, #8
 8002e28:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e30:	2000      	movs	r0, #0
 8002e32:	f00e fe27 	bl	8011a84 <xTaskNotifyWait>

		if(key == 0x0002) 												// als resetknop is ingedrukt dan moet de arrat geleegd worden en de teller moet op 0
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d119      	bne.n	8002e70 <data_opslaanTask+0x58>
		{
			memset(&waypoints, 0, sizeof(waypoints));
 8002e3c:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8002e40:	2100      	movs	r1, #0
 8002e42:	4830      	ldr	r0, [pc, #192]	@ (8002f04 <data_opslaanTask+0xec>)
 8002e44:	f011 ff67 	bl	8014d16 <memset>
			i = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]
			HoeveelheidWaypoints = 0;
 8002e4c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f08 <data_opslaanTask+0xf0>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
			WaypointIndex = 0;
 8002e52:	4b2e      	ldr	r3, [pc, #184]	@ (8002f0c <data_opslaanTask+0xf4>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
			ResetCourseIndex();
 8002e58:	f7fe fb28 	bl	80014ac <ResetCourseIndex>
			LCD_clear(); 												// LCD legen
 8002e5c:	f000 fa50 	bl	8003300 <LCD_clear>
			LCD_putint(i); 												// waypoint nummer op LCD
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fb50 	bl	8003508 <LCD_putint>
			LCD_put("/30 waypoints");
 8002e68:	4829      	ldr	r0, [pc, #164]	@ (8002f10 <data_opslaanTask+0xf8>)
 8002e6a:	f000 fb13 	bl	8003494 <LCD_put>
			continue;													// begin boven aan en wacht weer op een arm-key
 8002e6e:	e047      	b.n	8002f00 <data_opslaanTask+0xe8>
		}

		if (i<MAX_WAYPOINTS && key == 0x0001)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b1d      	cmp	r3, #29
 8002e74:	dc38      	bgt.n	8002ee8 <data_opslaanTask+0xd0>
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d135      	bne.n	8002ee8 <data_opslaanTask+0xd0>
		{
		    xSemaphoreTake(hGNRMC_Struct_Sem, portMAX_DELAY);			// wacht op toegang tot de mutex;
 8002e7c:	4b25      	ldr	r3, [pc, #148]	@ (8002f14 <data_opslaanTask+0xfc>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f04f 31ff 	mov.w	r1, #4294967295
 8002e84:	4618      	mov	r0, r3
 8002e86:	f00c fde1 	bl	800fa4c <xQueueSemaphoreTake>

		    if(!(GNRMC_data.status == 'A'))								// status check
 8002e8a:	4b23      	ldr	r3, [pc, #140]	@ (8002f18 <data_opslaanTask+0x100>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b41      	cmp	r3, #65	@ 0x41
 8002e90:	d010      	beq.n	8002eb4 <data_opslaanTask+0x9c>
		    {
		    	LCD_clear(); 											// LCD legen
 8002e92:	f000 fa35 	bl	8003300 <LCD_clear>
		    	LCD_putint(i); 											// waypoint nummer op LCD
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 fb35 	bl	8003508 <LCD_putint>
		    	LCD_put("/30 waypoints Geen Data");
 8002e9e:	481f      	ldr	r0, [pc, #124]	@ (8002f1c <data_opslaanTask+0x104>)
 8002ea0:	f000 faf8 	bl	8003494 <LCD_put>
		    	xSemaphoreGive(hGNRMC_Struct_Sem);
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f14 <data_opslaanTask+0xfc>)
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2100      	movs	r1, #0
 8002eae:	f00c fb4b 	bl	800f548 <xQueueGenericSend>
		    	continue;
 8002eb2:	e025      	b.n	8002f00 <data_opslaanTask+0xe8>
		    }
		    Average_Bepalen_Waypoints(i);
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f7ff fe2f 	bl	8002b18 <Average_Bepalen_Waypoints>
		    xSemaphoreGive(hGNRMC_Struct_Sem); 							// wacht op toegang tot de mutex;
 8002eba:	4b16      	ldr	r3, [pc, #88]	@ (8002f14 <data_opslaanTask+0xfc>)
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	f00c fb40 	bl	800f548 <xQueueGenericSend>

			i++;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	60fb      	str	r3, [r7, #12]

		    LCD_clear(); 												// LCD legen
 8002ece:	f000 fa17 	bl	8003300 <LCD_clear>
		    LCD_putint(i); 												// waypoint nummer op LCD
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fb17 	bl	8003508 <LCD_putint>
		    LCD_put("/30 waypoints");
 8002eda:	480d      	ldr	r0, [pc, #52]	@ (8002f10 <data_opslaanTask+0xf8>)
 8002edc:	f000 fada 	bl	8003494 <LCD_put>
		    osDelay(100);												// spam beveiliging
 8002ee0:	2064      	movs	r0, #100	@ 0x64
 8002ee2:	f00b fdc9 	bl	800ea78 <osDelay>
 8002ee6:	e00b      	b.n	8002f00 <data_opslaanTask+0xe8>
		}
		else if (i == MAX_WAYPOINTS)									// het maximaal aantal waypoints is bereikt
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b1e      	cmp	r3, #30
 8002eec:	d19a      	bne.n	8002e24 <data_opslaanTask+0xc>
		{
			 LCD_put("Limit reached!");
 8002eee:	480c      	ldr	r0, [pc, #48]	@ (8002f20 <data_opslaanTask+0x108>)
 8002ef0:	f000 fad0 	bl	8003494 <LCD_put>
			 osDelay(100);												// zonder dit loopt de lcd vast
 8002ef4:	2064      	movs	r0, #100	@ 0x64
 8002ef6:	f00b fdbf 	bl	800ea78 <osDelay>
			 i++;														// ga hierna uit de if statement zodat niet heel de lcd vol komt te staan
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	3301      	adds	r3, #1
 8002efe:	60fb      	str	r3, [r7, #12]
		xTaskNotifyWait (0x00, 0xffffffff, &key, portMAX_DELAY);		// wacht op ARM_keys_IRQ
 8002f00:	e790      	b.n	8002e24 <data_opslaanTask+0xc>
 8002f02:	bf00      	nop
 8002f04:	20000528 	.word	0x20000528
 8002f08:	20002864 	.word	0x20002864
 8002f0c:	2000041c 	.word	0x2000041c
 8002f10:	08019a40 	.word	0x08019a40
 8002f14:	20000438 	.word	0x20000438
 8002f18:	200004a8 	.word	0x200004a8
 8002f1c:	08019a50 	.word	0x08019a50
 8002f20:	08019a68 	.word	0x08019a68
 8002f24:	00000000 	.word	0x00000000

08002f28 <GetDistance>:
/**
* @brief Lees de afstand van sensor tot voorwerp.
* @return int distance
*/
void GetDistance(void* argument)
{
 8002f28:	b590      	push	{r4, r7, lr}
 8002f2a:	b08d      	sub	sp, #52	@ 0x34
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	TaskStatus_t    TaskDetails;

	while(TRUE)
	{
		HAL_TIM_Base_Start(&htim11); 													// starten timer
 8002f30:	484b      	ldr	r0, [pc, #300]	@ (8003060 <GetDistance+0x138>)
 8002f32:	f005 fee3 	bl	8008cfc <HAL_TIM_Base_Start>
		HAL_GPIO_WritePin(GPIOB, Trig_Pin, GPIO_PIN_SET);
 8002f36:	2201      	movs	r2, #1
 8002f38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f3c:	4849      	ldr	r0, [pc, #292]	@ (8003064 <GetDistance+0x13c>)
 8002f3e:	f002 f8a3 	bl	8005088 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COUNTER(&htim11, 0);
 8002f42:	4b47      	ldr	r3, [pc, #284]	@ (8003060 <GetDistance+0x138>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2200      	movs	r2, #0
 8002f48:	625a      	str	r2, [r3, #36]	@ 0x24
		while (__HAL_TIM_GET_COUNTER(&htim11)<10); 										// 10 micro seconden wachten om een pulse van 10 micro te sturen via de trig pin
 8002f4a:	bf00      	nop
 8002f4c:	4b44      	ldr	r3, [pc, #272]	@ (8003060 <GetDistance+0x138>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f52:	2b09      	cmp	r3, #9
 8002f54:	d9fa      	bls.n	8002f4c <GetDistance+0x24>
		HAL_GPIO_WritePin(GPIOB, Trig_Pin, GPIO_PIN_RESET);
 8002f56:	2200      	movs	r2, #0
 8002f58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f5c:	4841      	ldr	r0, [pc, #260]	@ (8003064 <GetDistance+0x13c>)
 8002f5e:	f002 f893 	bl	8005088 <HAL_GPIO_WritePin>

		Millis = HAL_GetTick();
 8002f62:	f001 fd39 	bl	80049d8 <HAL_GetTick>
 8002f66:	4603      	mov	r3, r0
 8002f68:	4a3f      	ldr	r2, [pc, #252]	@ (8003068 <GetDistance+0x140>)
 8002f6a:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin (GPIOB, Echo_Pin)) && Millis + 10 >  HAL_GetTick()); 	// Wachten totdat de echo pin hoog wordt
 8002f6c:	bf00      	nop
 8002f6e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002f72:	483c      	ldr	r0, [pc, #240]	@ (8003064 <GetDistance+0x13c>)
 8002f74:	f002 f870 	bl	8005058 <HAL_GPIO_ReadPin>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d108      	bne.n	8002f90 <GetDistance+0x68>
 8002f7e:	4b3a      	ldr	r3, [pc, #232]	@ (8003068 <GetDistance+0x140>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f103 040a 	add.w	r4, r3, #10
 8002f86:	f001 fd27 	bl	80049d8 <HAL_GetTick>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	429c      	cmp	r4, r3
 8002f8e:	d8ee      	bhi.n	8002f6e <GetDistance+0x46>
		val1 = __HAL_TIM_GET_COUNTER (&htim11); 										// Tijdpunt krijgen van begin van de echo pulse
 8002f90:	4b33      	ldr	r3, [pc, #204]	@ (8003060 <GetDistance+0x138>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	4a35      	ldr	r2, [pc, #212]	@ (800306c <GetDistance+0x144>)
 8002f98:	6013      	str	r3, [r2, #0]

		Millis = HAL_GetTick();
 8002f9a:	f001 fd1d 	bl	80049d8 <HAL_GetTick>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4a31      	ldr	r2, [pc, #196]	@ (8003068 <GetDistance+0x140>)
 8002fa2:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin (GPIOB, Echo_Pin)) && Millis + 50 > HAL_GetTick()); 	// Wachten todat de echo pin laag wordt
 8002fa4:	bf00      	nop
 8002fa6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002faa:	482e      	ldr	r0, [pc, #184]	@ (8003064 <GetDistance+0x13c>)
 8002fac:	f002 f854 	bl	8005058 <HAL_GPIO_ReadPin>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d008      	beq.n	8002fc8 <GetDistance+0xa0>
 8002fb6:	4b2c      	ldr	r3, [pc, #176]	@ (8003068 <GetDistance+0x140>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8002fbe:	f001 fd0b 	bl	80049d8 <HAL_GetTick>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	429c      	cmp	r4, r3
 8002fc6:	d8ee      	bhi.n	8002fa6 <GetDistance+0x7e>
		val2 = __HAL_TIM_GET_COUNTER (&htim11); 										// Tijdpunt krijgen van de eind tijd van de echo pulse
 8002fc8:	4b25      	ldr	r3, [pc, #148]	@ (8003060 <GetDistance+0x138>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fce:	4a28      	ldr	r2, [pc, #160]	@ (8003070 <GetDistance+0x148>)
 8002fd0:	6013      	str	r3, [r2, #0]
		HAL_TIM_Base_Stop(&htim11);
 8002fd2:	4823      	ldr	r0, [pc, #140]	@ (8003060 <GetDistance+0x138>)
 8002fd4:	f005 fefa 	bl	8008dcc <HAL_TIM_Base_Stop>

		distance = (val2-val1)* 0.034/2; 	// Afstand in cm berekenen met standaard formule
 8002fd8:	4b25      	ldr	r3, [pc, #148]	@ (8003070 <GetDistance+0x148>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	4b23      	ldr	r3, [pc, #140]	@ (800306c <GetDistance+0x144>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fd fa9e 	bl	8000524 <__aeabi_ui2d>
 8002fe8:	a31b      	add	r3, pc, #108	@ (adr r3, 8003058 <GetDistance+0x130>)
 8002fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fee:	f7fd fb13 	bl	8000618 <__aeabi_dmul>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003002:	f7fd fc33 	bl	800086c <__aeabi_ddiv>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4610      	mov	r0, r2
 800300c:	4619      	mov	r1, r3
 800300e:	f7fd fddb 	bl	8000bc8 <__aeabi_d2uiz>
 8003012:	4603      	mov	r3, r0
 8003014:	b29a      	uxth	r2, r3
 8003016:	4b17      	ldr	r3, [pc, #92]	@ (8003074 <GetDistance+0x14c>)
 8003018:	801a      	strh	r2, [r3, #0]

		if(distance < 40)
 800301a:	4b16      	ldr	r3, [pc, #88]	@ (8003074 <GetDistance+0x14c>)
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	2b27      	cmp	r3, #39	@ 0x27
 8003020:	d813      	bhi.n	800304a <GetDistance+0x122>
		{
			vTaskGetInfo(GetTaskhandle("drive_task"), &TaskDetails, pdFALSE, eInvalid);
 8003022:	4815      	ldr	r0, [pc, #84]	@ (8003078 <GetDistance+0x150>)
 8003024:	f7ff fa38 	bl	8002498 <GetTaskhandle>
 8003028:	f107 010c 	add.w	r1, r7, #12
 800302c:	2305      	movs	r3, #5
 800302e:	2200      	movs	r2, #0
 8003030:	f00e fa42 	bl	80114b8 <vTaskGetInfo>
			if((TaskDetails.eCurrentState) != eSuspended)		// kijken of drivetask suspended is als ie dat niet is wordt een tasknotify gestuurd
 8003034:	7e3b      	ldrb	r3, [r7, #24]
 8003036:	2b03      	cmp	r3, #3
 8003038:	d007      	beq.n	800304a <GetDistance+0x122>
				xTaskNotifyGive(GetTaskhandle("drive_task"));
 800303a:	480f      	ldr	r0, [pc, #60]	@ (8003078 <GetDistance+0x150>)
 800303c:	f7ff fa2c 	bl	8002498 <GetTaskhandle>
 8003040:	2300      	movs	r3, #0
 8003042:	2202      	movs	r2, #2
 8003044:	2100      	movs	r1, #0
 8003046:	f00e fd7d 	bl	8011b44 <xTaskGenericNotify>
		}
		osDelay(100);
 800304a:	2064      	movs	r0, #100	@ 0x64
 800304c:	f00b fd14 	bl	800ea78 <osDelay>
		HAL_TIM_Base_Start(&htim11); 													// starten timer
 8003050:	e76e      	b.n	8002f30 <GetDistance+0x8>
 8003052:	bf00      	nop
 8003054:	f3af 8000 	nop.w
 8003058:	b020c49c 	.word	0xb020c49c
 800305c:	3fa16872 	.word	0x3fa16872
 8003060:	200029b4 	.word	0x200029b4
 8003064:	40020400 	.word	0x40020400
 8003068:	20002868 	.word	0x20002868
 800306c:	2000286c 	.word	0x2000286c
 8003070:	20002870 	.word	0x20002870
 8003074:	20002874 	.word	0x20002874
 8003078:	08019a78 	.word	0x08019a78

0800307c <BUZZER_put>:
}

// Maak een piepje met meegegeven lengte
// toevoeging om compatibel te blijven met ARM v4.2
void BUZZER_put(unsigned int time)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
    volatile unsigned int i;
    volatile unsigned int k=0;
 8003084:	2300      	movs	r3, #0
 8003086:	60bb      	str	r3, [r7, #8]

	while (k++<100)
 8003088:	e023      	b.n	80030d2 <BUZZER_put+0x56>
    {
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 800308a:	2201      	movs	r2, #1
 800308c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003090:	4815      	ldr	r0, [pc, #84]	@ (80030e8 <BUZZER_put+0x6c>)
 8003092:	f001 fff9 	bl	8005088 <HAL_GPIO_WritePin>
		for (i=0;i<(time+k);i++);
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	e002      	b.n	80030a2 <BUZZER_put+0x26>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	3301      	adds	r3, #1
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	441a      	add	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d8f6      	bhi.n	800309c <BUZZER_put+0x20>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80030ae:	2200      	movs	r2, #0
 80030b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80030b4:	480c      	ldr	r0, [pc, #48]	@ (80030e8 <BUZZER_put+0x6c>)
 80030b6:	f001 ffe7 	bl	8005088 <HAL_GPIO_WritePin>
		for (i=0;(i<time+k);i++);
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	e002      	b.n	80030c6 <BUZZER_put+0x4a>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	3301      	adds	r3, #1
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	441a      	add	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d8f6      	bhi.n	80030c0 <BUZZER_put+0x44>
	while (k++<100)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	60ba      	str	r2, [r7, #8]
 80030d8:	2b63      	cmp	r3, #99	@ 0x63
 80030da:	d9d6      	bls.n	800308a <BUZZER_put+0xe>
	}
}
 80030dc:	bf00      	nop
 80030de:	bf00      	nop
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40020800 	.word	0x40020800

080030ec <KEYS_init>:
void KEYS_init(void)
/* Keys initialize
 * In this function the ports are set for the keyboard.
 * The rows are outputs and the columns are input.
 */
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	4b18      	ldr	r3, [pc, #96]	@ (8003158 <KEYS_init+0x6c>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fa:	4a17      	ldr	r2, [pc, #92]	@ (8003158 <KEYS_init+0x6c>)
 80030fc:	f043 0308 	orr.w	r3, r3, #8
 8003100:	6313      	str	r3, [r2, #48]	@ 0x30
 8003102:	4b15      	ldr	r3, [pc, #84]	@ (8003158 <KEYS_init+0x6c>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpio;
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 800310e:	2301      	movs	r3, #1
 8003110:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_NOPULL;
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003116:	2303      	movs	r3, #3
 8003118:	613b      	str	r3, [r7, #16]

	gpio.Pin = KEY_ROW;
 800311a:	f640 030e 	movw	r3, #2062	@ 0x80e
 800311e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(PKEY_ROW, &gpio);
 8003120:	1d3b      	adds	r3, r7, #4
 8003122:	4619      	mov	r1, r3
 8003124:	480d      	ldr	r0, [pc, #52]	@ (800315c <KEYS_init+0x70>)
 8003126:	f001 fdfb 	bl	8004d20 <HAL_GPIO_Init>

	gpio.Pin = KEY_COL;
 800312a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800312e:	607b      	str	r3, [r7, #4]
	gpio.Mode = GPIO_MODE_INPUT;
 8003130:	2300      	movs	r3, #0
 8003132:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_PULLDOWN;
 8003134:	2302      	movs	r3, #2
 8003136:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PKEY_COL, &gpio);
 8003138:	1d3b      	adds	r3, r7, #4
 800313a:	4619      	mov	r1, r3
 800313c:	4807      	ldr	r0, [pc, #28]	@ (800315c <KEYS_init+0x70>)
 800313e:	f001 fdef 	bl	8004d20 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_ROW, 0);
 8003142:	2200      	movs	r2, #0
 8003144:	f640 010e 	movw	r1, #2062	@ 0x80e
 8003148:	4804      	ldr	r0, [pc, #16]	@ (800315c <KEYS_init+0x70>)
 800314a:	f001 ff9d 	bl	8005088 <HAL_GPIO_WritePin>
}
 800314e:	bf00      	nop
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40023800 	.word	0x40023800
 800315c:	40020c00 	.word	0x40020c00

08003160 <KEYS_initISR>:

void KEYS_initISR(int hilo)
/* Keys initialize for ISR
 * Set all lines high
 * */
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, hilo);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003172:	480e      	ldr	r0, [pc, #56]	@ (80031ac <KEYS_initISR+0x4c>)
 8003174:	f001 ff88 	bl	8005088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, hilo);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	b2db      	uxtb	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	2102      	movs	r1, #2
 8003180:	480a      	ldr	r0, [pc, #40]	@ (80031ac <KEYS_initISR+0x4c>)
 8003182:	f001 ff81 	bl	8005088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, hilo);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	b2db      	uxtb	r3, r3
 800318a:	461a      	mov	r2, r3
 800318c:	2108      	movs	r1, #8
 800318e:	4807      	ldr	r0, [pc, #28]	@ (80031ac <KEYS_initISR+0x4c>)
 8003190:	f001 ff7a 	bl	8005088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, hilo);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	461a      	mov	r2, r3
 800319a:	2104      	movs	r1, #4
 800319c:	4803      	ldr	r0, [pc, #12]	@ (80031ac <KEYS_initISR+0x4c>)
 800319e:	f001 ff73 	bl	8005088 <HAL_GPIO_WritePin>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40020c00 	.word	0x40020c00

080031b0 <KEYS_read>:
/* Keys read
 * This function reads which key is pressed.
 * It does so by making a row high and check if there is a connection with a column.
 * If there is a connection the value is returned.
 */
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	603b      	str	r3, [r7, #0]
	unsigned out = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 0);
 80031be:	2200      	movs	r2, #0
 80031c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80031c4:	4827      	ldr	r0, [pc, #156]	@ (8003264 <KEYS_read+0xb4>)
 80031c6:	f001 ff5f 	bl	8005088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 1);
 80031ca:	2201      	movs	r2, #1
 80031cc:	2108      	movs	r1, #8
 80031ce:	4825      	ldr	r0, [pc, #148]	@ (8003264 <KEYS_read+0xb4>)
 80031d0:	f001 ff5a 	bl	8005088 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 80031d4:	f000 f848 	bl	8003268 <KEYS_kolom>
 80031d8:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out= 12+key;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <KEYS_read+0x36>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	330c      	adds	r3, #12
 80031e4:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 0);
 80031e6:	2200      	movs	r2, #0
 80031e8:	2108      	movs	r1, #8
 80031ea:	481e      	ldr	r0, [pc, #120]	@ (8003264 <KEYS_read+0xb4>)
 80031ec:	f001 ff4c 	bl	8005088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 1);
 80031f0:	2201      	movs	r2, #1
 80031f2:	2104      	movs	r1, #4
 80031f4:	481b      	ldr	r0, [pc, #108]	@ (8003264 <KEYS_read+0xb4>)
 80031f6:	f001 ff47 	bl	8005088 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 80031fa:	f000 f835 	bl	8003268 <KEYS_kolom>
 80031fe:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 8+key;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <KEYS_read+0x5c>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	3308      	adds	r3, #8
 800320a:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 0);
 800320c:	2200      	movs	r2, #0
 800320e:	2104      	movs	r1, #4
 8003210:	4814      	ldr	r0, [pc, #80]	@ (8003264 <KEYS_read+0xb4>)
 8003212:	f001 ff39 	bl	8005088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 1);
 8003216:	2201      	movs	r2, #1
 8003218:	2102      	movs	r1, #2
 800321a:	4812      	ldr	r0, [pc, #72]	@ (8003264 <KEYS_read+0xb4>)
 800321c:	f001 ff34 	bl	8005088 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 8003220:	f000 f822 	bl	8003268 <KEYS_kolom>
 8003224:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 4+key;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <KEYS_read+0x82>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	3304      	adds	r3, #4
 8003230:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 0);
 8003232:	2200      	movs	r2, #0
 8003234:	2102      	movs	r1, #2
 8003236:	480b      	ldr	r0, [pc, #44]	@ (8003264 <KEYS_read+0xb4>)
 8003238:	f001 ff26 	bl	8005088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 1);
 800323c:	2201      	movs	r2, #1
 800323e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003242:	4808      	ldr	r0, [pc, #32]	@ (8003264 <KEYS_read+0xb4>)
 8003244:	f001 ff20 	bl	8005088 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 8003248:	f000 f80e 	bl	8003268 <KEYS_kolom>
 800324c:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = key;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <KEYS_read+0xa8>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	607b      	str	r3, [r7, #4]

	return out;
 8003258:	687b      	ldr	r3, [r7, #4]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40020c00 	.word	0x40020c00

08003268 <KEYS_kolom>:
unsigned int KEYS_kolom(void)
/* Keys Column
 * In this function the columns are checked if there is a connection.
 * If a column has a connection the return value is the column number.
 */
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K1) == 1) key = 1;
 8003272:	2140      	movs	r1, #64	@ 0x40
 8003274:	4814      	ldr	r0, [pc, #80]	@ (80032c8 <KEYS_kolom+0x60>)
 8003276:	f001 feef 	bl	8005058 <HAL_GPIO_ReadPin>
 800327a:	4603      	mov	r3, r0
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <KEYS_kolom+0x1c>
 8003280:	2301      	movs	r3, #1
 8003282:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K2) == 1) key = 2;
 8003284:	2180      	movs	r1, #128	@ 0x80
 8003286:	4810      	ldr	r0, [pc, #64]	@ (80032c8 <KEYS_kolom+0x60>)
 8003288:	f001 fee6 	bl	8005058 <HAL_GPIO_ReadPin>
 800328c:	4603      	mov	r3, r0
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <KEYS_kolom+0x2e>
 8003292:	2302      	movs	r3, #2
 8003294:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K3) == 1) key = 3;
 8003296:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800329a:	480b      	ldr	r0, [pc, #44]	@ (80032c8 <KEYS_kolom+0x60>)
 800329c:	f001 fedc 	bl	8005058 <HAL_GPIO_ReadPin>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <KEYS_kolom+0x42>
 80032a6:	2303      	movs	r3, #3
 80032a8:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K4) == 1) key = 4;
 80032aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80032ae:	4806      	ldr	r0, [pc, #24]	@ (80032c8 <KEYS_kolom+0x60>)
 80032b0:	f001 fed2 	bl	8005058 <HAL_GPIO_ReadPin>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <KEYS_kolom+0x56>
 80032ba:	2304      	movs	r3, #4
 80032bc:	607b      	str	r3, [r7, #4]
	return key;
 80032be:	687b      	ldr	r3, [r7, #4]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40020c00 	.word	0x40020c00

080032cc <ClearBits>:
static void LCD_writebyte(unsigned char data);

unsigned char curpos = 0; // remember cursorposition

void ClearBits(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_RESET);
 80032d0:	2200      	movs	r2, #0
 80032d2:	2108      	movs	r1, #8
 80032d4:	4809      	ldr	r0, [pc, #36]	@ (80032fc <ClearBits+0x30>)
 80032d6:	f001 fed7 	bl	8005088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_RESET);
 80032da:	2200      	movs	r2, #0
 80032dc:	2110      	movs	r1, #16
 80032de:	4807      	ldr	r0, [pc, #28]	@ (80032fc <ClearBits+0x30>)
 80032e0:	f001 fed2 	bl	8005088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_RESET);
 80032e4:	2200      	movs	r2, #0
 80032e6:	2120      	movs	r1, #32
 80032e8:	4804      	ldr	r0, [pc, #16]	@ (80032fc <ClearBits+0x30>)
 80032ea:	f001 fecd 	bl	8005088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_RESET);
 80032ee:	2200      	movs	r2, #0
 80032f0:	2140      	movs	r1, #64	@ 0x40
 80032f2:	4802      	ldr	r0, [pc, #8]	@ (80032fc <ClearBits+0x30>)
 80032f4:	f001 fec8 	bl	8005088 <HAL_GPIO_WritePin>
}
 80032f8:	bf00      	nop
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40021000 	.word	0x40021000

08003300 <LCD_clear>:
   LCD_writecontrol(0x02); // cursur home
   curpos=0;               // reset position
}

void LCD_clear(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
   LCD_writecontrol(0x01); // clearscreen
 8003304:	2001      	movs	r0, #1
 8003306:	f000 f9ad 	bl	8003664 <LCD_writecontrol>
   curpos=0;               // reset position
 800330a:	4b04      	ldr	r3, [pc, #16]	@ (800331c <LCD_clear+0x1c>)
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
   HAL_Delay(5);
 8003310:	2005      	movs	r0, #5
 8003312:	f001 fb6d 	bl	80049f0 <HAL_Delay>
//   busyflag();

}
 8003316:	bf00      	nop
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20002876 	.word	0x20002876

08003320 <LCD_init>:


// init LCD
// Display wordt gebruikt in 4bits modus,2 regels, 5x7 dots font.
void LCD_init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;	// GPIO init structure.
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	4b44      	ldr	r3, [pc, #272]	@ (800343c <LCD_init+0x11c>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332e:	4a43      	ldr	r2, [pc, #268]	@ (800343c <LCD_init+0x11c>)
 8003330:	f043 0310 	orr.w	r3, r3, #16
 8003334:	6313      	str	r3, [r2, #48]	@ 0x30
 8003336:	4b41      	ldr	r3, [pc, #260]	@ (800343c <LCD_init+0x11c>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	60bb      	str	r3, [r7, #8]
 8003340:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	607b      	str	r3, [r7, #4]
 8003346:	4b3d      	ldr	r3, [pc, #244]	@ (800343c <LCD_init+0x11c>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	4a3c      	ldr	r2, [pc, #240]	@ (800343c <LCD_init+0x11c>)
 800334c:	f043 0304 	orr.w	r3, r3, #4
 8003350:	6313      	str	r3, [r2, #48]	@ 0x30
 8003352:	4b3a      	ldr	r3, [pc, #232]	@ (800343c <LCD_init+0x11c>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	607b      	str	r3, [r7, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	603b      	str	r3, [r7, #0]
 8003362:	4b36      	ldr	r3, [pc, #216]	@ (800343c <LCD_init+0x11c>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003366:	4a35      	ldr	r2, [pc, #212]	@ (800343c <LCD_init+0x11c>)
 8003368:	f043 0308 	orr.w	r3, r3, #8
 800336c:	6313      	str	r3, [r2, #48]	@ 0x30
 800336e:	4b33      	ldr	r3, [pc, #204]	@ (800343c <LCD_init+0x11c>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	683b      	ldr	r3, [r7, #0]

	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 800337a:	2301      	movs	r3, #1
 800337c:	613b      	str	r3, [r7, #16]
	gpio.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003382:	2303      	movs	r3, #3
 8003384:	61bb      	str	r3, [r7, #24]
	gpio.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8003386:	2378      	movs	r3, #120	@ 0x78
 8003388:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &gpio);
 800338a:	f107 030c 	add.w	r3, r7, #12
 800338e:	4619      	mov	r1, r3
 8003390:	482b      	ldr	r0, [pc, #172]	@ (8003440 <LCD_init+0x120>)
 8003392:	f001 fcc5 	bl	8004d20 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 8003396:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800339a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &gpio);
 800339c:	f107 030c 	add.w	r3, r7, #12
 80033a0:	4619      	mov	r1, r3
 80033a2:	4828      	ldr	r0, [pc, #160]	@ (8003444 <LCD_init+0x124>)
 80033a4:	f001 fcbc 	bl	8004d20 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_0;
 80033a8:	2301      	movs	r3, #1
 80033aa:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &gpio);
 80033ac:	f107 030c 	add.w	r3, r7, #12
 80033b0:	4619      	mov	r1, r3
 80033b2:	4825      	ldr	r0, [pc, #148]	@ (8003448 <LCD_init+0x128>)
 80033b4:	f001 fcb4 	bl	8004d20 <HAL_GPIO_Init>
//	GPIOE -> MODER |= ( 1 << 12 );
//	GPIOC -> MODER |= ( 1 << 26 );
//	GPIOC -> MODER |= ( 1 << 30 );
//	GPIOC -> MODER |= ( 1 << 28 );

	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 80033b8:	2200      	movs	r2, #0
 80033ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80033be:	4821      	ldr	r0, [pc, #132]	@ (8003444 <LCD_init+0x124>)
 80033c0:	f001 fe62 	bl	8005088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 80033c4:	2200      	movs	r2, #0
 80033c6:	2101      	movs	r1, #1
 80033c8:	481f      	ldr	r0, [pc, #124]	@ (8003448 <LCD_init+0x128>)
 80033ca:	f001 fe5d 	bl	8005088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW, GPIO_PIN_RESET);
 80033ce:	2200      	movs	r2, #0
 80033d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80033d4:	481b      	ldr	r0, [pc, #108]	@ (8003444 <LCD_init+0x124>)
 80033d6:	f001 fe57 	bl	8005088 <HAL_GPIO_WritePin>

	HAL_Delay(15);//15
 80033da:	200f      	movs	r0, #15
 80033dc:	f001 fb08 	bl	80049f0 <HAL_Delay>

    LCD_writebyte(0x30); // function-set boot
 80033e0:	2030      	movs	r0, #48	@ 0x30
 80033e2:	f000 f90d 	bl	8003600 <LCD_writebyte>
    HAL_Delay(70);
 80033e6:	2046      	movs	r0, #70	@ 0x46
 80033e8:	f001 fb02 	bl	80049f0 <HAL_Delay>
    LCD_writebyte(0x30);
 80033ec:	2030      	movs	r0, #48	@ 0x30
 80033ee:	f000 f907 	bl	8003600 <LCD_writebyte>
    LCD_writebyte(0x30);
 80033f2:	2030      	movs	r0, #48	@ 0x30
 80033f4:	f000 f904 	bl	8003600 <LCD_writebyte>

     // interface op 4 bits
    LCD_writebyte(0x02);
 80033f8:	2002      	movs	r0, #2
 80033fa:	f000 f901 	bl	8003600 <LCD_writebyte>
    HAL_Delay(5);
 80033fe:	2005      	movs	r0, #5
 8003400:	f001 faf6 	bl	80049f0 <HAL_Delay>

    LCD_writebyte(0x2C);  // function set
 8003404:	202c      	movs	r0, #44	@ 0x2c
 8003406:	f000 f8fb 	bl	8003600 <LCD_writebyte>
    HAL_Delay(15);
 800340a:	200f      	movs	r0, #15
 800340c:	f001 faf0 	bl	80049f0 <HAL_Delay>
    LCD_writebyte(0x0C);  // lcd aan
 8003410:	200c      	movs	r0, #12
 8003412:	f000 f8f5 	bl	8003600 <LCD_writebyte>
    HAL_Delay(15);
 8003416:	200f      	movs	r0, #15
 8003418:	f001 faea 	bl	80049f0 <HAL_Delay>
    LCD_writebyte(0x01);  // clear screen
 800341c:	2001      	movs	r0, #1
 800341e:	f000 f8ef 	bl	8003600 <LCD_writebyte>
    HAL_Delay(15);
 8003422:	200f      	movs	r0, #15
 8003424:	f001 fae4 	bl	80049f0 <HAL_Delay>
    LCD_writebyte(0x06);  // entry mode set
 8003428:	2006      	movs	r0, #6
 800342a:	f000 f8e9 	bl	8003600 <LCD_writebyte>
    HAL_Delay(15);
 800342e:	200f      	movs	r0, #15
 8003430:	f001 fade 	bl	80049f0 <HAL_Delay>
}
 8003434:	bf00      	nop
 8003436:	3720      	adds	r7, #32
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40023800 	.word	0x40023800
 8003440:	40021000 	.word	0x40021000
 8003444:	40020800 	.word	0x40020800
 8003448:	40020c00 	.word	0x40020c00

0800344c <LCD_putchar>:

// Zet meegegeven karakter op het scherm
void LCD_putchar(char c)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET);
 8003456:	2201      	movs	r2, #1
 8003458:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800345c:	480b      	ldr	r0, [pc, #44]	@ (800348c <LCD_putchar+0x40>)
 800345e:	f001 fe13 	bl	8005088 <HAL_GPIO_WritePin>
    LCD_writebyte(c);
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	4618      	mov	r0, r3
 8003466:	f000 f8cb 	bl	8003600 <LCD_writebyte>
    if (++curpos==32) // remember cursorpos
 800346a:	4b09      	ldr	r3, [pc, #36]	@ (8003490 <LCD_putchar+0x44>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	3301      	adds	r3, #1
 8003470:	b2da      	uxtb	r2, r3
 8003472:	4b07      	ldr	r3, [pc, #28]	@ (8003490 <LCD_putchar+0x44>)
 8003474:	701a      	strb	r2, [r3, #0]
 8003476:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <LCD_putchar+0x44>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b20      	cmp	r3, #32
 800347c:	d102      	bne.n	8003484 <LCD_putchar+0x38>
    	curpos=0;
 800347e:	4b04      	ldr	r3, [pc, #16]	@ (8003490 <LCD_putchar+0x44>)
 8003480:	2200      	movs	r2, #0
 8003482:	701a      	strb	r2, [r3, #0]
}
 8003484:	bf00      	nop
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40020800 	.word	0x40020800
 8003490:	20002876 	.word	0x20002876

08003494 <LCD_put>:

// Zet meegegeven string op het scherm
void LCD_put(char *string)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
#ifdef eenregel
   	unsigned char j;
#endif
    unsigned char k;
	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    for (k=0; string[k]; k++)
 800349c:	2300      	movs	r3, #0
 800349e:	73bb      	strb	r3, [r7, #14]
 80034a0:	e019      	b.n	80034d6 <LCD_put+0x42>
	{

#ifdef eenregel
    	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    	if(curpos==15) // at 15, goto next valid lcd-position
 80034a2:	4b12      	ldr	r3, [pc, #72]	@ (80034ec <LCD_put+0x58>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b0f      	cmp	r3, #15
 80034a8:	d10b      	bne.n	80034c2 <LCD_put+0x2e>
        for (j=0; j<25; j++) LCD_cursor_right();
 80034aa:	2300      	movs	r3, #0
 80034ac:	73fb      	strb	r3, [r7, #15]
 80034ae:	e005      	b.n	80034bc <LCD_put+0x28>
 80034b0:	2014      	movs	r0, #20
 80034b2:	f000 f8d7 	bl	8003664 <LCD_writecontrol>
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	3301      	adds	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	2b18      	cmp	r3, #24
 80034c0:	d9f6      	bls.n	80034b0 <LCD_put+0x1c>
#endif
        LCD_putchar(string[k]);
 80034c2:	7bbb      	ldrb	r3, [r7, #14]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	4413      	add	r3, r2
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff ffbe 	bl	800344c <LCD_putchar>
    for (k=0; string[k]; k++)
 80034d0:	7bbb      	ldrb	r3, [r7, #14]
 80034d2:	3301      	adds	r3, #1
 80034d4:	73bb      	strb	r3, [r7, #14]
 80034d6:	7bbb      	ldrb	r3, [r7, #14]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	4413      	add	r3, r2
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1df      	bne.n	80034a2 <LCD_put+0xe>
    }
}
 80034e2:	bf00      	nop
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20002876 	.word	0x20002876

080034f0 <LCD_puts>:

void LCD_puts(char *c)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
    LCD_put(c);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7ff ffcb 	bl	8003494 <LCD_put>
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <LCD_putint>:

// Zet het meegegeven positief getal op het scherm
void LCD_putint(unsigned int num)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08a      	sub	sp, #40	@ 0x28
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
    unsigned int rest;
    static unsigned char chars[10] = "0123456789"; // possible chars
    char s[17]; // display has 16 chars [0..15] + 1 closing null
	s[16]='\0'; // closing null set
 8003510:	2300      	movs	r3, #0
 8003512:	773b      	strb	r3, [r7, #28]
    int i=15;   // startposition at last display char
 8003514:	230f      	movs	r3, #15
 8003516:	627b      	str	r3, [r7, #36]	@ 0x24

    // kinda function itoa, integer to ascii
    if(num==0)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d124      	bne.n	8003568 <LCD_putint+0x60>
        s[i--]='0'; // '0' at 14
 800351e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003520:	1e5a      	subs	r2, r3, #1
 8003522:	627a      	str	r2, [r7, #36]	@ 0x24
 8003524:	3328      	adds	r3, #40	@ 0x28
 8003526:	443b      	add	r3, r7
 8003528:	2230      	movs	r2, #48	@ 0x30
 800352a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800352e:	e021      	b.n	8003574 <LCD_putint+0x6c>
    else
	{
        while(num>0 && i)
		{
            rest = num%10;
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	4b16      	ldr	r3, [pc, #88]	@ (800358c <LCD_putint+0x84>)
 8003534:	fba3 1302 	umull	r1, r3, r3, r2
 8003538:	08d9      	lsrs	r1, r3, #3
 800353a:	460b      	mov	r3, r1
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	623b      	str	r3, [r7, #32]
            num /= 10;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a10      	ldr	r2, [pc, #64]	@ (800358c <LCD_putint+0x84>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	08db      	lsrs	r3, r3, #3
 8003550:	607b      	str	r3, [r7, #4]
            s[i--]=chars[rest];
 8003552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003554:	1e5a      	subs	r2, r3, #1
 8003556:	627a      	str	r2, [r7, #36]	@ 0x24
 8003558:	490d      	ldr	r1, [pc, #52]	@ (8003590 <LCD_putint+0x88>)
 800355a:	6a3a      	ldr	r2, [r7, #32]
 800355c:	440a      	add	r2, r1
 800355e:	7812      	ldrb	r2, [r2, #0]
 8003560:	3328      	adds	r3, #40	@ 0x28
 8003562:	443b      	add	r3, r7
 8003564:	f803 2c1c 	strb.w	r2, [r3, #-28]
        while(num>0 && i)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <LCD_putint+0x6c>
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1dd      	bne.n	8003530 <LCD_putint+0x28>
        }
    }
	LCD_put(&s[i+1]); // first, set i to starting pos, undo one i-- too much
 8003574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003576:	3301      	adds	r3, #1
 8003578:	f107 020c 	add.w	r2, r7, #12
 800357c:	4413      	add	r3, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff ff88 	bl	8003494 <LCD_put>
}
 8003584:	bf00      	nop
 8003586:	3728      	adds	r7, #40	@ 0x28
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	cccccccd 	.word	0xcccccccd
 8003590:	200001e8 	.word	0x200001e8

08003594 <LCD_writenibble>:

// Stuurt een 4-bits commando naar het display
static void LCD_writenibble(unsigned char data)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	71fb      	strb	r3, [r7, #7]
    ClearBits();
 800359e:	f7ff fe95 	bl	80032cc <ClearBits>

    if (data & 0x01)
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d004      	beq.n	80035b6 <LCD_writenibble+0x22>
		HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_SET);
 80035ac:	2201      	movs	r2, #1
 80035ae:	2140      	movs	r1, #64	@ 0x40
 80035b0:	4812      	ldr	r0, [pc, #72]	@ (80035fc <LCD_writenibble+0x68>)
 80035b2:	f001 fd69 	bl	8005088 <HAL_GPIO_WritePin>

	if (data & 0x02)
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d004      	beq.n	80035ca <LCD_writenibble+0x36>
		HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_SET);
 80035c0:	2201      	movs	r2, #1
 80035c2:	2120      	movs	r1, #32
 80035c4:	480d      	ldr	r0, [pc, #52]	@ (80035fc <LCD_writenibble+0x68>)
 80035c6:	f001 fd5f 	bl	8005088 <HAL_GPIO_WritePin>

	if (data & 0x04)
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d004      	beq.n	80035de <LCD_writenibble+0x4a>
		HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_SET);
 80035d4:	2201      	movs	r2, #1
 80035d6:	2110      	movs	r1, #16
 80035d8:	4808      	ldr	r0, [pc, #32]	@ (80035fc <LCD_writenibble+0x68>)
 80035da:	f001 fd55 	bl	8005088 <HAL_GPIO_WritePin>

	if (data & 0x08)
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d004      	beq.n	80035f2 <LCD_writenibble+0x5e>
		HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_SET);
 80035e8:	2201      	movs	r2, #1
 80035ea:	2108      	movs	r1, #8
 80035ec:	4803      	ldr	r0, [pc, #12]	@ (80035fc <LCD_writenibble+0x68>)
 80035ee:	f001 fd4b 	bl	8005088 <HAL_GPIO_WritePin>

}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40021000 	.word	0x40021000

08003600 <LCD_writebyte>:


// Stuurt een 8-bits commando naar het display
static void LCD_writebyte(unsigned char data)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	71fb      	strb	r3, [r7, #7]
    /* hoogste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 800360a:	2201      	movs	r2, #1
 800360c:	2101      	movs	r1, #1
 800360e:	4814      	ldr	r0, [pc, #80]	@ (8003660 <LCD_writebyte+0x60>)
 8003610:	f001 fd3a 	bl	8005088 <HAL_GPIO_WritePin>
    LCD_writenibble((data>>4)&0x0F);
 8003614:	79fb      	ldrb	r3, [r7, #7]
 8003616:	091b      	lsrs	r3, r3, #4
 8003618:	b2db      	uxtb	r3, r3
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff ffba 	bl	8003594 <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8003620:	2200      	movs	r2, #0
 8003622:	2101      	movs	r1, #1
 8003624:	480e      	ldr	r0, [pc, #56]	@ (8003660 <LCD_writebyte+0x60>)
 8003626:	f001 fd2f 	bl	8005088 <HAL_GPIO_WritePin>

    HAL_Delay(2);
 800362a:	2002      	movs	r0, #2
 800362c:	f001 f9e0 	bl	80049f0 <HAL_Delay>

    /* laagste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 8003630:	2201      	movs	r2, #1
 8003632:	2101      	movs	r1, #1
 8003634:	480a      	ldr	r0, [pc, #40]	@ (8003660 <LCD_writebyte+0x60>)
 8003636:	f001 fd27 	bl	8005088 <HAL_GPIO_WritePin>
    LCD_writenibble(data&0x0F);
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	b2db      	uxtb	r3, r3
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff ffa6 	bl	8003594 <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8003648:	2200      	movs	r2, #0
 800364a:	2101      	movs	r1, #1
 800364c:	4804      	ldr	r0, [pc, #16]	@ (8003660 <LCD_writebyte+0x60>)
 800364e:	f001 fd1b 	bl	8005088 <HAL_GPIO_WritePin>

    HAL_Delay(2);
 8003652:	2002      	movs	r0, #2
 8003654:	f001 f9cc 	bl	80049f0 <HAL_Delay>
}
 8003658:	bf00      	nop
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40020c00 	.word	0x40020c00

08003664 <LCD_writecontrol>:

// Stuurt een commando naar het display
void LCD_writecontrol(unsigned char data)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 800366e:	2200      	movs	r2, #0
 8003670:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003674:	4805      	ldr	r0, [pc, #20]	@ (800368c <LCD_writecontrol+0x28>)
 8003676:	f001 fd07 	bl	8005088 <HAL_GPIO_WritePin>
    LCD_writebyte(data);
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff ffbf 	bl	8003600 <LCD_writebyte>
}
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40020800 	.word	0x40020800

08003690 <LED_init>:

/* LED Initialize
 * This function initializes the pins reset state
 */
void LED_init(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, GPIO_PIN_RESET);
 8003694:	2200      	movs	r2, #0
 8003696:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800369a:	4809      	ldr	r0, [pc, #36]	@ (80036c0 <LED_init+0x30>)
 800369c:	f001 fcf4 	bl	8005088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 80036a0:	2200      	movs	r2, #0
 80036a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036a6:	4807      	ldr	r0, [pc, #28]	@ (80036c4 <LED_init+0x34>)
 80036a8:	f001 fcee 	bl	8005088 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 80036ac:	2201      	movs	r2, #1
 80036ae:	2102      	movs	r1, #2
 80036b0:	4804      	ldr	r0, [pc, #16]	@ (80036c4 <LED_init+0x34>)
 80036b2:	f001 fce9 	bl	8005088 <HAL_GPIO_WritePin>
    LED_put(0);
 80036b6:	2000      	movs	r0, #0
 80036b8:	f000 f806 	bl	80036c8 <LED_put>
}
 80036bc:	bf00      	nop
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40020000 	.word	0x40020000
 80036c4:	40020400 	.word	0x40020400

080036c8 <LED_put>:

/* LED put
 * This function puts an 8 bit value to the LEDs, where left is the LSB
 */
void LED_put(unsigned short led_byte)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	80fb      	strh	r3, [r7, #6]
     unsigned int i;

     for(i=128; i>=1; i>>=1)
 80036d2:	2380      	movs	r3, #128	@ 0x80
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	e01c      	b.n	8003712 <LED_put+0x4a>
     {
       	  HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, (led_byte & i) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80036d8:	88fa      	ldrh	r2, [r7, #6]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4013      	ands	r3, r2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	bf14      	ite	ne
 80036e2:	2301      	movne	r3, #1
 80036e4:	2300      	moveq	r3, #0
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	461a      	mov	r2, r3
 80036ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036ee:	4811      	ldr	r0, [pc, #68]	@ (8003734 <LED_put+0x6c>)
 80036f0:	f001 fcca 	bl	8005088 <HAL_GPIO_WritePin>

          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_SET);
 80036f4:	2201      	movs	r2, #1
 80036f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036fa:	480f      	ldr	r0, [pc, #60]	@ (8003738 <LED_put+0x70>)
 80036fc:	f001 fcc4 	bl	8005088 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 8003700:	2200      	movs	r2, #0
 8003702:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003706:	480c      	ldr	r0, [pc, #48]	@ (8003738 <LED_put+0x70>)
 8003708:	f001 fcbe 	bl	8005088 <HAL_GPIO_WritePin>
     for(i=128; i>=1; i>>=1)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	085b      	lsrs	r3, r3, #1
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1df      	bne.n	80036d8 <LED_put+0x10>
     }

     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 8003718:	2201      	movs	r2, #1
 800371a:	2102      	movs	r1, #2
 800371c:	4806      	ldr	r0, [pc, #24]	@ (8003738 <LED_put+0x70>)
 800371e:	f001 fcb3 	bl	8005088 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_RESET);
 8003722:	2200      	movs	r2, #0
 8003724:	2102      	movs	r1, #2
 8003726:	4804      	ldr	r0, [pc, #16]	@ (8003738 <LED_put+0x70>)
 8003728:	f001 fcae 	bl	8005088 <HAL_GPIO_WritePin>
}
 800372c:	bf00      	nop
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40020000 	.word	0x40020000
 8003738:	40020400 	.word	0x40020400

0800373c <UART_putchar>:
 // done in CUBE

}

void UART_putchar(unsigned char c)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	71fb      	strb	r3, [r7, #7]
	 HAL_UART_Transmit(&huart2, &c, 1, 100);
 8003746:	1df9      	adds	r1, r7, #7
 8003748:	2364      	movs	r3, #100	@ 0x64
 800374a:	2201      	movs	r2, #1
 800374c:	4803      	ldr	r0, [pc, #12]	@ (800375c <UART_putchar+0x20>)
 800374e:	f006 fbe7 	bl	8009f20 <HAL_UART_Transmit>
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20002a8c 	.word	0x20002a8c

08003760 <UART_puts>:

void UART_puts(const char *s)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	volatile unsigned int i;

	for (i=0; s[i]; i++)
 8003768:	2300      	movs	r3, #0
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	e009      	b.n	8003782 <UART_puts+0x22>
		UART_putchar(s[i]);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	4413      	add	r3, r2
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff ffe0 	bl	800373c <UART_putchar>
	for (i=0; s[i]; i++)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	3301      	adds	r3, #1
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	4413      	add	r3, r2
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1ef      	bne.n	800376e <UART_puts+0xe>
}
 800378e:	bf00      	nop
 8003790:	bf00      	nop
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <UART_putint>:
    return rc;
}

// Stuurt meegegeven getal uit op de UART
void UART_putint(unsigned int num)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
    UART_putnum(num, 10);
 80037a0:	210a      	movs	r1, #10
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f804 	bl	80037b0 <UART_putnum>
}
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <UART_putnum>:

// Stuurt meegegeven getal uit op de UART in het aangegeven getallenstelsel
void UART_putnum(unsigned int num, unsigned char deel)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b088      	sub	sp, #32
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	70fb      	strb	r3, [r7, #3]
    static unsigned char chars[16] = "0123456789ABCDEF";
    unsigned int rest;
    signed char c[16];
    signed int i=15;
 80037bc:	230f      	movs	r3, #15
 80037be:	61fb      	str	r3, [r7, #28]

    // Zet de integer om naar een string
    if(num==0)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d129      	bne.n	800381a <UART_putnum+0x6a>
    {
        c[i]='0';
 80037c6:	f107 0208 	add.w	r2, r7, #8
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	4413      	add	r3, r2
 80037ce:	2230      	movs	r2, #48	@ 0x30
 80037d0:	701a      	strb	r2, [r3, #0]
        i--;
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	61fb      	str	r3, [r7, #28]
 80037d8:	e030      	b.n	800383c <UART_putnum+0x8c>
    }
    else
    {
        while(num>0)
        {
            rest=num%deel;
 80037da:	78fa      	ldrb	r2, [r7, #3]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	fbb3 f1f2 	udiv	r1, r3, r2
 80037e2:	fb01 f202 	mul.w	r2, r1, r2
 80037e6:	1a9b      	subs	r3, r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
            num/=deel;
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f2:	607b      	str	r3, [r7, #4]
            c[i]=chars[rest];
 80037f4:	4a15      	ldr	r2, [pc, #84]	@ (800384c <UART_putnum+0x9c>)
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	4413      	add	r3, r2
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	b259      	sxtb	r1, r3
 80037fe:	f107 0208 	add.w	r2, r7, #8
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	4413      	add	r3, r2
 8003806:	460a      	mov	r2, r1
 8003808:	701a      	strb	r2, [r3, #0]
            i--;
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3b01      	subs	r3, #1
 800380e:	61fb      	str	r3, [r7, #28]

            if(i==0) // it ends here
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <UART_putnum+0x6a>
                num=0;
 8003816:	2300      	movs	r3, #0
 8003818:	607b      	str	r3, [r7, #4]
        while(num>0)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1dc      	bne.n	80037da <UART_putnum+0x2a>
        }
    }

    // Stuur de string uit
    while(i<15)
 8003820:	e00c      	b.n	800383c <UART_putnum+0x8c>
    {
        i++;
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	3301      	adds	r3, #1
 8003826:	61fb      	str	r3, [r7, #28]
        UART_putchar(c[i]);
 8003828:	f107 0208 	add.w	r2, r7, #8
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	4413      	add	r3, r2
 8003830:	f993 3000 	ldrsb.w	r3, [r3]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff ff80 	bl	800373c <UART_putchar>
    while(i<15)
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	2b0e      	cmp	r3, #14
 8003840:	ddef      	ble.n	8003822 <UART_putnum+0x72>
    }
}
 8003842:	bf00      	nop
 8003844:	bf00      	nop
 8003846:	3720      	adds	r7, #32
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	200001f4 	.word	0x200001f4

08003850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003854:	f001 f88a 	bl	800496c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003858:	f000 f836 	bl	80038c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800385c:	f000 fa84 	bl	8003d68 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003860:	f000 f89c 	bl	800399c <MX_I2C1_Init>
  MX_I2S3_Init();
 8003864:	f000 f8c8 	bl	80039f8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8003868:	f000 f8f6 	bl	8003a58 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800386c:	f000 fa52 	bl	8003d14 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8003870:	f000 fa26 	bl	8003cc0 <MX_UART4_Init>
  MX_TIM12_Init();
 8003874:	f000 f9ea 	bl	8003c4c <MX_TIM12_Init>
  MX_TIM11_Init();
 8003878:	f000 f9c4 	bl	8003c04 <MX_TIM11_Init>
  MX_TIM8_Init();
 800387c:	f000 f922 	bl	8003ac4 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  LCD_init();
 8003880:	f7ff fd4e 	bl	8003320 <LCD_init>
  KEYS_init();
 8003884:	f7ff fc32 	bl	80030ec <KEYS_init>
  KEYS_initISR(1); // set all lines high once
 8003888:	2001      	movs	r0, #1
 800388a:	f7ff fc69 	bl	8003160 <KEYS_initISR>
  LED_init();
 800388e:	f7ff feff 	bl	8003690 <LED_init>

  DisplayVersion();
 8003892:	f7fe fc39 	bl	8002108 <DisplayVersion>
  osDelay(500); // time to read version
 8003896:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800389a:	f00b f8ed 	bl	800ea78 <osDelay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800389e:	f00a ffd1 	bl	800e844 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80038a2:	4a06      	ldr	r2, [pc, #24]	@ (80038bc <main+0x6c>)
 80038a4:	2100      	movs	r1, #0
 80038a6:	4806      	ldr	r0, [pc, #24]	@ (80038c0 <main+0x70>)
 80038a8:	f00b f854 	bl	800e954 <osThreadNew>
 80038ac:	4603      	mov	r3, r0
 80038ae:	4a05      	ldr	r2, [pc, #20]	@ (80038c4 <main+0x74>)
 80038b0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80038b2:	f00b f813 	bl	800e8dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80038b6:	bf00      	nop
 80038b8:	e7fd      	b.n	80038b6 <main+0x66>
 80038ba:	bf00      	nop
 80038bc:	08019b2c 	.word	0x08019b2c
 80038c0:	08004045 	.word	0x08004045
 80038c4:	20002ad4 	.word	0x20002ad4

080038c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b094      	sub	sp, #80	@ 0x50
 80038cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038ce:	f107 0320 	add.w	r3, r7, #32
 80038d2:	2230      	movs	r2, #48	@ 0x30
 80038d4:	2100      	movs	r1, #0
 80038d6:	4618      	mov	r0, r3
 80038d8:	f011 fa1d 	bl	8014d16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038dc:	f107 030c 	add.w	r3, r7, #12
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80038ec:	2300      	movs	r3, #0
 80038ee:	60bb      	str	r3, [r7, #8]
 80038f0:	4b28      	ldr	r3, [pc, #160]	@ (8003994 <SystemClock_Config+0xcc>)
 80038f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f4:	4a27      	ldr	r2, [pc, #156]	@ (8003994 <SystemClock_Config+0xcc>)
 80038f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80038fc:	4b25      	ldr	r3, [pc, #148]	@ (8003994 <SystemClock_Config+0xcc>)
 80038fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003908:	2300      	movs	r3, #0
 800390a:	607b      	str	r3, [r7, #4]
 800390c:	4b22      	ldr	r3, [pc, #136]	@ (8003998 <SystemClock_Config+0xd0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a21      	ldr	r2, [pc, #132]	@ (8003998 <SystemClock_Config+0xd0>)
 8003912:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	4b1f      	ldr	r3, [pc, #124]	@ (8003998 <SystemClock_Config+0xd0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003920:	607b      	str	r3, [r7, #4]
 8003922:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003924:	2301      	movs	r3, #1
 8003926:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003928:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800392c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800392e:	2302      	movs	r3, #2
 8003930:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003932:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003936:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003938:	2308      	movs	r3, #8
 800393a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800393c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003940:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003942:	2302      	movs	r3, #2
 8003944:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003946:	2307      	movs	r3, #7
 8003948:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800394a:	f107 0320 	add.w	r3, r7, #32
 800394e:	4618      	mov	r0, r3
 8003950:	f004 faf0 	bl	8007f34 <HAL_RCC_OscConfig>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800395a:	f000 fbab 	bl	80040b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800395e:	230f      	movs	r3, #15
 8003960:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003962:	2302      	movs	r3, #2
 8003964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800396a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800396e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003970:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003974:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003976:	f107 030c 	add.w	r3, r7, #12
 800397a:	2105      	movs	r1, #5
 800397c:	4618      	mov	r0, r3
 800397e:	f004 fd51 	bl	8008424 <HAL_RCC_ClockConfig>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003988:	f000 fb94 	bl	80040b4 <Error_Handler>
  }
}
 800398c:	bf00      	nop
 800398e:	3750      	adds	r7, #80	@ 0x50
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40023800 	.word	0x40023800
 8003998:	40007000 	.word	0x40007000

0800399c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80039a0:	4b12      	ldr	r3, [pc, #72]	@ (80039ec <MX_I2C1_Init+0x50>)
 80039a2:	4a13      	ldr	r2, [pc, #76]	@ (80039f0 <MX_I2C1_Init+0x54>)
 80039a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80039a6:	4b11      	ldr	r3, [pc, #68]	@ (80039ec <MX_I2C1_Init+0x50>)
 80039a8:	4a12      	ldr	r2, [pc, #72]	@ (80039f4 <MX_I2C1_Init+0x58>)
 80039aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039ac:	4b0f      	ldr	r3, [pc, #60]	@ (80039ec <MX_I2C1_Init+0x50>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80039b2:	4b0e      	ldr	r3, [pc, #56]	@ (80039ec <MX_I2C1_Init+0x50>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039b8:	4b0c      	ldr	r3, [pc, #48]	@ (80039ec <MX_I2C1_Init+0x50>)
 80039ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80039be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039c0:	4b0a      	ldr	r3, [pc, #40]	@ (80039ec <MX_I2C1_Init+0x50>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80039c6:	4b09      	ldr	r3, [pc, #36]	@ (80039ec <MX_I2C1_Init+0x50>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039cc:	4b07      	ldr	r3, [pc, #28]	@ (80039ec <MX_I2C1_Init+0x50>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039d2:	4b06      	ldr	r3, [pc, #24]	@ (80039ec <MX_I2C1_Init+0x50>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80039d8:	4804      	ldr	r0, [pc, #16]	@ (80039ec <MX_I2C1_Init+0x50>)
 80039da:	f003 fcc7 	bl	800736c <HAL_I2C_Init>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80039e4:	f000 fb66 	bl	80040b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80039e8:	bf00      	nop
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20002878 	.word	0x20002878
 80039f0:	40005400 	.word	0x40005400
 80039f4:	000186a0 	.word	0x000186a0

080039f8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80039fc:	4b13      	ldr	r3, [pc, #76]	@ (8003a4c <MX_I2S3_Init+0x54>)
 80039fe:	4a14      	ldr	r2, [pc, #80]	@ (8003a50 <MX_I2S3_Init+0x58>)
 8003a00:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8003a02:	4b12      	ldr	r3, [pc, #72]	@ (8003a4c <MX_I2S3_Init+0x54>)
 8003a04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a08:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8003a0a:	4b10      	ldr	r3, [pc, #64]	@ (8003a4c <MX_I2S3_Init+0x54>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8003a10:	4b0e      	ldr	r3, [pc, #56]	@ (8003a4c <MX_I2S3_Init+0x54>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8003a16:	4b0d      	ldr	r3, [pc, #52]	@ (8003a4c <MX_I2S3_Init+0x54>)
 8003a18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a1c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a4c <MX_I2S3_Init+0x54>)
 8003a20:	4a0c      	ldr	r2, [pc, #48]	@ (8003a54 <MX_I2S3_Init+0x5c>)
 8003a22:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8003a24:	4b09      	ldr	r3, [pc, #36]	@ (8003a4c <MX_I2S3_Init+0x54>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8003a2a:	4b08      	ldr	r3, [pc, #32]	@ (8003a4c <MX_I2S3_Init+0x54>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8003a30:	4b06      	ldr	r3, [pc, #24]	@ (8003a4c <MX_I2S3_Init+0x54>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8003a36:	4805      	ldr	r0, [pc, #20]	@ (8003a4c <MX_I2S3_Init+0x54>)
 8003a38:	f003 fddc 	bl	80075f4 <HAL_I2S_Init>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8003a42:	f000 fb37 	bl	80040b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	200028cc 	.word	0x200028cc
 8003a50:	40003c00 	.word	0x40003c00
 8003a54:	00017700 	.word	0x00017700

08003a58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003a5c:	4b17      	ldr	r3, [pc, #92]	@ (8003abc <MX_SPI1_Init+0x64>)
 8003a5e:	4a18      	ldr	r2, [pc, #96]	@ (8003ac0 <MX_SPI1_Init+0x68>)
 8003a60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a62:	4b16      	ldr	r3, [pc, #88]	@ (8003abc <MX_SPI1_Init+0x64>)
 8003a64:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a6a:	4b14      	ldr	r3, [pc, #80]	@ (8003abc <MX_SPI1_Init+0x64>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a70:	4b12      	ldr	r3, [pc, #72]	@ (8003abc <MX_SPI1_Init+0x64>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a76:	4b11      	ldr	r3, [pc, #68]	@ (8003abc <MX_SPI1_Init+0x64>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003abc <MX_SPI1_Init+0x64>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a82:	4b0e      	ldr	r3, [pc, #56]	@ (8003abc <MX_SPI1_Init+0x64>)
 8003a84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003abc <MX_SPI1_Init+0x64>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a90:	4b0a      	ldr	r3, [pc, #40]	@ (8003abc <MX_SPI1_Init+0x64>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a96:	4b09      	ldr	r3, [pc, #36]	@ (8003abc <MX_SPI1_Init+0x64>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a9c:	4b07      	ldr	r3, [pc, #28]	@ (8003abc <MX_SPI1_Init+0x64>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003aa2:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <MX_SPI1_Init+0x64>)
 8003aa4:	220a      	movs	r2, #10
 8003aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003aa8:	4804      	ldr	r0, [pc, #16]	@ (8003abc <MX_SPI1_Init+0x64>)
 8003aaa:	f005 f84f 	bl	8008b4c <HAL_SPI_Init>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003ab4:	f000 fafe 	bl	80040b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003ab8:	bf00      	nop
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	20002914 	.word	0x20002914
 8003ac0:	40013000 	.word	0x40013000

08003ac4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b096      	sub	sp, #88	@ 0x58
 8003ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003aca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	605a      	str	r2, [r3, #4]
 8003ad4:	609a      	str	r2, [r3, #8]
 8003ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ad8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ae2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	609a      	str	r2, [r3, #8]
 8003aee:	60da      	str	r2, [r3, #12]
 8003af0:	611a      	str	r2, [r3, #16]
 8003af2:	615a      	str	r2, [r3, #20]
 8003af4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003af6:	1d3b      	adds	r3, r7, #4
 8003af8:	2220      	movs	r2, #32
 8003afa:	2100      	movs	r1, #0
 8003afc:	4618      	mov	r0, r3
 8003afe:	f011 f90a 	bl	8014d16 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003b02:	4b3e      	ldr	r3, [pc, #248]	@ (8003bfc <MX_TIM8_Init+0x138>)
 8003b04:	4a3e      	ldr	r2, [pc, #248]	@ (8003c00 <MX_TIM8_Init+0x13c>)
 8003b06:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 8003b08:	4b3c      	ldr	r3, [pc, #240]	@ (8003bfc <MX_TIM8_Init+0x138>)
 8003b0a:	22a7      	movs	r2, #167	@ 0xa7
 8003b0c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b0e:	4b3b      	ldr	r3, [pc, #236]	@ (8003bfc <MX_TIM8_Init+0x138>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 416;
 8003b14:	4b39      	ldr	r3, [pc, #228]	@ (8003bfc <MX_TIM8_Init+0x138>)
 8003b16:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8003b1a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b1c:	4b37      	ldr	r3, [pc, #220]	@ (8003bfc <MX_TIM8_Init+0x138>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003b22:	4b36      	ldr	r3, [pc, #216]	@ (8003bfc <MX_TIM8_Init+0x138>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b28:	4b34      	ldr	r3, [pc, #208]	@ (8003bfc <MX_TIM8_Init+0x138>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003b2e:	4833      	ldr	r0, [pc, #204]	@ (8003bfc <MX_TIM8_Init+0x138>)
 8003b30:	f005 f895 	bl	8008c5e <HAL_TIM_Base_Init>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8003b3a:	f000 fabb 	bl	80040b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b42:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003b44:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003b48:	4619      	mov	r1, r3
 8003b4a:	482c      	ldr	r0, [pc, #176]	@ (8003bfc <MX_TIM8_Init+0x138>)
 8003b4c:	f005 fcaa 	bl	80094a4 <HAL_TIM_ConfigClockSource>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8003b56:	f000 faad 	bl	80040b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003b5a:	4828      	ldr	r0, [pc, #160]	@ (8003bfc <MX_TIM8_Init+0x138>)
 8003b5c:	f005 f9ce 	bl	8008efc <HAL_TIM_PWM_Init>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8003b66:	f000 faa5 	bl	80040b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003b72:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003b76:	4619      	mov	r1, r3
 8003b78:	4820      	ldr	r0, [pc, #128]	@ (8003bfc <MX_TIM8_Init+0x138>)
 8003b7a:	f006 f89f 	bl	8009cbc <HAL_TIMEx_MasterConfigSynchronization>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003b84:	f000 fa96 	bl	80040b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b88:	2360      	movs	r3, #96	@ 0x60
 8003b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b90:	2300      	movs	r3, #0
 8003b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b94:	2300      	movs	r3, #0
 8003b96:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ba8:	2208      	movs	r2, #8
 8003baa:	4619      	mov	r1, r3
 8003bac:	4813      	ldr	r0, [pc, #76]	@ (8003bfc <MX_TIM8_Init+0x138>)
 8003bae:	f005 fbb7 	bl	8009320 <HAL_TIM_PWM_ConfigChannel>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8003bb8:	f000 fa7c 	bl	80040b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003bd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003bd4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003bda:	1d3b      	adds	r3, r7, #4
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4807      	ldr	r0, [pc, #28]	@ (8003bfc <MX_TIM8_Init+0x138>)
 8003be0:	f006 f8e8 	bl	8009db4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8003bea:	f000 fa63 	bl	80040b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003bee:	4803      	ldr	r0, [pc, #12]	@ (8003bfc <MX_TIM8_Init+0x138>)
 8003bf0:	f000 fbfe 	bl	80043f0 <HAL_TIM_MspPostInit>

}
 8003bf4:	bf00      	nop
 8003bf6:	3758      	adds	r7, #88	@ 0x58
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	2000296c 	.word	0x2000296c
 8003c00:	40010400 	.word	0x40010400

08003c04 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003c08:	4b0e      	ldr	r3, [pc, #56]	@ (8003c44 <MX_TIM11_Init+0x40>)
 8003c0a:	4a0f      	ldr	r2, [pc, #60]	@ (8003c48 <MX_TIM11_Init+0x44>)
 8003c0c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 167;
 8003c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c44 <MX_TIM11_Init+0x40>)
 8003c10:	22a7      	movs	r2, #167	@ 0xa7
 8003c12:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c14:	4b0b      	ldr	r3, [pc, #44]	@ (8003c44 <MX_TIM11_Init+0x40>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8003c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c44 <MX_TIM11_Init+0x40>)
 8003c1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c20:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c22:	4b08      	ldr	r3, [pc, #32]	@ (8003c44 <MX_TIM11_Init+0x40>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c28:	4b06      	ldr	r3, [pc, #24]	@ (8003c44 <MX_TIM11_Init+0x40>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003c2e:	4805      	ldr	r0, [pc, #20]	@ (8003c44 <MX_TIM11_Init+0x40>)
 8003c30:	f005 f815 	bl	8008c5e <HAL_TIM_Base_Init>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8003c3a:	f000 fa3b 	bl	80040b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	200029b4 	.word	0x200029b4
 8003c48:	40014800 	.word	0x40014800

08003c4c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c52:	463b      	mov	r3, r7
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	609a      	str	r2, [r3, #8]
 8003c5c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003c5e:	4b16      	ldr	r3, [pc, #88]	@ (8003cb8 <MX_TIM12_Init+0x6c>)
 8003c60:	4a16      	ldr	r2, [pc, #88]	@ (8003cbc <MX_TIM12_Init+0x70>)
 8003c62:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8003c64:	4b14      	ldr	r3, [pc, #80]	@ (8003cb8 <MX_TIM12_Init+0x6c>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c6a:	4b13      	ldr	r3, [pc, #76]	@ (8003cb8 <MX_TIM12_Init+0x6c>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8003c70:	4b11      	ldr	r3, [pc, #68]	@ (8003cb8 <MX_TIM12_Init+0x6c>)
 8003c72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c76:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c78:	4b0f      	ldr	r3, [pc, #60]	@ (8003cb8 <MX_TIM12_Init+0x6c>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8003cb8 <MX_TIM12_Init+0x6c>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003c84:	480c      	ldr	r0, [pc, #48]	@ (8003cb8 <MX_TIM12_Init+0x6c>)
 8003c86:	f004 ffea 	bl	8008c5e <HAL_TIM_Base_Init>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8003c90:	f000 fa10 	bl	80040b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c98:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8003c9a:	463b      	mov	r3, r7
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4806      	ldr	r0, [pc, #24]	@ (8003cb8 <MX_TIM12_Init+0x6c>)
 8003ca0:	f005 fc00 	bl	80094a4 <HAL_TIM_ConfigClockSource>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8003caa:	f000 fa03 	bl	80040b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8003cae:	bf00      	nop
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	200029fc 	.word	0x200029fc
 8003cbc:	40001800 	.word	0x40001800

08003cc0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003cc4:	4b11      	ldr	r3, [pc, #68]	@ (8003d0c <MX_UART4_Init+0x4c>)
 8003cc6:	4a12      	ldr	r2, [pc, #72]	@ (8003d10 <MX_UART4_Init+0x50>)
 8003cc8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003cca:	4b10      	ldr	r3, [pc, #64]	@ (8003d0c <MX_UART4_Init+0x4c>)
 8003ccc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003cd0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8003d0c <MX_UART4_Init+0x4c>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8003d0c <MX_UART4_Init+0x4c>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003cde:	4b0b      	ldr	r3, [pc, #44]	@ (8003d0c <MX_UART4_Init+0x4c>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003ce4:	4b09      	ldr	r3, [pc, #36]	@ (8003d0c <MX_UART4_Init+0x4c>)
 8003ce6:	220c      	movs	r2, #12
 8003ce8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cea:	4b08      	ldr	r3, [pc, #32]	@ (8003d0c <MX_UART4_Init+0x4c>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cf0:	4b06      	ldr	r3, [pc, #24]	@ (8003d0c <MX_UART4_Init+0x4c>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003cf6:	4805      	ldr	r0, [pc, #20]	@ (8003d0c <MX_UART4_Init+0x4c>)
 8003cf8:	f006 f8c2 	bl	8009e80 <HAL_UART_Init>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003d02:	f000 f9d7 	bl	80040b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003d06:	bf00      	nop
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20002a44 	.word	0x20002a44
 8003d10:	40004c00 	.word	0x40004c00

08003d14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d18:	4b11      	ldr	r3, [pc, #68]	@ (8003d60 <MX_USART2_UART_Init+0x4c>)
 8003d1a:	4a12      	ldr	r2, [pc, #72]	@ (8003d64 <MX_USART2_UART_Init+0x50>)
 8003d1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003d1e:	4b10      	ldr	r3, [pc, #64]	@ (8003d60 <MX_USART2_UART_Init+0x4c>)
 8003d20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003d24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d26:	4b0e      	ldr	r3, [pc, #56]	@ (8003d60 <MX_USART2_UART_Init+0x4c>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d60 <MX_USART2_UART_Init+0x4c>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d32:	4b0b      	ldr	r3, [pc, #44]	@ (8003d60 <MX_USART2_UART_Init+0x4c>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d38:	4b09      	ldr	r3, [pc, #36]	@ (8003d60 <MX_USART2_UART_Init+0x4c>)
 8003d3a:	220c      	movs	r2, #12
 8003d3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d3e:	4b08      	ldr	r3, [pc, #32]	@ (8003d60 <MX_USART2_UART_Init+0x4c>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d44:	4b06      	ldr	r3, [pc, #24]	@ (8003d60 <MX_USART2_UART_Init+0x4c>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d4a:	4805      	ldr	r0, [pc, #20]	@ (8003d60 <MX_USART2_UART_Init+0x4c>)
 8003d4c:	f006 f898 	bl	8009e80 <HAL_UART_Init>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003d56:	f000 f9ad 	bl	80040b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d5a:	bf00      	nop
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20002a8c 	.word	0x20002a8c
 8003d64:	40004400 	.word	0x40004400

08003d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08c      	sub	sp, #48	@ 0x30
 8003d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d6e:	f107 031c 	add.w	r3, r7, #28
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	605a      	str	r2, [r3, #4]
 8003d78:	609a      	str	r2, [r3, #8]
 8003d7a:	60da      	str	r2, [r3, #12]
 8003d7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	4b8c      	ldr	r3, [pc, #560]	@ (8003fb4 <MX_GPIO_Init+0x24c>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d86:	4a8b      	ldr	r2, [pc, #556]	@ (8003fb4 <MX_GPIO_Init+0x24c>)
 8003d88:	f043 0310 	orr.w	r3, r3, #16
 8003d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d8e:	4b89      	ldr	r3, [pc, #548]	@ (8003fb4 <MX_GPIO_Init+0x24c>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	61bb      	str	r3, [r7, #24]
 8003d98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	4b85      	ldr	r3, [pc, #532]	@ (8003fb4 <MX_GPIO_Init+0x24c>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da2:	4a84      	ldr	r2, [pc, #528]	@ (8003fb4 <MX_GPIO_Init+0x24c>)
 8003da4:	f043 0304 	orr.w	r3, r3, #4
 8003da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003daa:	4b82      	ldr	r3, [pc, #520]	@ (8003fb4 <MX_GPIO_Init+0x24c>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003db6:	2300      	movs	r3, #0
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	4b7e      	ldr	r3, [pc, #504]	@ (8003fb4 <MX_GPIO_Init+0x24c>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbe:	4a7d      	ldr	r2, [pc, #500]	@ (8003fb4 <MX_GPIO_Init+0x24c>)
 8003dc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dc6:	4b7b      	ldr	r3, [pc, #492]	@ (8003fb4 <MX_GPIO_Init+0x24c>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	4b77      	ldr	r3, [pc, #476]	@ (8003fb4 <MX_GPIO_Init+0x24c>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dda:	4a76      	ldr	r2, [pc, #472]	@ (8003fb4 <MX_GPIO_Init+0x24c>)
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003de2:	4b74      	ldr	r3, [pc, #464]	@ (8003fb4 <MX_GPIO_Init+0x24c>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dee:	2300      	movs	r3, #0
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	4b70      	ldr	r3, [pc, #448]	@ (8003fb4 <MX_GPIO_Init+0x24c>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df6:	4a6f      	ldr	r2, [pc, #444]	@ (8003fb4 <MX_GPIO_Init+0x24c>)
 8003df8:	f043 0302 	orr.w	r3, r3, #2
 8003dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dfe:	4b6d      	ldr	r3, [pc, #436]	@ (8003fb4 <MX_GPIO_Init+0x24c>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	607b      	str	r3, [r7, #4]
 8003e0e:	4b69      	ldr	r3, [pc, #420]	@ (8003fb4 <MX_GPIO_Init+0x24c>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e12:	4a68      	ldr	r2, [pc, #416]	@ (8003fb4 <MX_GPIO_Init+0x24c>)
 8003e14:	f043 0308 	orr.w	r3, r3, #8
 8003e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e1a:	4b66      	ldr	r3, [pc, #408]	@ (8003fb4 <MX_GPIO_Init+0x24c>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	607b      	str	r3, [r7, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|Ard_Bit1_Pin|Ard_Bit2_Pin|Ard_Bit3_Pin
 8003e26:	2200      	movs	r2, #0
 8003e28:	f44f 61f1 	mov.w	r1, #1928	@ 0x788
 8003e2c:	4862      	ldr	r0, [pc, #392]	@ (8003fb8 <MX_GPIO_Init+0x250>)
 8003e2e:	f001 f92b 	bl	8005088 <HAL_GPIO_WritePin>
                          |Ard_Bit4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003e32:	2201      	movs	r2, #1
 8003e34:	2101      	movs	r1, #1
 8003e36:	4861      	ldr	r0, [pc, #388]	@ (8003fbc <MX_GPIO_Init+0x254>)
 8003e38:	f001 f926 	bl	8005088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RCK_Pin|Trig_Pin|LED_SCK_Pin, GPIO_PIN_RESET);
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f242 1102 	movw	r1, #8450	@ 0x2102
 8003e42:	485f      	ldr	r0, [pc, #380]	@ (8003fc0 <MX_GPIO_Init+0x258>)
 8003e44:	f001 f920 	bl	8005088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8003e4e:	485d      	ldr	r0, [pc, #372]	@ (8003fc4 <MX_GPIO_Init+0x25c>)
 8003e50:	f001 f91a 	bl	8005088 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SER_GPIO_Port, LED_SER_Pin, GPIO_PIN_RESET);
 8003e54:	2200      	movs	r2, #0
 8003e56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e5a:	485b      	ldr	r0, [pc, #364]	@ (8003fc8 <MX_GPIO_Init+0x260>)
 8003e5c:	f001 f914 	bl	8005088 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin Ard_Bit1_Pin Ard_Bit2_Pin Ard_Bit3_Pin
                           Ard_Bit4_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|Ard_Bit1_Pin|Ard_Bit2_Pin|Ard_Bit3_Pin
 8003e60:	f44f 63f1 	mov.w	r3, #1928	@ 0x788
 8003e64:	61fb      	str	r3, [r7, #28]
                          |Ard_Bit4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e66:	2301      	movs	r3, #1
 8003e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e72:	f107 031c 	add.w	r3, r7, #28
 8003e76:	4619      	mov	r1, r3
 8003e78:	484f      	ldr	r0, [pc, #316]	@ (8003fb8 <MX_GPIO_Init+0x250>)
 8003e7a:	f000 ff51 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e82:	2301      	movs	r3, #1
 8003e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003e8e:	f107 031c 	add.w	r3, r7, #28
 8003e92:	4619      	mov	r1, r3
 8003e94:	4849      	ldr	r0, [pc, #292]	@ (8003fbc <MX_GPIO_Init+0x254>)
 8003e96:	f000 ff43 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003e9a:	2308      	movs	r3, #8
 8003e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003eaa:	2305      	movs	r3, #5
 8003eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003eae:	f107 031c 	add.w	r3, r7, #28
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4841      	ldr	r0, [pc, #260]	@ (8003fbc <MX_GPIO_Init+0x254>)
 8003eb6:	f000 ff33 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : Key_int_Pin */
  GPIO_InitStruct.Pin = Key_int_Pin;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ebe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Key_int_GPIO_Port, &GPIO_InitStruct);
 8003ec8:	f107 031c 	add.w	r3, r7, #28
 8003ecc:	4619      	mov	r1, r3
 8003ece:	483c      	ldr	r0, [pc, #240]	@ (8003fc0 <MX_GPIO_Init+0x258>)
 8003ed0:	f000 ff26 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RCK_Pin Trig_Pin LED_SCK_Pin */
  GPIO_InitStruct.Pin = LED_RCK_Pin|Trig_Pin|LED_SCK_Pin;
 8003ed4:	f242 1302 	movw	r3, #8450	@ 0x2102
 8003ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eda:	2301      	movs	r3, #1
 8003edc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ee6:	f107 031c 	add.w	r3, r7, #28
 8003eea:	4619      	mov	r1, r3
 8003eec:	4834      	ldr	r0, [pc, #208]	@ (8003fc0 <MX_GPIO_Init+0x258>)
 8003eee:	f000 ff17 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin Echo_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin|Echo_Pin;
 8003ef2:	f244 0304 	movw	r3, #16388	@ 0x4004
 8003ef6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003efc:	2300      	movs	r3, #0
 8003efe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f00:	f107 031c 	add.w	r3, r7, #28
 8003f04:	4619      	mov	r1, r3
 8003f06:	482e      	ldr	r0, [pc, #184]	@ (8003fc0 <MX_GPIO_Init+0x258>)
 8003f08:	f000 ff0a 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003f0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f12:	2302      	movs	r3, #2
 8003f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003f1e:	2305      	movs	r3, #5
 8003f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003f22:	f107 031c 	add.w	r3, r7, #28
 8003f26:	4619      	mov	r1, r3
 8003f28:	4825      	ldr	r0, [pc, #148]	@ (8003fc0 <MX_GPIO_Init+0x258>)
 8003f2a:	f000 fef9 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003f2e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8003f32:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f34:	2301      	movs	r3, #1
 8003f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f40:	f107 031c 	add.w	r3, r7, #28
 8003f44:	4619      	mov	r1, r3
 8003f46:	481f      	ldr	r0, [pc, #124]	@ (8003fc4 <MX_GPIO_Init+0x25c>)
 8003f48:	f000 feea 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_SER_Pin */
  GPIO_InitStruct.Pin = LED_SER_Pin;
 8003f4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f52:	2301      	movs	r3, #1
 8003f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f56:	2300      	movs	r3, #0
 8003f58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_SER_GPIO_Port, &GPIO_InitStruct);
 8003f5e:	f107 031c 	add.w	r3, r7, #28
 8003f62:	4619      	mov	r1, r3
 8003f64:	4818      	ldr	r0, [pc, #96]	@ (8003fc8 <MX_GPIO_Init+0x260>)
 8003f66:	f000 fedb 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003f6a:	2320      	movs	r3, #32
 8003f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003f76:	f107 031c 	add.w	r3, r7, #28
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4811      	ldr	r0, [pc, #68]	@ (8003fc4 <MX_GPIO_Init+0x25c>)
 8003f7e:	f000 fecf 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003f82:	2302      	movs	r3, #2
 8003f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003f86:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003f90:	f107 031c 	add.w	r3, r7, #28
 8003f94:	4619      	mov	r1, r3
 8003f96:	4808      	ldr	r0, [pc, #32]	@ (8003fb8 <MX_GPIO_Init+0x250>)
 8003f98:	f000 fec2 	bl	8004d20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	2105      	movs	r1, #5
 8003fa0:	2006      	movs	r0, #6
 8003fa2:	f000 fe01 	bl	8004ba8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003fa6:	2006      	movs	r0, #6
 8003fa8:	f000 fe1a 	bl	8004be0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003fac:	bf00      	nop
 8003fae:	3730      	adds	r7, #48	@ 0x30
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	40020800 	.word	0x40020800
 8003fc0:	40020400 	.word	0x40020400
 8003fc4:	40020c00 	.word	0x40020c00
 8003fc8:	40020000 	.word	0x40020000

08003fcc <HAL_UART_RxCpltCallback>:
  * <p>Demonstreert: xQueueSendFromISR(); portYIELD_FROM_ISR();</p>
  * @param huart
  * @return void.
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
	// receive terminal user commands
	if (huart->Instance == USART2)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a12      	ldr	r2, [pc, #72]	@ (8004024 <HAL_UART_RxCpltCallback+0x58>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_UART_RxCpltCallback+0x2c>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart2, &uart2_char, 1);
 8003fde:	2201      	movs	r2, #1
 8003fe0:	4911      	ldr	r1, [pc, #68]	@ (8004028 <HAL_UART_RxCpltCallback+0x5c>)
 8003fe2:	4812      	ldr	r0, [pc, #72]	@ (800402c <HAL_UART_RxCpltCallback+0x60>)
 8003fe4:	f006 f827 	bl	800a036 <HAL_UART_Receive_IT>

		/// Zet de byte op de UART_queue
		xQueueSendFromISR(hUART_Queue, &uart2_char, NULL);
 8003fe8:	4b11      	ldr	r3, [pc, #68]	@ (8004030 <HAL_UART_RxCpltCallback+0x64>)
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	2300      	movs	r3, #0
 8003fee:	2200      	movs	r2, #0
 8003ff0:	490d      	ldr	r1, [pc, #52]	@ (8004028 <HAL_UART_RxCpltCallback+0x5c>)
 8003ff2:	f00b fbab 	bl	800f74c <xQueueGenericSendFromISR>

		/// Zet de byte op de GPS_queue
		xQueueSendFromISR(hGPS_Queue, &uart4_char, NULL);
	}

}
 8003ff6:	e010      	b.n	800401a <HAL_UART_RxCpltCallback+0x4e>
	else if (huart->Instance == UART4)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8004034 <HAL_UART_RxCpltCallback+0x68>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d10b      	bne.n	800401a <HAL_UART_RxCpltCallback+0x4e>
		HAL_UART_Receive_IT(&huart4, &uart4_char, 1);
 8004002:	2201      	movs	r2, #1
 8004004:	490c      	ldr	r1, [pc, #48]	@ (8004038 <HAL_UART_RxCpltCallback+0x6c>)
 8004006:	480d      	ldr	r0, [pc, #52]	@ (800403c <HAL_UART_RxCpltCallback+0x70>)
 8004008:	f006 f815 	bl	800a036 <HAL_UART_Receive_IT>
		xQueueSendFromISR(hGPS_Queue, &uart4_char, NULL);
 800400c:	4b0c      	ldr	r3, [pc, #48]	@ (8004040 <HAL_UART_RxCpltCallback+0x74>)
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	2300      	movs	r3, #0
 8004012:	2200      	movs	r2, #0
 8004014:	4908      	ldr	r1, [pc, #32]	@ (8004038 <HAL_UART_RxCpltCallback+0x6c>)
 8004016:	f00b fb99 	bl	800f74c <xQueueGenericSendFromISR>
}
 800401a:	bf00      	nop
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40004400 	.word	0x40004400
 8004028:	20002ad8 	.word	0x20002ad8
 800402c:	20002a8c 	.word	0x20002a8c
 8004030:	2000042c 	.word	0x2000042c
 8004034:	40004c00 	.word	0x40004c00
 8004038:	20002ad9 	.word	0x20002ad9
 800403c:	20002a44 	.word	0x20002a44
 8004040:	20000430 	.word	0x20000430

08004044 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800404c:	f00e feac 	bl	8012da8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  //unsigned char byte1, byte2;

  CreateHandles();
 8004050:	f7fe f8e0 	bl	8002214 <CreateHandles>
  CreateTasks();
 8004054:	f7fe f9f0 	bl	8002438 <CreateTasks>

  // start the interrupt handlers after all handles are created
  HAL_UART_Receive_IT(&huart2, &uart2_char, 1); //start the UART2 interrupt engine for reading
 8004058:	2201      	movs	r2, #1
 800405a:	4909      	ldr	r1, [pc, #36]	@ (8004080 <StartDefaultTask+0x3c>)
 800405c:	4809      	ldr	r0, [pc, #36]	@ (8004084 <StartDefaultTask+0x40>)
 800405e:	f005 ffea 	bl	800a036 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &uart2_char, 1); //start the UART4 interrupt engine GPS
 8004062:	2201      	movs	r2, #1
 8004064:	4906      	ldr	r1, [pc, #24]	@ (8004080 <StartDefaultTask+0x3c>)
 8004066:	4808      	ldr	r0, [pc, #32]	@ (8004088 <StartDefaultTask+0x44>)
 8004068:	f005 ffe5 	bl	800a036 <HAL_UART_Receive_IT>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800406c:	2001      	movs	r0, #1
 800406e:	f00a fd03 	bl	800ea78 <osDelay>
    vTaskDelete(defaultTaskHandle); // remove this default task
 8004072:	4b06      	ldr	r3, [pc, #24]	@ (800408c <StartDefaultTask+0x48>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f00c f9c4 	bl	8010404 <vTaskDelete>
    osDelay(1);
 800407c:	bf00      	nop
 800407e:	e7f5      	b.n	800406c <StartDefaultTask+0x28>
 8004080:	20002ad8 	.word	0x20002ad8
 8004084:	20002a8c 	.word	0x20002a8c
 8004088:	20002a44 	.word	0x20002a44
 800408c:	20002ad4 	.word	0x20002ad4

08004090 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a04      	ldr	r2, [pc, #16]	@ (80040b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d101      	bne.n	80040a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80040a2:	f000 fc85 	bl	80049b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40010000 	.word	0x40010000

080040b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80040b8:	b672      	cpsid	i
}
 80040ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80040bc:	bf00      	nop
 80040be:	e7fd      	b.n	80040bc <Error_Handler+0x8>

080040c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	607b      	str	r3, [r7, #4]
 80040ca:	4b12      	ldr	r3, [pc, #72]	@ (8004114 <HAL_MspInit+0x54>)
 80040cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ce:	4a11      	ldr	r2, [pc, #68]	@ (8004114 <HAL_MspInit+0x54>)
 80040d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80040d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004114 <HAL_MspInit+0x54>)
 80040d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040de:	607b      	str	r3, [r7, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040e2:	2300      	movs	r3, #0
 80040e4:	603b      	str	r3, [r7, #0]
 80040e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004114 <HAL_MspInit+0x54>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004114 <HAL_MspInit+0x54>)
 80040ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80040f2:	4b08      	ldr	r3, [pc, #32]	@ (8004114 <HAL_MspInit+0x54>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80040fe:	2200      	movs	r2, #0
 8004100:	210f      	movs	r1, #15
 8004102:	f06f 0001 	mvn.w	r0, #1
 8004106:	f000 fd4f 	bl	8004ba8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40023800 	.word	0x40023800

08004118 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08a      	sub	sp, #40	@ 0x28
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004120:	f107 0314 	add.w	r3, r7, #20
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	605a      	str	r2, [r3, #4]
 800412a:	609a      	str	r2, [r3, #8]
 800412c:	60da      	str	r2, [r3, #12]
 800412e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a19      	ldr	r2, [pc, #100]	@ (800419c <HAL_I2C_MspInit+0x84>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d12c      	bne.n	8004194 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800413a:	2300      	movs	r3, #0
 800413c:	613b      	str	r3, [r7, #16]
 800413e:	4b18      	ldr	r3, [pc, #96]	@ (80041a0 <HAL_I2C_MspInit+0x88>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004142:	4a17      	ldr	r2, [pc, #92]	@ (80041a0 <HAL_I2C_MspInit+0x88>)
 8004144:	f043 0302 	orr.w	r3, r3, #2
 8004148:	6313      	str	r3, [r2, #48]	@ 0x30
 800414a:	4b15      	ldr	r3, [pc, #84]	@ (80041a0 <HAL_I2C_MspInit+0x88>)
 800414c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	613b      	str	r3, [r7, #16]
 8004154:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8004156:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800415a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800415c:	2312      	movs	r3, #18
 800415e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004160:	2301      	movs	r3, #1
 8004162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004164:	2300      	movs	r3, #0
 8004166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004168:	2304      	movs	r3, #4
 800416a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800416c:	f107 0314 	add.w	r3, r7, #20
 8004170:	4619      	mov	r1, r3
 8004172:	480c      	ldr	r0, [pc, #48]	@ (80041a4 <HAL_I2C_MspInit+0x8c>)
 8004174:	f000 fdd4 	bl	8004d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004178:	2300      	movs	r3, #0
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	4b08      	ldr	r3, [pc, #32]	@ (80041a0 <HAL_I2C_MspInit+0x88>)
 800417e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004180:	4a07      	ldr	r2, [pc, #28]	@ (80041a0 <HAL_I2C_MspInit+0x88>)
 8004182:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004186:	6413      	str	r3, [r2, #64]	@ 0x40
 8004188:	4b05      	ldr	r3, [pc, #20]	@ (80041a0 <HAL_I2C_MspInit+0x88>)
 800418a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004194:	bf00      	nop
 8004196:	3728      	adds	r7, #40	@ 0x28
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40005400 	.word	0x40005400
 80041a0:	40023800 	.word	0x40023800
 80041a4:	40020400 	.word	0x40020400

080041a8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08e      	sub	sp, #56	@ 0x38
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	605a      	str	r2, [r3, #4]
 80041ba:	609a      	str	r2, [r3, #8]
 80041bc:	60da      	str	r2, [r3, #12]
 80041be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041c0:	f107 0314 	add.w	r3, r7, #20
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	605a      	str	r2, [r3, #4]
 80041ca:	609a      	str	r2, [r3, #8]
 80041cc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a31      	ldr	r2, [pc, #196]	@ (8004298 <HAL_I2S_MspInit+0xf0>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d15a      	bne.n	800428e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80041d8:	2301      	movs	r3, #1
 80041da:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80041dc:	23c0      	movs	r3, #192	@ 0xc0
 80041de:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80041e0:	2302      	movs	r3, #2
 80041e2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041e4:	f107 0314 	add.w	r3, r7, #20
 80041e8:	4618      	mov	r0, r3
 80041ea:	f004 fb6d 	bl	80088c8 <HAL_RCCEx_PeriphCLKConfig>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80041f4:	f7ff ff5e 	bl	80040b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80041f8:	2300      	movs	r3, #0
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	4b27      	ldr	r3, [pc, #156]	@ (800429c <HAL_I2S_MspInit+0xf4>)
 80041fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004200:	4a26      	ldr	r2, [pc, #152]	@ (800429c <HAL_I2S_MspInit+0xf4>)
 8004202:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004206:	6413      	str	r3, [r2, #64]	@ 0x40
 8004208:	4b24      	ldr	r3, [pc, #144]	@ (800429c <HAL_I2S_MspInit+0xf4>)
 800420a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004214:	2300      	movs	r3, #0
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	4b20      	ldr	r3, [pc, #128]	@ (800429c <HAL_I2S_MspInit+0xf4>)
 800421a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421c:	4a1f      	ldr	r2, [pc, #124]	@ (800429c <HAL_I2S_MspInit+0xf4>)
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	6313      	str	r3, [r2, #48]	@ 0x30
 8004224:	4b1d      	ldr	r3, [pc, #116]	@ (800429c <HAL_I2S_MspInit+0xf4>)
 8004226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004230:	2300      	movs	r3, #0
 8004232:	60bb      	str	r3, [r7, #8]
 8004234:	4b19      	ldr	r3, [pc, #100]	@ (800429c <HAL_I2S_MspInit+0xf4>)
 8004236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004238:	4a18      	ldr	r2, [pc, #96]	@ (800429c <HAL_I2S_MspInit+0xf4>)
 800423a:	f043 0304 	orr.w	r3, r3, #4
 800423e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004240:	4b16      	ldr	r3, [pc, #88]	@ (800429c <HAL_I2S_MspInit+0xf4>)
 8004242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	60bb      	str	r3, [r7, #8]
 800424a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800424c:	2310      	movs	r3, #16
 800424e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004250:	2302      	movs	r3, #2
 8004252:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004254:	2300      	movs	r3, #0
 8004256:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004258:	2300      	movs	r3, #0
 800425a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800425c:	2306      	movs	r3, #6
 800425e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8004260:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004264:	4619      	mov	r1, r3
 8004266:	480e      	ldr	r0, [pc, #56]	@ (80042a0 <HAL_I2S_MspInit+0xf8>)
 8004268:	f000 fd5a 	bl	8004d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800426c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8004270:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004272:	2302      	movs	r3, #2
 8004274:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004276:	2300      	movs	r3, #0
 8004278:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800427a:	2300      	movs	r3, #0
 800427c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800427e:	2306      	movs	r3, #6
 8004280:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004282:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004286:	4619      	mov	r1, r3
 8004288:	4806      	ldr	r0, [pc, #24]	@ (80042a4 <HAL_I2S_MspInit+0xfc>)
 800428a:	f000 fd49 	bl	8004d20 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800428e:	bf00      	nop
 8004290:	3738      	adds	r7, #56	@ 0x38
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	40003c00 	.word	0x40003c00
 800429c:	40023800 	.word	0x40023800
 80042a0:	40020000 	.word	0x40020000
 80042a4:	40020800 	.word	0x40020800

080042a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08a      	sub	sp, #40	@ 0x28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b0:	f107 0314 	add.w	r3, r7, #20
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	605a      	str	r2, [r3, #4]
 80042ba:	609a      	str	r2, [r3, #8]
 80042bc:	60da      	str	r2, [r3, #12]
 80042be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a19      	ldr	r2, [pc, #100]	@ (800432c <HAL_SPI_MspInit+0x84>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d12b      	bne.n	8004322 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80042ca:	2300      	movs	r3, #0
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	4b18      	ldr	r3, [pc, #96]	@ (8004330 <HAL_SPI_MspInit+0x88>)
 80042d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d2:	4a17      	ldr	r2, [pc, #92]	@ (8004330 <HAL_SPI_MspInit+0x88>)
 80042d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80042d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80042da:	4b15      	ldr	r3, [pc, #84]	@ (8004330 <HAL_SPI_MspInit+0x88>)
 80042dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042e2:	613b      	str	r3, [r7, #16]
 80042e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042e6:	2300      	movs	r3, #0
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	4b11      	ldr	r3, [pc, #68]	@ (8004330 <HAL_SPI_MspInit+0x88>)
 80042ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ee:	4a10      	ldr	r2, [pc, #64]	@ (8004330 <HAL_SPI_MspInit+0x88>)
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80042f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004330 <HAL_SPI_MspInit+0x88>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8004302:	23e0      	movs	r3, #224	@ 0xe0
 8004304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004306:	2302      	movs	r3, #2
 8004308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430a:	2300      	movs	r3, #0
 800430c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800430e:	2300      	movs	r3, #0
 8004310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004312:	2305      	movs	r3, #5
 8004314:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004316:	f107 0314 	add.w	r3, r7, #20
 800431a:	4619      	mov	r1, r3
 800431c:	4805      	ldr	r0, [pc, #20]	@ (8004334 <HAL_SPI_MspInit+0x8c>)
 800431e:	f000 fcff 	bl	8004d20 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004322:	bf00      	nop
 8004324:	3728      	adds	r7, #40	@ 0x28
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40013000 	.word	0x40013000
 8004330:	40023800 	.word	0x40023800
 8004334:	40020000 	.word	0x40020000

08004338 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a26      	ldr	r2, [pc, #152]	@ (80043e0 <HAL_TIM_Base_MspInit+0xa8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d116      	bne.n	8004378 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800434a:	2300      	movs	r3, #0
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	4b25      	ldr	r3, [pc, #148]	@ (80043e4 <HAL_TIM_Base_MspInit+0xac>)
 8004350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004352:	4a24      	ldr	r2, [pc, #144]	@ (80043e4 <HAL_TIM_Base_MspInit+0xac>)
 8004354:	f043 0302 	orr.w	r3, r3, #2
 8004358:	6453      	str	r3, [r2, #68]	@ 0x44
 800435a:	4b22      	ldr	r3, [pc, #136]	@ (80043e4 <HAL_TIM_Base_MspInit+0xac>)
 800435c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	697b      	ldr	r3, [r7, #20]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8004366:	2200      	movs	r2, #0
 8004368:	2105      	movs	r1, #5
 800436a:	202b      	movs	r0, #43	@ 0x2b
 800436c:	f000 fc1c 	bl	8004ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004370:	202b      	movs	r0, #43	@ 0x2b
 8004372:	f000 fc35 	bl	8004be0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8004376:	e02e      	b.n	80043d6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a1a      	ldr	r2, [pc, #104]	@ (80043e8 <HAL_TIM_Base_MspInit+0xb0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d10e      	bne.n	80043a0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004382:	2300      	movs	r3, #0
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	4b17      	ldr	r3, [pc, #92]	@ (80043e4 <HAL_TIM_Base_MspInit+0xac>)
 8004388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438a:	4a16      	ldr	r2, [pc, #88]	@ (80043e4 <HAL_TIM_Base_MspInit+0xac>)
 800438c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004390:	6453      	str	r3, [r2, #68]	@ 0x44
 8004392:	4b14      	ldr	r3, [pc, #80]	@ (80043e4 <HAL_TIM_Base_MspInit+0xac>)
 8004394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004396:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800439a:	613b      	str	r3, [r7, #16]
 800439c:	693b      	ldr	r3, [r7, #16]
}
 800439e:	e01a      	b.n	80043d6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM12)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a11      	ldr	r2, [pc, #68]	@ (80043ec <HAL_TIM_Base_MspInit+0xb4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d115      	bne.n	80043d6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	4b0d      	ldr	r3, [pc, #52]	@ (80043e4 <HAL_TIM_Base_MspInit+0xac>)
 80043b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b2:	4a0c      	ldr	r2, [pc, #48]	@ (80043e4 <HAL_TIM_Base_MspInit+0xac>)
 80043b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80043ba:	4b0a      	ldr	r3, [pc, #40]	@ (80043e4 <HAL_TIM_Base_MspInit+0xac>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 80043c6:	2200      	movs	r2, #0
 80043c8:	2105      	movs	r1, #5
 80043ca:	202b      	movs	r0, #43	@ 0x2b
 80043cc:	f000 fbec 	bl	8004ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80043d0:	202b      	movs	r0, #43	@ 0x2b
 80043d2:	f000 fc05 	bl	8004be0 <HAL_NVIC_EnableIRQ>
}
 80043d6:	bf00      	nop
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40010400 	.word	0x40010400
 80043e4:	40023800 	.word	0x40023800
 80043e8:	40014800 	.word	0x40014800
 80043ec:	40001800 	.word	0x40001800

080043f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043f8:	f107 030c 	add.w	r3, r7, #12
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	605a      	str	r2, [r3, #4]
 8004402:	609a      	str	r2, [r3, #8]
 8004404:	60da      	str	r2, [r3, #12]
 8004406:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a12      	ldr	r2, [pc, #72]	@ (8004458 <HAL_TIM_MspPostInit+0x68>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d11e      	bne.n	8004450 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004412:	2300      	movs	r3, #0
 8004414:	60bb      	str	r3, [r7, #8]
 8004416:	4b11      	ldr	r3, [pc, #68]	@ (800445c <HAL_TIM_MspPostInit+0x6c>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441a:	4a10      	ldr	r2, [pc, #64]	@ (800445c <HAL_TIM_MspPostInit+0x6c>)
 800441c:	f043 0304 	orr.w	r3, r3, #4
 8004420:	6313      	str	r3, [r2, #48]	@ 0x30
 8004422:	4b0e      	ldr	r3, [pc, #56]	@ (800445c <HAL_TIM_MspPostInit+0x6c>)
 8004424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	60bb      	str	r3, [r7, #8]
 800442c:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 800442e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004432:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004434:	2302      	movs	r3, #2
 8004436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800443c:	2300      	movs	r3, #0
 800443e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004440:	2303      	movs	r3, #3
 8004442:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8004444:	f107 030c 	add.w	r3, r7, #12
 8004448:	4619      	mov	r1, r3
 800444a:	4805      	ldr	r0, [pc, #20]	@ (8004460 <HAL_TIM_MspPostInit+0x70>)
 800444c:	f000 fc68 	bl	8004d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004450:	bf00      	nop
 8004452:	3720      	adds	r7, #32
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40010400 	.word	0x40010400
 800445c:	40023800 	.word	0x40023800
 8004460:	40020800 	.word	0x40020800

08004464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08c      	sub	sp, #48	@ 0x30
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800446c:	f107 031c 	add.w	r3, r7, #28
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	609a      	str	r2, [r3, #8]
 8004478:	60da      	str	r2, [r3, #12]
 800447a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a3a      	ldr	r2, [pc, #232]	@ (800456c <HAL_UART_MspInit+0x108>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d134      	bne.n	80044f0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004486:	2300      	movs	r3, #0
 8004488:	61bb      	str	r3, [r7, #24]
 800448a:	4b39      	ldr	r3, [pc, #228]	@ (8004570 <HAL_UART_MspInit+0x10c>)
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	4a38      	ldr	r2, [pc, #224]	@ (8004570 <HAL_UART_MspInit+0x10c>)
 8004490:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004494:	6413      	str	r3, [r2, #64]	@ 0x40
 8004496:	4b36      	ldr	r3, [pc, #216]	@ (8004570 <HAL_UART_MspInit+0x10c>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800449e:	61bb      	str	r3, [r7, #24]
 80044a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	4b32      	ldr	r3, [pc, #200]	@ (8004570 <HAL_UART_MspInit+0x10c>)
 80044a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044aa:	4a31      	ldr	r2, [pc, #196]	@ (8004570 <HAL_UART_MspInit+0x10c>)
 80044ac:	f043 0301 	orr.w	r3, r3, #1
 80044b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80044b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004570 <HAL_UART_MspInit+0x10c>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80044be:	2303      	movs	r3, #3
 80044c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c2:	2302      	movs	r3, #2
 80044c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ca:	2303      	movs	r3, #3
 80044cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80044ce:	2308      	movs	r3, #8
 80044d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044d2:	f107 031c 	add.w	r3, r7, #28
 80044d6:	4619      	mov	r1, r3
 80044d8:	4826      	ldr	r0, [pc, #152]	@ (8004574 <HAL_UART_MspInit+0x110>)
 80044da:	f000 fc21 	bl	8004d20 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80044de:	2200      	movs	r2, #0
 80044e0:	2105      	movs	r1, #5
 80044e2:	2034      	movs	r0, #52	@ 0x34
 80044e4:	f000 fb60 	bl	8004ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80044e8:	2034      	movs	r0, #52	@ 0x34
 80044ea:	f000 fb79 	bl	8004be0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80044ee:	e038      	b.n	8004562 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a20      	ldr	r2, [pc, #128]	@ (8004578 <HAL_UART_MspInit+0x114>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d133      	bne.n	8004562 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004570 <HAL_UART_MspInit+0x10c>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004502:	4a1b      	ldr	r2, [pc, #108]	@ (8004570 <HAL_UART_MspInit+0x10c>)
 8004504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004508:	6413      	str	r3, [r2, #64]	@ 0x40
 800450a:	4b19      	ldr	r3, [pc, #100]	@ (8004570 <HAL_UART_MspInit+0x10c>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004516:	2300      	movs	r3, #0
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	4b15      	ldr	r3, [pc, #84]	@ (8004570 <HAL_UART_MspInit+0x10c>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451e:	4a14      	ldr	r2, [pc, #80]	@ (8004570 <HAL_UART_MspInit+0x10c>)
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	6313      	str	r3, [r2, #48]	@ 0x30
 8004526:	4b12      	ldr	r3, [pc, #72]	@ (8004570 <HAL_UART_MspInit+0x10c>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004532:	230c      	movs	r3, #12
 8004534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004536:	2302      	movs	r3, #2
 8004538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453a:	2300      	movs	r3, #0
 800453c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800453e:	2303      	movs	r3, #3
 8004540:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004542:	2307      	movs	r3, #7
 8004544:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004546:	f107 031c 	add.w	r3, r7, #28
 800454a:	4619      	mov	r1, r3
 800454c:	4809      	ldr	r0, [pc, #36]	@ (8004574 <HAL_UART_MspInit+0x110>)
 800454e:	f000 fbe7 	bl	8004d20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004552:	2200      	movs	r2, #0
 8004554:	2105      	movs	r1, #5
 8004556:	2026      	movs	r0, #38	@ 0x26
 8004558:	f000 fb26 	bl	8004ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800455c:	2026      	movs	r0, #38	@ 0x26
 800455e:	f000 fb3f 	bl	8004be0 <HAL_NVIC_EnableIRQ>
}
 8004562:	bf00      	nop
 8004564:	3730      	adds	r7, #48	@ 0x30
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40004c00 	.word	0x40004c00
 8004570:	40023800 	.word	0x40023800
 8004574:	40020000 	.word	0x40020000
 8004578:	40004400 	.word	0x40004400

0800457c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08c      	sub	sp, #48	@ 0x30
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800458c:	2300      	movs	r3, #0
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	4b2f      	ldr	r3, [pc, #188]	@ (8004650 <HAL_InitTick+0xd4>)
 8004592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004594:	4a2e      	ldr	r2, [pc, #184]	@ (8004650 <HAL_InitTick+0xd4>)
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	6453      	str	r3, [r2, #68]	@ 0x44
 800459c:	4b2c      	ldr	r3, [pc, #176]	@ (8004650 <HAL_InitTick+0xd4>)
 800459e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	60bb      	str	r3, [r7, #8]
 80045a6:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80045a8:	f107 020c 	add.w	r2, r7, #12
 80045ac:	f107 0310 	add.w	r3, r7, #16
 80045b0:	4611      	mov	r1, r2
 80045b2:	4618      	mov	r0, r3
 80045b4:	f004 f956 	bl	8008864 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80045b8:	f004 f940 	bl	800883c <HAL_RCC_GetPCLK2Freq>
 80045bc:	4603      	mov	r3, r0
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80045c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c4:	4a23      	ldr	r2, [pc, #140]	@ (8004654 <HAL_InitTick+0xd8>)
 80045c6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ca:	0c9b      	lsrs	r3, r3, #18
 80045cc:	3b01      	subs	r3, #1
 80045ce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80045d0:	4b21      	ldr	r3, [pc, #132]	@ (8004658 <HAL_InitTick+0xdc>)
 80045d2:	4a22      	ldr	r2, [pc, #136]	@ (800465c <HAL_InitTick+0xe0>)
 80045d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80045d6:	4b20      	ldr	r3, [pc, #128]	@ (8004658 <HAL_InitTick+0xdc>)
 80045d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80045dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80045de:	4a1e      	ldr	r2, [pc, #120]	@ (8004658 <HAL_InitTick+0xdc>)
 80045e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80045e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004658 <HAL_InitTick+0xdc>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004658 <HAL_InitTick+0xdc>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045f0:	4b19      	ldr	r3, [pc, #100]	@ (8004658 <HAL_InitTick+0xdc>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80045f6:	4818      	ldr	r0, [pc, #96]	@ (8004658 <HAL_InitTick+0xdc>)
 80045f8:	f004 fb31 	bl	8008c5e <HAL_TIM_Base_Init>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8004602:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004606:	2b00      	cmp	r3, #0
 8004608:	d11b      	bne.n	8004642 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800460a:	4813      	ldr	r0, [pc, #76]	@ (8004658 <HAL_InitTick+0xdc>)
 800460c:	f004 fc06 	bl	8008e1c <HAL_TIM_Base_Start_IT>
 8004610:	4603      	mov	r3, r0
 8004612:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8004616:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800461a:	2b00      	cmp	r3, #0
 800461c:	d111      	bne.n	8004642 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800461e:	2019      	movs	r0, #25
 8004620:	f000 fade 	bl	8004be0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b0f      	cmp	r3, #15
 8004628:	d808      	bhi.n	800463c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800462a:	2200      	movs	r2, #0
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	2019      	movs	r0, #25
 8004630:	f000 faba 	bl	8004ba8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004634:	4a0a      	ldr	r2, [pc, #40]	@ (8004660 <HAL_InitTick+0xe4>)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	e002      	b.n	8004642 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004642:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004646:	4618      	mov	r0, r3
 8004648:	3730      	adds	r7, #48	@ 0x30
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40023800 	.word	0x40023800
 8004654:	431bde83 	.word	0x431bde83
 8004658:	20002adc 	.word	0x20002adc
 800465c:	40010000 	.word	0x40010000
 8004660:	20000208 	.word	0x20000208

08004664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004668:	bf00      	nop
 800466a:	e7fd      	b.n	8004668 <NMI_Handler+0x4>

0800466c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004670:	bf00      	nop
 8004672:	e7fd      	b.n	8004670 <HardFault_Handler+0x4>

08004674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004678:	bf00      	nop
 800467a:	e7fd      	b.n	8004678 <MemManage_Handler+0x4>

0800467c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004680:	bf00      	nop
 8004682:	e7fd      	b.n	8004680 <BusFault_Handler+0x4>

08004684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004688:	bf00      	nop
 800468a:	e7fd      	b.n	8004688 <UsageFault_Handler+0x4>

0800468c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004690:	bf00      	nop
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
   * Vervolgens wordt de key meegestuurd met een FreeRTOS event, die opgevangen wordt
   * door de task ARM_keys_IRQ(). Daarna wordt, indien nodig, een context switch
   * afgedwongen door portYIELD_FROM_ISR().
   *
   */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80046a2:	2300      	movs	r3, #0
 80046a4:	603b      	str	r3, [r7, #0]
  int        key;

  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 80046a6:	2001      	movs	r0, #1
 80046a8:	f000 fd22 	bl	80050f0 <HAL_GPIO_EXTI_IRQHandler>

  key = KEYS_read(); // determine which key is pressed...
 80046ac:	f7fe fd80 	bl	80031b0 <KEYS_read>
 80046b0:	4603      	mov	r3, r0
 80046b2:	607b      	str	r3, [r7, #4]
  xEventGroupSetBitsFromISR (hKEY_Event, key, &xHigherPriorityTaskWoken);
 80046b4:	4b0f      	ldr	r3, [pc, #60]	@ (80046f4 <EXTI0_IRQHandler+0x58>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	463a      	mov	r2, r7
 80046bc:	4618      	mov	r0, r3
 80046be:	f00a fd03 	bl	800f0c8 <xEventGroupSetBitsFromISR>

  // KEYS_initISR(0); // set all lines lo if you want repeating keys
  KEYS_initISR(1);    // set all lines hi for reading all 16 keys
 80046c2:	2001      	movs	r0, #1
 80046c4:	f7fe fd4c 	bl	8003160 <KEYS_initISR>
  if (xHigherPriorityTaskWoken != pdFALSE)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <EXTI0_IRQHandler+0x48>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d007      	beq.n	80046e4 <EXTI0_IRQHandler+0x48>
 80046d4:	4b08      	ldr	r3, [pc, #32]	@ (80046f8 <EXTI0_IRQHandler+0x5c>)
 80046d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 80046e4:	2001      	movs	r0, #1
 80046e6:	f000 fd03 	bl	80050f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80046ea:	bf00      	nop
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20000440 	.word	0x20000440
 80046f8:	e000ed04 	.word	0xe000ed04

080046fc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004700:	4802      	ldr	r0, [pc, #8]	@ (800470c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004702:	f004 fd1d 	bl	8009140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004706:	bf00      	nop
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	20002adc 	.word	0x20002adc

08004710 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004714:	4802      	ldr	r0, [pc, #8]	@ (8004720 <USART2_IRQHandler+0x10>)
 8004716:	f005 fcb3 	bl	800a080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800471a:	bf00      	nop
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	20002a8c 	.word	0x20002a8c

08004724 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004728:	4803      	ldr	r0, [pc, #12]	@ (8004738 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800472a:	f004 fd09 	bl	8009140 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800472e:	4803      	ldr	r0, [pc, #12]	@ (800473c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8004730:	f004 fd06 	bl	8009140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8004734:	bf00      	nop
 8004736:	bd80      	pop	{r7, pc}
 8004738:	2000296c 	.word	0x2000296c
 800473c:	200029fc 	.word	0x200029fc

08004740 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004744:	4802      	ldr	r0, [pc, #8]	@ (8004750 <UART4_IRQHandler+0x10>)
 8004746:	f005 fc9b 	bl	800a080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800474a:	bf00      	nop
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20002a44 	.word	0x20002a44

08004754 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004758:	4802      	ldr	r0, [pc, #8]	@ (8004764 <OTG_FS_IRQHandler+0x10>)
 800475a:	f000 ffcd 	bl	80056f8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800475e:	bf00      	nop
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	20013738 	.word	0x20013738

08004768 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
	return 1;
 800476c:	2301      	movs	r3, #1
}
 800476e:	4618      	mov	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <_kill>:

int _kill(int pid, int sig)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004782:	f010 fc03 	bl	8014f8c <__errno>
 8004786:	4603      	mov	r3, r0
 8004788:	2216      	movs	r2, #22
 800478a:	601a      	str	r2, [r3, #0]
	return -1;
 800478c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004790:	4618      	mov	r0, r3
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <_exit>:

void _exit (int status)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80047a0:	f04f 31ff 	mov.w	r1, #4294967295
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff ffe7 	bl	8004778 <_kill>
	while (1) {}		/* Make sure we hang here */
 80047aa:	bf00      	nop
 80047ac:	e7fd      	b.n	80047aa <_exit+0x12>

080047ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b086      	sub	sp, #24
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	e00a      	b.n	80047d6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80047c0:	f3af 8000 	nop.w
 80047c4:	4601      	mov	r1, r0
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	60ba      	str	r2, [r7, #8]
 80047cc:	b2ca      	uxtb	r2, r1
 80047ce:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	3301      	adds	r3, #1
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	429a      	cmp	r2, r3
 80047dc:	dbf0      	blt.n	80047c0 <_read+0x12>
	}

return len;
 80047de:	687b      	ldr	r3, [r7, #4]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	e009      	b.n	800480e <_write+0x26>
	{
		__io_putchar(*ptr++);
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	60ba      	str	r2, [r7, #8]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	3301      	adds	r3, #1
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	429a      	cmp	r2, r3
 8004814:	dbf1      	blt.n	80047fa <_write+0x12>
	}
	return len;
 8004816:	687b      	ldr	r3, [r7, #4]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <_close>:

int _close(int file)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	return -1;
 8004828:	f04f 33ff 	mov.w	r3, #4294967295
}
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004848:	605a      	str	r2, [r3, #4]
	return 0;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <_isatty>:

int _isatty(int file)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
	return 1;
 8004860:	2301      	movs	r3, #1
}
 8004862:	4618      	mov	r0, r3
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800486e:	b480      	push	{r7}
 8004870:	b085      	sub	sp, #20
 8004872:	af00      	add	r7, sp, #0
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	607a      	str	r2, [r7, #4]
	return 0;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004890:	4a14      	ldr	r2, [pc, #80]	@ (80048e4 <_sbrk+0x5c>)
 8004892:	4b15      	ldr	r3, [pc, #84]	@ (80048e8 <_sbrk+0x60>)
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800489c:	4b13      	ldr	r3, [pc, #76]	@ (80048ec <_sbrk+0x64>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d102      	bne.n	80048aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048a4:	4b11      	ldr	r3, [pc, #68]	@ (80048ec <_sbrk+0x64>)
 80048a6:	4a12      	ldr	r2, [pc, #72]	@ (80048f0 <_sbrk+0x68>)
 80048a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048aa:	4b10      	ldr	r3, [pc, #64]	@ (80048ec <_sbrk+0x64>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4413      	add	r3, r2
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d207      	bcs.n	80048c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048b8:	f010 fb68 	bl	8014f8c <__errno>
 80048bc:	4603      	mov	r3, r0
 80048be:	220c      	movs	r2, #12
 80048c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048c2:	f04f 33ff 	mov.w	r3, #4294967295
 80048c6:	e009      	b.n	80048dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048c8:	4b08      	ldr	r3, [pc, #32]	@ (80048ec <_sbrk+0x64>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048ce:	4b07      	ldr	r3, [pc, #28]	@ (80048ec <_sbrk+0x64>)
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4413      	add	r3, r2
 80048d6:	4a05      	ldr	r2, [pc, #20]	@ (80048ec <_sbrk+0x64>)
 80048d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80048da:	68fb      	ldr	r3, [r7, #12]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20020000 	.word	0x20020000
 80048e8:	00000400 	.word	0x00000400
 80048ec:	20002b24 	.word	0x20002b24
 80048f0:	20013c68 	.word	0x20013c68

080048f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048f8:	4b06      	ldr	r3, [pc, #24]	@ (8004914 <SystemInit+0x20>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fe:	4a05      	ldr	r2, [pc, #20]	@ (8004914 <SystemInit+0x20>)
 8004900:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004904:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004908:	bf00      	nop
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	e000ed00 	.word	0xe000ed00

08004918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004918:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004950 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800491c:	480d      	ldr	r0, [pc, #52]	@ (8004954 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800491e:	490e      	ldr	r1, [pc, #56]	@ (8004958 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004920:	4a0e      	ldr	r2, [pc, #56]	@ (800495c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004924:	e002      	b.n	800492c <LoopCopyDataInit>

08004926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800492a:	3304      	adds	r3, #4

0800492c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800492c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800492e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004930:	d3f9      	bcc.n	8004926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004932:	4a0b      	ldr	r2, [pc, #44]	@ (8004960 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004934:	4c0b      	ldr	r4, [pc, #44]	@ (8004964 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004938:	e001      	b.n	800493e <LoopFillZerobss>

0800493a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800493a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800493c:	3204      	adds	r2, #4

0800493e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800493e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004940:	d3fb      	bcc.n	800493a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004942:	f7ff ffd7 	bl	80048f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004946:	f010 fb27 	bl	8014f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800494a:	f7fe ff81 	bl	8003850 <main>
  bx  lr    
 800494e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004950:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004958:	200003fc 	.word	0x200003fc
  ldr r2, =_sidata
 800495c:	0801a260 	.word	0x0801a260
  ldr r2, =_sbss
 8004960:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 8004964:	20013c64 	.word	0x20013c64

08004968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004968:	e7fe      	b.n	8004968 <ADC_IRQHandler>
	...

0800496c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004970:	4b0e      	ldr	r3, [pc, #56]	@ (80049ac <HAL_Init+0x40>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a0d      	ldr	r2, [pc, #52]	@ (80049ac <HAL_Init+0x40>)
 8004976:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800497a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800497c:	4b0b      	ldr	r3, [pc, #44]	@ (80049ac <HAL_Init+0x40>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a0a      	ldr	r2, [pc, #40]	@ (80049ac <HAL_Init+0x40>)
 8004982:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004988:	4b08      	ldr	r3, [pc, #32]	@ (80049ac <HAL_Init+0x40>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a07      	ldr	r2, [pc, #28]	@ (80049ac <HAL_Init+0x40>)
 800498e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004994:	2003      	movs	r0, #3
 8004996:	f000 f8fc 	bl	8004b92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800499a:	2000      	movs	r0, #0
 800499c:	f7ff fdee 	bl	800457c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049a0:	f7ff fb8e 	bl	80040c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	40023c00 	.word	0x40023c00

080049b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049b4:	4b06      	ldr	r3, [pc, #24]	@ (80049d0 <HAL_IncTick+0x20>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	461a      	mov	r2, r3
 80049ba:	4b06      	ldr	r3, [pc, #24]	@ (80049d4 <HAL_IncTick+0x24>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4413      	add	r3, r2
 80049c0:	4a04      	ldr	r2, [pc, #16]	@ (80049d4 <HAL_IncTick+0x24>)
 80049c2:	6013      	str	r3, [r2, #0]
}
 80049c4:	bf00      	nop
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	2000020c 	.word	0x2000020c
 80049d4:	20002b28 	.word	0x20002b28

080049d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  return uwTick;
 80049dc:	4b03      	ldr	r3, [pc, #12]	@ (80049ec <HAL_GetTick+0x14>)
 80049de:	681b      	ldr	r3, [r3, #0]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	20002b28 	.word	0x20002b28

080049f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049f8:	f7ff ffee 	bl	80049d8 <HAL_GetTick>
 80049fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a08:	d005      	beq.n	8004a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a34 <HAL_Delay+0x44>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a16:	bf00      	nop
 8004a18:	f7ff ffde 	bl	80049d8 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d8f7      	bhi.n	8004a18 <HAL_Delay+0x28>
  {
  }
}
 8004a28:	bf00      	nop
 8004a2a:	bf00      	nop
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	2000020c 	.word	0x2000020c

08004a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a48:	4b0c      	ldr	r3, [pc, #48]	@ (8004a7c <__NVIC_SetPriorityGrouping+0x44>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a54:	4013      	ands	r3, r2
 8004a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a6a:	4a04      	ldr	r2, [pc, #16]	@ (8004a7c <__NVIC_SetPriorityGrouping+0x44>)
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	60d3      	str	r3, [r2, #12]
}
 8004a70:	bf00      	nop
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	e000ed00 	.word	0xe000ed00

08004a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a84:	4b04      	ldr	r3, [pc, #16]	@ (8004a98 <__NVIC_GetPriorityGrouping+0x18>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	0a1b      	lsrs	r3, r3, #8
 8004a8a:	f003 0307 	and.w	r3, r3, #7
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	e000ed00 	.word	0xe000ed00

08004a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	db0b      	blt.n	8004ac6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	f003 021f 	and.w	r2, r3, #31
 8004ab4:	4907      	ldr	r1, [pc, #28]	@ (8004ad4 <__NVIC_EnableIRQ+0x38>)
 8004ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	2001      	movs	r0, #1
 8004abe:	fa00 f202 	lsl.w	r2, r0, r2
 8004ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	e000e100 	.word	0xe000e100

08004ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	6039      	str	r1, [r7, #0]
 8004ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	db0a      	blt.n	8004b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	490c      	ldr	r1, [pc, #48]	@ (8004b24 <__NVIC_SetPriority+0x4c>)
 8004af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af6:	0112      	lsls	r2, r2, #4
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	440b      	add	r3, r1
 8004afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b00:	e00a      	b.n	8004b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	4908      	ldr	r1, [pc, #32]	@ (8004b28 <__NVIC_SetPriority+0x50>)
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	3b04      	subs	r3, #4
 8004b10:	0112      	lsls	r2, r2, #4
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	440b      	add	r3, r1
 8004b16:	761a      	strb	r2, [r3, #24]
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	e000e100 	.word	0xe000e100
 8004b28:	e000ed00 	.word	0xe000ed00

08004b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b089      	sub	sp, #36	@ 0x24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f1c3 0307 	rsb	r3, r3, #7
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	bf28      	it	cs
 8004b4a:	2304      	movcs	r3, #4
 8004b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	3304      	adds	r3, #4
 8004b52:	2b06      	cmp	r3, #6
 8004b54:	d902      	bls.n	8004b5c <NVIC_EncodePriority+0x30>
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	3b03      	subs	r3, #3
 8004b5a:	e000      	b.n	8004b5e <NVIC_EncodePriority+0x32>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b60:	f04f 32ff 	mov.w	r2, #4294967295
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43da      	mvns	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	401a      	ands	r2, r3
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b74:	f04f 31ff 	mov.w	r1, #4294967295
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7e:	43d9      	mvns	r1, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b84:	4313      	orrs	r3, r2
         );
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3724      	adds	r7, #36	@ 0x24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b082      	sub	sp, #8
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7ff ff4c 	bl	8004a38 <__NVIC_SetPriorityGrouping>
}
 8004ba0:	bf00      	nop
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bba:	f7ff ff61 	bl	8004a80 <__NVIC_GetPriorityGrouping>
 8004bbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	68b9      	ldr	r1, [r7, #8]
 8004bc4:	6978      	ldr	r0, [r7, #20]
 8004bc6:	f7ff ffb1 	bl	8004b2c <NVIC_EncodePriority>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff ff80 	bl	8004ad8 <__NVIC_SetPriority>
}
 8004bd8:	bf00      	nop
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff ff54 	bl	8004a9c <__NVIC_EnableIRQ>
}
 8004bf4:	bf00      	nop
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c08:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004c0a:	f7ff fee5 	bl	80049d8 <HAL_GetTick>
 8004c0e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d008      	beq.n	8004c2e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2280      	movs	r2, #128	@ 0x80
 8004c20:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e052      	b.n	8004cd4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0216 	bic.w	r2, r2, #22
 8004c3c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695a      	ldr	r2, [r3, #20]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c4c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d103      	bne.n	8004c5e <HAL_DMA_Abort+0x62>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d007      	beq.n	8004c6e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0208 	bic.w	r2, r2, #8
 8004c6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 0201 	bic.w	r2, r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c7e:	e013      	b.n	8004ca8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c80:	f7ff feaa 	bl	80049d8 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b05      	cmp	r3, #5
 8004c8c:	d90c      	bls.n	8004ca8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2220      	movs	r2, #32
 8004c92:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2203      	movs	r2, #3
 8004c98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e015      	b.n	8004cd4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1e4      	bne.n	8004c80 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cba:	223f      	movs	r2, #63	@ 0x3f
 8004cbc:	409a      	lsls	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d004      	beq.n	8004cfa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2280      	movs	r2, #128	@ 0x80
 8004cf4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e00c      	b.n	8004d14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2205      	movs	r2, #5
 8004cfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0201 	bic.w	r2, r2, #1
 8004d10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b089      	sub	sp, #36	@ 0x24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d36:	2300      	movs	r3, #0
 8004d38:	61fb      	str	r3, [r7, #28]
 8004d3a:	e16b      	b.n	8005014 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	f040 815a 	bne.w	800500e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d005      	beq.n	8004d72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d130      	bne.n	8004dd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	2203      	movs	r2, #3
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	43db      	mvns	r3, r3
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	4013      	ands	r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004da8:	2201      	movs	r2, #1
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	43db      	mvns	r3, r3
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4013      	ands	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	f003 0201 	and.w	r2, r3, #1
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d017      	beq.n	8004e10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	2203      	movs	r2, #3
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	43db      	mvns	r3, r3
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	4013      	ands	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f003 0303 	and.w	r3, r3, #3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d123      	bne.n	8004e64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	08da      	lsrs	r2, r3, #3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3208      	adds	r2, #8
 8004e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	220f      	movs	r2, #15
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	08da      	lsrs	r2, r3, #3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3208      	adds	r2, #8
 8004e5e:	69b9      	ldr	r1, [r7, #24]
 8004e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	2203      	movs	r2, #3
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	43db      	mvns	r3, r3
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 0203 	and.w	r2, r3, #3
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 80b4 	beq.w	800500e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	4b60      	ldr	r3, [pc, #384]	@ (800502c <HAL_GPIO_Init+0x30c>)
 8004eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eae:	4a5f      	ldr	r2, [pc, #380]	@ (800502c <HAL_GPIO_Init+0x30c>)
 8004eb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004eb6:	4b5d      	ldr	r3, [pc, #372]	@ (800502c <HAL_GPIO_Init+0x30c>)
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ec2:	4a5b      	ldr	r2, [pc, #364]	@ (8005030 <HAL_GPIO_Init+0x310>)
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	089b      	lsrs	r3, r3, #2
 8004ec8:	3302      	adds	r3, #2
 8004eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	220f      	movs	r2, #15
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a52      	ldr	r2, [pc, #328]	@ (8005034 <HAL_GPIO_Init+0x314>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d02b      	beq.n	8004f46 <HAL_GPIO_Init+0x226>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a51      	ldr	r2, [pc, #324]	@ (8005038 <HAL_GPIO_Init+0x318>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d025      	beq.n	8004f42 <HAL_GPIO_Init+0x222>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a50      	ldr	r2, [pc, #320]	@ (800503c <HAL_GPIO_Init+0x31c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d01f      	beq.n	8004f3e <HAL_GPIO_Init+0x21e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a4f      	ldr	r2, [pc, #316]	@ (8005040 <HAL_GPIO_Init+0x320>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d019      	beq.n	8004f3a <HAL_GPIO_Init+0x21a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a4e      	ldr	r2, [pc, #312]	@ (8005044 <HAL_GPIO_Init+0x324>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d013      	beq.n	8004f36 <HAL_GPIO_Init+0x216>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a4d      	ldr	r2, [pc, #308]	@ (8005048 <HAL_GPIO_Init+0x328>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d00d      	beq.n	8004f32 <HAL_GPIO_Init+0x212>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a4c      	ldr	r2, [pc, #304]	@ (800504c <HAL_GPIO_Init+0x32c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d007      	beq.n	8004f2e <HAL_GPIO_Init+0x20e>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a4b      	ldr	r2, [pc, #300]	@ (8005050 <HAL_GPIO_Init+0x330>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d101      	bne.n	8004f2a <HAL_GPIO_Init+0x20a>
 8004f26:	2307      	movs	r3, #7
 8004f28:	e00e      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f2a:	2308      	movs	r3, #8
 8004f2c:	e00c      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f2e:	2306      	movs	r3, #6
 8004f30:	e00a      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f32:	2305      	movs	r3, #5
 8004f34:	e008      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f36:	2304      	movs	r3, #4
 8004f38:	e006      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e004      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	e002      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f46:	2300      	movs	r3, #0
 8004f48:	69fa      	ldr	r2, [r7, #28]
 8004f4a:	f002 0203 	and.w	r2, r2, #3
 8004f4e:	0092      	lsls	r2, r2, #2
 8004f50:	4093      	lsls	r3, r2
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f58:	4935      	ldr	r1, [pc, #212]	@ (8005030 <HAL_GPIO_Init+0x310>)
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	089b      	lsrs	r3, r3, #2
 8004f5e:	3302      	adds	r3, #2
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f66:	4b3b      	ldr	r3, [pc, #236]	@ (8005054 <HAL_GPIO_Init+0x334>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	4013      	ands	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f8a:	4a32      	ldr	r2, [pc, #200]	@ (8005054 <HAL_GPIO_Init+0x334>)
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f90:	4b30      	ldr	r3, [pc, #192]	@ (8005054 <HAL_GPIO_Init+0x334>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fb4:	4a27      	ldr	r2, [pc, #156]	@ (8005054 <HAL_GPIO_Init+0x334>)
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004fba:	4b26      	ldr	r3, [pc, #152]	@ (8005054 <HAL_GPIO_Init+0x334>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	43db      	mvns	r3, r3
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fde:	4a1d      	ldr	r2, [pc, #116]	@ (8005054 <HAL_GPIO_Init+0x334>)
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8005054 <HAL_GPIO_Init+0x334>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	43db      	mvns	r3, r3
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	4313      	orrs	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005008:	4a12      	ldr	r2, [pc, #72]	@ (8005054 <HAL_GPIO_Init+0x334>)
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	3301      	adds	r3, #1
 8005012:	61fb      	str	r3, [r7, #28]
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	2b0f      	cmp	r3, #15
 8005018:	f67f ae90 	bls.w	8004d3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800501c:	bf00      	nop
 800501e:	bf00      	nop
 8005020:	3724      	adds	r7, #36	@ 0x24
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40023800 	.word	0x40023800
 8005030:	40013800 	.word	0x40013800
 8005034:	40020000 	.word	0x40020000
 8005038:	40020400 	.word	0x40020400
 800503c:	40020800 	.word	0x40020800
 8005040:	40020c00 	.word	0x40020c00
 8005044:	40021000 	.word	0x40021000
 8005048:	40021400 	.word	0x40021400
 800504c:	40021800 	.word	0x40021800
 8005050:	40021c00 	.word	0x40021c00
 8005054:	40013c00 	.word	0x40013c00

08005058 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	460b      	mov	r3, r1
 8005062:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	887b      	ldrh	r3, [r7, #2]
 800506a:	4013      	ands	r3, r2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005070:	2301      	movs	r3, #1
 8005072:	73fb      	strb	r3, [r7, #15]
 8005074:	e001      	b.n	800507a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005076:	2300      	movs	r3, #0
 8005078:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800507a:	7bfb      	ldrb	r3, [r7, #15]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	807b      	strh	r3, [r7, #2]
 8005094:	4613      	mov	r3, r2
 8005096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005098:	787b      	ldrb	r3, [r7, #1]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800509e:	887a      	ldrh	r2, [r7, #2]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050a4:	e003      	b.n	80050ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050a6:	887b      	ldrh	r3, [r7, #2]
 80050a8:	041a      	lsls	r2, r3, #16
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	619a      	str	r2, [r3, #24]
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b085      	sub	sp, #20
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	460b      	mov	r3, r1
 80050c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050cc:	887a      	ldrh	r2, [r7, #2]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4013      	ands	r3, r2
 80050d2:	041a      	lsls	r2, r3, #16
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	43d9      	mvns	r1, r3
 80050d8:	887b      	ldrh	r3, [r7, #2]
 80050da:	400b      	ands	r3, r1
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	619a      	str	r2, [r3, #24]
}
 80050e2:	bf00      	nop
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
	...

080050f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	4603      	mov	r3, r0
 80050f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80050fa:	4b08      	ldr	r3, [pc, #32]	@ (800511c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050fc:	695a      	ldr	r2, [r3, #20]
 80050fe:	88fb      	ldrh	r3, [r7, #6]
 8005100:	4013      	ands	r3, r2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d006      	beq.n	8005114 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005106:	4a05      	ldr	r2, [pc, #20]	@ (800511c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005108:	88fb      	ldrh	r3, [r7, #6]
 800510a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800510c:	88fb      	ldrh	r3, [r7, #6]
 800510e:	4618      	mov	r0, r3
 8005110:	f000 f806 	bl	8005120 <HAL_GPIO_EXTI_Callback>
  }
}
 8005114:	bf00      	nop
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40013c00 	.word	0x40013c00

08005120 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	4603      	mov	r3, r0
 8005128:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b086      	sub	sp, #24
 800513a:	af02      	add	r7, sp, #8
 800513c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e059      	b.n	80051fc <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d106      	bne.n	8005168 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f00d fe74 	bl	8012e50 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2203      	movs	r2, #3
 800516c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005176:	d102      	bne.n	800517e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4618      	mov	r0, r3
 8005184:	f005 ff47 	bl	800b016 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6818      	ldr	r0, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	7c1a      	ldrb	r2, [r3, #16]
 8005190:	f88d 2000 	strb.w	r2, [sp]
 8005194:	3304      	adds	r3, #4
 8005196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005198:	f005 fec8 	bl	800af2c <USB_CoreInit>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d005      	beq.n	80051ae <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2202      	movs	r2, #2
 80051a6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e026      	b.n	80051fc <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2101      	movs	r1, #1
 80051b4:	4618      	mov	r0, r3
 80051b6:	f005 ff3f 	bl	800b038 <USB_SetCurrentMode>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d005      	beq.n	80051cc <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e017      	b.n	80051fc <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	7c1a      	ldrb	r2, [r3, #16]
 80051d4:	f88d 2000 	strb.w	r2, [sp]
 80051d8:	3304      	adds	r3, #4
 80051da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051dc:	f006 f8e2 	bl	800b3a4 <USB_HostInit>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d005      	beq.n	80051f2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2202      	movs	r2, #2
 80051ea:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e004      	b.n	80051fc <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005204:	b590      	push	{r4, r7, lr}
 8005206:	b08b      	sub	sp, #44	@ 0x2c
 8005208:	af04      	add	r7, sp, #16
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	4608      	mov	r0, r1
 800520e:	4611      	mov	r1, r2
 8005210:	461a      	mov	r2, r3
 8005212:	4603      	mov	r3, r0
 8005214:	70fb      	strb	r3, [r7, #3]
 8005216:	460b      	mov	r3, r1
 8005218:	70bb      	strb	r3, [r7, #2]
 800521a:	4613      	mov	r3, r2
 800521c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800521e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005220:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_HCD_HC_Init+0x2c>
 800522c:	2302      	movs	r3, #2
 800522e:	e09d      	b.n	800536c <HAL_HCD_HC_Init+0x168>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8005238:	78fa      	ldrb	r2, [r7, #3]
 800523a:	6879      	ldr	r1, [r7, #4]
 800523c:	4613      	mov	r3, r2
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	1a9b      	subs	r3, r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	3319      	adds	r3, #25
 8005248:	2200      	movs	r2, #0
 800524a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800524c:	78fa      	ldrb	r2, [r7, #3]
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	4613      	mov	r3, r2
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	440b      	add	r3, r1
 800525a:	3314      	adds	r3, #20
 800525c:	787a      	ldrb	r2, [r7, #1]
 800525e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005260:	78fa      	ldrb	r2, [r7, #3]
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	4613      	mov	r3, r2
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	1a9b      	subs	r3, r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	3315      	adds	r3, #21
 8005270:	78fa      	ldrb	r2, [r7, #3]
 8005272:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005274:	78fa      	ldrb	r2, [r7, #3]
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	4613      	mov	r3, r2
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	1a9b      	subs	r3, r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	3326      	adds	r3, #38	@ 0x26
 8005284:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8005288:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800528a:	78fa      	ldrb	r2, [r7, #3]
 800528c:	78bb      	ldrb	r3, [r7, #2]
 800528e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005292:	b2d8      	uxtb	r0, r3
 8005294:	6879      	ldr	r1, [r7, #4]
 8005296:	4613      	mov	r3, r2
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	1a9b      	subs	r3, r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	440b      	add	r3, r1
 80052a0:	3316      	adds	r3, #22
 80052a2:	4602      	mov	r2, r0
 80052a4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80052a6:	78fb      	ldrb	r3, [r7, #3]
 80052a8:	4619      	mov	r1, r3
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fbc8 	bl	8005a40 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80052b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	da0a      	bge.n	80052ce <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80052b8:	78fa      	ldrb	r2, [r7, #3]
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	4613      	mov	r3, r2
 80052be:	011b      	lsls	r3, r3, #4
 80052c0:	1a9b      	subs	r3, r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	3317      	adds	r3, #23
 80052c8:	2201      	movs	r2, #1
 80052ca:	701a      	strb	r2, [r3, #0]
 80052cc:	e009      	b.n	80052e2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80052ce:	78fa      	ldrb	r2, [r7, #3]
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	1a9b      	subs	r3, r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	3317      	adds	r3, #23
 80052de:	2200      	movs	r2, #0
 80052e0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f006 f9c0 	bl	800b66c <USB_GetHostSpeed>
 80052ec:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80052ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d10b      	bne.n	800530e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80052f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d107      	bne.n	800530e <HAL_HCD_HC_Init+0x10a>
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d104      	bne.n	800530e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2bbc      	cmp	r3, #188	@ 0xbc
 8005308:	d901      	bls.n	800530e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800530a:	23bc      	movs	r3, #188	@ 0xbc
 800530c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800530e:	78fa      	ldrb	r2, [r7, #3]
 8005310:	6879      	ldr	r1, [r7, #4]
 8005312:	4613      	mov	r3, r2
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	1a9b      	subs	r3, r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	440b      	add	r3, r1
 800531c:	3318      	adds	r3, #24
 800531e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005322:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8005324:	78fa      	ldrb	r2, [r7, #3]
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	b298      	uxth	r0, r3
 800532a:	6879      	ldr	r1, [r7, #4]
 800532c:	4613      	mov	r3, r2
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	1a9b      	subs	r3, r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	440b      	add	r3, r1
 8005336:	3328      	adds	r3, #40	@ 0x28
 8005338:	4602      	mov	r2, r0
 800533a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6818      	ldr	r0, [r3, #0]
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	b29b      	uxth	r3, r3
 8005344:	787c      	ldrb	r4, [r7, #1]
 8005346:	78ba      	ldrb	r2, [r7, #2]
 8005348:	78f9      	ldrb	r1, [r7, #3]
 800534a:	9302      	str	r3, [sp, #8]
 800534c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005350:	9301      	str	r3, [sp, #4]
 8005352:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	4623      	mov	r3, r4
 800535a:	f006 f9af 	bl	800b6bc <USB_HC_Init>
 800535e:	4603      	mov	r3, r0
 8005360:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800536a:	7bfb      	ldrb	r3, [r7, #15]
}
 800536c:	4618      	mov	r0, r3
 800536e:	371c      	adds	r7, #28
 8005370:	46bd      	mov	sp, r7
 8005372:	bd90      	pop	{r4, r7, pc}

08005374 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_HCD_HC_Halt+0x1e>
 800538e:	2302      	movs	r3, #2
 8005390:	e00f      	b.n	80053b2 <HAL_HCD_HC_Halt+0x3e>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	78fa      	ldrb	r2, [r7, #3]
 80053a0:	4611      	mov	r1, r2
 80053a2:	4618      	mov	r0, r3
 80053a4:	f006 fd41 	bl	800be2a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
	...

080053bc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	4608      	mov	r0, r1
 80053c6:	4611      	mov	r1, r2
 80053c8:	461a      	mov	r2, r3
 80053ca:	4603      	mov	r3, r0
 80053cc:	70fb      	strb	r3, [r7, #3]
 80053ce:	460b      	mov	r3, r1
 80053d0:	70bb      	strb	r3, [r7, #2]
 80053d2:	4613      	mov	r3, r2
 80053d4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80053d6:	78fa      	ldrb	r2, [r7, #3]
 80053d8:	6879      	ldr	r1, [r7, #4]
 80053da:	4613      	mov	r3, r2
 80053dc:	011b      	lsls	r3, r3, #4
 80053de:	1a9b      	subs	r3, r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	440b      	add	r3, r1
 80053e4:	3317      	adds	r3, #23
 80053e6:	78ba      	ldrb	r2, [r7, #2]
 80053e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80053ea:	78fa      	ldrb	r2, [r7, #3]
 80053ec:	6879      	ldr	r1, [r7, #4]
 80053ee:	4613      	mov	r3, r2
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	1a9b      	subs	r3, r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	440b      	add	r3, r1
 80053f8:	3326      	adds	r3, #38	@ 0x26
 80053fa:	787a      	ldrb	r2, [r7, #1]
 80053fc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80053fe:	7c3b      	ldrb	r3, [r7, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d114      	bne.n	800542e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005404:	78fa      	ldrb	r2, [r7, #3]
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	4613      	mov	r3, r2
 800540a:	011b      	lsls	r3, r3, #4
 800540c:	1a9b      	subs	r3, r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	440b      	add	r3, r1
 8005412:	332a      	adds	r3, #42	@ 0x2a
 8005414:	2203      	movs	r2, #3
 8005416:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005418:	78fa      	ldrb	r2, [r7, #3]
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	4613      	mov	r3, r2
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	1a9b      	subs	r3, r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	440b      	add	r3, r1
 8005426:	3319      	adds	r3, #25
 8005428:	7f3a      	ldrb	r2, [r7, #28]
 800542a:	701a      	strb	r2, [r3, #0]
 800542c:	e009      	b.n	8005442 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800542e:	78fa      	ldrb	r2, [r7, #3]
 8005430:	6879      	ldr	r1, [r7, #4]
 8005432:	4613      	mov	r3, r2
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	1a9b      	subs	r3, r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	440b      	add	r3, r1
 800543c:	332a      	adds	r3, #42	@ 0x2a
 800543e:	2202      	movs	r2, #2
 8005440:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005442:	787b      	ldrb	r3, [r7, #1]
 8005444:	2b03      	cmp	r3, #3
 8005446:	f200 8102 	bhi.w	800564e <HAL_HCD_HC_SubmitRequest+0x292>
 800544a:	a201      	add	r2, pc, #4	@ (adr r2, 8005450 <HAL_HCD_HC_SubmitRequest+0x94>)
 800544c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005450:	08005461 	.word	0x08005461
 8005454:	08005639 	.word	0x08005639
 8005458:	08005525 	.word	0x08005525
 800545c:	080055af 	.word	0x080055af
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8005460:	7c3b      	ldrb	r3, [r7, #16]
 8005462:	2b01      	cmp	r3, #1
 8005464:	f040 80f5 	bne.w	8005652 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8005468:	78bb      	ldrb	r3, [r7, #2]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d12d      	bne.n	80054ca <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800546e:	8b3b      	ldrh	r3, [r7, #24]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d109      	bne.n	8005488 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8005474:	78fa      	ldrb	r2, [r7, #3]
 8005476:	6879      	ldr	r1, [r7, #4]
 8005478:	4613      	mov	r3, r2
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	1a9b      	subs	r3, r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	440b      	add	r3, r1
 8005482:	333d      	adds	r3, #61	@ 0x3d
 8005484:	2201      	movs	r2, #1
 8005486:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8005488:	78fa      	ldrb	r2, [r7, #3]
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	4613      	mov	r3, r2
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	1a9b      	subs	r3, r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	440b      	add	r3, r1
 8005496:	333d      	adds	r3, #61	@ 0x3d
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10a      	bne.n	80054b4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800549e:	78fa      	ldrb	r2, [r7, #3]
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	1a9b      	subs	r3, r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	440b      	add	r3, r1
 80054ac:	332a      	adds	r3, #42	@ 0x2a
 80054ae:	2200      	movs	r2, #0
 80054b0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80054b2:	e0ce      	b.n	8005652 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80054b4:	78fa      	ldrb	r2, [r7, #3]
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	4613      	mov	r3, r2
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	1a9b      	subs	r3, r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	440b      	add	r3, r1
 80054c2:	332a      	adds	r3, #42	@ 0x2a
 80054c4:	2202      	movs	r2, #2
 80054c6:	701a      	strb	r2, [r3, #0]
      break;
 80054c8:	e0c3      	b.n	8005652 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80054ca:	78fa      	ldrb	r2, [r7, #3]
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	4613      	mov	r3, r2
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	1a9b      	subs	r3, r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	440b      	add	r3, r1
 80054d8:	331a      	adds	r3, #26
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	f040 80b8 	bne.w	8005652 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80054e2:	78fa      	ldrb	r2, [r7, #3]
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	4613      	mov	r3, r2
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	1a9b      	subs	r3, r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	440b      	add	r3, r1
 80054f0:	333c      	adds	r3, #60	@ 0x3c
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80054f8:	78fa      	ldrb	r2, [r7, #3]
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	4613      	mov	r3, r2
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	1a9b      	subs	r3, r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	440b      	add	r3, r1
 8005506:	332a      	adds	r3, #42	@ 0x2a
 8005508:	2200      	movs	r2, #0
 800550a:	701a      	strb	r2, [r3, #0]
      break;
 800550c:	e0a1      	b.n	8005652 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800550e:	78fa      	ldrb	r2, [r7, #3]
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	4613      	mov	r3, r2
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	1a9b      	subs	r3, r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	440b      	add	r3, r1
 800551c:	332a      	adds	r3, #42	@ 0x2a
 800551e:	2202      	movs	r2, #2
 8005520:	701a      	strb	r2, [r3, #0]
      break;
 8005522:	e096      	b.n	8005652 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005524:	78bb      	ldrb	r3, [r7, #2]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d120      	bne.n	800556c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800552a:	78fa      	ldrb	r2, [r7, #3]
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	4613      	mov	r3, r2
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	1a9b      	subs	r3, r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	440b      	add	r3, r1
 8005538:	333d      	adds	r3, #61	@ 0x3d
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005540:	78fa      	ldrb	r2, [r7, #3]
 8005542:	6879      	ldr	r1, [r7, #4]
 8005544:	4613      	mov	r3, r2
 8005546:	011b      	lsls	r3, r3, #4
 8005548:	1a9b      	subs	r3, r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	440b      	add	r3, r1
 800554e:	332a      	adds	r3, #42	@ 0x2a
 8005550:	2200      	movs	r2, #0
 8005552:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005554:	e07e      	b.n	8005654 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005556:	78fa      	ldrb	r2, [r7, #3]
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	4613      	mov	r3, r2
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	1a9b      	subs	r3, r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	440b      	add	r3, r1
 8005564:	332a      	adds	r3, #42	@ 0x2a
 8005566:	2202      	movs	r2, #2
 8005568:	701a      	strb	r2, [r3, #0]
      break;
 800556a:	e073      	b.n	8005654 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800556c:	78fa      	ldrb	r2, [r7, #3]
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	4613      	mov	r3, r2
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	1a9b      	subs	r3, r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	333c      	adds	r3, #60	@ 0x3c
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10a      	bne.n	8005598 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005582:	78fa      	ldrb	r2, [r7, #3]
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	4613      	mov	r3, r2
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	1a9b      	subs	r3, r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	440b      	add	r3, r1
 8005590:	332a      	adds	r3, #42	@ 0x2a
 8005592:	2200      	movs	r2, #0
 8005594:	701a      	strb	r2, [r3, #0]
      break;
 8005596:	e05d      	b.n	8005654 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005598:	78fa      	ldrb	r2, [r7, #3]
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	4613      	mov	r3, r2
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	1a9b      	subs	r3, r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	332a      	adds	r3, #42	@ 0x2a
 80055a8:	2202      	movs	r2, #2
 80055aa:	701a      	strb	r2, [r3, #0]
      break;
 80055ac:	e052      	b.n	8005654 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80055ae:	78bb      	ldrb	r3, [r7, #2]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d120      	bne.n	80055f6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80055b4:	78fa      	ldrb	r2, [r7, #3]
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	4613      	mov	r3, r2
 80055ba:	011b      	lsls	r3, r3, #4
 80055bc:	1a9b      	subs	r3, r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	333d      	adds	r3, #61	@ 0x3d
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10a      	bne.n	80055e0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80055ca:	78fa      	ldrb	r2, [r7, #3]
 80055cc:	6879      	ldr	r1, [r7, #4]
 80055ce:	4613      	mov	r3, r2
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	1a9b      	subs	r3, r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	440b      	add	r3, r1
 80055d8:	332a      	adds	r3, #42	@ 0x2a
 80055da:	2200      	movs	r2, #0
 80055dc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80055de:	e039      	b.n	8005654 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80055e0:	78fa      	ldrb	r2, [r7, #3]
 80055e2:	6879      	ldr	r1, [r7, #4]
 80055e4:	4613      	mov	r3, r2
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	1a9b      	subs	r3, r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	440b      	add	r3, r1
 80055ee:	332a      	adds	r3, #42	@ 0x2a
 80055f0:	2202      	movs	r2, #2
 80055f2:	701a      	strb	r2, [r3, #0]
      break;
 80055f4:	e02e      	b.n	8005654 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80055f6:	78fa      	ldrb	r2, [r7, #3]
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	4613      	mov	r3, r2
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	1a9b      	subs	r3, r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	440b      	add	r3, r1
 8005604:	333c      	adds	r3, #60	@ 0x3c
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10a      	bne.n	8005622 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800560c:	78fa      	ldrb	r2, [r7, #3]
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	4613      	mov	r3, r2
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	1a9b      	subs	r3, r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	440b      	add	r3, r1
 800561a:	332a      	adds	r3, #42	@ 0x2a
 800561c:	2200      	movs	r2, #0
 800561e:	701a      	strb	r2, [r3, #0]
      break;
 8005620:	e018      	b.n	8005654 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005622:	78fa      	ldrb	r2, [r7, #3]
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	4613      	mov	r3, r2
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	440b      	add	r3, r1
 8005630:	332a      	adds	r3, #42	@ 0x2a
 8005632:	2202      	movs	r2, #2
 8005634:	701a      	strb	r2, [r3, #0]
      break;
 8005636:	e00d      	b.n	8005654 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	332a      	adds	r3, #42	@ 0x2a
 8005648:	2200      	movs	r2, #0
 800564a:	701a      	strb	r2, [r3, #0]
      break;
 800564c:	e002      	b.n	8005654 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800564e:	bf00      	nop
 8005650:	e000      	b.n	8005654 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8005652:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005654:	78fa      	ldrb	r2, [r7, #3]
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	4613      	mov	r3, r2
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	1a9b      	subs	r3, r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	440b      	add	r3, r1
 8005662:	332c      	adds	r3, #44	@ 0x2c
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005668:	78fa      	ldrb	r2, [r7, #3]
 800566a:	8b39      	ldrh	r1, [r7, #24]
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	4613      	mov	r3, r2
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	1a9b      	subs	r3, r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4403      	add	r3, r0
 8005678:	3334      	adds	r3, #52	@ 0x34
 800567a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800567c:	78fa      	ldrb	r2, [r7, #3]
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	4613      	mov	r3, r2
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	1a9b      	subs	r3, r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	334c      	adds	r3, #76	@ 0x4c
 800568c:	2200      	movs	r2, #0
 800568e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005690:	78fa      	ldrb	r2, [r7, #3]
 8005692:	6879      	ldr	r1, [r7, #4]
 8005694:	4613      	mov	r3, r2
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	1a9b      	subs	r3, r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	440b      	add	r3, r1
 800569e:	3338      	adds	r3, #56	@ 0x38
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80056a4:	78fa      	ldrb	r2, [r7, #3]
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	4613      	mov	r3, r2
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	1a9b      	subs	r3, r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	3315      	adds	r3, #21
 80056b4:	78fa      	ldrb	r2, [r7, #3]
 80056b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80056b8:	78fa      	ldrb	r2, [r7, #3]
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	4613      	mov	r3, r2
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	1a9b      	subs	r3, r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	440b      	add	r3, r1
 80056c6:	334d      	adds	r3, #77	@ 0x4d
 80056c8:	2200      	movs	r2, #0
 80056ca:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6818      	ldr	r0, [r3, #0]
 80056d0:	78fa      	ldrb	r2, [r7, #3]
 80056d2:	4613      	mov	r3, r2
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	1a9b      	subs	r3, r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	3310      	adds	r3, #16
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	4413      	add	r3, r2
 80056e0:	1d19      	adds	r1, r3, #4
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	799b      	ldrb	r3, [r3, #6]
 80056e6:	461a      	mov	r2, r3
 80056e8:	f006 f914 	bl	800b914 <USB_HC_StartXfer>
 80056ec:	4603      	mov	r3, r0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop

080056f8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4618      	mov	r0, r3
 8005710:	f005 fe08 	bl	800b324 <USB_GetMode>
 8005714:	4603      	mov	r3, r0
 8005716:	2b01      	cmp	r3, #1
 8005718:	f040 80fb 	bne.w	8005912 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4618      	mov	r0, r3
 8005722:	f005 fdcb 	bl	800b2bc <USB_ReadInterrupts>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 80f1 	beq.w	8005910 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f005 fdc2 	bl	800b2bc <USB_ReadInterrupts>
 8005738:	4603      	mov	r3, r0
 800573a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800573e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005742:	d104      	bne.n	800574e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800574c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f005 fdb2 	bl	800b2bc <USB_ReadInterrupts>
 8005758:	4603      	mov	r3, r0
 800575a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800575e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005762:	d104      	bne.n	800576e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800576c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4618      	mov	r0, r3
 8005774:	f005 fda2 	bl	800b2bc <USB_ReadInterrupts>
 8005778:	4603      	mov	r3, r0
 800577a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800577e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005782:	d104      	bne.n	800578e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800578c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4618      	mov	r0, r3
 8005794:	f005 fd92 	bl	800b2bc <USB_ReadInterrupts>
 8005798:	4603      	mov	r3, r0
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d103      	bne.n	80057aa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2202      	movs	r2, #2
 80057a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f005 fd84 	bl	800b2bc <USB_ReadInterrupts>
 80057b4:	4603      	mov	r3, r0
 80057b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057be:	d120      	bne.n	8005802 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80057c8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d113      	bne.n	8005802 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80057da:	2110      	movs	r1, #16
 80057dc:	6938      	ldr	r0, [r7, #16]
 80057de:	f005 fc77 	bl	800b0d0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80057e2:	6938      	ldr	r0, [r7, #16]
 80057e4:	f005 fca6 	bl	800b134 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	7a5b      	ldrb	r3, [r3, #9]
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d105      	bne.n	80057fc <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2101      	movs	r1, #1
 80057f6:	4618      	mov	r0, r3
 80057f8:	f005 fe98 	bl	800b52c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f00d fba5 	bl	8012f4c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4618      	mov	r0, r3
 8005808:	f005 fd58 	bl	800b2bc <USB_ReadInterrupts>
 800580c:	4603      	mov	r3, r0
 800580e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005812:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005816:	d102      	bne.n	800581e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f001 fd33 	bl	8007284 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4618      	mov	r0, r3
 8005824:	f005 fd4a 	bl	800b2bc <USB_ReadInterrupts>
 8005828:	4603      	mov	r3, r0
 800582a:	f003 0308 	and.w	r3, r3, #8
 800582e:	2b08      	cmp	r3, #8
 8005830:	d106      	bne.n	8005840 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f00d fb6e 	bl	8012f14 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2208      	movs	r2, #8
 800583e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4618      	mov	r0, r3
 8005846:	f005 fd39 	bl	800b2bc <USB_ReadInterrupts>
 800584a:	4603      	mov	r3, r0
 800584c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005850:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005854:	d139      	bne.n	80058ca <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4618      	mov	r0, r3
 800585c:	f006 fad4 	bl	800be08 <USB_HC_ReadInterrupt>
 8005860:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005862:	2300      	movs	r3, #0
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	e025      	b.n	80058b4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f003 030f 	and.w	r3, r3, #15
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	fa22 f303 	lsr.w	r3, r2, r3
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d018      	beq.n	80058ae <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4413      	add	r3, r2
 8005884:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800588e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005892:	d106      	bne.n	80058a2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	b2db      	uxtb	r3, r3
 8005898:	4619      	mov	r1, r3
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f905 	bl	8005aaa <HCD_HC_IN_IRQHandler>
 80058a0:	e005      	b.n	80058ae <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	4619      	mov	r1, r3
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 ff67 	bl	800677c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	3301      	adds	r3, #1
 80058b2:	617b      	str	r3, [r7, #20]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	795b      	ldrb	r3, [r3, #5]
 80058b8:	461a      	mov	r2, r3
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	4293      	cmp	r3, r2
 80058be:	d3d3      	bcc.n	8005868 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80058c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f005 fcf4 	bl	800b2bc <USB_ReadInterrupts>
 80058d4:	4603      	mov	r3, r0
 80058d6:	f003 0310 	and.w	r3, r3, #16
 80058da:	2b10      	cmp	r3, #16
 80058dc:	d101      	bne.n	80058e2 <HAL_HCD_IRQHandler+0x1ea>
 80058de:	2301      	movs	r3, #1
 80058e0:	e000      	b.n	80058e4 <HAL_HCD_IRQHandler+0x1ec>
 80058e2:	2300      	movs	r3, #0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d014      	beq.n	8005912 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699a      	ldr	r2, [r3, #24]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0210 	bic.w	r2, r2, #16
 80058f6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f001 fbe4 	bl	80070c6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	699a      	ldr	r2, [r3, #24]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f042 0210 	orr.w	r2, r2, #16
 800590c:	619a      	str	r2, [r3, #24]
 800590e:	e000      	b.n	8005912 <HAL_HCD_IRQHandler+0x21a>
      return;
 8005910:	bf00      	nop
    }
  }
}
 8005912:	3718      	adds	r7, #24
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005926:	2b01      	cmp	r3, #1
 8005928:	d101      	bne.n	800592e <HAL_HCD_Start+0x16>
 800592a:	2302      	movs	r3, #2
 800592c:	e013      	b.n	8005956 <HAL_HCD_Start+0x3e>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2101      	movs	r1, #1
 800593c:	4618      	mov	r0, r3
 800593e:	f005 fe5c 	bl	800b5fa <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	f005 fb54 	bl	800aff4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b082      	sub	sp, #8
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800596c:	2b01      	cmp	r3, #1
 800596e:	d101      	bne.n	8005974 <HAL_HCD_Stop+0x16>
 8005970:	2302      	movs	r3, #2
 8005972:	e00d      	b.n	8005990 <HAL_HCD_Stop+0x32>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4618      	mov	r0, r3
 8005982:	f006 fbaf 	bl	800c0e4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f005 fdfe 	bl	800b5a6 <USB_ResetPort>
 80059aa:	4603      	mov	r3, r0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	460b      	mov	r3, r1
 80059be:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80059c0:	78fa      	ldrb	r2, [r7, #3]
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	4613      	mov	r3, r2
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	1a9b      	subs	r3, r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	440b      	add	r3, r1
 80059ce:	334c      	adds	r3, #76	@ 0x4c
 80059d0:	781b      	ldrb	r3, [r3, #0]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	460b      	mov	r3, r1
 80059e8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80059ea:	78fa      	ldrb	r2, [r7, #3]
 80059ec:	6879      	ldr	r1, [r7, #4]
 80059ee:	4613      	mov	r3, r2
 80059f0:	011b      	lsls	r3, r3, #4
 80059f2:	1a9b      	subs	r3, r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	440b      	add	r3, r1
 80059f8:	3338      	adds	r3, #56	@ 0x38
 80059fa:	681b      	ldr	r3, [r3, #0]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f005 fe40 	bl	800b69a <USB_GetCurrentFrame>
 8005a1a:	4603      	mov	r3, r0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f005 fe1b 	bl	800b66c <USB_GetHostSpeed>
 8005a36:	4603      	mov	r3, r0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3708      	adds	r7, #8
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8005a4c:	78fa      	ldrb	r2, [r7, #3]
 8005a4e:	6879      	ldr	r1, [r7, #4]
 8005a50:	4613      	mov	r3, r2
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	1a9b      	subs	r3, r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	440b      	add	r3, r1
 8005a5a:	331a      	adds	r3, #26
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8005a60:	78fa      	ldrb	r2, [r7, #3]
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	4613      	mov	r3, r2
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	1a9b      	subs	r3, r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	331b      	adds	r3, #27
 8005a70:	2200      	movs	r2, #0
 8005a72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8005a74:	78fa      	ldrb	r2, [r7, #3]
 8005a76:	6879      	ldr	r1, [r7, #4]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	1a9b      	subs	r3, r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	440b      	add	r3, r1
 8005a82:	3325      	adds	r3, #37	@ 0x25
 8005a84:	2200      	movs	r2, #0
 8005a86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8005a88:	78fa      	ldrb	r2, [r7, #3]
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	011b      	lsls	r3, r3, #4
 8005a90:	1a9b      	subs	r3, r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	440b      	add	r3, r1
 8005a96:	3324      	adds	r3, #36	@ 0x24
 8005a98:	2200      	movs	r2, #0
 8005a9a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b086      	sub	sp, #24
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	78fa      	ldrb	r2, [r7, #3]
 8005ac6:	4611      	mov	r1, r2
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f005 fc0a 	bl	800b2e2 <USB_ReadChInterrupts>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	d11a      	bne.n	8005b0e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005ad8:	78fb      	ldrb	r3, [r7, #3]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	2304      	movs	r3, #4
 8005ae8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005aea:	78fa      	ldrb	r2, [r7, #3]
 8005aec:	6879      	ldr	r1, [r7, #4]
 8005aee:	4613      	mov	r3, r2
 8005af0:	011b      	lsls	r3, r3, #4
 8005af2:	1a9b      	subs	r3, r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	440b      	add	r3, r1
 8005af8:	334d      	adds	r3, #77	@ 0x4d
 8005afa:	2207      	movs	r2, #7
 8005afc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	78fa      	ldrb	r2, [r7, #3]
 8005b04:	4611      	mov	r1, r2
 8005b06:	4618      	mov	r0, r3
 8005b08:	f006 f98f 	bl	800be2a <USB_HC_Halt>
 8005b0c:	e09e      	b.n	8005c4c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	78fa      	ldrb	r2, [r7, #3]
 8005b14:	4611      	mov	r1, r2
 8005b16:	4618      	mov	r0, r3
 8005b18:	f005 fbe3 	bl	800b2e2 <USB_ReadChInterrupts>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b26:	d11b      	bne.n	8005b60 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8005b28:	78fb      	ldrb	r3, [r7, #3]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b34:	461a      	mov	r2, r3
 8005b36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8005b3c:	78fa      	ldrb	r2, [r7, #3]
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	4613      	mov	r3, r2
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	1a9b      	subs	r3, r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	440b      	add	r3, r1
 8005b4a:	334d      	adds	r3, #77	@ 0x4d
 8005b4c:	2208      	movs	r2, #8
 8005b4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	78fa      	ldrb	r2, [r7, #3]
 8005b56:	4611      	mov	r1, r2
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f006 f966 	bl	800be2a <USB_HC_Halt>
 8005b5e:	e075      	b.n	8005c4c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	78fa      	ldrb	r2, [r7, #3]
 8005b66:	4611      	mov	r1, r2
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f005 fbba 	bl	800b2e2 <USB_ReadChInterrupts>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	f003 0308 	and.w	r3, r3, #8
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d11a      	bne.n	8005bae <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005b78:	78fb      	ldrb	r3, [r7, #3]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b84:	461a      	mov	r2, r3
 8005b86:	2308      	movs	r3, #8
 8005b88:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005b8a:	78fa      	ldrb	r2, [r7, #3]
 8005b8c:	6879      	ldr	r1, [r7, #4]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	1a9b      	subs	r3, r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	440b      	add	r3, r1
 8005b98:	334d      	adds	r3, #77	@ 0x4d
 8005b9a:	2206      	movs	r2, #6
 8005b9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	78fa      	ldrb	r2, [r7, #3]
 8005ba4:	4611      	mov	r1, r2
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f006 f93f 	bl	800be2a <USB_HC_Halt>
 8005bac:	e04e      	b.n	8005c4c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	78fa      	ldrb	r2, [r7, #3]
 8005bb4:	4611      	mov	r1, r2
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f005 fb93 	bl	800b2e2 <USB_ReadChInterrupts>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bc6:	d11b      	bne.n	8005c00 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bda:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005bdc:	78fa      	ldrb	r2, [r7, #3]
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	4613      	mov	r3, r2
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	1a9b      	subs	r3, r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	440b      	add	r3, r1
 8005bea:	334d      	adds	r3, #77	@ 0x4d
 8005bec:	2209      	movs	r2, #9
 8005bee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	78fa      	ldrb	r2, [r7, #3]
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f006 f916 	bl	800be2a <USB_HC_Halt>
 8005bfe:	e025      	b.n	8005c4c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	78fa      	ldrb	r2, [r7, #3]
 8005c06:	4611      	mov	r1, r2
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f005 fb6a 	bl	800b2e2 <USB_ReadChInterrupts>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c14:	2b80      	cmp	r3, #128	@ 0x80
 8005c16:	d119      	bne.n	8005c4c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005c18:	78fb      	ldrb	r3, [r7, #3]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c24:	461a      	mov	r2, r3
 8005c26:	2380      	movs	r3, #128	@ 0x80
 8005c28:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005c2a:	78fa      	ldrb	r2, [r7, #3]
 8005c2c:	6879      	ldr	r1, [r7, #4]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	1a9b      	subs	r3, r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	440b      	add	r3, r1
 8005c38:	334d      	adds	r3, #77	@ 0x4d
 8005c3a:	2207      	movs	r2, #7
 8005c3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	78fa      	ldrb	r2, [r7, #3]
 8005c44:	4611      	mov	r1, r2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f006 f8ef 	bl	800be2a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	78fa      	ldrb	r2, [r7, #3]
 8005c52:	4611      	mov	r1, r2
 8005c54:	4618      	mov	r0, r3
 8005c56:	f005 fb44 	bl	800b2e2 <USB_ReadChInterrupts>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c64:	d112      	bne.n	8005c8c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	78fa      	ldrb	r2, [r7, #3]
 8005c6c:	4611      	mov	r1, r2
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f006 f8db 	bl	800be2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005c74:	78fb      	ldrb	r3, [r7, #3]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c80:	461a      	mov	r2, r3
 8005c82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c86:	6093      	str	r3, [r2, #8]
 8005c88:	f000 bd75 	b.w	8006776 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	78fa      	ldrb	r2, [r7, #3]
 8005c92:	4611      	mov	r1, r2
 8005c94:	4618      	mov	r0, r3
 8005c96:	f005 fb24 	bl	800b2e2 <USB_ReadChInterrupts>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	f040 8128 	bne.w	8005ef6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005ca6:	78fb      	ldrb	r3, [r7, #3]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	2320      	movs	r3, #32
 8005cb6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005cb8:	78fa      	ldrb	r2, [r7, #3]
 8005cba:	6879      	ldr	r1, [r7, #4]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	011b      	lsls	r3, r3, #4
 8005cc0:	1a9b      	subs	r3, r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	440b      	add	r3, r1
 8005cc6:	331b      	adds	r3, #27
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d119      	bne.n	8005d02 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005cce:	78fa      	ldrb	r2, [r7, #3]
 8005cd0:	6879      	ldr	r1, [r7, #4]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	011b      	lsls	r3, r3, #4
 8005cd6:	1a9b      	subs	r3, r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	440b      	add	r3, r1
 8005cdc:	331b      	adds	r3, #27
 8005cde:	2200      	movs	r2, #0
 8005ce0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005ce2:	78fb      	ldrb	r3, [r7, #3]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	78fa      	ldrb	r2, [r7, #3]
 8005cf2:	0151      	lsls	r1, r2, #5
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	440a      	add	r2, r1
 8005cf8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d00:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	799b      	ldrb	r3, [r3, #6]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d01b      	beq.n	8005d42 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005d0a:	78fa      	ldrb	r2, [r7, #3]
 8005d0c:	6879      	ldr	r1, [r7, #4]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	1a9b      	subs	r3, r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	440b      	add	r3, r1
 8005d18:	3330      	adds	r3, #48	@ 0x30
 8005d1a:	6819      	ldr	r1, [r3, #0]
 8005d1c:	78fb      	ldrb	r3, [r7, #3]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d2e:	78fa      	ldrb	r2, [r7, #3]
 8005d30:	1ac9      	subs	r1, r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	4613      	mov	r3, r2
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	1a9b      	subs	r3, r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4403      	add	r3, r0
 8005d3e:	3338      	adds	r3, #56	@ 0x38
 8005d40:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8005d42:	78fa      	ldrb	r2, [r7, #3]
 8005d44:	6879      	ldr	r1, [r7, #4]
 8005d46:	4613      	mov	r3, r2
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	1a9b      	subs	r3, r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	440b      	add	r3, r1
 8005d50:	334d      	adds	r3, #77	@ 0x4d
 8005d52:	2201      	movs	r2, #1
 8005d54:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8005d56:	78fa      	ldrb	r2, [r7, #3]
 8005d58:	6879      	ldr	r1, [r7, #4]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	011b      	lsls	r3, r3, #4
 8005d5e:	1a9b      	subs	r3, r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	440b      	add	r3, r1
 8005d64:	3344      	adds	r3, #68	@ 0x44
 8005d66:	2200      	movs	r2, #0
 8005d68:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005d6a:	78fb      	ldrb	r3, [r7, #3]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d76:	461a      	mov	r2, r3
 8005d78:	2301      	movs	r3, #1
 8005d7a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d7c:	78fa      	ldrb	r2, [r7, #3]
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	4613      	mov	r3, r2
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	1a9b      	subs	r3, r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	440b      	add	r3, r1
 8005d8a:	3326      	adds	r3, #38	@ 0x26
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00a      	beq.n	8005da8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005d92:	78fa      	ldrb	r2, [r7, #3]
 8005d94:	6879      	ldr	r1, [r7, #4]
 8005d96:	4613      	mov	r3, r2
 8005d98:	011b      	lsls	r3, r3, #4
 8005d9a:	1a9b      	subs	r3, r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	440b      	add	r3, r1
 8005da0:	3326      	adds	r3, #38	@ 0x26
 8005da2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d110      	bne.n	8005dca <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	78fa      	ldrb	r2, [r7, #3]
 8005dae:	4611      	mov	r1, r2
 8005db0:	4618      	mov	r0, r3
 8005db2:	f006 f83a 	bl	800be2a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005db6:	78fb      	ldrb	r3, [r7, #3]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	2310      	movs	r3, #16
 8005dc6:	6093      	str	r3, [r2, #8]
 8005dc8:	e03d      	b.n	8005e46 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005dca:	78fa      	ldrb	r2, [r7, #3]
 8005dcc:	6879      	ldr	r1, [r7, #4]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	011b      	lsls	r3, r3, #4
 8005dd2:	1a9b      	subs	r3, r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	440b      	add	r3, r1
 8005dd8:	3326      	adds	r3, #38	@ 0x26
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d00a      	beq.n	8005df6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005de0:	78fa      	ldrb	r2, [r7, #3]
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	4613      	mov	r3, r2
 8005de6:	011b      	lsls	r3, r3, #4
 8005de8:	1a9b      	subs	r3, r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	440b      	add	r3, r1
 8005dee:	3326      	adds	r3, #38	@ 0x26
 8005df0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d127      	bne.n	8005e46 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005df6:	78fb      	ldrb	r3, [r7, #3]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	78fa      	ldrb	r2, [r7, #3]
 8005e06:	0151      	lsls	r1, r2, #5
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	440a      	add	r2, r1
 8005e0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e10:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005e14:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005e16:	78fa      	ldrb	r2, [r7, #3]
 8005e18:	6879      	ldr	r1, [r7, #4]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	011b      	lsls	r3, r3, #4
 8005e1e:	1a9b      	subs	r3, r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	440b      	add	r3, r1
 8005e24:	334c      	adds	r3, #76	@ 0x4c
 8005e26:	2201      	movs	r2, #1
 8005e28:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005e2a:	78fa      	ldrb	r2, [r7, #3]
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	1a9b      	subs	r3, r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	440b      	add	r3, r1
 8005e38:	334c      	adds	r3, #76	@ 0x4c
 8005e3a:	781a      	ldrb	r2, [r3, #0]
 8005e3c:	78fb      	ldrb	r3, [r7, #3]
 8005e3e:	4619      	mov	r1, r3
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f00d f891 	bl	8012f68 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	799b      	ldrb	r3, [r3, #6]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d13b      	bne.n	8005ec6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8005e4e:	78fa      	ldrb	r2, [r7, #3]
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	4613      	mov	r3, r2
 8005e54:	011b      	lsls	r3, r3, #4
 8005e56:	1a9b      	subs	r3, r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	3338      	adds	r3, #56	@ 0x38
 8005e5e:	6819      	ldr	r1, [r3, #0]
 8005e60:	78fa      	ldrb	r2, [r7, #3]
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	4613      	mov	r3, r2
 8005e66:	011b      	lsls	r3, r3, #4
 8005e68:	1a9b      	subs	r3, r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4403      	add	r3, r0
 8005e6e:	3328      	adds	r3, #40	@ 0x28
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	440b      	add	r3, r1
 8005e74:	1e59      	subs	r1, r3, #1
 8005e76:	78fa      	ldrb	r2, [r7, #3]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	1a9b      	subs	r3, r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4403      	add	r3, r0
 8005e84:	3328      	adds	r3, #40	@ 0x28
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 8470 	beq.w	8006776 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8005e96:	78fa      	ldrb	r2, [r7, #3]
 8005e98:	6879      	ldr	r1, [r7, #4]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	011b      	lsls	r3, r3, #4
 8005e9e:	1a9b      	subs	r3, r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	440b      	add	r3, r1
 8005ea4:	333c      	adds	r3, #60	@ 0x3c
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	78fa      	ldrb	r2, [r7, #3]
 8005eaa:	f083 0301 	eor.w	r3, r3, #1
 8005eae:	b2d8      	uxtb	r0, r3
 8005eb0:	6879      	ldr	r1, [r7, #4]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	011b      	lsls	r3, r3, #4
 8005eb6:	1a9b      	subs	r3, r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	440b      	add	r3, r1
 8005ebc:	333c      	adds	r3, #60	@ 0x3c
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	f000 bc58 	b.w	8006776 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8005ec6:	78fa      	ldrb	r2, [r7, #3]
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	1a9b      	subs	r3, r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	440b      	add	r3, r1
 8005ed4:	333c      	adds	r3, #60	@ 0x3c
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	78fa      	ldrb	r2, [r7, #3]
 8005eda:	f083 0301 	eor.w	r3, r3, #1
 8005ede:	b2d8      	uxtb	r0, r3
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	011b      	lsls	r3, r3, #4
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	440b      	add	r3, r1
 8005eec:	333c      	adds	r3, #60	@ 0x3c
 8005eee:	4602      	mov	r2, r0
 8005ef0:	701a      	strb	r2, [r3, #0]
 8005ef2:	f000 bc40 	b.w	8006776 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	78fa      	ldrb	r2, [r7, #3]
 8005efc:	4611      	mov	r1, r2
 8005efe:	4618      	mov	r0, r3
 8005f00:	f005 f9ef 	bl	800b2e2 <USB_ReadChInterrupts>
 8005f04:	4603      	mov	r3, r0
 8005f06:	f003 0320 	and.w	r3, r3, #32
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	d131      	bne.n	8005f72 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005f0e:	78fb      	ldrb	r3, [r7, #3]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	2320      	movs	r3, #32
 8005f1e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005f20:	78fa      	ldrb	r2, [r7, #3]
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	4613      	mov	r3, r2
 8005f26:	011b      	lsls	r3, r3, #4
 8005f28:	1a9b      	subs	r3, r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	440b      	add	r3, r1
 8005f2e:	331a      	adds	r3, #26
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	f040 841f 	bne.w	8006776 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8005f38:	78fa      	ldrb	r2, [r7, #3]
 8005f3a:	6879      	ldr	r1, [r7, #4]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	1a9b      	subs	r3, r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	440b      	add	r3, r1
 8005f46:	331b      	adds	r3, #27
 8005f48:	2201      	movs	r2, #1
 8005f4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005f4c:	78fa      	ldrb	r2, [r7, #3]
 8005f4e:	6879      	ldr	r1, [r7, #4]
 8005f50:	4613      	mov	r3, r2
 8005f52:	011b      	lsls	r3, r3, #4
 8005f54:	1a9b      	subs	r3, r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	440b      	add	r3, r1
 8005f5a:	334d      	adds	r3, #77	@ 0x4d
 8005f5c:	2203      	movs	r2, #3
 8005f5e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	78fa      	ldrb	r2, [r7, #3]
 8005f66:	4611      	mov	r1, r2
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f005 ff5e 	bl	800be2a <USB_HC_Halt>
 8005f6e:	f000 bc02 	b.w	8006776 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	78fa      	ldrb	r2, [r7, #3]
 8005f78:	4611      	mov	r1, r2
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f005 f9b1 	bl	800b2e2 <USB_ReadChInterrupts>
 8005f80:	4603      	mov	r3, r0
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	f040 8305 	bne.w	8006596 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005f8c:	78fb      	ldrb	r3, [r7, #3]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f98:	461a      	mov	r2, r3
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005f9e:	78fa      	ldrb	r2, [r7, #3]
 8005fa0:	6879      	ldr	r1, [r7, #4]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	1a9b      	subs	r3, r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	440b      	add	r3, r1
 8005fac:	334d      	adds	r3, #77	@ 0x4d
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d114      	bne.n	8005fde <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005fb4:	78fa      	ldrb	r2, [r7, #3]
 8005fb6:	6879      	ldr	r1, [r7, #4]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	1a9b      	subs	r3, r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	440b      	add	r3, r1
 8005fc2:	334d      	adds	r3, #77	@ 0x4d
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005fc8:	78fa      	ldrb	r2, [r7, #3]
 8005fca:	6879      	ldr	r1, [r7, #4]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	1a9b      	subs	r3, r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	440b      	add	r3, r1
 8005fd6:	334c      	adds	r3, #76	@ 0x4c
 8005fd8:	2201      	movs	r2, #1
 8005fda:	701a      	strb	r2, [r3, #0]
 8005fdc:	e2cc      	b.n	8006578 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005fde:	78fa      	ldrb	r2, [r7, #3]
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	1a9b      	subs	r3, r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	440b      	add	r3, r1
 8005fec:	334d      	adds	r3, #77	@ 0x4d
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	2b06      	cmp	r3, #6
 8005ff2:	d114      	bne.n	800601e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005ff4:	78fa      	ldrb	r2, [r7, #3]
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	1a9b      	subs	r3, r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	440b      	add	r3, r1
 8006002:	334d      	adds	r3, #77	@ 0x4d
 8006004:	2202      	movs	r2, #2
 8006006:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8006008:	78fa      	ldrb	r2, [r7, #3]
 800600a:	6879      	ldr	r1, [r7, #4]
 800600c:	4613      	mov	r3, r2
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	1a9b      	subs	r3, r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	440b      	add	r3, r1
 8006016:	334c      	adds	r3, #76	@ 0x4c
 8006018:	2205      	movs	r2, #5
 800601a:	701a      	strb	r2, [r3, #0]
 800601c:	e2ac      	b.n	8006578 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800601e:	78fa      	ldrb	r2, [r7, #3]
 8006020:	6879      	ldr	r1, [r7, #4]
 8006022:	4613      	mov	r3, r2
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	1a9b      	subs	r3, r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	440b      	add	r3, r1
 800602c:	334d      	adds	r3, #77	@ 0x4d
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b07      	cmp	r3, #7
 8006032:	d00b      	beq.n	800604c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006034:	78fa      	ldrb	r2, [r7, #3]
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	4613      	mov	r3, r2
 800603a:	011b      	lsls	r3, r3, #4
 800603c:	1a9b      	subs	r3, r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	334d      	adds	r3, #77	@ 0x4d
 8006044:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006046:	2b09      	cmp	r3, #9
 8006048:	f040 80a6 	bne.w	8006198 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800604c:	78fa      	ldrb	r2, [r7, #3]
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	4613      	mov	r3, r2
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	1a9b      	subs	r3, r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	440b      	add	r3, r1
 800605a:	334d      	adds	r3, #77	@ 0x4d
 800605c:	2202      	movs	r2, #2
 800605e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006060:	78fa      	ldrb	r2, [r7, #3]
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	4613      	mov	r3, r2
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	1a9b      	subs	r3, r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	440b      	add	r3, r1
 800606e:	3344      	adds	r3, #68	@ 0x44
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	1c59      	adds	r1, r3, #1
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	4613      	mov	r3, r2
 8006078:	011b      	lsls	r3, r3, #4
 800607a:	1a9b      	subs	r3, r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4403      	add	r3, r0
 8006080:	3344      	adds	r3, #68	@ 0x44
 8006082:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006084:	78fa      	ldrb	r2, [r7, #3]
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	4613      	mov	r3, r2
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	1a9b      	subs	r3, r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	440b      	add	r3, r1
 8006092:	3344      	adds	r3, #68	@ 0x44
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b02      	cmp	r3, #2
 8006098:	d943      	bls.n	8006122 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800609a:	78fa      	ldrb	r2, [r7, #3]
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	4613      	mov	r3, r2
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	1a9b      	subs	r3, r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	440b      	add	r3, r1
 80060a8:	3344      	adds	r3, #68	@ 0x44
 80060aa:	2200      	movs	r2, #0
 80060ac:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80060ae:	78fa      	ldrb	r2, [r7, #3]
 80060b0:	6879      	ldr	r1, [r7, #4]
 80060b2:	4613      	mov	r3, r2
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	1a9b      	subs	r3, r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	440b      	add	r3, r1
 80060bc:	331a      	adds	r3, #26
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d123      	bne.n	800610c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80060c4:	78fa      	ldrb	r2, [r7, #3]
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	4613      	mov	r3, r2
 80060ca:	011b      	lsls	r3, r3, #4
 80060cc:	1a9b      	subs	r3, r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	440b      	add	r3, r1
 80060d2:	331b      	adds	r3, #27
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80060d8:	78fa      	ldrb	r2, [r7, #3]
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	4613      	mov	r3, r2
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	1a9b      	subs	r3, r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	440b      	add	r3, r1
 80060e6:	331c      	adds	r3, #28
 80060e8:	2200      	movs	r2, #0
 80060ea:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80060ec:	78fb      	ldrb	r3, [r7, #3]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	78fa      	ldrb	r2, [r7, #3]
 80060fc:	0151      	lsls	r1, r2, #5
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	440a      	add	r2, r1
 8006102:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800610a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800610c:	78fa      	ldrb	r2, [r7, #3]
 800610e:	6879      	ldr	r1, [r7, #4]
 8006110:	4613      	mov	r3, r2
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	1a9b      	subs	r3, r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	440b      	add	r3, r1
 800611a:	334c      	adds	r3, #76	@ 0x4c
 800611c:	2204      	movs	r2, #4
 800611e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006120:	e229      	b.n	8006576 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006122:	78fa      	ldrb	r2, [r7, #3]
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	4613      	mov	r3, r2
 8006128:	011b      	lsls	r3, r3, #4
 800612a:	1a9b      	subs	r3, r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	440b      	add	r3, r1
 8006130:	334c      	adds	r3, #76	@ 0x4c
 8006132:	2202      	movs	r2, #2
 8006134:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006136:	78fa      	ldrb	r2, [r7, #3]
 8006138:	6879      	ldr	r1, [r7, #4]
 800613a:	4613      	mov	r3, r2
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	1a9b      	subs	r3, r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	440b      	add	r3, r1
 8006144:	3326      	adds	r3, #38	@ 0x26
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00b      	beq.n	8006164 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800614c:	78fa      	ldrb	r2, [r7, #3]
 800614e:	6879      	ldr	r1, [r7, #4]
 8006150:	4613      	mov	r3, r2
 8006152:	011b      	lsls	r3, r3, #4
 8006154:	1a9b      	subs	r3, r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	440b      	add	r3, r1
 800615a:	3326      	adds	r3, #38	@ 0x26
 800615c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800615e:	2b02      	cmp	r3, #2
 8006160:	f040 8209 	bne.w	8006576 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	4413      	add	r3, r2
 800616c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800617a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006182:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	4413      	add	r3, r2
 800618c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006190:	461a      	mov	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006196:	e1ee      	b.n	8006576 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006198:	78fa      	ldrb	r2, [r7, #3]
 800619a:	6879      	ldr	r1, [r7, #4]
 800619c:	4613      	mov	r3, r2
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	1a9b      	subs	r3, r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	334d      	adds	r3, #77	@ 0x4d
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	2b05      	cmp	r3, #5
 80061ac:	f040 80c8 	bne.w	8006340 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80061b0:	78fa      	ldrb	r2, [r7, #3]
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	4613      	mov	r3, r2
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	1a9b      	subs	r3, r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	440b      	add	r3, r1
 80061be:	334d      	adds	r3, #77	@ 0x4d
 80061c0:	2202      	movs	r2, #2
 80061c2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80061c4:	78fa      	ldrb	r2, [r7, #3]
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	4613      	mov	r3, r2
 80061ca:	011b      	lsls	r3, r3, #4
 80061cc:	1a9b      	subs	r3, r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	440b      	add	r3, r1
 80061d2:	331b      	adds	r3, #27
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	f040 81ce 	bne.w	8006578 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80061dc:	78fa      	ldrb	r2, [r7, #3]
 80061de:	6879      	ldr	r1, [r7, #4]
 80061e0:	4613      	mov	r3, r2
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	1a9b      	subs	r3, r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	440b      	add	r3, r1
 80061ea:	3326      	adds	r3, #38	@ 0x26
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	d16b      	bne.n	80062ca <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80061f2:	78fa      	ldrb	r2, [r7, #3]
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	4613      	mov	r3, r2
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	1a9b      	subs	r3, r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	440b      	add	r3, r1
 8006200:	3348      	adds	r3, #72	@ 0x48
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	1c59      	adds	r1, r3, #1
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	4613      	mov	r3, r2
 800620a:	011b      	lsls	r3, r3, #4
 800620c:	1a9b      	subs	r3, r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4403      	add	r3, r0
 8006212:	3348      	adds	r3, #72	@ 0x48
 8006214:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8006216:	78fa      	ldrb	r2, [r7, #3]
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	4613      	mov	r3, r2
 800621c:	011b      	lsls	r3, r3, #4
 800621e:	1a9b      	subs	r3, r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	440b      	add	r3, r1
 8006224:	3348      	adds	r3, #72	@ 0x48
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b02      	cmp	r3, #2
 800622a:	d943      	bls.n	80062b4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800622c:	78fa      	ldrb	r2, [r7, #3]
 800622e:	6879      	ldr	r1, [r7, #4]
 8006230:	4613      	mov	r3, r2
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	1a9b      	subs	r3, r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	440b      	add	r3, r1
 800623a:	3348      	adds	r3, #72	@ 0x48
 800623c:	2200      	movs	r2, #0
 800623e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8006240:	78fa      	ldrb	r2, [r7, #3]
 8006242:	6879      	ldr	r1, [r7, #4]
 8006244:	4613      	mov	r3, r2
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	1a9b      	subs	r3, r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	440b      	add	r3, r1
 800624e:	331b      	adds	r3, #27
 8006250:	2200      	movs	r2, #0
 8006252:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8006254:	78fa      	ldrb	r2, [r7, #3]
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	4613      	mov	r3, r2
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	1a9b      	subs	r3, r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	440b      	add	r3, r1
 8006262:	3344      	adds	r3, #68	@ 0x44
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b02      	cmp	r3, #2
 8006268:	d809      	bhi.n	800627e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800626a:	78fa      	ldrb	r2, [r7, #3]
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	4613      	mov	r3, r2
 8006270:	011b      	lsls	r3, r3, #4
 8006272:	1a9b      	subs	r3, r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	440b      	add	r3, r1
 8006278:	331c      	adds	r3, #28
 800627a:	2201      	movs	r2, #1
 800627c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	4413      	add	r3, r2
 8006286:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	78fa      	ldrb	r2, [r7, #3]
 800628e:	0151      	lsls	r1, r2, #5
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	440a      	add	r2, r1
 8006294:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006298:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800629c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800629e:	78fa      	ldrb	r2, [r7, #3]
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	4613      	mov	r3, r2
 80062a4:	011b      	lsls	r3, r3, #4
 80062a6:	1a9b      	subs	r3, r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	440b      	add	r3, r1
 80062ac:	334c      	adds	r3, #76	@ 0x4c
 80062ae:	2204      	movs	r2, #4
 80062b0:	701a      	strb	r2, [r3, #0]
 80062b2:	e014      	b.n	80062de <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80062b4:	78fa      	ldrb	r2, [r7, #3]
 80062b6:	6879      	ldr	r1, [r7, #4]
 80062b8:	4613      	mov	r3, r2
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	440b      	add	r3, r1
 80062c2:	334c      	adds	r3, #76	@ 0x4c
 80062c4:	2202      	movs	r2, #2
 80062c6:	701a      	strb	r2, [r3, #0]
 80062c8:	e009      	b.n	80062de <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80062ca:	78fa      	ldrb	r2, [r7, #3]
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	4613      	mov	r3, r2
 80062d0:	011b      	lsls	r3, r3, #4
 80062d2:	1a9b      	subs	r3, r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	440b      	add	r3, r1
 80062d8:	334c      	adds	r3, #76	@ 0x4c
 80062da:	2202      	movs	r2, #2
 80062dc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80062de:	78fa      	ldrb	r2, [r7, #3]
 80062e0:	6879      	ldr	r1, [r7, #4]
 80062e2:	4613      	mov	r3, r2
 80062e4:	011b      	lsls	r3, r3, #4
 80062e6:	1a9b      	subs	r3, r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	440b      	add	r3, r1
 80062ec:	3326      	adds	r3, #38	@ 0x26
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00b      	beq.n	800630c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80062f4:	78fa      	ldrb	r2, [r7, #3]
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	4613      	mov	r3, r2
 80062fa:	011b      	lsls	r3, r3, #4
 80062fc:	1a9b      	subs	r3, r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	440b      	add	r3, r1
 8006302:	3326      	adds	r3, #38	@ 0x26
 8006304:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006306:	2b02      	cmp	r3, #2
 8006308:	f040 8136 	bne.w	8006578 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800630c:	78fb      	ldrb	r3, [r7, #3]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	4413      	add	r3, r2
 8006314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006322:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800632a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800632c:	78fb      	ldrb	r3, [r7, #3]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	4413      	add	r3, r2
 8006334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006338:	461a      	mov	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	e11b      	b.n	8006578 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006340:	78fa      	ldrb	r2, [r7, #3]
 8006342:	6879      	ldr	r1, [r7, #4]
 8006344:	4613      	mov	r3, r2
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	1a9b      	subs	r3, r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	440b      	add	r3, r1
 800634e:	334d      	adds	r3, #77	@ 0x4d
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	2b03      	cmp	r3, #3
 8006354:	f040 8081 	bne.w	800645a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006358:	78fa      	ldrb	r2, [r7, #3]
 800635a:	6879      	ldr	r1, [r7, #4]
 800635c:	4613      	mov	r3, r2
 800635e:	011b      	lsls	r3, r3, #4
 8006360:	1a9b      	subs	r3, r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	440b      	add	r3, r1
 8006366:	334d      	adds	r3, #77	@ 0x4d
 8006368:	2202      	movs	r2, #2
 800636a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800636c:	78fa      	ldrb	r2, [r7, #3]
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	4613      	mov	r3, r2
 8006372:	011b      	lsls	r3, r3, #4
 8006374:	1a9b      	subs	r3, r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	440b      	add	r3, r1
 800637a:	331b      	adds	r3, #27
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b01      	cmp	r3, #1
 8006380:	f040 80fa 	bne.w	8006578 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006384:	78fa      	ldrb	r2, [r7, #3]
 8006386:	6879      	ldr	r1, [r7, #4]
 8006388:	4613      	mov	r3, r2
 800638a:	011b      	lsls	r3, r3, #4
 800638c:	1a9b      	subs	r3, r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	440b      	add	r3, r1
 8006392:	334c      	adds	r3, #76	@ 0x4c
 8006394:	2202      	movs	r2, #2
 8006396:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006398:	78fb      	ldrb	r3, [r7, #3]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	78fa      	ldrb	r2, [r7, #3]
 80063a8:	0151      	lsls	r1, r2, #5
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	440a      	add	r2, r1
 80063ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063b6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	78fa      	ldrb	r2, [r7, #3]
 80063c8:	0151      	lsls	r1, r2, #5
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	440a      	add	r2, r1
 80063ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063d6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80063d8:	78fb      	ldrb	r3, [r7, #3]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	78fa      	ldrb	r2, [r7, #3]
 80063e8:	0151      	lsls	r1, r2, #5
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	440a      	add	r2, r1
 80063ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063f2:	f023 0320 	bic.w	r3, r3, #32
 80063f6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80063f8:	78fa      	ldrb	r2, [r7, #3]
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	4613      	mov	r3, r2
 80063fe:	011b      	lsls	r3, r3, #4
 8006400:	1a9b      	subs	r3, r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	440b      	add	r3, r1
 8006406:	3326      	adds	r3, #38	@ 0x26
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00b      	beq.n	8006426 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800640e:	78fa      	ldrb	r2, [r7, #3]
 8006410:	6879      	ldr	r1, [r7, #4]
 8006412:	4613      	mov	r3, r2
 8006414:	011b      	lsls	r3, r3, #4
 8006416:	1a9b      	subs	r3, r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	440b      	add	r3, r1
 800641c:	3326      	adds	r3, #38	@ 0x26
 800641e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006420:	2b02      	cmp	r3, #2
 8006422:	f040 80a9 	bne.w	8006578 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006426:	78fb      	ldrb	r3, [r7, #3]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	4413      	add	r3, r2
 800642e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800643c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006444:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006446:	78fb      	ldrb	r3, [r7, #3]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	4413      	add	r3, r2
 800644e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006452:	461a      	mov	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	e08e      	b.n	8006578 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800645a:	78fa      	ldrb	r2, [r7, #3]
 800645c:	6879      	ldr	r1, [r7, #4]
 800645e:	4613      	mov	r3, r2
 8006460:	011b      	lsls	r3, r3, #4
 8006462:	1a9b      	subs	r3, r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	440b      	add	r3, r1
 8006468:	334d      	adds	r3, #77	@ 0x4d
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2b04      	cmp	r3, #4
 800646e:	d143      	bne.n	80064f8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006470:	78fa      	ldrb	r2, [r7, #3]
 8006472:	6879      	ldr	r1, [r7, #4]
 8006474:	4613      	mov	r3, r2
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	1a9b      	subs	r3, r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	440b      	add	r3, r1
 800647e:	334d      	adds	r3, #77	@ 0x4d
 8006480:	2202      	movs	r2, #2
 8006482:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006484:	78fa      	ldrb	r2, [r7, #3]
 8006486:	6879      	ldr	r1, [r7, #4]
 8006488:	4613      	mov	r3, r2
 800648a:	011b      	lsls	r3, r3, #4
 800648c:	1a9b      	subs	r3, r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	440b      	add	r3, r1
 8006492:	334c      	adds	r3, #76	@ 0x4c
 8006494:	2202      	movs	r2, #2
 8006496:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006498:	78fa      	ldrb	r2, [r7, #3]
 800649a:	6879      	ldr	r1, [r7, #4]
 800649c:	4613      	mov	r3, r2
 800649e:	011b      	lsls	r3, r3, #4
 80064a0:	1a9b      	subs	r3, r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	440b      	add	r3, r1
 80064a6:	3326      	adds	r3, #38	@ 0x26
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80064ae:	78fa      	ldrb	r2, [r7, #3]
 80064b0:	6879      	ldr	r1, [r7, #4]
 80064b2:	4613      	mov	r3, r2
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	1a9b      	subs	r3, r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	440b      	add	r3, r1
 80064bc:	3326      	adds	r3, #38	@ 0x26
 80064be:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d159      	bne.n	8006578 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80064c4:	78fb      	ldrb	r3, [r7, #3]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80064da:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80064e2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80064e4:	78fb      	ldrb	r3, [r7, #3]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064f0:	461a      	mov	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6013      	str	r3, [r2, #0]
 80064f6:	e03f      	b.n	8006578 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80064f8:	78fa      	ldrb	r2, [r7, #3]
 80064fa:	6879      	ldr	r1, [r7, #4]
 80064fc:	4613      	mov	r3, r2
 80064fe:	011b      	lsls	r3, r3, #4
 8006500:	1a9b      	subs	r3, r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	440b      	add	r3, r1
 8006506:	334d      	adds	r3, #77	@ 0x4d
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	2b08      	cmp	r3, #8
 800650c:	d126      	bne.n	800655c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800650e:	78fa      	ldrb	r2, [r7, #3]
 8006510:	6879      	ldr	r1, [r7, #4]
 8006512:	4613      	mov	r3, r2
 8006514:	011b      	lsls	r3, r3, #4
 8006516:	1a9b      	subs	r3, r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	440b      	add	r3, r1
 800651c:	334d      	adds	r3, #77	@ 0x4d
 800651e:	2202      	movs	r2, #2
 8006520:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006522:	78fa      	ldrb	r2, [r7, #3]
 8006524:	6879      	ldr	r1, [r7, #4]
 8006526:	4613      	mov	r3, r2
 8006528:	011b      	lsls	r3, r3, #4
 800652a:	1a9b      	subs	r3, r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	440b      	add	r3, r1
 8006530:	3344      	adds	r3, #68	@ 0x44
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	1c59      	adds	r1, r3, #1
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	4613      	mov	r3, r2
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	1a9b      	subs	r3, r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4403      	add	r3, r0
 8006542:	3344      	adds	r3, #68	@ 0x44
 8006544:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8006546:	78fa      	ldrb	r2, [r7, #3]
 8006548:	6879      	ldr	r1, [r7, #4]
 800654a:	4613      	mov	r3, r2
 800654c:	011b      	lsls	r3, r3, #4
 800654e:	1a9b      	subs	r3, r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	440b      	add	r3, r1
 8006554:	334c      	adds	r3, #76	@ 0x4c
 8006556:	2204      	movs	r2, #4
 8006558:	701a      	strb	r2, [r3, #0]
 800655a:	e00d      	b.n	8006578 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800655c:	78fa      	ldrb	r2, [r7, #3]
 800655e:	6879      	ldr	r1, [r7, #4]
 8006560:	4613      	mov	r3, r2
 8006562:	011b      	lsls	r3, r3, #4
 8006564:	1a9b      	subs	r3, r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	440b      	add	r3, r1
 800656a:	334d      	adds	r3, #77	@ 0x4d
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	2b02      	cmp	r3, #2
 8006570:	f000 8100 	beq.w	8006774 <HCD_HC_IN_IRQHandler+0xcca>
 8006574:	e000      	b.n	8006578 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006576:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006578:	78fa      	ldrb	r2, [r7, #3]
 800657a:	6879      	ldr	r1, [r7, #4]
 800657c:	4613      	mov	r3, r2
 800657e:	011b      	lsls	r3, r3, #4
 8006580:	1a9b      	subs	r3, r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	440b      	add	r3, r1
 8006586:	334c      	adds	r3, #76	@ 0x4c
 8006588:	781a      	ldrb	r2, [r3, #0]
 800658a:	78fb      	ldrb	r3, [r7, #3]
 800658c:	4619      	mov	r1, r3
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f00c fcea 	bl	8012f68 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006594:	e0ef      	b.n	8006776 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	78fa      	ldrb	r2, [r7, #3]
 800659c:	4611      	mov	r1, r2
 800659e:	4618      	mov	r0, r3
 80065a0:	f004 fe9f 	bl	800b2e2 <USB_ReadChInterrupts>
 80065a4:	4603      	mov	r3, r0
 80065a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065aa:	2b40      	cmp	r3, #64	@ 0x40
 80065ac:	d12f      	bne.n	800660e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80065ae:	78fb      	ldrb	r3, [r7, #3]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065ba:	461a      	mov	r2, r3
 80065bc:	2340      	movs	r3, #64	@ 0x40
 80065be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80065c0:	78fa      	ldrb	r2, [r7, #3]
 80065c2:	6879      	ldr	r1, [r7, #4]
 80065c4:	4613      	mov	r3, r2
 80065c6:	011b      	lsls	r3, r3, #4
 80065c8:	1a9b      	subs	r3, r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	440b      	add	r3, r1
 80065ce:	334d      	adds	r3, #77	@ 0x4d
 80065d0:	2205      	movs	r2, #5
 80065d2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80065d4:	78fa      	ldrb	r2, [r7, #3]
 80065d6:	6879      	ldr	r1, [r7, #4]
 80065d8:	4613      	mov	r3, r2
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	1a9b      	subs	r3, r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	440b      	add	r3, r1
 80065e2:	331a      	adds	r3, #26
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d109      	bne.n	80065fe <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80065ea:	78fa      	ldrb	r2, [r7, #3]
 80065ec:	6879      	ldr	r1, [r7, #4]
 80065ee:	4613      	mov	r3, r2
 80065f0:	011b      	lsls	r3, r3, #4
 80065f2:	1a9b      	subs	r3, r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	440b      	add	r3, r1
 80065f8:	3344      	adds	r3, #68	@ 0x44
 80065fa:	2200      	movs	r2, #0
 80065fc:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	78fa      	ldrb	r2, [r7, #3]
 8006604:	4611      	mov	r1, r2
 8006606:	4618      	mov	r0, r3
 8006608:	f005 fc0f 	bl	800be2a <USB_HC_Halt>
 800660c:	e0b3      	b.n	8006776 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	78fa      	ldrb	r2, [r7, #3]
 8006614:	4611      	mov	r1, r2
 8006616:	4618      	mov	r0, r3
 8006618:	f004 fe63 	bl	800b2e2 <USB_ReadChInterrupts>
 800661c:	4603      	mov	r3, r0
 800661e:	f003 0310 	and.w	r3, r3, #16
 8006622:	2b10      	cmp	r3, #16
 8006624:	f040 80a7 	bne.w	8006776 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006628:	78fa      	ldrb	r2, [r7, #3]
 800662a:	6879      	ldr	r1, [r7, #4]
 800662c:	4613      	mov	r3, r2
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	1a9b      	subs	r3, r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	440b      	add	r3, r1
 8006636:	3326      	adds	r3, #38	@ 0x26
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	2b03      	cmp	r3, #3
 800663c:	d11b      	bne.n	8006676 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800663e:	78fa      	ldrb	r2, [r7, #3]
 8006640:	6879      	ldr	r1, [r7, #4]
 8006642:	4613      	mov	r3, r2
 8006644:	011b      	lsls	r3, r3, #4
 8006646:	1a9b      	subs	r3, r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	440b      	add	r3, r1
 800664c:	3344      	adds	r3, #68	@ 0x44
 800664e:	2200      	movs	r2, #0
 8006650:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8006652:	78fa      	ldrb	r2, [r7, #3]
 8006654:	6879      	ldr	r1, [r7, #4]
 8006656:	4613      	mov	r3, r2
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	1a9b      	subs	r3, r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	440b      	add	r3, r1
 8006660:	334d      	adds	r3, #77	@ 0x4d
 8006662:	2204      	movs	r2, #4
 8006664:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	78fa      	ldrb	r2, [r7, #3]
 800666c:	4611      	mov	r1, r2
 800666e:	4618      	mov	r0, r3
 8006670:	f005 fbdb 	bl	800be2a <USB_HC_Halt>
 8006674:	e03f      	b.n	80066f6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006676:	78fa      	ldrb	r2, [r7, #3]
 8006678:	6879      	ldr	r1, [r7, #4]
 800667a:	4613      	mov	r3, r2
 800667c:	011b      	lsls	r3, r3, #4
 800667e:	1a9b      	subs	r3, r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	440b      	add	r3, r1
 8006684:	3326      	adds	r3, #38	@ 0x26
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00a      	beq.n	80066a2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800668c:	78fa      	ldrb	r2, [r7, #3]
 800668e:	6879      	ldr	r1, [r7, #4]
 8006690:	4613      	mov	r3, r2
 8006692:	011b      	lsls	r3, r3, #4
 8006694:	1a9b      	subs	r3, r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	440b      	add	r3, r1
 800669a:	3326      	adds	r3, #38	@ 0x26
 800669c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d129      	bne.n	80066f6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80066a2:	78fa      	ldrb	r2, [r7, #3]
 80066a4:	6879      	ldr	r1, [r7, #4]
 80066a6:	4613      	mov	r3, r2
 80066a8:	011b      	lsls	r3, r3, #4
 80066aa:	1a9b      	subs	r3, r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	440b      	add	r3, r1
 80066b0:	3344      	adds	r3, #68	@ 0x44
 80066b2:	2200      	movs	r2, #0
 80066b4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	799b      	ldrb	r3, [r3, #6]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00a      	beq.n	80066d4 <HCD_HC_IN_IRQHandler+0xc2a>
 80066be:	78fa      	ldrb	r2, [r7, #3]
 80066c0:	6879      	ldr	r1, [r7, #4]
 80066c2:	4613      	mov	r3, r2
 80066c4:	011b      	lsls	r3, r3, #4
 80066c6:	1a9b      	subs	r3, r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	440b      	add	r3, r1
 80066cc:	331b      	adds	r3, #27
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d110      	bne.n	80066f6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80066d4:	78fa      	ldrb	r2, [r7, #3]
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	4613      	mov	r3, r2
 80066da:	011b      	lsls	r3, r3, #4
 80066dc:	1a9b      	subs	r3, r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	440b      	add	r3, r1
 80066e2:	334d      	adds	r3, #77	@ 0x4d
 80066e4:	2204      	movs	r2, #4
 80066e6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	78fa      	ldrb	r2, [r7, #3]
 80066ee:	4611      	mov	r1, r2
 80066f0:	4618      	mov	r0, r3
 80066f2:	f005 fb9a 	bl	800be2a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80066f6:	78fa      	ldrb	r2, [r7, #3]
 80066f8:	6879      	ldr	r1, [r7, #4]
 80066fa:	4613      	mov	r3, r2
 80066fc:	011b      	lsls	r3, r3, #4
 80066fe:	1a9b      	subs	r3, r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	440b      	add	r3, r1
 8006704:	331b      	adds	r3, #27
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d129      	bne.n	8006760 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800670c:	78fa      	ldrb	r2, [r7, #3]
 800670e:	6879      	ldr	r1, [r7, #4]
 8006710:	4613      	mov	r3, r2
 8006712:	011b      	lsls	r3, r3, #4
 8006714:	1a9b      	subs	r3, r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	440b      	add	r3, r1
 800671a:	331b      	adds	r3, #27
 800671c:	2200      	movs	r2, #0
 800671e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006720:	78fb      	ldrb	r3, [r7, #3]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	4413      	add	r3, r2
 8006728:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	78fa      	ldrb	r2, [r7, #3]
 8006730:	0151      	lsls	r1, r2, #5
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	440a      	add	r2, r1
 8006736:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800673a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800673e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8006740:	78fb      	ldrb	r3, [r7, #3]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	4413      	add	r3, r2
 8006748:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	78fa      	ldrb	r2, [r7, #3]
 8006750:	0151      	lsls	r1, r2, #5
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	440a      	add	r2, r1
 8006756:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800675a:	f043 0320 	orr.w	r3, r3, #32
 800675e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006760:	78fb      	ldrb	r3, [r7, #3]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	4413      	add	r3, r2
 8006768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800676c:	461a      	mov	r2, r3
 800676e:	2310      	movs	r3, #16
 8006770:	6093      	str	r3, [r2, #8]
 8006772:	e000      	b.n	8006776 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8006774:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8006776:	3718      	adds	r7, #24
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	78fa      	ldrb	r2, [r7, #3]
 8006798:	4611      	mov	r1, r2
 800679a:	4618      	mov	r0, r3
 800679c:	f004 fda1 	bl	800b2e2 <USB_ReadChInterrupts>
 80067a0:	4603      	mov	r3, r0
 80067a2:	f003 0304 	and.w	r3, r3, #4
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	d11b      	bne.n	80067e2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80067aa:	78fb      	ldrb	r3, [r7, #3]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067b6:	461a      	mov	r2, r3
 80067b8:	2304      	movs	r3, #4
 80067ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80067bc:	78fa      	ldrb	r2, [r7, #3]
 80067be:	6879      	ldr	r1, [r7, #4]
 80067c0:	4613      	mov	r3, r2
 80067c2:	011b      	lsls	r3, r3, #4
 80067c4:	1a9b      	subs	r3, r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	440b      	add	r3, r1
 80067ca:	334d      	adds	r3, #77	@ 0x4d
 80067cc:	2207      	movs	r2, #7
 80067ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	78fa      	ldrb	r2, [r7, #3]
 80067d6:	4611      	mov	r1, r2
 80067d8:	4618      	mov	r0, r3
 80067da:	f005 fb26 	bl	800be2a <USB_HC_Halt>
 80067de:	f000 bc6f 	b.w	80070c0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	78fa      	ldrb	r2, [r7, #3]
 80067e8:	4611      	mov	r1, r2
 80067ea:	4618      	mov	r0, r3
 80067ec:	f004 fd79 	bl	800b2e2 <USB_ReadChInterrupts>
 80067f0:	4603      	mov	r3, r0
 80067f2:	f003 0320 	and.w	r3, r3, #32
 80067f6:	2b20      	cmp	r3, #32
 80067f8:	f040 8082 	bne.w	8006900 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80067fc:	78fb      	ldrb	r3, [r7, #3]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	4413      	add	r3, r2
 8006804:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006808:	461a      	mov	r2, r3
 800680a:	2320      	movs	r3, #32
 800680c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800680e:	78fa      	ldrb	r2, [r7, #3]
 8006810:	6879      	ldr	r1, [r7, #4]
 8006812:	4613      	mov	r3, r2
 8006814:	011b      	lsls	r3, r3, #4
 8006816:	1a9b      	subs	r3, r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	440b      	add	r3, r1
 800681c:	3319      	adds	r3, #25
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d124      	bne.n	800686e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8006824:	78fa      	ldrb	r2, [r7, #3]
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	4613      	mov	r3, r2
 800682a:	011b      	lsls	r3, r3, #4
 800682c:	1a9b      	subs	r3, r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	440b      	add	r3, r1
 8006832:	3319      	adds	r3, #25
 8006834:	2200      	movs	r2, #0
 8006836:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006838:	78fa      	ldrb	r2, [r7, #3]
 800683a:	6879      	ldr	r1, [r7, #4]
 800683c:	4613      	mov	r3, r2
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	1a9b      	subs	r3, r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	440b      	add	r3, r1
 8006846:	334c      	adds	r3, #76	@ 0x4c
 8006848:	2202      	movs	r2, #2
 800684a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800684c:	78fa      	ldrb	r2, [r7, #3]
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	4613      	mov	r3, r2
 8006852:	011b      	lsls	r3, r3, #4
 8006854:	1a9b      	subs	r3, r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	440b      	add	r3, r1
 800685a:	334d      	adds	r3, #77	@ 0x4d
 800685c:	2203      	movs	r2, #3
 800685e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	78fa      	ldrb	r2, [r7, #3]
 8006866:	4611      	mov	r1, r2
 8006868:	4618      	mov	r0, r3
 800686a:	f005 fade 	bl	800be2a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800686e:	78fa      	ldrb	r2, [r7, #3]
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	4613      	mov	r3, r2
 8006874:	011b      	lsls	r3, r3, #4
 8006876:	1a9b      	subs	r3, r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	440b      	add	r3, r1
 800687c:	331a      	adds	r3, #26
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	2b01      	cmp	r3, #1
 8006882:	f040 841d 	bne.w	80070c0 <HCD_HC_OUT_IRQHandler+0x944>
 8006886:	78fa      	ldrb	r2, [r7, #3]
 8006888:	6879      	ldr	r1, [r7, #4]
 800688a:	4613      	mov	r3, r2
 800688c:	011b      	lsls	r3, r3, #4
 800688e:	1a9b      	subs	r3, r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	440b      	add	r3, r1
 8006894:	331b      	adds	r3, #27
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	f040 8411 	bne.w	80070c0 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800689e:	78fa      	ldrb	r2, [r7, #3]
 80068a0:	6879      	ldr	r1, [r7, #4]
 80068a2:	4613      	mov	r3, r2
 80068a4:	011b      	lsls	r3, r3, #4
 80068a6:	1a9b      	subs	r3, r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	440b      	add	r3, r1
 80068ac:	3326      	adds	r3, #38	@ 0x26
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d009      	beq.n	80068c8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80068b4:	78fa      	ldrb	r2, [r7, #3]
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	4613      	mov	r3, r2
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	1a9b      	subs	r3, r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	440b      	add	r3, r1
 80068c2:	331b      	adds	r3, #27
 80068c4:	2201      	movs	r2, #1
 80068c6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80068c8:	78fa      	ldrb	r2, [r7, #3]
 80068ca:	6879      	ldr	r1, [r7, #4]
 80068cc:	4613      	mov	r3, r2
 80068ce:	011b      	lsls	r3, r3, #4
 80068d0:	1a9b      	subs	r3, r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	440b      	add	r3, r1
 80068d6:	334d      	adds	r3, #77	@ 0x4d
 80068d8:	2203      	movs	r2, #3
 80068da:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	78fa      	ldrb	r2, [r7, #3]
 80068e2:	4611      	mov	r1, r2
 80068e4:	4618      	mov	r0, r3
 80068e6:	f005 faa0 	bl	800be2a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80068ea:	78fa      	ldrb	r2, [r7, #3]
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	4613      	mov	r3, r2
 80068f0:	011b      	lsls	r3, r3, #4
 80068f2:	1a9b      	subs	r3, r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	440b      	add	r3, r1
 80068f8:	3344      	adds	r3, #68	@ 0x44
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	e3df      	b.n	80070c0 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	78fa      	ldrb	r2, [r7, #3]
 8006906:	4611      	mov	r1, r2
 8006908:	4618      	mov	r0, r3
 800690a:	f004 fcea 	bl	800b2e2 <USB_ReadChInterrupts>
 800690e:	4603      	mov	r3, r0
 8006910:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006918:	d111      	bne.n	800693e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	4413      	add	r3, r2
 8006922:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006926:	461a      	mov	r2, r3
 8006928:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800692c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	78fa      	ldrb	r2, [r7, #3]
 8006934:	4611      	mov	r1, r2
 8006936:	4618      	mov	r0, r3
 8006938:	f005 fa77 	bl	800be2a <USB_HC_Halt>
 800693c:	e3c0      	b.n	80070c0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	78fa      	ldrb	r2, [r7, #3]
 8006944:	4611      	mov	r1, r2
 8006946:	4618      	mov	r0, r3
 8006948:	f004 fccb 	bl	800b2e2 <USB_ReadChInterrupts>
 800694c:	4603      	mov	r3, r0
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b01      	cmp	r3, #1
 8006954:	d168      	bne.n	8006a28 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006956:	78fa      	ldrb	r2, [r7, #3]
 8006958:	6879      	ldr	r1, [r7, #4]
 800695a:	4613      	mov	r3, r2
 800695c:	011b      	lsls	r3, r3, #4
 800695e:	1a9b      	subs	r3, r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	440b      	add	r3, r1
 8006964:	3344      	adds	r3, #68	@ 0x44
 8006966:	2200      	movs	r2, #0
 8006968:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	78fa      	ldrb	r2, [r7, #3]
 8006970:	4611      	mov	r1, r2
 8006972:	4618      	mov	r0, r3
 8006974:	f004 fcb5 	bl	800b2e2 <USB_ReadChInterrupts>
 8006978:	4603      	mov	r3, r0
 800697a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800697e:	2b40      	cmp	r3, #64	@ 0x40
 8006980:	d112      	bne.n	80069a8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8006982:	78fa      	ldrb	r2, [r7, #3]
 8006984:	6879      	ldr	r1, [r7, #4]
 8006986:	4613      	mov	r3, r2
 8006988:	011b      	lsls	r3, r3, #4
 800698a:	1a9b      	subs	r3, r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	440b      	add	r3, r1
 8006990:	3319      	adds	r3, #25
 8006992:	2201      	movs	r2, #1
 8006994:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006996:	78fb      	ldrb	r3, [r7, #3]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	4413      	add	r3, r2
 800699e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069a2:	461a      	mov	r2, r3
 80069a4:	2340      	movs	r3, #64	@ 0x40
 80069a6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80069a8:	78fa      	ldrb	r2, [r7, #3]
 80069aa:	6879      	ldr	r1, [r7, #4]
 80069ac:	4613      	mov	r3, r2
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	1a9b      	subs	r3, r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	440b      	add	r3, r1
 80069b6:	331b      	adds	r3, #27
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d019      	beq.n	80069f2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80069be:	78fa      	ldrb	r2, [r7, #3]
 80069c0:	6879      	ldr	r1, [r7, #4]
 80069c2:	4613      	mov	r3, r2
 80069c4:	011b      	lsls	r3, r3, #4
 80069c6:	1a9b      	subs	r3, r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	440b      	add	r3, r1
 80069cc:	331b      	adds	r3, #27
 80069ce:	2200      	movs	r2, #0
 80069d0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80069d2:	78fb      	ldrb	r3, [r7, #3]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	78fa      	ldrb	r2, [r7, #3]
 80069e2:	0151      	lsls	r1, r2, #5
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	440a      	add	r2, r1
 80069e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069f0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80069f2:	78fb      	ldrb	r3, [r7, #3]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069fe:	461a      	mov	r2, r3
 8006a00:	2301      	movs	r3, #1
 8006a02:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8006a04:	78fa      	ldrb	r2, [r7, #3]
 8006a06:	6879      	ldr	r1, [r7, #4]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	011b      	lsls	r3, r3, #4
 8006a0c:	1a9b      	subs	r3, r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	440b      	add	r3, r1
 8006a12:	334d      	adds	r3, #77	@ 0x4d
 8006a14:	2201      	movs	r2, #1
 8006a16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	78fa      	ldrb	r2, [r7, #3]
 8006a1e:	4611      	mov	r1, r2
 8006a20:	4618      	mov	r0, r3
 8006a22:	f005 fa02 	bl	800be2a <USB_HC_Halt>
 8006a26:	e34b      	b.n	80070c0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	78fa      	ldrb	r2, [r7, #3]
 8006a2e:	4611      	mov	r1, r2
 8006a30:	4618      	mov	r0, r3
 8006a32:	f004 fc56 	bl	800b2e2 <USB_ReadChInterrupts>
 8006a36:	4603      	mov	r3, r0
 8006a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a3c:	2b40      	cmp	r3, #64	@ 0x40
 8006a3e:	d139      	bne.n	8006ab4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8006a40:	78fa      	ldrb	r2, [r7, #3]
 8006a42:	6879      	ldr	r1, [r7, #4]
 8006a44:	4613      	mov	r3, r2
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	1a9b      	subs	r3, r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	440b      	add	r3, r1
 8006a4e:	334d      	adds	r3, #77	@ 0x4d
 8006a50:	2205      	movs	r2, #5
 8006a52:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8006a54:	78fa      	ldrb	r2, [r7, #3]
 8006a56:	6879      	ldr	r1, [r7, #4]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	1a9b      	subs	r3, r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	440b      	add	r3, r1
 8006a62:	331a      	adds	r3, #26
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d109      	bne.n	8006a7e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8006a6a:	78fa      	ldrb	r2, [r7, #3]
 8006a6c:	6879      	ldr	r1, [r7, #4]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	011b      	lsls	r3, r3, #4
 8006a72:	1a9b      	subs	r3, r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	440b      	add	r3, r1
 8006a78:	3319      	adds	r3, #25
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8006a7e:	78fa      	ldrb	r2, [r7, #3]
 8006a80:	6879      	ldr	r1, [r7, #4]
 8006a82:	4613      	mov	r3, r2
 8006a84:	011b      	lsls	r3, r3, #4
 8006a86:	1a9b      	subs	r3, r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	440b      	add	r3, r1
 8006a8c:	3344      	adds	r3, #68	@ 0x44
 8006a8e:	2200      	movs	r2, #0
 8006a90:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	78fa      	ldrb	r2, [r7, #3]
 8006a98:	4611      	mov	r1, r2
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f005 f9c5 	bl	800be2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006aa0:	78fb      	ldrb	r3, [r7, #3]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006aac:	461a      	mov	r2, r3
 8006aae:	2340      	movs	r3, #64	@ 0x40
 8006ab0:	6093      	str	r3, [r2, #8]
 8006ab2:	e305      	b.n	80070c0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	78fa      	ldrb	r2, [r7, #3]
 8006aba:	4611      	mov	r1, r2
 8006abc:	4618      	mov	r0, r3
 8006abe:	f004 fc10 	bl	800b2e2 <USB_ReadChInterrupts>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	f003 0308 	and.w	r3, r3, #8
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d11a      	bne.n	8006b02 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006acc:	78fb      	ldrb	r3, [r7, #3]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ad8:	461a      	mov	r2, r3
 8006ada:	2308      	movs	r3, #8
 8006adc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006ade:	78fa      	ldrb	r2, [r7, #3]
 8006ae0:	6879      	ldr	r1, [r7, #4]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	011b      	lsls	r3, r3, #4
 8006ae6:	1a9b      	subs	r3, r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	440b      	add	r3, r1
 8006aec:	334d      	adds	r3, #77	@ 0x4d
 8006aee:	2206      	movs	r2, #6
 8006af0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	78fa      	ldrb	r2, [r7, #3]
 8006af8:	4611      	mov	r1, r2
 8006afa:	4618      	mov	r0, r3
 8006afc:	f005 f995 	bl	800be2a <USB_HC_Halt>
 8006b00:	e2de      	b.n	80070c0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	78fa      	ldrb	r2, [r7, #3]
 8006b08:	4611      	mov	r1, r2
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f004 fbe9 	bl	800b2e2 <USB_ReadChInterrupts>
 8006b10:	4603      	mov	r3, r0
 8006b12:	f003 0310 	and.w	r3, r3, #16
 8006b16:	2b10      	cmp	r3, #16
 8006b18:	d144      	bne.n	8006ba4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006b1a:	78fa      	ldrb	r2, [r7, #3]
 8006b1c:	6879      	ldr	r1, [r7, #4]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	011b      	lsls	r3, r3, #4
 8006b22:	1a9b      	subs	r3, r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	440b      	add	r3, r1
 8006b28:	3344      	adds	r3, #68	@ 0x44
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8006b2e:	78fa      	ldrb	r2, [r7, #3]
 8006b30:	6879      	ldr	r1, [r7, #4]
 8006b32:	4613      	mov	r3, r2
 8006b34:	011b      	lsls	r3, r3, #4
 8006b36:	1a9b      	subs	r3, r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	440b      	add	r3, r1
 8006b3c:	334d      	adds	r3, #77	@ 0x4d
 8006b3e:	2204      	movs	r2, #4
 8006b40:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8006b42:	78fa      	ldrb	r2, [r7, #3]
 8006b44:	6879      	ldr	r1, [r7, #4]
 8006b46:	4613      	mov	r3, r2
 8006b48:	011b      	lsls	r3, r3, #4
 8006b4a:	1a9b      	subs	r3, r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	440b      	add	r3, r1
 8006b50:	3319      	adds	r3, #25
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d114      	bne.n	8006b82 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8006b58:	78fa      	ldrb	r2, [r7, #3]
 8006b5a:	6879      	ldr	r1, [r7, #4]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	011b      	lsls	r3, r3, #4
 8006b60:	1a9b      	subs	r3, r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	440b      	add	r3, r1
 8006b66:	3318      	adds	r3, #24
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d109      	bne.n	8006b82 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8006b6e:	78fa      	ldrb	r2, [r7, #3]
 8006b70:	6879      	ldr	r1, [r7, #4]
 8006b72:	4613      	mov	r3, r2
 8006b74:	011b      	lsls	r3, r3, #4
 8006b76:	1a9b      	subs	r3, r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	440b      	add	r3, r1
 8006b7c:	3319      	adds	r3, #25
 8006b7e:	2201      	movs	r2, #1
 8006b80:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	78fa      	ldrb	r2, [r7, #3]
 8006b88:	4611      	mov	r1, r2
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f005 f94d 	bl	800be2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006b90:	78fb      	ldrb	r3, [r7, #3]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	2310      	movs	r3, #16
 8006ba0:	6093      	str	r3, [r2, #8]
 8006ba2:	e28d      	b.n	80070c0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	78fa      	ldrb	r2, [r7, #3]
 8006baa:	4611      	mov	r1, r2
 8006bac:	4618      	mov	r0, r3
 8006bae:	f004 fb98 	bl	800b2e2 <USB_ReadChInterrupts>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bb8:	2b80      	cmp	r3, #128	@ 0x80
 8006bba:	d169      	bne.n	8006c90 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	799b      	ldrb	r3, [r3, #6]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d111      	bne.n	8006be8 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8006bc4:	78fa      	ldrb	r2, [r7, #3]
 8006bc6:	6879      	ldr	r1, [r7, #4]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	011b      	lsls	r3, r3, #4
 8006bcc:	1a9b      	subs	r3, r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	440b      	add	r3, r1
 8006bd2:	334d      	adds	r3, #77	@ 0x4d
 8006bd4:	2207      	movs	r2, #7
 8006bd6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	78fa      	ldrb	r2, [r7, #3]
 8006bde:	4611      	mov	r1, r2
 8006be0:	4618      	mov	r0, r3
 8006be2:	f005 f922 	bl	800be2a <USB_HC_Halt>
 8006be6:	e049      	b.n	8006c7c <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8006be8:	78fa      	ldrb	r2, [r7, #3]
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	4613      	mov	r3, r2
 8006bee:	011b      	lsls	r3, r3, #4
 8006bf0:	1a9b      	subs	r3, r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	440b      	add	r3, r1
 8006bf6:	3344      	adds	r3, #68	@ 0x44
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	1c59      	adds	r1, r3, #1
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	011b      	lsls	r3, r3, #4
 8006c02:	1a9b      	subs	r3, r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4403      	add	r3, r0
 8006c08:	3344      	adds	r3, #68	@ 0x44
 8006c0a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006c0c:	78fa      	ldrb	r2, [r7, #3]
 8006c0e:	6879      	ldr	r1, [r7, #4]
 8006c10:	4613      	mov	r3, r2
 8006c12:	011b      	lsls	r3, r3, #4
 8006c14:	1a9b      	subs	r3, r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	440b      	add	r3, r1
 8006c1a:	3344      	adds	r3, #68	@ 0x44
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d922      	bls.n	8006c68 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006c22:	78fa      	ldrb	r2, [r7, #3]
 8006c24:	6879      	ldr	r1, [r7, #4]
 8006c26:	4613      	mov	r3, r2
 8006c28:	011b      	lsls	r3, r3, #4
 8006c2a:	1a9b      	subs	r3, r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	440b      	add	r3, r1
 8006c30:	3344      	adds	r3, #68	@ 0x44
 8006c32:	2200      	movs	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006c36:	78fa      	ldrb	r2, [r7, #3]
 8006c38:	6879      	ldr	r1, [r7, #4]
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	011b      	lsls	r3, r3, #4
 8006c3e:	1a9b      	subs	r3, r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	440b      	add	r3, r1
 8006c44:	334c      	adds	r3, #76	@ 0x4c
 8006c46:	2204      	movs	r2, #4
 8006c48:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006c4a:	78fa      	ldrb	r2, [r7, #3]
 8006c4c:	6879      	ldr	r1, [r7, #4]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	011b      	lsls	r3, r3, #4
 8006c52:	1a9b      	subs	r3, r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	440b      	add	r3, r1
 8006c58:	334c      	adds	r3, #76	@ 0x4c
 8006c5a:	781a      	ldrb	r2, [r3, #0]
 8006c5c:	78fb      	ldrb	r3, [r7, #3]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f00c f981 	bl	8012f68 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006c66:	e009      	b.n	8006c7c <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006c68:	78fa      	ldrb	r2, [r7, #3]
 8006c6a:	6879      	ldr	r1, [r7, #4]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	011b      	lsls	r3, r3, #4
 8006c70:	1a9b      	subs	r3, r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	440b      	add	r3, r1
 8006c76:	334c      	adds	r3, #76	@ 0x4c
 8006c78:	2202      	movs	r2, #2
 8006c7a:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006c7c:	78fb      	ldrb	r3, [r7, #3]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c88:	461a      	mov	r2, r3
 8006c8a:	2380      	movs	r3, #128	@ 0x80
 8006c8c:	6093      	str	r3, [r2, #8]
 8006c8e:	e217      	b.n	80070c0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	78fa      	ldrb	r2, [r7, #3]
 8006c96:	4611      	mov	r1, r2
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f004 fb22 	bl	800b2e2 <USB_ReadChInterrupts>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ca8:	d11b      	bne.n	8006ce2 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006caa:	78fa      	ldrb	r2, [r7, #3]
 8006cac:	6879      	ldr	r1, [r7, #4]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	011b      	lsls	r3, r3, #4
 8006cb2:	1a9b      	subs	r3, r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	440b      	add	r3, r1
 8006cb8:	334d      	adds	r3, #77	@ 0x4d
 8006cba:	2209      	movs	r2, #9
 8006cbc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	78fa      	ldrb	r2, [r7, #3]
 8006cc4:	4611      	mov	r1, r2
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f005 f8af 	bl	800be2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006ccc:	78fb      	ldrb	r3, [r7, #3]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cd8:	461a      	mov	r2, r3
 8006cda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006cde:	6093      	str	r3, [r2, #8]
 8006ce0:	e1ee      	b.n	80070c0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	78fa      	ldrb	r2, [r7, #3]
 8006ce8:	4611      	mov	r1, r2
 8006cea:	4618      	mov	r0, r3
 8006cec:	f004 faf9 	bl	800b2e2 <USB_ReadChInterrupts>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	f040 81df 	bne.w	80070ba <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006cfc:	78fb      	ldrb	r3, [r7, #3]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d08:	461a      	mov	r2, r3
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006d0e:	78fa      	ldrb	r2, [r7, #3]
 8006d10:	6879      	ldr	r1, [r7, #4]
 8006d12:	4613      	mov	r3, r2
 8006d14:	011b      	lsls	r3, r3, #4
 8006d16:	1a9b      	subs	r3, r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	440b      	add	r3, r1
 8006d1c:	334d      	adds	r3, #77	@ 0x4d
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	f040 8093 	bne.w	8006e4c <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006d26:	78fa      	ldrb	r2, [r7, #3]
 8006d28:	6879      	ldr	r1, [r7, #4]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	011b      	lsls	r3, r3, #4
 8006d2e:	1a9b      	subs	r3, r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	440b      	add	r3, r1
 8006d34:	334d      	adds	r3, #77	@ 0x4d
 8006d36:	2202      	movs	r2, #2
 8006d38:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006d3a:	78fa      	ldrb	r2, [r7, #3]
 8006d3c:	6879      	ldr	r1, [r7, #4]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	011b      	lsls	r3, r3, #4
 8006d42:	1a9b      	subs	r3, r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	440b      	add	r3, r1
 8006d48:	334c      	adds	r3, #76	@ 0x4c
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006d4e:	78fa      	ldrb	r2, [r7, #3]
 8006d50:	6879      	ldr	r1, [r7, #4]
 8006d52:	4613      	mov	r3, r2
 8006d54:	011b      	lsls	r3, r3, #4
 8006d56:	1a9b      	subs	r3, r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	440b      	add	r3, r1
 8006d5c:	3326      	adds	r3, #38	@ 0x26
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d00b      	beq.n	8006d7c <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8006d64:	78fa      	ldrb	r2, [r7, #3]
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	011b      	lsls	r3, r3, #4
 8006d6c:	1a9b      	subs	r3, r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	440b      	add	r3, r1
 8006d72:	3326      	adds	r3, #38	@ 0x26
 8006d74:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	f040 8190 	bne.w	800709c <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	799b      	ldrb	r3, [r3, #6]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d115      	bne.n	8006db0 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8006d84:	78fa      	ldrb	r2, [r7, #3]
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	011b      	lsls	r3, r3, #4
 8006d8c:	1a9b      	subs	r3, r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	440b      	add	r3, r1
 8006d92:	333d      	adds	r3, #61	@ 0x3d
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	78fa      	ldrb	r2, [r7, #3]
 8006d98:	f083 0301 	eor.w	r3, r3, #1
 8006d9c:	b2d8      	uxtb	r0, r3
 8006d9e:	6879      	ldr	r1, [r7, #4]
 8006da0:	4613      	mov	r3, r2
 8006da2:	011b      	lsls	r3, r3, #4
 8006da4:	1a9b      	subs	r3, r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	440b      	add	r3, r1
 8006daa:	333d      	adds	r3, #61	@ 0x3d
 8006dac:	4602      	mov	r2, r0
 8006dae:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	799b      	ldrb	r3, [r3, #6]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	f040 8171 	bne.w	800709c <HCD_HC_OUT_IRQHandler+0x920>
 8006dba:	78fa      	ldrb	r2, [r7, #3]
 8006dbc:	6879      	ldr	r1, [r7, #4]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	011b      	lsls	r3, r3, #4
 8006dc2:	1a9b      	subs	r3, r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	440b      	add	r3, r1
 8006dc8:	3334      	adds	r3, #52	@ 0x34
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 8165 	beq.w	800709c <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8006dd2:	78fa      	ldrb	r2, [r7, #3]
 8006dd4:	6879      	ldr	r1, [r7, #4]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	011b      	lsls	r3, r3, #4
 8006dda:	1a9b      	subs	r3, r3, r2
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	440b      	add	r3, r1
 8006de0:	3334      	adds	r3, #52	@ 0x34
 8006de2:	6819      	ldr	r1, [r3, #0]
 8006de4:	78fa      	ldrb	r2, [r7, #3]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	4613      	mov	r3, r2
 8006dea:	011b      	lsls	r3, r3, #4
 8006dec:	1a9b      	subs	r3, r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4403      	add	r3, r0
 8006df2:	3328      	adds	r3, #40	@ 0x28
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	440b      	add	r3, r1
 8006df8:	1e59      	subs	r1, r3, #1
 8006dfa:	78fa      	ldrb	r2, [r7, #3]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	011b      	lsls	r3, r3, #4
 8006e02:	1a9b      	subs	r3, r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4403      	add	r3, r0
 8006e08:	3328      	adds	r3, #40	@ 0x28
 8006e0a:	881b      	ldrh	r3, [r3, #0]
 8006e0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e10:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 813f 	beq.w	800709c <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006e1e:	78fa      	ldrb	r2, [r7, #3]
 8006e20:	6879      	ldr	r1, [r7, #4]
 8006e22:	4613      	mov	r3, r2
 8006e24:	011b      	lsls	r3, r3, #4
 8006e26:	1a9b      	subs	r3, r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	440b      	add	r3, r1
 8006e2c:	333d      	adds	r3, #61	@ 0x3d
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	78fa      	ldrb	r2, [r7, #3]
 8006e32:	f083 0301 	eor.w	r3, r3, #1
 8006e36:	b2d8      	uxtb	r0, r3
 8006e38:	6879      	ldr	r1, [r7, #4]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	011b      	lsls	r3, r3, #4
 8006e3e:	1a9b      	subs	r3, r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	440b      	add	r3, r1
 8006e44:	333d      	adds	r3, #61	@ 0x3d
 8006e46:	4602      	mov	r2, r0
 8006e48:	701a      	strb	r2, [r3, #0]
 8006e4a:	e127      	b.n	800709c <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006e4c:	78fa      	ldrb	r2, [r7, #3]
 8006e4e:	6879      	ldr	r1, [r7, #4]
 8006e50:	4613      	mov	r3, r2
 8006e52:	011b      	lsls	r3, r3, #4
 8006e54:	1a9b      	subs	r3, r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	440b      	add	r3, r1
 8006e5a:	334d      	adds	r3, #77	@ 0x4d
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d120      	bne.n	8006ea4 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006e62:	78fa      	ldrb	r2, [r7, #3]
 8006e64:	6879      	ldr	r1, [r7, #4]
 8006e66:	4613      	mov	r3, r2
 8006e68:	011b      	lsls	r3, r3, #4
 8006e6a:	1a9b      	subs	r3, r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	440b      	add	r3, r1
 8006e70:	334d      	adds	r3, #77	@ 0x4d
 8006e72:	2202      	movs	r2, #2
 8006e74:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006e76:	78fa      	ldrb	r2, [r7, #3]
 8006e78:	6879      	ldr	r1, [r7, #4]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	011b      	lsls	r3, r3, #4
 8006e7e:	1a9b      	subs	r3, r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	440b      	add	r3, r1
 8006e84:	331b      	adds	r3, #27
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	f040 8107 	bne.w	800709c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006e8e:	78fa      	ldrb	r2, [r7, #3]
 8006e90:	6879      	ldr	r1, [r7, #4]
 8006e92:	4613      	mov	r3, r2
 8006e94:	011b      	lsls	r3, r3, #4
 8006e96:	1a9b      	subs	r3, r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	440b      	add	r3, r1
 8006e9c:	334c      	adds	r3, #76	@ 0x4c
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	701a      	strb	r2, [r3, #0]
 8006ea2:	e0fb      	b.n	800709c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006ea4:	78fa      	ldrb	r2, [r7, #3]
 8006ea6:	6879      	ldr	r1, [r7, #4]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	1a9b      	subs	r3, r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	440b      	add	r3, r1
 8006eb2:	334d      	adds	r3, #77	@ 0x4d
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	d13a      	bne.n	8006f30 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006eba:	78fa      	ldrb	r2, [r7, #3]
 8006ebc:	6879      	ldr	r1, [r7, #4]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	011b      	lsls	r3, r3, #4
 8006ec2:	1a9b      	subs	r3, r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	440b      	add	r3, r1
 8006ec8:	334d      	adds	r3, #77	@ 0x4d
 8006eca:	2202      	movs	r2, #2
 8006ecc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006ece:	78fa      	ldrb	r2, [r7, #3]
 8006ed0:	6879      	ldr	r1, [r7, #4]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	011b      	lsls	r3, r3, #4
 8006ed6:	1a9b      	subs	r3, r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	440b      	add	r3, r1
 8006edc:	334c      	adds	r3, #76	@ 0x4c
 8006ede:	2202      	movs	r2, #2
 8006ee0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006ee2:	78fa      	ldrb	r2, [r7, #3]
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	011b      	lsls	r3, r3, #4
 8006eea:	1a9b      	subs	r3, r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	440b      	add	r3, r1
 8006ef0:	331b      	adds	r3, #27
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	f040 80d1 	bne.w	800709c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8006efa:	78fa      	ldrb	r2, [r7, #3]
 8006efc:	6879      	ldr	r1, [r7, #4]
 8006efe:	4613      	mov	r3, r2
 8006f00:	011b      	lsls	r3, r3, #4
 8006f02:	1a9b      	subs	r3, r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	440b      	add	r3, r1
 8006f08:	331b      	adds	r3, #27
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006f0e:	78fb      	ldrb	r3, [r7, #3]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	78fa      	ldrb	r2, [r7, #3]
 8006f1e:	0151      	lsls	r1, r2, #5
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	440a      	add	r2, r1
 8006f24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f2c:	6053      	str	r3, [r2, #4]
 8006f2e:	e0b5      	b.n	800709c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006f30:	78fa      	ldrb	r2, [r7, #3]
 8006f32:	6879      	ldr	r1, [r7, #4]
 8006f34:	4613      	mov	r3, r2
 8006f36:	011b      	lsls	r3, r3, #4
 8006f38:	1a9b      	subs	r3, r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	440b      	add	r3, r1
 8006f3e:	334d      	adds	r3, #77	@ 0x4d
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	2b05      	cmp	r3, #5
 8006f44:	d114      	bne.n	8006f70 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006f46:	78fa      	ldrb	r2, [r7, #3]
 8006f48:	6879      	ldr	r1, [r7, #4]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	011b      	lsls	r3, r3, #4
 8006f4e:	1a9b      	subs	r3, r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	440b      	add	r3, r1
 8006f54:	334d      	adds	r3, #77	@ 0x4d
 8006f56:	2202      	movs	r2, #2
 8006f58:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8006f5a:	78fa      	ldrb	r2, [r7, #3]
 8006f5c:	6879      	ldr	r1, [r7, #4]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	011b      	lsls	r3, r3, #4
 8006f62:	1a9b      	subs	r3, r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	440b      	add	r3, r1
 8006f68:	334c      	adds	r3, #76	@ 0x4c
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	701a      	strb	r2, [r3, #0]
 8006f6e:	e095      	b.n	800709c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006f70:	78fa      	ldrb	r2, [r7, #3]
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	4613      	mov	r3, r2
 8006f76:	011b      	lsls	r3, r3, #4
 8006f78:	1a9b      	subs	r3, r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	440b      	add	r3, r1
 8006f7e:	334d      	adds	r3, #77	@ 0x4d
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	2b06      	cmp	r3, #6
 8006f84:	d114      	bne.n	8006fb0 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006f86:	78fa      	ldrb	r2, [r7, #3]
 8006f88:	6879      	ldr	r1, [r7, #4]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	011b      	lsls	r3, r3, #4
 8006f8e:	1a9b      	subs	r3, r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	440b      	add	r3, r1
 8006f94:	334d      	adds	r3, #77	@ 0x4d
 8006f96:	2202      	movs	r2, #2
 8006f98:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8006f9a:	78fa      	ldrb	r2, [r7, #3]
 8006f9c:	6879      	ldr	r1, [r7, #4]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	011b      	lsls	r3, r3, #4
 8006fa2:	1a9b      	subs	r3, r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	440b      	add	r3, r1
 8006fa8:	334c      	adds	r3, #76	@ 0x4c
 8006faa:	2205      	movs	r2, #5
 8006fac:	701a      	strb	r2, [r3, #0]
 8006fae:	e075      	b.n	800709c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006fb0:	78fa      	ldrb	r2, [r7, #3]
 8006fb2:	6879      	ldr	r1, [r7, #4]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	011b      	lsls	r3, r3, #4
 8006fb8:	1a9b      	subs	r3, r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	440b      	add	r3, r1
 8006fbe:	334d      	adds	r3, #77	@ 0x4d
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	2b07      	cmp	r3, #7
 8006fc4:	d00a      	beq.n	8006fdc <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006fc6:	78fa      	ldrb	r2, [r7, #3]
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	011b      	lsls	r3, r3, #4
 8006fce:	1a9b      	subs	r3, r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	440b      	add	r3, r1
 8006fd4:	334d      	adds	r3, #77	@ 0x4d
 8006fd6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006fd8:	2b09      	cmp	r3, #9
 8006fda:	d170      	bne.n	80070be <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006fdc:	78fa      	ldrb	r2, [r7, #3]
 8006fde:	6879      	ldr	r1, [r7, #4]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	011b      	lsls	r3, r3, #4
 8006fe4:	1a9b      	subs	r3, r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	440b      	add	r3, r1
 8006fea:	334d      	adds	r3, #77	@ 0x4d
 8006fec:	2202      	movs	r2, #2
 8006fee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006ff0:	78fa      	ldrb	r2, [r7, #3]
 8006ff2:	6879      	ldr	r1, [r7, #4]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	011b      	lsls	r3, r3, #4
 8006ff8:	1a9b      	subs	r3, r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	440b      	add	r3, r1
 8006ffe:	3344      	adds	r3, #68	@ 0x44
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	1c59      	adds	r1, r3, #1
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	4613      	mov	r3, r2
 8007008:	011b      	lsls	r3, r3, #4
 800700a:	1a9b      	subs	r3, r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4403      	add	r3, r0
 8007010:	3344      	adds	r3, #68	@ 0x44
 8007012:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007014:	78fa      	ldrb	r2, [r7, #3]
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	4613      	mov	r3, r2
 800701a:	011b      	lsls	r3, r3, #4
 800701c:	1a9b      	subs	r3, r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	440b      	add	r3, r1
 8007022:	3344      	adds	r3, #68	@ 0x44
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b02      	cmp	r3, #2
 8007028:	d914      	bls.n	8007054 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800702a:	78fa      	ldrb	r2, [r7, #3]
 800702c:	6879      	ldr	r1, [r7, #4]
 800702e:	4613      	mov	r3, r2
 8007030:	011b      	lsls	r3, r3, #4
 8007032:	1a9b      	subs	r3, r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	440b      	add	r3, r1
 8007038:	3344      	adds	r3, #68	@ 0x44
 800703a:	2200      	movs	r2, #0
 800703c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800703e:	78fa      	ldrb	r2, [r7, #3]
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	4613      	mov	r3, r2
 8007044:	011b      	lsls	r3, r3, #4
 8007046:	1a9b      	subs	r3, r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	440b      	add	r3, r1
 800704c:	334c      	adds	r3, #76	@ 0x4c
 800704e:	2204      	movs	r2, #4
 8007050:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007052:	e022      	b.n	800709a <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007054:	78fa      	ldrb	r2, [r7, #3]
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	4613      	mov	r3, r2
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	1a9b      	subs	r3, r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	440b      	add	r3, r1
 8007062:	334c      	adds	r3, #76	@ 0x4c
 8007064:	2202      	movs	r2, #2
 8007066:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007068:	78fb      	ldrb	r3, [r7, #3]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	4413      	add	r3, r2
 8007070:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800707e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007086:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007088:	78fb      	ldrb	r3, [r7, #3]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	4413      	add	r3, r2
 8007090:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007094:	461a      	mov	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800709a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800709c:	78fa      	ldrb	r2, [r7, #3]
 800709e:	6879      	ldr	r1, [r7, #4]
 80070a0:	4613      	mov	r3, r2
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	1a9b      	subs	r3, r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	440b      	add	r3, r1
 80070aa:	334c      	adds	r3, #76	@ 0x4c
 80070ac:	781a      	ldrb	r2, [r3, #0]
 80070ae:	78fb      	ldrb	r3, [r7, #3]
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f00b ff58 	bl	8012f68 <HAL_HCD_HC_NotifyURBChange_Callback>
 80070b8:	e002      	b.n	80070c0 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80070ba:	bf00      	nop
 80070bc:	e000      	b.n	80070c0 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80070be:	bf00      	nop
  }
}
 80070c0:	3718      	adds	r7, #24
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b08a      	sub	sp, #40	@ 0x28
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	f003 030f 	and.w	r3, r3, #15
 80070e6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	0c5b      	lsrs	r3, r3, #17
 80070ec:	f003 030f 	and.w	r3, r3, #15
 80070f0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	091b      	lsrs	r3, r3, #4
 80070f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070fa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d004      	beq.n	800710c <HCD_RXQLVL_IRQHandler+0x46>
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2b05      	cmp	r3, #5
 8007106:	f000 80b6 	beq.w	8007276 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800710a:	e0b7      	b.n	800727c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	2b00      	cmp	r3, #0
 8007110:	f000 80b3 	beq.w	800727a <HCD_RXQLVL_IRQHandler+0x1b4>
 8007114:	6879      	ldr	r1, [r7, #4]
 8007116:	69ba      	ldr	r2, [r7, #24]
 8007118:	4613      	mov	r3, r2
 800711a:	011b      	lsls	r3, r3, #4
 800711c:	1a9b      	subs	r3, r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	440b      	add	r3, r1
 8007122:	332c      	adds	r3, #44	@ 0x2c
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	f000 80a7 	beq.w	800727a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800712c:	6879      	ldr	r1, [r7, #4]
 800712e:	69ba      	ldr	r2, [r7, #24]
 8007130:	4613      	mov	r3, r2
 8007132:	011b      	lsls	r3, r3, #4
 8007134:	1a9b      	subs	r3, r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	440b      	add	r3, r1
 800713a:	3338      	adds	r3, #56	@ 0x38
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	18d1      	adds	r1, r2, r3
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	4613      	mov	r3, r2
 8007148:	011b      	lsls	r3, r3, #4
 800714a:	1a9b      	subs	r3, r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4403      	add	r3, r0
 8007150:	3334      	adds	r3, #52	@ 0x34
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4299      	cmp	r1, r3
 8007156:	f200 8083 	bhi.w	8007260 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6818      	ldr	r0, [r3, #0]
 800715e:	6879      	ldr	r1, [r7, #4]
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	4613      	mov	r3, r2
 8007164:	011b      	lsls	r3, r3, #4
 8007166:	1a9b      	subs	r3, r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	440b      	add	r3, r1
 800716c:	332c      	adds	r3, #44	@ 0x2c
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	b292      	uxth	r2, r2
 8007174:	4619      	mov	r1, r3
 8007176:	f004 f849 	bl	800b20c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800717a:	6879      	ldr	r1, [r7, #4]
 800717c:	69ba      	ldr	r2, [r7, #24]
 800717e:	4613      	mov	r3, r2
 8007180:	011b      	lsls	r3, r3, #4
 8007182:	1a9b      	subs	r3, r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	440b      	add	r3, r1
 8007188:	332c      	adds	r3, #44	@ 0x2c
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	18d1      	adds	r1, r2, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	69ba      	ldr	r2, [r7, #24]
 8007194:	4613      	mov	r3, r2
 8007196:	011b      	lsls	r3, r3, #4
 8007198:	1a9b      	subs	r3, r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4403      	add	r3, r0
 800719e:	332c      	adds	r3, #44	@ 0x2c
 80071a0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80071a2:	6879      	ldr	r1, [r7, #4]
 80071a4:	69ba      	ldr	r2, [r7, #24]
 80071a6:	4613      	mov	r3, r2
 80071a8:	011b      	lsls	r3, r3, #4
 80071aa:	1a9b      	subs	r3, r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	440b      	add	r3, r1
 80071b0:	3338      	adds	r3, #56	@ 0x38
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	18d1      	adds	r1, r2, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	69ba      	ldr	r2, [r7, #24]
 80071bc:	4613      	mov	r3, r2
 80071be:	011b      	lsls	r3, r3, #4
 80071c0:	1a9b      	subs	r3, r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4403      	add	r3, r0
 80071c6:	3338      	adds	r3, #56	@ 0x38
 80071c8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	015a      	lsls	r2, r3, #5
 80071ce:	6a3b      	ldr	r3, [r7, #32]
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	0cdb      	lsrs	r3, r3, #19
 80071da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071de:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80071e0:	6879      	ldr	r1, [r7, #4]
 80071e2:	69ba      	ldr	r2, [r7, #24]
 80071e4:	4613      	mov	r3, r2
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	1a9b      	subs	r3, r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	440b      	add	r3, r1
 80071ee:	3328      	adds	r3, #40	@ 0x28
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d13f      	bne.n	800727a <HCD_RXQLVL_IRQHandler+0x1b4>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d03c      	beq.n	800727a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	4413      	add	r3, r2
 8007208:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007216:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800721e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	6a3b      	ldr	r3, [r7, #32]
 8007226:	4413      	add	r3, r2
 8007228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800722c:	461a      	mov	r2, r3
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8007232:	6879      	ldr	r1, [r7, #4]
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	4613      	mov	r3, r2
 8007238:	011b      	lsls	r3, r3, #4
 800723a:	1a9b      	subs	r3, r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	440b      	add	r3, r1
 8007240:	333c      	adds	r3, #60	@ 0x3c
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	f083 0301 	eor.w	r3, r3, #1
 8007248:	b2d8      	uxtb	r0, r3
 800724a:	6879      	ldr	r1, [r7, #4]
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	4613      	mov	r3, r2
 8007250:	011b      	lsls	r3, r3, #4
 8007252:	1a9b      	subs	r3, r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	440b      	add	r3, r1
 8007258:	333c      	adds	r3, #60	@ 0x3c
 800725a:	4602      	mov	r2, r0
 800725c:	701a      	strb	r2, [r3, #0]
      break;
 800725e:	e00c      	b.n	800727a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8007260:	6879      	ldr	r1, [r7, #4]
 8007262:	69ba      	ldr	r2, [r7, #24]
 8007264:	4613      	mov	r3, r2
 8007266:	011b      	lsls	r3, r3, #4
 8007268:	1a9b      	subs	r3, r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	440b      	add	r3, r1
 800726e:	334c      	adds	r3, #76	@ 0x4c
 8007270:	2204      	movs	r2, #4
 8007272:	701a      	strb	r2, [r3, #0]
      break;
 8007274:	e001      	b.n	800727a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8007276:	bf00      	nop
 8007278:	e000      	b.n	800727c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800727a:	bf00      	nop
  }
}
 800727c:	bf00      	nop
 800727e:	3728      	adds	r7, #40	@ 0x28
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80072b0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d10b      	bne.n	80072d4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d102      	bne.n	80072cc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f00b fe32 	bl	8012f30 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f043 0302 	orr.w	r3, r3, #2
 80072d2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f003 0308 	and.w	r3, r3, #8
 80072da:	2b08      	cmp	r3, #8
 80072dc:	d132      	bne.n	8007344 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	f043 0308 	orr.w	r3, r3, #8
 80072e4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f003 0304 	and.w	r3, r3, #4
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	d126      	bne.n	800733e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	7a5b      	ldrb	r3, [r3, #9]
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d113      	bne.n	8007320 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80072fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007302:	d106      	bne.n	8007312 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2102      	movs	r1, #2
 800730a:	4618      	mov	r0, r3
 800730c:	f004 f90e 	bl	800b52c <USB_InitFSLSPClkSel>
 8007310:	e011      	b.n	8007336 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2101      	movs	r1, #1
 8007318:	4618      	mov	r0, r3
 800731a:	f004 f907 	bl	800b52c <USB_InitFSLSPClkSel>
 800731e:	e00a      	b.n	8007336 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	79db      	ldrb	r3, [r3, #7]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d106      	bne.n	8007336 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800732e:	461a      	mov	r2, r3
 8007330:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8007334:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f00b fe28 	bl	8012f8c <HAL_HCD_PortEnabled_Callback>
 800733c:	e002      	b.n	8007344 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f00b fe32 	bl	8012fa8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f003 0320 	and.w	r3, r3, #32
 800734a:	2b20      	cmp	r3, #32
 800734c:	d103      	bne.n	8007356 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	f043 0320 	orr.w	r3, r3, #32
 8007354:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800735c:	461a      	mov	r2, r3
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	6013      	str	r3, [r2, #0]
}
 8007362:	bf00      	nop
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
	...

0800736c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d101      	bne.n	800737e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e12b      	b.n	80075d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d106      	bne.n	8007398 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7fc fec0 	bl	8004118 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2224      	movs	r2, #36	@ 0x24
 800739c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 0201 	bic.w	r2, r2, #1
 80073ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80073be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80073ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80073d0:	f001 fa20 	bl	8008814 <HAL_RCC_GetPCLK1Freq>
 80073d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	4a81      	ldr	r2, [pc, #516]	@ (80075e0 <HAL_I2C_Init+0x274>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d807      	bhi.n	80073f0 <HAL_I2C_Init+0x84>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4a80      	ldr	r2, [pc, #512]	@ (80075e4 <HAL_I2C_Init+0x278>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	bf94      	ite	ls
 80073e8:	2301      	movls	r3, #1
 80073ea:	2300      	movhi	r3, #0
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	e006      	b.n	80073fe <HAL_I2C_Init+0x92>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4a7d      	ldr	r2, [pc, #500]	@ (80075e8 <HAL_I2C_Init+0x27c>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	bf94      	ite	ls
 80073f8:	2301      	movls	r3, #1
 80073fa:	2300      	movhi	r3, #0
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e0e7      	b.n	80075d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	4a78      	ldr	r2, [pc, #480]	@ (80075ec <HAL_I2C_Init+0x280>)
 800740a:	fba2 2303 	umull	r2, r3, r2, r3
 800740e:	0c9b      	lsrs	r3, r3, #18
 8007410:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	430a      	orrs	r2, r1
 8007424:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6a1b      	ldr	r3, [r3, #32]
 800742c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	4a6a      	ldr	r2, [pc, #424]	@ (80075e0 <HAL_I2C_Init+0x274>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d802      	bhi.n	8007440 <HAL_I2C_Init+0xd4>
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	3301      	adds	r3, #1
 800743e:	e009      	b.n	8007454 <HAL_I2C_Init+0xe8>
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007446:	fb02 f303 	mul.w	r3, r2, r3
 800744a:	4a69      	ldr	r2, [pc, #420]	@ (80075f0 <HAL_I2C_Init+0x284>)
 800744c:	fba2 2303 	umull	r2, r3, r2, r3
 8007450:	099b      	lsrs	r3, r3, #6
 8007452:	3301      	adds	r3, #1
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	6812      	ldr	r2, [r2, #0]
 8007458:	430b      	orrs	r3, r1
 800745a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007466:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	495c      	ldr	r1, [pc, #368]	@ (80075e0 <HAL_I2C_Init+0x274>)
 8007470:	428b      	cmp	r3, r1
 8007472:	d819      	bhi.n	80074a8 <HAL_I2C_Init+0x13c>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	1e59      	subs	r1, r3, #1
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	005b      	lsls	r3, r3, #1
 800747e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007482:	1c59      	adds	r1, r3, #1
 8007484:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007488:	400b      	ands	r3, r1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <HAL_I2C_Init+0x138>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	1e59      	subs	r1, r3, #1
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	fbb1 f3f3 	udiv	r3, r1, r3
 800749c:	3301      	adds	r3, #1
 800749e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074a2:	e051      	b.n	8007548 <HAL_I2C_Init+0x1dc>
 80074a4:	2304      	movs	r3, #4
 80074a6:	e04f      	b.n	8007548 <HAL_I2C_Init+0x1dc>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d111      	bne.n	80074d4 <HAL_I2C_Init+0x168>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	1e58      	subs	r0, r3, #1
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6859      	ldr	r1, [r3, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	005b      	lsls	r3, r3, #1
 80074bc:	440b      	add	r3, r1
 80074be:	fbb0 f3f3 	udiv	r3, r0, r3
 80074c2:	3301      	adds	r3, #1
 80074c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	bf0c      	ite	eq
 80074cc:	2301      	moveq	r3, #1
 80074ce:	2300      	movne	r3, #0
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	e012      	b.n	80074fa <HAL_I2C_Init+0x18e>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	1e58      	subs	r0, r3, #1
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6859      	ldr	r1, [r3, #4]
 80074dc:	460b      	mov	r3, r1
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	440b      	add	r3, r1
 80074e2:	0099      	lsls	r1, r3, #2
 80074e4:	440b      	add	r3, r1
 80074e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80074ea:	3301      	adds	r3, #1
 80074ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	bf0c      	ite	eq
 80074f4:	2301      	moveq	r3, #1
 80074f6:	2300      	movne	r3, #0
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <HAL_I2C_Init+0x196>
 80074fe:	2301      	movs	r3, #1
 8007500:	e022      	b.n	8007548 <HAL_I2C_Init+0x1dc>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10e      	bne.n	8007528 <HAL_I2C_Init+0x1bc>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	1e58      	subs	r0, r3, #1
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6859      	ldr	r1, [r3, #4]
 8007512:	460b      	mov	r3, r1
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	440b      	add	r3, r1
 8007518:	fbb0 f3f3 	udiv	r3, r0, r3
 800751c:	3301      	adds	r3, #1
 800751e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007526:	e00f      	b.n	8007548 <HAL_I2C_Init+0x1dc>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	1e58      	subs	r0, r3, #1
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6859      	ldr	r1, [r3, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	440b      	add	r3, r1
 8007536:	0099      	lsls	r1, r3, #2
 8007538:	440b      	add	r3, r1
 800753a:	fbb0 f3f3 	udiv	r3, r0, r3
 800753e:	3301      	adds	r3, #1
 8007540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007544:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007548:	6879      	ldr	r1, [r7, #4]
 800754a:	6809      	ldr	r1, [r1, #0]
 800754c:	4313      	orrs	r3, r2
 800754e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	69da      	ldr	r2, [r3, #28]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	431a      	orrs	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007576:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	6911      	ldr	r1, [r2, #16]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	68d2      	ldr	r2, [r2, #12]
 8007582:	4311      	orrs	r1, r2
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	6812      	ldr	r2, [r2, #0]
 8007588:	430b      	orrs	r3, r1
 800758a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	695a      	ldr	r2, [r3, #20]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	431a      	orrs	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	430a      	orrs	r2, r1
 80075a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f042 0201 	orr.w	r2, r2, #1
 80075b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2220      	movs	r2, #32
 80075c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	000186a0 	.word	0x000186a0
 80075e4:	001e847f 	.word	0x001e847f
 80075e8:	003d08ff 	.word	0x003d08ff
 80075ec:	431bde83 	.word	0x431bde83
 80075f0:	10624dd3 	.word	0x10624dd3

080075f4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b088      	sub	sp, #32
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e128      	b.n	8007858 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d109      	bne.n	8007626 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a90      	ldr	r2, [pc, #576]	@ (8007860 <HAL_I2S_Init+0x26c>)
 800761e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7fc fdc1 	bl	80041a8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2202      	movs	r2, #2
 800762a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	69db      	ldr	r3, [r3, #28]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6812      	ldr	r2, [r2, #0]
 8007638:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800763c:	f023 030f 	bic.w	r3, r3, #15
 8007640:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2202      	movs	r2, #2
 8007648:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	2b02      	cmp	r3, #2
 8007650:	d060      	beq.n	8007714 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d102      	bne.n	8007660 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800765a:	2310      	movs	r3, #16
 800765c:	617b      	str	r3, [r7, #20]
 800765e:	e001      	b.n	8007664 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8007660:	2320      	movs	r3, #32
 8007662:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	2b20      	cmp	r3, #32
 800766a:	d802      	bhi.n	8007672 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8007672:	2001      	movs	r0, #1
 8007674:	f001 fa0a 	bl	8008a8c <HAL_RCCEx_GetPeriphCLKFreq>
 8007678:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007682:	d125      	bne.n	80076d0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d010      	beq.n	80076ae <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	fbb2 f2f3 	udiv	r2, r2, r3
 8007696:	4613      	mov	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	005b      	lsls	r3, r3, #1
 800769e:	461a      	mov	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a8:	3305      	adds	r3, #5
 80076aa:	613b      	str	r3, [r7, #16]
 80076ac:	e01f      	b.n	80076ee <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	00db      	lsls	r3, r3, #3
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80076b8:	4613      	mov	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	005b      	lsls	r3, r3, #1
 80076c0:	461a      	mov	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ca:	3305      	adds	r3, #5
 80076cc:	613b      	str	r3, [r7, #16]
 80076ce:	e00e      	b.n	80076ee <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80076d8:	4613      	mov	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	461a      	mov	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ea:	3305      	adds	r3, #5
 80076ec:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	4a5c      	ldr	r2, [pc, #368]	@ (8007864 <HAL_I2S_Init+0x270>)
 80076f2:	fba2 2303 	umull	r2, r3, r2, r3
 80076f6:	08db      	lsrs	r3, r3, #3
 80076f8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	085b      	lsrs	r3, r3, #1
 800770a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	021b      	lsls	r3, r3, #8
 8007710:	61bb      	str	r3, [r7, #24]
 8007712:	e003      	b.n	800771c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8007714:	2302      	movs	r3, #2
 8007716:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8007718:	2300      	movs	r3, #0
 800771a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d902      	bls.n	8007728 <HAL_I2S_Init+0x134>
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	2bff      	cmp	r3, #255	@ 0xff
 8007726:	d907      	bls.n	8007738 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800772c:	f043 0210 	orr.w	r2, r3, #16
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e08f      	b.n	8007858 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	691a      	ldr	r2, [r3, #16]
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	ea42 0103 	orr.w	r1, r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	69fa      	ldr	r2, [r7, #28]
 8007748:	430a      	orrs	r2, r1
 800774a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8007756:	f023 030f 	bic.w	r3, r3, #15
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	6851      	ldr	r1, [r2, #4]
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	6892      	ldr	r2, [r2, #8]
 8007762:	4311      	orrs	r1, r2
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	68d2      	ldr	r2, [r2, #12]
 8007768:	4311      	orrs	r1, r2
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	6992      	ldr	r2, [r2, #24]
 800776e:	430a      	orrs	r2, r1
 8007770:	431a      	orrs	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800777a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a1b      	ldr	r3, [r3, #32]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d161      	bne.n	8007848 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a38      	ldr	r2, [pc, #224]	@ (8007868 <HAL_I2S_Init+0x274>)
 8007788:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a37      	ldr	r2, [pc, #220]	@ (800786c <HAL_I2S_Init+0x278>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d101      	bne.n	8007798 <HAL_I2S_Init+0x1a4>
 8007794:	4b36      	ldr	r3, [pc, #216]	@ (8007870 <HAL_I2S_Init+0x27c>)
 8007796:	e001      	b.n	800779c <HAL_I2S_Init+0x1a8>
 8007798:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	6812      	ldr	r2, [r2, #0]
 80077a2:	4932      	ldr	r1, [pc, #200]	@ (800786c <HAL_I2S_Init+0x278>)
 80077a4:	428a      	cmp	r2, r1
 80077a6:	d101      	bne.n	80077ac <HAL_I2S_Init+0x1b8>
 80077a8:	4a31      	ldr	r2, [pc, #196]	@ (8007870 <HAL_I2S_Init+0x27c>)
 80077aa:	e001      	b.n	80077b0 <HAL_I2S_Init+0x1bc>
 80077ac:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80077b0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80077b4:	f023 030f 	bic.w	r3, r3, #15
 80077b8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a2b      	ldr	r2, [pc, #172]	@ (800786c <HAL_I2S_Init+0x278>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d101      	bne.n	80077c8 <HAL_I2S_Init+0x1d4>
 80077c4:	4b2a      	ldr	r3, [pc, #168]	@ (8007870 <HAL_I2S_Init+0x27c>)
 80077c6:	e001      	b.n	80077cc <HAL_I2S_Init+0x1d8>
 80077c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80077cc:	2202      	movs	r2, #2
 80077ce:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a25      	ldr	r2, [pc, #148]	@ (800786c <HAL_I2S_Init+0x278>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d101      	bne.n	80077de <HAL_I2S_Init+0x1ea>
 80077da:	4b25      	ldr	r3, [pc, #148]	@ (8007870 <HAL_I2S_Init+0x27c>)
 80077dc:	e001      	b.n	80077e2 <HAL_I2S_Init+0x1ee>
 80077de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80077e2:	69db      	ldr	r3, [r3, #28]
 80077e4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077ee:	d003      	beq.n	80077f8 <HAL_I2S_Init+0x204>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d103      	bne.n	8007800 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80077f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80077fc:	613b      	str	r3, [r7, #16]
 80077fe:	e001      	b.n	8007804 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8007800:	2300      	movs	r3, #0
 8007802:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800780e:	4313      	orrs	r3, r2
 8007810:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007818:	4313      	orrs	r3, r2
 800781a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007822:	4313      	orrs	r3, r2
 8007824:	b29a      	uxth	r2, r3
 8007826:	897b      	ldrh	r3, [r7, #10]
 8007828:	4313      	orrs	r3, r2
 800782a:	b29b      	uxth	r3, r3
 800782c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007830:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a0d      	ldr	r2, [pc, #52]	@ (800786c <HAL_I2S_Init+0x278>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d101      	bne.n	8007840 <HAL_I2S_Init+0x24c>
 800783c:	4b0c      	ldr	r3, [pc, #48]	@ (8007870 <HAL_I2S_Init+0x27c>)
 800783e:	e001      	b.n	8007844 <HAL_I2S_Init+0x250>
 8007840:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007844:	897a      	ldrh	r2, [r7, #10]
 8007846:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3720      	adds	r7, #32
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	0800796b 	.word	0x0800796b
 8007864:	cccccccd 	.word	0xcccccccd
 8007868:	08007a81 	.word	0x08007a81
 800786c:	40003800 	.word	0x40003800
 8007870:	40003400 	.word	0x40003400

08007874 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078bc:	881a      	ldrh	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c8:	1c9a      	adds	r2, r3, #2
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	3b01      	subs	r3, #1
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10e      	bne.n	8007904 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80078f4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7ff ffb8 	bl	8007874 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007904:	bf00      	nop
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68da      	ldr	r2, [r3, #12]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800791e:	b292      	uxth	r2, r2
 8007920:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007926:	1c9a      	adds	r2, r3, #2
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007930:	b29b      	uxth	r3, r3
 8007932:	3b01      	subs	r3, #1
 8007934:	b29a      	uxth	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800793e:	b29b      	uxth	r3, r3
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10e      	bne.n	8007962 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685a      	ldr	r2, [r3, #4]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007952:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f7ff ff93 	bl	8007888 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007962:	bf00      	nop
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b086      	sub	sp, #24
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b04      	cmp	r3, #4
 8007984:	d13a      	bne.n	80079fc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b01      	cmp	r3, #1
 800798e:	d109      	bne.n	80079a4 <I2S_IRQHandler+0x3a>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800799a:	2b40      	cmp	r3, #64	@ 0x40
 800799c:	d102      	bne.n	80079a4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7ff ffb4 	bl	800790c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079aa:	2b40      	cmp	r3, #64	@ 0x40
 80079ac:	d126      	bne.n	80079fc <I2S_IRQHandler+0x92>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	f003 0320 	and.w	r3, r3, #32
 80079b8:	2b20      	cmp	r3, #32
 80079ba:	d11f      	bne.n	80079fc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	685a      	ldr	r2, [r3, #4]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80079ca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80079cc:	2300      	movs	r3, #0
 80079ce:	613b      	str	r3, [r7, #16]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	613b      	str	r3, [r7, #16]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	613b      	str	r3, [r7, #16]
 80079e0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ee:	f043 0202 	orr.w	r2, r3, #2
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7ff ff50 	bl	800789c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b03      	cmp	r3, #3
 8007a06:	d136      	bne.n	8007a76 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f003 0302 	and.w	r3, r3, #2
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d109      	bne.n	8007a26 <I2S_IRQHandler+0xbc>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a1c:	2b80      	cmp	r3, #128	@ 0x80
 8007a1e:	d102      	bne.n	8007a26 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7ff ff45 	bl	80078b0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f003 0308 	and.w	r3, r3, #8
 8007a2c:	2b08      	cmp	r3, #8
 8007a2e:	d122      	bne.n	8007a76 <I2S_IRQHandler+0x10c>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f003 0320 	and.w	r3, r3, #32
 8007a3a:	2b20      	cmp	r3, #32
 8007a3c:	d11b      	bne.n	8007a76 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	685a      	ldr	r2, [r3, #4]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007a4c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007a4e:	2300      	movs	r3, #0
 8007a50:	60fb      	str	r3, [r7, #12]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	60fb      	str	r3, [r7, #12]
 8007a5a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a68:	f043 0204 	orr.w	r2, r3, #4
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7ff ff13 	bl	800789c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007a76:	bf00      	nop
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
	...

08007a80 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b088      	sub	sp, #32
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a92      	ldr	r2, [pc, #584]	@ (8007ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d101      	bne.n	8007a9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007a9a:	4b92      	ldr	r3, [pc, #584]	@ (8007ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007a9c:	e001      	b.n	8007aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8007a9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a8b      	ldr	r2, [pc, #556]	@ (8007ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d101      	bne.n	8007abc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007ab8:	4b8a      	ldr	r3, [pc, #552]	@ (8007ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007aba:	e001      	b.n	8007ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007abc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007acc:	d004      	beq.n	8007ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f040 8099 	bne.w	8007c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	f003 0302 	and.w	r3, r3, #2
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d107      	bne.n	8007af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d002      	beq.n	8007af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f925 	bl	8007d3c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d107      	bne.n	8007b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d002      	beq.n	8007b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f9c8 	bl	8007e9c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b12:	2b40      	cmp	r3, #64	@ 0x40
 8007b14:	d13a      	bne.n	8007b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	f003 0320 	and.w	r3, r3, #32
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d035      	beq.n	8007b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a6e      	ldr	r2, [pc, #440]	@ (8007ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d101      	bne.n	8007b2e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007b2a:	4b6e      	ldr	r3, [pc, #440]	@ (8007ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007b2c:	e001      	b.n	8007b32 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8007b2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4969      	ldr	r1, [pc, #420]	@ (8007ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007b3a:	428b      	cmp	r3, r1
 8007b3c:	d101      	bne.n	8007b42 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8007b3e:	4b69      	ldr	r3, [pc, #420]	@ (8007ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007b40:	e001      	b.n	8007b46 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8007b42:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007b46:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007b4a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007b5a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	60fb      	str	r3, [r7, #12]
 8007b70:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b7e:	f043 0202 	orr.w	r2, r3, #2
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7ff fe88 	bl	800789c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	f003 0308 	and.w	r3, r3, #8
 8007b92:	2b08      	cmp	r3, #8
 8007b94:	f040 80c3 	bne.w	8007d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	f003 0320 	and.w	r3, r3, #32
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 80bd 	beq.w	8007d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	685a      	ldr	r2, [r3, #4]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007bb2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a49      	ldr	r2, [pc, #292]	@ (8007ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d101      	bne.n	8007bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8007bbe:	4b49      	ldr	r3, [pc, #292]	@ (8007ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007bc0:	e001      	b.n	8007bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007bc2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4944      	ldr	r1, [pc, #272]	@ (8007ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007bce:	428b      	cmp	r3, r1
 8007bd0:	d101      	bne.n	8007bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007bd2:	4b44      	ldr	r3, [pc, #272]	@ (8007ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007bd4:	e001      	b.n	8007bda <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007bd6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007bda:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007bde:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007be0:	2300      	movs	r3, #0
 8007be2:	60bb      	str	r3, [r7, #8]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	60bb      	str	r3, [r7, #8]
 8007bec:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bfa:	f043 0204 	orr.w	r2, r3, #4
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7ff fe4a 	bl	800789c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007c08:	e089      	b.n	8007d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	f003 0302 	and.w	r3, r3, #2
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d107      	bne.n	8007c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d002      	beq.n	8007c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f8be 	bl	8007da0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d107      	bne.n	8007c3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f8fd 	bl	8007e38 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c44:	2b40      	cmp	r3, #64	@ 0x40
 8007c46:	d12f      	bne.n	8007ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	f003 0320 	and.w	r3, r3, #32
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d02a      	beq.n	8007ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007c60:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a1e      	ldr	r2, [pc, #120]	@ (8007ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d101      	bne.n	8007c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007c6e:	e001      	b.n	8007c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007c70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4919      	ldr	r1, [pc, #100]	@ (8007ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007c7c:	428b      	cmp	r3, r1
 8007c7e:	d101      	bne.n	8007c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007c80:	4b18      	ldr	r3, [pc, #96]	@ (8007ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007c82:	e001      	b.n	8007c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007c84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007c88:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007c8c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c9a:	f043 0202 	orr.w	r2, r3, #2
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7ff fdfa 	bl	800789c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	f003 0308 	and.w	r3, r3, #8
 8007cae:	2b08      	cmp	r3, #8
 8007cb0:	d136      	bne.n	8007d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	f003 0320 	and.w	r3, r3, #32
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d031      	beq.n	8007d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a07      	ldr	r2, [pc, #28]	@ (8007ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d101      	bne.n	8007cca <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007cc6:	4b07      	ldr	r3, [pc, #28]	@ (8007ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007cc8:	e001      	b.n	8007cce <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007cca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4902      	ldr	r1, [pc, #8]	@ (8007ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007cd6:	428b      	cmp	r3, r1
 8007cd8:	d106      	bne.n	8007ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8007cda:	4b02      	ldr	r3, [pc, #8]	@ (8007ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007cdc:	e006      	b.n	8007cec <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8007cde:	bf00      	nop
 8007ce0:	40003800 	.word	0x40003800
 8007ce4:	40003400 	.word	0x40003400
 8007ce8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007cec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007cf0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	685a      	ldr	r2, [r3, #4]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007d00:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d0e:	f043 0204 	orr.w	r2, r3, #4
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f7ff fdc0 	bl	800789c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007d1c:	e000      	b.n	8007d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007d1e:	bf00      	nop
}
 8007d20:	bf00      	nop
 8007d22:	3720      	adds	r7, #32
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d48:	1c99      	adds	r1, r3, #2
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	6251      	str	r1, [r2, #36]	@ 0x24
 8007d4e:	881a      	ldrh	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d113      	bne.n	8007d96 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007d7c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d106      	bne.n	8007d96 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff ffc9 	bl	8007d28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007d96:	bf00      	nop
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
	...

08007da0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dac:	1c99      	adds	r1, r3, #2
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	6251      	str	r1, [r2, #36]	@ 0x24
 8007db2:	8819      	ldrh	r1, [r3, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e30 <I2SEx_TxISR_I2SExt+0x90>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d101      	bne.n	8007dc2 <I2SEx_TxISR_I2SExt+0x22>
 8007dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8007e34 <I2SEx_TxISR_I2SExt+0x94>)
 8007dc0:	e001      	b.n	8007dc6 <I2SEx_TxISR_I2SExt+0x26>
 8007dc2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007dc6:	460a      	mov	r2, r1
 8007dc8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d121      	bne.n	8007e26 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a12      	ldr	r2, [pc, #72]	@ (8007e30 <I2SEx_TxISR_I2SExt+0x90>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d101      	bne.n	8007df0 <I2SEx_TxISR_I2SExt+0x50>
 8007dec:	4b11      	ldr	r3, [pc, #68]	@ (8007e34 <I2SEx_TxISR_I2SExt+0x94>)
 8007dee:	e001      	b.n	8007df4 <I2SEx_TxISR_I2SExt+0x54>
 8007df0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	490d      	ldr	r1, [pc, #52]	@ (8007e30 <I2SEx_TxISR_I2SExt+0x90>)
 8007dfc:	428b      	cmp	r3, r1
 8007dfe:	d101      	bne.n	8007e04 <I2SEx_TxISR_I2SExt+0x64>
 8007e00:	4b0c      	ldr	r3, [pc, #48]	@ (8007e34 <I2SEx_TxISR_I2SExt+0x94>)
 8007e02:	e001      	b.n	8007e08 <I2SEx_TxISR_I2SExt+0x68>
 8007e04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007e08:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007e0c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d106      	bne.n	8007e26 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f7ff ff81 	bl	8007d28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007e26:	bf00      	nop
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	40003800 	.word	0x40003800
 8007e34:	40003400 	.word	0x40003400

08007e38 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68d8      	ldr	r0, [r3, #12]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e4a:	1c99      	adds	r1, r3, #2
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007e50:	b282      	uxth	r2, r0
 8007e52:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d113      	bne.n	8007e94 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007e7a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d106      	bne.n	8007e94 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7ff ff4a 	bl	8007d28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007e94:	bf00      	nop
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a20      	ldr	r2, [pc, #128]	@ (8007f2c <I2SEx_RxISR_I2SExt+0x90>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d101      	bne.n	8007eb2 <I2SEx_RxISR_I2SExt+0x16>
 8007eae:	4b20      	ldr	r3, [pc, #128]	@ (8007f30 <I2SEx_RxISR_I2SExt+0x94>)
 8007eb0:	e001      	b.n	8007eb6 <I2SEx_RxISR_I2SExt+0x1a>
 8007eb2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007eb6:	68d8      	ldr	r0, [r3, #12]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ebc:	1c99      	adds	r1, r3, #2
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007ec2:	b282      	uxth	r2, r0
 8007ec4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d121      	bne.n	8007f22 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a12      	ldr	r2, [pc, #72]	@ (8007f2c <I2SEx_RxISR_I2SExt+0x90>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d101      	bne.n	8007eec <I2SEx_RxISR_I2SExt+0x50>
 8007ee8:	4b11      	ldr	r3, [pc, #68]	@ (8007f30 <I2SEx_RxISR_I2SExt+0x94>)
 8007eea:	e001      	b.n	8007ef0 <I2SEx_RxISR_I2SExt+0x54>
 8007eec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	490d      	ldr	r1, [pc, #52]	@ (8007f2c <I2SEx_RxISR_I2SExt+0x90>)
 8007ef8:	428b      	cmp	r3, r1
 8007efa:	d101      	bne.n	8007f00 <I2SEx_RxISR_I2SExt+0x64>
 8007efc:	4b0c      	ldr	r3, [pc, #48]	@ (8007f30 <I2SEx_RxISR_I2SExt+0x94>)
 8007efe:	e001      	b.n	8007f04 <I2SEx_RxISR_I2SExt+0x68>
 8007f00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007f04:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007f08:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d106      	bne.n	8007f22 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7ff ff03 	bl	8007d28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007f22:	bf00      	nop
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	40003800 	.word	0x40003800
 8007f30:	40003400 	.word	0x40003400

08007f34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d101      	bne.n	8007f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e267      	b.n	8008416 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d075      	beq.n	800803e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f52:	4b88      	ldr	r3, [pc, #544]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f003 030c 	and.w	r3, r3, #12
 8007f5a:	2b04      	cmp	r3, #4
 8007f5c:	d00c      	beq.n	8007f78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f5e:	4b85      	ldr	r3, [pc, #532]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f66:	2b08      	cmp	r3, #8
 8007f68:	d112      	bne.n	8007f90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f6a:	4b82      	ldr	r3, [pc, #520]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f76:	d10b      	bne.n	8007f90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f78:	4b7e      	ldr	r3, [pc, #504]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d05b      	beq.n	800803c <HAL_RCC_OscConfig+0x108>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d157      	bne.n	800803c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e242      	b.n	8008416 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f98:	d106      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x74>
 8007f9a:	4b76      	ldr	r3, [pc, #472]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a75      	ldr	r2, [pc, #468]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 8007fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fa4:	6013      	str	r3, [r2, #0]
 8007fa6:	e01d      	b.n	8007fe4 <HAL_RCC_OscConfig+0xb0>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007fb0:	d10c      	bne.n	8007fcc <HAL_RCC_OscConfig+0x98>
 8007fb2:	4b70      	ldr	r3, [pc, #448]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a6f      	ldr	r2, [pc, #444]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 8007fb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007fbc:	6013      	str	r3, [r2, #0]
 8007fbe:	4b6d      	ldr	r3, [pc, #436]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a6c      	ldr	r2, [pc, #432]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 8007fc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fc8:	6013      	str	r3, [r2, #0]
 8007fca:	e00b      	b.n	8007fe4 <HAL_RCC_OscConfig+0xb0>
 8007fcc:	4b69      	ldr	r3, [pc, #420]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a68      	ldr	r2, [pc, #416]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 8007fd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	4b66      	ldr	r3, [pc, #408]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a65      	ldr	r2, [pc, #404]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 8007fde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d013      	beq.n	8008014 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fec:	f7fc fcf4 	bl	80049d8 <HAL_GetTick>
 8007ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ff2:	e008      	b.n	8008006 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ff4:	f7fc fcf0 	bl	80049d8 <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	2b64      	cmp	r3, #100	@ 0x64
 8008000:	d901      	bls.n	8008006 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008002:	2303      	movs	r3, #3
 8008004:	e207      	b.n	8008416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008006:	4b5b      	ldr	r3, [pc, #364]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d0f0      	beq.n	8007ff4 <HAL_RCC_OscConfig+0xc0>
 8008012:	e014      	b.n	800803e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008014:	f7fc fce0 	bl	80049d8 <HAL_GetTick>
 8008018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800801a:	e008      	b.n	800802e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800801c:	f7fc fcdc 	bl	80049d8 <HAL_GetTick>
 8008020:	4602      	mov	r2, r0
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	2b64      	cmp	r3, #100	@ 0x64
 8008028:	d901      	bls.n	800802e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e1f3      	b.n	8008416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800802e:	4b51      	ldr	r3, [pc, #324]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1f0      	bne.n	800801c <HAL_RCC_OscConfig+0xe8>
 800803a:	e000      	b.n	800803e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800803c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 0302 	and.w	r3, r3, #2
 8008046:	2b00      	cmp	r3, #0
 8008048:	d063      	beq.n	8008112 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800804a:	4b4a      	ldr	r3, [pc, #296]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f003 030c 	and.w	r3, r3, #12
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00b      	beq.n	800806e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008056:	4b47      	ldr	r3, [pc, #284]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800805e:	2b08      	cmp	r3, #8
 8008060:	d11c      	bne.n	800809c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008062:	4b44      	ldr	r3, [pc, #272]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d116      	bne.n	800809c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800806e:	4b41      	ldr	r3, [pc, #260]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0302 	and.w	r3, r3, #2
 8008076:	2b00      	cmp	r3, #0
 8008078:	d005      	beq.n	8008086 <HAL_RCC_OscConfig+0x152>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d001      	beq.n	8008086 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e1c7      	b.n	8008416 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008086:	4b3b      	ldr	r3, [pc, #236]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	00db      	lsls	r3, r3, #3
 8008094:	4937      	ldr	r1, [pc, #220]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 8008096:	4313      	orrs	r3, r2
 8008098:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800809a:	e03a      	b.n	8008112 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d020      	beq.n	80080e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080a4:	4b34      	ldr	r3, [pc, #208]	@ (8008178 <HAL_RCC_OscConfig+0x244>)
 80080a6:	2201      	movs	r2, #1
 80080a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080aa:	f7fc fc95 	bl	80049d8 <HAL_GetTick>
 80080ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080b0:	e008      	b.n	80080c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080b2:	f7fc fc91 	bl	80049d8 <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d901      	bls.n	80080c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e1a8      	b.n	8008416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080c4:	4b2b      	ldr	r3, [pc, #172]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0302 	and.w	r3, r3, #2
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d0f0      	beq.n	80080b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080d0:	4b28      	ldr	r3, [pc, #160]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	00db      	lsls	r3, r3, #3
 80080de:	4925      	ldr	r1, [pc, #148]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 80080e0:	4313      	orrs	r3, r2
 80080e2:	600b      	str	r3, [r1, #0]
 80080e4:	e015      	b.n	8008112 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080e6:	4b24      	ldr	r3, [pc, #144]	@ (8008178 <HAL_RCC_OscConfig+0x244>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ec:	f7fc fc74 	bl	80049d8 <HAL_GetTick>
 80080f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080f2:	e008      	b.n	8008106 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080f4:	f7fc fc70 	bl	80049d8 <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d901      	bls.n	8008106 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008102:	2303      	movs	r3, #3
 8008104:	e187      	b.n	8008416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008106:	4b1b      	ldr	r3, [pc, #108]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 0302 	and.w	r3, r3, #2
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1f0      	bne.n	80080f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 0308 	and.w	r3, r3, #8
 800811a:	2b00      	cmp	r3, #0
 800811c:	d036      	beq.n	800818c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d016      	beq.n	8008154 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008126:	4b15      	ldr	r3, [pc, #84]	@ (800817c <HAL_RCC_OscConfig+0x248>)
 8008128:	2201      	movs	r2, #1
 800812a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800812c:	f7fc fc54 	bl	80049d8 <HAL_GetTick>
 8008130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008132:	e008      	b.n	8008146 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008134:	f7fc fc50 	bl	80049d8 <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	2b02      	cmp	r3, #2
 8008140:	d901      	bls.n	8008146 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	e167      	b.n	8008416 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008146:	4b0b      	ldr	r3, [pc, #44]	@ (8008174 <HAL_RCC_OscConfig+0x240>)
 8008148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800814a:	f003 0302 	and.w	r3, r3, #2
 800814e:	2b00      	cmp	r3, #0
 8008150:	d0f0      	beq.n	8008134 <HAL_RCC_OscConfig+0x200>
 8008152:	e01b      	b.n	800818c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008154:	4b09      	ldr	r3, [pc, #36]	@ (800817c <HAL_RCC_OscConfig+0x248>)
 8008156:	2200      	movs	r2, #0
 8008158:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800815a:	f7fc fc3d 	bl	80049d8 <HAL_GetTick>
 800815e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008160:	e00e      	b.n	8008180 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008162:	f7fc fc39 	bl	80049d8 <HAL_GetTick>
 8008166:	4602      	mov	r2, r0
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	2b02      	cmp	r3, #2
 800816e:	d907      	bls.n	8008180 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e150      	b.n	8008416 <HAL_RCC_OscConfig+0x4e2>
 8008174:	40023800 	.word	0x40023800
 8008178:	42470000 	.word	0x42470000
 800817c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008180:	4b88      	ldr	r3, [pc, #544]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 8008182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008184:	f003 0302 	and.w	r3, r3, #2
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1ea      	bne.n	8008162 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0304 	and.w	r3, r3, #4
 8008194:	2b00      	cmp	r3, #0
 8008196:	f000 8097 	beq.w	80082c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800819a:	2300      	movs	r3, #0
 800819c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800819e:	4b81      	ldr	r3, [pc, #516]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 80081a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10f      	bne.n	80081ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081aa:	2300      	movs	r3, #0
 80081ac:	60bb      	str	r3, [r7, #8]
 80081ae:	4b7d      	ldr	r3, [pc, #500]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 80081b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b2:	4a7c      	ldr	r2, [pc, #496]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 80081b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80081ba:	4b7a      	ldr	r3, [pc, #488]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 80081bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081c2:	60bb      	str	r3, [r7, #8]
 80081c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081c6:	2301      	movs	r3, #1
 80081c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081ca:	4b77      	ldr	r3, [pc, #476]	@ (80083a8 <HAL_RCC_OscConfig+0x474>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d118      	bne.n	8008208 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081d6:	4b74      	ldr	r3, [pc, #464]	@ (80083a8 <HAL_RCC_OscConfig+0x474>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a73      	ldr	r2, [pc, #460]	@ (80083a8 <HAL_RCC_OscConfig+0x474>)
 80081dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081e2:	f7fc fbf9 	bl	80049d8 <HAL_GetTick>
 80081e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081e8:	e008      	b.n	80081fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081ea:	f7fc fbf5 	bl	80049d8 <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d901      	bls.n	80081fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e10c      	b.n	8008416 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081fc:	4b6a      	ldr	r3, [pc, #424]	@ (80083a8 <HAL_RCC_OscConfig+0x474>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008204:	2b00      	cmp	r3, #0
 8008206:	d0f0      	beq.n	80081ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d106      	bne.n	800821e <HAL_RCC_OscConfig+0x2ea>
 8008210:	4b64      	ldr	r3, [pc, #400]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 8008212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008214:	4a63      	ldr	r2, [pc, #396]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 8008216:	f043 0301 	orr.w	r3, r3, #1
 800821a:	6713      	str	r3, [r2, #112]	@ 0x70
 800821c:	e01c      	b.n	8008258 <HAL_RCC_OscConfig+0x324>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	2b05      	cmp	r3, #5
 8008224:	d10c      	bne.n	8008240 <HAL_RCC_OscConfig+0x30c>
 8008226:	4b5f      	ldr	r3, [pc, #380]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 8008228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800822a:	4a5e      	ldr	r2, [pc, #376]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 800822c:	f043 0304 	orr.w	r3, r3, #4
 8008230:	6713      	str	r3, [r2, #112]	@ 0x70
 8008232:	4b5c      	ldr	r3, [pc, #368]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 8008234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008236:	4a5b      	ldr	r2, [pc, #364]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 8008238:	f043 0301 	orr.w	r3, r3, #1
 800823c:	6713      	str	r3, [r2, #112]	@ 0x70
 800823e:	e00b      	b.n	8008258 <HAL_RCC_OscConfig+0x324>
 8008240:	4b58      	ldr	r3, [pc, #352]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 8008242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008244:	4a57      	ldr	r2, [pc, #348]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 8008246:	f023 0301 	bic.w	r3, r3, #1
 800824a:	6713      	str	r3, [r2, #112]	@ 0x70
 800824c:	4b55      	ldr	r3, [pc, #340]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 800824e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008250:	4a54      	ldr	r2, [pc, #336]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 8008252:	f023 0304 	bic.w	r3, r3, #4
 8008256:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d015      	beq.n	800828c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008260:	f7fc fbba 	bl	80049d8 <HAL_GetTick>
 8008264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008266:	e00a      	b.n	800827e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008268:	f7fc fbb6 	bl	80049d8 <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008276:	4293      	cmp	r3, r2
 8008278:	d901      	bls.n	800827e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e0cb      	b.n	8008416 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800827e:	4b49      	ldr	r3, [pc, #292]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 8008280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	2b00      	cmp	r3, #0
 8008288:	d0ee      	beq.n	8008268 <HAL_RCC_OscConfig+0x334>
 800828a:	e014      	b.n	80082b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800828c:	f7fc fba4 	bl	80049d8 <HAL_GetTick>
 8008290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008292:	e00a      	b.n	80082aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008294:	f7fc fba0 	bl	80049d8 <HAL_GetTick>
 8008298:	4602      	mov	r2, r0
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d901      	bls.n	80082aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e0b5      	b.n	8008416 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082aa:	4b3e      	ldr	r3, [pc, #248]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 80082ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ae:	f003 0302 	and.w	r3, r3, #2
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1ee      	bne.n	8008294 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082b6:	7dfb      	ldrb	r3, [r7, #23]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d105      	bne.n	80082c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082bc:	4b39      	ldr	r3, [pc, #228]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 80082be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c0:	4a38      	ldr	r2, [pc, #224]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 80082c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f000 80a1 	beq.w	8008414 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80082d2:	4b34      	ldr	r3, [pc, #208]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	f003 030c 	and.w	r3, r3, #12
 80082da:	2b08      	cmp	r3, #8
 80082dc:	d05c      	beq.n	8008398 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d141      	bne.n	800836a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082e6:	4b31      	ldr	r3, [pc, #196]	@ (80083ac <HAL_RCC_OscConfig+0x478>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082ec:	f7fc fb74 	bl	80049d8 <HAL_GetTick>
 80082f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082f2:	e008      	b.n	8008306 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082f4:	f7fc fb70 	bl	80049d8 <HAL_GetTick>
 80082f8:	4602      	mov	r2, r0
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d901      	bls.n	8008306 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e087      	b.n	8008416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008306:	4b27      	ldr	r3, [pc, #156]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1f0      	bne.n	80082f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	69da      	ldr	r2, [r3, #28]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a1b      	ldr	r3, [r3, #32]
 800831a:	431a      	orrs	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008320:	019b      	lsls	r3, r3, #6
 8008322:	431a      	orrs	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008328:	085b      	lsrs	r3, r3, #1
 800832a:	3b01      	subs	r3, #1
 800832c:	041b      	lsls	r3, r3, #16
 800832e:	431a      	orrs	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008334:	061b      	lsls	r3, r3, #24
 8008336:	491b      	ldr	r1, [pc, #108]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 8008338:	4313      	orrs	r3, r2
 800833a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800833c:	4b1b      	ldr	r3, [pc, #108]	@ (80083ac <HAL_RCC_OscConfig+0x478>)
 800833e:	2201      	movs	r2, #1
 8008340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008342:	f7fc fb49 	bl	80049d8 <HAL_GetTick>
 8008346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008348:	e008      	b.n	800835c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800834a:	f7fc fb45 	bl	80049d8 <HAL_GetTick>
 800834e:	4602      	mov	r2, r0
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	2b02      	cmp	r3, #2
 8008356:	d901      	bls.n	800835c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e05c      	b.n	8008416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800835c:	4b11      	ldr	r3, [pc, #68]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d0f0      	beq.n	800834a <HAL_RCC_OscConfig+0x416>
 8008368:	e054      	b.n	8008414 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800836a:	4b10      	ldr	r3, [pc, #64]	@ (80083ac <HAL_RCC_OscConfig+0x478>)
 800836c:	2200      	movs	r2, #0
 800836e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008370:	f7fc fb32 	bl	80049d8 <HAL_GetTick>
 8008374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008376:	e008      	b.n	800838a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008378:	f7fc fb2e 	bl	80049d8 <HAL_GetTick>
 800837c:	4602      	mov	r2, r0
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	2b02      	cmp	r3, #2
 8008384:	d901      	bls.n	800838a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	e045      	b.n	8008416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800838a:	4b06      	ldr	r3, [pc, #24]	@ (80083a4 <HAL_RCC_OscConfig+0x470>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1f0      	bne.n	8008378 <HAL_RCC_OscConfig+0x444>
 8008396:	e03d      	b.n	8008414 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d107      	bne.n	80083b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e038      	b.n	8008416 <HAL_RCC_OscConfig+0x4e2>
 80083a4:	40023800 	.word	0x40023800
 80083a8:	40007000 	.word	0x40007000
 80083ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80083b0:	4b1b      	ldr	r3, [pc, #108]	@ (8008420 <HAL_RCC_OscConfig+0x4ec>)
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d028      	beq.n	8008410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d121      	bne.n	8008410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d11a      	bne.n	8008410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80083e0:	4013      	ands	r3, r2
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80083e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d111      	bne.n	8008410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f6:	085b      	lsrs	r3, r3, #1
 80083f8:	3b01      	subs	r3, #1
 80083fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d107      	bne.n	8008410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800840c:	429a      	cmp	r2, r3
 800840e:	d001      	beq.n	8008414 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e000      	b.n	8008416 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3718      	adds	r7, #24
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	40023800 	.word	0x40023800

08008424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d101      	bne.n	8008438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e0cc      	b.n	80085d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008438:	4b68      	ldr	r3, [pc, #416]	@ (80085dc <HAL_RCC_ClockConfig+0x1b8>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 0307 	and.w	r3, r3, #7
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	429a      	cmp	r2, r3
 8008444:	d90c      	bls.n	8008460 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008446:	4b65      	ldr	r3, [pc, #404]	@ (80085dc <HAL_RCC_ClockConfig+0x1b8>)
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	b2d2      	uxtb	r2, r2
 800844c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800844e:	4b63      	ldr	r3, [pc, #396]	@ (80085dc <HAL_RCC_ClockConfig+0x1b8>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0307 	and.w	r3, r3, #7
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	429a      	cmp	r2, r3
 800845a:	d001      	beq.n	8008460 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	e0b8      	b.n	80085d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0302 	and.w	r3, r3, #2
 8008468:	2b00      	cmp	r3, #0
 800846a:	d020      	beq.n	80084ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0304 	and.w	r3, r3, #4
 8008474:	2b00      	cmp	r3, #0
 8008476:	d005      	beq.n	8008484 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008478:	4b59      	ldr	r3, [pc, #356]	@ (80085e0 <HAL_RCC_ClockConfig+0x1bc>)
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	4a58      	ldr	r2, [pc, #352]	@ (80085e0 <HAL_RCC_ClockConfig+0x1bc>)
 800847e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008482:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0308 	and.w	r3, r3, #8
 800848c:	2b00      	cmp	r3, #0
 800848e:	d005      	beq.n	800849c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008490:	4b53      	ldr	r3, [pc, #332]	@ (80085e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	4a52      	ldr	r2, [pc, #328]	@ (80085e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008496:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800849a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800849c:	4b50      	ldr	r3, [pc, #320]	@ (80085e0 <HAL_RCC_ClockConfig+0x1bc>)
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	494d      	ldr	r1, [pc, #308]	@ (80085e0 <HAL_RCC_ClockConfig+0x1bc>)
 80084aa:	4313      	orrs	r3, r2
 80084ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d044      	beq.n	8008544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d107      	bne.n	80084d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084c2:	4b47      	ldr	r3, [pc, #284]	@ (80085e0 <HAL_RCC_ClockConfig+0x1bc>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d119      	bne.n	8008502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e07f      	b.n	80085d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d003      	beq.n	80084e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084de:	2b03      	cmp	r3, #3
 80084e0:	d107      	bne.n	80084f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084e2:	4b3f      	ldr	r3, [pc, #252]	@ (80085e0 <HAL_RCC_ClockConfig+0x1bc>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d109      	bne.n	8008502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e06f      	b.n	80085d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084f2:	4b3b      	ldr	r3, [pc, #236]	@ (80085e0 <HAL_RCC_ClockConfig+0x1bc>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 0302 	and.w	r3, r3, #2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d101      	bne.n	8008502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e067      	b.n	80085d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008502:	4b37      	ldr	r3, [pc, #220]	@ (80085e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f023 0203 	bic.w	r2, r3, #3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	4934      	ldr	r1, [pc, #208]	@ (80085e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008510:	4313      	orrs	r3, r2
 8008512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008514:	f7fc fa60 	bl	80049d8 <HAL_GetTick>
 8008518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800851a:	e00a      	b.n	8008532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800851c:	f7fc fa5c 	bl	80049d8 <HAL_GetTick>
 8008520:	4602      	mov	r2, r0
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800852a:	4293      	cmp	r3, r2
 800852c:	d901      	bls.n	8008532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800852e:	2303      	movs	r3, #3
 8008530:	e04f      	b.n	80085d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008532:	4b2b      	ldr	r3, [pc, #172]	@ (80085e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f003 020c 	and.w	r2, r3, #12
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	429a      	cmp	r2, r3
 8008542:	d1eb      	bne.n	800851c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008544:	4b25      	ldr	r3, [pc, #148]	@ (80085dc <HAL_RCC_ClockConfig+0x1b8>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 0307 	and.w	r3, r3, #7
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	429a      	cmp	r2, r3
 8008550:	d20c      	bcs.n	800856c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008552:	4b22      	ldr	r3, [pc, #136]	@ (80085dc <HAL_RCC_ClockConfig+0x1b8>)
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	b2d2      	uxtb	r2, r2
 8008558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800855a:	4b20      	ldr	r3, [pc, #128]	@ (80085dc <HAL_RCC_ClockConfig+0x1b8>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0307 	and.w	r3, r3, #7
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	429a      	cmp	r2, r3
 8008566:	d001      	beq.n	800856c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e032      	b.n	80085d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 0304 	and.w	r3, r3, #4
 8008574:	2b00      	cmp	r3, #0
 8008576:	d008      	beq.n	800858a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008578:	4b19      	ldr	r3, [pc, #100]	@ (80085e0 <HAL_RCC_ClockConfig+0x1bc>)
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	4916      	ldr	r1, [pc, #88]	@ (80085e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008586:	4313      	orrs	r3, r2
 8008588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0308 	and.w	r3, r3, #8
 8008592:	2b00      	cmp	r3, #0
 8008594:	d009      	beq.n	80085aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008596:	4b12      	ldr	r3, [pc, #72]	@ (80085e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	00db      	lsls	r3, r3, #3
 80085a4:	490e      	ldr	r1, [pc, #56]	@ (80085e0 <HAL_RCC_ClockConfig+0x1bc>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80085aa:	f000 f821 	bl	80085f0 <HAL_RCC_GetSysClockFreq>
 80085ae:	4602      	mov	r2, r0
 80085b0:	4b0b      	ldr	r3, [pc, #44]	@ (80085e0 <HAL_RCC_ClockConfig+0x1bc>)
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	091b      	lsrs	r3, r3, #4
 80085b6:	f003 030f 	and.w	r3, r3, #15
 80085ba:	490a      	ldr	r1, [pc, #40]	@ (80085e4 <HAL_RCC_ClockConfig+0x1c0>)
 80085bc:	5ccb      	ldrb	r3, [r1, r3]
 80085be:	fa22 f303 	lsr.w	r3, r2, r3
 80085c2:	4a09      	ldr	r2, [pc, #36]	@ (80085e8 <HAL_RCC_ClockConfig+0x1c4>)
 80085c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80085c6:	4b09      	ldr	r3, [pc, #36]	@ (80085ec <HAL_RCC_ClockConfig+0x1c8>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fb ffd6 	bl	800457c <HAL_InitTick>

  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	40023c00 	.word	0x40023c00
 80085e0:	40023800 	.word	0x40023800
 80085e4:	08019b50 	.word	0x08019b50
 80085e8:	20000204 	.word	0x20000204
 80085ec:	20000208 	.word	0x20000208

080085f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085f4:	b094      	sub	sp, #80	@ 0x50
 80085f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80085f8:	2300      	movs	r3, #0
 80085fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80085fc:	2300      	movs	r3, #0
 80085fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008600:	2300      	movs	r3, #0
 8008602:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008604:	2300      	movs	r3, #0
 8008606:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008608:	4b79      	ldr	r3, [pc, #484]	@ (80087f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f003 030c 	and.w	r3, r3, #12
 8008610:	2b08      	cmp	r3, #8
 8008612:	d00d      	beq.n	8008630 <HAL_RCC_GetSysClockFreq+0x40>
 8008614:	2b08      	cmp	r3, #8
 8008616:	f200 80e1 	bhi.w	80087dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800861a:	2b00      	cmp	r3, #0
 800861c:	d002      	beq.n	8008624 <HAL_RCC_GetSysClockFreq+0x34>
 800861e:	2b04      	cmp	r3, #4
 8008620:	d003      	beq.n	800862a <HAL_RCC_GetSysClockFreq+0x3a>
 8008622:	e0db      	b.n	80087dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008624:	4b73      	ldr	r3, [pc, #460]	@ (80087f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8008626:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8008628:	e0db      	b.n	80087e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800862a:	4b73      	ldr	r3, [pc, #460]	@ (80087f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800862c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800862e:	e0d8      	b.n	80087e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008630:	4b6f      	ldr	r3, [pc, #444]	@ (80087f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008638:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800863a:	4b6d      	ldr	r3, [pc, #436]	@ (80087f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d063      	beq.n	800870e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008646:	4b6a      	ldr	r3, [pc, #424]	@ (80087f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	099b      	lsrs	r3, r3, #6
 800864c:	2200      	movs	r2, #0
 800864e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008650:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008658:	633b      	str	r3, [r7, #48]	@ 0x30
 800865a:	2300      	movs	r3, #0
 800865c:	637b      	str	r3, [r7, #52]	@ 0x34
 800865e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008662:	4622      	mov	r2, r4
 8008664:	462b      	mov	r3, r5
 8008666:	f04f 0000 	mov.w	r0, #0
 800866a:	f04f 0100 	mov.w	r1, #0
 800866e:	0159      	lsls	r1, r3, #5
 8008670:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008674:	0150      	lsls	r0, r2, #5
 8008676:	4602      	mov	r2, r0
 8008678:	460b      	mov	r3, r1
 800867a:	4621      	mov	r1, r4
 800867c:	1a51      	subs	r1, r2, r1
 800867e:	6139      	str	r1, [r7, #16]
 8008680:	4629      	mov	r1, r5
 8008682:	eb63 0301 	sbc.w	r3, r3, r1
 8008686:	617b      	str	r3, [r7, #20]
 8008688:	f04f 0200 	mov.w	r2, #0
 800868c:	f04f 0300 	mov.w	r3, #0
 8008690:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008694:	4659      	mov	r1, fp
 8008696:	018b      	lsls	r3, r1, #6
 8008698:	4651      	mov	r1, sl
 800869a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800869e:	4651      	mov	r1, sl
 80086a0:	018a      	lsls	r2, r1, #6
 80086a2:	4651      	mov	r1, sl
 80086a4:	ebb2 0801 	subs.w	r8, r2, r1
 80086a8:	4659      	mov	r1, fp
 80086aa:	eb63 0901 	sbc.w	r9, r3, r1
 80086ae:	f04f 0200 	mov.w	r2, #0
 80086b2:	f04f 0300 	mov.w	r3, #0
 80086b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80086ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80086be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80086c2:	4690      	mov	r8, r2
 80086c4:	4699      	mov	r9, r3
 80086c6:	4623      	mov	r3, r4
 80086c8:	eb18 0303 	adds.w	r3, r8, r3
 80086cc:	60bb      	str	r3, [r7, #8]
 80086ce:	462b      	mov	r3, r5
 80086d0:	eb49 0303 	adc.w	r3, r9, r3
 80086d4:	60fb      	str	r3, [r7, #12]
 80086d6:	f04f 0200 	mov.w	r2, #0
 80086da:	f04f 0300 	mov.w	r3, #0
 80086de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80086e2:	4629      	mov	r1, r5
 80086e4:	024b      	lsls	r3, r1, #9
 80086e6:	4621      	mov	r1, r4
 80086e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80086ec:	4621      	mov	r1, r4
 80086ee:	024a      	lsls	r2, r1, #9
 80086f0:	4610      	mov	r0, r2
 80086f2:	4619      	mov	r1, r3
 80086f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086f6:	2200      	movs	r2, #0
 80086f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80086fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008700:	f7f8 fa82 	bl	8000c08 <__aeabi_uldivmod>
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	4613      	mov	r3, r2
 800870a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800870c:	e058      	b.n	80087c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800870e:	4b38      	ldr	r3, [pc, #224]	@ (80087f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	099b      	lsrs	r3, r3, #6
 8008714:	2200      	movs	r2, #0
 8008716:	4618      	mov	r0, r3
 8008718:	4611      	mov	r1, r2
 800871a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800871e:	623b      	str	r3, [r7, #32]
 8008720:	2300      	movs	r3, #0
 8008722:	627b      	str	r3, [r7, #36]	@ 0x24
 8008724:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008728:	4642      	mov	r2, r8
 800872a:	464b      	mov	r3, r9
 800872c:	f04f 0000 	mov.w	r0, #0
 8008730:	f04f 0100 	mov.w	r1, #0
 8008734:	0159      	lsls	r1, r3, #5
 8008736:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800873a:	0150      	lsls	r0, r2, #5
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	4641      	mov	r1, r8
 8008742:	ebb2 0a01 	subs.w	sl, r2, r1
 8008746:	4649      	mov	r1, r9
 8008748:	eb63 0b01 	sbc.w	fp, r3, r1
 800874c:	f04f 0200 	mov.w	r2, #0
 8008750:	f04f 0300 	mov.w	r3, #0
 8008754:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008758:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800875c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008760:	ebb2 040a 	subs.w	r4, r2, sl
 8008764:	eb63 050b 	sbc.w	r5, r3, fp
 8008768:	f04f 0200 	mov.w	r2, #0
 800876c:	f04f 0300 	mov.w	r3, #0
 8008770:	00eb      	lsls	r3, r5, #3
 8008772:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008776:	00e2      	lsls	r2, r4, #3
 8008778:	4614      	mov	r4, r2
 800877a:	461d      	mov	r5, r3
 800877c:	4643      	mov	r3, r8
 800877e:	18e3      	adds	r3, r4, r3
 8008780:	603b      	str	r3, [r7, #0]
 8008782:	464b      	mov	r3, r9
 8008784:	eb45 0303 	adc.w	r3, r5, r3
 8008788:	607b      	str	r3, [r7, #4]
 800878a:	f04f 0200 	mov.w	r2, #0
 800878e:	f04f 0300 	mov.w	r3, #0
 8008792:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008796:	4629      	mov	r1, r5
 8008798:	028b      	lsls	r3, r1, #10
 800879a:	4621      	mov	r1, r4
 800879c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80087a0:	4621      	mov	r1, r4
 80087a2:	028a      	lsls	r2, r1, #10
 80087a4:	4610      	mov	r0, r2
 80087a6:	4619      	mov	r1, r3
 80087a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087aa:	2200      	movs	r2, #0
 80087ac:	61bb      	str	r3, [r7, #24]
 80087ae:	61fa      	str	r2, [r7, #28]
 80087b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087b4:	f7f8 fa28 	bl	8000c08 <__aeabi_uldivmod>
 80087b8:	4602      	mov	r2, r0
 80087ba:	460b      	mov	r3, r1
 80087bc:	4613      	mov	r3, r2
 80087be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80087c0:	4b0b      	ldr	r3, [pc, #44]	@ (80087f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	0c1b      	lsrs	r3, r3, #16
 80087c6:	f003 0303 	and.w	r3, r3, #3
 80087ca:	3301      	adds	r3, #1
 80087cc:	005b      	lsls	r3, r3, #1
 80087ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80087d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80087d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80087da:	e002      	b.n	80087e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80087dc:	4b05      	ldr	r3, [pc, #20]	@ (80087f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80087de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80087e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3750      	adds	r7, #80	@ 0x50
 80087e8:	46bd      	mov	sp, r7
 80087ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087ee:	bf00      	nop
 80087f0:	40023800 	.word	0x40023800
 80087f4:	00f42400 	.word	0x00f42400
 80087f8:	007a1200 	.word	0x007a1200

080087fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087fc:	b480      	push	{r7}
 80087fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008800:	4b03      	ldr	r3, [pc, #12]	@ (8008810 <HAL_RCC_GetHCLKFreq+0x14>)
 8008802:	681b      	ldr	r3, [r3, #0]
}
 8008804:	4618      	mov	r0, r3
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	20000204 	.word	0x20000204

08008814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008818:	f7ff fff0 	bl	80087fc <HAL_RCC_GetHCLKFreq>
 800881c:	4602      	mov	r2, r0
 800881e:	4b05      	ldr	r3, [pc, #20]	@ (8008834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	0a9b      	lsrs	r3, r3, #10
 8008824:	f003 0307 	and.w	r3, r3, #7
 8008828:	4903      	ldr	r1, [pc, #12]	@ (8008838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800882a:	5ccb      	ldrb	r3, [r1, r3]
 800882c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008830:	4618      	mov	r0, r3
 8008832:	bd80      	pop	{r7, pc}
 8008834:	40023800 	.word	0x40023800
 8008838:	08019b60 	.word	0x08019b60

0800883c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008840:	f7ff ffdc 	bl	80087fc <HAL_RCC_GetHCLKFreq>
 8008844:	4602      	mov	r2, r0
 8008846:	4b05      	ldr	r3, [pc, #20]	@ (800885c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	0b5b      	lsrs	r3, r3, #13
 800884c:	f003 0307 	and.w	r3, r3, #7
 8008850:	4903      	ldr	r1, [pc, #12]	@ (8008860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008852:	5ccb      	ldrb	r3, [r1, r3]
 8008854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008858:	4618      	mov	r0, r3
 800885a:	bd80      	pop	{r7, pc}
 800885c:	40023800 	.word	0x40023800
 8008860:	08019b60 	.word	0x08019b60

08008864 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	220f      	movs	r2, #15
 8008872:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008874:	4b12      	ldr	r3, [pc, #72]	@ (80088c0 <HAL_RCC_GetClockConfig+0x5c>)
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	f003 0203 	and.w	r2, r3, #3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008880:	4b0f      	ldr	r3, [pc, #60]	@ (80088c0 <HAL_RCC_GetClockConfig+0x5c>)
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800888c:	4b0c      	ldr	r3, [pc, #48]	@ (80088c0 <HAL_RCC_GetClockConfig+0x5c>)
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008898:	4b09      	ldr	r3, [pc, #36]	@ (80088c0 <HAL_RCC_GetClockConfig+0x5c>)
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	08db      	lsrs	r3, r3, #3
 800889e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80088a6:	4b07      	ldr	r3, [pc, #28]	@ (80088c4 <HAL_RCC_GetClockConfig+0x60>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 0207 	and.w	r2, r3, #7
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	601a      	str	r2, [r3, #0]
}
 80088b2:	bf00      	nop
 80088b4:	370c      	adds	r7, #12
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	40023800 	.word	0x40023800
 80088c4:	40023c00 	.word	0x40023c00

080088c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0301 	and.w	r3, r3, #1
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d105      	bne.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d035      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80088f0:	4b62      	ldr	r3, [pc, #392]	@ (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088f6:	f7fc f86f 	bl	80049d8 <HAL_GetTick>
 80088fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088fc:	e008      	b.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80088fe:	f7fc f86b 	bl	80049d8 <HAL_GetTick>
 8008902:	4602      	mov	r2, r0
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	2b02      	cmp	r3, #2
 800890a:	d901      	bls.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800890c:	2303      	movs	r3, #3
 800890e:	e0b0      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008910:	4b5b      	ldr	r3, [pc, #364]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1f0      	bne.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	019a      	lsls	r2, r3, #6
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	071b      	lsls	r3, r3, #28
 8008928:	4955      	ldr	r1, [pc, #340]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800892a:	4313      	orrs	r3, r2
 800892c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008930:	4b52      	ldr	r3, [pc, #328]	@ (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008932:	2201      	movs	r2, #1
 8008934:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008936:	f7fc f84f 	bl	80049d8 <HAL_GetTick>
 800893a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800893c:	e008      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800893e:	f7fc f84b 	bl	80049d8 <HAL_GetTick>
 8008942:	4602      	mov	r2, r0
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	2b02      	cmp	r3, #2
 800894a:	d901      	bls.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800894c:	2303      	movs	r3, #3
 800894e:	e090      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008950:	4b4b      	ldr	r3, [pc, #300]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d0f0      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b00      	cmp	r3, #0
 8008966:	f000 8083 	beq.w	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800896a:	2300      	movs	r3, #0
 800896c:	60fb      	str	r3, [r7, #12]
 800896e:	4b44      	ldr	r3, [pc, #272]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008972:	4a43      	ldr	r2, [pc, #268]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008978:	6413      	str	r3, [r2, #64]	@ 0x40
 800897a:	4b41      	ldr	r3, [pc, #260]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800897c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800897e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008982:	60fb      	str	r3, [r7, #12]
 8008984:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008986:	4b3f      	ldr	r3, [pc, #252]	@ (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a3e      	ldr	r2, [pc, #248]	@ (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800898c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008990:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008992:	f7fc f821 	bl	80049d8 <HAL_GetTick>
 8008996:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008998:	e008      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800899a:	f7fc f81d 	bl	80049d8 <HAL_GetTick>
 800899e:	4602      	mov	r2, r0
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d901      	bls.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e062      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80089ac:	4b35      	ldr	r3, [pc, #212]	@ (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d0f0      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80089b8:	4b31      	ldr	r3, [pc, #196]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d02f      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d028      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80089d6:	4b2a      	ldr	r3, [pc, #168]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80089e0:	4b29      	ldr	r3, [pc, #164]	@ (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80089e2:	2201      	movs	r2, #1
 80089e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80089e6:	4b28      	ldr	r3, [pc, #160]	@ (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80089ec:	4a24      	ldr	r2, [pc, #144]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80089f2:	4b23      	ldr	r3, [pc, #140]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d114      	bne.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80089fe:	f7fb ffeb 	bl	80049d8 <HAL_GetTick>
 8008a02:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a04:	e00a      	b.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a06:	f7fb ffe7 	bl	80049d8 <HAL_GetTick>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d901      	bls.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	e02a      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a1c:	4b18      	ldr	r3, [pc, #96]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a20:	f003 0302 	and.w	r3, r3, #2
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d0ee      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a34:	d10d      	bne.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008a36:	4b12      	ldr	r3, [pc, #72]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008a46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a4a:	490d      	ldr	r1, [pc, #52]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	608b      	str	r3, [r1, #8]
 8008a50:	e005      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008a52:	4b0b      	ldr	r3, [pc, #44]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	4a0a      	ldr	r2, [pc, #40]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a58:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008a5c:	6093      	str	r3, [r2, #8]
 8008a5e:	4b08      	ldr	r3, [pc, #32]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a60:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a6a:	4905      	ldr	r1, [pc, #20]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3718      	adds	r7, #24
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	42470068 	.word	0x42470068
 8008a80:	40023800 	.word	0x40023800
 8008a84:	40007000 	.word	0x40007000
 8008a88:	42470e40 	.word	0x42470e40

08008a8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b087      	sub	sp, #28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008a94:	2300      	movs	r3, #0
 8008a96:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d13f      	bne.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008aaa:	4b24      	ldr	r3, [pc, #144]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ab2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d006      	beq.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ac0:	d12f      	bne.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008ac4:	617b      	str	r3, [r7, #20]
          break;
 8008ac6:	e02f      	b.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ad0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008ad4:	d108      	bne.n	8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008ad6:	4b19      	ldr	r3, [pc, #100]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ade:	4a19      	ldr	r2, [pc, #100]	@ (8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ae4:	613b      	str	r3, [r7, #16]
 8008ae6:	e007      	b.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008ae8:	4b14      	ldr	r3, [pc, #80]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008af0:	4a15      	ldr	r2, [pc, #84]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8008af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008af6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008af8:	4b10      	ldr	r3, [pc, #64]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008afe:	099b      	lsrs	r3, r3, #6
 8008b00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	fb02 f303 	mul.w	r3, r2, r3
 8008b0a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b12:	0f1b      	lsrs	r3, r3, #28
 8008b14:	f003 0307 	and.w	r3, r3, #7
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b1e:	617b      	str	r3, [r7, #20]
          break;
 8008b20:	e002      	b.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008b22:	2300      	movs	r3, #0
 8008b24:	617b      	str	r3, [r7, #20]
          break;
 8008b26:	bf00      	nop
        }
      }
      break;
 8008b28:	e000      	b.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8008b2a:	bf00      	nop
    }
  }
  return frequency;
 8008b2c:	697b      	ldr	r3, [r7, #20]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	371c      	adds	r7, #28
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	40023800 	.word	0x40023800
 8008b40:	00bb8000 	.word	0x00bb8000
 8008b44:	007a1200 	.word	0x007a1200
 8008b48:	00f42400 	.word	0x00f42400

08008b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d101      	bne.n	8008b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e07b      	b.n	8008c56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d108      	bne.n	8008b78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b6e:	d009      	beq.n	8008b84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	61da      	str	r2, [r3, #28]
 8008b76:	e005      	b.n	8008b84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d106      	bne.n	8008ba4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7fb fb82 	bl	80042a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2202      	movs	r2, #2
 8008ba8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008bba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008bcc:	431a      	orrs	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bd6:	431a      	orrs	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	f003 0302 	and.w	r3, r3, #2
 8008be0:	431a      	orrs	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	695b      	ldr	r3, [r3, #20]
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	431a      	orrs	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bf4:	431a      	orrs	r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	69db      	ldr	r3, [r3, #28]
 8008bfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008bfe:	431a      	orrs	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a1b      	ldr	r3, [r3, #32]
 8008c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c08:	ea42 0103 	orr.w	r1, r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c10:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	430a      	orrs	r2, r1
 8008c1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	0c1b      	lsrs	r3, r3, #16
 8008c22:	f003 0104 	and.w	r1, r3, #4
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c2a:	f003 0210 	and.w	r2, r3, #16
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	69da      	ldr	r2, [r3, #28]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b082      	sub	sp, #8
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d101      	bne.n	8008c70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e041      	b.n	8008cf4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d106      	bne.n	8008c8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f7fb fb57 	bl	8004338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2202      	movs	r2, #2
 8008c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	3304      	adds	r3, #4
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	f000 fcf1 	bl	8009684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d001      	beq.n	8008d14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	e046      	b.n	8008da2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2202      	movs	r2, #2
 8008d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a23      	ldr	r2, [pc, #140]	@ (8008db0 <HAL_TIM_Base_Start+0xb4>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d022      	beq.n	8008d6c <HAL_TIM_Base_Start+0x70>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d2e:	d01d      	beq.n	8008d6c <HAL_TIM_Base_Start+0x70>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a1f      	ldr	r2, [pc, #124]	@ (8008db4 <HAL_TIM_Base_Start+0xb8>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d018      	beq.n	8008d6c <HAL_TIM_Base_Start+0x70>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a1e      	ldr	r2, [pc, #120]	@ (8008db8 <HAL_TIM_Base_Start+0xbc>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d013      	beq.n	8008d6c <HAL_TIM_Base_Start+0x70>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a1c      	ldr	r2, [pc, #112]	@ (8008dbc <HAL_TIM_Base_Start+0xc0>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d00e      	beq.n	8008d6c <HAL_TIM_Base_Start+0x70>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a1b      	ldr	r2, [pc, #108]	@ (8008dc0 <HAL_TIM_Base_Start+0xc4>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d009      	beq.n	8008d6c <HAL_TIM_Base_Start+0x70>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a19      	ldr	r2, [pc, #100]	@ (8008dc4 <HAL_TIM_Base_Start+0xc8>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d004      	beq.n	8008d6c <HAL_TIM_Base_Start+0x70>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a18      	ldr	r2, [pc, #96]	@ (8008dc8 <HAL_TIM_Base_Start+0xcc>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d111      	bne.n	8008d90 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f003 0307 	and.w	r3, r3, #7
 8008d76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2b06      	cmp	r3, #6
 8008d7c:	d010      	beq.n	8008da0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f042 0201 	orr.w	r2, r2, #1
 8008d8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d8e:	e007      	b.n	8008da0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f042 0201 	orr.w	r2, r2, #1
 8008d9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	40010000 	.word	0x40010000
 8008db4:	40000400 	.word	0x40000400
 8008db8:	40000800 	.word	0x40000800
 8008dbc:	40000c00 	.word	0x40000c00
 8008dc0:	40010400 	.word	0x40010400
 8008dc4:	40014000 	.word	0x40014000
 8008dc8:	40001800 	.word	0x40001800

08008dcc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	6a1a      	ldr	r2, [r3, #32]
 8008dda:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008dde:	4013      	ands	r3, r2
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10f      	bne.n	8008e04 <HAL_TIM_Base_Stop+0x38>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6a1a      	ldr	r2, [r3, #32]
 8008dea:	f240 4344 	movw	r3, #1092	@ 0x444
 8008dee:	4013      	ands	r3, r2
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d107      	bne.n	8008e04 <HAL_TIM_Base_Stop+0x38>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f022 0201 	bic.w	r2, r2, #1
 8008e02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	370c      	adds	r7, #12
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
	...

08008e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d001      	beq.n	8008e34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e04e      	b.n	8008ed2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2202      	movs	r2, #2
 8008e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68da      	ldr	r2, [r3, #12]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f042 0201 	orr.w	r2, r2, #1
 8008e4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a23      	ldr	r2, [pc, #140]	@ (8008ee0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d022      	beq.n	8008e9c <HAL_TIM_Base_Start_IT+0x80>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e5e:	d01d      	beq.n	8008e9c <HAL_TIM_Base_Start_IT+0x80>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a1f      	ldr	r2, [pc, #124]	@ (8008ee4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d018      	beq.n	8008e9c <HAL_TIM_Base_Start_IT+0x80>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8008ee8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d013      	beq.n	8008e9c <HAL_TIM_Base_Start_IT+0x80>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a1c      	ldr	r2, [pc, #112]	@ (8008eec <HAL_TIM_Base_Start_IT+0xd0>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d00e      	beq.n	8008e9c <HAL_TIM_Base_Start_IT+0x80>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a1b      	ldr	r2, [pc, #108]	@ (8008ef0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d009      	beq.n	8008e9c <HAL_TIM_Base_Start_IT+0x80>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a19      	ldr	r2, [pc, #100]	@ (8008ef4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d004      	beq.n	8008e9c <HAL_TIM_Base_Start_IT+0x80>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a18      	ldr	r2, [pc, #96]	@ (8008ef8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d111      	bne.n	8008ec0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	f003 0307 	and.w	r3, r3, #7
 8008ea6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2b06      	cmp	r3, #6
 8008eac:	d010      	beq.n	8008ed0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f042 0201 	orr.w	r2, r2, #1
 8008ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ebe:	e007      	b.n	8008ed0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f042 0201 	orr.w	r2, r2, #1
 8008ece:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3714      	adds	r7, #20
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop
 8008ee0:	40010000 	.word	0x40010000
 8008ee4:	40000400 	.word	0x40000400
 8008ee8:	40000800 	.word	0x40000800
 8008eec:	40000c00 	.word	0x40000c00
 8008ef0:	40010400 	.word	0x40010400
 8008ef4:	40014000 	.word	0x40014000
 8008ef8:	40001800 	.word	0x40001800

08008efc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e041      	b.n	8008f92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d106      	bne.n	8008f28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f839 	bl	8008f9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	3304      	adds	r3, #4
 8008f38:	4619      	mov	r1, r3
 8008f3a:	4610      	mov	r0, r2
 8008f3c:	f000 fba2 	bl	8009684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008f9a:	b480      	push	{r7}
 8008f9c:	b083      	sub	sp, #12
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008fa2:	bf00      	nop
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
	...

08008fb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d109      	bne.n	8008fd4 <HAL_TIM_PWM_Start+0x24>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	bf14      	ite	ne
 8008fcc:	2301      	movne	r3, #1
 8008fce:	2300      	moveq	r3, #0
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	e022      	b.n	800901a <HAL_TIM_PWM_Start+0x6a>
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	2b04      	cmp	r3, #4
 8008fd8:	d109      	bne.n	8008fee <HAL_TIM_PWM_Start+0x3e>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	bf14      	ite	ne
 8008fe6:	2301      	movne	r3, #1
 8008fe8:	2300      	moveq	r3, #0
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	e015      	b.n	800901a <HAL_TIM_PWM_Start+0x6a>
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	2b08      	cmp	r3, #8
 8008ff2:	d109      	bne.n	8009008 <HAL_TIM_PWM_Start+0x58>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	bf14      	ite	ne
 8009000:	2301      	movne	r3, #1
 8009002:	2300      	moveq	r3, #0
 8009004:	b2db      	uxtb	r3, r3
 8009006:	e008      	b.n	800901a <HAL_TIM_PWM_Start+0x6a>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b01      	cmp	r3, #1
 8009012:	bf14      	ite	ne
 8009014:	2301      	movne	r3, #1
 8009016:	2300      	moveq	r3, #0
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b00      	cmp	r3, #0
 800901c:	d001      	beq.n	8009022 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	e07c      	b.n	800911c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d104      	bne.n	8009032 <HAL_TIM_PWM_Start+0x82>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2202      	movs	r2, #2
 800902c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009030:	e013      	b.n	800905a <HAL_TIM_PWM_Start+0xaa>
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	2b04      	cmp	r3, #4
 8009036:	d104      	bne.n	8009042 <HAL_TIM_PWM_Start+0x92>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2202      	movs	r2, #2
 800903c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009040:	e00b      	b.n	800905a <HAL_TIM_PWM_Start+0xaa>
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	2b08      	cmp	r3, #8
 8009046:	d104      	bne.n	8009052 <HAL_TIM_PWM_Start+0xa2>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2202      	movs	r2, #2
 800904c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009050:	e003      	b.n	800905a <HAL_TIM_PWM_Start+0xaa>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2202      	movs	r2, #2
 8009056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2201      	movs	r2, #1
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	4618      	mov	r0, r3
 8009064:	f000 fe04 	bl	8009c70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a2d      	ldr	r2, [pc, #180]	@ (8009124 <HAL_TIM_PWM_Start+0x174>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d004      	beq.n	800907c <HAL_TIM_PWM_Start+0xcc>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a2c      	ldr	r2, [pc, #176]	@ (8009128 <HAL_TIM_PWM_Start+0x178>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d101      	bne.n	8009080 <HAL_TIM_PWM_Start+0xd0>
 800907c:	2301      	movs	r3, #1
 800907e:	e000      	b.n	8009082 <HAL_TIM_PWM_Start+0xd2>
 8009080:	2300      	movs	r3, #0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d007      	beq.n	8009096 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009094:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a22      	ldr	r2, [pc, #136]	@ (8009124 <HAL_TIM_PWM_Start+0x174>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d022      	beq.n	80090e6 <HAL_TIM_PWM_Start+0x136>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090a8:	d01d      	beq.n	80090e6 <HAL_TIM_PWM_Start+0x136>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a1f      	ldr	r2, [pc, #124]	@ (800912c <HAL_TIM_PWM_Start+0x17c>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d018      	beq.n	80090e6 <HAL_TIM_PWM_Start+0x136>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a1d      	ldr	r2, [pc, #116]	@ (8009130 <HAL_TIM_PWM_Start+0x180>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d013      	beq.n	80090e6 <HAL_TIM_PWM_Start+0x136>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a1c      	ldr	r2, [pc, #112]	@ (8009134 <HAL_TIM_PWM_Start+0x184>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d00e      	beq.n	80090e6 <HAL_TIM_PWM_Start+0x136>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a16      	ldr	r2, [pc, #88]	@ (8009128 <HAL_TIM_PWM_Start+0x178>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d009      	beq.n	80090e6 <HAL_TIM_PWM_Start+0x136>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a18      	ldr	r2, [pc, #96]	@ (8009138 <HAL_TIM_PWM_Start+0x188>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d004      	beq.n	80090e6 <HAL_TIM_PWM_Start+0x136>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a16      	ldr	r2, [pc, #88]	@ (800913c <HAL_TIM_PWM_Start+0x18c>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d111      	bne.n	800910a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	f003 0307 	and.w	r3, r3, #7
 80090f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2b06      	cmp	r3, #6
 80090f6:	d010      	beq.n	800911a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f042 0201 	orr.w	r2, r2, #1
 8009106:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009108:	e007      	b.n	800911a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f042 0201 	orr.w	r2, r2, #1
 8009118:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	40010000 	.word	0x40010000
 8009128:	40010400 	.word	0x40010400
 800912c:	40000400 	.word	0x40000400
 8009130:	40000800 	.word	0x40000800
 8009134:	40000c00 	.word	0x40000c00
 8009138:	40014000 	.word	0x40014000
 800913c:	40001800 	.word	0x40001800

08009140 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	f003 0302 	and.w	r3, r3, #2
 800915e:	2b00      	cmp	r3, #0
 8009160:	d020      	beq.n	80091a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f003 0302 	and.w	r3, r3, #2
 8009168:	2b00      	cmp	r3, #0
 800916a:	d01b      	beq.n	80091a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f06f 0202 	mvn.w	r2, #2
 8009174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2201      	movs	r2, #1
 800917a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	699b      	ldr	r3, [r3, #24]
 8009182:	f003 0303 	and.w	r3, r3, #3
 8009186:	2b00      	cmp	r3, #0
 8009188:	d003      	beq.n	8009192 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fa5b 	bl	8009646 <HAL_TIM_IC_CaptureCallback>
 8009190:	e005      	b.n	800919e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fa4d 	bl	8009632 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fa5e 	bl	800965a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	f003 0304 	and.w	r3, r3, #4
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d020      	beq.n	80091f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f003 0304 	and.w	r3, r3, #4
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d01b      	beq.n	80091f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f06f 0204 	mvn.w	r2, #4
 80091c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2202      	movs	r2, #2
 80091c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d003      	beq.n	80091de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fa35 	bl	8009646 <HAL_TIM_IC_CaptureCallback>
 80091dc:	e005      	b.n	80091ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fa27 	bl	8009632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 fa38 	bl	800965a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	f003 0308 	and.w	r3, r3, #8
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d020      	beq.n	800923c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f003 0308 	and.w	r3, r3, #8
 8009200:	2b00      	cmp	r3, #0
 8009202:	d01b      	beq.n	800923c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f06f 0208 	mvn.w	r2, #8
 800920c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2204      	movs	r2, #4
 8009212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	69db      	ldr	r3, [r3, #28]
 800921a:	f003 0303 	and.w	r3, r3, #3
 800921e:	2b00      	cmp	r3, #0
 8009220:	d003      	beq.n	800922a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fa0f 	bl	8009646 <HAL_TIM_IC_CaptureCallback>
 8009228:	e005      	b.n	8009236 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fa01 	bl	8009632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 fa12 	bl	800965a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	f003 0310 	and.w	r3, r3, #16
 8009242:	2b00      	cmp	r3, #0
 8009244:	d020      	beq.n	8009288 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f003 0310 	and.w	r3, r3, #16
 800924c:	2b00      	cmp	r3, #0
 800924e:	d01b      	beq.n	8009288 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f06f 0210 	mvn.w	r2, #16
 8009258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2208      	movs	r2, #8
 800925e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	69db      	ldr	r3, [r3, #28]
 8009266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800926a:	2b00      	cmp	r3, #0
 800926c:	d003      	beq.n	8009276 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f9e9 	bl	8009646 <HAL_TIM_IC_CaptureCallback>
 8009274:	e005      	b.n	8009282 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f9db 	bl	8009632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 f9ec 	bl	800965a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00c      	beq.n	80092ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f003 0301 	and.w	r3, r3, #1
 8009298:	2b00      	cmp	r3, #0
 800929a:	d007      	beq.n	80092ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f06f 0201 	mvn.w	r2, #1
 80092a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f7fa fef2 	bl	8004090 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00c      	beq.n	80092d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d007      	beq.n	80092d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80092c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 fdce 	bl	8009e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00c      	beq.n	80092f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d007      	beq.n	80092f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80092ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f9bd 	bl	800966e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	f003 0320 	and.w	r3, r3, #32
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00c      	beq.n	8009318 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f003 0320 	and.w	r3, r3, #32
 8009304:	2b00      	cmp	r3, #0
 8009306:	d007      	beq.n	8009318 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f06f 0220 	mvn.w	r2, #32
 8009310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fda0 	bl	8009e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009318:	bf00      	nop
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009336:	2b01      	cmp	r3, #1
 8009338:	d101      	bne.n	800933e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800933a:	2302      	movs	r3, #2
 800933c:	e0ae      	b.n	800949c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2201      	movs	r2, #1
 8009342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2b0c      	cmp	r3, #12
 800934a:	f200 809f 	bhi.w	800948c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800934e:	a201      	add	r2, pc, #4	@ (adr r2, 8009354 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009354:	08009389 	.word	0x08009389
 8009358:	0800948d 	.word	0x0800948d
 800935c:	0800948d 	.word	0x0800948d
 8009360:	0800948d 	.word	0x0800948d
 8009364:	080093c9 	.word	0x080093c9
 8009368:	0800948d 	.word	0x0800948d
 800936c:	0800948d 	.word	0x0800948d
 8009370:	0800948d 	.word	0x0800948d
 8009374:	0800940b 	.word	0x0800940b
 8009378:	0800948d 	.word	0x0800948d
 800937c:	0800948d 	.word	0x0800948d
 8009380:	0800948d 	.word	0x0800948d
 8009384:	0800944b 	.word	0x0800944b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68b9      	ldr	r1, [r7, #8]
 800938e:	4618      	mov	r0, r3
 8009390:	f000 fa24 	bl	80097dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	699a      	ldr	r2, [r3, #24]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f042 0208 	orr.w	r2, r2, #8
 80093a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	699a      	ldr	r2, [r3, #24]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f022 0204 	bic.w	r2, r2, #4
 80093b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6999      	ldr	r1, [r3, #24]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	691a      	ldr	r2, [r3, #16]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	430a      	orrs	r2, r1
 80093c4:	619a      	str	r2, [r3, #24]
      break;
 80093c6:	e064      	b.n	8009492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68b9      	ldr	r1, [r7, #8]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f000 fa74 	bl	80098bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	699a      	ldr	r2, [r3, #24]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	699a      	ldr	r2, [r3, #24]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	6999      	ldr	r1, [r3, #24]
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	021a      	lsls	r2, r3, #8
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	430a      	orrs	r2, r1
 8009406:	619a      	str	r2, [r3, #24]
      break;
 8009408:	e043      	b.n	8009492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68b9      	ldr	r1, [r7, #8]
 8009410:	4618      	mov	r0, r3
 8009412:	f000 fac9 	bl	80099a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	69da      	ldr	r2, [r3, #28]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f042 0208 	orr.w	r2, r2, #8
 8009424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	69da      	ldr	r2, [r3, #28]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f022 0204 	bic.w	r2, r2, #4
 8009434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	69d9      	ldr	r1, [r3, #28]
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	691a      	ldr	r2, [r3, #16]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	430a      	orrs	r2, r1
 8009446:	61da      	str	r2, [r3, #28]
      break;
 8009448:	e023      	b.n	8009492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68b9      	ldr	r1, [r7, #8]
 8009450:	4618      	mov	r0, r3
 8009452:	f000 fb1d 	bl	8009a90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	69da      	ldr	r2, [r3, #28]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	69da      	ldr	r2, [r3, #28]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	69d9      	ldr	r1, [r3, #28]
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	021a      	lsls	r2, r3, #8
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	430a      	orrs	r2, r1
 8009488:	61da      	str	r2, [r3, #28]
      break;
 800948a:	e002      	b.n	8009492 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	75fb      	strb	r3, [r7, #23]
      break;
 8009490:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2200      	movs	r2, #0
 8009496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800949a:	7dfb      	ldrb	r3, [r7, #23]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3718      	adds	r7, #24
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094ae:	2300      	movs	r3, #0
 80094b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d101      	bne.n	80094c0 <HAL_TIM_ConfigClockSource+0x1c>
 80094bc:	2302      	movs	r3, #2
 80094be:	e0b4      	b.n	800962a <HAL_TIM_ConfigClockSource+0x186>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2202      	movs	r2, #2
 80094cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80094de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80094e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	68ba      	ldr	r2, [r7, #8]
 80094ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094f8:	d03e      	beq.n	8009578 <HAL_TIM_ConfigClockSource+0xd4>
 80094fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094fe:	f200 8087 	bhi.w	8009610 <HAL_TIM_ConfigClockSource+0x16c>
 8009502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009506:	f000 8086 	beq.w	8009616 <HAL_TIM_ConfigClockSource+0x172>
 800950a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800950e:	d87f      	bhi.n	8009610 <HAL_TIM_ConfigClockSource+0x16c>
 8009510:	2b70      	cmp	r3, #112	@ 0x70
 8009512:	d01a      	beq.n	800954a <HAL_TIM_ConfigClockSource+0xa6>
 8009514:	2b70      	cmp	r3, #112	@ 0x70
 8009516:	d87b      	bhi.n	8009610 <HAL_TIM_ConfigClockSource+0x16c>
 8009518:	2b60      	cmp	r3, #96	@ 0x60
 800951a:	d050      	beq.n	80095be <HAL_TIM_ConfigClockSource+0x11a>
 800951c:	2b60      	cmp	r3, #96	@ 0x60
 800951e:	d877      	bhi.n	8009610 <HAL_TIM_ConfigClockSource+0x16c>
 8009520:	2b50      	cmp	r3, #80	@ 0x50
 8009522:	d03c      	beq.n	800959e <HAL_TIM_ConfigClockSource+0xfa>
 8009524:	2b50      	cmp	r3, #80	@ 0x50
 8009526:	d873      	bhi.n	8009610 <HAL_TIM_ConfigClockSource+0x16c>
 8009528:	2b40      	cmp	r3, #64	@ 0x40
 800952a:	d058      	beq.n	80095de <HAL_TIM_ConfigClockSource+0x13a>
 800952c:	2b40      	cmp	r3, #64	@ 0x40
 800952e:	d86f      	bhi.n	8009610 <HAL_TIM_ConfigClockSource+0x16c>
 8009530:	2b30      	cmp	r3, #48	@ 0x30
 8009532:	d064      	beq.n	80095fe <HAL_TIM_ConfigClockSource+0x15a>
 8009534:	2b30      	cmp	r3, #48	@ 0x30
 8009536:	d86b      	bhi.n	8009610 <HAL_TIM_ConfigClockSource+0x16c>
 8009538:	2b20      	cmp	r3, #32
 800953a:	d060      	beq.n	80095fe <HAL_TIM_ConfigClockSource+0x15a>
 800953c:	2b20      	cmp	r3, #32
 800953e:	d867      	bhi.n	8009610 <HAL_TIM_ConfigClockSource+0x16c>
 8009540:	2b00      	cmp	r3, #0
 8009542:	d05c      	beq.n	80095fe <HAL_TIM_ConfigClockSource+0x15a>
 8009544:	2b10      	cmp	r3, #16
 8009546:	d05a      	beq.n	80095fe <HAL_TIM_ConfigClockSource+0x15a>
 8009548:	e062      	b.n	8009610 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800955a:	f000 fb69 	bl	8009c30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800956c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68ba      	ldr	r2, [r7, #8]
 8009574:	609a      	str	r2, [r3, #8]
      break;
 8009576:	e04f      	b.n	8009618 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009588:	f000 fb52 	bl	8009c30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800959a:	609a      	str	r2, [r3, #8]
      break;
 800959c:	e03c      	b.n	8009618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095aa:	461a      	mov	r2, r3
 80095ac:	f000 fac6 	bl	8009b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2150      	movs	r1, #80	@ 0x50
 80095b6:	4618      	mov	r0, r3
 80095b8:	f000 fb1f 	bl	8009bfa <TIM_ITRx_SetConfig>
      break;
 80095bc:	e02c      	b.n	8009618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80095ca:	461a      	mov	r2, r3
 80095cc:	f000 fae5 	bl	8009b9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2160      	movs	r1, #96	@ 0x60
 80095d6:	4618      	mov	r0, r3
 80095d8:	f000 fb0f 	bl	8009bfa <TIM_ITRx_SetConfig>
      break;
 80095dc:	e01c      	b.n	8009618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095ea:	461a      	mov	r2, r3
 80095ec:	f000 faa6 	bl	8009b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2140      	movs	r1, #64	@ 0x40
 80095f6:	4618      	mov	r0, r3
 80095f8:	f000 faff 	bl	8009bfa <TIM_ITRx_SetConfig>
      break;
 80095fc:	e00c      	b.n	8009618 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4619      	mov	r1, r3
 8009608:	4610      	mov	r0, r2
 800960a:	f000 faf6 	bl	8009bfa <TIM_ITRx_SetConfig>
      break;
 800960e:	e003      	b.n	8009618 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	73fb      	strb	r3, [r7, #15]
      break;
 8009614:	e000      	b.n	8009618 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009616:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009628:	7bfb      	ldrb	r3, [r7, #15]
}
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009632:	b480      	push	{r7}
 8009634:	b083      	sub	sp, #12
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800963a:	bf00      	nop
 800963c:	370c      	adds	r7, #12
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009646:	b480      	push	{r7}
 8009648:	b083      	sub	sp, #12
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800964e:	bf00      	nop
 8009650:	370c      	adds	r7, #12
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr

0800965a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800965a:	b480      	push	{r7}
 800965c:	b083      	sub	sp, #12
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009662:	bf00      	nop
 8009664:	370c      	adds	r7, #12
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr

0800966e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800966e:	b480      	push	{r7}
 8009670:	b083      	sub	sp, #12
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009676:	bf00      	nop
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr
	...

08009684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a46      	ldr	r2, [pc, #280]	@ (80097b0 <TIM_Base_SetConfig+0x12c>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d013      	beq.n	80096c4 <TIM_Base_SetConfig+0x40>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096a2:	d00f      	beq.n	80096c4 <TIM_Base_SetConfig+0x40>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a43      	ldr	r2, [pc, #268]	@ (80097b4 <TIM_Base_SetConfig+0x130>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d00b      	beq.n	80096c4 <TIM_Base_SetConfig+0x40>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a42      	ldr	r2, [pc, #264]	@ (80097b8 <TIM_Base_SetConfig+0x134>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d007      	beq.n	80096c4 <TIM_Base_SetConfig+0x40>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a41      	ldr	r2, [pc, #260]	@ (80097bc <TIM_Base_SetConfig+0x138>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d003      	beq.n	80096c4 <TIM_Base_SetConfig+0x40>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a40      	ldr	r2, [pc, #256]	@ (80097c0 <TIM_Base_SetConfig+0x13c>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d108      	bne.n	80096d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a35      	ldr	r2, [pc, #212]	@ (80097b0 <TIM_Base_SetConfig+0x12c>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d02b      	beq.n	8009736 <TIM_Base_SetConfig+0xb2>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096e4:	d027      	beq.n	8009736 <TIM_Base_SetConfig+0xb2>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a32      	ldr	r2, [pc, #200]	@ (80097b4 <TIM_Base_SetConfig+0x130>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d023      	beq.n	8009736 <TIM_Base_SetConfig+0xb2>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a31      	ldr	r2, [pc, #196]	@ (80097b8 <TIM_Base_SetConfig+0x134>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d01f      	beq.n	8009736 <TIM_Base_SetConfig+0xb2>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a30      	ldr	r2, [pc, #192]	@ (80097bc <TIM_Base_SetConfig+0x138>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d01b      	beq.n	8009736 <TIM_Base_SetConfig+0xb2>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a2f      	ldr	r2, [pc, #188]	@ (80097c0 <TIM_Base_SetConfig+0x13c>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d017      	beq.n	8009736 <TIM_Base_SetConfig+0xb2>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a2e      	ldr	r2, [pc, #184]	@ (80097c4 <TIM_Base_SetConfig+0x140>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d013      	beq.n	8009736 <TIM_Base_SetConfig+0xb2>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a2d      	ldr	r2, [pc, #180]	@ (80097c8 <TIM_Base_SetConfig+0x144>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d00f      	beq.n	8009736 <TIM_Base_SetConfig+0xb2>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a2c      	ldr	r2, [pc, #176]	@ (80097cc <TIM_Base_SetConfig+0x148>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d00b      	beq.n	8009736 <TIM_Base_SetConfig+0xb2>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4a2b      	ldr	r2, [pc, #172]	@ (80097d0 <TIM_Base_SetConfig+0x14c>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d007      	beq.n	8009736 <TIM_Base_SetConfig+0xb2>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a2a      	ldr	r2, [pc, #168]	@ (80097d4 <TIM_Base_SetConfig+0x150>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d003      	beq.n	8009736 <TIM_Base_SetConfig+0xb2>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a29      	ldr	r2, [pc, #164]	@ (80097d8 <TIM_Base_SetConfig+0x154>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d108      	bne.n	8009748 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800973c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	4313      	orrs	r3, r2
 8009746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	4313      	orrs	r3, r2
 8009754:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	689a      	ldr	r2, [r3, #8]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a10      	ldr	r2, [pc, #64]	@ (80097b0 <TIM_Base_SetConfig+0x12c>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d003      	beq.n	800977c <TIM_Base_SetConfig+0xf8>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a12      	ldr	r2, [pc, #72]	@ (80097c0 <TIM_Base_SetConfig+0x13c>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d103      	bne.n	8009784 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	691a      	ldr	r2, [r3, #16]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	f003 0301 	and.w	r3, r3, #1
 8009792:	2b01      	cmp	r3, #1
 8009794:	d105      	bne.n	80097a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	f023 0201 	bic.w	r2, r3, #1
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	611a      	str	r2, [r3, #16]
  }
}
 80097a2:	bf00      	nop
 80097a4:	3714      	adds	r7, #20
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	40010000 	.word	0x40010000
 80097b4:	40000400 	.word	0x40000400
 80097b8:	40000800 	.word	0x40000800
 80097bc:	40000c00 	.word	0x40000c00
 80097c0:	40010400 	.word	0x40010400
 80097c4:	40014000 	.word	0x40014000
 80097c8:	40014400 	.word	0x40014400
 80097cc:	40014800 	.word	0x40014800
 80097d0:	40001800 	.word	0x40001800
 80097d4:	40001c00 	.word	0x40001c00
 80097d8:	40002000 	.word	0x40002000

080097dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097dc:	b480      	push	{r7}
 80097de:	b087      	sub	sp, #28
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a1b      	ldr	r3, [r3, #32]
 80097ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6a1b      	ldr	r3, [r3, #32]
 80097f0:	f023 0201 	bic.w	r2, r3, #1
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	699b      	ldr	r3, [r3, #24]
 8009802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800980a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f023 0303 	bic.w	r3, r3, #3
 8009812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	4313      	orrs	r3, r2
 800981c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	f023 0302 	bic.w	r3, r3, #2
 8009824:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	697a      	ldr	r2, [r7, #20]
 800982c:	4313      	orrs	r3, r2
 800982e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a20      	ldr	r2, [pc, #128]	@ (80098b4 <TIM_OC1_SetConfig+0xd8>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d003      	beq.n	8009840 <TIM_OC1_SetConfig+0x64>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a1f      	ldr	r2, [pc, #124]	@ (80098b8 <TIM_OC1_SetConfig+0xdc>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d10c      	bne.n	800985a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	f023 0308 	bic.w	r3, r3, #8
 8009846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	697a      	ldr	r2, [r7, #20]
 800984e:	4313      	orrs	r3, r2
 8009850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	f023 0304 	bic.w	r3, r3, #4
 8009858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a15      	ldr	r2, [pc, #84]	@ (80098b4 <TIM_OC1_SetConfig+0xd8>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d003      	beq.n	800986a <TIM_OC1_SetConfig+0x8e>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a14      	ldr	r2, [pc, #80]	@ (80098b8 <TIM_OC1_SetConfig+0xdc>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d111      	bne.n	800988e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	695b      	ldr	r3, [r3, #20]
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	4313      	orrs	r3, r2
 8009882:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	693a      	ldr	r2, [r7, #16]
 800988a:	4313      	orrs	r3, r2
 800988c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	693a      	ldr	r2, [r7, #16]
 8009892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	68fa      	ldr	r2, [r7, #12]
 8009898:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	685a      	ldr	r2, [r3, #4]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	621a      	str	r2, [r3, #32]
}
 80098a8:	bf00      	nop
 80098aa:	371c      	adds	r7, #28
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr
 80098b4:	40010000 	.word	0x40010000
 80098b8:	40010400 	.word	0x40010400

080098bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098bc:	b480      	push	{r7}
 80098be:	b087      	sub	sp, #28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a1b      	ldr	r3, [r3, #32]
 80098ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a1b      	ldr	r3, [r3, #32]
 80098d0:	f023 0210 	bic.w	r2, r3, #16
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	021b      	lsls	r3, r3, #8
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	f023 0320 	bic.w	r3, r3, #32
 8009906:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	011b      	lsls	r3, r3, #4
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	4313      	orrs	r3, r2
 8009912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a22      	ldr	r2, [pc, #136]	@ (80099a0 <TIM_OC2_SetConfig+0xe4>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d003      	beq.n	8009924 <TIM_OC2_SetConfig+0x68>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a21      	ldr	r2, [pc, #132]	@ (80099a4 <TIM_OC2_SetConfig+0xe8>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d10d      	bne.n	8009940 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800992a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	011b      	lsls	r3, r3, #4
 8009932:	697a      	ldr	r2, [r7, #20]
 8009934:	4313      	orrs	r3, r2
 8009936:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800993e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a17      	ldr	r2, [pc, #92]	@ (80099a0 <TIM_OC2_SetConfig+0xe4>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d003      	beq.n	8009950 <TIM_OC2_SetConfig+0x94>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a16      	ldr	r2, [pc, #88]	@ (80099a4 <TIM_OC2_SetConfig+0xe8>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d113      	bne.n	8009978 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009956:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800995e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	695b      	ldr	r3, [r3, #20]
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	693a      	ldr	r2, [r7, #16]
 8009968:	4313      	orrs	r3, r2
 800996a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	699b      	ldr	r3, [r3, #24]
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	4313      	orrs	r3, r2
 8009976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	693a      	ldr	r2, [r7, #16]
 800997c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	685a      	ldr	r2, [r3, #4]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	697a      	ldr	r2, [r7, #20]
 8009990:	621a      	str	r2, [r3, #32]
}
 8009992:	bf00      	nop
 8009994:	371c      	adds	r7, #28
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	40010000 	.word	0x40010000
 80099a4:	40010400 	.word	0x40010400

080099a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b087      	sub	sp, #28
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a1b      	ldr	r3, [r3, #32]
 80099bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	69db      	ldr	r3, [r3, #28]
 80099ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f023 0303 	bic.w	r3, r3, #3
 80099de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80099f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	021b      	lsls	r3, r3, #8
 80099f8:	697a      	ldr	r2, [r7, #20]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4a21      	ldr	r2, [pc, #132]	@ (8009a88 <TIM_OC3_SetConfig+0xe0>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d003      	beq.n	8009a0e <TIM_OC3_SetConfig+0x66>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4a20      	ldr	r2, [pc, #128]	@ (8009a8c <TIM_OC3_SetConfig+0xe4>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d10d      	bne.n	8009a2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009a14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	021b      	lsls	r3, r3, #8
 8009a1c:	697a      	ldr	r2, [r7, #20]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a16      	ldr	r2, [pc, #88]	@ (8009a88 <TIM_OC3_SetConfig+0xe0>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d003      	beq.n	8009a3a <TIM_OC3_SetConfig+0x92>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a15      	ldr	r2, [pc, #84]	@ (8009a8c <TIM_OC3_SetConfig+0xe4>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d113      	bne.n	8009a62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	695b      	ldr	r3, [r3, #20]
 8009a4e:	011b      	lsls	r3, r3, #4
 8009a50:	693a      	ldr	r2, [r7, #16]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	011b      	lsls	r3, r3, #4
 8009a5c:	693a      	ldr	r2, [r7, #16]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	693a      	ldr	r2, [r7, #16]
 8009a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	685a      	ldr	r2, [r3, #4]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	697a      	ldr	r2, [r7, #20]
 8009a7a:	621a      	str	r2, [r3, #32]
}
 8009a7c:	bf00      	nop
 8009a7e:	371c      	adds	r7, #28
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr
 8009a88:	40010000 	.word	0x40010000
 8009a8c:	40010400 	.word	0x40010400

08009a90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b087      	sub	sp, #28
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a1b      	ldr	r3, [r3, #32]
 8009a9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6a1b      	ldr	r3, [r3, #32]
 8009aa4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	69db      	ldr	r3, [r3, #28]
 8009ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	021b      	lsls	r3, r3, #8
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009ada:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	031b      	lsls	r3, r3, #12
 8009ae2:	693a      	ldr	r2, [r7, #16]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a12      	ldr	r2, [pc, #72]	@ (8009b34 <TIM_OC4_SetConfig+0xa4>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d003      	beq.n	8009af8 <TIM_OC4_SetConfig+0x68>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	4a11      	ldr	r2, [pc, #68]	@ (8009b38 <TIM_OC4_SetConfig+0xa8>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d109      	bne.n	8009b0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009afe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	695b      	ldr	r3, [r3, #20]
 8009b04:	019b      	lsls	r3, r3, #6
 8009b06:	697a      	ldr	r2, [r7, #20]
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	697a      	ldr	r2, [r7, #20]
 8009b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	68fa      	ldr	r2, [r7, #12]
 8009b16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	685a      	ldr	r2, [r3, #4]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	693a      	ldr	r2, [r7, #16]
 8009b24:	621a      	str	r2, [r3, #32]
}
 8009b26:	bf00      	nop
 8009b28:	371c      	adds	r7, #28
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	40010000 	.word	0x40010000
 8009b38:	40010400 	.word	0x40010400

08009b3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b087      	sub	sp, #28
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6a1b      	ldr	r3, [r3, #32]
 8009b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	6a1b      	ldr	r3, [r3, #32]
 8009b52:	f023 0201 	bic.w	r2, r3, #1
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	011b      	lsls	r3, r3, #4
 8009b6c:	693a      	ldr	r2, [r7, #16]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f023 030a 	bic.w	r3, r3, #10
 8009b78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	693a      	ldr	r2, [r7, #16]
 8009b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	697a      	ldr	r2, [r7, #20]
 8009b8c:	621a      	str	r2, [r3, #32]
}
 8009b8e:	bf00      	nop
 8009b90:	371c      	adds	r7, #28
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b9a:	b480      	push	{r7}
 8009b9c:	b087      	sub	sp, #28
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	60f8      	str	r0, [r7, #12]
 8009ba2:	60b9      	str	r1, [r7, #8]
 8009ba4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6a1b      	ldr	r3, [r3, #32]
 8009baa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	f023 0210 	bic.w	r2, r3, #16
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009bc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	031b      	lsls	r3, r3, #12
 8009bca:	693a      	ldr	r2, [r7, #16]
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009bd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	011b      	lsls	r3, r3, #4
 8009bdc:	697a      	ldr	r2, [r7, #20]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	693a      	ldr	r2, [r7, #16]
 8009be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	621a      	str	r2, [r3, #32]
}
 8009bee:	bf00      	nop
 8009bf0:	371c      	adds	r7, #28
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr

08009bfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009bfa:	b480      	push	{r7}
 8009bfc:	b085      	sub	sp, #20
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c12:	683a      	ldr	r2, [r7, #0]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	f043 0307 	orr.w	r3, r3, #7
 8009c1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	609a      	str	r2, [r3, #8]
}
 8009c24:	bf00      	nop
 8009c26:	3714      	adds	r7, #20
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b087      	sub	sp, #28
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
 8009c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	021a      	lsls	r2, r3, #8
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	431a      	orrs	r2, r3
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	697a      	ldr	r2, [r7, #20]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	697a      	ldr	r2, [r7, #20]
 8009c62:	609a      	str	r2, [r3, #8]
}
 8009c64:	bf00      	nop
 8009c66:	371c      	adds	r7, #28
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b087      	sub	sp, #28
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	f003 031f 	and.w	r3, r3, #31
 8009c82:	2201      	movs	r2, #1
 8009c84:	fa02 f303 	lsl.w	r3, r2, r3
 8009c88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6a1a      	ldr	r2, [r3, #32]
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	43db      	mvns	r3, r3
 8009c92:	401a      	ands	r2, r3
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6a1a      	ldr	r2, [r3, #32]
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	f003 031f 	and.w	r3, r3, #31
 8009ca2:	6879      	ldr	r1, [r7, #4]
 8009ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ca8:	431a      	orrs	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	621a      	str	r2, [r3, #32]
}
 8009cae:	bf00      	nop
 8009cb0:	371c      	adds	r7, #28
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr
	...

08009cbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d101      	bne.n	8009cd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	e05a      	b.n	8009d8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2202      	movs	r2, #2
 8009ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a21      	ldr	r2, [pc, #132]	@ (8009d98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d022      	beq.n	8009d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d20:	d01d      	beq.n	8009d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a1d      	ldr	r2, [pc, #116]	@ (8009d9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d018      	beq.n	8009d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a1b      	ldr	r2, [pc, #108]	@ (8009da0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d013      	beq.n	8009d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8009da4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d00e      	beq.n	8009d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a18      	ldr	r2, [pc, #96]	@ (8009da8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d009      	beq.n	8009d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a17      	ldr	r2, [pc, #92]	@ (8009dac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d004      	beq.n	8009d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a15      	ldr	r2, [pc, #84]	@ (8009db0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d10c      	bne.n	8009d78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3714      	adds	r7, #20
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	40010000 	.word	0x40010000
 8009d9c:	40000400 	.word	0x40000400
 8009da0:	40000800 	.word	0x40000800
 8009da4:	40000c00 	.word	0x40000c00
 8009da8:	40010400 	.word	0x40010400
 8009dac:	40014000 	.word	0x40014000
 8009db0:	40001800 	.word	0x40001800

08009db4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d101      	bne.n	8009dd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009dcc:	2302      	movs	r3, #2
 8009dce:	e03d      	b.n	8009e4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	691b      	ldr	r3, [r3, #16]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	695b      	ldr	r3, [r3, #20]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	69db      	ldr	r3, [r3, #28]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3714      	adds	r7, #20
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e60:	bf00      	nop
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e74:	bf00      	nop
 8009e76:	370c      	adds	r7, #12
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d101      	bne.n	8009e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e042      	b.n	8009f18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d106      	bne.n	8009eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7fa fadc 	bl	8004464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2224      	movs	r2, #36	@ 0x24
 8009eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68da      	ldr	r2, [r3, #12]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009ec2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 fdbd 	bl	800aa44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	691a      	ldr	r2, [r3, #16]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009ed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	695a      	ldr	r2, [r3, #20]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009ee8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	68da      	ldr	r2, [r3, #12]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009ef8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2220      	movs	r2, #32
 8009f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2220      	movs	r2, #32
 8009f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3708      	adds	r7, #8
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b08a      	sub	sp, #40	@ 0x28
 8009f24:	af02      	add	r7, sp, #8
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	603b      	str	r3, [r7, #0]
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009f30:	2300      	movs	r3, #0
 8009f32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	2b20      	cmp	r3, #32
 8009f3e:	d175      	bne.n	800a02c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d002      	beq.n	8009f4c <HAL_UART_Transmit+0x2c>
 8009f46:	88fb      	ldrh	r3, [r7, #6]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d101      	bne.n	8009f50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e06e      	b.n	800a02e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2200      	movs	r2, #0
 8009f54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2221      	movs	r2, #33	@ 0x21
 8009f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f5e:	f7fa fd3b 	bl	80049d8 <HAL_GetTick>
 8009f62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	88fa      	ldrh	r2, [r7, #6]
 8009f68:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	88fa      	ldrh	r2, [r7, #6]
 8009f6e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f78:	d108      	bne.n	8009f8c <HAL_UART_Transmit+0x6c>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	691b      	ldr	r3, [r3, #16]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d104      	bne.n	8009f8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009f82:	2300      	movs	r3, #0
 8009f84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	61bb      	str	r3, [r7, #24]
 8009f8a:	e003      	b.n	8009f94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f90:	2300      	movs	r3, #0
 8009f92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009f94:	e02e      	b.n	8009ff4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	9300      	str	r3, [sp, #0]
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	2180      	movs	r1, #128	@ 0x80
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f000 fb1f 	bl	800a5e4 <UART_WaitOnFlagUntilTimeout>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d005      	beq.n	8009fb8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2220      	movs	r2, #32
 8009fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	e03a      	b.n	800a02e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d10b      	bne.n	8009fd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	881b      	ldrh	r3, [r3, #0]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009fcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	3302      	adds	r3, #2
 8009fd2:	61bb      	str	r3, [r7, #24]
 8009fd4:	e007      	b.n	8009fe6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	781a      	ldrb	r2, [r3, #0]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	3b01      	subs	r3, #1
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1cb      	bne.n	8009f96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	9300      	str	r3, [sp, #0]
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	2200      	movs	r2, #0
 800a006:	2140      	movs	r1, #64	@ 0x40
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 faeb 	bl	800a5e4 <UART_WaitOnFlagUntilTimeout>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d005      	beq.n	800a020 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2220      	movs	r2, #32
 800a018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a01c:	2303      	movs	r3, #3
 800a01e:	e006      	b.n	800a02e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2220      	movs	r2, #32
 800a024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a028:	2300      	movs	r3, #0
 800a02a:	e000      	b.n	800a02e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a02c:	2302      	movs	r3, #2
  }
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3720      	adds	r7, #32
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b084      	sub	sp, #16
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	60f8      	str	r0, [r7, #12]
 800a03e:	60b9      	str	r1, [r7, #8]
 800a040:	4613      	mov	r3, r2
 800a042:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	2b20      	cmp	r3, #32
 800a04e:	d112      	bne.n	800a076 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d002      	beq.n	800a05c <HAL_UART_Receive_IT+0x26>
 800a056:	88fb      	ldrh	r3, [r7, #6]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d101      	bne.n	800a060 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	e00b      	b.n	800a078 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2200      	movs	r2, #0
 800a064:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a066:	88fb      	ldrh	r3, [r7, #6]
 800a068:	461a      	mov	r2, r3
 800a06a:	68b9      	ldr	r1, [r7, #8]
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f000 fb12 	bl	800a696 <UART_Start_Receive_IT>
 800a072:	4603      	mov	r3, r0
 800a074:	e000      	b.n	800a078 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a076:	2302      	movs	r3, #2
  }
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b0ba      	sub	sp, #232	@ 0xe8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	695b      	ldr	r3, [r3, #20]
 800a0a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a0b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0b6:	f003 030f 	and.w	r3, r3, #15
 800a0ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a0be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d10f      	bne.n	800a0e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a0c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0ca:	f003 0320 	and.w	r3, r3, #32
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d009      	beq.n	800a0e6 <HAL_UART_IRQHandler+0x66>
 800a0d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0d6:	f003 0320 	and.w	r3, r3, #32
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d003      	beq.n	800a0e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 fbf2 	bl	800a8c8 <UART_Receive_IT>
      return;
 800a0e4:	e25b      	b.n	800a59e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a0e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f000 80de 	beq.w	800a2ac <HAL_UART_IRQHandler+0x22c>
 800a0f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0f4:	f003 0301 	and.w	r3, r3, #1
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d106      	bne.n	800a10a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a0fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a100:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a104:	2b00      	cmp	r3, #0
 800a106:	f000 80d1 	beq.w	800a2ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a10a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a10e:	f003 0301 	and.w	r3, r3, #1
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00b      	beq.n	800a12e <HAL_UART_IRQHandler+0xae>
 800a116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a11a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d005      	beq.n	800a12e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a126:	f043 0201 	orr.w	r2, r3, #1
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a12e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a132:	f003 0304 	and.w	r3, r3, #4
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00b      	beq.n	800a152 <HAL_UART_IRQHandler+0xd2>
 800a13a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a13e:	f003 0301 	and.w	r3, r3, #1
 800a142:	2b00      	cmp	r3, #0
 800a144:	d005      	beq.n	800a152 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a14a:	f043 0202 	orr.w	r2, r3, #2
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a156:	f003 0302 	and.w	r3, r3, #2
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00b      	beq.n	800a176 <HAL_UART_IRQHandler+0xf6>
 800a15e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a162:	f003 0301 	and.w	r3, r3, #1
 800a166:	2b00      	cmp	r3, #0
 800a168:	d005      	beq.n	800a176 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a16e:	f043 0204 	orr.w	r2, r3, #4
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a17a:	f003 0308 	and.w	r3, r3, #8
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d011      	beq.n	800a1a6 <HAL_UART_IRQHandler+0x126>
 800a182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a186:	f003 0320 	and.w	r3, r3, #32
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d105      	bne.n	800a19a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a18e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a192:	f003 0301 	and.w	r3, r3, #1
 800a196:	2b00      	cmp	r3, #0
 800a198:	d005      	beq.n	800a1a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a19e:	f043 0208 	orr.w	r2, r3, #8
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f000 81f2 	beq.w	800a594 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a1b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1b4:	f003 0320 	and.w	r3, r3, #32
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d008      	beq.n	800a1ce <HAL_UART_IRQHandler+0x14e>
 800a1bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1c0:	f003 0320 	and.w	r3, r3, #32
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d002      	beq.n	800a1ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fb7d 	bl	800a8c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	695b      	ldr	r3, [r3, #20]
 800a1d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1d8:	2b40      	cmp	r3, #64	@ 0x40
 800a1da:	bf0c      	ite	eq
 800a1dc:	2301      	moveq	r3, #1
 800a1de:	2300      	movne	r3, #0
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1ea:	f003 0308 	and.w	r3, r3, #8
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d103      	bne.n	800a1fa <HAL_UART_IRQHandler+0x17a>
 800a1f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d04f      	beq.n	800a29a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 fa85 	bl	800a70a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	695b      	ldr	r3, [r3, #20]
 800a206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a20a:	2b40      	cmp	r3, #64	@ 0x40
 800a20c:	d141      	bne.n	800a292 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	3314      	adds	r3, #20
 800a214:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a218:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a21c:	e853 3f00 	ldrex	r3, [r3]
 800a220:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a224:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a228:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a22c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	3314      	adds	r3, #20
 800a236:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a23a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a23e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a242:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a246:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a24a:	e841 2300 	strex	r3, r2, [r1]
 800a24e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1d9      	bne.n	800a20e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d013      	beq.n	800a28a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a266:	4a7e      	ldr	r2, [pc, #504]	@ (800a460 <HAL_UART_IRQHandler+0x3e0>)
 800a268:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fa fd34 	bl	8004cdc <HAL_DMA_Abort_IT>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d016      	beq.n	800a2a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a27e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a284:	4610      	mov	r0, r2
 800a286:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a288:	e00e      	b.n	800a2a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f994 	bl	800a5b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a290:	e00a      	b.n	800a2a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f990 	bl	800a5b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a298:	e006      	b.n	800a2a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f98c 	bl	800a5b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a2a6:	e175      	b.n	800a594 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2a8:	bf00      	nop
    return;
 800a2aa:	e173      	b.n	800a594 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	f040 814f 	bne.w	800a554 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a2b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2ba:	f003 0310 	and.w	r3, r3, #16
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f000 8148 	beq.w	800a554 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a2c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2c8:	f003 0310 	and.w	r3, r3, #16
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f000 8141 	beq.w	800a554 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	60bb      	str	r3, [r7, #8]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	60bb      	str	r3, [r7, #8]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	60bb      	str	r3, [r7, #8]
 800a2e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	695b      	ldr	r3, [r3, #20]
 800a2ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2f2:	2b40      	cmp	r3, #64	@ 0x40
 800a2f4:	f040 80b6 	bne.w	800a464 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a304:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f000 8145 	beq.w	800a598 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a316:	429a      	cmp	r2, r3
 800a318:	f080 813e 	bcs.w	800a598 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a322:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a328:	69db      	ldr	r3, [r3, #28]
 800a32a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a32e:	f000 8088 	beq.w	800a442 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	330c      	adds	r3, #12
 800a338:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a340:	e853 3f00 	ldrex	r3, [r3]
 800a344:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a348:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a34c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a350:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	330c      	adds	r3, #12
 800a35a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a35e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a362:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a366:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a36a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a36e:	e841 2300 	strex	r3, r2, [r1]
 800a372:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a376:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d1d9      	bne.n	800a332 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	3314      	adds	r3, #20
 800a384:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a386:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a388:	e853 3f00 	ldrex	r3, [r3]
 800a38c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a38e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a390:	f023 0301 	bic.w	r3, r3, #1
 800a394:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	3314      	adds	r3, #20
 800a39e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a3a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a3a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a3aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a3ae:	e841 2300 	strex	r3, r2, [r1]
 800a3b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a3b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1e1      	bne.n	800a37e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	3314      	adds	r3, #20
 800a3c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a3c4:	e853 3f00 	ldrex	r3, [r3]
 800a3c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a3ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	3314      	adds	r3, #20
 800a3da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a3de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a3e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a3e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a3e6:	e841 2300 	strex	r3, r2, [r1]
 800a3ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a3ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1e3      	bne.n	800a3ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2220      	movs	r2, #32
 800a3f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	330c      	adds	r3, #12
 800a406:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a40a:	e853 3f00 	ldrex	r3, [r3]
 800a40e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a410:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a412:	f023 0310 	bic.w	r3, r3, #16
 800a416:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	330c      	adds	r3, #12
 800a420:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a424:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a426:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a428:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a42a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a42c:	e841 2300 	strex	r3, r2, [r1]
 800a430:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a432:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1e3      	bne.n	800a400 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7fa fbdd 	bl	8004bfc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2202      	movs	r2, #2
 800a446:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a450:	b29b      	uxth	r3, r3
 800a452:	1ad3      	subs	r3, r2, r3
 800a454:	b29b      	uxth	r3, r3
 800a456:	4619      	mov	r1, r3
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 f8b7 	bl	800a5cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a45e:	e09b      	b.n	800a598 <HAL_UART_IRQHandler+0x518>
 800a460:	0800a7d1 	.word	0x0800a7d1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	1ad3      	subs	r3, r2, r3
 800a470:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a478:	b29b      	uxth	r3, r3
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f000 808e 	beq.w	800a59c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a480:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a484:	2b00      	cmp	r3, #0
 800a486:	f000 8089 	beq.w	800a59c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	330c      	adds	r3, #12
 800a490:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a494:	e853 3f00 	ldrex	r3, [r3]
 800a498:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a49a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a49c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	330c      	adds	r3, #12
 800a4aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a4ae:	647a      	str	r2, [r7, #68]	@ 0x44
 800a4b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4b6:	e841 2300 	strex	r3, r2, [r1]
 800a4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1e3      	bne.n	800a48a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	3314      	adds	r3, #20
 800a4c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4cc:	e853 3f00 	ldrex	r3, [r3]
 800a4d0:	623b      	str	r3, [r7, #32]
   return(result);
 800a4d2:	6a3b      	ldr	r3, [r7, #32]
 800a4d4:	f023 0301 	bic.w	r3, r3, #1
 800a4d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	3314      	adds	r3, #20
 800a4e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a4e6:	633a      	str	r2, [r7, #48]	@ 0x30
 800a4e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4ee:	e841 2300 	strex	r3, r2, [r1]
 800a4f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1e3      	bne.n	800a4c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2220      	movs	r2, #32
 800a4fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	330c      	adds	r3, #12
 800a50e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	e853 3f00 	ldrex	r3, [r3]
 800a516:	60fb      	str	r3, [r7, #12]
   return(result);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f023 0310 	bic.w	r3, r3, #16
 800a51e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	330c      	adds	r3, #12
 800a528:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a52c:	61fa      	str	r2, [r7, #28]
 800a52e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a530:	69b9      	ldr	r1, [r7, #24]
 800a532:	69fa      	ldr	r2, [r7, #28]
 800a534:	e841 2300 	strex	r3, r2, [r1]
 800a538:	617b      	str	r3, [r7, #20]
   return(result);
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d1e3      	bne.n	800a508 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2202      	movs	r2, #2
 800a544:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a546:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a54a:	4619      	mov	r1, r3
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 f83d 	bl	800a5cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a552:	e023      	b.n	800a59c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d009      	beq.n	800a574 <HAL_UART_IRQHandler+0x4f4>
 800a560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d003      	beq.n	800a574 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 f943 	bl	800a7f8 <UART_Transmit_IT>
    return;
 800a572:	e014      	b.n	800a59e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00e      	beq.n	800a59e <HAL_UART_IRQHandler+0x51e>
 800a580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d008      	beq.n	800a59e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 f983 	bl	800a898 <UART_EndTransmit_IT>
    return;
 800a592:	e004      	b.n	800a59e <HAL_UART_IRQHandler+0x51e>
    return;
 800a594:	bf00      	nop
 800a596:	e002      	b.n	800a59e <HAL_UART_IRQHandler+0x51e>
      return;
 800a598:	bf00      	nop
 800a59a:	e000      	b.n	800a59e <HAL_UART_IRQHandler+0x51e>
      return;
 800a59c:	bf00      	nop
  }
}
 800a59e:	37e8      	adds	r7, #232	@ 0xe8
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a5d8:	bf00      	nop
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b086      	sub	sp, #24
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	603b      	str	r3, [r7, #0]
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5f4:	e03b      	b.n	800a66e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5f6:	6a3b      	ldr	r3, [r7, #32]
 800a5f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5fc:	d037      	beq.n	800a66e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5fe:	f7fa f9eb 	bl	80049d8 <HAL_GetTick>
 800a602:	4602      	mov	r2, r0
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	1ad3      	subs	r3, r2, r3
 800a608:	6a3a      	ldr	r2, [r7, #32]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d302      	bcc.n	800a614 <UART_WaitOnFlagUntilTimeout+0x30>
 800a60e:	6a3b      	ldr	r3, [r7, #32]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d101      	bne.n	800a618 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a614:	2303      	movs	r3, #3
 800a616:	e03a      	b.n	800a68e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	f003 0304 	and.w	r3, r3, #4
 800a622:	2b00      	cmp	r3, #0
 800a624:	d023      	beq.n	800a66e <UART_WaitOnFlagUntilTimeout+0x8a>
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	2b80      	cmp	r3, #128	@ 0x80
 800a62a:	d020      	beq.n	800a66e <UART_WaitOnFlagUntilTimeout+0x8a>
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	2b40      	cmp	r3, #64	@ 0x40
 800a630:	d01d      	beq.n	800a66e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f003 0308 	and.w	r3, r3, #8
 800a63c:	2b08      	cmp	r3, #8
 800a63e:	d116      	bne.n	800a66e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a640:	2300      	movs	r3, #0
 800a642:	617b      	str	r3, [r7, #20]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	617b      	str	r3, [r7, #20]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	617b      	str	r3, [r7, #20]
 800a654:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f000 f857 	bl	800a70a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2208      	movs	r2, #8
 800a660:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2200      	movs	r2, #0
 800a666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	e00f      	b.n	800a68e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	4013      	ands	r3, r2
 800a678:	68ba      	ldr	r2, [r7, #8]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	bf0c      	ite	eq
 800a67e:	2301      	moveq	r3, #1
 800a680:	2300      	movne	r3, #0
 800a682:	b2db      	uxtb	r3, r3
 800a684:	461a      	mov	r2, r3
 800a686:	79fb      	ldrb	r3, [r7, #7]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d0b4      	beq.n	800a5f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3718      	adds	r7, #24
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a696:	b480      	push	{r7}
 800a698:	b085      	sub	sp, #20
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	60f8      	str	r0, [r7, #12]
 800a69e:	60b9      	str	r1, [r7, #8]
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	68ba      	ldr	r2, [r7, #8]
 800a6a8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	88fa      	ldrh	r2, [r7, #6]
 800a6ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	88fa      	ldrh	r2, [r7, #6]
 800a6b4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2222      	movs	r2, #34	@ 0x22
 800a6c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d007      	beq.n	800a6dc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	68da      	ldr	r2, [r3, #12]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a6da:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	695a      	ldr	r2, [r3, #20]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f042 0201 	orr.w	r2, r2, #1
 800a6ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	68da      	ldr	r2, [r3, #12]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f042 0220 	orr.w	r2, r2, #32
 800a6fa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3714      	adds	r7, #20
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr

0800a70a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a70a:	b480      	push	{r7}
 800a70c:	b095      	sub	sp, #84	@ 0x54
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	330c      	adds	r3, #12
 800a718:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a71c:	e853 3f00 	ldrex	r3, [r3]
 800a720:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a724:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a728:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	330c      	adds	r3, #12
 800a730:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a732:	643a      	str	r2, [r7, #64]	@ 0x40
 800a734:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a736:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a738:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a73a:	e841 2300 	strex	r3, r2, [r1]
 800a73e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a742:	2b00      	cmp	r3, #0
 800a744:	d1e5      	bne.n	800a712 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	3314      	adds	r3, #20
 800a74c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a74e:	6a3b      	ldr	r3, [r7, #32]
 800a750:	e853 3f00 	ldrex	r3, [r3]
 800a754:	61fb      	str	r3, [r7, #28]
   return(result);
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	f023 0301 	bic.w	r3, r3, #1
 800a75c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	3314      	adds	r3, #20
 800a764:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a766:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a768:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a76c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a76e:	e841 2300 	strex	r3, r2, [r1]
 800a772:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1e5      	bne.n	800a746 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d119      	bne.n	800a7b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	330c      	adds	r3, #12
 800a788:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	e853 3f00 	ldrex	r3, [r3]
 800a790:	60bb      	str	r3, [r7, #8]
   return(result);
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	f023 0310 	bic.w	r3, r3, #16
 800a798:	647b      	str	r3, [r7, #68]	@ 0x44
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	330c      	adds	r3, #12
 800a7a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7a2:	61ba      	str	r2, [r7, #24]
 800a7a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a6:	6979      	ldr	r1, [r7, #20]
 800a7a8:	69ba      	ldr	r2, [r7, #24]
 800a7aa:	e841 2300 	strex	r3, r2, [r1]
 800a7ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1e5      	bne.n	800a782 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2220      	movs	r2, #32
 800a7ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a7c4:	bf00      	nop
 800a7c6:	3754      	adds	r7, #84	@ 0x54
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f7ff fee4 	bl	800a5b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7f0:	bf00      	nop
 800a7f2:	3710      	adds	r7, #16
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b085      	sub	sp, #20
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a806:	b2db      	uxtb	r3, r3
 800a808:	2b21      	cmp	r3, #33	@ 0x21
 800a80a:	d13e      	bne.n	800a88a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a814:	d114      	bne.n	800a840 <UART_Transmit_IT+0x48>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d110      	bne.n	800a840 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a1b      	ldr	r3, [r3, #32]
 800a822:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	881b      	ldrh	r3, [r3, #0]
 800a828:	461a      	mov	r2, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a832:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6a1b      	ldr	r3, [r3, #32]
 800a838:	1c9a      	adds	r2, r3, #2
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	621a      	str	r2, [r3, #32]
 800a83e:	e008      	b.n	800a852 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6a1b      	ldr	r3, [r3, #32]
 800a844:	1c59      	adds	r1, r3, #1
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	6211      	str	r1, [r2, #32]
 800a84a:	781a      	ldrb	r2, [r3, #0]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a856:	b29b      	uxth	r3, r3
 800a858:	3b01      	subs	r3, #1
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	4619      	mov	r1, r3
 800a860:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10f      	bne.n	800a886 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	68da      	ldr	r2, [r3, #12]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a874:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68da      	ldr	r2, [r3, #12]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a884:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a886:	2300      	movs	r3, #0
 800a888:	e000      	b.n	800a88c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a88a:	2302      	movs	r3, #2
  }
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3714      	adds	r7, #20
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	68da      	ldr	r2, [r3, #12]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a8ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2220      	movs	r2, #32
 800a8b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f7ff fe73 	bl	800a5a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3708      	adds	r7, #8
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b08c      	sub	sp, #48	@ 0x30
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	2b22      	cmp	r3, #34	@ 0x22
 800a8da:	f040 80ae 	bne.w	800aa3a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8e6:	d117      	bne.n	800a918 <UART_Receive_IT+0x50>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d113      	bne.n	800a918 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	b29b      	uxth	r3, r3
 800a902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a906:	b29a      	uxth	r2, r3
 800a908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a90a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a910:	1c9a      	adds	r2, r3, #2
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	629a      	str	r2, [r3, #40]	@ 0x28
 800a916:	e026      	b.n	800a966 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a91c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a91e:	2300      	movs	r3, #0
 800a920:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a92a:	d007      	beq.n	800a93c <UART_Receive_IT+0x74>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d10a      	bne.n	800a94a <UART_Receive_IT+0x82>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	691b      	ldr	r3, [r3, #16]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d106      	bne.n	800a94a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	b2da      	uxtb	r2, r3
 800a944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a946:	701a      	strb	r2, [r3, #0]
 800a948:	e008      	b.n	800a95c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	b2db      	uxtb	r3, r3
 800a952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a956:	b2da      	uxtb	r2, r3
 800a958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a95a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a960:	1c5a      	adds	r2, r3, #1
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	3b01      	subs	r3, #1
 800a96e:	b29b      	uxth	r3, r3
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	4619      	mov	r1, r3
 800a974:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a976:	2b00      	cmp	r3, #0
 800a978:	d15d      	bne.n	800aa36 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	68da      	ldr	r2, [r3, #12]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f022 0220 	bic.w	r2, r2, #32
 800a988:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	68da      	ldr	r2, [r3, #12]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a998:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	695a      	ldr	r2, [r3, #20]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f022 0201 	bic.w	r2, r2, #1
 800a9a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2220      	movs	r2, #32
 800a9ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d135      	bne.n	800aa2c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	330c      	adds	r3, #12
 800a9cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	e853 3f00 	ldrex	r3, [r3]
 800a9d4:	613b      	str	r3, [r7, #16]
   return(result);
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	f023 0310 	bic.w	r3, r3, #16
 800a9dc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	330c      	adds	r3, #12
 800a9e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9e6:	623a      	str	r2, [r7, #32]
 800a9e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ea:	69f9      	ldr	r1, [r7, #28]
 800a9ec:	6a3a      	ldr	r2, [r7, #32]
 800a9ee:	e841 2300 	strex	r3, r2, [r1]
 800a9f2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9f4:	69bb      	ldr	r3, [r7, #24]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1e5      	bne.n	800a9c6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f003 0310 	and.w	r3, r3, #16
 800aa04:	2b10      	cmp	r3, #16
 800aa06:	d10a      	bne.n	800aa1e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aa08:	2300      	movs	r3, #0
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	60fb      	str	r3, [r7, #12]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	60fb      	str	r3, [r7, #12]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800aa22:	4619      	mov	r1, r3
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f7ff fdd1 	bl	800a5cc <HAL_UARTEx_RxEventCallback>
 800aa2a:	e002      	b.n	800aa32 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f7f9 facd 	bl	8003fcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800aa32:	2300      	movs	r3, #0
 800aa34:	e002      	b.n	800aa3c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800aa36:	2300      	movs	r3, #0
 800aa38:	e000      	b.n	800aa3c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800aa3a:	2302      	movs	r3, #2
  }
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3730      	adds	r7, #48	@ 0x30
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa48:	b0c0      	sub	sp, #256	@ 0x100
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800aa5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa60:	68d9      	ldr	r1, [r3, #12]
 800aa62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	ea40 0301 	orr.w	r3, r0, r1
 800aa6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aa6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa72:	689a      	ldr	r2, [r3, #8]
 800aa74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	431a      	orrs	r2, r3
 800aa7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa80:	695b      	ldr	r3, [r3, #20]
 800aa82:	431a      	orrs	r2, r3
 800aa84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa88:	69db      	ldr	r3, [r3, #28]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aa90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800aa9c:	f021 010c 	bic.w	r1, r1, #12
 800aaa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800aaaa:	430b      	orrs	r3, r1
 800aaac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aaae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	695b      	ldr	r3, [r3, #20]
 800aab6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800aaba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aabe:	6999      	ldr	r1, [r3, #24]
 800aac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	ea40 0301 	orr.w	r3, r0, r1
 800aaca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aacc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	4b8f      	ldr	r3, [pc, #572]	@ (800ad10 <UART_SetConfig+0x2cc>)
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d005      	beq.n	800aae4 <UART_SetConfig+0xa0>
 800aad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	4b8d      	ldr	r3, [pc, #564]	@ (800ad14 <UART_SetConfig+0x2d0>)
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d104      	bne.n	800aaee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aae4:	f7fd feaa 	bl	800883c <HAL_RCC_GetPCLK2Freq>
 800aae8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800aaec:	e003      	b.n	800aaf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aaee:	f7fd fe91 	bl	8008814 <HAL_RCC_GetPCLK1Freq>
 800aaf2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aaf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aafa:	69db      	ldr	r3, [r3, #28]
 800aafc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab00:	f040 810c 	bne.w	800ad1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ab04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ab0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ab12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800ab16:	4622      	mov	r2, r4
 800ab18:	462b      	mov	r3, r5
 800ab1a:	1891      	adds	r1, r2, r2
 800ab1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ab1e:	415b      	adcs	r3, r3
 800ab20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ab26:	4621      	mov	r1, r4
 800ab28:	eb12 0801 	adds.w	r8, r2, r1
 800ab2c:	4629      	mov	r1, r5
 800ab2e:	eb43 0901 	adc.w	r9, r3, r1
 800ab32:	f04f 0200 	mov.w	r2, #0
 800ab36:	f04f 0300 	mov.w	r3, #0
 800ab3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ab3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ab42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ab46:	4690      	mov	r8, r2
 800ab48:	4699      	mov	r9, r3
 800ab4a:	4623      	mov	r3, r4
 800ab4c:	eb18 0303 	adds.w	r3, r8, r3
 800ab50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ab54:	462b      	mov	r3, r5
 800ab56:	eb49 0303 	adc.w	r3, r9, r3
 800ab5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ab5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ab6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800ab6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ab72:	460b      	mov	r3, r1
 800ab74:	18db      	adds	r3, r3, r3
 800ab76:	653b      	str	r3, [r7, #80]	@ 0x50
 800ab78:	4613      	mov	r3, r2
 800ab7a:	eb42 0303 	adc.w	r3, r2, r3
 800ab7e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ab84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800ab88:	f7f6 f83e 	bl	8000c08 <__aeabi_uldivmod>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	460b      	mov	r3, r1
 800ab90:	4b61      	ldr	r3, [pc, #388]	@ (800ad18 <UART_SetConfig+0x2d4>)
 800ab92:	fba3 2302 	umull	r2, r3, r3, r2
 800ab96:	095b      	lsrs	r3, r3, #5
 800ab98:	011c      	lsls	r4, r3, #4
 800ab9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800aba4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800aba8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800abac:	4642      	mov	r2, r8
 800abae:	464b      	mov	r3, r9
 800abb0:	1891      	adds	r1, r2, r2
 800abb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 800abb4:	415b      	adcs	r3, r3
 800abb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800abb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800abbc:	4641      	mov	r1, r8
 800abbe:	eb12 0a01 	adds.w	sl, r2, r1
 800abc2:	4649      	mov	r1, r9
 800abc4:	eb43 0b01 	adc.w	fp, r3, r1
 800abc8:	f04f 0200 	mov.w	r2, #0
 800abcc:	f04f 0300 	mov.w	r3, #0
 800abd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800abd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800abd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800abdc:	4692      	mov	sl, r2
 800abde:	469b      	mov	fp, r3
 800abe0:	4643      	mov	r3, r8
 800abe2:	eb1a 0303 	adds.w	r3, sl, r3
 800abe6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800abea:	464b      	mov	r3, r9
 800abec:	eb4b 0303 	adc.w	r3, fp, r3
 800abf0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800abf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ac00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ac04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ac08:	460b      	mov	r3, r1
 800ac0a:	18db      	adds	r3, r3, r3
 800ac0c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac0e:	4613      	mov	r3, r2
 800ac10:	eb42 0303 	adc.w	r3, r2, r3
 800ac14:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ac1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ac1e:	f7f5 fff3 	bl	8000c08 <__aeabi_uldivmod>
 800ac22:	4602      	mov	r2, r0
 800ac24:	460b      	mov	r3, r1
 800ac26:	4611      	mov	r1, r2
 800ac28:	4b3b      	ldr	r3, [pc, #236]	@ (800ad18 <UART_SetConfig+0x2d4>)
 800ac2a:	fba3 2301 	umull	r2, r3, r3, r1
 800ac2e:	095b      	lsrs	r3, r3, #5
 800ac30:	2264      	movs	r2, #100	@ 0x64
 800ac32:	fb02 f303 	mul.w	r3, r2, r3
 800ac36:	1acb      	subs	r3, r1, r3
 800ac38:	00db      	lsls	r3, r3, #3
 800ac3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ac3e:	4b36      	ldr	r3, [pc, #216]	@ (800ad18 <UART_SetConfig+0x2d4>)
 800ac40:	fba3 2302 	umull	r2, r3, r3, r2
 800ac44:	095b      	lsrs	r3, r3, #5
 800ac46:	005b      	lsls	r3, r3, #1
 800ac48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ac4c:	441c      	add	r4, r3
 800ac4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ac52:	2200      	movs	r2, #0
 800ac54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ac58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ac5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ac60:	4642      	mov	r2, r8
 800ac62:	464b      	mov	r3, r9
 800ac64:	1891      	adds	r1, r2, r2
 800ac66:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ac68:	415b      	adcs	r3, r3
 800ac6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ac70:	4641      	mov	r1, r8
 800ac72:	1851      	adds	r1, r2, r1
 800ac74:	6339      	str	r1, [r7, #48]	@ 0x30
 800ac76:	4649      	mov	r1, r9
 800ac78:	414b      	adcs	r3, r1
 800ac7a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac7c:	f04f 0200 	mov.w	r2, #0
 800ac80:	f04f 0300 	mov.w	r3, #0
 800ac84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ac88:	4659      	mov	r1, fp
 800ac8a:	00cb      	lsls	r3, r1, #3
 800ac8c:	4651      	mov	r1, sl
 800ac8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac92:	4651      	mov	r1, sl
 800ac94:	00ca      	lsls	r2, r1, #3
 800ac96:	4610      	mov	r0, r2
 800ac98:	4619      	mov	r1, r3
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	4642      	mov	r2, r8
 800ac9e:	189b      	adds	r3, r3, r2
 800aca0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aca4:	464b      	mov	r3, r9
 800aca6:	460a      	mov	r2, r1
 800aca8:	eb42 0303 	adc.w	r3, r2, r3
 800acac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800acb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800acbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800acc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800acc4:	460b      	mov	r3, r1
 800acc6:	18db      	adds	r3, r3, r3
 800acc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800acca:	4613      	mov	r3, r2
 800accc:	eb42 0303 	adc.w	r3, r2, r3
 800acd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800acd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800acd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800acda:	f7f5 ff95 	bl	8000c08 <__aeabi_uldivmod>
 800acde:	4602      	mov	r2, r0
 800ace0:	460b      	mov	r3, r1
 800ace2:	4b0d      	ldr	r3, [pc, #52]	@ (800ad18 <UART_SetConfig+0x2d4>)
 800ace4:	fba3 1302 	umull	r1, r3, r3, r2
 800ace8:	095b      	lsrs	r3, r3, #5
 800acea:	2164      	movs	r1, #100	@ 0x64
 800acec:	fb01 f303 	mul.w	r3, r1, r3
 800acf0:	1ad3      	subs	r3, r2, r3
 800acf2:	00db      	lsls	r3, r3, #3
 800acf4:	3332      	adds	r3, #50	@ 0x32
 800acf6:	4a08      	ldr	r2, [pc, #32]	@ (800ad18 <UART_SetConfig+0x2d4>)
 800acf8:	fba2 2303 	umull	r2, r3, r2, r3
 800acfc:	095b      	lsrs	r3, r3, #5
 800acfe:	f003 0207 	and.w	r2, r3, #7
 800ad02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4422      	add	r2, r4
 800ad0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ad0c:	e106      	b.n	800af1c <UART_SetConfig+0x4d8>
 800ad0e:	bf00      	nop
 800ad10:	40011000 	.word	0x40011000
 800ad14:	40011400 	.word	0x40011400
 800ad18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ad1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ad20:	2200      	movs	r2, #0
 800ad22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ad26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ad2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ad2e:	4642      	mov	r2, r8
 800ad30:	464b      	mov	r3, r9
 800ad32:	1891      	adds	r1, r2, r2
 800ad34:	6239      	str	r1, [r7, #32]
 800ad36:	415b      	adcs	r3, r3
 800ad38:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ad3e:	4641      	mov	r1, r8
 800ad40:	1854      	adds	r4, r2, r1
 800ad42:	4649      	mov	r1, r9
 800ad44:	eb43 0501 	adc.w	r5, r3, r1
 800ad48:	f04f 0200 	mov.w	r2, #0
 800ad4c:	f04f 0300 	mov.w	r3, #0
 800ad50:	00eb      	lsls	r3, r5, #3
 800ad52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ad56:	00e2      	lsls	r2, r4, #3
 800ad58:	4614      	mov	r4, r2
 800ad5a:	461d      	mov	r5, r3
 800ad5c:	4643      	mov	r3, r8
 800ad5e:	18e3      	adds	r3, r4, r3
 800ad60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ad64:	464b      	mov	r3, r9
 800ad66:	eb45 0303 	adc.w	r3, r5, r3
 800ad6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ad6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ad7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ad7e:	f04f 0200 	mov.w	r2, #0
 800ad82:	f04f 0300 	mov.w	r3, #0
 800ad86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ad8a:	4629      	mov	r1, r5
 800ad8c:	008b      	lsls	r3, r1, #2
 800ad8e:	4621      	mov	r1, r4
 800ad90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad94:	4621      	mov	r1, r4
 800ad96:	008a      	lsls	r2, r1, #2
 800ad98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ad9c:	f7f5 ff34 	bl	8000c08 <__aeabi_uldivmod>
 800ada0:	4602      	mov	r2, r0
 800ada2:	460b      	mov	r3, r1
 800ada4:	4b60      	ldr	r3, [pc, #384]	@ (800af28 <UART_SetConfig+0x4e4>)
 800ada6:	fba3 2302 	umull	r2, r3, r3, r2
 800adaa:	095b      	lsrs	r3, r3, #5
 800adac:	011c      	lsls	r4, r3, #4
 800adae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800adb2:	2200      	movs	r2, #0
 800adb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800adb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800adbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800adc0:	4642      	mov	r2, r8
 800adc2:	464b      	mov	r3, r9
 800adc4:	1891      	adds	r1, r2, r2
 800adc6:	61b9      	str	r1, [r7, #24]
 800adc8:	415b      	adcs	r3, r3
 800adca:	61fb      	str	r3, [r7, #28]
 800adcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800add0:	4641      	mov	r1, r8
 800add2:	1851      	adds	r1, r2, r1
 800add4:	6139      	str	r1, [r7, #16]
 800add6:	4649      	mov	r1, r9
 800add8:	414b      	adcs	r3, r1
 800adda:	617b      	str	r3, [r7, #20]
 800addc:	f04f 0200 	mov.w	r2, #0
 800ade0:	f04f 0300 	mov.w	r3, #0
 800ade4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ade8:	4659      	mov	r1, fp
 800adea:	00cb      	lsls	r3, r1, #3
 800adec:	4651      	mov	r1, sl
 800adee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800adf2:	4651      	mov	r1, sl
 800adf4:	00ca      	lsls	r2, r1, #3
 800adf6:	4610      	mov	r0, r2
 800adf8:	4619      	mov	r1, r3
 800adfa:	4603      	mov	r3, r0
 800adfc:	4642      	mov	r2, r8
 800adfe:	189b      	adds	r3, r3, r2
 800ae00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ae04:	464b      	mov	r3, r9
 800ae06:	460a      	mov	r2, r1
 800ae08:	eb42 0303 	adc.w	r3, r2, r3
 800ae0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ae10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	2200      	movs	r2, #0
 800ae18:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ae1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ae1c:	f04f 0200 	mov.w	r2, #0
 800ae20:	f04f 0300 	mov.w	r3, #0
 800ae24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800ae28:	4649      	mov	r1, r9
 800ae2a:	008b      	lsls	r3, r1, #2
 800ae2c:	4641      	mov	r1, r8
 800ae2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae32:	4641      	mov	r1, r8
 800ae34:	008a      	lsls	r2, r1, #2
 800ae36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ae3a:	f7f5 fee5 	bl	8000c08 <__aeabi_uldivmod>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	460b      	mov	r3, r1
 800ae42:	4611      	mov	r1, r2
 800ae44:	4b38      	ldr	r3, [pc, #224]	@ (800af28 <UART_SetConfig+0x4e4>)
 800ae46:	fba3 2301 	umull	r2, r3, r3, r1
 800ae4a:	095b      	lsrs	r3, r3, #5
 800ae4c:	2264      	movs	r2, #100	@ 0x64
 800ae4e:	fb02 f303 	mul.w	r3, r2, r3
 800ae52:	1acb      	subs	r3, r1, r3
 800ae54:	011b      	lsls	r3, r3, #4
 800ae56:	3332      	adds	r3, #50	@ 0x32
 800ae58:	4a33      	ldr	r2, [pc, #204]	@ (800af28 <UART_SetConfig+0x4e4>)
 800ae5a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae5e:	095b      	lsrs	r3, r3, #5
 800ae60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ae64:	441c      	add	r4, r3
 800ae66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	673b      	str	r3, [r7, #112]	@ 0x70
 800ae6e:	677a      	str	r2, [r7, #116]	@ 0x74
 800ae70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ae74:	4642      	mov	r2, r8
 800ae76:	464b      	mov	r3, r9
 800ae78:	1891      	adds	r1, r2, r2
 800ae7a:	60b9      	str	r1, [r7, #8]
 800ae7c:	415b      	adcs	r3, r3
 800ae7e:	60fb      	str	r3, [r7, #12]
 800ae80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae84:	4641      	mov	r1, r8
 800ae86:	1851      	adds	r1, r2, r1
 800ae88:	6039      	str	r1, [r7, #0]
 800ae8a:	4649      	mov	r1, r9
 800ae8c:	414b      	adcs	r3, r1
 800ae8e:	607b      	str	r3, [r7, #4]
 800ae90:	f04f 0200 	mov.w	r2, #0
 800ae94:	f04f 0300 	mov.w	r3, #0
 800ae98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ae9c:	4659      	mov	r1, fp
 800ae9e:	00cb      	lsls	r3, r1, #3
 800aea0:	4651      	mov	r1, sl
 800aea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aea6:	4651      	mov	r1, sl
 800aea8:	00ca      	lsls	r2, r1, #3
 800aeaa:	4610      	mov	r0, r2
 800aeac:	4619      	mov	r1, r3
 800aeae:	4603      	mov	r3, r0
 800aeb0:	4642      	mov	r2, r8
 800aeb2:	189b      	adds	r3, r3, r2
 800aeb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aeb6:	464b      	mov	r3, r9
 800aeb8:	460a      	mov	r2, r1
 800aeba:	eb42 0303 	adc.w	r3, r2, r3
 800aebe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	663b      	str	r3, [r7, #96]	@ 0x60
 800aeca:	667a      	str	r2, [r7, #100]	@ 0x64
 800aecc:	f04f 0200 	mov.w	r2, #0
 800aed0:	f04f 0300 	mov.w	r3, #0
 800aed4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800aed8:	4649      	mov	r1, r9
 800aeda:	008b      	lsls	r3, r1, #2
 800aedc:	4641      	mov	r1, r8
 800aede:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aee2:	4641      	mov	r1, r8
 800aee4:	008a      	lsls	r2, r1, #2
 800aee6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800aeea:	f7f5 fe8d 	bl	8000c08 <__aeabi_uldivmod>
 800aeee:	4602      	mov	r2, r0
 800aef0:	460b      	mov	r3, r1
 800aef2:	4b0d      	ldr	r3, [pc, #52]	@ (800af28 <UART_SetConfig+0x4e4>)
 800aef4:	fba3 1302 	umull	r1, r3, r3, r2
 800aef8:	095b      	lsrs	r3, r3, #5
 800aefa:	2164      	movs	r1, #100	@ 0x64
 800aefc:	fb01 f303 	mul.w	r3, r1, r3
 800af00:	1ad3      	subs	r3, r2, r3
 800af02:	011b      	lsls	r3, r3, #4
 800af04:	3332      	adds	r3, #50	@ 0x32
 800af06:	4a08      	ldr	r2, [pc, #32]	@ (800af28 <UART_SetConfig+0x4e4>)
 800af08:	fba2 2303 	umull	r2, r3, r2, r3
 800af0c:	095b      	lsrs	r3, r3, #5
 800af0e:	f003 020f 	and.w	r2, r3, #15
 800af12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4422      	add	r2, r4
 800af1a:	609a      	str	r2, [r3, #8]
}
 800af1c:	bf00      	nop
 800af1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800af22:	46bd      	mov	sp, r7
 800af24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af28:	51eb851f 	.word	0x51eb851f

0800af2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800af2c:	b084      	sub	sp, #16
 800af2e:	b580      	push	{r7, lr}
 800af30:	b084      	sub	sp, #16
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
 800af36:	f107 001c 	add.w	r0, r7, #28
 800af3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800af3e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800af42:	2b01      	cmp	r3, #1
 800af44:	d123      	bne.n	800af8e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af4a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800af5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800af6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800af72:	2b01      	cmp	r3, #1
 800af74:	d105      	bne.n	800af82 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 f9dc 	bl	800b340 <USB_CoreReset>
 800af88:	4603      	mov	r3, r0
 800af8a:	73fb      	strb	r3, [r7, #15]
 800af8c:	e01b      	b.n	800afc6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 f9d0 	bl	800b340 <USB_CoreReset>
 800afa0:	4603      	mov	r3, r0
 800afa2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800afa4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d106      	bne.n	800afba <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afb0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	639a      	str	r2, [r3, #56]	@ 0x38
 800afb8:	e005      	b.n	800afc6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afbe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800afc6:	7fbb      	ldrb	r3, [r7, #30]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d10b      	bne.n	800afe4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	f043 0206 	orr.w	r2, r3, #6
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	f043 0220 	orr.w	r2, r3, #32
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800afe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aff0:	b004      	add	sp, #16
 800aff2:	4770      	bx	lr

0800aff4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	689b      	ldr	r3, [r3, #8]
 800b000:	f043 0201 	orr.w	r2, r3, #1
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	370c      	adds	r7, #12
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr

0800b016 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b016:	b480      	push	{r7}
 800b018:	b083      	sub	sp, #12
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	f023 0201 	bic.w	r2, r3, #1
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b02a:	2300      	movs	r3, #0
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	370c      	adds	r7, #12
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	460b      	mov	r3, r1
 800b042:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b044:	2300      	movs	r3, #0
 800b046:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b054:	78fb      	ldrb	r3, [r7, #3]
 800b056:	2b01      	cmp	r3, #1
 800b058:	d115      	bne.n	800b086 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b066:	200a      	movs	r0, #10
 800b068:	f7f9 fcc2 	bl	80049f0 <HAL_Delay>
      ms += 10U;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	330a      	adds	r3, #10
 800b070:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 f956 	bl	800b324 <USB_GetMode>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d01e      	beq.n	800b0bc <USB_SetCurrentMode+0x84>
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2bc7      	cmp	r3, #199	@ 0xc7
 800b082:	d9f0      	bls.n	800b066 <USB_SetCurrentMode+0x2e>
 800b084:	e01a      	b.n	800b0bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b086:	78fb      	ldrb	r3, [r7, #3]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d115      	bne.n	800b0b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b098:	200a      	movs	r0, #10
 800b09a:	f7f9 fca9 	bl	80049f0 <HAL_Delay>
      ms += 10U;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	330a      	adds	r3, #10
 800b0a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 f93d 	bl	800b324 <USB_GetMode>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d005      	beq.n	800b0bc <USB_SetCurrentMode+0x84>
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2bc7      	cmp	r3, #199	@ 0xc7
 800b0b4:	d9f0      	bls.n	800b098 <USB_SetCurrentMode+0x60>
 800b0b6:	e001      	b.n	800b0bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e005      	b.n	800b0c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2bc8      	cmp	r3, #200	@ 0xc8
 800b0c0:	d101      	bne.n	800b0c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e000      	b.n	800b0c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b085      	sub	sp, #20
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b0ea:	d901      	bls.n	800b0f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	e01b      	b.n	800b128 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	691b      	ldr	r3, [r3, #16]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	daf2      	bge.n	800b0de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	019b      	lsls	r3, r3, #6
 800b100:	f043 0220 	orr.w	r2, r3, #32
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	3301      	adds	r3, #1
 800b10c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b114:	d901      	bls.n	800b11a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b116:	2303      	movs	r3, #3
 800b118:	e006      	b.n	800b128 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	691b      	ldr	r3, [r3, #16]
 800b11e:	f003 0320 	and.w	r3, r3, #32
 800b122:	2b20      	cmp	r3, #32
 800b124:	d0f0      	beq.n	800b108 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3714      	adds	r7, #20
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b13c:	2300      	movs	r3, #0
 800b13e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	3301      	adds	r3, #1
 800b144:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b14c:	d901      	bls.n	800b152 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b14e:	2303      	movs	r3, #3
 800b150:	e018      	b.n	800b184 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	691b      	ldr	r3, [r3, #16]
 800b156:	2b00      	cmp	r3, #0
 800b158:	daf2      	bge.n	800b140 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b15a:	2300      	movs	r3, #0
 800b15c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2210      	movs	r2, #16
 800b162:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	3301      	adds	r3, #1
 800b168:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b170:	d901      	bls.n	800b176 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b172:	2303      	movs	r3, #3
 800b174:	e006      	b.n	800b184 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	f003 0310 	and.w	r3, r3, #16
 800b17e:	2b10      	cmp	r3, #16
 800b180:	d0f0      	beq.n	800b164 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b182:	2300      	movs	r3, #0
}
 800b184:	4618      	mov	r0, r3
 800b186:	3714      	adds	r7, #20
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b190:	b480      	push	{r7}
 800b192:	b089      	sub	sp, #36	@ 0x24
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	4611      	mov	r1, r2
 800b19c:	461a      	mov	r2, r3
 800b19e:	460b      	mov	r3, r1
 800b1a0:	71fb      	strb	r3, [r7, #7]
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b1ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d123      	bne.n	800b1fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b1b6:	88bb      	ldrh	r3, [r7, #4]
 800b1b8:	3303      	adds	r3, #3
 800b1ba:	089b      	lsrs	r3, r3, #2
 800b1bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b1be:	2300      	movs	r3, #0
 800b1c0:	61bb      	str	r3, [r7, #24]
 800b1c2:	e018      	b.n	800b1f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b1c4:	79fb      	ldrb	r3, [r7, #7]
 800b1c6:	031a      	lsls	r2, r3, #12
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	4413      	add	r3, r2
 800b1cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b1de:	69fb      	ldr	r3, [r7, #28]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b1f0:	69bb      	ldr	r3, [r7, #24]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	61bb      	str	r3, [r7, #24]
 800b1f6:	69ba      	ldr	r2, [r7, #24]
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d3e2      	bcc.n	800b1c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b1fe:	2300      	movs	r3, #0
}
 800b200:	4618      	mov	r0, r3
 800b202:	3724      	adds	r7, #36	@ 0x24
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b08b      	sub	sp, #44	@ 0x2c
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	4613      	mov	r3, r2
 800b218:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b222:	88fb      	ldrh	r3, [r7, #6]
 800b224:	089b      	lsrs	r3, r3, #2
 800b226:	b29b      	uxth	r3, r3
 800b228:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b22a:	88fb      	ldrh	r3, [r7, #6]
 800b22c:	f003 0303 	and.w	r3, r3, #3
 800b230:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b232:	2300      	movs	r3, #0
 800b234:	623b      	str	r3, [r7, #32]
 800b236:	e014      	b.n	800b262 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b242:	601a      	str	r2, [r3, #0]
    pDest++;
 800b244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b246:	3301      	adds	r3, #1
 800b248:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b24c:	3301      	adds	r3, #1
 800b24e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b252:	3301      	adds	r3, #1
 800b254:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b258:	3301      	adds	r3, #1
 800b25a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b25c:	6a3b      	ldr	r3, [r7, #32]
 800b25e:	3301      	adds	r3, #1
 800b260:	623b      	str	r3, [r7, #32]
 800b262:	6a3a      	ldr	r2, [r7, #32]
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	429a      	cmp	r2, r3
 800b268:	d3e6      	bcc.n	800b238 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b26a:	8bfb      	ldrh	r3, [r7, #30]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d01e      	beq.n	800b2ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b270:	2300      	movs	r3, #0
 800b272:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b27a:	461a      	mov	r2, r3
 800b27c:	f107 0310 	add.w	r3, r7, #16
 800b280:	6812      	ldr	r2, [r2, #0]
 800b282:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b284:	693a      	ldr	r2, [r7, #16]
 800b286:	6a3b      	ldr	r3, [r7, #32]
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	00db      	lsls	r3, r3, #3
 800b28c:	fa22 f303 	lsr.w	r3, r2, r3
 800b290:	b2da      	uxtb	r2, r3
 800b292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b294:	701a      	strb	r2, [r3, #0]
      i++;
 800b296:	6a3b      	ldr	r3, [r7, #32]
 800b298:	3301      	adds	r3, #1
 800b29a:	623b      	str	r3, [r7, #32]
      pDest++;
 800b29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b29e:	3301      	adds	r3, #1
 800b2a0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b2a2:	8bfb      	ldrh	r3, [r7, #30]
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b2a8:	8bfb      	ldrh	r3, [r7, #30]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d1ea      	bne.n	800b284 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	372c      	adds	r7, #44	@ 0x2c
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b085      	sub	sp, #20
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	695b      	ldr	r3, [r3, #20]
 800b2c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	699b      	ldr	r3, [r3, #24]
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	4013      	ands	r3, r2
 800b2d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3714      	adds	r7, #20
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr

0800b2e2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800b2e2:	b480      	push	{r7}
 800b2e4:	b085      	sub	sp, #20
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800b2f2:	78fb      	ldrb	r3, [r7, #3]
 800b2f4:	015a      	lsls	r2, r3, #5
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800b302:	78fb      	ldrb	r3, [r7, #3]
 800b304:	015a      	lsls	r2, r3, #5
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	4413      	add	r3, r2
 800b30a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	68ba      	ldr	r2, [r7, #8]
 800b312:	4013      	ands	r3, r2
 800b314:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b316:	68bb      	ldr	r3, [r7, #8]
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3714      	adds	r7, #20
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr

0800b324 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	695b      	ldr	r3, [r3, #20]
 800b330:	f003 0301 	and.w	r3, r3, #1
}
 800b334:	4618      	mov	r0, r3
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b340:	b480      	push	{r7}
 800b342:	b085      	sub	sp, #20
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b348:	2300      	movs	r3, #0
 800b34a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	3301      	adds	r3, #1
 800b350:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b358:	d901      	bls.n	800b35e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b35a:	2303      	movs	r3, #3
 800b35c:	e01b      	b.n	800b396 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	691b      	ldr	r3, [r3, #16]
 800b362:	2b00      	cmp	r3, #0
 800b364:	daf2      	bge.n	800b34c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b366:	2300      	movs	r3, #0
 800b368:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	f043 0201 	orr.w	r2, r3, #1
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	3301      	adds	r3, #1
 800b37a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b382:	d901      	bls.n	800b388 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b384:	2303      	movs	r3, #3
 800b386:	e006      	b.n	800b396 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	691b      	ldr	r3, [r3, #16]
 800b38c:	f003 0301 	and.w	r3, r3, #1
 800b390:	2b01      	cmp	r3, #1
 800b392:	d0f0      	beq.n	800b376 <USB_CoreReset+0x36>

  return HAL_OK;
 800b394:	2300      	movs	r3, #0
}
 800b396:	4618      	mov	r0, r3
 800b398:	3714      	adds	r7, #20
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr
	...

0800b3a4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b3a4:	b084      	sub	sp, #16
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	b086      	sub	sp, #24
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]
 800b3ae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b3b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3ce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3da:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3e6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d119      	bne.n	800b42e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b3fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d10a      	bne.n	800b418 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b410:	f043 0304 	orr.w	r3, r3, #4
 800b414:	6013      	str	r3, [r2, #0]
 800b416:	e014      	b.n	800b442 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b426:	f023 0304 	bic.w	r3, r3, #4
 800b42a:	6013      	str	r3, [r2, #0]
 800b42c:	e009      	b.n	800b442 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b43c:	f023 0304 	bic.w	r3, r3, #4
 800b440:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b442:	2110      	movs	r1, #16
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f7ff fe43 	bl	800b0d0 <USB_FlushTxFifo>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d001      	beq.n	800b454 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800b450:	2301      	movs	r3, #1
 800b452:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f7ff fe6d 	bl	800b134 <USB_FlushRxFifo>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d001      	beq.n	800b464 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800b460:	2301      	movs	r3, #1
 800b462:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b464:	2300      	movs	r3, #0
 800b466:	613b      	str	r3, [r7, #16]
 800b468:	e015      	b.n	800b496 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	015a      	lsls	r2, r3, #5
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	4413      	add	r3, r2
 800b472:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b476:	461a      	mov	r2, r3
 800b478:	f04f 33ff 	mov.w	r3, #4294967295
 800b47c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	015a      	lsls	r2, r3, #5
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	4413      	add	r3, r2
 800b486:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b48a:	461a      	mov	r2, r3
 800b48c:	2300      	movs	r3, #0
 800b48e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	3301      	adds	r3, #1
 800b494:	613b      	str	r3, [r7, #16]
 800b496:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b49a:	461a      	mov	r2, r3
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d3e3      	bcc.n	800b46a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ae:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4a18      	ldr	r2, [pc, #96]	@ (800b514 <USB_HostInit+0x170>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d10b      	bne.n	800b4d0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b4be:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4a15      	ldr	r2, [pc, #84]	@ (800b518 <USB_HostInit+0x174>)
 800b4c4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	4a14      	ldr	r2, [pc, #80]	@ (800b51c <USB_HostInit+0x178>)
 800b4ca:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800b4ce:	e009      	b.n	800b4e4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2280      	movs	r2, #128	@ 0x80
 800b4d4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	4a11      	ldr	r2, [pc, #68]	@ (800b520 <USB_HostInit+0x17c>)
 800b4da:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	4a11      	ldr	r2, [pc, #68]	@ (800b524 <USB_HostInit+0x180>)
 800b4e0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b4e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d105      	bne.n	800b4f8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	699b      	ldr	r3, [r3, #24]
 800b4f0:	f043 0210 	orr.w	r2, r3, #16
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	699a      	ldr	r2, [r3, #24]
 800b4fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b528 <USB_HostInit+0x184>)
 800b4fe:	4313      	orrs	r3, r2
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800b504:	7dfb      	ldrb	r3, [r7, #23]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3718      	adds	r7, #24
 800b50a:	46bd      	mov	sp, r7
 800b50c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b510:	b004      	add	sp, #16
 800b512:	4770      	bx	lr
 800b514:	40040000 	.word	0x40040000
 800b518:	01000200 	.word	0x01000200
 800b51c:	00e00300 	.word	0x00e00300
 800b520:	00600080 	.word	0x00600080
 800b524:	004000e0 	.word	0x004000e0
 800b528:	a3200008 	.word	0xa3200008

0800b52c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	460b      	mov	r3, r1
 800b536:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	68fa      	ldr	r2, [r7, #12]
 800b546:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b54a:	f023 0303 	bic.w	r3, r3, #3
 800b54e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	78fb      	ldrb	r3, [r7, #3]
 800b55a:	f003 0303 	and.w	r3, r3, #3
 800b55e:	68f9      	ldr	r1, [r7, #12]
 800b560:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b564:	4313      	orrs	r3, r2
 800b566:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b568:	78fb      	ldrb	r3, [r7, #3]
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d107      	bne.n	800b57e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b574:	461a      	mov	r2, r3
 800b576:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b57a:	6053      	str	r3, [r2, #4]
 800b57c:	e00c      	b.n	800b598 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800b57e:	78fb      	ldrb	r3, [r7, #3]
 800b580:	2b02      	cmp	r3, #2
 800b582:	d107      	bne.n	800b594 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b58a:	461a      	mov	r2, r3
 800b58c:	f241 7370 	movw	r3, #6000	@ 0x1770
 800b590:	6053      	str	r3, [r2, #4]
 800b592:	e001      	b.n	800b598 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800b594:	2301      	movs	r3, #1
 800b596:	e000      	b.n	800b59a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3714      	adds	r7, #20
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr

0800b5a6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b084      	sub	sp, #16
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800b5c6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	68fa      	ldr	r2, [r7, #12]
 800b5cc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b5d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b5d4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b5d6:	2064      	movs	r0, #100	@ 0x64
 800b5d8:	f7f9 fa0a 	bl	80049f0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	68fa      	ldr	r2, [r7, #12]
 800b5e0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b5e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5e8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b5ea:	200a      	movs	r0, #10
 800b5ec:	f7f9 fa00 	bl	80049f0 <HAL_Delay>

  return HAL_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b5fa:	b480      	push	{r7}
 800b5fc:	b085      	sub	sp, #20
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
 800b602:	460b      	mov	r3, r1
 800b604:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b60a:	2300      	movs	r3, #0
 800b60c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800b61e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b626:	2b00      	cmp	r3, #0
 800b628:	d109      	bne.n	800b63e <USB_DriveVbus+0x44>
 800b62a:	78fb      	ldrb	r3, [r7, #3]
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d106      	bne.n	800b63e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	68fa      	ldr	r2, [r7, #12]
 800b634:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b638:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b63c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b644:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b648:	d109      	bne.n	800b65e <USB_DriveVbus+0x64>
 800b64a:	78fb      	ldrb	r3, [r7, #3]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d106      	bne.n	800b65e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	68fa      	ldr	r2, [r7, #12]
 800b654:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b658:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b65c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b65e:	2300      	movs	r3, #0
}
 800b660:	4618      	mov	r0, r3
 800b662:	3714      	adds	r7, #20
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b085      	sub	sp, #20
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b678:	2300      	movs	r3, #0
 800b67a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	0c5b      	lsrs	r3, r3, #17
 800b68a:	f003 0303 	and.w	r3, r3, #3
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3714      	adds	r7, #20
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr

0800b69a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800b69a:	b480      	push	{r7}
 800b69c:	b085      	sub	sp, #20
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	b29b      	uxth	r3, r3
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3714      	adds	r7, #20
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b088      	sub	sp, #32
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	4608      	mov	r0, r1
 800b6c6:	4611      	mov	r1, r2
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	70fb      	strb	r3, [r7, #3]
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	70bb      	strb	r3, [r7, #2]
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800b6de:	78fb      	ldrb	r3, [r7, #3]
 800b6e0:	015a      	lsls	r2, r3, #5
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b6f0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b6f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b6f6:	2b03      	cmp	r3, #3
 800b6f8:	d87c      	bhi.n	800b7f4 <USB_HC_Init+0x138>
 800b6fa:	a201      	add	r2, pc, #4	@ (adr r2, 800b700 <USB_HC_Init+0x44>)
 800b6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b700:	0800b711 	.word	0x0800b711
 800b704:	0800b7b7 	.word	0x0800b7b7
 800b708:	0800b711 	.word	0x0800b711
 800b70c:	0800b779 	.word	0x0800b779
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b710:	78fb      	ldrb	r3, [r7, #3]
 800b712:	015a      	lsls	r2, r3, #5
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	4413      	add	r3, r2
 800b718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b71c:	461a      	mov	r2, r3
 800b71e:	f240 439d 	movw	r3, #1181	@ 0x49d
 800b722:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b724:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	da10      	bge.n	800b74e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b72c:	78fb      	ldrb	r3, [r7, #3]
 800b72e:	015a      	lsls	r2, r3, #5
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	4413      	add	r3, r2
 800b734:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	78fa      	ldrb	r2, [r7, #3]
 800b73c:	0151      	lsls	r1, r2, #5
 800b73e:	693a      	ldr	r2, [r7, #16]
 800b740:	440a      	add	r2, r1
 800b742:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b746:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b74a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800b74c:	e055      	b.n	800b7fa <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	4a6f      	ldr	r2, [pc, #444]	@ (800b910 <USB_HC_Init+0x254>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d151      	bne.n	800b7fa <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800b756:	78fb      	ldrb	r3, [r7, #3]
 800b758:	015a      	lsls	r2, r3, #5
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	4413      	add	r3, r2
 800b75e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	78fa      	ldrb	r2, [r7, #3]
 800b766:	0151      	lsls	r1, r2, #5
 800b768:	693a      	ldr	r2, [r7, #16]
 800b76a:	440a      	add	r2, r1
 800b76c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b770:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b774:	60d3      	str	r3, [r2, #12]
      break;
 800b776:	e040      	b.n	800b7fa <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b778:	78fb      	ldrb	r3, [r7, #3]
 800b77a:	015a      	lsls	r2, r3, #5
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	4413      	add	r3, r2
 800b780:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b784:	461a      	mov	r2, r3
 800b786:	f240 639d 	movw	r3, #1693	@ 0x69d
 800b78a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b78c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b790:	2b00      	cmp	r3, #0
 800b792:	da34      	bge.n	800b7fe <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b794:	78fb      	ldrb	r3, [r7, #3]
 800b796:	015a      	lsls	r2, r3, #5
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	4413      	add	r3, r2
 800b79c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	78fa      	ldrb	r2, [r7, #3]
 800b7a4:	0151      	lsls	r1, r2, #5
 800b7a6:	693a      	ldr	r2, [r7, #16]
 800b7a8:	440a      	add	r2, r1
 800b7aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b7ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b7b2:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b7b4:	e023      	b.n	800b7fe <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b7b6:	78fb      	ldrb	r3, [r7, #3]
 800b7b8:	015a      	lsls	r2, r3, #5
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	4413      	add	r3, r2
 800b7be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	f240 2325 	movw	r3, #549	@ 0x225
 800b7c8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b7ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	da17      	bge.n	800b802 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b7d2:	78fb      	ldrb	r3, [r7, #3]
 800b7d4:	015a      	lsls	r2, r3, #5
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	4413      	add	r3, r2
 800b7da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	78fa      	ldrb	r2, [r7, #3]
 800b7e2:	0151      	lsls	r1, r2, #5
 800b7e4:	693a      	ldr	r2, [r7, #16]
 800b7e6:	440a      	add	r2, r1
 800b7e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b7ec:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800b7f0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b7f2:	e006      	b.n	800b802 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	77fb      	strb	r3, [r7, #31]
      break;
 800b7f8:	e004      	b.n	800b804 <USB_HC_Init+0x148>
      break;
 800b7fa:	bf00      	nop
 800b7fc:	e002      	b.n	800b804 <USB_HC_Init+0x148>
      break;
 800b7fe:	bf00      	nop
 800b800:	e000      	b.n	800b804 <USB_HC_Init+0x148>
      break;
 800b802:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b804:	78fb      	ldrb	r3, [r7, #3]
 800b806:	015a      	lsls	r2, r3, #5
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	4413      	add	r3, r2
 800b80c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b810:	461a      	mov	r2, r3
 800b812:	2300      	movs	r3, #0
 800b814:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800b816:	78fb      	ldrb	r3, [r7, #3]
 800b818:	015a      	lsls	r2, r3, #5
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	4413      	add	r3, r2
 800b81e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b822:	68db      	ldr	r3, [r3, #12]
 800b824:	78fa      	ldrb	r2, [r7, #3]
 800b826:	0151      	lsls	r1, r2, #5
 800b828:	693a      	ldr	r2, [r7, #16]
 800b82a:	440a      	add	r2, r1
 800b82c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b830:	f043 0302 	orr.w	r3, r3, #2
 800b834:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b83c:	699a      	ldr	r2, [r3, #24]
 800b83e:	78fb      	ldrb	r3, [r7, #3]
 800b840:	f003 030f 	and.w	r3, r3, #15
 800b844:	2101      	movs	r1, #1
 800b846:	fa01 f303 	lsl.w	r3, r1, r3
 800b84a:	6939      	ldr	r1, [r7, #16]
 800b84c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b850:	4313      	orrs	r3, r2
 800b852:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	699b      	ldr	r3, [r3, #24]
 800b858:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b860:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b864:	2b00      	cmp	r3, #0
 800b866:	da03      	bge.n	800b870 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b868:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b86c:	61bb      	str	r3, [r7, #24]
 800b86e:	e001      	b.n	800b874 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800b870:	2300      	movs	r3, #0
 800b872:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f7ff fef9 	bl	800b66c <USB_GetHostSpeed>
 800b87a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800b87c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b880:	2b02      	cmp	r3, #2
 800b882:	d106      	bne.n	800b892 <USB_HC_Init+0x1d6>
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2b02      	cmp	r3, #2
 800b888:	d003      	beq.n	800b892 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b88a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b88e:	617b      	str	r3, [r7, #20]
 800b890:	e001      	b.n	800b896 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b892:	2300      	movs	r3, #0
 800b894:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b896:	787b      	ldrb	r3, [r7, #1]
 800b898:	059b      	lsls	r3, r3, #22
 800b89a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b89e:	78bb      	ldrb	r3, [r7, #2]
 800b8a0:	02db      	lsls	r3, r3, #11
 800b8a2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b8a6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b8a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b8ac:	049b      	lsls	r3, r3, #18
 800b8ae:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b8b2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800b8b4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800b8b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b8ba:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b8bc:	69bb      	ldr	r3, [r7, #24]
 800b8be:	431a      	orrs	r2, r3
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b8c4:	78fa      	ldrb	r2, [r7, #3]
 800b8c6:	0151      	lsls	r1, r2, #5
 800b8c8:	693a      	ldr	r2, [r7, #16]
 800b8ca:	440a      	add	r2, r1
 800b8cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b8d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b8d4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800b8d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b8da:	2b03      	cmp	r3, #3
 800b8dc:	d003      	beq.n	800b8e6 <USB_HC_Init+0x22a>
 800b8de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d10f      	bne.n	800b906 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800b8e6:	78fb      	ldrb	r3, [r7, #3]
 800b8e8:	015a      	lsls	r2, r3, #5
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	78fa      	ldrb	r2, [r7, #3]
 800b8f6:	0151      	lsls	r1, r2, #5
 800b8f8:	693a      	ldr	r2, [r7, #16]
 800b8fa:	440a      	add	r2, r1
 800b8fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b900:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b904:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b906:	7ffb      	ldrb	r3, [r7, #31]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3720      	adds	r7, #32
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	40040000 	.word	0x40040000

0800b914 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b08c      	sub	sp, #48	@ 0x30
 800b918:	af02      	add	r7, sp, #8
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	4613      	mov	r3, r2
 800b920:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	785b      	ldrb	r3, [r3, #1]
 800b92a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800b92c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b930:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	4a5d      	ldr	r2, [pc, #372]	@ (800baac <USB_HC_StartXfer+0x198>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d12f      	bne.n	800b99a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800b93a:	79fb      	ldrb	r3, [r7, #7]
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d11c      	bne.n	800b97a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	7c9b      	ldrb	r3, [r3, #18]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d003      	beq.n	800b950 <USB_HC_StartXfer+0x3c>
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	7c9b      	ldrb	r3, [r3, #18]
 800b94c:	2b02      	cmp	r3, #2
 800b94e:	d124      	bne.n	800b99a <USB_HC_StartXfer+0x86>
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	799b      	ldrb	r3, [r3, #6]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d120      	bne.n	800b99a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	015a      	lsls	r2, r3, #5
 800b95c:	6a3b      	ldr	r3, [r7, #32]
 800b95e:	4413      	add	r3, r2
 800b960:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	69fa      	ldr	r2, [r7, #28]
 800b968:	0151      	lsls	r1, r2, #5
 800b96a:	6a3a      	ldr	r2, [r7, #32]
 800b96c:	440a      	add	r2, r1
 800b96e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b976:	60d3      	str	r3, [r2, #12]
 800b978:	e00f      	b.n	800b99a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	791b      	ldrb	r3, [r3, #4]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d10b      	bne.n	800b99a <USB_HC_StartXfer+0x86>
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	795b      	ldrb	r3, [r3, #5]
 800b986:	2b01      	cmp	r3, #1
 800b988:	d107      	bne.n	800b99a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	785b      	ldrb	r3, [r3, #1]
 800b98e:	4619      	mov	r1, r3
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f000 fb6b 	bl	800c06c <USB_DoPing>
        return HAL_OK;
 800b996:	2300      	movs	r3, #0
 800b998:	e232      	b.n	800be00 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	799b      	ldrb	r3, [r3, #6]
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d158      	bne.n	800ba54 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	78db      	ldrb	r3, [r3, #3]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d007      	beq.n	800b9be <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b9ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b9b0:	68ba      	ldr	r2, [r7, #8]
 800b9b2:	8a92      	ldrh	r2, [r2, #20]
 800b9b4:	fb03 f202 	mul.w	r2, r3, r2
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	61da      	str	r2, [r3, #28]
 800b9bc:	e07c      	b.n	800bab8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	7c9b      	ldrb	r3, [r3, #18]
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d130      	bne.n	800ba28 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	2bbc      	cmp	r3, #188	@ 0xbc
 800b9cc:	d918      	bls.n	800ba00 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	8a9b      	ldrh	r3, [r3, #20]
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	69da      	ldr	r2, [r3, #28]
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d003      	beq.n	800b9f0 <USB_HC_StartXfer+0xdc>
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	68db      	ldr	r3, [r3, #12]
 800b9ec:	2b02      	cmp	r3, #2
 800b9ee:	d103      	bne.n	800b9f8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	2202      	movs	r2, #2
 800b9f4:	60da      	str	r2, [r3, #12]
 800b9f6:	e05f      	b.n	800bab8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	60da      	str	r2, [r3, #12]
 800b9fe:	e05b      	b.n	800bab8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	6a1a      	ldr	r2, [r3, #32]
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d007      	beq.n	800ba20 <USB_HC_StartXfer+0x10c>
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	2b02      	cmp	r3, #2
 800ba16:	d003      	beq.n	800ba20 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	2204      	movs	r2, #4
 800ba1c:	60da      	str	r2, [r3, #12]
 800ba1e:	e04b      	b.n	800bab8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	2203      	movs	r2, #3
 800ba24:	60da      	str	r2, [r3, #12]
 800ba26:	e047      	b.n	800bab8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800ba28:	79fb      	ldrb	r3, [r7, #7]
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d10d      	bne.n	800ba4a <USB_HC_StartXfer+0x136>
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	6a1b      	ldr	r3, [r3, #32]
 800ba32:	68ba      	ldr	r2, [r7, #8]
 800ba34:	8a92      	ldrh	r2, [r2, #20]
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d907      	bls.n	800ba4a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ba3a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ba3c:	68ba      	ldr	r2, [r7, #8]
 800ba3e:	8a92      	ldrh	r2, [r2, #20]
 800ba40:	fb03 f202 	mul.w	r2, r3, r2
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	61da      	str	r2, [r3, #28]
 800ba48:	e036      	b.n	800bab8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	6a1a      	ldr	r2, [r3, #32]
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	61da      	str	r2, [r3, #28]
 800ba52:	e031      	b.n	800bab8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	6a1b      	ldr	r3, [r3, #32]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d018      	beq.n	800ba8e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	6a1b      	ldr	r3, [r3, #32]
 800ba60:	68ba      	ldr	r2, [r7, #8]
 800ba62:	8a92      	ldrh	r2, [r2, #20]
 800ba64:	4413      	add	r3, r2
 800ba66:	3b01      	subs	r3, #1
 800ba68:	68ba      	ldr	r2, [r7, #8]
 800ba6a:	8a92      	ldrh	r2, [r2, #20]
 800ba6c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba70:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800ba72:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ba74:	8b7b      	ldrh	r3, [r7, #26]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d90b      	bls.n	800ba92 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800ba7a:	8b7b      	ldrh	r3, [r7, #26]
 800ba7c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ba7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ba80:	68ba      	ldr	r2, [r7, #8]
 800ba82:	8a92      	ldrh	r2, [r2, #20]
 800ba84:	fb03 f202 	mul.w	r2, r3, r2
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	61da      	str	r2, [r3, #28]
 800ba8c:	e001      	b.n	800ba92 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	78db      	ldrb	r3, [r3, #3]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00a      	beq.n	800bab0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ba9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ba9c:	68ba      	ldr	r2, [r7, #8]
 800ba9e:	8a92      	ldrh	r2, [r2, #20]
 800baa0:	fb03 f202 	mul.w	r2, r3, r2
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	61da      	str	r2, [r3, #28]
 800baa8:	e006      	b.n	800bab8 <USB_HC_StartXfer+0x1a4>
 800baaa:	bf00      	nop
 800baac:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	6a1a      	ldr	r2, [r3, #32]
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	69db      	ldr	r3, [r3, #28]
 800babc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bac0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bac2:	04d9      	lsls	r1, r3, #19
 800bac4:	4ba3      	ldr	r3, [pc, #652]	@ (800bd54 <USB_HC_StartXfer+0x440>)
 800bac6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800bac8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	7d9b      	ldrb	r3, [r3, #22]
 800bace:	075b      	lsls	r3, r3, #29
 800bad0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800bad4:	69f9      	ldr	r1, [r7, #28]
 800bad6:	0148      	lsls	r0, r1, #5
 800bad8:	6a39      	ldr	r1, [r7, #32]
 800bada:	4401      	add	r1, r0
 800badc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bae0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800bae2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800bae4:	79fb      	ldrb	r3, [r7, #7]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d009      	beq.n	800bafe <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	6999      	ldr	r1, [r3, #24]
 800baee:	69fb      	ldr	r3, [r7, #28]
 800baf0:	015a      	lsls	r2, r3, #5
 800baf2:	6a3b      	ldr	r3, [r7, #32]
 800baf4:	4413      	add	r3, r2
 800baf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bafa:	460a      	mov	r2, r1
 800bafc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800bafe:	6a3b      	ldr	r3, [r7, #32]
 800bb00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bb04:	689b      	ldr	r3, [r3, #8]
 800bb06:	f003 0301 	and.w	r3, r3, #1
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	bf0c      	ite	eq
 800bb0e:	2301      	moveq	r3, #1
 800bb10:	2300      	movne	r3, #0
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	015a      	lsls	r2, r3, #5
 800bb1a:	6a3b      	ldr	r3, [r7, #32]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	69fa      	ldr	r2, [r7, #28]
 800bb26:	0151      	lsls	r1, r2, #5
 800bb28:	6a3a      	ldr	r2, [r7, #32]
 800bb2a:	440a      	add	r2, r1
 800bb2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bb30:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bb34:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	015a      	lsls	r2, r3, #5
 800bb3a:	6a3b      	ldr	r3, [r7, #32]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	7e7b      	ldrb	r3, [r7, #25]
 800bb46:	075b      	lsls	r3, r3, #29
 800bb48:	69f9      	ldr	r1, [r7, #28]
 800bb4a:	0148      	lsls	r0, r1, #5
 800bb4c:	6a39      	ldr	r1, [r7, #32]
 800bb4e:	4401      	add	r1, r0
 800bb50:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800bb54:	4313      	orrs	r3, r2
 800bb56:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	799b      	ldrb	r3, [r3, #6]
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	f040 80c3 	bne.w	800bce8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	7c5b      	ldrb	r3, [r3, #17]
 800bb66:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800bb68:	68ba      	ldr	r2, [r7, #8]
 800bb6a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	69fa      	ldr	r2, [r7, #28]
 800bb70:	0151      	lsls	r1, r2, #5
 800bb72:	6a3a      	ldr	r2, [r7, #32]
 800bb74:	440a      	add	r2, r1
 800bb76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800bb7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800bb7e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	015a      	lsls	r2, r3, #5
 800bb84:	6a3b      	ldr	r3, [r7, #32]
 800bb86:	4413      	add	r3, r2
 800bb88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	69fa      	ldr	r2, [r7, #28]
 800bb90:	0151      	lsls	r1, r2, #5
 800bb92:	6a3a      	ldr	r2, [r7, #32]
 800bb94:	440a      	add	r2, r1
 800bb96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bb9a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800bb9e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	79db      	ldrb	r3, [r3, #7]
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d123      	bne.n	800bbf0 <USB_HC_StartXfer+0x2dc>
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	78db      	ldrb	r3, [r3, #3]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d11f      	bne.n	800bbf0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	015a      	lsls	r2, r3, #5
 800bbb4:	6a3b      	ldr	r3, [r7, #32]
 800bbb6:	4413      	add	r3, r2
 800bbb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	69fa      	ldr	r2, [r7, #28]
 800bbc0:	0151      	lsls	r1, r2, #5
 800bbc2:	6a3a      	ldr	r2, [r7, #32]
 800bbc4:	440a      	add	r2, r1
 800bbc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bbca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bbce:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	015a      	lsls	r2, r3, #5
 800bbd4:	6a3b      	ldr	r3, [r7, #32]
 800bbd6:	4413      	add	r3, r2
 800bbd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bbdc:	68db      	ldr	r3, [r3, #12]
 800bbde:	69fa      	ldr	r2, [r7, #28]
 800bbe0:	0151      	lsls	r1, r2, #5
 800bbe2:	6a3a      	ldr	r2, [r7, #32]
 800bbe4:	440a      	add	r2, r1
 800bbe6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bbea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbee:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	7c9b      	ldrb	r3, [r3, #18]
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d003      	beq.n	800bc00 <USB_HC_StartXfer+0x2ec>
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	7c9b      	ldrb	r3, [r3, #18]
 800bbfc:	2b03      	cmp	r3, #3
 800bbfe:	d117      	bne.n	800bc30 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d113      	bne.n	800bc30 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	78db      	ldrb	r3, [r3, #3]
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d10f      	bne.n	800bc30 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800bc10:	69fb      	ldr	r3, [r7, #28]
 800bc12:	015a      	lsls	r2, r3, #5
 800bc14:	6a3b      	ldr	r3, [r7, #32]
 800bc16:	4413      	add	r3, r2
 800bc18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	69fa      	ldr	r2, [r7, #28]
 800bc20:	0151      	lsls	r1, r2, #5
 800bc22:	6a3a      	ldr	r2, [r7, #32]
 800bc24:	440a      	add	r2, r1
 800bc26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc2e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	7c9b      	ldrb	r3, [r3, #18]
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d162      	bne.n	800bcfe <USB_HC_StartXfer+0x3ea>
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	78db      	ldrb	r3, [r3, #3]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d15e      	bne.n	800bcfe <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	3b01      	subs	r3, #1
 800bc46:	2b03      	cmp	r3, #3
 800bc48:	d858      	bhi.n	800bcfc <USB_HC_StartXfer+0x3e8>
 800bc4a:	a201      	add	r2, pc, #4	@ (adr r2, 800bc50 <USB_HC_StartXfer+0x33c>)
 800bc4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc50:	0800bc61 	.word	0x0800bc61
 800bc54:	0800bc83 	.word	0x0800bc83
 800bc58:	0800bca5 	.word	0x0800bca5
 800bc5c:	0800bcc7 	.word	0x0800bcc7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	015a      	lsls	r2, r3, #5
 800bc64:	6a3b      	ldr	r3, [r7, #32]
 800bc66:	4413      	add	r3, r2
 800bc68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	69fa      	ldr	r2, [r7, #28]
 800bc70:	0151      	lsls	r1, r2, #5
 800bc72:	6a3a      	ldr	r2, [r7, #32]
 800bc74:	440a      	add	r2, r1
 800bc76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc7e:	6053      	str	r3, [r2, #4]
          break;
 800bc80:	e03d      	b.n	800bcfe <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800bc82:	69fb      	ldr	r3, [r7, #28]
 800bc84:	015a      	lsls	r2, r3, #5
 800bc86:	6a3b      	ldr	r3, [r7, #32]
 800bc88:	4413      	add	r3, r2
 800bc8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	69fa      	ldr	r2, [r7, #28]
 800bc92:	0151      	lsls	r1, r2, #5
 800bc94:	6a3a      	ldr	r2, [r7, #32]
 800bc96:	440a      	add	r2, r1
 800bc98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc9c:	f043 030e 	orr.w	r3, r3, #14
 800bca0:	6053      	str	r3, [r2, #4]
          break;
 800bca2:	e02c      	b.n	800bcfe <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800bca4:	69fb      	ldr	r3, [r7, #28]
 800bca6:	015a      	lsls	r2, r3, #5
 800bca8:	6a3b      	ldr	r3, [r7, #32]
 800bcaa:	4413      	add	r3, r2
 800bcac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	69fa      	ldr	r2, [r7, #28]
 800bcb4:	0151      	lsls	r1, r2, #5
 800bcb6:	6a3a      	ldr	r2, [r7, #32]
 800bcb8:	440a      	add	r2, r1
 800bcba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bcbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bcc2:	6053      	str	r3, [r2, #4]
          break;
 800bcc4:	e01b      	b.n	800bcfe <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800bcc6:	69fb      	ldr	r3, [r7, #28]
 800bcc8:	015a      	lsls	r2, r3, #5
 800bcca:	6a3b      	ldr	r3, [r7, #32]
 800bccc:	4413      	add	r3, r2
 800bcce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	69fa      	ldr	r2, [r7, #28]
 800bcd6:	0151      	lsls	r1, r2, #5
 800bcd8:	6a3a      	ldr	r2, [r7, #32]
 800bcda:	440a      	add	r2, r1
 800bcdc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bce0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bce4:	6053      	str	r3, [r2, #4]
          break;
 800bce6:	e00a      	b.n	800bcfe <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800bce8:	69fb      	ldr	r3, [r7, #28]
 800bcea:	015a      	lsls	r2, r3, #5
 800bcec:	6a3b      	ldr	r3, [r7, #32]
 800bcee:	4413      	add	r3, r2
 800bcf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	6053      	str	r3, [r2, #4]
 800bcfa:	e000      	b.n	800bcfe <USB_HC_StartXfer+0x3ea>
          break;
 800bcfc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800bcfe:	69fb      	ldr	r3, [r7, #28]
 800bd00:	015a      	lsls	r2, r3, #5
 800bd02:	6a3b      	ldr	r3, [r7, #32]
 800bd04:	4413      	add	r3, r2
 800bd06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bd14:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	78db      	ldrb	r3, [r3, #3]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d004      	beq.n	800bd28 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd24:	613b      	str	r3, [r7, #16]
 800bd26:	e003      	b.n	800bd30 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bd2e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bd36:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	015a      	lsls	r2, r3, #5
 800bd3c:	6a3b      	ldr	r3, [r7, #32]
 800bd3e:	4413      	add	r3, r2
 800bd40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd44:	461a      	mov	r2, r3
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800bd4a:	79fb      	ldrb	r3, [r7, #7]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d003      	beq.n	800bd58 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800bd50:	2300      	movs	r3, #0
 800bd52:	e055      	b.n	800be00 <USB_HC_StartXfer+0x4ec>
 800bd54:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	78db      	ldrb	r3, [r3, #3]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d14e      	bne.n	800bdfe <USB_HC_StartXfer+0x4ea>
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	6a1b      	ldr	r3, [r3, #32]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d04a      	beq.n	800bdfe <USB_HC_StartXfer+0x4ea>
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	79db      	ldrb	r3, [r3, #7]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d146      	bne.n	800bdfe <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	7c9b      	ldrb	r3, [r3, #18]
 800bd74:	2b03      	cmp	r3, #3
 800bd76:	d831      	bhi.n	800bddc <USB_HC_StartXfer+0x4c8>
 800bd78:	a201      	add	r2, pc, #4	@ (adr r2, 800bd80 <USB_HC_StartXfer+0x46c>)
 800bd7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd7e:	bf00      	nop
 800bd80:	0800bd91 	.word	0x0800bd91
 800bd84:	0800bdb5 	.word	0x0800bdb5
 800bd88:	0800bd91 	.word	0x0800bd91
 800bd8c:	0800bdb5 	.word	0x0800bdb5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	6a1b      	ldr	r3, [r3, #32]
 800bd94:	3303      	adds	r3, #3
 800bd96:	089b      	lsrs	r3, r3, #2
 800bd98:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800bd9a:	8afa      	ldrh	r2, [r7, #22]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d91c      	bls.n	800bde0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	699b      	ldr	r3, [r3, #24]
 800bdaa:	f043 0220 	orr.w	r2, r3, #32
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	619a      	str	r2, [r3, #24]
        }
        break;
 800bdb2:	e015      	b.n	800bde0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	6a1b      	ldr	r3, [r3, #32]
 800bdb8:	3303      	adds	r3, #3
 800bdba:	089b      	lsrs	r3, r3, #2
 800bdbc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800bdbe:	8afa      	ldrh	r2, [r7, #22]
 800bdc0:	6a3b      	ldr	r3, [r7, #32]
 800bdc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bdc6:	691b      	ldr	r3, [r3, #16]
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d90a      	bls.n	800bde4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	699b      	ldr	r3, [r3, #24]
 800bdd2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	619a      	str	r2, [r3, #24]
        }
        break;
 800bdda:	e003      	b.n	800bde4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800bddc:	bf00      	nop
 800bdde:	e002      	b.n	800bde6 <USB_HC_StartXfer+0x4d2>
        break;
 800bde0:	bf00      	nop
 800bde2:	e000      	b.n	800bde6 <USB_HC_StartXfer+0x4d2>
        break;
 800bde4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	6999      	ldr	r1, [r3, #24]
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	785a      	ldrb	r2, [r3, #1]
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	6a1b      	ldr	r3, [r3, #32]
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	2000      	movs	r0, #0
 800bdf6:	9000      	str	r0, [sp, #0]
 800bdf8:	68f8      	ldr	r0, [r7, #12]
 800bdfa:	f7ff f9c9 	bl	800b190 <USB_WritePacket>
  }

  return HAL_OK;
 800bdfe:	2300      	movs	r3, #0
}
 800be00:	4618      	mov	r0, r3
 800be02:	3728      	adds	r7, #40	@ 0x28
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800be08:	b480      	push	{r7}
 800be0a:	b085      	sub	sp, #20
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800be1a:	695b      	ldr	r3, [r3, #20]
 800be1c:	b29b      	uxth	r3, r3
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3714      	adds	r7, #20
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr

0800be2a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800be2a:	b480      	push	{r7}
 800be2c:	b089      	sub	sp, #36	@ 0x24
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
 800be32:	460b      	mov	r3, r1
 800be34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800be3a:	78fb      	ldrb	r3, [r7, #3]
 800be3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800be3e:	2300      	movs	r3, #0
 800be40:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	015a      	lsls	r2, r3, #5
 800be46:	69fb      	ldr	r3, [r7, #28]
 800be48:	4413      	add	r3, r2
 800be4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	0c9b      	lsrs	r3, r3, #18
 800be52:	f003 0303 	and.w	r3, r3, #3
 800be56:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	015a      	lsls	r2, r3, #5
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	4413      	add	r3, r2
 800be60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	0fdb      	lsrs	r3, r3, #31
 800be68:	f003 0301 	and.w	r3, r3, #1
 800be6c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800be6e:	69bb      	ldr	r3, [r7, #24]
 800be70:	015a      	lsls	r2, r3, #5
 800be72:	69fb      	ldr	r3, [r7, #28]
 800be74:	4413      	add	r3, r2
 800be76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	0fdb      	lsrs	r3, r3, #31
 800be7e:	f003 0301 	and.w	r3, r3, #1
 800be82:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	689b      	ldr	r3, [r3, #8]
 800be88:	f003 0320 	and.w	r3, r3, #32
 800be8c:	2b20      	cmp	r3, #32
 800be8e:	d10d      	bne.n	800beac <USB_HC_Halt+0x82>
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d10a      	bne.n	800beac <USB_HC_Halt+0x82>
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d005      	beq.n	800bea8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d002      	beq.n	800bea8 <USB_HC_Halt+0x7e>
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	2b03      	cmp	r3, #3
 800bea6:	d101      	bne.n	800beac <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800bea8:	2300      	movs	r3, #0
 800beaa:	e0d8      	b.n	800c05e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d002      	beq.n	800beb8 <USB_HC_Halt+0x8e>
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	2b02      	cmp	r3, #2
 800beb6:	d173      	bne.n	800bfa0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	015a      	lsls	r2, r3, #5
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	4413      	add	r3, r2
 800bec0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	69ba      	ldr	r2, [r7, #24]
 800bec8:	0151      	lsls	r1, r2, #5
 800beca:	69fa      	ldr	r2, [r7, #28]
 800becc:	440a      	add	r2, r1
 800bece:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bed2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bed6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	f003 0320 	and.w	r3, r3, #32
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d14a      	bne.n	800bf7a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bee8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800beec:	2b00      	cmp	r3, #0
 800beee:	d133      	bne.n	800bf58 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bef0:	69bb      	ldr	r3, [r7, #24]
 800bef2:	015a      	lsls	r2, r3, #5
 800bef4:	69fb      	ldr	r3, [r7, #28]
 800bef6:	4413      	add	r3, r2
 800bef8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	69ba      	ldr	r2, [r7, #24]
 800bf00:	0151      	lsls	r1, r2, #5
 800bf02:	69fa      	ldr	r2, [r7, #28]
 800bf04:	440a      	add	r2, r1
 800bf06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bf0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bf0e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	015a      	lsls	r2, r3, #5
 800bf14:	69fb      	ldr	r3, [r7, #28]
 800bf16:	4413      	add	r3, r2
 800bf18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	69ba      	ldr	r2, [r7, #24]
 800bf20:	0151      	lsls	r1, r2, #5
 800bf22:	69fa      	ldr	r2, [r7, #28]
 800bf24:	440a      	add	r2, r1
 800bf26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bf2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bf2e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	3301      	adds	r3, #1
 800bf34:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bf3c:	d82e      	bhi.n	800bf9c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bf3e:	69bb      	ldr	r3, [r7, #24]
 800bf40:	015a      	lsls	r2, r3, #5
 800bf42:	69fb      	ldr	r3, [r7, #28]
 800bf44:	4413      	add	r3, r2
 800bf46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bf50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bf54:	d0ec      	beq.n	800bf30 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bf56:	e081      	b.n	800c05c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	015a      	lsls	r2, r3, #5
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	4413      	add	r3, r2
 800bf60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	69ba      	ldr	r2, [r7, #24]
 800bf68:	0151      	lsls	r1, r2, #5
 800bf6a:	69fa      	ldr	r2, [r7, #28]
 800bf6c:	440a      	add	r2, r1
 800bf6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bf72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bf76:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bf78:	e070      	b.n	800c05c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bf7a:	69bb      	ldr	r3, [r7, #24]
 800bf7c:	015a      	lsls	r2, r3, #5
 800bf7e:	69fb      	ldr	r3, [r7, #28]
 800bf80:	4413      	add	r3, r2
 800bf82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	69ba      	ldr	r2, [r7, #24]
 800bf8a:	0151      	lsls	r1, r2, #5
 800bf8c:	69fa      	ldr	r2, [r7, #28]
 800bf8e:	440a      	add	r2, r1
 800bf90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bf94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bf98:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bf9a:	e05f      	b.n	800c05c <USB_HC_Halt+0x232>
            break;
 800bf9c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bf9e:	e05d      	b.n	800c05c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bfa0:	69bb      	ldr	r3, [r7, #24]
 800bfa2:	015a      	lsls	r2, r3, #5
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	4413      	add	r3, r2
 800bfa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	69ba      	ldr	r2, [r7, #24]
 800bfb0:	0151      	lsls	r1, r2, #5
 800bfb2:	69fa      	ldr	r2, [r7, #28]
 800bfb4:	440a      	add	r2, r1
 800bfb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bfba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bfbe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800bfc0:	69fb      	ldr	r3, [r7, #28]
 800bfc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bfc6:	691b      	ldr	r3, [r3, #16]
 800bfc8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d133      	bne.n	800c038 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bfd0:	69bb      	ldr	r3, [r7, #24]
 800bfd2:	015a      	lsls	r2, r3, #5
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	4413      	add	r3, r2
 800bfd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	69ba      	ldr	r2, [r7, #24]
 800bfe0:	0151      	lsls	r1, r2, #5
 800bfe2:	69fa      	ldr	r2, [r7, #28]
 800bfe4:	440a      	add	r2, r1
 800bfe6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bfea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bfee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bff0:	69bb      	ldr	r3, [r7, #24]
 800bff2:	015a      	lsls	r2, r3, #5
 800bff4:	69fb      	ldr	r3, [r7, #28]
 800bff6:	4413      	add	r3, r2
 800bff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	69ba      	ldr	r2, [r7, #24]
 800c000:	0151      	lsls	r1, r2, #5
 800c002:	69fa      	ldr	r2, [r7, #28]
 800c004:	440a      	add	r2, r1
 800c006:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c00a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c00e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	3301      	adds	r3, #1
 800c014:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c01c:	d81d      	bhi.n	800c05a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	015a      	lsls	r2, r3, #5
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	4413      	add	r3, r2
 800c026:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c030:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c034:	d0ec      	beq.n	800c010 <USB_HC_Halt+0x1e6>
 800c036:	e011      	b.n	800c05c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	015a      	lsls	r2, r3, #5
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	4413      	add	r3, r2
 800c040:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	69ba      	ldr	r2, [r7, #24]
 800c048:	0151      	lsls	r1, r2, #5
 800c04a:	69fa      	ldr	r2, [r7, #28]
 800c04c:	440a      	add	r2, r1
 800c04e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c052:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c056:	6013      	str	r3, [r2, #0]
 800c058:	e000      	b.n	800c05c <USB_HC_Halt+0x232>
          break;
 800c05a:	bf00      	nop
    }
  }

  return HAL_OK;
 800c05c:	2300      	movs	r3, #0
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3724      	adds	r7, #36	@ 0x24
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr
	...

0800c06c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b087      	sub	sp, #28
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	460b      	mov	r3, r1
 800c076:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c07c:	78fb      	ldrb	r3, [r7, #3]
 800c07e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c080:	2301      	movs	r3, #1
 800c082:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	04da      	lsls	r2, r3, #19
 800c088:	4b15      	ldr	r3, [pc, #84]	@ (800c0e0 <USB_DoPing+0x74>)
 800c08a:	4013      	ands	r3, r2
 800c08c:	693a      	ldr	r2, [r7, #16]
 800c08e:	0151      	lsls	r1, r2, #5
 800c090:	697a      	ldr	r2, [r7, #20]
 800c092:	440a      	add	r2, r1
 800c094:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c098:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c09c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	015a      	lsls	r2, r3, #5
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	4413      	add	r3, r2
 800c0a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c0b4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c0bc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	015a      	lsls	r2, r3, #5
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	371c      	adds	r7, #28
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr
 800c0de:	bf00      	nop
 800c0e0:	1ff80000 	.word	0x1ff80000

0800c0e4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b088      	sub	sp, #32
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f7fe ff8c 	bl	800b016 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c0fe:	2110      	movs	r1, #16
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f7fe ffe5 	bl	800b0d0 <USB_FlushTxFifo>
 800c106:	4603      	mov	r3, r0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d001      	beq.n	800c110 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800c10c:	2301      	movs	r3, #1
 800c10e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f7ff f80f 	bl	800b134 <USB_FlushRxFifo>
 800c116:	4603      	mov	r3, r0
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d001      	beq.n	800c120 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800c11c:	2301      	movs	r3, #1
 800c11e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c120:	2300      	movs	r3, #0
 800c122:	61bb      	str	r3, [r7, #24]
 800c124:	e01f      	b.n	800c166 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	015a      	lsls	r2, r3, #5
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	4413      	add	r3, r2
 800c12e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c13c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c144:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c14c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	015a      	lsls	r2, r3, #5
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	4413      	add	r3, r2
 800c156:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c15a:	461a      	mov	r2, r3
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c160:	69bb      	ldr	r3, [r7, #24]
 800c162:	3301      	adds	r3, #1
 800c164:	61bb      	str	r3, [r7, #24]
 800c166:	69bb      	ldr	r3, [r7, #24]
 800c168:	2b0f      	cmp	r3, #15
 800c16a:	d9dc      	bls.n	800c126 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c16c:	2300      	movs	r3, #0
 800c16e:	61bb      	str	r3, [r7, #24]
 800c170:	e034      	b.n	800c1dc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800c172:	69bb      	ldr	r3, [r7, #24]
 800c174:	015a      	lsls	r2, r3, #5
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	4413      	add	r3, r2
 800c17a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c188:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c190:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c198:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	015a      	lsls	r2, r3, #5
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c1b8:	d80c      	bhi.n	800c1d4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	015a      	lsls	r2, r3, #5
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c1cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c1d0:	d0ec      	beq.n	800c1ac <USB_StopHost+0xc8>
 800c1d2:	e000      	b.n	800c1d6 <USB_StopHost+0xf2>
        break;
 800c1d4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c1d6:	69bb      	ldr	r3, [r7, #24]
 800c1d8:	3301      	adds	r3, #1
 800c1da:	61bb      	str	r3, [r7, #24]
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	2b0f      	cmp	r3, #15
 800c1e0:	d9c7      	bls.n	800c172 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ee:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c1f6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f7fe fefb 	bl	800aff4 <USB_EnableGlobalInt>

  return ret;
 800c1fe:	7ffb      	ldrb	r3, [r7, #31]
}
 800c200:	4618      	mov	r0, r3
 800c202:	3720      	adds	r7, #32
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c208:	b590      	push	{r4, r7, lr}
 800c20a:	b089      	sub	sp, #36	@ 0x24
 800c20c:	af04      	add	r7, sp, #16
 800c20e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c210:	2301      	movs	r3, #1
 800c212:	2202      	movs	r2, #2
 800c214:	2102      	movs	r1, #2
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f000 fcd1 	bl	800cbbe <USBH_FindInterface>
 800c21c:	4603      	mov	r3, r0
 800c21e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c220:	7bfb      	ldrb	r3, [r7, #15]
 800c222:	2bff      	cmp	r3, #255	@ 0xff
 800c224:	d002      	beq.n	800c22c <USBH_CDC_InterfaceInit+0x24>
 800c226:	7bfb      	ldrb	r3, [r7, #15]
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d901      	bls.n	800c230 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c22c:	2302      	movs	r3, #2
 800c22e:	e13d      	b.n	800c4ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800c230:	7bfb      	ldrb	r3, [r7, #15]
 800c232:	4619      	mov	r1, r3
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 fca6 	bl	800cb86 <USBH_SelectInterface>
 800c23a:	4603      	mov	r3, r0
 800c23c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c23e:	7bbb      	ldrb	r3, [r7, #14]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d001      	beq.n	800c248 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800c244:	2302      	movs	r3, #2
 800c246:	e131      	b.n	800c4ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800c24e:	2050      	movs	r0, #80	@ 0x50
 800c250:	f007 f8b6 	bl	80133c0 <malloc>
 800c254:	4603      	mov	r3, r0
 800c256:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c25e:	69db      	ldr	r3, [r3, #28]
 800c260:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d101      	bne.n	800c26c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800c268:	2302      	movs	r3, #2
 800c26a:	e11f      	b.n	800c4ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800c26c:	2250      	movs	r2, #80	@ 0x50
 800c26e:	2100      	movs	r1, #0
 800c270:	68b8      	ldr	r0, [r7, #8]
 800c272:	f008 fd50 	bl	8014d16 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c276:	7bfb      	ldrb	r3, [r7, #15]
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	211a      	movs	r1, #26
 800c27c:	fb01 f303 	mul.w	r3, r1, r3
 800c280:	4413      	add	r3, r2
 800c282:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	b25b      	sxtb	r3, r3
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	da15      	bge.n	800c2ba <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c28e:	7bfb      	ldrb	r3, [r7, #15]
 800c290:	687a      	ldr	r2, [r7, #4]
 800c292:	211a      	movs	r1, #26
 800c294:	fb01 f303 	mul.w	r3, r1, r3
 800c298:	4413      	add	r3, r2
 800c29a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c29e:	781a      	ldrb	r2, [r3, #0]
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c2a4:	7bfb      	ldrb	r3, [r7, #15]
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	211a      	movs	r1, #26
 800c2aa:	fb01 f303 	mul.w	r3, r1, r3
 800c2ae:	4413      	add	r3, r2
 800c2b0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c2b4:	881a      	ldrh	r2, [r3, #0]
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	785b      	ldrb	r3, [r3, #1]
 800c2be:	4619      	mov	r1, r3
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f002 fa18 	bl	800e6f6 <USBH_AllocPipe>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	7819      	ldrb	r1, [r3, #0]
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	7858      	ldrb	r0, [r3, #1]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c2e2:	68ba      	ldr	r2, [r7, #8]
 800c2e4:	8952      	ldrh	r2, [r2, #10]
 800c2e6:	9202      	str	r2, [sp, #8]
 800c2e8:	2203      	movs	r2, #3
 800c2ea:	9201      	str	r2, [sp, #4]
 800c2ec:	9300      	str	r3, [sp, #0]
 800c2ee:	4623      	mov	r3, r4
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f002 f9d0 	bl	800e698 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	4619      	mov	r1, r3
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f006 ffcf 	bl	80132a4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800c306:	2300      	movs	r3, #0
 800c308:	2200      	movs	r2, #0
 800c30a:	210a      	movs	r1, #10
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 fc56 	bl	800cbbe <USBH_FindInterface>
 800c312:	4603      	mov	r3, r0
 800c314:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c316:	7bfb      	ldrb	r3, [r7, #15]
 800c318:	2bff      	cmp	r3, #255	@ 0xff
 800c31a:	d002      	beq.n	800c322 <USBH_CDC_InterfaceInit+0x11a>
 800c31c:	7bfb      	ldrb	r3, [r7, #15]
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d901      	bls.n	800c326 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c322:	2302      	movs	r3, #2
 800c324:	e0c2      	b.n	800c4ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c326:	7bfb      	ldrb	r3, [r7, #15]
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	211a      	movs	r1, #26
 800c32c:	fb01 f303 	mul.w	r3, r1, r3
 800c330:	4413      	add	r3, r2
 800c332:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	b25b      	sxtb	r3, r3
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	da16      	bge.n	800c36c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c33e:	7bfb      	ldrb	r3, [r7, #15]
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	211a      	movs	r1, #26
 800c344:	fb01 f303 	mul.w	r3, r1, r3
 800c348:	4413      	add	r3, r2
 800c34a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c34e:	781a      	ldrb	r2, [r3, #0]
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c354:	7bfb      	ldrb	r3, [r7, #15]
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	211a      	movs	r1, #26
 800c35a:	fb01 f303 	mul.w	r3, r1, r3
 800c35e:	4413      	add	r3, r2
 800c360:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c364:	881a      	ldrh	r2, [r3, #0]
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	835a      	strh	r2, [r3, #26]
 800c36a:	e015      	b.n	800c398 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c36c:	7bfb      	ldrb	r3, [r7, #15]
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	211a      	movs	r1, #26
 800c372:	fb01 f303 	mul.w	r3, r1, r3
 800c376:	4413      	add	r3, r2
 800c378:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c37c:	781a      	ldrb	r2, [r3, #0]
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c382:	7bfb      	ldrb	r3, [r7, #15]
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	211a      	movs	r1, #26
 800c388:	fb01 f303 	mul.w	r3, r1, r3
 800c38c:	4413      	add	r3, r2
 800c38e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c392:	881a      	ldrh	r2, [r3, #0]
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800c398:	7bfb      	ldrb	r3, [r7, #15]
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	211a      	movs	r1, #26
 800c39e:	fb01 f303 	mul.w	r3, r1, r3
 800c3a2:	4413      	add	r3, r2
 800c3a4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	b25b      	sxtb	r3, r3
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	da16      	bge.n	800c3de <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c3b0:	7bfb      	ldrb	r3, [r7, #15]
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	211a      	movs	r1, #26
 800c3b6:	fb01 f303 	mul.w	r3, r1, r3
 800c3ba:	4413      	add	r3, r2
 800c3bc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c3c0:	781a      	ldrb	r2, [r3, #0]
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c3c6:	7bfb      	ldrb	r3, [r7, #15]
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	211a      	movs	r1, #26
 800c3cc:	fb01 f303 	mul.w	r3, r1, r3
 800c3d0:	4413      	add	r3, r2
 800c3d2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800c3d6:	881a      	ldrh	r2, [r3, #0]
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	835a      	strh	r2, [r3, #26]
 800c3dc:	e015      	b.n	800c40a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c3de:	7bfb      	ldrb	r3, [r7, #15]
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	211a      	movs	r1, #26
 800c3e4:	fb01 f303 	mul.w	r3, r1, r3
 800c3e8:	4413      	add	r3, r2
 800c3ea:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c3ee:	781a      	ldrb	r2, [r3, #0]
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c3f4:	7bfb      	ldrb	r3, [r7, #15]
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	211a      	movs	r1, #26
 800c3fa:	fb01 f303 	mul.w	r3, r1, r3
 800c3fe:	4413      	add	r3, r2
 800c400:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800c404:	881a      	ldrh	r2, [r3, #0]
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	7b9b      	ldrb	r3, [r3, #14]
 800c40e:	4619      	mov	r1, r3
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f002 f970 	bl	800e6f6 <USBH_AllocPipe>
 800c416:	4603      	mov	r3, r0
 800c418:	461a      	mov	r2, r3
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	7bdb      	ldrb	r3, [r3, #15]
 800c422:	4619      	mov	r1, r3
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f002 f966 	bl	800e6f6 <USBH_AllocPipe>
 800c42a:	4603      	mov	r3, r0
 800c42c:	461a      	mov	r2, r3
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	7b59      	ldrb	r1, [r3, #13]
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	7b98      	ldrb	r0, [r3, #14]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c446:	68ba      	ldr	r2, [r7, #8]
 800c448:	8b12      	ldrh	r2, [r2, #24]
 800c44a:	9202      	str	r2, [sp, #8]
 800c44c:	2202      	movs	r2, #2
 800c44e:	9201      	str	r2, [sp, #4]
 800c450:	9300      	str	r3, [sp, #0]
 800c452:	4623      	mov	r3, r4
 800c454:	4602      	mov	r2, r0
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f002 f91e 	bl	800e698 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	7b19      	ldrb	r1, [r3, #12]
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	7bd8      	ldrb	r0, [r3, #15]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c470:	68ba      	ldr	r2, [r7, #8]
 800c472:	8b52      	ldrh	r2, [r2, #26]
 800c474:	9202      	str	r2, [sp, #8]
 800c476:	2202      	movs	r2, #2
 800c478:	9201      	str	r2, [sp, #4]
 800c47a:	9300      	str	r3, [sp, #0]
 800c47c:	4623      	mov	r3, r4
 800c47e:	4602      	mov	r2, r0
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f002 f909 	bl	800e698 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	2200      	movs	r2, #0
 800c48a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	7b5b      	ldrb	r3, [r3, #13]
 800c492:	2200      	movs	r2, #0
 800c494:	4619      	mov	r1, r3
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f006 ff04 	bl	80132a4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	7b1b      	ldrb	r3, [r3, #12]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f006 fefd 	bl	80132a4 <USBH_LL_SetToggle>

  return USBH_OK;
 800c4aa:	2300      	movs	r3, #0
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3714      	adds	r7, #20
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd90      	pop	{r4, r7, pc}

0800c4b4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c4c2:	69db      	ldr	r3, [r3, #28]
 800c4c4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d00e      	beq.n	800c4ec <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f002 f8fe 	bl	800e6d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	4619      	mov	r1, r3
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f002 f929 	bl	800e738 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	7b1b      	ldrb	r3, [r3, #12]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d00e      	beq.n	800c512 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	7b1b      	ldrb	r3, [r3, #12]
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f002 f8eb 	bl	800e6d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	7b1b      	ldrb	r3, [r3, #12]
 800c504:	4619      	mov	r1, r3
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f002 f916 	bl	800e738 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2200      	movs	r2, #0
 800c510:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	7b5b      	ldrb	r3, [r3, #13]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d00e      	beq.n	800c538 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	7b5b      	ldrb	r3, [r3, #13]
 800c51e:	4619      	mov	r1, r3
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f002 f8d8 	bl	800e6d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	7b5b      	ldrb	r3, [r3, #13]
 800c52a:	4619      	mov	r1, r3
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f002 f903 	bl	800e738 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2200      	movs	r2, #0
 800c536:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c53e:	69db      	ldr	r3, [r3, #28]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d00b      	beq.n	800c55c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c54a:	69db      	ldr	r3, [r3, #28]
 800c54c:	4618      	mov	r0, r3
 800c54e:	f006 ff3f 	bl	80133d0 <free>
    phost->pActiveClass->pData = 0U;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c558:	2200      	movs	r2, #0
 800c55a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3710      	adds	r7, #16
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}

0800c566 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c566:	b580      	push	{r7, lr}
 800c568:	b084      	sub	sp, #16
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c574:	69db      	ldr	r3, [r3, #28]
 800c576:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	3340      	adds	r3, #64	@ 0x40
 800c57c:	4619      	mov	r1, r3
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 f8b1 	bl	800c6e6 <GetLineCoding>
 800c584:	4603      	mov	r3, r0
 800c586:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800c588:	7afb      	ldrb	r3, [r7, #11]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d105      	bne.n	800c59a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c594:	2102      	movs	r1, #2
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800c59a:	7afb      	ldrb	r3, [r7, #11]
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3710      	adds	r7, #16
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c5ba:	69db      	ldr	r3, [r3, #28]
 800c5bc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800c5c4:	2b04      	cmp	r3, #4
 800c5c6:	d877      	bhi.n	800c6b8 <USBH_CDC_Process+0x114>
 800c5c8:	a201      	add	r2, pc, #4	@ (adr r2, 800c5d0 <USBH_CDC_Process+0x2c>)
 800c5ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ce:	bf00      	nop
 800c5d0:	0800c5e5 	.word	0x0800c5e5
 800c5d4:	0800c5eb 	.word	0x0800c5eb
 800c5d8:	0800c61b 	.word	0x0800c61b
 800c5dc:	0800c68f 	.word	0x0800c68f
 800c5e0:	0800c69d 	.word	0x0800c69d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	73fb      	strb	r3, [r7, #15]
      break;
 800c5e8:	e06d      	b.n	800c6c6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c5ee:	4619      	mov	r1, r3
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 f897 	bl	800c724 <SetLineCoding>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c5fa:	7bbb      	ldrb	r3, [r7, #14]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d104      	bne.n	800c60a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	2202      	movs	r2, #2
 800c604:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c608:	e058      	b.n	800c6bc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800c60a:	7bbb      	ldrb	r3, [r7, #14]
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d055      	beq.n	800c6bc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	2204      	movs	r2, #4
 800c614:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800c618:	e050      	b.n	800c6bc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	3340      	adds	r3, #64	@ 0x40
 800c61e:	4619      	mov	r1, r3
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 f860 	bl	800c6e6 <GetLineCoding>
 800c626:	4603      	mov	r3, r0
 800c628:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c62a:	7bbb      	ldrb	r3, [r7, #14]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d126      	bne.n	800c67e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	2200      	movs	r2, #0
 800c634:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c642:	791b      	ldrb	r3, [r3, #4]
 800c644:	429a      	cmp	r2, r3
 800c646:	d13b      	bne.n	800c6c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c652:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c654:	429a      	cmp	r2, r3
 800c656:	d133      	bne.n	800c6c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c662:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c664:	429a      	cmp	r2, r3
 800c666:	d12b      	bne.n	800c6c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c670:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c672:	429a      	cmp	r2, r3
 800c674:	d124      	bne.n	800c6c0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 f982 	bl	800c980 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c67c:	e020      	b.n	800c6c0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c67e:	7bbb      	ldrb	r3, [r7, #14]
 800c680:	2b01      	cmp	r3, #1
 800c682:	d01d      	beq.n	800c6c0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	2204      	movs	r2, #4
 800c688:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800c68c:	e018      	b.n	800c6c0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 f867 	bl	800c762 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f000 f8f6 	bl	800c886 <CDC_ProcessReception>
      break;
 800c69a:	e014      	b.n	800c6c6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c69c:	2100      	movs	r1, #0
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f001 f984 	bl	800d9ac <USBH_ClrFeature>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c6a8:	7bbb      	ldrb	r3, [r7, #14]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d10a      	bne.n	800c6c4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800c6b6:	e005      	b.n	800c6c4 <USBH_CDC_Process+0x120>

    default:
      break;
 800c6b8:	bf00      	nop
 800c6ba:	e004      	b.n	800c6c6 <USBH_CDC_Process+0x122>
      break;
 800c6bc:	bf00      	nop
 800c6be:	e002      	b.n	800c6c6 <USBH_CDC_Process+0x122>
      break;
 800c6c0:	bf00      	nop
 800c6c2:	e000      	b.n	800c6c6 <USBH_CDC_Process+0x122>
      break;
 800c6c4:	bf00      	nop

  }

  return status;
 800c6c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3710      	adds	r7, #16
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b083      	sub	sp, #12
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c6d8:	2300      	movs	r3, #0
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	370c      	adds	r7, #12
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr

0800c6e6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b082      	sub	sp, #8
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
 800c6ee:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	22a1      	movs	r2, #161	@ 0xa1
 800c6f4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2221      	movs	r2, #33	@ 0x21
 800c6fa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2200      	movs	r2, #0
 800c700:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2207      	movs	r2, #7
 800c70c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	2207      	movs	r2, #7
 800c712:	4619      	mov	r1, r3
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f001 fc7e 	bl	800e016 <USBH_CtlReq>
 800c71a:	4603      	mov	r3, r0
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3708      	adds	r7, #8
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2221      	movs	r2, #33	@ 0x21
 800c732:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2220      	movs	r2, #32
 800c738:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2200      	movs	r2, #0
 800c73e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2207      	movs	r2, #7
 800c74a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	2207      	movs	r2, #7
 800c750:	4619      	mov	r1, r3
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f001 fc5f 	bl	800e016 <USBH_CtlReq>
 800c758:	4603      	mov	r3, r0
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3708      	adds	r7, #8
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}

0800c762 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c762:	b580      	push	{r7, lr}
 800c764:	b086      	sub	sp, #24
 800c766:	af02      	add	r7, sp, #8
 800c768:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c770:	69db      	ldr	r3, [r3, #28]
 800c772:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c774:	2300      	movs	r3, #0
 800c776:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d002      	beq.n	800c788 <CDC_ProcessTransmission+0x26>
 800c782:	2b02      	cmp	r3, #2
 800c784:	d023      	beq.n	800c7ce <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800c786:	e07a      	b.n	800c87e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c78c:	68fa      	ldr	r2, [r7, #12]
 800c78e:	8b12      	ldrh	r2, [r2, #24]
 800c790:	4293      	cmp	r3, r2
 800c792:	d90b      	bls.n	800c7ac <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	69d9      	ldr	r1, [r3, #28]
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	8b1a      	ldrh	r2, [r3, #24]
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	7b5b      	ldrb	r3, [r3, #13]
 800c7a0:	2001      	movs	r0, #1
 800c7a2:	9000      	str	r0, [sp, #0]
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f001 ff34 	bl	800e612 <USBH_BulkSendData>
 800c7aa:	e00b      	b.n	800c7c4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800c7b4:	b29a      	uxth	r2, r3
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	7b5b      	ldrb	r3, [r3, #13]
 800c7ba:	2001      	movs	r0, #1
 800c7bc:	9000      	str	r0, [sp, #0]
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f001 ff27 	bl	800e612 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2202      	movs	r2, #2
 800c7c8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800c7cc:	e057      	b.n	800c87e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	7b5b      	ldrb	r3, [r3, #13]
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f006 fd3b 	bl	8013250 <USBH_LL_GetURBState>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c7de:	7afb      	ldrb	r3, [r7, #11]
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d136      	bne.n	800c852 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	8b12      	ldrh	r2, [r2, #24]
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d90e      	bls.n	800c80e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7f4:	68fa      	ldr	r2, [r7, #12]
 800c7f6:	8b12      	ldrh	r2, [r2, #24]
 800c7f8:	1a9a      	subs	r2, r3, r2
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	69db      	ldr	r3, [r3, #28]
 800c802:	68fa      	ldr	r2, [r7, #12]
 800c804:	8b12      	ldrh	r2, [r2, #24]
 800c806:	441a      	add	r2, r3
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	61da      	str	r2, [r3, #28]
 800c80c:	e002      	b.n	800c814 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2200      	movs	r2, #0
 800c812:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d004      	beq.n	800c826 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2201      	movs	r2, #1
 800c820:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800c824:	e006      	b.n	800c834 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	2200      	movs	r2, #0
 800c82a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 f892 	bl	800c958 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2204      	movs	r2, #4
 800c838:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c848:	2300      	movs	r3, #0
 800c84a:	2200      	movs	r2, #0
 800c84c:	f002 f9a2 	bl	800eb94 <osMessageQueuePut>
      break;
 800c850:	e014      	b.n	800c87c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800c852:	7afb      	ldrb	r3, [r7, #11]
 800c854:	2b02      	cmp	r3, #2
 800c856:	d111      	bne.n	800c87c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2201      	movs	r2, #1
 800c85c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2204      	movs	r2, #4
 800c864:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c874:	2300      	movs	r3, #0
 800c876:	2200      	movs	r2, #0
 800c878:	f002 f98c 	bl	800eb94 <osMessageQueuePut>
      break;
 800c87c:	bf00      	nop
  }
}
 800c87e:	bf00      	nop
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c886:	b580      	push	{r7, lr}
 800c888:	b086      	sub	sp, #24
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c894:	69db      	ldr	r3, [r3, #28]
 800c896:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c898:	2300      	movs	r3, #0
 800c89a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800c8a2:	2b03      	cmp	r3, #3
 800c8a4:	d002      	beq.n	800c8ac <CDC_ProcessReception+0x26>
 800c8a6:	2b04      	cmp	r3, #4
 800c8a8:	d00e      	beq.n	800c8c8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800c8aa:	e051      	b.n	800c950 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	6a19      	ldr	r1, [r3, #32]
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	8b5a      	ldrh	r2, [r3, #26]
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	7b1b      	ldrb	r3, [r3, #12]
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f001 fecf 	bl	800e65c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	2204      	movs	r2, #4
 800c8c2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800c8c6:	e043      	b.n	800c950 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	7b1b      	ldrb	r3, [r3, #12]
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f006 fcbe 	bl	8013250 <USBH_LL_GetURBState>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c8d8:	7cfb      	ldrb	r3, [r7, #19]
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d137      	bne.n	800c94e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	7b1b      	ldrb	r3, [r3, #12]
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f006 fc21 	bl	801312c <USBH_LL_GetLastXferSize>
 800c8ea:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8f0:	68fa      	ldr	r2, [r7, #12]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d016      	beq.n	800c924 <CDC_ProcessReception+0x9e>
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	8b5b      	ldrh	r3, [r3, #26]
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d910      	bls.n	800c924 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	1ad2      	subs	r2, r2, r3
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	6a1a      	ldr	r2, [r3, #32]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	441a      	add	r2, r3
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	2203      	movs	r2, #3
 800c91e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800c922:	e006      	b.n	800c932 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	2200      	movs	r2, #0
 800c928:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f000 f81d 	bl	800c96c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2204      	movs	r2, #4
 800c936:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c946:	2300      	movs	r3, #0
 800c948:	2200      	movs	r2, #0
 800c94a:	f002 f923 	bl	800eb94 <osMessageQueuePut>
      break;
 800c94e:	bf00      	nop
  }
}
 800c950:	bf00      	nop
 800c952:	3718      	adds	r7, #24
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}

0800c958 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c958:	b480      	push	{r7}
 800c95a:	b083      	sub	sp, #12
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c960:	bf00      	nop
 800c962:	370c      	adds	r7, #12
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr

0800c96c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b083      	sub	sp, #12
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c974:	bf00      	nop
 800c976:	370c      	adds	r7, #12
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr

0800c980 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c980:	b480      	push	{r7}
 800c982:	b083      	sub	sp, #12
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c988:	bf00      	nop
 800c98a:	370c      	adds	r7, #12
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr

0800c994 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	4613      	mov	r3, r2
 800c9a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d101      	bne.n	800c9ac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c9a8:	2302      	movs	r3, #2
 800c9aa:	e044      	b.n	800ca36 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	79fa      	ldrb	r2, [r7, #7]
 800c9b0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	f000 f841 	bl	800ca4c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d003      	beq.n	800c9f8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	68ba      	ldr	r2, [r7, #8]
 800c9f4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	2104      	movs	r1, #4
 800c9fc:	2010      	movs	r0, #16
 800c9fe:	f002 f856 	bl	800eaae <osMessageQueueNew>
 800ca02:	4602      	mov	r2, r0
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800ca0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ca40 <USBH_Init+0xac>)
 800ca0c:	4a0d      	ldr	r2, [pc, #52]	@ (800ca44 <USBH_Init+0xb0>)
 800ca0e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800ca10:	4b0b      	ldr	r3, [pc, #44]	@ (800ca40 <USBH_Init+0xac>)
 800ca12:	2280      	movs	r2, #128	@ 0x80
 800ca14:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800ca16:	4b0a      	ldr	r3, [pc, #40]	@ (800ca40 <USBH_Init+0xac>)
 800ca18:	2218      	movs	r2, #24
 800ca1a:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800ca1c:	4a08      	ldr	r2, [pc, #32]	@ (800ca40 <USBH_Init+0xac>)
 800ca1e:	68f9      	ldr	r1, [r7, #12]
 800ca20:	4809      	ldr	r0, [pc, #36]	@ (800ca48 <USBH_Init+0xb4>)
 800ca22:	f001 ff97 	bl	800e954 <osThreadNew>
 800ca26:	4602      	mov	r2, r0
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800ca2e:	68f8      	ldr	r0, [r7, #12]
 800ca30:	f006 fac8 	bl	8012fc4 <USBH_LL_Init>

  return USBH_OK;
 800ca34:	2300      	movs	r3, #0
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3710      	adds	r7, #16
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	20002b2c 	.word	0x20002b2c
 800ca44:	08019a94 	.word	0x08019a94
 800ca48:	0800d6fd 	.word	0x0800d6fd

0800ca4c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b084      	sub	sp, #16
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ca54:	2300      	movs	r3, #0
 800ca56:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ca58:	2300      	movs	r3, #0
 800ca5a:	60fb      	str	r3, [r7, #12]
 800ca5c:	e009      	b.n	800ca72 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	33e0      	adds	r3, #224	@ 0xe0
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	4413      	add	r3, r2
 800ca68:	2200      	movs	r2, #0
 800ca6a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	3301      	adds	r3, #1
 800ca70:	60fb      	str	r3, [r7, #12]
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2b0f      	cmp	r3, #15
 800ca76:	d9f2      	bls.n	800ca5e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ca78:	2300      	movs	r3, #0
 800ca7a:	60fb      	str	r3, [r7, #12]
 800ca7c:	e009      	b.n	800ca92 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	4413      	add	r3, r2
 800ca84:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ca88:	2200      	movs	r2, #0
 800ca8a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	3301      	adds	r3, #1
 800ca90:	60fb      	str	r3, [r7, #12]
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca98:	d3f1      	bcc.n	800ca7e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2200      	movs	r2, #0
 800caa4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2201      	movs	r2, #1
 800caaa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2200      	movs	r2, #0
 800cab0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2201      	movs	r2, #1
 800cab8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2240      	movs	r2, #64	@ 0x40
 800cabe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2200      	movs	r2, #0
 800cac4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2200      	movs	r2, #0
 800caca:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2201      	movs	r2, #1
 800cad2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2200      	movs	r2, #0
 800cada:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2200      	movs	r2, #0
 800cae2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	331c      	adds	r3, #28
 800caea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800caee:	2100      	movs	r1, #0
 800caf0:	4618      	mov	r0, r3
 800caf2:	f008 f910 	bl	8014d16 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cafc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb00:	2100      	movs	r1, #0
 800cb02:	4618      	mov	r0, r3
 800cb04:	f008 f907 	bl	8014d16 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800cb0e:	2212      	movs	r2, #18
 800cb10:	2100      	movs	r1, #0
 800cb12:	4618      	mov	r0, r3
 800cb14:	f008 f8ff 	bl	8014d16 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800cb1e:	223e      	movs	r2, #62	@ 0x3e
 800cb20:	2100      	movs	r1, #0
 800cb22:	4618      	mov	r0, r3
 800cb24:	f008 f8f7 	bl	8014d16 <memset>

  return USBH_OK;
 800cb28:	2300      	movs	r3, #0
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3710      	adds	r7, #16
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cb32:	b480      	push	{r7}
 800cb34:	b085      	sub	sp, #20
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
 800cb3a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d016      	beq.n	800cb74 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d10e      	bne.n	800cb6e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800cb56:	1c59      	adds	r1, r3, #1
 800cb58:	687a      	ldr	r2, [r7, #4]
 800cb5a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800cb5e:	687a      	ldr	r2, [r7, #4]
 800cb60:	33de      	adds	r3, #222	@ 0xde
 800cb62:	6839      	ldr	r1, [r7, #0]
 800cb64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	73fb      	strb	r3, [r7, #15]
 800cb6c:	e004      	b.n	800cb78 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800cb6e:	2302      	movs	r3, #2
 800cb70:	73fb      	strb	r3, [r7, #15]
 800cb72:	e001      	b.n	800cb78 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800cb74:	2302      	movs	r3, #2
 800cb76:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cb78:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3714      	adds	r7, #20
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr

0800cb86 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800cb86:	b480      	push	{r7}
 800cb88:	b085      	sub	sp, #20
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	6078      	str	r0, [r7, #4]
 800cb8e:	460b      	mov	r3, r1
 800cb90:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800cb92:	2300      	movs	r3, #0
 800cb94:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800cb9c:	78fa      	ldrb	r2, [r7, #3]
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d204      	bcs.n	800cbac <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	78fa      	ldrb	r2, [r7, #3]
 800cba6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800cbaa:	e001      	b.n	800cbb0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800cbac:	2302      	movs	r3, #2
 800cbae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cbb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3714      	adds	r7, #20
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbc:	4770      	bx	lr

0800cbbe <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800cbbe:	b480      	push	{r7}
 800cbc0:	b087      	sub	sp, #28
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	6078      	str	r0, [r7, #4]
 800cbc6:	4608      	mov	r0, r1
 800cbc8:	4611      	mov	r1, r2
 800cbca:	461a      	mov	r2, r3
 800cbcc:	4603      	mov	r3, r0
 800cbce:	70fb      	strb	r3, [r7, #3]
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	70bb      	strb	r3, [r7, #2]
 800cbd4:	4613      	mov	r3, r2
 800cbd6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800cbe6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cbe8:	e025      	b.n	800cc36 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800cbea:	7dfb      	ldrb	r3, [r7, #23]
 800cbec:	221a      	movs	r2, #26
 800cbee:	fb02 f303 	mul.w	r3, r2, r3
 800cbf2:	3308      	adds	r3, #8
 800cbf4:	68fa      	ldr	r2, [r7, #12]
 800cbf6:	4413      	add	r3, r2
 800cbf8:	3302      	adds	r3, #2
 800cbfa:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	795b      	ldrb	r3, [r3, #5]
 800cc00:	78fa      	ldrb	r2, [r7, #3]
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d002      	beq.n	800cc0c <USBH_FindInterface+0x4e>
 800cc06:	78fb      	ldrb	r3, [r7, #3]
 800cc08:	2bff      	cmp	r3, #255	@ 0xff
 800cc0a:	d111      	bne.n	800cc30 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cc10:	78ba      	ldrb	r2, [r7, #2]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d002      	beq.n	800cc1c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cc16:	78bb      	ldrb	r3, [r7, #2]
 800cc18:	2bff      	cmp	r3, #255	@ 0xff
 800cc1a:	d109      	bne.n	800cc30 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cc20:	787a      	ldrb	r2, [r7, #1]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d002      	beq.n	800cc2c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cc26:	787b      	ldrb	r3, [r7, #1]
 800cc28:	2bff      	cmp	r3, #255	@ 0xff
 800cc2a:	d101      	bne.n	800cc30 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800cc2c:	7dfb      	ldrb	r3, [r7, #23]
 800cc2e:	e006      	b.n	800cc3e <USBH_FindInterface+0x80>
    }
    if_ix++;
 800cc30:	7dfb      	ldrb	r3, [r7, #23]
 800cc32:	3301      	adds	r3, #1
 800cc34:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cc36:	7dfb      	ldrb	r3, [r7, #23]
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d9d6      	bls.n	800cbea <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800cc3c:	23ff      	movs	r3, #255	@ 0xff
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	371c      	adds	r7, #28
 800cc42:	46bd      	mov	sp, r7
 800cc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc48:	4770      	bx	lr

0800cc4a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800cc4a:	b580      	push	{r7, lr}
 800cc4c:	b082      	sub	sp, #8
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f006 f9f2 	bl	801303c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800cc58:	2101      	movs	r1, #1
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f006 fb0b 	bl	8013276 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800cc60:	2300      	movs	r3, #0
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3708      	adds	r7, #8
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
	...

0800cc6c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b088      	sub	sp, #32
 800cc70:	af04      	add	r7, sp, #16
 800cc72:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cc74:	2302      	movs	r3, #2
 800cc76:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d102      	bne.n	800cc8e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2203      	movs	r2, #3
 800cc8c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	2b0b      	cmp	r3, #11
 800cc96:	f200 8244 	bhi.w	800d122 <USBH_Process+0x4b6>
 800cc9a:	a201      	add	r2, pc, #4	@ (adr r2, 800cca0 <USBH_Process+0x34>)
 800cc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca0:	0800ccd1 	.word	0x0800ccd1
 800cca4:	0800cd1f 	.word	0x0800cd1f
 800cca8:	0800cda3 	.word	0x0800cda3
 800ccac:	0800d0a1 	.word	0x0800d0a1
 800ccb0:	0800d123 	.word	0x0800d123
 800ccb4:	0800ce5f 	.word	0x0800ce5f
 800ccb8:	0800d02b 	.word	0x0800d02b
 800ccbc:	0800ceb1 	.word	0x0800ceb1
 800ccc0:	0800ceed 	.word	0x0800ceed
 800ccc4:	0800cf25 	.word	0x0800cf25
 800ccc8:	0800cf83 	.word	0x0800cf83
 800cccc:	0800d089 	.word	0x0800d089
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800ccd6:	b2db      	uxtb	r3, r3
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	f000 8224 	beq.w	800d126 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2201      	movs	r2, #1
 800cce2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800cce4:	20c8      	movs	r0, #200	@ 0xc8
 800cce6:	f006 fb10 	bl	801330a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f006 fa03 	bl	80130f6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2201      	movs	r2, #1
 800cd04:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800cd14:	2300      	movs	r3, #0
 800cd16:	2200      	movs	r2, #0
 800cd18:	f001 ff3c 	bl	800eb94 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800cd1c:	e203      	b.n	800d126 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d107      	bne.n	800cd38 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2202      	movs	r2, #2
 800cd34:	701a      	strb	r2, [r3, #0]
 800cd36:	e025      	b.n	800cd84 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800cd3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cd42:	d914      	bls.n	800cd6e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	b2da      	uxtb	r2, r3
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800cd5a:	2b03      	cmp	r3, #3
 800cd5c:	d903      	bls.n	800cd66 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	220d      	movs	r2, #13
 800cd62:	701a      	strb	r2, [r3, #0]
 800cd64:	e00e      	b.n	800cd84 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	701a      	strb	r2, [r3, #0]
 800cd6c:	e00a      	b.n	800cd84 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800cd74:	f103 020a 	add.w	r2, r3, #10
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800cd7e:	200a      	movs	r0, #10
 800cd80:	f006 fac3 	bl	801330a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2201      	movs	r2, #1
 800cd88:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800cd98:	2300      	movs	r3, #0
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	f001 fefa 	bl	800eb94 <osMessageQueuePut>
#endif
#endif
      break;
 800cda0:	e1c8      	b.n	800d134 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d005      	beq.n	800cdb8 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cdb2:	2104      	movs	r1, #4
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800cdb8:	2064      	movs	r0, #100	@ 0x64
 800cdba:	f006 faa6 	bl	801330a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f006 f972 	bl	80130a8 <USBH_LL_GetSpeed>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2205      	movs	r2, #5
 800cdd2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f001 fc8d 	bl	800e6f6 <USBH_AllocPipe>
 800cddc:	4603      	mov	r3, r0
 800cdde:	461a      	mov	r2, r3
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800cde4:	2180      	movs	r1, #128	@ 0x80
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f001 fc85 	bl	800e6f6 <USBH_AllocPipe>
 800cdec:	4603      	mov	r3, r0
 800cdee:	461a      	mov	r2, r3
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	7919      	ldrb	r1, [r3, #4]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ce04:	687a      	ldr	r2, [r7, #4]
 800ce06:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ce08:	9202      	str	r2, [sp, #8]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	9201      	str	r2, [sp, #4]
 800ce0e:	9300      	str	r3, [sp, #0]
 800ce10:	4603      	mov	r3, r0
 800ce12:	2280      	movs	r2, #128	@ 0x80
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f001 fc3f 	bl	800e698 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	7959      	ldrb	r1, [r3, #5]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ce2a:	687a      	ldr	r2, [r7, #4]
 800ce2c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ce2e:	9202      	str	r2, [sp, #8]
 800ce30:	2200      	movs	r2, #0
 800ce32:	9201      	str	r2, [sp, #4]
 800ce34:	9300      	str	r3, [sp, #0]
 800ce36:	4603      	mov	r3, r0
 800ce38:	2200      	movs	r2, #0
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f001 fc2c 	bl	800e698 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2201      	movs	r2, #1
 800ce44:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ce54:	2300      	movs	r3, #0
 800ce56:	2200      	movs	r2, #0
 800ce58:	f001 fe9c 	bl	800eb94 <osMessageQueuePut>
#endif
#endif
      break;
 800ce5c:	e16a      	b.n	800d134 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 f96e 	bl	800d140 <USBH_HandleEnum>
 800ce64:	4603      	mov	r3, r0
 800ce66:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ce68:	7bbb      	ldrb	r3, [r7, #14]
 800ce6a:	b2db      	uxtb	r3, r3
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	f040 815c 	bne.w	800d12a <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2200      	movs	r2, #0
 800ce76:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800ce80:	2b01      	cmp	r3, #1
 800ce82:	d103      	bne.n	800ce8c <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2208      	movs	r2, #8
 800ce88:	701a      	strb	r2, [r3, #0]
 800ce8a:	e002      	b.n	800ce92 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2207      	movs	r2, #7
 800ce90:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2205      	movs	r2, #5
 800ce96:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800cea6:	2300      	movs	r3, #0
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f001 fe73 	bl	800eb94 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800ceae:	e13c      	b.n	800d12a <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	f000 8139 	beq.w	800d12e <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cec2:	2101      	movs	r1, #1
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2208      	movs	r2, #8
 800cecc:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2205      	movs	r2, #5
 800ced2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800cee2:	2300      	movs	r3, #0
 800cee4:	2200      	movs	r2, #0
 800cee6:	f001 fe55 	bl	800eb94 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800ceea:	e120      	b.n	800d12e <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800cef2:	4619      	mov	r1, r3
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f000 fd12 	bl	800d91e <USBH_SetCfg>
 800cefa:	4603      	mov	r3, r0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d102      	bne.n	800cf06 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2209      	movs	r2, #9
 800cf04:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2201      	movs	r2, #1
 800cf0a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	f001 fe39 	bl	800eb94 <osMessageQueuePut>
#endif
#endif
      break;
 800cf22:	e107      	b.n	800d134 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800cf2a:	f003 0320 	and.w	r3, r3, #32
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d015      	beq.n	800cf5e <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800cf32:	2101      	movs	r1, #1
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f000 fd15 	bl	800d964 <USBH_SetFeature>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cf3e:	7bbb      	ldrb	r3, [r7, #14]
 800cf40:	b2db      	uxtb	r3, r3
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d103      	bne.n	800cf4e <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	220a      	movs	r2, #10
 800cf4a:	701a      	strb	r2, [r3, #0]
 800cf4c:	e00a      	b.n	800cf64 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800cf4e:	7bbb      	ldrb	r3, [r7, #14]
 800cf50:	b2db      	uxtb	r3, r3
 800cf52:	2b03      	cmp	r3, #3
 800cf54:	d106      	bne.n	800cf64 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	220a      	movs	r2, #10
 800cf5a:	701a      	strb	r2, [r3, #0]
 800cf5c:	e002      	b.n	800cf64 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	220a      	movs	r2, #10
 800cf62:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2201      	movs	r2, #1
 800cf68:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800cf78:	2300      	movs	r3, #0
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f001 fe0a 	bl	800eb94 <osMessageQueuePut>
#endif
#endif
      break;
 800cf80:	e0d8      	b.n	800d134 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d03f      	beq.n	800d00c <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cf94:	2300      	movs	r3, #0
 800cf96:	73fb      	strb	r3, [r7, #15]
 800cf98:	e016      	b.n	800cfc8 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cf9a:	7bfa      	ldrb	r2, [r7, #15]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	32de      	adds	r2, #222	@ 0xde
 800cfa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfa4:	791a      	ldrb	r2, [r3, #4]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d108      	bne.n	800cfc2 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800cfb0:	7bfa      	ldrb	r2, [r7, #15]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	32de      	adds	r2, #222	@ 0xde
 800cfb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800cfc0:	e005      	b.n	800cfce <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cfc2:	7bfb      	ldrb	r3, [r7, #15]
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	73fb      	strb	r3, [r7, #15]
 800cfc8:	7bfb      	ldrb	r3, [r7, #15]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d0e5      	beq.n	800cf9a <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d016      	beq.n	800d006 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cfde:	689b      	ldr	r3, [r3, #8]
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	4798      	blx	r3
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d109      	bne.n	800cffe <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2206      	movs	r2, #6
 800cfee:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cff6:	2103      	movs	r1, #3
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	4798      	blx	r3
 800cffc:	e006      	b.n	800d00c <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	220d      	movs	r2, #13
 800d002:	701a      	strb	r2, [r3, #0]
 800d004:	e002      	b.n	800d00c <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	220d      	movs	r2, #13
 800d00a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2205      	movs	r2, #5
 800d010:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d020:	2300      	movs	r3, #0
 800d022:	2200      	movs	r2, #0
 800d024:	f001 fdb6 	bl	800eb94 <osMessageQueuePut>
#endif
#endif
      break;
 800d028:	e084      	b.n	800d134 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d030:	2b00      	cmp	r3, #0
 800d032:	d017      	beq.n	800d064 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d03a:	691b      	ldr	r3, [r3, #16]
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	4798      	blx	r3
 800d040:	4603      	mov	r3, r0
 800d042:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d044:	7bbb      	ldrb	r3, [r7, #14]
 800d046:	b2db      	uxtb	r3, r3
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d103      	bne.n	800d054 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	220b      	movs	r2, #11
 800d050:	701a      	strb	r2, [r3, #0]
 800d052:	e00a      	b.n	800d06a <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800d054:	7bbb      	ldrb	r3, [r7, #14]
 800d056:	b2db      	uxtb	r3, r3
 800d058:	2b02      	cmp	r3, #2
 800d05a:	d106      	bne.n	800d06a <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	220d      	movs	r2, #13
 800d060:	701a      	strb	r2, [r3, #0]
 800d062:	e002      	b.n	800d06a <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	220d      	movs	r2, #13
 800d068:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2205      	movs	r2, #5
 800d06e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d07e:	2300      	movs	r3, #0
 800d080:	2200      	movs	r2, #0
 800d082:	f001 fd87 	bl	800eb94 <osMessageQueuePut>
#endif
#endif
      break;
 800d086:	e055      	b.n	800d134 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d04f      	beq.n	800d132 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d098:	695b      	ldr	r3, [r3, #20]
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	4798      	blx	r3
      }
      break;
 800d09e:	e048      	b.n	800d132 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f7ff fccf 	bl	800ca4c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d009      	beq.n	800d0cc <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d0be:	68db      	ldr	r3, [r3, #12]
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d005      	beq.n	800d0e2 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d0dc:	2105      	movs	r1, #5
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800d0e8:	b2db      	uxtb	r3, r3
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	d107      	bne.n	800d0fe <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f7ff fda7 	bl	800cc4a <USBH_Start>
 800d0fc:	e002      	b.n	800d104 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f005 ff9c 	bl	801303c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2201      	movs	r2, #1
 800d108:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d118:	2300      	movs	r3, #0
 800d11a:	2200      	movs	r2, #0
 800d11c:	f001 fd3a 	bl	800eb94 <osMessageQueuePut>
#endif
#endif
      break;
 800d120:	e008      	b.n	800d134 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800d122:	bf00      	nop
 800d124:	e006      	b.n	800d134 <USBH_Process+0x4c8>
      break;
 800d126:	bf00      	nop
 800d128:	e004      	b.n	800d134 <USBH_Process+0x4c8>
      break;
 800d12a:	bf00      	nop
 800d12c:	e002      	b.n	800d134 <USBH_Process+0x4c8>
    break;
 800d12e:	bf00      	nop
 800d130:	e000      	b.n	800d134 <USBH_Process+0x4c8>
      break;
 800d132:	bf00      	nop
  }
  return USBH_OK;
 800d134:	2300      	movs	r3, #0
}
 800d136:	4618      	mov	r0, r3
 800d138:	3710      	adds	r7, #16
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop

0800d140 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b088      	sub	sp, #32
 800d144:	af04      	add	r7, sp, #16
 800d146:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d148:	2301      	movs	r3, #1
 800d14a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d14c:	2301      	movs	r3, #1
 800d14e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	785b      	ldrb	r3, [r3, #1]
 800d154:	2b07      	cmp	r3, #7
 800d156:	f200 8204 	bhi.w	800d562 <USBH_HandleEnum+0x422>
 800d15a:	a201      	add	r2, pc, #4	@ (adr r2, 800d160 <USBH_HandleEnum+0x20>)
 800d15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d160:	0800d181 	.word	0x0800d181
 800d164:	0800d23b 	.word	0x0800d23b
 800d168:	0800d2a5 	.word	0x0800d2a5
 800d16c:	0800d32f 	.word	0x0800d32f
 800d170:	0800d399 	.word	0x0800d399
 800d174:	0800d409 	.word	0x0800d409
 800d178:	0800d4a5 	.word	0x0800d4a5
 800d17c:	0800d523 	.word	0x0800d523
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d180:	2108      	movs	r1, #8
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 fae8 	bl	800d758 <USBH_Get_DevDesc>
 800d188:	4603      	mov	r3, r0
 800d18a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d18c:	7bbb      	ldrb	r3, [r7, #14]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d12e      	bne.n	800d1f0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2201      	movs	r2, #1
 800d1a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	7919      	ldrb	r1, [r3, #4]
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d1b6:	9202      	str	r2, [sp, #8]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	9201      	str	r2, [sp, #4]
 800d1bc:	9300      	str	r3, [sp, #0]
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2280      	movs	r2, #128	@ 0x80
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f001 fa68 	bl	800e698 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	7959      	ldrb	r1, [r3, #5]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d1dc:	9202      	str	r2, [sp, #8]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	9201      	str	r2, [sp, #4]
 800d1e2:	9300      	str	r3, [sp, #0]
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f001 fa55 	bl	800e698 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d1ee:	e1ba      	b.n	800d566 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d1f0:	7bbb      	ldrb	r3, [r7, #14]
 800d1f2:	2b03      	cmp	r3, #3
 800d1f4:	f040 81b7 	bne.w	800d566 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d1fe:	3301      	adds	r3, #1
 800d200:	b2da      	uxtb	r2, r3
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d20e:	2b03      	cmp	r3, #3
 800d210:	d903      	bls.n	800d21a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	220d      	movs	r2, #13
 800d216:	701a      	strb	r2, [r3, #0]
      break;
 800d218:	e1a5      	b.n	800d566 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	795b      	ldrb	r3, [r3, #5]
 800d21e:	4619      	mov	r1, r3
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f001 fa89 	bl	800e738 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	791b      	ldrb	r3, [r3, #4]
 800d22a:	4619      	mov	r1, r3
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f001 fa83 	bl	800e738 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2200      	movs	r2, #0
 800d236:	701a      	strb	r2, [r3, #0]
      break;
 800d238:	e195      	b.n	800d566 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d23a:	2112      	movs	r1, #18
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 fa8b 	bl	800d758 <USBH_Get_DevDesc>
 800d242:	4603      	mov	r3, r0
 800d244:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d246:	7bbb      	ldrb	r3, [r7, #14]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d103      	bne.n	800d254 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2202      	movs	r2, #2
 800d250:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d252:	e18a      	b.n	800d56a <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d254:	7bbb      	ldrb	r3, [r7, #14]
 800d256:	2b03      	cmp	r3, #3
 800d258:	f040 8187 	bne.w	800d56a <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d262:	3301      	adds	r3, #1
 800d264:	b2da      	uxtb	r2, r3
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d272:	2b03      	cmp	r3, #3
 800d274:	d903      	bls.n	800d27e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	220d      	movs	r2, #13
 800d27a:	701a      	strb	r2, [r3, #0]
      break;
 800d27c:	e175      	b.n	800d56a <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	795b      	ldrb	r3, [r3, #5]
 800d282:	4619      	mov	r1, r3
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f001 fa57 	bl	800e738 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	791b      	ldrb	r3, [r3, #4]
 800d28e:	4619      	mov	r1, r3
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f001 fa51 	bl	800e738 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2200      	movs	r2, #0
 800d29a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	701a      	strb	r2, [r3, #0]
      break;
 800d2a2:	e162      	b.n	800d56a <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d2a4:	2101      	movs	r1, #1
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f000 fb15 	bl	800d8d6 <USBH_SetAddress>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d2b0:	7bbb      	ldrb	r3, [r7, #14]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d130      	bne.n	800d318 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800d2b6:	2002      	movs	r0, #2
 800d2b8:	f006 f827 	bl	801330a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2201      	movs	r2, #1
 800d2c0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2203      	movs	r2, #3
 800d2c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	7919      	ldrb	r1, [r3, #4]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d2da:	687a      	ldr	r2, [r7, #4]
 800d2dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d2de:	9202      	str	r2, [sp, #8]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	9201      	str	r2, [sp, #4]
 800d2e4:	9300      	str	r3, [sp, #0]
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	2280      	movs	r2, #128	@ 0x80
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f001 f9d4 	bl	800e698 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	7959      	ldrb	r1, [r3, #5]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d304:	9202      	str	r2, [sp, #8]
 800d306:	2200      	movs	r2, #0
 800d308:	9201      	str	r2, [sp, #4]
 800d30a:	9300      	str	r3, [sp, #0]
 800d30c:	4603      	mov	r3, r0
 800d30e:	2200      	movs	r2, #0
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f001 f9c1 	bl	800e698 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d316:	e12a      	b.n	800d56e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d318:	7bbb      	ldrb	r3, [r7, #14]
 800d31a:	2b03      	cmp	r3, #3
 800d31c:	f040 8127 	bne.w	800d56e <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	220d      	movs	r2, #13
 800d324:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2200      	movs	r2, #0
 800d32a:	705a      	strb	r2, [r3, #1]
      break;
 800d32c:	e11f      	b.n	800d56e <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d32e:	2109      	movs	r1, #9
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f000 fa3d 	bl	800d7b0 <USBH_Get_CfgDesc>
 800d336:	4603      	mov	r3, r0
 800d338:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d33a:	7bbb      	ldrb	r3, [r7, #14]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d103      	bne.n	800d348 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2204      	movs	r2, #4
 800d344:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d346:	e114      	b.n	800d572 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d348:	7bbb      	ldrb	r3, [r7, #14]
 800d34a:	2b03      	cmp	r3, #3
 800d34c:	f040 8111 	bne.w	800d572 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d356:	3301      	adds	r3, #1
 800d358:	b2da      	uxtb	r2, r3
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d366:	2b03      	cmp	r3, #3
 800d368:	d903      	bls.n	800d372 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	220d      	movs	r2, #13
 800d36e:	701a      	strb	r2, [r3, #0]
      break;
 800d370:	e0ff      	b.n	800d572 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	795b      	ldrb	r3, [r3, #5]
 800d376:	4619      	mov	r1, r3
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f001 f9dd 	bl	800e738 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	791b      	ldrb	r3, [r3, #4]
 800d382:	4619      	mov	r1, r3
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f001 f9d7 	bl	800e738 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2200      	movs	r2, #0
 800d38e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2200      	movs	r2, #0
 800d394:	701a      	strb	r2, [r3, #0]
      break;
 800d396:	e0ec      	b.n	800d572 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800d39e:	4619      	mov	r1, r3
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 fa05 	bl	800d7b0 <USBH_Get_CfgDesc>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d3aa:	7bbb      	ldrb	r3, [r7, #14]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d103      	bne.n	800d3b8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2205      	movs	r2, #5
 800d3b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d3b6:	e0de      	b.n	800d576 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d3b8:	7bbb      	ldrb	r3, [r7, #14]
 800d3ba:	2b03      	cmp	r3, #3
 800d3bc:	f040 80db 	bne.w	800d576 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	b2da      	uxtb	r2, r3
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d3d6:	2b03      	cmp	r3, #3
 800d3d8:	d903      	bls.n	800d3e2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	220d      	movs	r2, #13
 800d3de:	701a      	strb	r2, [r3, #0]
      break;
 800d3e0:	e0c9      	b.n	800d576 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	795b      	ldrb	r3, [r3, #5]
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f001 f9a5 	bl	800e738 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	791b      	ldrb	r3, [r3, #4]
 800d3f2:	4619      	mov	r1, r3
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f001 f99f 	bl	800e738 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2200      	movs	r2, #0
 800d404:	701a      	strb	r2, [r3, #0]
      break;
 800d406:	e0b6      	b.n	800d576 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d036      	beq.n	800d480 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d41e:	23ff      	movs	r3, #255	@ 0xff
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f000 f9ef 	bl	800d804 <USBH_Get_StringDesc>
 800d426:	4603      	mov	r3, r0
 800d428:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d42a:	7bbb      	ldrb	r3, [r7, #14]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d111      	bne.n	800d454 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2206      	movs	r2, #6
 800d434:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2205      	movs	r2, #5
 800d43a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d44a:	2300      	movs	r3, #0
 800d44c:	2200      	movs	r2, #0
 800d44e:	f001 fba1 	bl	800eb94 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d452:	e092      	b.n	800d57a <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d454:	7bbb      	ldrb	r3, [r7, #14]
 800d456:	2b03      	cmp	r3, #3
 800d458:	f040 808f 	bne.w	800d57a <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2206      	movs	r2, #6
 800d460:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2205      	movs	r2, #5
 800d466:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d476:	2300      	movs	r3, #0
 800d478:	2200      	movs	r2, #0
 800d47a:	f001 fb8b 	bl	800eb94 <osMessageQueuePut>
      break;
 800d47e:	e07c      	b.n	800d57a <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2206      	movs	r2, #6
 800d484:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2205      	movs	r2, #5
 800d48a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d49a:	2300      	movs	r3, #0
 800d49c:	2200      	movs	r2, #0
 800d49e:	f001 fb79 	bl	800eb94 <osMessageQueuePut>
      break;
 800d4a2:	e06a      	b.n	800d57a <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d027      	beq.n	800d4fe <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d4ba:	23ff      	movs	r3, #255	@ 0xff
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 f9a1 	bl	800d804 <USBH_Get_StringDesc>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d4c6:	7bbb      	ldrb	r3, [r7, #14]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d103      	bne.n	800d4d4 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2207      	movs	r2, #7
 800d4d0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d4d2:	e054      	b.n	800d57e <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d4d4:	7bbb      	ldrb	r3, [r7, #14]
 800d4d6:	2b03      	cmp	r3, #3
 800d4d8:	d151      	bne.n	800d57e <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2207      	movs	r2, #7
 800d4de:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2205      	movs	r2, #5
 800d4e4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f001 fb4c 	bl	800eb94 <osMessageQueuePut>
      break;
 800d4fc:	e03f      	b.n	800d57e <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2207      	movs	r2, #7
 800d502:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2205      	movs	r2, #5
 800d508:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d518:	2300      	movs	r3, #0
 800d51a:	2200      	movs	r2, #0
 800d51c:	f001 fb3a 	bl	800eb94 <osMessageQueuePut>
      break;
 800d520:	e02d      	b.n	800d57e <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d017      	beq.n	800d55c <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d538:	23ff      	movs	r3, #255	@ 0xff
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f000 f962 	bl	800d804 <USBH_Get_StringDesc>
 800d540:	4603      	mov	r3, r0
 800d542:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d544:	7bbb      	ldrb	r3, [r7, #14]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d102      	bne.n	800d550 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d54a:	2300      	movs	r3, #0
 800d54c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d54e:	e018      	b.n	800d582 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d550:	7bbb      	ldrb	r3, [r7, #14]
 800d552:	2b03      	cmp	r3, #3
 800d554:	d115      	bne.n	800d582 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800d556:	2300      	movs	r3, #0
 800d558:	73fb      	strb	r3, [r7, #15]
      break;
 800d55a:	e012      	b.n	800d582 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 800d55c:	2300      	movs	r3, #0
 800d55e:	73fb      	strb	r3, [r7, #15]
      break;
 800d560:	e00f      	b.n	800d582 <USBH_HandleEnum+0x442>

    default:
      break;
 800d562:	bf00      	nop
 800d564:	e00e      	b.n	800d584 <USBH_HandleEnum+0x444>
      break;
 800d566:	bf00      	nop
 800d568:	e00c      	b.n	800d584 <USBH_HandleEnum+0x444>
      break;
 800d56a:	bf00      	nop
 800d56c:	e00a      	b.n	800d584 <USBH_HandleEnum+0x444>
      break;
 800d56e:	bf00      	nop
 800d570:	e008      	b.n	800d584 <USBH_HandleEnum+0x444>
      break;
 800d572:	bf00      	nop
 800d574:	e006      	b.n	800d584 <USBH_HandleEnum+0x444>
      break;
 800d576:	bf00      	nop
 800d578:	e004      	b.n	800d584 <USBH_HandleEnum+0x444>
      break;
 800d57a:	bf00      	nop
 800d57c:	e002      	b.n	800d584 <USBH_HandleEnum+0x444>
      break;
 800d57e:	bf00      	nop
 800d580:	e000      	b.n	800d584 <USBH_HandleEnum+0x444>
      break;
 800d582:	bf00      	nop
  }
  return Status;
 800d584:	7bfb      	ldrb	r3, [r7, #15]
}
 800d586:	4618      	mov	r0, r3
 800d588:	3710      	adds	r7, #16
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop

0800d590 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d590:	b480      	push	{r7}
 800d592:	b083      	sub	sp, #12
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	683a      	ldr	r2, [r7, #0]
 800d59e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800d5a2:	bf00      	nop
 800d5a4:	370c      	adds	r7, #12
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr

0800d5ae <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d5ae:	b580      	push	{r7, lr}
 800d5b0:	b082      	sub	sp, #8
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d5bc:	1c5a      	adds	r2, r3, #1
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f000 f804 	bl	800d5d2 <USBH_HandleSof>
}
 800d5ca:	bf00      	nop
 800d5cc:	3708      	adds	r7, #8
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	b082      	sub	sp, #8
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	b2db      	uxtb	r3, r3
 800d5e0:	2b0b      	cmp	r3, #11
 800d5e2:	d10a      	bne.n	800d5fa <USBH_HandleSof+0x28>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d005      	beq.n	800d5fa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d5f4:	699b      	ldr	r3, [r3, #24]
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	4798      	blx	r3
  }
}
 800d5fa:	bf00      	nop
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d602:	b580      	push	{r7, lr}
 800d604:	b082      	sub	sp, #8
 800d606:	af00      	add	r7, sp, #0
 800d608:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2201      	movs	r2, #1
 800d60e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2201      	movs	r2, #1
 800d616:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d626:	2300      	movs	r3, #0
 800d628:	2200      	movs	r2, #0
 800d62a:	f001 fab3 	bl	800eb94 <osMessageQueuePut>
#endif
#endif

  return;
 800d62e:	bf00      	nop
}
 800d630:	3708      	adds	r7, #8
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}

0800d636 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d636:	b480      	push	{r7}
 800d638:	b083      	sub	sp, #12
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2200      	movs	r2, #0
 800d642:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800d646:	bf00      	nop
}
 800d648:	370c      	adds	r7, #12
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr

0800d652 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d652:	b580      	push	{r7, lr}
 800d654:	b082      	sub	sp, #8
 800d656:	af00      	add	r7, sp, #0
 800d658:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2201      	movs	r2, #1
 800d65e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2200      	movs	r2, #0
 800d666:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2200      	movs	r2, #0
 800d66e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2201      	movs	r2, #1
 800d676:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d686:	2300      	movs	r3, #0
 800d688:	2200      	movs	r2, #0
 800d68a:	f001 fa83 	bl	800eb94 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d68e:	2300      	movs	r3, #0
}
 800d690:	4618      	mov	r0, r3
 800d692:	3708      	adds	r7, #8
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}

0800d698 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f005 fcda 	bl	8013072 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	791b      	ldrb	r3, [r3, #4]
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f001 f837 	bl	800e738 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	795b      	ldrb	r3, [r3, #5]
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f001 f831 	bl	800e738 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2201      	movs	r2, #1
 800d6da:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	f001 fa51 	bl	800eb94 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d6f2:	2300      	movs	r3, #0
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3708      	adds	r7, #8
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b084      	sub	sp, #16
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d710:	f04f 33ff 	mov.w	r3, #4294967295
 800d714:	2200      	movs	r2, #0
 800d716:	f001 fa9d 	bl	800ec54 <osMessageQueueGet>
 800d71a:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d1f0      	bne.n	800d704 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f7ff faa2 	bl	800cc6c <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d728:	e7ec      	b.n	800d704 <USBH_Process_OS+0x8>

0800d72a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b082      	sub	sp, #8
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2201      	movs	r2, #1
 800d736:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d746:	2300      	movs	r3, #0
 800d748:	2200      	movs	r2, #0
 800d74a:	f001 fa23 	bl	800eb94 <osMessageQueuePut>
#endif

  return USBH_OK;
 800d74e:	2300      	movs	r3, #0
}
 800d750:	4618      	mov	r0, r3
 800d752:	3708      	adds	r7, #8
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b086      	sub	sp, #24
 800d75c:	af02      	add	r7, sp, #8
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	460b      	mov	r3, r1
 800d762:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800d764:	887b      	ldrh	r3, [r7, #2]
 800d766:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d76a:	d901      	bls.n	800d770 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d76c:	2303      	movs	r3, #3
 800d76e:	e01b      	b.n	800d7a8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d776:	887b      	ldrh	r3, [r7, #2]
 800d778:	9300      	str	r3, [sp, #0]
 800d77a:	4613      	mov	r3, r2
 800d77c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d780:	2100      	movs	r1, #0
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f000 f872 	bl	800d86c <USBH_GetDescriptor>
 800d788:	4603      	mov	r3, r0
 800d78a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800d78c:	7bfb      	ldrb	r3, [r7, #15]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d109      	bne.n	800d7a6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d798:	887a      	ldrh	r2, [r7, #2]
 800d79a:	4619      	mov	r1, r3
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f000 f929 	bl	800d9f4 <USBH_ParseDevDesc>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d7a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3710      	adds	r7, #16
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b086      	sub	sp, #24
 800d7b4:	af02      	add	r7, sp, #8
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	331c      	adds	r3, #28
 800d7c0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800d7c2:	887b      	ldrh	r3, [r7, #2]
 800d7c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d7c8:	d901      	bls.n	800d7ce <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d7ca:	2303      	movs	r3, #3
 800d7cc:	e016      	b.n	800d7fc <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d7ce:	887b      	ldrh	r3, [r7, #2]
 800d7d0:	9300      	str	r3, [sp, #0]
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d7d8:	2100      	movs	r1, #0
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f000 f846 	bl	800d86c <USBH_GetDescriptor>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800d7e4:	7bfb      	ldrb	r3, [r7, #15]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d107      	bne.n	800d7fa <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800d7ea:	887b      	ldrh	r3, [r7, #2]
 800d7ec:	461a      	mov	r2, r3
 800d7ee:	68b9      	ldr	r1, [r7, #8]
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f000 f9af 	bl	800db54 <USBH_ParseCfgDesc>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d7fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3710      	adds	r7, #16
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b088      	sub	sp, #32
 800d808:	af02      	add	r7, sp, #8
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	607a      	str	r2, [r7, #4]
 800d80e:	461a      	mov	r2, r3
 800d810:	460b      	mov	r3, r1
 800d812:	72fb      	strb	r3, [r7, #11]
 800d814:	4613      	mov	r3, r2
 800d816:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800d818:	893b      	ldrh	r3, [r7, #8]
 800d81a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d81e:	d802      	bhi.n	800d826 <USBH_Get_StringDesc+0x22>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d101      	bne.n	800d82a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d826:	2303      	movs	r3, #3
 800d828:	e01c      	b.n	800d864 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800d82a:	7afb      	ldrb	r3, [r7, #11]
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800d832:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d83a:	893b      	ldrh	r3, [r7, #8]
 800d83c:	9300      	str	r3, [sp, #0]
 800d83e:	460b      	mov	r3, r1
 800d840:	2100      	movs	r1, #0
 800d842:	68f8      	ldr	r0, [r7, #12]
 800d844:	f000 f812 	bl	800d86c <USBH_GetDescriptor>
 800d848:	4603      	mov	r3, r0
 800d84a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800d84c:	7dfb      	ldrb	r3, [r7, #23]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d107      	bne.n	800d862 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d858:	893a      	ldrh	r2, [r7, #8]
 800d85a:	6879      	ldr	r1, [r7, #4]
 800d85c:	4618      	mov	r0, r3
 800d85e:	f000 fb8d 	bl	800df7c <USBH_ParseStringDesc>
  }

  return status;
 800d862:	7dfb      	ldrb	r3, [r7, #23]
}
 800d864:	4618      	mov	r0, r3
 800d866:	3718      	adds	r7, #24
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b084      	sub	sp, #16
 800d870:	af00      	add	r7, sp, #0
 800d872:	60f8      	str	r0, [r7, #12]
 800d874:	607b      	str	r3, [r7, #4]
 800d876:	460b      	mov	r3, r1
 800d878:	72fb      	strb	r3, [r7, #11]
 800d87a:	4613      	mov	r3, r2
 800d87c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	789b      	ldrb	r3, [r3, #2]
 800d882:	2b01      	cmp	r3, #1
 800d884:	d11c      	bne.n	800d8c0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d886:	7afb      	ldrb	r3, [r7, #11]
 800d888:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d88c:	b2da      	uxtb	r2, r3
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2206      	movs	r2, #6
 800d896:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	893a      	ldrh	r2, [r7, #8]
 800d89c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d89e:	893b      	ldrh	r3, [r7, #8]
 800d8a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d8a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d8a8:	d104      	bne.n	800d8b4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	f240 4209 	movw	r2, #1033	@ 0x409
 800d8b0:	829a      	strh	r2, [r3, #20]
 800d8b2:	e002      	b.n	800d8ba <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	8b3a      	ldrh	r2, [r7, #24]
 800d8be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d8c0:	8b3b      	ldrh	r3, [r7, #24]
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	6879      	ldr	r1, [r7, #4]
 800d8c6:	68f8      	ldr	r0, [r7, #12]
 800d8c8:	f000 fba5 	bl	800e016 <USBH_CtlReq>
 800d8cc:	4603      	mov	r3, r0
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3710      	adds	r7, #16
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}

0800d8d6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d8d6:	b580      	push	{r7, lr}
 800d8d8:	b082      	sub	sp, #8
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
 800d8de:	460b      	mov	r3, r1
 800d8e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	789b      	ldrb	r3, [r3, #2]
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d10f      	bne.n	800d90a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2205      	movs	r2, #5
 800d8f4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d8f6:	78fb      	ldrb	r3, [r7, #3]
 800d8f8:	b29a      	uxth	r2, r3
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2200      	movs	r2, #0
 800d902:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2200      	movs	r2, #0
 800d908:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d90a:	2200      	movs	r2, #0
 800d90c:	2100      	movs	r1, #0
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f000 fb81 	bl	800e016 <USBH_CtlReq>
 800d914:	4603      	mov	r3, r0
}
 800d916:	4618      	mov	r0, r3
 800d918:	3708      	adds	r7, #8
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}

0800d91e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d91e:	b580      	push	{r7, lr}
 800d920:	b082      	sub	sp, #8
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
 800d926:	460b      	mov	r3, r1
 800d928:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	789b      	ldrb	r3, [r3, #2]
 800d92e:	2b01      	cmp	r3, #1
 800d930:	d10e      	bne.n	800d950 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2200      	movs	r2, #0
 800d936:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2209      	movs	r2, #9
 800d93c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	887a      	ldrh	r2, [r7, #2]
 800d942:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2200      	movs	r2, #0
 800d948:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2200      	movs	r2, #0
 800d94e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d950:	2200      	movs	r2, #0
 800d952:	2100      	movs	r1, #0
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 fb5e 	bl	800e016 <USBH_CtlReq>
 800d95a:	4603      	mov	r3, r0
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	460b      	mov	r3, r1
 800d96e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	789b      	ldrb	r3, [r3, #2]
 800d974:	2b01      	cmp	r3, #1
 800d976:	d10f      	bne.n	800d998 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2200      	movs	r2, #0
 800d97c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2203      	movs	r2, #3
 800d982:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d984:	78fb      	ldrb	r3, [r7, #3]
 800d986:	b29a      	uxth	r2, r3
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2200      	movs	r2, #0
 800d990:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2200      	movs	r2, #0
 800d996:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d998:	2200      	movs	r2, #0
 800d99a:	2100      	movs	r1, #0
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f000 fb3a 	bl	800e016 <USBH_CtlReq>
 800d9a2:	4603      	mov	r3, r0
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3708      	adds	r7, #8
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	789b      	ldrb	r3, [r3, #2]
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	d10f      	bne.n	800d9e0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2202      	movs	r2, #2
 800d9c4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d9d2:	78fb      	ldrb	r3, [r7, #3]
 800d9d4:	b29a      	uxth	r2, r3
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	2100      	movs	r1, #0
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f000 fb16 	bl	800e016 <USBH_CtlReq>
 800d9ea:	4603      	mov	r3, r0
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3708      	adds	r7, #8
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b087      	sub	sp, #28
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	60f8      	str	r0, [r7, #12]
 800d9fc:	60b9      	str	r1, [r7, #8]
 800d9fe:	4613      	mov	r3, r2
 800da00:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800da08:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800da0a:	2300      	movs	r3, #0
 800da0c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d101      	bne.n	800da18 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800da14:	2302      	movs	r3, #2
 800da16:	e094      	b.n	800db42 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	781a      	ldrb	r2, [r3, #0]
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	785a      	ldrb	r2, [r3, #1]
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	3302      	adds	r3, #2
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	461a      	mov	r2, r3
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	3303      	adds	r3, #3
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	021b      	lsls	r3, r3, #8
 800da38:	b29b      	uxth	r3, r3
 800da3a:	4313      	orrs	r3, r2
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	791a      	ldrb	r2, [r3, #4]
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	795a      	ldrb	r2, [r3, #5]
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	799a      	ldrb	r2, [r3, #6]
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	79da      	ldrb	r2, [r3, #7]
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d004      	beq.n	800da76 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800da72:	2b01      	cmp	r3, #1
 800da74:	d11b      	bne.n	800daae <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	79db      	ldrb	r3, [r3, #7]
 800da7a:	2b20      	cmp	r3, #32
 800da7c:	dc0f      	bgt.n	800da9e <USBH_ParseDevDesc+0xaa>
 800da7e:	2b08      	cmp	r3, #8
 800da80:	db0f      	blt.n	800daa2 <USBH_ParseDevDesc+0xae>
 800da82:	3b08      	subs	r3, #8
 800da84:	4a32      	ldr	r2, [pc, #200]	@ (800db50 <USBH_ParseDevDesc+0x15c>)
 800da86:	fa22 f303 	lsr.w	r3, r2, r3
 800da8a:	f003 0301 	and.w	r3, r3, #1
 800da8e:	2b00      	cmp	r3, #0
 800da90:	bf14      	ite	ne
 800da92:	2301      	movne	r3, #1
 800da94:	2300      	moveq	r3, #0
 800da96:	b2db      	uxtb	r3, r3
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d106      	bne.n	800daaa <USBH_ParseDevDesc+0xb6>
 800da9c:	e001      	b.n	800daa2 <USBH_ParseDevDesc+0xae>
 800da9e:	2b40      	cmp	r3, #64	@ 0x40
 800daa0:	d003      	beq.n	800daaa <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	2208      	movs	r2, #8
 800daa6:	71da      	strb	r2, [r3, #7]
        break;
 800daa8:	e000      	b.n	800daac <USBH_ParseDevDesc+0xb8>
        break;
 800daaa:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800daac:	e00e      	b.n	800dacc <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dab4:	2b02      	cmp	r3, #2
 800dab6:	d107      	bne.n	800dac8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	79db      	ldrb	r3, [r3, #7]
 800dabc:	2b08      	cmp	r3, #8
 800dabe:	d005      	beq.n	800dacc <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	2208      	movs	r2, #8
 800dac4:	71da      	strb	r2, [r3, #7]
 800dac6:	e001      	b.n	800dacc <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800dac8:	2303      	movs	r3, #3
 800daca:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800dacc:	88fb      	ldrh	r3, [r7, #6]
 800dace:	2b08      	cmp	r3, #8
 800dad0:	d936      	bls.n	800db40 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	3308      	adds	r3, #8
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	461a      	mov	r2, r3
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	3309      	adds	r3, #9
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	021b      	lsls	r3, r3, #8
 800dae2:	b29b      	uxth	r3, r3
 800dae4:	4313      	orrs	r3, r2
 800dae6:	b29a      	uxth	r2, r3
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	330a      	adds	r3, #10
 800daf0:	781b      	ldrb	r3, [r3, #0]
 800daf2:	461a      	mov	r2, r3
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	330b      	adds	r3, #11
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	021b      	lsls	r3, r3, #8
 800dafc:	b29b      	uxth	r3, r3
 800dafe:	4313      	orrs	r3, r2
 800db00:	b29a      	uxth	r2, r3
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	330c      	adds	r3, #12
 800db0a:	781b      	ldrb	r3, [r3, #0]
 800db0c:	461a      	mov	r2, r3
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	330d      	adds	r3, #13
 800db12:	781b      	ldrb	r3, [r3, #0]
 800db14:	021b      	lsls	r3, r3, #8
 800db16:	b29b      	uxth	r3, r3
 800db18:	4313      	orrs	r3, r2
 800db1a:	b29a      	uxth	r2, r3
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	7b9a      	ldrb	r2, [r3, #14]
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	7bda      	ldrb	r2, [r3, #15]
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	7c1a      	ldrb	r2, [r3, #16]
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	7c5a      	ldrb	r2, [r3, #17]
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800db40:	7dfb      	ldrb	r3, [r7, #23]
}
 800db42:	4618      	mov	r0, r3
 800db44:	371c      	adds	r7, #28
 800db46:	46bd      	mov	sp, r7
 800db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4c:	4770      	bx	lr
 800db4e:	bf00      	nop
 800db50:	01000101 	.word	0x01000101

0800db54 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b08c      	sub	sp, #48	@ 0x30
 800db58:	af00      	add	r7, sp, #0
 800db5a:	60f8      	str	r0, [r7, #12]
 800db5c:	60b9      	str	r1, [r7, #8]
 800db5e:	4613      	mov	r3, r2
 800db60:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800db68:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800db6a:	2300      	movs	r3, #0
 800db6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800db70:	2300      	movs	r3, #0
 800db72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800db76:	2300      	movs	r3, #0
 800db78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d101      	bne.n	800db86 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800db82:	2302      	movs	r3, #2
 800db84:	e0da      	b.n	800dd3c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	781a      	ldrb	r2, [r3, #0]
 800db8e:	6a3b      	ldr	r3, [r7, #32]
 800db90:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	785a      	ldrb	r2, [r3, #1]
 800db96:	6a3b      	ldr	r3, [r7, #32]
 800db98:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	3302      	adds	r3, #2
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	461a      	mov	r2, r3
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	3303      	adds	r3, #3
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	021b      	lsls	r3, r3, #8
 800dbaa:	b29b      	uxth	r3, r3
 800dbac:	4313      	orrs	r3, r2
 800dbae:	b29b      	uxth	r3, r3
 800dbb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dbb4:	bf28      	it	cs
 800dbb6:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800dbba:	b29a      	uxth	r2, r3
 800dbbc:	6a3b      	ldr	r3, [r7, #32]
 800dbbe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	791a      	ldrb	r2, [r3, #4]
 800dbc4:	6a3b      	ldr	r3, [r7, #32]
 800dbc6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	795a      	ldrb	r2, [r3, #5]
 800dbcc:	6a3b      	ldr	r3, [r7, #32]
 800dbce:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	799a      	ldrb	r2, [r3, #6]
 800dbd4:	6a3b      	ldr	r3, [r7, #32]
 800dbd6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	79da      	ldrb	r2, [r3, #7]
 800dbdc:	6a3b      	ldr	r3, [r7, #32]
 800dbde:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	7a1a      	ldrb	r2, [r3, #8]
 800dbe4:	6a3b      	ldr	r3, [r7, #32]
 800dbe6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800dbe8:	6a3b      	ldr	r3, [r7, #32]
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	2b09      	cmp	r3, #9
 800dbee:	d002      	beq.n	800dbf6 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800dbf0:	6a3b      	ldr	r3, [r7, #32]
 800dbf2:	2209      	movs	r2, #9
 800dbf4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800dbf6:	88fb      	ldrh	r3, [r7, #6]
 800dbf8:	2b09      	cmp	r3, #9
 800dbfa:	f240 809d 	bls.w	800dd38 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800dbfe:	2309      	movs	r3, #9
 800dc00:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800dc02:	2300      	movs	r3, #0
 800dc04:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800dc06:	e081      	b.n	800dd0c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800dc08:	f107 0316 	add.w	r3, r7, #22
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc10:	f000 f9e7 	bl	800dfe2 <USBH_GetNextDesc>
 800dc14:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800dc16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc18:	785b      	ldrb	r3, [r3, #1]
 800dc1a:	2b04      	cmp	r3, #4
 800dc1c:	d176      	bne.n	800dd0c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800dc1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	2b09      	cmp	r3, #9
 800dc24:	d002      	beq.n	800dc2c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800dc26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc28:	2209      	movs	r2, #9
 800dc2a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800dc2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc30:	221a      	movs	r2, #26
 800dc32:	fb02 f303 	mul.w	r3, r2, r3
 800dc36:	3308      	adds	r3, #8
 800dc38:	6a3a      	ldr	r2, [r7, #32]
 800dc3a:	4413      	add	r3, r2
 800dc3c:	3302      	adds	r3, #2
 800dc3e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800dc40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc42:	69f8      	ldr	r0, [r7, #28]
 800dc44:	f000 f87e 	bl	800dd44 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800dc52:	e043      	b.n	800dcdc <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800dc54:	f107 0316 	add.w	r3, r7, #22
 800dc58:	4619      	mov	r1, r3
 800dc5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc5c:	f000 f9c1 	bl	800dfe2 <USBH_GetNextDesc>
 800dc60:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800dc62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc64:	785b      	ldrb	r3, [r3, #1]
 800dc66:	2b05      	cmp	r3, #5
 800dc68:	d138      	bne.n	800dcdc <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800dc6a:	69fb      	ldr	r3, [r7, #28]
 800dc6c:	795b      	ldrb	r3, [r3, #5]
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	d113      	bne.n	800dc9a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800dc72:	69fb      	ldr	r3, [r7, #28]
 800dc74:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800dc76:	2b02      	cmp	r3, #2
 800dc78:	d003      	beq.n	800dc82 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800dc7a:	69fb      	ldr	r3, [r7, #28]
 800dc7c:	799b      	ldrb	r3, [r3, #6]
 800dc7e:	2b03      	cmp	r3, #3
 800dc80:	d10b      	bne.n	800dc9a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800dc82:	69fb      	ldr	r3, [r7, #28]
 800dc84:	79db      	ldrb	r3, [r3, #7]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d10b      	bne.n	800dca2 <USBH_ParseCfgDesc+0x14e>
 800dc8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	2b09      	cmp	r3, #9
 800dc90:	d007      	beq.n	800dca2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800dc92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc94:	2209      	movs	r2, #9
 800dc96:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800dc98:	e003      	b.n	800dca2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800dc9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc9c:	2207      	movs	r2, #7
 800dc9e:	701a      	strb	r2, [r3, #0]
 800dca0:	e000      	b.n	800dca4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800dca2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800dca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dca8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800dcac:	3201      	adds	r2, #1
 800dcae:	00d2      	lsls	r2, r2, #3
 800dcb0:	211a      	movs	r1, #26
 800dcb2:	fb01 f303 	mul.w	r3, r1, r3
 800dcb6:	4413      	add	r3, r2
 800dcb8:	3308      	adds	r3, #8
 800dcba:	6a3a      	ldr	r2, [r7, #32]
 800dcbc:	4413      	add	r3, r2
 800dcbe:	3304      	adds	r3, #4
 800dcc0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800dcc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dcc4:	69b9      	ldr	r1, [r7, #24]
 800dcc6:	68f8      	ldr	r0, [r7, #12]
 800dcc8:	f000 f870 	bl	800ddac <USBH_ParseEPDesc>
 800dccc:	4603      	mov	r3, r0
 800dcce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800dcd2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800dcdc:	69fb      	ldr	r3, [r7, #28]
 800dcde:	791b      	ldrb	r3, [r3, #4]
 800dce0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d204      	bcs.n	800dcf2 <USBH_ParseCfgDesc+0x19e>
 800dce8:	6a3b      	ldr	r3, [r7, #32]
 800dcea:	885a      	ldrh	r2, [r3, #2]
 800dcec:	8afb      	ldrh	r3, [r7, #22]
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d8b0      	bhi.n	800dc54 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800dcf2:	69fb      	ldr	r3, [r7, #28]
 800dcf4:	791b      	ldrb	r3, [r3, #4]
 800dcf6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d201      	bcs.n	800dd02 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800dcfe:	2303      	movs	r3, #3
 800dd00:	e01c      	b.n	800dd3c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800dd02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd06:	3301      	adds	r3, #1
 800dd08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800dd0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd10:	2b01      	cmp	r3, #1
 800dd12:	d805      	bhi.n	800dd20 <USBH_ParseCfgDesc+0x1cc>
 800dd14:	6a3b      	ldr	r3, [r7, #32]
 800dd16:	885a      	ldrh	r2, [r3, #2]
 800dd18:	8afb      	ldrh	r3, [r7, #22]
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	f63f af74 	bhi.w	800dc08 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800dd20:	6a3b      	ldr	r3, [r7, #32]
 800dd22:	791b      	ldrb	r3, [r3, #4]
 800dd24:	2b02      	cmp	r3, #2
 800dd26:	bf28      	it	cs
 800dd28:	2302      	movcs	r3, #2
 800dd2a:	b2db      	uxtb	r3, r3
 800dd2c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d201      	bcs.n	800dd38 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800dd34:	2303      	movs	r3, #3
 800dd36:	e001      	b.n	800dd3c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800dd38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3730      	adds	r7, #48	@ 0x30
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	781a      	ldrb	r2, [r3, #0]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	785a      	ldrb	r2, [r3, #1]
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	789a      	ldrb	r2, [r3, #2]
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	78da      	ldrb	r2, [r3, #3]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	3304      	adds	r3, #4
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	2b02      	cmp	r3, #2
 800dd76:	bf28      	it	cs
 800dd78:	2302      	movcs	r3, #2
 800dd7a:	b2da      	uxtb	r2, r3
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	795a      	ldrb	r2, [r3, #5]
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	799a      	ldrb	r2, [r3, #6]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	79da      	ldrb	r2, [r3, #7]
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	7a1a      	ldrb	r2, [r3, #8]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	721a      	strb	r2, [r3, #8]
}
 800dda0:	bf00      	nop
 800dda2:	370c      	adds	r7, #12
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr

0800ddac <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b087      	sub	sp, #28
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	60f8      	str	r0, [r7, #12]
 800ddb4:	60b9      	str	r1, [r7, #8]
 800ddb6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	781a      	ldrb	r2, [r3, #0]
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	785a      	ldrb	r2, [r3, #1]
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	789a      	ldrb	r2, [r3, #2]
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	78da      	ldrb	r2, [r3, #3]
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	3304      	adds	r3, #4
 800dde0:	781b      	ldrb	r3, [r3, #0]
 800dde2:	461a      	mov	r2, r3
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	3305      	adds	r3, #5
 800dde8:	781b      	ldrb	r3, [r3, #0]
 800ddea:	021b      	lsls	r3, r3, #8
 800ddec:	b29b      	uxth	r3, r3
 800ddee:	4313      	orrs	r3, r2
 800ddf0:	b29a      	uxth	r2, r3
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	799a      	ldrb	r2, [r3, #6]
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	889b      	ldrh	r3, [r3, #4]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d009      	beq.n	800de1a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800de0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800de0e:	d804      	bhi.n	800de1a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800de14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de18:	d901      	bls.n	800de1e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800de1a:	2303      	movs	r3, #3
 800de1c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800de24:	2b00      	cmp	r3, #0
 800de26:	d136      	bne.n	800de96 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	78db      	ldrb	r3, [r3, #3]
 800de2c:	f003 0303 	and.w	r3, r3, #3
 800de30:	2b02      	cmp	r3, #2
 800de32:	d108      	bne.n	800de46 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	889b      	ldrh	r3, [r3, #4]
 800de38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de3c:	f240 8097 	bls.w	800df6e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800de40:	2303      	movs	r3, #3
 800de42:	75fb      	strb	r3, [r7, #23]
 800de44:	e093      	b.n	800df6e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	78db      	ldrb	r3, [r3, #3]
 800de4a:	f003 0303 	and.w	r3, r3, #3
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d107      	bne.n	800de62 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	889b      	ldrh	r3, [r3, #4]
 800de56:	2b40      	cmp	r3, #64	@ 0x40
 800de58:	f240 8089 	bls.w	800df6e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800de5c:	2303      	movs	r3, #3
 800de5e:	75fb      	strb	r3, [r7, #23]
 800de60:	e085      	b.n	800df6e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	78db      	ldrb	r3, [r3, #3]
 800de66:	f003 0303 	and.w	r3, r3, #3
 800de6a:	2b01      	cmp	r3, #1
 800de6c:	d005      	beq.n	800de7a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	78db      	ldrb	r3, [r3, #3]
 800de72:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800de76:	2b03      	cmp	r3, #3
 800de78:	d10a      	bne.n	800de90 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	799b      	ldrb	r3, [r3, #6]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d003      	beq.n	800de8a <USBH_ParseEPDesc+0xde>
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	799b      	ldrb	r3, [r3, #6]
 800de86:	2b10      	cmp	r3, #16
 800de88:	d970      	bls.n	800df6c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800de8a:	2303      	movs	r3, #3
 800de8c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800de8e:	e06d      	b.n	800df6c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800de90:	2303      	movs	r3, #3
 800de92:	75fb      	strb	r3, [r7, #23]
 800de94:	e06b      	b.n	800df6e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	d13c      	bne.n	800df1a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	78db      	ldrb	r3, [r3, #3]
 800dea4:	f003 0303 	and.w	r3, r3, #3
 800dea8:	2b02      	cmp	r3, #2
 800deaa:	d005      	beq.n	800deb8 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	78db      	ldrb	r3, [r3, #3]
 800deb0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d106      	bne.n	800dec6 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	889b      	ldrh	r3, [r3, #4]
 800debc:	2b40      	cmp	r3, #64	@ 0x40
 800debe:	d956      	bls.n	800df6e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dec0:	2303      	movs	r3, #3
 800dec2:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800dec4:	e053      	b.n	800df6e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	78db      	ldrb	r3, [r3, #3]
 800deca:	f003 0303 	and.w	r3, r3, #3
 800dece:	2b01      	cmp	r3, #1
 800ded0:	d10e      	bne.n	800def0 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	799b      	ldrb	r3, [r3, #6]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d007      	beq.n	800deea <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800dede:	2b10      	cmp	r3, #16
 800dee0:	d803      	bhi.n	800deea <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800dee6:	2b40      	cmp	r3, #64	@ 0x40
 800dee8:	d941      	bls.n	800df6e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800deea:	2303      	movs	r3, #3
 800deec:	75fb      	strb	r3, [r7, #23]
 800deee:	e03e      	b.n	800df6e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	78db      	ldrb	r3, [r3, #3]
 800def4:	f003 0303 	and.w	r3, r3, #3
 800def8:	2b03      	cmp	r3, #3
 800defa:	d10b      	bne.n	800df14 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	799b      	ldrb	r3, [r3, #6]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d004      	beq.n	800df0e <USBH_ParseEPDesc+0x162>
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	889b      	ldrh	r3, [r3, #4]
 800df08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800df0c:	d32f      	bcc.n	800df6e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800df0e:	2303      	movs	r3, #3
 800df10:	75fb      	strb	r3, [r7, #23]
 800df12:	e02c      	b.n	800df6e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800df14:	2303      	movs	r3, #3
 800df16:	75fb      	strb	r3, [r7, #23]
 800df18:	e029      	b.n	800df6e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800df20:	2b02      	cmp	r3, #2
 800df22:	d120      	bne.n	800df66 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	78db      	ldrb	r3, [r3, #3]
 800df28:	f003 0303 	and.w	r3, r3, #3
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d106      	bne.n	800df3e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	889b      	ldrh	r3, [r3, #4]
 800df34:	2b08      	cmp	r3, #8
 800df36:	d01a      	beq.n	800df6e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800df38:	2303      	movs	r3, #3
 800df3a:	75fb      	strb	r3, [r7, #23]
 800df3c:	e017      	b.n	800df6e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	78db      	ldrb	r3, [r3, #3]
 800df42:	f003 0303 	and.w	r3, r3, #3
 800df46:	2b03      	cmp	r3, #3
 800df48:	d10a      	bne.n	800df60 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	799b      	ldrb	r3, [r3, #6]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d003      	beq.n	800df5a <USBH_ParseEPDesc+0x1ae>
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	889b      	ldrh	r3, [r3, #4]
 800df56:	2b08      	cmp	r3, #8
 800df58:	d909      	bls.n	800df6e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800df5a:	2303      	movs	r3, #3
 800df5c:	75fb      	strb	r3, [r7, #23]
 800df5e:	e006      	b.n	800df6e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800df60:	2303      	movs	r3, #3
 800df62:	75fb      	strb	r3, [r7, #23]
 800df64:	e003      	b.n	800df6e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800df66:	2303      	movs	r3, #3
 800df68:	75fb      	strb	r3, [r7, #23]
 800df6a:	e000      	b.n	800df6e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800df6c:	bf00      	nop
  }

  return status;
 800df6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800df70:	4618      	mov	r0, r3
 800df72:	371c      	adds	r7, #28
 800df74:	46bd      	mov	sp, r7
 800df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7a:	4770      	bx	lr

0800df7c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800df7c:	b480      	push	{r7}
 800df7e:	b087      	sub	sp, #28
 800df80:	af00      	add	r7, sp, #0
 800df82:	60f8      	str	r0, [r7, #12]
 800df84:	60b9      	str	r1, [r7, #8]
 800df86:	4613      	mov	r3, r2
 800df88:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	3301      	adds	r3, #1
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	2b03      	cmp	r3, #3
 800df92:	d120      	bne.n	800dfd6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	781b      	ldrb	r3, [r3, #0]
 800df98:	1e9a      	subs	r2, r3, #2
 800df9a:	88fb      	ldrh	r3, [r7, #6]
 800df9c:	4293      	cmp	r3, r2
 800df9e:	bf28      	it	cs
 800dfa0:	4613      	movcs	r3, r2
 800dfa2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	3302      	adds	r3, #2
 800dfa8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800dfaa:	2300      	movs	r3, #0
 800dfac:	82fb      	strh	r3, [r7, #22]
 800dfae:	e00b      	b.n	800dfc8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800dfb0:	8afb      	ldrh	r3, [r7, #22]
 800dfb2:	68fa      	ldr	r2, [r7, #12]
 800dfb4:	4413      	add	r3, r2
 800dfb6:	781a      	ldrb	r2, [r3, #0]
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	701a      	strb	r2, [r3, #0]
      pdest++;
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	3301      	adds	r3, #1
 800dfc0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800dfc2:	8afb      	ldrh	r3, [r7, #22]
 800dfc4:	3302      	adds	r3, #2
 800dfc6:	82fb      	strh	r3, [r7, #22]
 800dfc8:	8afa      	ldrh	r2, [r7, #22]
 800dfca:	8abb      	ldrh	r3, [r7, #20]
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d3ef      	bcc.n	800dfb0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	701a      	strb	r2, [r3, #0]
  }
}
 800dfd6:	bf00      	nop
 800dfd8:	371c      	adds	r7, #28
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr

0800dfe2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dfe2:	b480      	push	{r7}
 800dfe4:	b085      	sub	sp, #20
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
 800dfea:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	881b      	ldrh	r3, [r3, #0]
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	7812      	ldrb	r2, [r2, #0]
 800dff4:	4413      	add	r3, r2
 800dff6:	b29a      	uxth	r2, r3
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	4413      	add	r3, r2
 800e006:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e008:	68fb      	ldr	r3, [r7, #12]
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3714      	adds	r7, #20
 800e00e:	46bd      	mov	sp, r7
 800e010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e014:	4770      	bx	lr

0800e016 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e016:	b580      	push	{r7, lr}
 800e018:	b086      	sub	sp, #24
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	60f8      	str	r0, [r7, #12]
 800e01e:	60b9      	str	r1, [r7, #8]
 800e020:	4613      	mov	r3, r2
 800e022:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e024:	2301      	movs	r3, #1
 800e026:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	789b      	ldrb	r3, [r3, #2]
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	d002      	beq.n	800e036 <USBH_CtlReq+0x20>
 800e030:	2b02      	cmp	r3, #2
 800e032:	d01d      	beq.n	800e070 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800e034:	e043      	b.n	800e0be <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	68ba      	ldr	r2, [r7, #8]
 800e03a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	88fa      	ldrh	r2, [r7, #6]
 800e040:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	2201      	movs	r2, #1
 800e046:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2202      	movs	r2, #2
 800e04c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e04e:	2301      	movs	r3, #1
 800e050:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	2203      	movs	r2, #3
 800e056:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800e066:	2300      	movs	r3, #0
 800e068:	2200      	movs	r2, #0
 800e06a:	f000 fd93 	bl	800eb94 <osMessageQueuePut>
      break;
 800e06e:	e026      	b.n	800e0be <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800e070:	68f8      	ldr	r0, [r7, #12]
 800e072:	f000 f829 	bl	800e0c8 <USBH_HandleControl>
 800e076:	4603      	mov	r3, r0
 800e078:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e07a:	7dfb      	ldrb	r3, [r7, #23]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d002      	beq.n	800e086 <USBH_CtlReq+0x70>
 800e080:	7dfb      	ldrb	r3, [r7, #23]
 800e082:	2b03      	cmp	r3, #3
 800e084:	d106      	bne.n	800e094 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2201      	movs	r2, #1
 800e08a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2200      	movs	r2, #0
 800e090:	761a      	strb	r2, [r3, #24]
 800e092:	e005      	b.n	800e0a0 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800e094:	7dfb      	ldrb	r3, [r7, #23]
 800e096:	2b02      	cmp	r3, #2
 800e098:	d102      	bne.n	800e0a0 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2201      	movs	r2, #1
 800e09e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2203      	movs	r2, #3
 800e0a4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	f000 fd6c 	bl	800eb94 <osMessageQueuePut>
      break;
 800e0bc:	bf00      	nop
  }
  return status;
 800e0be:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3718      	adds	r7, #24
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b086      	sub	sp, #24
 800e0cc:	af02      	add	r7, sp, #8
 800e0ce:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	7e1b      	ldrb	r3, [r3, #24]
 800e0dc:	3b01      	subs	r3, #1
 800e0de:	2b0a      	cmp	r3, #10
 800e0e0:	f200 8229 	bhi.w	800e536 <USBH_HandleControl+0x46e>
 800e0e4:	a201      	add	r2, pc, #4	@ (adr r2, 800e0ec <USBH_HandleControl+0x24>)
 800e0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ea:	bf00      	nop
 800e0ec:	0800e119 	.word	0x0800e119
 800e0f0:	0800e133 	.word	0x0800e133
 800e0f4:	0800e1d5 	.word	0x0800e1d5
 800e0f8:	0800e1fb 	.word	0x0800e1fb
 800e0fc:	0800e287 	.word	0x0800e287
 800e100:	0800e2b1 	.word	0x0800e2b1
 800e104:	0800e373 	.word	0x0800e373
 800e108:	0800e395 	.word	0x0800e395
 800e10c:	0800e427 	.word	0x0800e427
 800e110:	0800e44d 	.word	0x0800e44d
 800e114:	0800e4df 	.word	0x0800e4df
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f103 0110 	add.w	r1, r3, #16
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	795b      	ldrb	r3, [r3, #5]
 800e122:	461a      	mov	r2, r3
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f000 fa17 	bl	800e558 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2202      	movs	r2, #2
 800e12e:	761a      	strb	r2, [r3, #24]
      break;
 800e130:	e20c      	b.n	800e54c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	795b      	ldrb	r3, [r3, #5]
 800e136:	4619      	mov	r1, r3
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f005 f889 	bl	8013250 <USBH_LL_GetURBState>
 800e13e:	4603      	mov	r3, r0
 800e140:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e142:	7bbb      	ldrb	r3, [r7, #14]
 800e144:	2b01      	cmp	r3, #1
 800e146:	d12c      	bne.n	800e1a2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	7c1b      	ldrb	r3, [r3, #16]
 800e14c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e150:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	8adb      	ldrh	r3, [r3, #22]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d00a      	beq.n	800e170 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e15a:	7b7b      	ldrb	r3, [r7, #13]
 800e15c:	2b80      	cmp	r3, #128	@ 0x80
 800e15e:	d103      	bne.n	800e168 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2203      	movs	r2, #3
 800e164:	761a      	strb	r2, [r3, #24]
 800e166:	e00d      	b.n	800e184 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2205      	movs	r2, #5
 800e16c:	761a      	strb	r2, [r3, #24]
 800e16e:	e009      	b.n	800e184 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800e170:	7b7b      	ldrb	r3, [r7, #13]
 800e172:	2b80      	cmp	r3, #128	@ 0x80
 800e174:	d103      	bne.n	800e17e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2209      	movs	r2, #9
 800e17a:	761a      	strb	r2, [r3, #24]
 800e17c:	e002      	b.n	800e184 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2207      	movs	r2, #7
 800e182:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2203      	movs	r2, #3
 800e188:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800e198:	2300      	movs	r3, #0
 800e19a:	2200      	movs	r2, #0
 800e19c:	f000 fcfa 	bl	800eb94 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e1a0:	e1cb      	b.n	800e53a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e1a2:	7bbb      	ldrb	r3, [r7, #14]
 800e1a4:	2b04      	cmp	r3, #4
 800e1a6:	d003      	beq.n	800e1b0 <USBH_HandleControl+0xe8>
 800e1a8:	7bbb      	ldrb	r3, [r7, #14]
 800e1aa:	2b02      	cmp	r3, #2
 800e1ac:	f040 81c5 	bne.w	800e53a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	220b      	movs	r2, #11
 800e1b4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2203      	movs	r2, #3
 800e1ba:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	f000 fce1 	bl	800eb94 <osMessageQueuePut>
      break;
 800e1d2:	e1b2      	b.n	800e53a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e1da:	b29a      	uxth	r2, r3
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6899      	ldr	r1, [r3, #8]
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	899a      	ldrh	r2, [r3, #12]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	791b      	ldrb	r3, [r3, #4]
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f000 f9f2 	bl	800e5d6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2204      	movs	r2, #4
 800e1f6:	761a      	strb	r2, [r3, #24]
      break;
 800e1f8:	e1a8      	b.n	800e54c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	791b      	ldrb	r3, [r3, #4]
 800e1fe:	4619      	mov	r1, r3
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f005 f825 	bl	8013250 <USBH_LL_GetURBState>
 800e206:	4603      	mov	r3, r0
 800e208:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e20a:	7bbb      	ldrb	r3, [r7, #14]
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	d110      	bne.n	800e232 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2209      	movs	r2, #9
 800e214:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2203      	movs	r2, #3
 800e21a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800e22a:	2300      	movs	r3, #0
 800e22c:	2200      	movs	r2, #0
 800e22e:	f000 fcb1 	bl	800eb94 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e232:	7bbb      	ldrb	r3, [r7, #14]
 800e234:	2b05      	cmp	r3, #5
 800e236:	d110      	bne.n	800e25a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e238:	2303      	movs	r3, #3
 800e23a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2203      	movs	r2, #3
 800e240:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800e250:	2300      	movs	r3, #0
 800e252:	2200      	movs	r2, #0
 800e254:	f000 fc9e 	bl	800eb94 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e258:	e171      	b.n	800e53e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800e25a:	7bbb      	ldrb	r3, [r7, #14]
 800e25c:	2b04      	cmp	r3, #4
 800e25e:	f040 816e 	bne.w	800e53e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	220b      	movs	r2, #11
 800e266:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2203      	movs	r2, #3
 800e26c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800e27c:	2300      	movs	r3, #0
 800e27e:	2200      	movs	r2, #0
 800e280:	f000 fc88 	bl	800eb94 <osMessageQueuePut>
      break;
 800e284:	e15b      	b.n	800e53e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6899      	ldr	r1, [r3, #8]
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	899a      	ldrh	r2, [r3, #12]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	795b      	ldrb	r3, [r3, #5]
 800e292:	2001      	movs	r0, #1
 800e294:	9000      	str	r0, [sp, #0]
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f000 f978 	bl	800e58c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e2a2:	b29a      	uxth	r2, r3
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2206      	movs	r2, #6
 800e2ac:	761a      	strb	r2, [r3, #24]
      break;
 800e2ae:	e14d      	b.n	800e54c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	795b      	ldrb	r3, [r3, #5]
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f004 ffca 	bl	8013250 <USBH_LL_GetURBState>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e2c0:	7bbb      	ldrb	r3, [r7, #14]
 800e2c2:	2b01      	cmp	r3, #1
 800e2c4:	d111      	bne.n	800e2ea <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2207      	movs	r2, #7
 800e2ca:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2203      	movs	r2, #3
 800e2d0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	f000 fc56 	bl	800eb94 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e2e8:	e12b      	b.n	800e542 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800e2ea:	7bbb      	ldrb	r3, [r7, #14]
 800e2ec:	2b05      	cmp	r3, #5
 800e2ee:	d113      	bne.n	800e318 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	220c      	movs	r2, #12
 800e2f4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e2f6:	2303      	movs	r3, #3
 800e2f8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2203      	movs	r2, #3
 800e2fe:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800e30e:	2300      	movs	r3, #0
 800e310:	2200      	movs	r2, #0
 800e312:	f000 fc3f 	bl	800eb94 <osMessageQueuePut>
      break;
 800e316:	e114      	b.n	800e542 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e318:	7bbb      	ldrb	r3, [r7, #14]
 800e31a:	2b02      	cmp	r3, #2
 800e31c:	d111      	bne.n	800e342 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2205      	movs	r2, #5
 800e322:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2203      	movs	r2, #3
 800e328:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800e338:	2300      	movs	r3, #0
 800e33a:	2200      	movs	r2, #0
 800e33c:	f000 fc2a 	bl	800eb94 <osMessageQueuePut>
      break;
 800e340:	e0ff      	b.n	800e542 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800e342:	7bbb      	ldrb	r3, [r7, #14]
 800e344:	2b04      	cmp	r3, #4
 800e346:	f040 80fc 	bne.w	800e542 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	220b      	movs	r2, #11
 800e34e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e350:	2302      	movs	r3, #2
 800e352:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2203      	movs	r2, #3
 800e358:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800e368:	2300      	movs	r3, #0
 800e36a:	2200      	movs	r2, #0
 800e36c:	f000 fc12 	bl	800eb94 <osMessageQueuePut>
      break;
 800e370:	e0e7      	b.n	800e542 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	791b      	ldrb	r3, [r3, #4]
 800e376:	2200      	movs	r2, #0
 800e378:	2100      	movs	r1, #0
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f000 f92b 	bl	800e5d6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e386:	b29a      	uxth	r2, r3
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2208      	movs	r2, #8
 800e390:	761a      	strb	r2, [r3, #24]

      break;
 800e392:	e0db      	b.n	800e54c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	791b      	ldrb	r3, [r3, #4]
 800e398:	4619      	mov	r1, r3
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f004 ff58 	bl	8013250 <USBH_LL_GetURBState>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e3a4:	7bbb      	ldrb	r3, [r7, #14]
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	d113      	bne.n	800e3d2 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	220d      	movs	r2, #13
 800e3ae:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2203      	movs	r2, #3
 800e3b8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	f000 fbe2 	bl	800eb94 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e3d0:	e0b9      	b.n	800e546 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800e3d2:	7bbb      	ldrb	r3, [r7, #14]
 800e3d4:	2b04      	cmp	r3, #4
 800e3d6:	d111      	bne.n	800e3fc <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	220b      	movs	r2, #11
 800e3dc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2203      	movs	r2, #3
 800e3e2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	f000 fbcd 	bl	800eb94 <osMessageQueuePut>
      break;
 800e3fa:	e0a4      	b.n	800e546 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800e3fc:	7bbb      	ldrb	r3, [r7, #14]
 800e3fe:	2b05      	cmp	r3, #5
 800e400:	f040 80a1 	bne.w	800e546 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800e404:	2303      	movs	r3, #3
 800e406:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2203      	movs	r2, #3
 800e40c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800e41c:	2300      	movs	r3, #0
 800e41e:	2200      	movs	r2, #0
 800e420:	f000 fbb8 	bl	800eb94 <osMessageQueuePut>
      break;
 800e424:	e08f      	b.n	800e546 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	795b      	ldrb	r3, [r3, #5]
 800e42a:	2201      	movs	r2, #1
 800e42c:	9200      	str	r2, [sp, #0]
 800e42e:	2200      	movs	r2, #0
 800e430:	2100      	movs	r1, #0
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f000 f8aa 	bl	800e58c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e43e:	b29a      	uxth	r2, r3
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	220a      	movs	r2, #10
 800e448:	761a      	strb	r2, [r3, #24]
      break;
 800e44a:	e07f      	b.n	800e54c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	795b      	ldrb	r3, [r3, #5]
 800e450:	4619      	mov	r1, r3
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f004 fefc 	bl	8013250 <USBH_LL_GetURBState>
 800e458:	4603      	mov	r3, r0
 800e45a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e45c:	7bbb      	ldrb	r3, [r7, #14]
 800e45e:	2b01      	cmp	r3, #1
 800e460:	d113      	bne.n	800e48a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800e462:	2300      	movs	r3, #0
 800e464:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	220d      	movs	r2, #13
 800e46a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2203      	movs	r2, #3
 800e470:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800e480:	2300      	movs	r3, #0
 800e482:	2200      	movs	r2, #0
 800e484:	f000 fb86 	bl	800eb94 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e488:	e05f      	b.n	800e54a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e48a:	7bbb      	ldrb	r3, [r7, #14]
 800e48c:	2b02      	cmp	r3, #2
 800e48e:	d111      	bne.n	800e4b4 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2209      	movs	r2, #9
 800e494:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2203      	movs	r2, #3
 800e49a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	f000 fb71 	bl	800eb94 <osMessageQueuePut>
      break;
 800e4b2:	e04a      	b.n	800e54a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800e4b4:	7bbb      	ldrb	r3, [r7, #14]
 800e4b6:	2b04      	cmp	r3, #4
 800e4b8:	d147      	bne.n	800e54a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	220b      	movs	r2, #11
 800e4be:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2203      	movs	r2, #3
 800e4c4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	f000 fb5c 	bl	800eb94 <osMessageQueuePut>
      break;
 800e4dc:	e035      	b.n	800e54a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	7e5b      	ldrb	r3, [r3, #25]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	b2da      	uxtb	r2, r3
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	765a      	strb	r2, [r3, #25]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	7e5b      	ldrb	r3, [r3, #25]
 800e4ee:	2b02      	cmp	r3, #2
 800e4f0:	d806      	bhi.n	800e500 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2201      	movs	r2, #1
 800e4f6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e4fe:	e025      	b.n	800e54c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e506:	2106      	movs	r1, #6
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	795b      	ldrb	r3, [r3, #5]
 800e516:	4619      	mov	r1, r3
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f000 f90d 	bl	800e738 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	791b      	ldrb	r3, [r3, #4]
 800e522:	4619      	mov	r1, r3
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f000 f907 	bl	800e738 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2200      	movs	r2, #0
 800e52e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e530:	2302      	movs	r3, #2
 800e532:	73fb      	strb	r3, [r7, #15]
      break;
 800e534:	e00a      	b.n	800e54c <USBH_HandleControl+0x484>

    default:
      break;
 800e536:	bf00      	nop
 800e538:	e008      	b.n	800e54c <USBH_HandleControl+0x484>
      break;
 800e53a:	bf00      	nop
 800e53c:	e006      	b.n	800e54c <USBH_HandleControl+0x484>
      break;
 800e53e:	bf00      	nop
 800e540:	e004      	b.n	800e54c <USBH_HandleControl+0x484>
      break;
 800e542:	bf00      	nop
 800e544:	e002      	b.n	800e54c <USBH_HandleControl+0x484>
      break;
 800e546:	bf00      	nop
 800e548:	e000      	b.n	800e54c <USBH_HandleControl+0x484>
      break;
 800e54a:	bf00      	nop
  }

  return status;
 800e54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3710      	adds	r7, #16
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
 800e556:	bf00      	nop

0800e558 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b088      	sub	sp, #32
 800e55c:	af04      	add	r7, sp, #16
 800e55e:	60f8      	str	r0, [r7, #12]
 800e560:	60b9      	str	r1, [r7, #8]
 800e562:	4613      	mov	r3, r2
 800e564:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e566:	79f9      	ldrb	r1, [r7, #7]
 800e568:	2300      	movs	r3, #0
 800e56a:	9303      	str	r3, [sp, #12]
 800e56c:	2308      	movs	r3, #8
 800e56e:	9302      	str	r3, [sp, #8]
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	9301      	str	r3, [sp, #4]
 800e574:	2300      	movs	r3, #0
 800e576:	9300      	str	r3, [sp, #0]
 800e578:	2300      	movs	r3, #0
 800e57a:	2200      	movs	r2, #0
 800e57c:	68f8      	ldr	r0, [r7, #12]
 800e57e:	f004 fe36 	bl	80131ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e582:	2300      	movs	r3, #0
}
 800e584:	4618      	mov	r0, r3
 800e586:	3710      	adds	r7, #16
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b088      	sub	sp, #32
 800e590:	af04      	add	r7, sp, #16
 800e592:	60f8      	str	r0, [r7, #12]
 800e594:	60b9      	str	r1, [r7, #8]
 800e596:	4611      	mov	r1, r2
 800e598:	461a      	mov	r2, r3
 800e59a:	460b      	mov	r3, r1
 800e59c:	80fb      	strh	r3, [r7, #6]
 800e59e:	4613      	mov	r3, r2
 800e5a0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d001      	beq.n	800e5b0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e5b0:	7979      	ldrb	r1, [r7, #5]
 800e5b2:	7e3b      	ldrb	r3, [r7, #24]
 800e5b4:	9303      	str	r3, [sp, #12]
 800e5b6:	88fb      	ldrh	r3, [r7, #6]
 800e5b8:	9302      	str	r3, [sp, #8]
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	9301      	str	r3, [sp, #4]
 800e5be:	2301      	movs	r3, #1
 800e5c0:	9300      	str	r3, [sp, #0]
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	68f8      	ldr	r0, [r7, #12]
 800e5c8:	f004 fe11 	bl	80131ee <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e5cc:	2300      	movs	r3, #0
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3710      	adds	r7, #16
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}

0800e5d6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e5d6:	b580      	push	{r7, lr}
 800e5d8:	b088      	sub	sp, #32
 800e5da:	af04      	add	r7, sp, #16
 800e5dc:	60f8      	str	r0, [r7, #12]
 800e5de:	60b9      	str	r1, [r7, #8]
 800e5e0:	4611      	mov	r1, r2
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	80fb      	strh	r3, [r7, #6]
 800e5e8:	4613      	mov	r3, r2
 800e5ea:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e5ec:	7979      	ldrb	r1, [r7, #5]
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	9303      	str	r3, [sp, #12]
 800e5f2:	88fb      	ldrh	r3, [r7, #6]
 800e5f4:	9302      	str	r3, [sp, #8]
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	9301      	str	r3, [sp, #4]
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	9300      	str	r3, [sp, #0]
 800e5fe:	2300      	movs	r3, #0
 800e600:	2201      	movs	r2, #1
 800e602:	68f8      	ldr	r0, [r7, #12]
 800e604:	f004 fdf3 	bl	80131ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e608:	2300      	movs	r3, #0

}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3710      	adds	r7, #16
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}

0800e612 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e612:	b580      	push	{r7, lr}
 800e614:	b088      	sub	sp, #32
 800e616:	af04      	add	r7, sp, #16
 800e618:	60f8      	str	r0, [r7, #12]
 800e61a:	60b9      	str	r1, [r7, #8]
 800e61c:	4611      	mov	r1, r2
 800e61e:	461a      	mov	r2, r3
 800e620:	460b      	mov	r3, r1
 800e622:	80fb      	strh	r3, [r7, #6]
 800e624:	4613      	mov	r3, r2
 800e626:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d001      	beq.n	800e636 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e632:	2300      	movs	r3, #0
 800e634:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e636:	7979      	ldrb	r1, [r7, #5]
 800e638:	7e3b      	ldrb	r3, [r7, #24]
 800e63a:	9303      	str	r3, [sp, #12]
 800e63c:	88fb      	ldrh	r3, [r7, #6]
 800e63e:	9302      	str	r3, [sp, #8]
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	9301      	str	r3, [sp, #4]
 800e644:	2301      	movs	r3, #1
 800e646:	9300      	str	r3, [sp, #0]
 800e648:	2302      	movs	r3, #2
 800e64a:	2200      	movs	r2, #0
 800e64c:	68f8      	ldr	r0, [r7, #12]
 800e64e:	f004 fdce 	bl	80131ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e652:	2300      	movs	r3, #0
}
 800e654:	4618      	mov	r0, r3
 800e656:	3710      	adds	r7, #16
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}

0800e65c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b088      	sub	sp, #32
 800e660:	af04      	add	r7, sp, #16
 800e662:	60f8      	str	r0, [r7, #12]
 800e664:	60b9      	str	r1, [r7, #8]
 800e666:	4611      	mov	r1, r2
 800e668:	461a      	mov	r2, r3
 800e66a:	460b      	mov	r3, r1
 800e66c:	80fb      	strh	r3, [r7, #6]
 800e66e:	4613      	mov	r3, r2
 800e670:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e672:	7979      	ldrb	r1, [r7, #5]
 800e674:	2300      	movs	r3, #0
 800e676:	9303      	str	r3, [sp, #12]
 800e678:	88fb      	ldrh	r3, [r7, #6]
 800e67a:	9302      	str	r3, [sp, #8]
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	9301      	str	r3, [sp, #4]
 800e680:	2301      	movs	r3, #1
 800e682:	9300      	str	r3, [sp, #0]
 800e684:	2302      	movs	r3, #2
 800e686:	2201      	movs	r2, #1
 800e688:	68f8      	ldr	r0, [r7, #12]
 800e68a:	f004 fdb0 	bl	80131ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e68e:	2300      	movs	r3, #0
}
 800e690:	4618      	mov	r0, r3
 800e692:	3710      	adds	r7, #16
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b086      	sub	sp, #24
 800e69c:	af04      	add	r7, sp, #16
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	4608      	mov	r0, r1
 800e6a2:	4611      	mov	r1, r2
 800e6a4:	461a      	mov	r2, r3
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	70fb      	strb	r3, [r7, #3]
 800e6aa:	460b      	mov	r3, r1
 800e6ac:	70bb      	strb	r3, [r7, #2]
 800e6ae:	4613      	mov	r3, r2
 800e6b0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e6b2:	7878      	ldrb	r0, [r7, #1]
 800e6b4:	78ba      	ldrb	r2, [r7, #2]
 800e6b6:	78f9      	ldrb	r1, [r7, #3]
 800e6b8:	8b3b      	ldrh	r3, [r7, #24]
 800e6ba:	9302      	str	r3, [sp, #8]
 800e6bc:	7d3b      	ldrb	r3, [r7, #20]
 800e6be:	9301      	str	r3, [sp, #4]
 800e6c0:	7c3b      	ldrb	r3, [r7, #16]
 800e6c2:	9300      	str	r3, [sp, #0]
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f004 fd43 	bl	8013152 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e6cc:	2300      	movs	r3, #0
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3708      	adds	r7, #8
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}

0800e6d6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e6d6:	b580      	push	{r7, lr}
 800e6d8:	b082      	sub	sp, #8
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
 800e6de:	460b      	mov	r3, r1
 800e6e0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e6e2:	78fb      	ldrb	r3, [r7, #3]
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f004 fd62 	bl	80131b0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e6ec:	2300      	movs	r3, #0
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3708      	adds	r7, #8
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}

0800e6f6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e6f6:	b580      	push	{r7, lr}
 800e6f8:	b084      	sub	sp, #16
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	6078      	str	r0, [r7, #4]
 800e6fe:	460b      	mov	r3, r1
 800e700:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f000 f836 	bl	800e774 <USBH_GetFreePipe>
 800e708:	4603      	mov	r3, r0
 800e70a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e70c:	89fb      	ldrh	r3, [r7, #14]
 800e70e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e712:	4293      	cmp	r3, r2
 800e714:	d00a      	beq.n	800e72c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e716:	78fa      	ldrb	r2, [r7, #3]
 800e718:	89fb      	ldrh	r3, [r7, #14]
 800e71a:	f003 030f 	and.w	r3, r3, #15
 800e71e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e722:	6879      	ldr	r1, [r7, #4]
 800e724:	33e0      	adds	r3, #224	@ 0xe0
 800e726:	009b      	lsls	r3, r3, #2
 800e728:	440b      	add	r3, r1
 800e72a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e72c:	89fb      	ldrh	r3, [r7, #14]
 800e72e:	b2db      	uxtb	r3, r3
}
 800e730:	4618      	mov	r0, r3
 800e732:	3710      	adds	r7, #16
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}

0800e738 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e738:	b480      	push	{r7}
 800e73a:	b083      	sub	sp, #12
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	460b      	mov	r3, r1
 800e742:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e744:	78fb      	ldrb	r3, [r7, #3]
 800e746:	2b0f      	cmp	r3, #15
 800e748:	d80d      	bhi.n	800e766 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e74a:	78fb      	ldrb	r3, [r7, #3]
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	33e0      	adds	r3, #224	@ 0xe0
 800e750:	009b      	lsls	r3, r3, #2
 800e752:	4413      	add	r3, r2
 800e754:	685a      	ldr	r2, [r3, #4]
 800e756:	78fb      	ldrb	r3, [r7, #3]
 800e758:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e75c:	6879      	ldr	r1, [r7, #4]
 800e75e:	33e0      	adds	r3, #224	@ 0xe0
 800e760:	009b      	lsls	r3, r3, #2
 800e762:	440b      	add	r3, r1
 800e764:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e766:	2300      	movs	r3, #0
}
 800e768:	4618      	mov	r0, r3
 800e76a:	370c      	adds	r7, #12
 800e76c:	46bd      	mov	sp, r7
 800e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e772:	4770      	bx	lr

0800e774 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e774:	b480      	push	{r7}
 800e776:	b085      	sub	sp, #20
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e77c:	2300      	movs	r3, #0
 800e77e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e780:	2300      	movs	r3, #0
 800e782:	73fb      	strb	r3, [r7, #15]
 800e784:	e00f      	b.n	800e7a6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e786:	7bfb      	ldrb	r3, [r7, #15]
 800e788:	687a      	ldr	r2, [r7, #4]
 800e78a:	33e0      	adds	r3, #224	@ 0xe0
 800e78c:	009b      	lsls	r3, r3, #2
 800e78e:	4413      	add	r3, r2
 800e790:	685b      	ldr	r3, [r3, #4]
 800e792:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e796:	2b00      	cmp	r3, #0
 800e798:	d102      	bne.n	800e7a0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e79a:	7bfb      	ldrb	r3, [r7, #15]
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	e007      	b.n	800e7b0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e7a0:	7bfb      	ldrb	r3, [r7, #15]
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	73fb      	strb	r3, [r7, #15]
 800e7a6:	7bfb      	ldrb	r3, [r7, #15]
 800e7a8:	2b0f      	cmp	r3, #15
 800e7aa:	d9ec      	bls.n	800e786 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e7ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3714      	adds	r7, #20
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr

0800e7bc <__NVIC_SetPriority>:
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b083      	sub	sp, #12
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	6039      	str	r1, [r7, #0]
 800e7c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e7c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	db0a      	blt.n	800e7e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	b2da      	uxtb	r2, r3
 800e7d4:	490c      	ldr	r1, [pc, #48]	@ (800e808 <__NVIC_SetPriority+0x4c>)
 800e7d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7da:	0112      	lsls	r2, r2, #4
 800e7dc:	b2d2      	uxtb	r2, r2
 800e7de:	440b      	add	r3, r1
 800e7e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800e7e4:	e00a      	b.n	800e7fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	b2da      	uxtb	r2, r3
 800e7ea:	4908      	ldr	r1, [pc, #32]	@ (800e80c <__NVIC_SetPriority+0x50>)
 800e7ec:	79fb      	ldrb	r3, [r7, #7]
 800e7ee:	f003 030f 	and.w	r3, r3, #15
 800e7f2:	3b04      	subs	r3, #4
 800e7f4:	0112      	lsls	r2, r2, #4
 800e7f6:	b2d2      	uxtb	r2, r2
 800e7f8:	440b      	add	r3, r1
 800e7fa:	761a      	strb	r2, [r3, #24]
}
 800e7fc:	bf00      	nop
 800e7fe:	370c      	adds	r7, #12
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr
 800e808:	e000e100 	.word	0xe000e100
 800e80c:	e000ed00 	.word	0xe000ed00

0800e810 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e810:	b580      	push	{r7, lr}
 800e812:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e814:	4b05      	ldr	r3, [pc, #20]	@ (800e82c <SysTick_Handler+0x1c>)
 800e816:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e818:	f002 ff42 	bl	80116a0 <xTaskGetSchedulerState>
 800e81c:	4603      	mov	r3, r0
 800e81e:	2b01      	cmp	r3, #1
 800e820:	d001      	beq.n	800e826 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e822:	f004 f841 	bl	80128a8 <xPortSysTickHandler>
  }
}
 800e826:	bf00      	nop
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	bf00      	nop
 800e82c:	e000e010 	.word	0xe000e010

0800e830 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e830:	b580      	push	{r7, lr}
 800e832:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e834:	2100      	movs	r1, #0
 800e836:	f06f 0004 	mvn.w	r0, #4
 800e83a:	f7ff ffbf 	bl	800e7bc <__NVIC_SetPriority>
#endif
}
 800e83e:	bf00      	nop
 800e840:	bd80      	pop	{r7, pc}
	...

0800e844 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e844:	b480      	push	{r7}
 800e846:	b083      	sub	sp, #12
 800e848:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e84a:	f3ef 8305 	mrs	r3, IPSR
 800e84e:	603b      	str	r3, [r7, #0]
  return(result);
 800e850:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e852:	2b00      	cmp	r3, #0
 800e854:	d003      	beq.n	800e85e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e856:	f06f 0305 	mvn.w	r3, #5
 800e85a:	607b      	str	r3, [r7, #4]
 800e85c:	e00c      	b.n	800e878 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e85e:	4b0a      	ldr	r3, [pc, #40]	@ (800e888 <osKernelInitialize+0x44>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d105      	bne.n	800e872 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e866:	4b08      	ldr	r3, [pc, #32]	@ (800e888 <osKernelInitialize+0x44>)
 800e868:	2201      	movs	r2, #1
 800e86a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e86c:	2300      	movs	r3, #0
 800e86e:	607b      	str	r3, [r7, #4]
 800e870:	e002      	b.n	800e878 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e872:	f04f 33ff 	mov.w	r3, #4294967295
 800e876:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e878:	687b      	ldr	r3, [r7, #4]
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	370c      	adds	r7, #12
 800e87e:	46bd      	mov	sp, r7
 800e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e884:	4770      	bx	lr
 800e886:	bf00      	nop
 800e888:	20002b50 	.word	0x20002b50

0800e88c <osKernelGetInfo>:

osStatus_t osKernelGetInfo (osVersion_t *version, char *id_buf, uint32_t id_size) {
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b084      	sub	sp, #16
 800e890:	af00      	add	r7, sp, #0
 800e892:	60f8      	str	r0, [r7, #12]
 800e894:	60b9      	str	r1, [r7, #8]
 800e896:	607a      	str	r2, [r7, #4]

  if (version != NULL) {
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d005      	beq.n	800e8aa <osKernelGetInfo+0x1e>
    /* Version encoding is major.minor.rev: mmnnnrrrr dec */
    version->api    = KERNEL_VERSION;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	4a0c      	ldr	r2, [pc, #48]	@ (800e8d4 <osKernelGetInfo+0x48>)
 800e8a2:	601a      	str	r2, [r3, #0]
    version->kernel = KERNEL_VERSION;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	4a0b      	ldr	r2, [pc, #44]	@ (800e8d4 <osKernelGetInfo+0x48>)
 800e8a8:	605a      	str	r2, [r3, #4]
  }

  if ((id_buf != NULL) && (id_size != 0U)) {
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d00c      	beq.n	800e8ca <osKernelGetInfo+0x3e>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d009      	beq.n	800e8ca <osKernelGetInfo+0x3e>
    if (id_size > sizeof(KERNEL_ID)) {
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2b11      	cmp	r3, #17
 800e8ba:	d901      	bls.n	800e8c0 <osKernelGetInfo+0x34>
      id_size = sizeof(KERNEL_ID);
 800e8bc:	2311      	movs	r3, #17
 800e8be:	607b      	str	r3, [r7, #4]
    }
    memcpy(id_buf, KERNEL_ID, id_size);
 800e8c0:	687a      	ldr	r2, [r7, #4]
 800e8c2:	4905      	ldr	r1, [pc, #20]	@ (800e8d8 <osKernelGetInfo+0x4c>)
 800e8c4:	68b8      	ldr	r0, [r7, #8]
 800e8c6:	f006 fb96 	bl	8014ff6 <memcpy>
  }

  return (osOK);
 800e8ca:	2300      	movs	r3, #0
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3710      	adds	r7, #16
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	05f5f531 	.word	0x05f5f531
 800e8d8:	08019aa0 	.word	0x08019aa0

0800e8dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b082      	sub	sp, #8
 800e8e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8e2:	f3ef 8305 	mrs	r3, IPSR
 800e8e6:	603b      	str	r3, [r7, #0]
  return(result);
 800e8e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d003      	beq.n	800e8f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e8ee:	f06f 0305 	mvn.w	r3, #5
 800e8f2:	607b      	str	r3, [r7, #4]
 800e8f4:	e010      	b.n	800e918 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e8f6:	4b0b      	ldr	r3, [pc, #44]	@ (800e924 <osKernelStart+0x48>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	2b01      	cmp	r3, #1
 800e8fc:	d109      	bne.n	800e912 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e8fe:	f7ff ff97 	bl	800e830 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e902:	4b08      	ldr	r3, [pc, #32]	@ (800e924 <osKernelStart+0x48>)
 800e904:	2202      	movs	r2, #2
 800e906:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e908:	f002 f834 	bl	8010974 <vTaskStartScheduler>
      stat = osOK;
 800e90c:	2300      	movs	r3, #0
 800e90e:	607b      	str	r3, [r7, #4]
 800e910:	e002      	b.n	800e918 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e912:	f04f 33ff 	mov.w	r3, #4294967295
 800e916:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e918:	687b      	ldr	r3, [r7, #4]
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	3708      	adds	r7, #8
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}
 800e922:	bf00      	nop
 800e924:	20002b50 	.word	0x20002b50

0800e928 <osKernelGetTickFreq>:
  }

  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
 800e928:	b480      	push	{r7}
 800e92a:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800e92c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 800e930:	4618      	mov	r0, r3
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr
	...

0800e93c <osKernelGetSysTimerFreq>:
  }

  return (val);
}

uint32_t osKernelGetSysTimerFreq (void) {
 800e93c:	b480      	push	{r7}
 800e93e:	af00      	add	r7, sp, #0
  return (configCPU_CLOCK_HZ);
 800e940:	4b03      	ldr	r3, [pc, #12]	@ (800e950 <osKernelGetSysTimerFreq+0x14>)
 800e942:	681b      	ldr	r3, [r3, #0]
}
 800e944:	4618      	mov	r0, r3
 800e946:	46bd      	mov	sp, r7
 800e948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94c:	4770      	bx	lr
 800e94e:	bf00      	nop
 800e950:	20000204 	.word	0x20000204

0800e954 <osThreadNew>:

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e954:	b580      	push	{r7, lr}
 800e956:	b08e      	sub	sp, #56	@ 0x38
 800e958:	af04      	add	r7, sp, #16
 800e95a:	60f8      	str	r0, [r7, #12]
 800e95c:	60b9      	str	r1, [r7, #8]
 800e95e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e960:	2300      	movs	r3, #0
 800e962:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e964:	f3ef 8305 	mrs	r3, IPSR
 800e968:	617b      	str	r3, [r7, #20]
  return(result);
 800e96a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d17e      	bne.n	800ea6e <osThreadNew+0x11a>
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d07b      	beq.n	800ea6e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e976:	2380      	movs	r3, #128	@ 0x80
 800e978:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e97a:	2318      	movs	r3, #24
 800e97c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e97e:	2300      	movs	r3, #0
 800e980:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800e982:	f04f 33ff 	mov.w	r3, #4294967295
 800e986:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d045      	beq.n	800ea1a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d002      	beq.n	800e99c <osThreadNew+0x48>
        name = attr->name;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	699b      	ldr	r3, [r3, #24]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d002      	beq.n	800e9aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	699b      	ldr	r3, [r3, #24]
 800e9a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e9aa:	69fb      	ldr	r3, [r7, #28]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d008      	beq.n	800e9c2 <osThreadNew+0x6e>
 800e9b0:	69fb      	ldr	r3, [r7, #28]
 800e9b2:	2b38      	cmp	r3, #56	@ 0x38
 800e9b4:	d805      	bhi.n	800e9c2 <osThreadNew+0x6e>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	685b      	ldr	r3, [r3, #4]
 800e9ba:	f003 0301 	and.w	r3, r3, #1
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d001      	beq.n	800e9c6 <osThreadNew+0x72>
        return (NULL);
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	e054      	b.n	800ea70 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	695b      	ldr	r3, [r3, #20]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d003      	beq.n	800e9d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	695b      	ldr	r3, [r3, #20]
 800e9d2:	089b      	lsrs	r3, r3, #2
 800e9d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	689b      	ldr	r3, [r3, #8]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d00e      	beq.n	800e9fc <osThreadNew+0xa8>
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	68db      	ldr	r3, [r3, #12]
 800e9e2:	2baf      	cmp	r3, #175	@ 0xaf
 800e9e4:	d90a      	bls.n	800e9fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d006      	beq.n	800e9fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	695b      	ldr	r3, [r3, #20]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d002      	beq.n	800e9fc <osThreadNew+0xa8>
        mem = 1;
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	61bb      	str	r3, [r7, #24]
 800e9fa:	e010      	b.n	800ea1e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	689b      	ldr	r3, [r3, #8]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d10c      	bne.n	800ea1e <osThreadNew+0xca>
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	68db      	ldr	r3, [r3, #12]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d108      	bne.n	800ea1e <osThreadNew+0xca>
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	691b      	ldr	r3, [r3, #16]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d104      	bne.n	800ea1e <osThreadNew+0xca>
          mem = 0;
 800ea14:	2300      	movs	r3, #0
 800ea16:	61bb      	str	r3, [r7, #24]
 800ea18:	e001      	b.n	800ea1e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ea1e:	69bb      	ldr	r3, [r7, #24]
 800ea20:	2b01      	cmp	r3, #1
 800ea22:	d110      	bne.n	800ea46 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ea28:	687a      	ldr	r2, [r7, #4]
 800ea2a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ea2c:	9202      	str	r2, [sp, #8]
 800ea2e:	9301      	str	r3, [sp, #4]
 800ea30:	69fb      	ldr	r3, [r7, #28]
 800ea32:	9300      	str	r3, [sp, #0]
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	6a3a      	ldr	r2, [r7, #32]
 800ea38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ea3a:	68f8      	ldr	r0, [r7, #12]
 800ea3c:	f001 fb1e 	bl	801007c <xTaskCreateStatic>
 800ea40:	4603      	mov	r3, r0
 800ea42:	613b      	str	r3, [r7, #16]
 800ea44:	e013      	b.n	800ea6e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ea46:	69bb      	ldr	r3, [r7, #24]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d110      	bne.n	800ea6e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ea4c:	6a3b      	ldr	r3, [r7, #32]
 800ea4e:	b29a      	uxth	r2, r3
 800ea50:	f107 0310 	add.w	r3, r7, #16
 800ea54:	9301      	str	r3, [sp, #4]
 800ea56:	69fb      	ldr	r3, [r7, #28]
 800ea58:	9300      	str	r3, [sp, #0]
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ea5e:	68f8      	ldr	r0, [r7, #12]
 800ea60:	f001 fb6c 	bl	801013c <xTaskCreate>
 800ea64:	4603      	mov	r3, r0
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	d001      	beq.n	800ea6e <osThreadNew+0x11a>
            hTask = NULL;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ea6e:	693b      	ldr	r3, [r7, #16]
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3728      	adds	r7, #40	@ 0x28
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}

0800ea78 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b084      	sub	sp, #16
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea80:	f3ef 8305 	mrs	r3, IPSR
 800ea84:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea86:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d003      	beq.n	800ea94 <osDelay+0x1c>
    stat = osErrorISR;
 800ea8c:	f06f 0305 	mvn.w	r3, #5
 800ea90:	60fb      	str	r3, [r7, #12]
 800ea92:	e007      	b.n	800eaa4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ea94:	2300      	movs	r3, #0
 800ea96:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d002      	beq.n	800eaa4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f001 fd24 	bl	80104ec <vTaskDelay>
    }
  }

  return (stat);
 800eaa4:	68fb      	ldr	r3, [r7, #12]
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3710      	adds	r7, #16
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}

0800eaae <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800eaae:	b580      	push	{r7, lr}
 800eab0:	b08a      	sub	sp, #40	@ 0x28
 800eab2:	af02      	add	r7, sp, #8
 800eab4:	60f8      	str	r0, [r7, #12]
 800eab6:	60b9      	str	r1, [r7, #8]
 800eab8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800eaba:	2300      	movs	r3, #0
 800eabc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eabe:	f3ef 8305 	mrs	r3, IPSR
 800eac2:	613b      	str	r3, [r7, #16]
  return(result);
 800eac4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d15f      	bne.n	800eb8a <osMessageQueueNew+0xdc>
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d05c      	beq.n	800eb8a <osMessageQueueNew+0xdc>
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d059      	beq.n	800eb8a <osMessageQueueNew+0xdc>
    mem = -1;
 800ead6:	f04f 33ff 	mov.w	r3, #4294967295
 800eada:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d029      	beq.n	800eb36 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	689b      	ldr	r3, [r3, #8]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d012      	beq.n	800eb10 <osMessageQueueNew+0x62>
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	68db      	ldr	r3, [r3, #12]
 800eaee:	2b4f      	cmp	r3, #79	@ 0x4f
 800eaf0:	d90e      	bls.n	800eb10 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d00a      	beq.n	800eb10 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	695a      	ldr	r2, [r3, #20]
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	68b9      	ldr	r1, [r7, #8]
 800eb02:	fb01 f303 	mul.w	r3, r1, r3
 800eb06:	429a      	cmp	r2, r3
 800eb08:	d302      	bcc.n	800eb10 <osMessageQueueNew+0x62>
        mem = 1;
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	61bb      	str	r3, [r7, #24]
 800eb0e:	e014      	b.n	800eb3a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	689b      	ldr	r3, [r3, #8]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d110      	bne.n	800eb3a <osMessageQueueNew+0x8c>
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	68db      	ldr	r3, [r3, #12]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d10c      	bne.n	800eb3a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d108      	bne.n	800eb3a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	695b      	ldr	r3, [r3, #20]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d104      	bne.n	800eb3a <osMessageQueueNew+0x8c>
          mem = 0;
 800eb30:	2300      	movs	r3, #0
 800eb32:	61bb      	str	r3, [r7, #24]
 800eb34:	e001      	b.n	800eb3a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800eb36:	2300      	movs	r3, #0
 800eb38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800eb3a:	69bb      	ldr	r3, [r7, #24]
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d10b      	bne.n	800eb58 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	691a      	ldr	r2, [r3, #16]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	689b      	ldr	r3, [r3, #8]
 800eb48:	2100      	movs	r1, #0
 800eb4a:	9100      	str	r1, [sp, #0]
 800eb4c:	68b9      	ldr	r1, [r7, #8]
 800eb4e:	68f8      	ldr	r0, [r7, #12]
 800eb50:	f000 fbec 	bl	800f32c <xQueueGenericCreateStatic>
 800eb54:	61f8      	str	r0, [r7, #28]
 800eb56:	e008      	b.n	800eb6a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800eb58:	69bb      	ldr	r3, [r7, #24]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d105      	bne.n	800eb6a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800eb5e:	2200      	movs	r2, #0
 800eb60:	68b9      	ldr	r1, [r7, #8]
 800eb62:	68f8      	ldr	r0, [r7, #12]
 800eb64:	f000 fc5f 	bl	800f426 <xQueueGenericCreate>
 800eb68:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800eb6a:	69fb      	ldr	r3, [r7, #28]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d00c      	beq.n	800eb8a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d003      	beq.n	800eb7e <osMessageQueueNew+0xd0>
        name = attr->name;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	617b      	str	r3, [r7, #20]
 800eb7c:	e001      	b.n	800eb82 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800eb82:	6979      	ldr	r1, [r7, #20]
 800eb84:	69f8      	ldr	r0, [r7, #28]
 800eb86:	f001 fa1b 	bl	800ffc0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800eb8a:	69fb      	ldr	r3, [r7, #28]
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3720      	adds	r7, #32
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}

0800eb94 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b088      	sub	sp, #32
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	60f8      	str	r0, [r7, #12]
 800eb9c:	60b9      	str	r1, [r7, #8]
 800eb9e:	603b      	str	r3, [r7, #0]
 800eba0:	4613      	mov	r3, r2
 800eba2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ebac:	f3ef 8305 	mrs	r3, IPSR
 800ebb0:	617b      	str	r3, [r7, #20]
  return(result);
 800ebb2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d028      	beq.n	800ec0a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ebb8:	69bb      	ldr	r3, [r7, #24]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d005      	beq.n	800ebca <osMessageQueuePut+0x36>
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d002      	beq.n	800ebca <osMessageQueuePut+0x36>
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d003      	beq.n	800ebd2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ebca:	f06f 0303 	mvn.w	r3, #3
 800ebce:	61fb      	str	r3, [r7, #28]
 800ebd0:	e038      	b.n	800ec44 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ebd6:	f107 0210 	add.w	r2, r7, #16
 800ebda:	2300      	movs	r3, #0
 800ebdc:	68b9      	ldr	r1, [r7, #8]
 800ebde:	69b8      	ldr	r0, [r7, #24]
 800ebe0:	f000 fdb4 	bl	800f74c <xQueueGenericSendFromISR>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	2b01      	cmp	r3, #1
 800ebe8:	d003      	beq.n	800ebf2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ebea:	f06f 0302 	mvn.w	r3, #2
 800ebee:	61fb      	str	r3, [r7, #28]
 800ebf0:	e028      	b.n	800ec44 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d025      	beq.n	800ec44 <osMessageQueuePut+0xb0>
 800ebf8:	4b15      	ldr	r3, [pc, #84]	@ (800ec50 <osMessageQueuePut+0xbc>)
 800ebfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebfe:	601a      	str	r2, [r3, #0]
 800ec00:	f3bf 8f4f 	dsb	sy
 800ec04:	f3bf 8f6f 	isb	sy
 800ec08:	e01c      	b.n	800ec44 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ec0a:	69bb      	ldr	r3, [r7, #24]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d002      	beq.n	800ec16 <osMessageQueuePut+0x82>
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d103      	bne.n	800ec1e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ec16:	f06f 0303 	mvn.w	r3, #3
 800ec1a:	61fb      	str	r3, [r7, #28]
 800ec1c:	e012      	b.n	800ec44 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ec1e:	2300      	movs	r3, #0
 800ec20:	683a      	ldr	r2, [r7, #0]
 800ec22:	68b9      	ldr	r1, [r7, #8]
 800ec24:	69b8      	ldr	r0, [r7, #24]
 800ec26:	f000 fc8f 	bl	800f548 <xQueueGenericSend>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	d009      	beq.n	800ec44 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d003      	beq.n	800ec3e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ec36:	f06f 0301 	mvn.w	r3, #1
 800ec3a:	61fb      	str	r3, [r7, #28]
 800ec3c:	e002      	b.n	800ec44 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ec3e:	f06f 0302 	mvn.w	r3, #2
 800ec42:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ec44:	69fb      	ldr	r3, [r7, #28]
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	3720      	adds	r7, #32
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	e000ed04 	.word	0xe000ed04

0800ec54 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b088      	sub	sp, #32
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	60b9      	str	r1, [r7, #8]
 800ec5e:	607a      	str	r2, [r7, #4]
 800ec60:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ec66:	2300      	movs	r3, #0
 800ec68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec6a:	f3ef 8305 	mrs	r3, IPSR
 800ec6e:	617b      	str	r3, [r7, #20]
  return(result);
 800ec70:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d028      	beq.n	800ecc8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ec76:	69bb      	ldr	r3, [r7, #24]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d005      	beq.n	800ec88 <osMessageQueueGet+0x34>
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d002      	beq.n	800ec88 <osMessageQueueGet+0x34>
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d003      	beq.n	800ec90 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ec88:	f06f 0303 	mvn.w	r3, #3
 800ec8c:	61fb      	str	r3, [r7, #28]
 800ec8e:	e037      	b.n	800ed00 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ec90:	2300      	movs	r3, #0
 800ec92:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ec94:	f107 0310 	add.w	r3, r7, #16
 800ec98:	461a      	mov	r2, r3
 800ec9a:	68b9      	ldr	r1, [r7, #8]
 800ec9c:	69b8      	ldr	r0, [r7, #24]
 800ec9e:	f000 ffe5 	bl	800fc6c <xQueueReceiveFromISR>
 800eca2:	4603      	mov	r3, r0
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	d003      	beq.n	800ecb0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800eca8:	f06f 0302 	mvn.w	r3, #2
 800ecac:	61fb      	str	r3, [r7, #28]
 800ecae:	e027      	b.n	800ed00 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d024      	beq.n	800ed00 <osMessageQueueGet+0xac>
 800ecb6:	4b15      	ldr	r3, [pc, #84]	@ (800ed0c <osMessageQueueGet+0xb8>)
 800ecb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecbc:	601a      	str	r2, [r3, #0]
 800ecbe:	f3bf 8f4f 	dsb	sy
 800ecc2:	f3bf 8f6f 	isb	sy
 800ecc6:	e01b      	b.n	800ed00 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ecc8:	69bb      	ldr	r3, [r7, #24]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d002      	beq.n	800ecd4 <osMessageQueueGet+0x80>
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d103      	bne.n	800ecdc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ecd4:	f06f 0303 	mvn.w	r3, #3
 800ecd8:	61fb      	str	r3, [r7, #28]
 800ecda:	e011      	b.n	800ed00 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ecdc:	683a      	ldr	r2, [r7, #0]
 800ecde:	68b9      	ldr	r1, [r7, #8]
 800ece0:	69b8      	ldr	r0, [r7, #24]
 800ece2:	f000 fdd1 	bl	800f888 <xQueueReceive>
 800ece6:	4603      	mov	r3, r0
 800ece8:	2b01      	cmp	r3, #1
 800ecea:	d009      	beq.n	800ed00 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d003      	beq.n	800ecfa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ecf2:	f06f 0301 	mvn.w	r3, #1
 800ecf6:	61fb      	str	r3, [r7, #28]
 800ecf8:	e002      	b.n	800ed00 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ecfa:	f06f 0302 	mvn.w	r3, #2
 800ecfe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ed00:	69fb      	ldr	r3, [r7, #28]
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	3720      	adds	r7, #32
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}
 800ed0a:	bf00      	nop
 800ed0c:	e000ed04 	.word	0xe000ed04

0800ed10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ed10:	b480      	push	{r7}
 800ed12:	b085      	sub	sp, #20
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	60f8      	str	r0, [r7, #12]
 800ed18:	60b9      	str	r1, [r7, #8]
 800ed1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	4a07      	ldr	r2, [pc, #28]	@ (800ed3c <vApplicationGetIdleTaskMemory+0x2c>)
 800ed20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	4a06      	ldr	r2, [pc, #24]	@ (800ed40 <vApplicationGetIdleTaskMemory+0x30>)
 800ed26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2280      	movs	r2, #128	@ 0x80
 800ed2c:	601a      	str	r2, [r3, #0]
}
 800ed2e:	bf00      	nop
 800ed30:	3714      	adds	r7, #20
 800ed32:	46bd      	mov	sp, r7
 800ed34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed38:	4770      	bx	lr
 800ed3a:	bf00      	nop
 800ed3c:	20002b54 	.word	0x20002b54
 800ed40:	20002c04 	.word	0x20002c04

0800ed44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ed44:	b480      	push	{r7}
 800ed46:	b085      	sub	sp, #20
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	60f8      	str	r0, [r7, #12]
 800ed4c:	60b9      	str	r1, [r7, #8]
 800ed4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	4a07      	ldr	r2, [pc, #28]	@ (800ed70 <vApplicationGetTimerTaskMemory+0x2c>)
 800ed54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	4a06      	ldr	r2, [pc, #24]	@ (800ed74 <vApplicationGetTimerTaskMemory+0x30>)
 800ed5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ed62:	601a      	str	r2, [r3, #0]
}
 800ed64:	bf00      	nop
 800ed66:	3714      	adds	r7, #20
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6e:	4770      	bx	lr
 800ed70:	20002e04 	.word	0x20002e04
 800ed74:	20002eb4 	.word	0x20002eb4

0800ed78 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b082      	sub	sp, #8
 800ed7c:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800ed7e:	2020      	movs	r0, #32
 800ed80:	f003 fe24 	bl	80129cc <pvPortMalloc>
 800ed84:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d00a      	beq.n	800eda2 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	3304      	adds	r3, #4
 800ed96:	4618      	mov	r0, r3
 800ed98:	f000 f9aa 	bl	800f0f0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800eda2:	687b      	ldr	r3, [r7, #4]
	}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3708      	adds	r7, #8
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b090      	sub	sp, #64	@ 0x40
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	60f8      	str	r0, [r7, #12]
 800edb4:	60b9      	str	r1, [r7, #8]
 800edb6:	607a      	str	r2, [r7, #4]
 800edb8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800edbe:	2300      	movs	r3, #0
 800edc0:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800edc2:	2300      	movs	r3, #0
 800edc4:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d10b      	bne.n	800ede4 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800edcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edd0:	f383 8811 	msr	BASEPRI, r3
 800edd4:	f3bf 8f6f 	isb	sy
 800edd8:	f3bf 8f4f 	dsb	sy
 800eddc:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800edde:	bf00      	nop
 800ede0:	bf00      	nop
 800ede2:	e7fd      	b.n	800ede0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800edea:	d30b      	bcc.n	800ee04 <xEventGroupWaitBits+0x58>
	__asm volatile
 800edec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edf0:	f383 8811 	msr	BASEPRI, r3
 800edf4:	f3bf 8f6f 	isb	sy
 800edf8:	f3bf 8f4f 	dsb	sy
 800edfc:	61fb      	str	r3, [r7, #28]
}
 800edfe:	bf00      	nop
 800ee00:	bf00      	nop
 800ee02:	e7fd      	b.n	800ee00 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d10b      	bne.n	800ee22 <xEventGroupWaitBits+0x76>
	__asm volatile
 800ee0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee0e:	f383 8811 	msr	BASEPRI, r3
 800ee12:	f3bf 8f6f 	isb	sy
 800ee16:	f3bf 8f4f 	dsb	sy
 800ee1a:	61bb      	str	r3, [r7, #24]
}
 800ee1c:	bf00      	nop
 800ee1e:	bf00      	nop
 800ee20:	e7fd      	b.n	800ee1e <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ee22:	f002 fc3d 	bl	80116a0 <xTaskGetSchedulerState>
 800ee26:	4603      	mov	r3, r0
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d102      	bne.n	800ee32 <xEventGroupWaitBits+0x86>
 800ee2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d101      	bne.n	800ee36 <xEventGroupWaitBits+0x8a>
 800ee32:	2301      	movs	r3, #1
 800ee34:	e000      	b.n	800ee38 <xEventGroupWaitBits+0x8c>
 800ee36:	2300      	movs	r3, #0
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d10b      	bne.n	800ee54 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800ee3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee40:	f383 8811 	msr	BASEPRI, r3
 800ee44:	f3bf 8f6f 	isb	sy
 800ee48:	f3bf 8f4f 	dsb	sy
 800ee4c:	617b      	str	r3, [r7, #20]
}
 800ee4e:	bf00      	nop
 800ee50:	bf00      	nop
 800ee52:	e7fd      	b.n	800ee50 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800ee54:	f001 fdfe 	bl	8010a54 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800ee58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800ee5e:	683a      	ldr	r2, [r7, #0]
 800ee60:	68b9      	ldr	r1, [r7, #8]
 800ee62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ee64:	f000 f90d 	bl	800f082 <prvTestWaitCondition>
 800ee68:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800ee6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d00e      	beq.n	800ee8e <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800ee70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee72:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800ee74:	2300      	movs	r3, #0
 800ee76:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d028      	beq.n	800eed0 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800ee7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee80:	681a      	ldr	r2, [r3, #0]
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	43db      	mvns	r3, r3
 800ee86:	401a      	ands	r2, r3
 800ee88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee8a:	601a      	str	r2, [r3, #0]
 800ee8c:	e020      	b.n	800eed0 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800ee8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d104      	bne.n	800ee9e <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800ee94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee96:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800ee98:	2301      	movs	r3, #1
 800ee9a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee9c:	e018      	b.n	800eed0 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d003      	beq.n	800eeac <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800eea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eea6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800eeaa:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d003      	beq.n	800eeba <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800eeb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeb4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800eeb8:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800eeba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eebc:	1d18      	adds	r0, r3, #4
 800eebe:	68ba      	ldr	r2, [r7, #8]
 800eec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eec2:	4313      	orrs	r3, r2
 800eec4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eec6:	4619      	mov	r1, r3
 800eec8:	f002 f8b8 	bl	801103c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800eecc:	2300      	movs	r3, #0
 800eece:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800eed0:	f001 fdce 	bl	8010a70 <xTaskResumeAll>
 800eed4:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800eed6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d031      	beq.n	800ef40 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800eedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d107      	bne.n	800eef2 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800eee2:	4b1a      	ldr	r3, [pc, #104]	@ (800ef4c <xEventGroupWaitBits+0x1a0>)
 800eee4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eee8:	601a      	str	r2, [r3, #0]
 800eeea:	f3bf 8f4f 	dsb	sy
 800eeee:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800eef2:	f002 fd4f 	bl	8011994 <uxTaskResetEventItemValue>
 800eef6:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800eef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eefa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d11a      	bne.n	800ef38 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800ef02:	f003 fc41 	bl	8012788 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800ef06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800ef0c:	683a      	ldr	r2, [r7, #0]
 800ef0e:	68b9      	ldr	r1, [r7, #8]
 800ef10:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ef12:	f000 f8b6 	bl	800f082 <prvTestWaitCondition>
 800ef16:	4603      	mov	r3, r0
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d009      	beq.n	800ef30 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d006      	beq.n	800ef30 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800ef22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef24:	681a      	ldr	r2, [r3, #0]
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	43db      	mvns	r3, r3
 800ef2a:	401a      	ands	r2, r3
 800ef2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef2e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800ef30:	2301      	movs	r3, #1
 800ef32:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800ef34:	f003 fc5a 	bl	80127ec <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800ef38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef3a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ef3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800ef40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3740      	adds	r7, #64	@ 0x40
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}
 800ef4a:	bf00      	nop
 800ef4c:	e000ed04 	.word	0xe000ed04

0800ef50 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b08e      	sub	sp, #56	@ 0x38
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800ef62:	2300      	movs	r3, #0
 800ef64:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d10b      	bne.n	800ef84 <xEventGroupSetBits+0x34>
	__asm volatile
 800ef6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef70:	f383 8811 	msr	BASEPRI, r3
 800ef74:	f3bf 8f6f 	isb	sy
 800ef78:	f3bf 8f4f 	dsb	sy
 800ef7c:	613b      	str	r3, [r7, #16]
}
 800ef7e:	bf00      	nop
 800ef80:	bf00      	nop
 800ef82:	e7fd      	b.n	800ef80 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ef8a:	d30b      	bcc.n	800efa4 <xEventGroupSetBits+0x54>
	__asm volatile
 800ef8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef90:	f383 8811 	msr	BASEPRI, r3
 800ef94:	f3bf 8f6f 	isb	sy
 800ef98:	f3bf 8f4f 	dsb	sy
 800ef9c:	60fb      	str	r3, [r7, #12]
}
 800ef9e:	bf00      	nop
 800efa0:	bf00      	nop
 800efa2:	e7fd      	b.n	800efa0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800efa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efa6:	3304      	adds	r3, #4
 800efa8:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800efaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efac:	3308      	adds	r3, #8
 800efae:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800efb0:	f001 fd50 	bl	8010a54 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800efb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efb6:	68db      	ldr	r3, [r3, #12]
 800efb8:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800efba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efbc:	681a      	ldr	r2, [r3, #0]
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	431a      	orrs	r2, r3
 800efc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efc4:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800efc6:	e03c      	b.n	800f042 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800efc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efca:	685b      	ldr	r3, [r3, #4]
 800efcc:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800efce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800efd4:	2300      	movs	r3, #0
 800efd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800efd8:	69bb      	ldr	r3, [r7, #24]
 800efda:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800efde:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800efe0:	69bb      	ldr	r3, [r7, #24]
 800efe2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800efe6:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d108      	bne.n	800f004 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800eff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eff4:	681a      	ldr	r2, [r3, #0]
 800eff6:	69bb      	ldr	r3, [r7, #24]
 800eff8:	4013      	ands	r3, r2
 800effa:	2b00      	cmp	r3, #0
 800effc:	d00b      	beq.n	800f016 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800effe:	2301      	movs	r3, #1
 800f000:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f002:	e008      	b.n	800f016 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800f004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f006:	681a      	ldr	r2, [r3, #0]
 800f008:	69bb      	ldr	r3, [r7, #24]
 800f00a:	4013      	ands	r3, r2
 800f00c:	69ba      	ldr	r2, [r7, #24]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d101      	bne.n	800f016 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800f012:	2301      	movs	r3, #1
 800f014:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800f016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d010      	beq.n	800f03e <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f022:	2b00      	cmp	r3, #0
 800f024:	d003      	beq.n	800f02e <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800f026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f028:	69bb      	ldr	r3, [r7, #24]
 800f02a:	4313      	orrs	r3, r2
 800f02c:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800f02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800f036:	4619      	mov	r1, r3
 800f038:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f03a:	f002 f8cd 	bl	80111d8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800f03e:	69fb      	ldr	r3, [r7, #28]
 800f040:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800f042:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f044:	6a3b      	ldr	r3, [r7, #32]
 800f046:	429a      	cmp	r2, r3
 800f048:	d1be      	bne.n	800efc8 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800f04a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f04c:	681a      	ldr	r2, [r3, #0]
 800f04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f050:	43db      	mvns	r3, r3
 800f052:	401a      	ands	r2, r3
 800f054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f056:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800f058:	f001 fd0a 	bl	8010a70 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800f05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f05e:	681b      	ldr	r3, [r3, #0]
}
 800f060:	4618      	mov	r0, r3
 800f062:	3738      	adds	r7, #56	@ 0x38
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b082      	sub	sp, #8
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800f072:	6839      	ldr	r1, [r7, #0]
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f7ff ff6b 	bl	800ef50 <xEventGroupSetBits>
}
 800f07a:	bf00      	nop
 800f07c:	3708      	adds	r7, #8
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}

0800f082 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800f082:	b480      	push	{r7}
 800f084:	b087      	sub	sp, #28
 800f086:	af00      	add	r7, sp, #0
 800f088:	60f8      	str	r0, [r7, #12]
 800f08a:	60b9      	str	r1, [r7, #8]
 800f08c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800f08e:	2300      	movs	r3, #0
 800f090:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d107      	bne.n	800f0a8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800f098:	68fa      	ldr	r2, [r7, #12]
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	4013      	ands	r3, r2
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d00a      	beq.n	800f0b8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800f0a2:	2301      	movs	r3, #1
 800f0a4:	617b      	str	r3, [r7, #20]
 800f0a6:	e007      	b.n	800f0b8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800f0a8:	68fa      	ldr	r2, [r7, #12]
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	4013      	ands	r3, r2
 800f0ae:	68ba      	ldr	r2, [r7, #8]
 800f0b0:	429a      	cmp	r2, r3
 800f0b2:	d101      	bne.n	800f0b8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800f0b8:	697b      	ldr	r3, [r7, #20]
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	371c      	adds	r7, #28
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c4:	4770      	bx	lr
	...

0800f0c8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b086      	sub	sp, #24
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	60f8      	str	r0, [r7, #12]
 800f0d0:	60b9      	str	r1, [r7, #8]
 800f0d2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	68ba      	ldr	r2, [r7, #8]
 800f0d8:	68f9      	ldr	r1, [r7, #12]
 800f0da:	4804      	ldr	r0, [pc, #16]	@ (800f0ec <xEventGroupSetBitsFromISR+0x24>)
 800f0dc:	f003 fa00 	bl	80124e0 <xTimerPendFunctionCallFromISR>
 800f0e0:	6178      	str	r0, [r7, #20]

		return xReturn;
 800f0e2:	697b      	ldr	r3, [r7, #20]
	}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3718      	adds	r7, #24
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}
 800f0ec:	0800f069 	.word	0x0800f069

0800f0f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	b083      	sub	sp, #12
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f103 0208 	add.w	r2, r3, #8
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f04f 32ff 	mov.w	r2, #4294967295
 800f108:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f103 0208 	add.w	r2, r3, #8
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f103 0208 	add.w	r2, r3, #8
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2200      	movs	r2, #0
 800f122:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f124:	bf00      	nop
 800f126:	370c      	adds	r7, #12
 800f128:	46bd      	mov	sp, r7
 800f12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12e:	4770      	bx	lr

0800f130 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f130:	b480      	push	{r7}
 800f132:	b083      	sub	sp, #12
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2200      	movs	r2, #0
 800f13c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f13e:	bf00      	nop
 800f140:	370c      	adds	r7, #12
 800f142:	46bd      	mov	sp, r7
 800f144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f148:	4770      	bx	lr

0800f14a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f14a:	b480      	push	{r7}
 800f14c:	b085      	sub	sp, #20
 800f14e:	af00      	add	r7, sp, #0
 800f150:	6078      	str	r0, [r7, #4]
 800f152:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	68fa      	ldr	r2, [r7, #12]
 800f15e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	689a      	ldr	r2, [r3, #8]
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	689b      	ldr	r3, [r3, #8]
 800f16c:	683a      	ldr	r2, [r7, #0]
 800f16e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	683a      	ldr	r2, [r7, #0]
 800f174:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	687a      	ldr	r2, [r7, #4]
 800f17a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	1c5a      	adds	r2, r3, #1
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	601a      	str	r2, [r3, #0]
}
 800f186:	bf00      	nop
 800f188:	3714      	adds	r7, #20
 800f18a:	46bd      	mov	sp, r7
 800f18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f190:	4770      	bx	lr

0800f192 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f192:	b480      	push	{r7}
 800f194:	b085      	sub	sp, #20
 800f196:	af00      	add	r7, sp, #0
 800f198:	6078      	str	r0, [r7, #4]
 800f19a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1a8:	d103      	bne.n	800f1b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	691b      	ldr	r3, [r3, #16]
 800f1ae:	60fb      	str	r3, [r7, #12]
 800f1b0:	e00c      	b.n	800f1cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	3308      	adds	r3, #8
 800f1b6:	60fb      	str	r3, [r7, #12]
 800f1b8:	e002      	b.n	800f1c0 <vListInsert+0x2e>
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	60fb      	str	r3, [r7, #12]
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	685b      	ldr	r3, [r3, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	68ba      	ldr	r2, [r7, #8]
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	d2f6      	bcs.n	800f1ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	685a      	ldr	r2, [r3, #4]
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	685b      	ldr	r3, [r3, #4]
 800f1d8:	683a      	ldr	r2, [r7, #0]
 800f1da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	68fa      	ldr	r2, [r7, #12]
 800f1e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	683a      	ldr	r2, [r7, #0]
 800f1e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	687a      	ldr	r2, [r7, #4]
 800f1ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	1c5a      	adds	r2, r3, #1
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	601a      	str	r2, [r3, #0]
}
 800f1f8:	bf00      	nop
 800f1fa:	3714      	adds	r7, #20
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr

0800f204 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f204:	b480      	push	{r7}
 800f206:	b085      	sub	sp, #20
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	691b      	ldr	r3, [r3, #16]
 800f210:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	685b      	ldr	r3, [r3, #4]
 800f216:	687a      	ldr	r2, [r7, #4]
 800f218:	6892      	ldr	r2, [r2, #8]
 800f21a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	689b      	ldr	r3, [r3, #8]
 800f220:	687a      	ldr	r2, [r7, #4]
 800f222:	6852      	ldr	r2, [r2, #4]
 800f224:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	687a      	ldr	r2, [r7, #4]
 800f22c:	429a      	cmp	r2, r3
 800f22e:	d103      	bne.n	800f238 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	689a      	ldr	r2, [r3, #8]
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2200      	movs	r2, #0
 800f23c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	1e5a      	subs	r2, r3, #1
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	681b      	ldr	r3, [r3, #0]
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3714      	adds	r7, #20
 800f250:	46bd      	mov	sp, r7
 800f252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f256:	4770      	bx	lr

0800f258 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b084      	sub	sp, #16
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d10b      	bne.n	800f284 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f26c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f270:	f383 8811 	msr	BASEPRI, r3
 800f274:	f3bf 8f6f 	isb	sy
 800f278:	f3bf 8f4f 	dsb	sy
 800f27c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f27e:	bf00      	nop
 800f280:	bf00      	nop
 800f282:	e7fd      	b.n	800f280 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f284:	f003 fa80 	bl	8012788 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	681a      	ldr	r2, [r3, #0]
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f290:	68f9      	ldr	r1, [r7, #12]
 800f292:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f294:	fb01 f303 	mul.w	r3, r1, r3
 800f298:	441a      	add	r2, r3
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	681a      	ldr	r2, [r3, #0]
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	681a      	ldr	r2, [r3, #0]
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2b4:	3b01      	subs	r3, #1
 800f2b6:	68f9      	ldr	r1, [r7, #12]
 800f2b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f2ba:	fb01 f303 	mul.w	r3, r1, r3
 800f2be:	441a      	add	r2, r3
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	22ff      	movs	r2, #255	@ 0xff
 800f2c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	22ff      	movs	r2, #255	@ 0xff
 800f2d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d114      	bne.n	800f304 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	691b      	ldr	r3, [r3, #16]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d01a      	beq.n	800f318 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	3310      	adds	r3, #16
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f001 ff12 	bl	8011110 <xTaskRemoveFromEventList>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d012      	beq.n	800f318 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f2f2:	4b0d      	ldr	r3, [pc, #52]	@ (800f328 <xQueueGenericReset+0xd0>)
 800f2f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2f8:	601a      	str	r2, [r3, #0]
 800f2fa:	f3bf 8f4f 	dsb	sy
 800f2fe:	f3bf 8f6f 	isb	sy
 800f302:	e009      	b.n	800f318 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	3310      	adds	r3, #16
 800f308:	4618      	mov	r0, r3
 800f30a:	f7ff fef1 	bl	800f0f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	3324      	adds	r3, #36	@ 0x24
 800f312:	4618      	mov	r0, r3
 800f314:	f7ff feec 	bl	800f0f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f318:	f003 fa68 	bl	80127ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f31c:	2301      	movs	r3, #1
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3710      	adds	r7, #16
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
 800f326:	bf00      	nop
 800f328:	e000ed04 	.word	0xe000ed04

0800f32c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b08e      	sub	sp, #56	@ 0x38
 800f330:	af02      	add	r7, sp, #8
 800f332:	60f8      	str	r0, [r7, #12]
 800f334:	60b9      	str	r1, [r7, #8]
 800f336:	607a      	str	r2, [r7, #4]
 800f338:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d10b      	bne.n	800f358 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800f340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f344:	f383 8811 	msr	BASEPRI, r3
 800f348:	f3bf 8f6f 	isb	sy
 800f34c:	f3bf 8f4f 	dsb	sy
 800f350:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f352:	bf00      	nop
 800f354:	bf00      	nop
 800f356:	e7fd      	b.n	800f354 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d10b      	bne.n	800f376 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800f35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f362:	f383 8811 	msr	BASEPRI, r3
 800f366:	f3bf 8f6f 	isb	sy
 800f36a:	f3bf 8f4f 	dsb	sy
 800f36e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f370:	bf00      	nop
 800f372:	bf00      	nop
 800f374:	e7fd      	b.n	800f372 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d002      	beq.n	800f382 <xQueueGenericCreateStatic+0x56>
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d001      	beq.n	800f386 <xQueueGenericCreateStatic+0x5a>
 800f382:	2301      	movs	r3, #1
 800f384:	e000      	b.n	800f388 <xQueueGenericCreateStatic+0x5c>
 800f386:	2300      	movs	r3, #0
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d10b      	bne.n	800f3a4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800f38c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f390:	f383 8811 	msr	BASEPRI, r3
 800f394:	f3bf 8f6f 	isb	sy
 800f398:	f3bf 8f4f 	dsb	sy
 800f39c:	623b      	str	r3, [r7, #32]
}
 800f39e:	bf00      	nop
 800f3a0:	bf00      	nop
 800f3a2:	e7fd      	b.n	800f3a0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d102      	bne.n	800f3b0 <xQueueGenericCreateStatic+0x84>
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d101      	bne.n	800f3b4 <xQueueGenericCreateStatic+0x88>
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	e000      	b.n	800f3b6 <xQueueGenericCreateStatic+0x8a>
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d10b      	bne.n	800f3d2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800f3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3be:	f383 8811 	msr	BASEPRI, r3
 800f3c2:	f3bf 8f6f 	isb	sy
 800f3c6:	f3bf 8f4f 	dsb	sy
 800f3ca:	61fb      	str	r3, [r7, #28]
}
 800f3cc:	bf00      	nop
 800f3ce:	bf00      	nop
 800f3d0:	e7fd      	b.n	800f3ce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f3d2:	2350      	movs	r3, #80	@ 0x50
 800f3d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	2b50      	cmp	r3, #80	@ 0x50
 800f3da:	d00b      	beq.n	800f3f4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800f3dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3e0:	f383 8811 	msr	BASEPRI, r3
 800f3e4:	f3bf 8f6f 	isb	sy
 800f3e8:	f3bf 8f4f 	dsb	sy
 800f3ec:	61bb      	str	r3, [r7, #24]
}
 800f3ee:	bf00      	nop
 800f3f0:	bf00      	nop
 800f3f2:	e7fd      	b.n	800f3f0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f3f4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f3fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d00d      	beq.n	800f41c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f402:	2201      	movs	r2, #1
 800f404:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f408:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f40e:	9300      	str	r3, [sp, #0]
 800f410:	4613      	mov	r3, r2
 800f412:	687a      	ldr	r2, [r7, #4]
 800f414:	68b9      	ldr	r1, [r7, #8]
 800f416:	68f8      	ldr	r0, [r7, #12]
 800f418:	f000 f840 	bl	800f49c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f41e:	4618      	mov	r0, r3
 800f420:	3730      	adds	r7, #48	@ 0x30
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}

0800f426 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f426:	b580      	push	{r7, lr}
 800f428:	b08a      	sub	sp, #40	@ 0x28
 800f42a:	af02      	add	r7, sp, #8
 800f42c:	60f8      	str	r0, [r7, #12]
 800f42e:	60b9      	str	r1, [r7, #8]
 800f430:	4613      	mov	r3, r2
 800f432:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d10b      	bne.n	800f452 <xQueueGenericCreate+0x2c>
	__asm volatile
 800f43a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f43e:	f383 8811 	msr	BASEPRI, r3
 800f442:	f3bf 8f6f 	isb	sy
 800f446:	f3bf 8f4f 	dsb	sy
 800f44a:	613b      	str	r3, [r7, #16]
}
 800f44c:	bf00      	nop
 800f44e:	bf00      	nop
 800f450:	e7fd      	b.n	800f44e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	68ba      	ldr	r2, [r7, #8]
 800f456:	fb02 f303 	mul.w	r3, r2, r3
 800f45a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f45c:	69fb      	ldr	r3, [r7, #28]
 800f45e:	3350      	adds	r3, #80	@ 0x50
 800f460:	4618      	mov	r0, r3
 800f462:	f003 fab3 	bl	80129cc <pvPortMalloc>
 800f466:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f468:	69bb      	ldr	r3, [r7, #24]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d011      	beq.n	800f492 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f46e:	69bb      	ldr	r3, [r7, #24]
 800f470:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	3350      	adds	r3, #80	@ 0x50
 800f476:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f478:	69bb      	ldr	r3, [r7, #24]
 800f47a:	2200      	movs	r2, #0
 800f47c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f480:	79fa      	ldrb	r2, [r7, #7]
 800f482:	69bb      	ldr	r3, [r7, #24]
 800f484:	9300      	str	r3, [sp, #0]
 800f486:	4613      	mov	r3, r2
 800f488:	697a      	ldr	r2, [r7, #20]
 800f48a:	68b9      	ldr	r1, [r7, #8]
 800f48c:	68f8      	ldr	r0, [r7, #12]
 800f48e:	f000 f805 	bl	800f49c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f492:	69bb      	ldr	r3, [r7, #24]
	}
 800f494:	4618      	mov	r0, r3
 800f496:	3720      	adds	r7, #32
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}

0800f49c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b084      	sub	sp, #16
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	60f8      	str	r0, [r7, #12]
 800f4a4:	60b9      	str	r1, [r7, #8]
 800f4a6:	607a      	str	r2, [r7, #4]
 800f4a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d103      	bne.n	800f4b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f4b0:	69bb      	ldr	r3, [r7, #24]
 800f4b2:	69ba      	ldr	r2, [r7, #24]
 800f4b4:	601a      	str	r2, [r3, #0]
 800f4b6:	e002      	b.n	800f4be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	687a      	ldr	r2, [r7, #4]
 800f4bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f4be:	69bb      	ldr	r3, [r7, #24]
 800f4c0:	68fa      	ldr	r2, [r7, #12]
 800f4c2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f4c4:	69bb      	ldr	r3, [r7, #24]
 800f4c6:	68ba      	ldr	r2, [r7, #8]
 800f4c8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f4ca:	2101      	movs	r1, #1
 800f4cc:	69b8      	ldr	r0, [r7, #24]
 800f4ce:	f7ff fec3 	bl	800f258 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f4d2:	69bb      	ldr	r3, [r7, #24]
 800f4d4:	78fa      	ldrb	r2, [r7, #3]
 800f4d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f4da:	bf00      	nop
 800f4dc:	3710      	adds	r7, #16
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}

0800f4e2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f4e2:	b580      	push	{r7, lr}
 800f4e4:	b082      	sub	sp, #8
 800f4e6:	af00      	add	r7, sp, #0
 800f4e8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d00e      	beq.n	800f50e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2200      	movs	r2, #0
 800f500:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f502:	2300      	movs	r3, #0
 800f504:	2200      	movs	r2, #0
 800f506:	2100      	movs	r1, #0
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f000 f81d 	bl	800f548 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f50e:	bf00      	nop
 800f510:	3708      	adds	r7, #8
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}

0800f516 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f516:	b580      	push	{r7, lr}
 800f518:	b086      	sub	sp, #24
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	4603      	mov	r3, r0
 800f51e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f520:	2301      	movs	r3, #1
 800f522:	617b      	str	r3, [r7, #20]
 800f524:	2300      	movs	r3, #0
 800f526:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f528:	79fb      	ldrb	r3, [r7, #7]
 800f52a:	461a      	mov	r2, r3
 800f52c:	6939      	ldr	r1, [r7, #16]
 800f52e:	6978      	ldr	r0, [r7, #20]
 800f530:	f7ff ff79 	bl	800f426 <xQueueGenericCreate>
 800f534:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f536:	68f8      	ldr	r0, [r7, #12]
 800f538:	f7ff ffd3 	bl	800f4e2 <prvInitialiseMutex>

		return xNewQueue;
 800f53c:	68fb      	ldr	r3, [r7, #12]
	}
 800f53e:	4618      	mov	r0, r3
 800f540:	3718      	adds	r7, #24
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
	...

0800f548 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b08e      	sub	sp, #56	@ 0x38
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	60f8      	str	r0, [r7, #12]
 800f550:	60b9      	str	r1, [r7, #8]
 800f552:	607a      	str	r2, [r7, #4]
 800f554:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f556:	2300      	movs	r3, #0
 800f558:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f55e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f560:	2b00      	cmp	r3, #0
 800f562:	d10b      	bne.n	800f57c <xQueueGenericSend+0x34>
	__asm volatile
 800f564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f568:	f383 8811 	msr	BASEPRI, r3
 800f56c:	f3bf 8f6f 	isb	sy
 800f570:	f3bf 8f4f 	dsb	sy
 800f574:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f576:	bf00      	nop
 800f578:	bf00      	nop
 800f57a:	e7fd      	b.n	800f578 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d103      	bne.n	800f58a <xQueueGenericSend+0x42>
 800f582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f586:	2b00      	cmp	r3, #0
 800f588:	d101      	bne.n	800f58e <xQueueGenericSend+0x46>
 800f58a:	2301      	movs	r3, #1
 800f58c:	e000      	b.n	800f590 <xQueueGenericSend+0x48>
 800f58e:	2300      	movs	r3, #0
 800f590:	2b00      	cmp	r3, #0
 800f592:	d10b      	bne.n	800f5ac <xQueueGenericSend+0x64>
	__asm volatile
 800f594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f598:	f383 8811 	msr	BASEPRI, r3
 800f59c:	f3bf 8f6f 	isb	sy
 800f5a0:	f3bf 8f4f 	dsb	sy
 800f5a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f5a6:	bf00      	nop
 800f5a8:	bf00      	nop
 800f5aa:	e7fd      	b.n	800f5a8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	2b02      	cmp	r3, #2
 800f5b0:	d103      	bne.n	800f5ba <xQueueGenericSend+0x72>
 800f5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5b6:	2b01      	cmp	r3, #1
 800f5b8:	d101      	bne.n	800f5be <xQueueGenericSend+0x76>
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	e000      	b.n	800f5c0 <xQueueGenericSend+0x78>
 800f5be:	2300      	movs	r3, #0
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d10b      	bne.n	800f5dc <xQueueGenericSend+0x94>
	__asm volatile
 800f5c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5c8:	f383 8811 	msr	BASEPRI, r3
 800f5cc:	f3bf 8f6f 	isb	sy
 800f5d0:	f3bf 8f4f 	dsb	sy
 800f5d4:	623b      	str	r3, [r7, #32]
}
 800f5d6:	bf00      	nop
 800f5d8:	bf00      	nop
 800f5da:	e7fd      	b.n	800f5d8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f5dc:	f002 f860 	bl	80116a0 <xTaskGetSchedulerState>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d102      	bne.n	800f5ec <xQueueGenericSend+0xa4>
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d101      	bne.n	800f5f0 <xQueueGenericSend+0xa8>
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	e000      	b.n	800f5f2 <xQueueGenericSend+0xaa>
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d10b      	bne.n	800f60e <xQueueGenericSend+0xc6>
	__asm volatile
 800f5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5fa:	f383 8811 	msr	BASEPRI, r3
 800f5fe:	f3bf 8f6f 	isb	sy
 800f602:	f3bf 8f4f 	dsb	sy
 800f606:	61fb      	str	r3, [r7, #28]
}
 800f608:	bf00      	nop
 800f60a:	bf00      	nop
 800f60c:	e7fd      	b.n	800f60a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f60e:	f003 f8bb 	bl	8012788 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f614:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d302      	bcc.n	800f624 <xQueueGenericSend+0xdc>
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	2b02      	cmp	r3, #2
 800f622:	d129      	bne.n	800f678 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f624:	683a      	ldr	r2, [r7, #0]
 800f626:	68b9      	ldr	r1, [r7, #8]
 800f628:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f62a:	f000 fbb9 	bl	800fda0 <prvCopyDataToQueue>
 800f62e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f634:	2b00      	cmp	r3, #0
 800f636:	d010      	beq.n	800f65a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f63a:	3324      	adds	r3, #36	@ 0x24
 800f63c:	4618      	mov	r0, r3
 800f63e:	f001 fd67 	bl	8011110 <xTaskRemoveFromEventList>
 800f642:	4603      	mov	r3, r0
 800f644:	2b00      	cmp	r3, #0
 800f646:	d013      	beq.n	800f670 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f648:	4b3f      	ldr	r3, [pc, #252]	@ (800f748 <xQueueGenericSend+0x200>)
 800f64a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f64e:	601a      	str	r2, [r3, #0]
 800f650:	f3bf 8f4f 	dsb	sy
 800f654:	f3bf 8f6f 	isb	sy
 800f658:	e00a      	b.n	800f670 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f65a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d007      	beq.n	800f670 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f660:	4b39      	ldr	r3, [pc, #228]	@ (800f748 <xQueueGenericSend+0x200>)
 800f662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f666:	601a      	str	r2, [r3, #0]
 800f668:	f3bf 8f4f 	dsb	sy
 800f66c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f670:	f003 f8bc 	bl	80127ec <vPortExitCritical>
				return pdPASS;
 800f674:	2301      	movs	r3, #1
 800f676:	e063      	b.n	800f740 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d103      	bne.n	800f686 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f67e:	f003 f8b5 	bl	80127ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f682:	2300      	movs	r3, #0
 800f684:	e05c      	b.n	800f740 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d106      	bne.n	800f69a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f68c:	f107 0314 	add.w	r3, r7, #20
 800f690:	4618      	mov	r0, r3
 800f692:	f001 fe05 	bl	80112a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f696:	2301      	movs	r3, #1
 800f698:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f69a:	f003 f8a7 	bl	80127ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f69e:	f001 f9d9 	bl	8010a54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f6a2:	f003 f871 	bl	8012788 <vPortEnterCritical>
 800f6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f6ac:	b25b      	sxtb	r3, r3
 800f6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6b2:	d103      	bne.n	800f6bc <xQueueGenericSend+0x174>
 800f6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f6c2:	b25b      	sxtb	r3, r3
 800f6c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6c8:	d103      	bne.n	800f6d2 <xQueueGenericSend+0x18a>
 800f6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f6d2:	f003 f88b 	bl	80127ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f6d6:	1d3a      	adds	r2, r7, #4
 800f6d8:	f107 0314 	add.w	r3, r7, #20
 800f6dc:	4611      	mov	r1, r2
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f001 fdf4 	bl	80112cc <xTaskCheckForTimeOut>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d124      	bne.n	800f734 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f6ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f6ec:	f000 fc50 	bl	800ff90 <prvIsQueueFull>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d018      	beq.n	800f728 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6f8:	3310      	adds	r3, #16
 800f6fa:	687a      	ldr	r2, [r7, #4]
 800f6fc:	4611      	mov	r1, r2
 800f6fe:	4618      	mov	r0, r3
 800f700:	f001 fc76 	bl	8010ff0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f704:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f706:	f000 fbdb 	bl	800fec0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f70a:	f001 f9b1 	bl	8010a70 <xTaskResumeAll>
 800f70e:	4603      	mov	r3, r0
 800f710:	2b00      	cmp	r3, #0
 800f712:	f47f af7c 	bne.w	800f60e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f716:	4b0c      	ldr	r3, [pc, #48]	@ (800f748 <xQueueGenericSend+0x200>)
 800f718:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f71c:	601a      	str	r2, [r3, #0]
 800f71e:	f3bf 8f4f 	dsb	sy
 800f722:	f3bf 8f6f 	isb	sy
 800f726:	e772      	b.n	800f60e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f728:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f72a:	f000 fbc9 	bl	800fec0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f72e:	f001 f99f 	bl	8010a70 <xTaskResumeAll>
 800f732:	e76c      	b.n	800f60e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f734:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f736:	f000 fbc3 	bl	800fec0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f73a:	f001 f999 	bl	8010a70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f73e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f740:	4618      	mov	r0, r3
 800f742:	3738      	adds	r7, #56	@ 0x38
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}
 800f748:	e000ed04 	.word	0xe000ed04

0800f74c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b090      	sub	sp, #64	@ 0x40
 800f750:	af00      	add	r7, sp, #0
 800f752:	60f8      	str	r0, [r7, #12]
 800f754:	60b9      	str	r1, [r7, #8]
 800f756:	607a      	str	r2, [r7, #4]
 800f758:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800f75e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f760:	2b00      	cmp	r3, #0
 800f762:	d10b      	bne.n	800f77c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800f764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f768:	f383 8811 	msr	BASEPRI, r3
 800f76c:	f3bf 8f6f 	isb	sy
 800f770:	f3bf 8f4f 	dsb	sy
 800f774:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f776:	bf00      	nop
 800f778:	bf00      	nop
 800f77a:	e7fd      	b.n	800f778 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f77c:	68bb      	ldr	r3, [r7, #8]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d103      	bne.n	800f78a <xQueueGenericSendFromISR+0x3e>
 800f782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f786:	2b00      	cmp	r3, #0
 800f788:	d101      	bne.n	800f78e <xQueueGenericSendFromISR+0x42>
 800f78a:	2301      	movs	r3, #1
 800f78c:	e000      	b.n	800f790 <xQueueGenericSendFromISR+0x44>
 800f78e:	2300      	movs	r3, #0
 800f790:	2b00      	cmp	r3, #0
 800f792:	d10b      	bne.n	800f7ac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800f794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f798:	f383 8811 	msr	BASEPRI, r3
 800f79c:	f3bf 8f6f 	isb	sy
 800f7a0:	f3bf 8f4f 	dsb	sy
 800f7a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f7a6:	bf00      	nop
 800f7a8:	bf00      	nop
 800f7aa:	e7fd      	b.n	800f7a8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	2b02      	cmp	r3, #2
 800f7b0:	d103      	bne.n	800f7ba <xQueueGenericSendFromISR+0x6e>
 800f7b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7b6:	2b01      	cmp	r3, #1
 800f7b8:	d101      	bne.n	800f7be <xQueueGenericSendFromISR+0x72>
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	e000      	b.n	800f7c0 <xQueueGenericSendFromISR+0x74>
 800f7be:	2300      	movs	r3, #0
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d10b      	bne.n	800f7dc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800f7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7c8:	f383 8811 	msr	BASEPRI, r3
 800f7cc:	f3bf 8f6f 	isb	sy
 800f7d0:	f3bf 8f4f 	dsb	sy
 800f7d4:	623b      	str	r3, [r7, #32]
}
 800f7d6:	bf00      	nop
 800f7d8:	bf00      	nop
 800f7da:	e7fd      	b.n	800f7d8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f7dc:	f003 f8b4 	bl	8012948 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f7e0:	f3ef 8211 	mrs	r2, BASEPRI
 800f7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7e8:	f383 8811 	msr	BASEPRI, r3
 800f7ec:	f3bf 8f6f 	isb	sy
 800f7f0:	f3bf 8f4f 	dsb	sy
 800f7f4:	61fa      	str	r2, [r7, #28]
 800f7f6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f7f8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f7fa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f804:	429a      	cmp	r2, r3
 800f806:	d302      	bcc.n	800f80e <xQueueGenericSendFromISR+0xc2>
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	2b02      	cmp	r3, #2
 800f80c:	d12f      	bne.n	800f86e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f80e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f810:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f814:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f81a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f81c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f81e:	683a      	ldr	r2, [r7, #0]
 800f820:	68b9      	ldr	r1, [r7, #8]
 800f822:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f824:	f000 fabc 	bl	800fda0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f828:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800f82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f830:	d112      	bne.n	800f858 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f836:	2b00      	cmp	r3, #0
 800f838:	d016      	beq.n	800f868 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f83c:	3324      	adds	r3, #36	@ 0x24
 800f83e:	4618      	mov	r0, r3
 800f840:	f001 fc66 	bl	8011110 <xTaskRemoveFromEventList>
 800f844:	4603      	mov	r3, r0
 800f846:	2b00      	cmp	r3, #0
 800f848:	d00e      	beq.n	800f868 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d00b      	beq.n	800f868 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2201      	movs	r2, #1
 800f854:	601a      	str	r2, [r3, #0]
 800f856:	e007      	b.n	800f868 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f858:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f85c:	3301      	adds	r3, #1
 800f85e:	b2db      	uxtb	r3, r3
 800f860:	b25a      	sxtb	r2, r3
 800f862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f864:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f868:	2301      	movs	r3, #1
 800f86a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800f86c:	e001      	b.n	800f872 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f86e:	2300      	movs	r3, #0
 800f870:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f874:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f876:	697b      	ldr	r3, [r7, #20]
 800f878:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f87c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f87e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f880:	4618      	mov	r0, r3
 800f882:	3740      	adds	r7, #64	@ 0x40
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}

0800f888 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b08c      	sub	sp, #48	@ 0x30
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	60f8      	str	r0, [r7, #12]
 800f890:	60b9      	str	r1, [r7, #8]
 800f892:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f894:	2300      	movs	r3, #0
 800f896:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f89c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d10b      	bne.n	800f8ba <xQueueReceive+0x32>
	__asm volatile
 800f8a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8a6:	f383 8811 	msr	BASEPRI, r3
 800f8aa:	f3bf 8f6f 	isb	sy
 800f8ae:	f3bf 8f4f 	dsb	sy
 800f8b2:	623b      	str	r3, [r7, #32]
}
 800f8b4:	bf00      	nop
 800f8b6:	bf00      	nop
 800f8b8:	e7fd      	b.n	800f8b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d103      	bne.n	800f8c8 <xQueueReceive+0x40>
 800f8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d101      	bne.n	800f8cc <xQueueReceive+0x44>
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	e000      	b.n	800f8ce <xQueueReceive+0x46>
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d10b      	bne.n	800f8ea <xQueueReceive+0x62>
	__asm volatile
 800f8d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8d6:	f383 8811 	msr	BASEPRI, r3
 800f8da:	f3bf 8f6f 	isb	sy
 800f8de:	f3bf 8f4f 	dsb	sy
 800f8e2:	61fb      	str	r3, [r7, #28]
}
 800f8e4:	bf00      	nop
 800f8e6:	bf00      	nop
 800f8e8:	e7fd      	b.n	800f8e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f8ea:	f001 fed9 	bl	80116a0 <xTaskGetSchedulerState>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d102      	bne.n	800f8fa <xQueueReceive+0x72>
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d101      	bne.n	800f8fe <xQueueReceive+0x76>
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	e000      	b.n	800f900 <xQueueReceive+0x78>
 800f8fe:	2300      	movs	r3, #0
 800f900:	2b00      	cmp	r3, #0
 800f902:	d10b      	bne.n	800f91c <xQueueReceive+0x94>
	__asm volatile
 800f904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f908:	f383 8811 	msr	BASEPRI, r3
 800f90c:	f3bf 8f6f 	isb	sy
 800f910:	f3bf 8f4f 	dsb	sy
 800f914:	61bb      	str	r3, [r7, #24]
}
 800f916:	bf00      	nop
 800f918:	bf00      	nop
 800f91a:	e7fd      	b.n	800f918 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f91c:	f002 ff34 	bl	8012788 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f924:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d01f      	beq.n	800f96c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f92c:	68b9      	ldr	r1, [r7, #8]
 800f92e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f930:	f000 faa0 	bl	800fe74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f936:	1e5a      	subs	r2, r3, #1
 800f938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f93a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f93e:	691b      	ldr	r3, [r3, #16]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d00f      	beq.n	800f964 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f946:	3310      	adds	r3, #16
 800f948:	4618      	mov	r0, r3
 800f94a:	f001 fbe1 	bl	8011110 <xTaskRemoveFromEventList>
 800f94e:	4603      	mov	r3, r0
 800f950:	2b00      	cmp	r3, #0
 800f952:	d007      	beq.n	800f964 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f954:	4b3c      	ldr	r3, [pc, #240]	@ (800fa48 <xQueueReceive+0x1c0>)
 800f956:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f95a:	601a      	str	r2, [r3, #0]
 800f95c:	f3bf 8f4f 	dsb	sy
 800f960:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f964:	f002 ff42 	bl	80127ec <vPortExitCritical>
				return pdPASS;
 800f968:	2301      	movs	r3, #1
 800f96a:	e069      	b.n	800fa40 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d103      	bne.n	800f97a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f972:	f002 ff3b 	bl	80127ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f976:	2300      	movs	r3, #0
 800f978:	e062      	b.n	800fa40 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f97a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d106      	bne.n	800f98e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f980:	f107 0310 	add.w	r3, r7, #16
 800f984:	4618      	mov	r0, r3
 800f986:	f001 fc8b 	bl	80112a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f98a:	2301      	movs	r3, #1
 800f98c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f98e:	f002 ff2d 	bl	80127ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f992:	f001 f85f 	bl	8010a54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f996:	f002 fef7 	bl	8012788 <vPortEnterCritical>
 800f99a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f99c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f9a0:	b25b      	sxtb	r3, r3
 800f9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9a6:	d103      	bne.n	800f9b0 <xQueueReceive+0x128>
 800f9a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f9b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f9b6:	b25b      	sxtb	r3, r3
 800f9b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9bc:	d103      	bne.n	800f9c6 <xQueueReceive+0x13e>
 800f9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f9c6:	f002 ff11 	bl	80127ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f9ca:	1d3a      	adds	r2, r7, #4
 800f9cc:	f107 0310 	add.w	r3, r7, #16
 800f9d0:	4611      	mov	r1, r2
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f001 fc7a 	bl	80112cc <xTaskCheckForTimeOut>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d123      	bne.n	800fa26 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f9de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f9e0:	f000 fac0 	bl	800ff64 <prvIsQueueEmpty>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d017      	beq.n	800fa1a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f9ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9ec:	3324      	adds	r3, #36	@ 0x24
 800f9ee:	687a      	ldr	r2, [r7, #4]
 800f9f0:	4611      	mov	r1, r2
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f001 fafc 	bl	8010ff0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f9f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f9fa:	f000 fa61 	bl	800fec0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f9fe:	f001 f837 	bl	8010a70 <xTaskResumeAll>
 800fa02:	4603      	mov	r3, r0
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d189      	bne.n	800f91c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800fa08:	4b0f      	ldr	r3, [pc, #60]	@ (800fa48 <xQueueReceive+0x1c0>)
 800fa0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa0e:	601a      	str	r2, [r3, #0]
 800fa10:	f3bf 8f4f 	dsb	sy
 800fa14:	f3bf 8f6f 	isb	sy
 800fa18:	e780      	b.n	800f91c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fa1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa1c:	f000 fa50 	bl	800fec0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fa20:	f001 f826 	bl	8010a70 <xTaskResumeAll>
 800fa24:	e77a      	b.n	800f91c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fa26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa28:	f000 fa4a 	bl	800fec0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fa2c:	f001 f820 	bl	8010a70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fa30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa32:	f000 fa97 	bl	800ff64 <prvIsQueueEmpty>
 800fa36:	4603      	mov	r3, r0
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	f43f af6f 	beq.w	800f91c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fa3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	3730      	adds	r7, #48	@ 0x30
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}
 800fa48:	e000ed04 	.word	0xe000ed04

0800fa4c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b08e      	sub	sp, #56	@ 0x38
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
 800fa54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fa56:	2300      	movs	r3, #0
 800fa58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fa62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d10b      	bne.n	800fa80 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800fa68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa6c:	f383 8811 	msr	BASEPRI, r3
 800fa70:	f3bf 8f6f 	isb	sy
 800fa74:	f3bf 8f4f 	dsb	sy
 800fa78:	623b      	str	r3, [r7, #32]
}
 800fa7a:	bf00      	nop
 800fa7c:	bf00      	nop
 800fa7e:	e7fd      	b.n	800fa7c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fa80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d00b      	beq.n	800faa0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800fa88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa8c:	f383 8811 	msr	BASEPRI, r3
 800fa90:	f3bf 8f6f 	isb	sy
 800fa94:	f3bf 8f4f 	dsb	sy
 800fa98:	61fb      	str	r3, [r7, #28]
}
 800fa9a:	bf00      	nop
 800fa9c:	bf00      	nop
 800fa9e:	e7fd      	b.n	800fa9c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800faa0:	f001 fdfe 	bl	80116a0 <xTaskGetSchedulerState>
 800faa4:	4603      	mov	r3, r0
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d102      	bne.n	800fab0 <xQueueSemaphoreTake+0x64>
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d101      	bne.n	800fab4 <xQueueSemaphoreTake+0x68>
 800fab0:	2301      	movs	r3, #1
 800fab2:	e000      	b.n	800fab6 <xQueueSemaphoreTake+0x6a>
 800fab4:	2300      	movs	r3, #0
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d10b      	bne.n	800fad2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800faba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fabe:	f383 8811 	msr	BASEPRI, r3
 800fac2:	f3bf 8f6f 	isb	sy
 800fac6:	f3bf 8f4f 	dsb	sy
 800faca:	61bb      	str	r3, [r7, #24]
}
 800facc:	bf00      	nop
 800face:	bf00      	nop
 800fad0:	e7fd      	b.n	800face <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fad2:	f002 fe59 	bl	8012788 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fada:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fadc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d024      	beq.n	800fb2c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fae4:	1e5a      	subs	r2, r3, #1
 800fae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fae8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800faea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d104      	bne.n	800fafc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800faf2:	f001 ff67 	bl	80119c4 <pvTaskIncrementMutexHeldCount>
 800faf6:	4602      	mov	r2, r0
 800faf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fafa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fafe:	691b      	ldr	r3, [r3, #16]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d00f      	beq.n	800fb24 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb06:	3310      	adds	r3, #16
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f001 fb01 	bl	8011110 <xTaskRemoveFromEventList>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d007      	beq.n	800fb24 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fb14:	4b54      	ldr	r3, [pc, #336]	@ (800fc68 <xQueueSemaphoreTake+0x21c>)
 800fb16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb1a:	601a      	str	r2, [r3, #0]
 800fb1c:	f3bf 8f4f 	dsb	sy
 800fb20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fb24:	f002 fe62 	bl	80127ec <vPortExitCritical>
				return pdPASS;
 800fb28:	2301      	movs	r3, #1
 800fb2a:	e098      	b.n	800fc5e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d112      	bne.n	800fb58 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fb32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d00b      	beq.n	800fb50 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800fb38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb3c:	f383 8811 	msr	BASEPRI, r3
 800fb40:	f3bf 8f6f 	isb	sy
 800fb44:	f3bf 8f4f 	dsb	sy
 800fb48:	617b      	str	r3, [r7, #20]
}
 800fb4a:	bf00      	nop
 800fb4c:	bf00      	nop
 800fb4e:	e7fd      	b.n	800fb4c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fb50:	f002 fe4c 	bl	80127ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fb54:	2300      	movs	r3, #0
 800fb56:	e082      	b.n	800fc5e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fb58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d106      	bne.n	800fb6c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb5e:	f107 030c 	add.w	r3, r7, #12
 800fb62:	4618      	mov	r0, r3
 800fb64:	f001 fb9c 	bl	80112a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fb68:	2301      	movs	r3, #1
 800fb6a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fb6c:	f002 fe3e 	bl	80127ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fb70:	f000 ff70 	bl	8010a54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fb74:	f002 fe08 	bl	8012788 <vPortEnterCritical>
 800fb78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fb7e:	b25b      	sxtb	r3, r3
 800fb80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb84:	d103      	bne.n	800fb8e <xQueueSemaphoreTake+0x142>
 800fb86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb88:	2200      	movs	r2, #0
 800fb8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fb8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fb94:	b25b      	sxtb	r3, r3
 800fb96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb9a:	d103      	bne.n	800fba4 <xQueueSemaphoreTake+0x158>
 800fb9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb9e:	2200      	movs	r2, #0
 800fba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fba4:	f002 fe22 	bl	80127ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fba8:	463a      	mov	r2, r7
 800fbaa:	f107 030c 	add.w	r3, r7, #12
 800fbae:	4611      	mov	r1, r2
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f001 fb8b 	bl	80112cc <xTaskCheckForTimeOut>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d132      	bne.n	800fc22 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fbbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fbbe:	f000 f9d1 	bl	800ff64 <prvIsQueueEmpty>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d026      	beq.n	800fc16 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fbc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d109      	bne.n	800fbe4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800fbd0:	f002 fdda 	bl	8012788 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fbd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbd6:	689b      	ldr	r3, [r3, #8]
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f001 fd7f 	bl	80116dc <xTaskPriorityInherit>
 800fbde:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800fbe0:	f002 fe04 	bl	80127ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fbe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbe6:	3324      	adds	r3, #36	@ 0x24
 800fbe8:	683a      	ldr	r2, [r7, #0]
 800fbea:	4611      	mov	r1, r2
 800fbec:	4618      	mov	r0, r3
 800fbee:	f001 f9ff 	bl	8010ff0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fbf2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fbf4:	f000 f964 	bl	800fec0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fbf8:	f000 ff3a 	bl	8010a70 <xTaskResumeAll>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	f47f af67 	bne.w	800fad2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800fc04:	4b18      	ldr	r3, [pc, #96]	@ (800fc68 <xQueueSemaphoreTake+0x21c>)
 800fc06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc0a:	601a      	str	r2, [r3, #0]
 800fc0c:	f3bf 8f4f 	dsb	sy
 800fc10:	f3bf 8f6f 	isb	sy
 800fc14:	e75d      	b.n	800fad2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fc16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc18:	f000 f952 	bl	800fec0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fc1c:	f000 ff28 	bl	8010a70 <xTaskResumeAll>
 800fc20:	e757      	b.n	800fad2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fc22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc24:	f000 f94c 	bl	800fec0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fc28:	f000 ff22 	bl	8010a70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fc2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc2e:	f000 f999 	bl	800ff64 <prvIsQueueEmpty>
 800fc32:	4603      	mov	r3, r0
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	f43f af4c 	beq.w	800fad2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fc3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d00d      	beq.n	800fc5c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800fc40:	f002 fda2 	bl	8012788 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fc44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc46:	f000 f893 	bl	800fd70 <prvGetDisinheritPriorityAfterTimeout>
 800fc4a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fc4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc4e:	689b      	ldr	r3, [r3, #8]
 800fc50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fc52:	4618      	mov	r0, r3
 800fc54:	f001 fe1a 	bl	801188c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fc58:	f002 fdc8 	bl	80127ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fc5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	3738      	adds	r7, #56	@ 0x38
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}
 800fc66:	bf00      	nop
 800fc68:	e000ed04 	.word	0xe000ed04

0800fc6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b08e      	sub	sp, #56	@ 0x38
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	60f8      	str	r0, [r7, #12]
 800fc74:	60b9      	str	r1, [r7, #8]
 800fc76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fc7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d10b      	bne.n	800fc9a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800fc82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc86:	f383 8811 	msr	BASEPRI, r3
 800fc8a:	f3bf 8f6f 	isb	sy
 800fc8e:	f3bf 8f4f 	dsb	sy
 800fc92:	623b      	str	r3, [r7, #32]
}
 800fc94:	bf00      	nop
 800fc96:	bf00      	nop
 800fc98:	e7fd      	b.n	800fc96 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d103      	bne.n	800fca8 <xQueueReceiveFromISR+0x3c>
 800fca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d101      	bne.n	800fcac <xQueueReceiveFromISR+0x40>
 800fca8:	2301      	movs	r3, #1
 800fcaa:	e000      	b.n	800fcae <xQueueReceiveFromISR+0x42>
 800fcac:	2300      	movs	r3, #0
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d10b      	bne.n	800fcca <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800fcb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcb6:	f383 8811 	msr	BASEPRI, r3
 800fcba:	f3bf 8f6f 	isb	sy
 800fcbe:	f3bf 8f4f 	dsb	sy
 800fcc2:	61fb      	str	r3, [r7, #28]
}
 800fcc4:	bf00      	nop
 800fcc6:	bf00      	nop
 800fcc8:	e7fd      	b.n	800fcc6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fcca:	f002 fe3d 	bl	8012948 <vPortValidateInterruptPriority>
	__asm volatile
 800fcce:	f3ef 8211 	mrs	r2, BASEPRI
 800fcd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcd6:	f383 8811 	msr	BASEPRI, r3
 800fcda:	f3bf 8f6f 	isb	sy
 800fcde:	f3bf 8f4f 	dsb	sy
 800fce2:	61ba      	str	r2, [r7, #24]
 800fce4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fce6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fcea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fcf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d02f      	beq.n	800fd56 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fcf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fcfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fd00:	68b9      	ldr	r1, [r7, #8]
 800fd02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fd04:	f000 f8b6 	bl	800fe74 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fd08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd0a:	1e5a      	subs	r2, r3, #1
 800fd0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd0e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fd10:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fd14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd18:	d112      	bne.n	800fd40 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd1c:	691b      	ldr	r3, [r3, #16]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d016      	beq.n	800fd50 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd24:	3310      	adds	r3, #16
 800fd26:	4618      	mov	r0, r3
 800fd28:	f001 f9f2 	bl	8011110 <xTaskRemoveFromEventList>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d00e      	beq.n	800fd50 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d00b      	beq.n	800fd50 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2201      	movs	r2, #1
 800fd3c:	601a      	str	r2, [r3, #0]
 800fd3e:	e007      	b.n	800fd50 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fd40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd44:	3301      	adds	r3, #1
 800fd46:	b2db      	uxtb	r3, r3
 800fd48:	b25a      	sxtb	r2, r3
 800fd4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800fd50:	2301      	movs	r3, #1
 800fd52:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd54:	e001      	b.n	800fd5a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800fd56:	2300      	movs	r3, #0
 800fd58:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fd5e:	693b      	ldr	r3, [r7, #16]
 800fd60:	f383 8811 	msr	BASEPRI, r3
}
 800fd64:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fd66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3738      	adds	r7, #56	@ 0x38
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fd70:	b480      	push	{r7}
 800fd72:	b085      	sub	sp, #20
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d006      	beq.n	800fd8e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800fd8a:	60fb      	str	r3, [r7, #12]
 800fd8c:	e001      	b.n	800fd92 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fd8e:	2300      	movs	r3, #0
 800fd90:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fd92:	68fb      	ldr	r3, [r7, #12]
	}
 800fd94:	4618      	mov	r0, r3
 800fd96:	3714      	adds	r7, #20
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9e:	4770      	bx	lr

0800fda0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b086      	sub	sp, #24
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	60f8      	str	r0, [r7, #12]
 800fda8:	60b9      	str	r1, [r7, #8]
 800fdaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fdac:	2300      	movs	r3, #0
 800fdae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d10d      	bne.n	800fdda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d14d      	bne.n	800fe62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	689b      	ldr	r3, [r3, #8]
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f001 fcee 	bl	80117ac <xTaskPriorityDisinherit>
 800fdd0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	609a      	str	r2, [r3, #8]
 800fdd8:	e043      	b.n	800fe62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d119      	bne.n	800fe14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	6858      	ldr	r0, [r3, #4]
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fde8:	461a      	mov	r2, r3
 800fdea:	68b9      	ldr	r1, [r7, #8]
 800fdec:	f005 f903 	bl	8014ff6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	685a      	ldr	r2, [r3, #4]
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fdf8:	441a      	add	r2, r3
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	685a      	ldr	r2, [r3, #4]
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	689b      	ldr	r3, [r3, #8]
 800fe06:	429a      	cmp	r2, r3
 800fe08:	d32b      	bcc.n	800fe62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	681a      	ldr	r2, [r3, #0]
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	605a      	str	r2, [r3, #4]
 800fe12:	e026      	b.n	800fe62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	68d8      	ldr	r0, [r3, #12]
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe1c:	461a      	mov	r2, r3
 800fe1e:	68b9      	ldr	r1, [r7, #8]
 800fe20:	f005 f8e9 	bl	8014ff6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	68da      	ldr	r2, [r3, #12]
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe2c:	425b      	negs	r3, r3
 800fe2e:	441a      	add	r2, r3
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	68da      	ldr	r2, [r3, #12]
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d207      	bcs.n	800fe50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	689a      	ldr	r2, [r3, #8]
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe48:	425b      	negs	r3, r3
 800fe4a:	441a      	add	r2, r3
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2b02      	cmp	r3, #2
 800fe54:	d105      	bne.n	800fe62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fe56:	693b      	ldr	r3, [r7, #16]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d002      	beq.n	800fe62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	3b01      	subs	r3, #1
 800fe60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	1c5a      	adds	r2, r3, #1
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800fe6a:	697b      	ldr	r3, [r7, #20]
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3718      	adds	r7, #24
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d018      	beq.n	800feb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	68da      	ldr	r2, [r3, #12]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe8e:	441a      	add	r2, r3
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	68da      	ldr	r2, [r3, #12]
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	689b      	ldr	r3, [r3, #8]
 800fe9c:	429a      	cmp	r2, r3
 800fe9e:	d303      	bcc.n	800fea8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681a      	ldr	r2, [r3, #0]
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	68d9      	ldr	r1, [r3, #12]
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800feb0:	461a      	mov	r2, r3
 800feb2:	6838      	ldr	r0, [r7, #0]
 800feb4:	f005 f89f 	bl	8014ff6 <memcpy>
	}
}
 800feb8:	bf00      	nop
 800feba:	3708      	adds	r7, #8
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}

0800fec0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b084      	sub	sp, #16
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fec8:	f002 fc5e 	bl	8012788 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fed2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fed4:	e011      	b.n	800fefa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d012      	beq.n	800ff04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	3324      	adds	r3, #36	@ 0x24
 800fee2:	4618      	mov	r0, r3
 800fee4:	f001 f914 	bl	8011110 <xTaskRemoveFromEventList>
 800fee8:	4603      	mov	r3, r0
 800feea:	2b00      	cmp	r3, #0
 800feec:	d001      	beq.n	800fef2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800feee:	f001 fa51 	bl	8011394 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fef2:	7bfb      	ldrb	r3, [r7, #15]
 800fef4:	3b01      	subs	r3, #1
 800fef6:	b2db      	uxtb	r3, r3
 800fef8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fefa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	dce9      	bgt.n	800fed6 <prvUnlockQueue+0x16>
 800ff02:	e000      	b.n	800ff06 <prvUnlockQueue+0x46>
					break;
 800ff04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	22ff      	movs	r2, #255	@ 0xff
 800ff0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ff0e:	f002 fc6d 	bl	80127ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ff12:	f002 fc39 	bl	8012788 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ff1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff1e:	e011      	b.n	800ff44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	691b      	ldr	r3, [r3, #16]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d012      	beq.n	800ff4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	3310      	adds	r3, #16
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f001 f8ef 	bl	8011110 <xTaskRemoveFromEventList>
 800ff32:	4603      	mov	r3, r0
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d001      	beq.n	800ff3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ff38:	f001 fa2c 	bl	8011394 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ff3c:	7bbb      	ldrb	r3, [r7, #14]
 800ff3e:	3b01      	subs	r3, #1
 800ff40:	b2db      	uxtb	r3, r3
 800ff42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	dce9      	bgt.n	800ff20 <prvUnlockQueue+0x60>
 800ff4c:	e000      	b.n	800ff50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ff4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	22ff      	movs	r2, #255	@ 0xff
 800ff54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ff58:	f002 fc48 	bl	80127ec <vPortExitCritical>
}
 800ff5c:	bf00      	nop
 800ff5e:	3710      	adds	r7, #16
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}

0800ff64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b084      	sub	sp, #16
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ff6c:	f002 fc0c 	bl	8012788 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d102      	bne.n	800ff7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ff78:	2301      	movs	r3, #1
 800ff7a:	60fb      	str	r3, [r7, #12]
 800ff7c:	e001      	b.n	800ff82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ff82:	f002 fc33 	bl	80127ec <vPortExitCritical>

	return xReturn;
 800ff86:	68fb      	ldr	r3, [r7, #12]
}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	3710      	adds	r7, #16
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd80      	pop	{r7, pc}

0800ff90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b084      	sub	sp, #16
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ff98:	f002 fbf6 	bl	8012788 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d102      	bne.n	800ffae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	60fb      	str	r3, [r7, #12]
 800ffac:	e001      	b.n	800ffb2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ffb2:	f002 fc1b 	bl	80127ec <vPortExitCritical>

	return xReturn;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3710      	adds	r7, #16
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}

0800ffc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b085      	sub	sp, #20
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ffca:	2300      	movs	r3, #0
 800ffcc:	60fb      	str	r3, [r7, #12]
 800ffce:	e014      	b.n	800fffa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ffd0:	4a0f      	ldr	r2, [pc, #60]	@ (8010010 <vQueueAddToRegistry+0x50>)
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d10b      	bne.n	800fff4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ffdc:	490c      	ldr	r1, [pc, #48]	@ (8010010 <vQueueAddToRegistry+0x50>)
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	683a      	ldr	r2, [r7, #0]
 800ffe2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ffe6:	4a0a      	ldr	r2, [pc, #40]	@ (8010010 <vQueueAddToRegistry+0x50>)
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	00db      	lsls	r3, r3, #3
 800ffec:	4413      	add	r3, r2
 800ffee:	687a      	ldr	r2, [r7, #4]
 800fff0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fff2:	e006      	b.n	8010002 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	3301      	adds	r3, #1
 800fff8:	60fb      	str	r3, [r7, #12]
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	2b07      	cmp	r3, #7
 800fffe:	d9e7      	bls.n	800ffd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010000:	bf00      	nop
 8010002:	bf00      	nop
 8010004:	3714      	adds	r7, #20
 8010006:	46bd      	mov	sp, r7
 8010008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000c:	4770      	bx	lr
 801000e:	bf00      	nop
 8010010:	200032b4 	.word	0x200032b4

08010014 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010014:	b580      	push	{r7, lr}
 8010016:	b086      	sub	sp, #24
 8010018:	af00      	add	r7, sp, #0
 801001a:	60f8      	str	r0, [r7, #12]
 801001c:	60b9      	str	r1, [r7, #8]
 801001e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010024:	f002 fbb0 	bl	8012788 <vPortEnterCritical>
 8010028:	697b      	ldr	r3, [r7, #20]
 801002a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801002e:	b25b      	sxtb	r3, r3
 8010030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010034:	d103      	bne.n	801003e <vQueueWaitForMessageRestricted+0x2a>
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	2200      	movs	r2, #0
 801003a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010044:	b25b      	sxtb	r3, r3
 8010046:	f1b3 3fff 	cmp.w	r3, #4294967295
 801004a:	d103      	bne.n	8010054 <vQueueWaitForMessageRestricted+0x40>
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	2200      	movs	r2, #0
 8010050:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010054:	f002 fbca 	bl	80127ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801005c:	2b00      	cmp	r3, #0
 801005e:	d106      	bne.n	801006e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	3324      	adds	r3, #36	@ 0x24
 8010064:	687a      	ldr	r2, [r7, #4]
 8010066:	68b9      	ldr	r1, [r7, #8]
 8010068:	4618      	mov	r0, r3
 801006a:	f001 f825 	bl	80110b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801006e:	6978      	ldr	r0, [r7, #20]
 8010070:	f7ff ff26 	bl	800fec0 <prvUnlockQueue>
	}
 8010074:	bf00      	nop
 8010076:	3718      	adds	r7, #24
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}

0801007c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801007c:	b580      	push	{r7, lr}
 801007e:	b08e      	sub	sp, #56	@ 0x38
 8010080:	af04      	add	r7, sp, #16
 8010082:	60f8      	str	r0, [r7, #12]
 8010084:	60b9      	str	r1, [r7, #8]
 8010086:	607a      	str	r2, [r7, #4]
 8010088:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801008a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801008c:	2b00      	cmp	r3, #0
 801008e:	d10b      	bne.n	80100a8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8010090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010094:	f383 8811 	msr	BASEPRI, r3
 8010098:	f3bf 8f6f 	isb	sy
 801009c:	f3bf 8f4f 	dsb	sy
 80100a0:	623b      	str	r3, [r7, #32]
}
 80100a2:	bf00      	nop
 80100a4:	bf00      	nop
 80100a6:	e7fd      	b.n	80100a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80100a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d10b      	bne.n	80100c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80100ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100b2:	f383 8811 	msr	BASEPRI, r3
 80100b6:	f3bf 8f6f 	isb	sy
 80100ba:	f3bf 8f4f 	dsb	sy
 80100be:	61fb      	str	r3, [r7, #28]
}
 80100c0:	bf00      	nop
 80100c2:	bf00      	nop
 80100c4:	e7fd      	b.n	80100c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80100c6:	23b0      	movs	r3, #176	@ 0xb0
 80100c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80100ca:	693b      	ldr	r3, [r7, #16]
 80100cc:	2bb0      	cmp	r3, #176	@ 0xb0
 80100ce:	d00b      	beq.n	80100e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80100d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100d4:	f383 8811 	msr	BASEPRI, r3
 80100d8:	f3bf 8f6f 	isb	sy
 80100dc:	f3bf 8f4f 	dsb	sy
 80100e0:	61bb      	str	r3, [r7, #24]
}
 80100e2:	bf00      	nop
 80100e4:	bf00      	nop
 80100e6:	e7fd      	b.n	80100e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80100e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80100ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d01e      	beq.n	801012e <xTaskCreateStatic+0xb2>
 80100f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d01b      	beq.n	801012e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80100f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80100fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80100fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010102:	2202      	movs	r2, #2
 8010104:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010108:	2300      	movs	r3, #0
 801010a:	9303      	str	r3, [sp, #12]
 801010c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801010e:	9302      	str	r3, [sp, #8]
 8010110:	f107 0314 	add.w	r3, r7, #20
 8010114:	9301      	str	r3, [sp, #4]
 8010116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010118:	9300      	str	r3, [sp, #0]
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	687a      	ldr	r2, [r7, #4]
 801011e:	68b9      	ldr	r1, [r7, #8]
 8010120:	68f8      	ldr	r0, [r7, #12]
 8010122:	f000 f851 	bl	80101c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010126:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010128:	f000 f8fc 	bl	8010324 <prvAddNewTaskToReadyList>
 801012c:	e001      	b.n	8010132 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801012e:	2300      	movs	r3, #0
 8010130:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010132:	697b      	ldr	r3, [r7, #20]
	}
 8010134:	4618      	mov	r0, r3
 8010136:	3728      	adds	r7, #40	@ 0x28
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}

0801013c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801013c:	b580      	push	{r7, lr}
 801013e:	b08c      	sub	sp, #48	@ 0x30
 8010140:	af04      	add	r7, sp, #16
 8010142:	60f8      	str	r0, [r7, #12]
 8010144:	60b9      	str	r1, [r7, #8]
 8010146:	603b      	str	r3, [r7, #0]
 8010148:	4613      	mov	r3, r2
 801014a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801014c:	88fb      	ldrh	r3, [r7, #6]
 801014e:	009b      	lsls	r3, r3, #2
 8010150:	4618      	mov	r0, r3
 8010152:	f002 fc3b 	bl	80129cc <pvPortMalloc>
 8010156:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d00e      	beq.n	801017c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801015e:	20b0      	movs	r0, #176	@ 0xb0
 8010160:	f002 fc34 	bl	80129cc <pvPortMalloc>
 8010164:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010166:	69fb      	ldr	r3, [r7, #28]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d003      	beq.n	8010174 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801016c:	69fb      	ldr	r3, [r7, #28]
 801016e:	697a      	ldr	r2, [r7, #20]
 8010170:	631a      	str	r2, [r3, #48]	@ 0x30
 8010172:	e005      	b.n	8010180 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010174:	6978      	ldr	r0, [r7, #20]
 8010176:	f002 fcf7 	bl	8012b68 <vPortFree>
 801017a:	e001      	b.n	8010180 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801017c:	2300      	movs	r3, #0
 801017e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010180:	69fb      	ldr	r3, [r7, #28]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d017      	beq.n	80101b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010186:	69fb      	ldr	r3, [r7, #28]
 8010188:	2200      	movs	r2, #0
 801018a:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801018e:	88fa      	ldrh	r2, [r7, #6]
 8010190:	2300      	movs	r3, #0
 8010192:	9303      	str	r3, [sp, #12]
 8010194:	69fb      	ldr	r3, [r7, #28]
 8010196:	9302      	str	r3, [sp, #8]
 8010198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801019a:	9301      	str	r3, [sp, #4]
 801019c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801019e:	9300      	str	r3, [sp, #0]
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	68b9      	ldr	r1, [r7, #8]
 80101a4:	68f8      	ldr	r0, [r7, #12]
 80101a6:	f000 f80f 	bl	80101c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80101aa:	69f8      	ldr	r0, [r7, #28]
 80101ac:	f000 f8ba 	bl	8010324 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80101b0:	2301      	movs	r3, #1
 80101b2:	61bb      	str	r3, [r7, #24]
 80101b4:	e002      	b.n	80101bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80101b6:	f04f 33ff 	mov.w	r3, #4294967295
 80101ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80101bc:	69bb      	ldr	r3, [r7, #24]
	}
 80101be:	4618      	mov	r0, r3
 80101c0:	3720      	adds	r7, #32
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bd80      	pop	{r7, pc}
	...

080101c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b088      	sub	sp, #32
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	60f8      	str	r0, [r7, #12]
 80101d0:	60b9      	str	r1, [r7, #8]
 80101d2:	607a      	str	r2, [r7, #4]
 80101d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80101d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	009b      	lsls	r3, r3, #2
 80101de:	461a      	mov	r2, r3
 80101e0:	21a5      	movs	r1, #165	@ 0xa5
 80101e2:	f004 fd98 	bl	8014d16 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80101e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80101f0:	3b01      	subs	r3, #1
 80101f2:	009b      	lsls	r3, r3, #2
 80101f4:	4413      	add	r3, r2
 80101f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80101f8:	69bb      	ldr	r3, [r7, #24]
 80101fa:	f023 0307 	bic.w	r3, r3, #7
 80101fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010200:	69bb      	ldr	r3, [r7, #24]
 8010202:	f003 0307 	and.w	r3, r3, #7
 8010206:	2b00      	cmp	r3, #0
 8010208:	d00b      	beq.n	8010222 <prvInitialiseNewTask+0x5a>
	__asm volatile
 801020a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801020e:	f383 8811 	msr	BASEPRI, r3
 8010212:	f3bf 8f6f 	isb	sy
 8010216:	f3bf 8f4f 	dsb	sy
 801021a:	617b      	str	r3, [r7, #20]
}
 801021c:	bf00      	nop
 801021e:	bf00      	nop
 8010220:	e7fd      	b.n	801021e <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8010222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010224:	69ba      	ldr	r2, [r7, #24]
 8010226:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d01f      	beq.n	801026e <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801022e:	2300      	movs	r3, #0
 8010230:	61fb      	str	r3, [r7, #28]
 8010232:	e012      	b.n	801025a <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010234:	68ba      	ldr	r2, [r7, #8]
 8010236:	69fb      	ldr	r3, [r7, #28]
 8010238:	4413      	add	r3, r2
 801023a:	7819      	ldrb	r1, [r3, #0]
 801023c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801023e:	69fb      	ldr	r3, [r7, #28]
 8010240:	4413      	add	r3, r2
 8010242:	3334      	adds	r3, #52	@ 0x34
 8010244:	460a      	mov	r2, r1
 8010246:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010248:	68ba      	ldr	r2, [r7, #8]
 801024a:	69fb      	ldr	r3, [r7, #28]
 801024c:	4413      	add	r3, r2
 801024e:	781b      	ldrb	r3, [r3, #0]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d006      	beq.n	8010262 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010254:	69fb      	ldr	r3, [r7, #28]
 8010256:	3301      	adds	r3, #1
 8010258:	61fb      	str	r3, [r7, #28]
 801025a:	69fb      	ldr	r3, [r7, #28]
 801025c:	2b0f      	cmp	r3, #15
 801025e:	d9e9      	bls.n	8010234 <prvInitialiseNewTask+0x6c>
 8010260:	e000      	b.n	8010264 <prvInitialiseNewTask+0x9c>
			{
				break;
 8010262:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010266:	2200      	movs	r2, #0
 8010268:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801026c:	e003      	b.n	8010276 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801026e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010270:	2200      	movs	r2, #0
 8010272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010278:	2b37      	cmp	r3, #55	@ 0x37
 801027a:	d901      	bls.n	8010280 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801027c:	2337      	movs	r3, #55	@ 0x37
 801027e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010282:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010284:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010288:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801028a:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 801028c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801028e:	2200      	movs	r2, #0
 8010290:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010294:	3304      	adds	r3, #4
 8010296:	4618      	mov	r0, r3
 8010298:	f7fe ff4a 	bl	800f130 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801029c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801029e:	3318      	adds	r3, #24
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7fe ff45 	bl	800f130 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80102a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80102aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102ae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80102b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80102b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80102ba:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80102bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102be:	2200      	movs	r2, #0
 80102c0:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80102c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102c4:	2200      	movs	r2, #0
 80102c6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80102ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102cc:	2200      	movs	r2, #0
 80102ce:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80102d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102d4:	335c      	adds	r3, #92	@ 0x5c
 80102d6:	224c      	movs	r2, #76	@ 0x4c
 80102d8:	2100      	movs	r1, #0
 80102da:	4618      	mov	r0, r3
 80102dc:	f004 fd1b 	bl	8014d16 <memset>
 80102e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102e2:	4a0d      	ldr	r2, [pc, #52]	@ (8010318 <prvInitialiseNewTask+0x150>)
 80102e4:	661a      	str	r2, [r3, #96]	@ 0x60
 80102e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102e8:	4a0c      	ldr	r2, [pc, #48]	@ (801031c <prvInitialiseNewTask+0x154>)
 80102ea:	665a      	str	r2, [r3, #100]	@ 0x64
 80102ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102ee:	4a0c      	ldr	r2, [pc, #48]	@ (8010320 <prvInitialiseNewTask+0x158>)
 80102f0:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80102f2:	683a      	ldr	r2, [r7, #0]
 80102f4:	68f9      	ldr	r1, [r7, #12]
 80102f6:	69b8      	ldr	r0, [r7, #24]
 80102f8:	f002 f912 	bl	8012520 <pxPortInitialiseStack>
 80102fc:	4602      	mov	r2, r0
 80102fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010300:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010304:	2b00      	cmp	r3, #0
 8010306:	d002      	beq.n	801030e <prvInitialiseNewTask+0x146>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801030a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801030c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801030e:	bf00      	nop
 8010310:	3720      	adds	r7, #32
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}
 8010316:	bf00      	nop
 8010318:	20013b20 	.word	0x20013b20
 801031c:	20013b88 	.word	0x20013b88
 8010320:	20013bf0 	.word	0x20013bf0

08010324 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b082      	sub	sp, #8
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801032c:	f002 fa2c 	bl	8012788 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010330:	4b2d      	ldr	r3, [pc, #180]	@ (80103e8 <prvAddNewTaskToReadyList+0xc4>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	3301      	adds	r3, #1
 8010336:	4a2c      	ldr	r2, [pc, #176]	@ (80103e8 <prvAddNewTaskToReadyList+0xc4>)
 8010338:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801033a:	4b2c      	ldr	r3, [pc, #176]	@ (80103ec <prvAddNewTaskToReadyList+0xc8>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d109      	bne.n	8010356 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010342:	4a2a      	ldr	r2, [pc, #168]	@ (80103ec <prvAddNewTaskToReadyList+0xc8>)
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010348:	4b27      	ldr	r3, [pc, #156]	@ (80103e8 <prvAddNewTaskToReadyList+0xc4>)
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	2b01      	cmp	r3, #1
 801034e:	d110      	bne.n	8010372 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010350:	f001 f844 	bl	80113dc <prvInitialiseTaskLists>
 8010354:	e00d      	b.n	8010372 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010356:	4b26      	ldr	r3, [pc, #152]	@ (80103f0 <prvAddNewTaskToReadyList+0xcc>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d109      	bne.n	8010372 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801035e:	4b23      	ldr	r3, [pc, #140]	@ (80103ec <prvAddNewTaskToReadyList+0xc8>)
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010368:	429a      	cmp	r2, r3
 801036a:	d802      	bhi.n	8010372 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801036c:	4a1f      	ldr	r2, [pc, #124]	@ (80103ec <prvAddNewTaskToReadyList+0xc8>)
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010372:	4b20      	ldr	r3, [pc, #128]	@ (80103f4 <prvAddNewTaskToReadyList+0xd0>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	3301      	adds	r3, #1
 8010378:	4a1e      	ldr	r2, [pc, #120]	@ (80103f4 <prvAddNewTaskToReadyList+0xd0>)
 801037a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801037c:	4b1d      	ldr	r3, [pc, #116]	@ (80103f4 <prvAddNewTaskToReadyList+0xd0>)
 801037e:	681a      	ldr	r2, [r3, #0]
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010388:	4b1b      	ldr	r3, [pc, #108]	@ (80103f8 <prvAddNewTaskToReadyList+0xd4>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	429a      	cmp	r2, r3
 801038e:	d903      	bls.n	8010398 <prvAddNewTaskToReadyList+0x74>
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010394:	4a18      	ldr	r2, [pc, #96]	@ (80103f8 <prvAddNewTaskToReadyList+0xd4>)
 8010396:	6013      	str	r3, [r2, #0]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801039c:	4613      	mov	r3, r2
 801039e:	009b      	lsls	r3, r3, #2
 80103a0:	4413      	add	r3, r2
 80103a2:	009b      	lsls	r3, r3, #2
 80103a4:	4a15      	ldr	r2, [pc, #84]	@ (80103fc <prvAddNewTaskToReadyList+0xd8>)
 80103a6:	441a      	add	r2, r3
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	3304      	adds	r3, #4
 80103ac:	4619      	mov	r1, r3
 80103ae:	4610      	mov	r0, r2
 80103b0:	f7fe fecb 	bl	800f14a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80103b4:	f002 fa1a 	bl	80127ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80103b8:	4b0d      	ldr	r3, [pc, #52]	@ (80103f0 <prvAddNewTaskToReadyList+0xcc>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d00e      	beq.n	80103de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80103c0:	4b0a      	ldr	r3, [pc, #40]	@ (80103ec <prvAddNewTaskToReadyList+0xc8>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103ca:	429a      	cmp	r2, r3
 80103cc:	d207      	bcs.n	80103de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80103ce:	4b0c      	ldr	r3, [pc, #48]	@ (8010400 <prvAddNewTaskToReadyList+0xdc>)
 80103d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80103d4:	601a      	str	r2, [r3, #0]
 80103d6:	f3bf 8f4f 	dsb	sy
 80103da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80103de:	bf00      	nop
 80103e0:	3708      	adds	r7, #8
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}
 80103e6:	bf00      	nop
 80103e8:	200037c8 	.word	0x200037c8
 80103ec:	200032f4 	.word	0x200032f4
 80103f0:	200037d4 	.word	0x200037d4
 80103f4:	200037e4 	.word	0x200037e4
 80103f8:	200037d0 	.word	0x200037d0
 80103fc:	200032f8 	.word	0x200032f8
 8010400:	e000ed04 	.word	0xe000ed04

08010404 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8010404:	b580      	push	{r7, lr}
 8010406:	b084      	sub	sp, #16
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801040c:	f002 f9bc 	bl	8012788 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d102      	bne.n	801041c <vTaskDelete+0x18>
 8010416:	4b2d      	ldr	r3, [pc, #180]	@ (80104cc <vTaskDelete+0xc8>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	e000      	b.n	801041e <vTaskDelete+0x1a>
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	3304      	adds	r3, #4
 8010424:	4618      	mov	r0, r3
 8010426:	f7fe feed 	bl	800f204 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801042e:	2b00      	cmp	r3, #0
 8010430:	d004      	beq.n	801043c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	3318      	adds	r3, #24
 8010436:	4618      	mov	r0, r3
 8010438:	f7fe fee4 	bl	800f204 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801043c:	4b24      	ldr	r3, [pc, #144]	@ (80104d0 <vTaskDelete+0xcc>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	3301      	adds	r3, #1
 8010442:	4a23      	ldr	r2, [pc, #140]	@ (80104d0 <vTaskDelete+0xcc>)
 8010444:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8010446:	4b21      	ldr	r3, [pc, #132]	@ (80104cc <vTaskDelete+0xc8>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	68fa      	ldr	r2, [r7, #12]
 801044c:	429a      	cmp	r2, r3
 801044e:	d10b      	bne.n	8010468 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	3304      	adds	r3, #4
 8010454:	4619      	mov	r1, r3
 8010456:	481f      	ldr	r0, [pc, #124]	@ (80104d4 <vTaskDelete+0xd0>)
 8010458:	f7fe fe77 	bl	800f14a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 801045c:	4b1e      	ldr	r3, [pc, #120]	@ (80104d8 <vTaskDelete+0xd4>)
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	3301      	adds	r3, #1
 8010462:	4a1d      	ldr	r2, [pc, #116]	@ (80104d8 <vTaskDelete+0xd4>)
 8010464:	6013      	str	r3, [r2, #0]
 8010466:	e009      	b.n	801047c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8010468:	4b1c      	ldr	r3, [pc, #112]	@ (80104dc <vTaskDelete+0xd8>)
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	3b01      	subs	r3, #1
 801046e:	4a1b      	ldr	r2, [pc, #108]	@ (80104dc <vTaskDelete+0xd8>)
 8010470:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8010472:	68f8      	ldr	r0, [r7, #12]
 8010474:	f001 f8be 	bl	80115f4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8010478:	f001 f8f2 	bl	8011660 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 801047c:	f002 f9b6 	bl	80127ec <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8010480:	4b17      	ldr	r3, [pc, #92]	@ (80104e0 <vTaskDelete+0xdc>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d01c      	beq.n	80104c2 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8010488:	4b10      	ldr	r3, [pc, #64]	@ (80104cc <vTaskDelete+0xc8>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	68fa      	ldr	r2, [r7, #12]
 801048e:	429a      	cmp	r2, r3
 8010490:	d117      	bne.n	80104c2 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8010492:	4b14      	ldr	r3, [pc, #80]	@ (80104e4 <vTaskDelete+0xe0>)
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d00b      	beq.n	80104b2 <vTaskDelete+0xae>
	__asm volatile
 801049a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801049e:	f383 8811 	msr	BASEPRI, r3
 80104a2:	f3bf 8f6f 	isb	sy
 80104a6:	f3bf 8f4f 	dsb	sy
 80104aa:	60bb      	str	r3, [r7, #8]
}
 80104ac:	bf00      	nop
 80104ae:	bf00      	nop
 80104b0:	e7fd      	b.n	80104ae <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80104b2:	4b0d      	ldr	r3, [pc, #52]	@ (80104e8 <vTaskDelete+0xe4>)
 80104b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80104b8:	601a      	str	r2, [r3, #0]
 80104ba:	f3bf 8f4f 	dsb	sy
 80104be:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80104c2:	bf00      	nop
 80104c4:	3710      	adds	r7, #16
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd80      	pop	{r7, pc}
 80104ca:	bf00      	nop
 80104cc:	200032f4 	.word	0x200032f4
 80104d0:	200037e4 	.word	0x200037e4
 80104d4:	2000379c 	.word	0x2000379c
 80104d8:	200037b0 	.word	0x200037b0
 80104dc:	200037c8 	.word	0x200037c8
 80104e0:	200037d4 	.word	0x200037d4
 80104e4:	200037f0 	.word	0x200037f0
 80104e8:	e000ed04 	.word	0xe000ed04

080104ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b084      	sub	sp, #16
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80104f4:	2300      	movs	r3, #0
 80104f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d018      	beq.n	8010530 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80104fe:	4b14      	ldr	r3, [pc, #80]	@ (8010550 <vTaskDelay+0x64>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d00b      	beq.n	801051e <vTaskDelay+0x32>
	__asm volatile
 8010506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801050a:	f383 8811 	msr	BASEPRI, r3
 801050e:	f3bf 8f6f 	isb	sy
 8010512:	f3bf 8f4f 	dsb	sy
 8010516:	60bb      	str	r3, [r7, #8]
}
 8010518:	bf00      	nop
 801051a:	bf00      	nop
 801051c:	e7fd      	b.n	801051a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801051e:	f000 fa99 	bl	8010a54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010522:	2100      	movs	r1, #0
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f001 fbcf 	bl	8011cc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801052a:	f000 faa1 	bl	8010a70 <xTaskResumeAll>
 801052e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d107      	bne.n	8010546 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8010536:	4b07      	ldr	r3, [pc, #28]	@ (8010554 <vTaskDelay+0x68>)
 8010538:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801053c:	601a      	str	r2, [r3, #0]
 801053e:	f3bf 8f4f 	dsb	sy
 8010542:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010546:	bf00      	nop
 8010548:	3710      	adds	r7, #16
 801054a:	46bd      	mov	sp, r7
 801054c:	bd80      	pop	{r7, pc}
 801054e:	bf00      	nop
 8010550:	200037f0 	.word	0x200037f0
 8010554:	e000ed04 	.word	0xe000ed04

08010558 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8010558:	b580      	push	{r7, lr}
 801055a:	b088      	sub	sp, #32
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8010564:	69bb      	ldr	r3, [r7, #24]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d10b      	bne.n	8010582 <eTaskGetState+0x2a>
	__asm volatile
 801056a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801056e:	f383 8811 	msr	BASEPRI, r3
 8010572:	f3bf 8f6f 	isb	sy
 8010576:	f3bf 8f4f 	dsb	sy
 801057a:	60bb      	str	r3, [r7, #8]
}
 801057c:	bf00      	nop
 801057e:	bf00      	nop
 8010580:	e7fd      	b.n	801057e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8010582:	4b24      	ldr	r3, [pc, #144]	@ (8010614 <eTaskGetState+0xbc>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	69ba      	ldr	r2, [r7, #24]
 8010588:	429a      	cmp	r2, r3
 801058a:	d102      	bne.n	8010592 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 801058c:	2300      	movs	r3, #0
 801058e:	77fb      	strb	r3, [r7, #31]
 8010590:	e03a      	b.n	8010608 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8010592:	f002 f8f9 	bl	8012788 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8010596:	69bb      	ldr	r3, [r7, #24]
 8010598:	695b      	ldr	r3, [r3, #20]
 801059a:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 801059c:	4b1e      	ldr	r3, [pc, #120]	@ (8010618 <eTaskGetState+0xc0>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80105a2:	4b1e      	ldr	r3, [pc, #120]	@ (801061c <eTaskGetState+0xc4>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80105a8:	f002 f920 	bl	80127ec <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80105ac:	697a      	ldr	r2, [r7, #20]
 80105ae:	693b      	ldr	r3, [r7, #16]
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d003      	beq.n	80105bc <eTaskGetState+0x64>
 80105b4:	697a      	ldr	r2, [r7, #20]
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	429a      	cmp	r2, r3
 80105ba:	d102      	bne.n	80105c2 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80105bc:	2302      	movs	r3, #2
 80105be:	77fb      	strb	r3, [r7, #31]
 80105c0:	e022      	b.n	8010608 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	4a16      	ldr	r2, [pc, #88]	@ (8010620 <eTaskGetState+0xc8>)
 80105c6:	4293      	cmp	r3, r2
 80105c8:	d112      	bne.n	80105f0 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80105ca:	69bb      	ldr	r3, [r7, #24]
 80105cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d10b      	bne.n	80105ea <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80105d2:	69bb      	ldr	r3, [r7, #24]
 80105d4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80105d8:	b2db      	uxtb	r3, r3
 80105da:	2b01      	cmp	r3, #1
 80105dc:	d102      	bne.n	80105e4 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 80105de:	2302      	movs	r3, #2
 80105e0:	77fb      	strb	r3, [r7, #31]
 80105e2:	e011      	b.n	8010608 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 80105e4:	2303      	movs	r3, #3
 80105e6:	77fb      	strb	r3, [r7, #31]
 80105e8:	e00e      	b.n	8010608 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80105ea:	2302      	movs	r3, #2
 80105ec:	77fb      	strb	r3, [r7, #31]
 80105ee:	e00b      	b.n	8010608 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	4a0c      	ldr	r2, [pc, #48]	@ (8010624 <eTaskGetState+0xcc>)
 80105f4:	4293      	cmp	r3, r2
 80105f6:	d002      	beq.n	80105fe <eTaskGetState+0xa6>
 80105f8:	697b      	ldr	r3, [r7, #20]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d102      	bne.n	8010604 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80105fe:	2304      	movs	r3, #4
 8010600:	77fb      	strb	r3, [r7, #31]
 8010602:	e001      	b.n	8010608 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8010604:	2301      	movs	r3, #1
 8010606:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8010608:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801060a:	4618      	mov	r0, r3
 801060c:	3720      	adds	r7, #32
 801060e:	46bd      	mov	sp, r7
 8010610:	bd80      	pop	{r7, pc}
 8010612:	bf00      	nop
 8010614:	200032f4 	.word	0x200032f4
 8010618:	20003780 	.word	0x20003780
 801061c:	20003784 	.word	0x20003784
 8010620:	200037b4 	.word	0x200037b4
 8010624:	2000379c 	.word	0x2000379c

08010628 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8010628:	b580      	push	{r7, lr}
 801062a:	b088      	sub	sp, #32
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8010632:	2300      	movs	r3, #0
 8010634:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	2b37      	cmp	r3, #55	@ 0x37
 801063a:	d90b      	bls.n	8010654 <vTaskPrioritySet+0x2c>
	__asm volatile
 801063c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010640:	f383 8811 	msr	BASEPRI, r3
 8010644:	f3bf 8f6f 	isb	sy
 8010648:	f3bf 8f4f 	dsb	sy
 801064c:	60fb      	str	r3, [r7, #12]
}
 801064e:	bf00      	nop
 8010650:	bf00      	nop
 8010652:	e7fd      	b.n	8010650 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	2b37      	cmp	r3, #55	@ 0x37
 8010658:	d901      	bls.n	801065e <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801065a:	2337      	movs	r3, #55	@ 0x37
 801065c:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 801065e:	f002 f893 	bl	8012788 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d102      	bne.n	801066e <vTaskPrioritySet+0x46>
 8010668:	4b3a      	ldr	r3, [pc, #232]	@ (8010754 <vTaskPrioritySet+0x12c>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	e000      	b.n	8010670 <vTaskPrioritySet+0x48>
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8010672:	69bb      	ldr	r3, [r7, #24]
 8010674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010676:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8010678:	697a      	ldr	r2, [r7, #20]
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	429a      	cmp	r2, r3
 801067e:	d063      	beq.n	8010748 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8010680:	683a      	ldr	r2, [r7, #0]
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	429a      	cmp	r2, r3
 8010686:	d90d      	bls.n	80106a4 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 8010688:	4b32      	ldr	r3, [pc, #200]	@ (8010754 <vTaskPrioritySet+0x12c>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	69ba      	ldr	r2, [r7, #24]
 801068e:	429a      	cmp	r2, r3
 8010690:	d00f      	beq.n	80106b2 <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8010692:	4b30      	ldr	r3, [pc, #192]	@ (8010754 <vTaskPrioritySet+0x12c>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010698:	683a      	ldr	r2, [r7, #0]
 801069a:	429a      	cmp	r2, r3
 801069c:	d309      	bcc.n	80106b2 <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 801069e:	2301      	movs	r3, #1
 80106a0:	61fb      	str	r3, [r7, #28]
 80106a2:	e006      	b.n	80106b2 <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 80106a4:	4b2b      	ldr	r3, [pc, #172]	@ (8010754 <vTaskPrioritySet+0x12c>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	69ba      	ldr	r2, [r7, #24]
 80106aa:	429a      	cmp	r2, r3
 80106ac:	d101      	bne.n	80106b2 <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 80106ae:	2301      	movs	r3, #1
 80106b0:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80106b2:	69bb      	ldr	r3, [r7, #24]
 80106b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106b6:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80106b8:	69bb      	ldr	r3, [r7, #24]
 80106ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80106bc:	69bb      	ldr	r3, [r7, #24]
 80106be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106c0:	429a      	cmp	r2, r3
 80106c2:	d102      	bne.n	80106ca <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 80106c4:	69bb      	ldr	r3, [r7, #24]
 80106c6:	683a      	ldr	r2, [r7, #0]
 80106c8:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 80106ca:	69bb      	ldr	r3, [r7, #24]
 80106cc:	683a      	ldr	r2, [r7, #0]
 80106ce:	651a      	str	r2, [r3, #80]	@ 0x50
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80106d0:	69bb      	ldr	r3, [r7, #24]
 80106d2:	699b      	ldr	r3, [r3, #24]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	db04      	blt.n	80106e2 <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80106de:	69bb      	ldr	r3, [r7, #24]
 80106e0:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80106e2:	69bb      	ldr	r3, [r7, #24]
 80106e4:	6959      	ldr	r1, [r3, #20]
 80106e6:	693a      	ldr	r2, [r7, #16]
 80106e8:	4613      	mov	r3, r2
 80106ea:	009b      	lsls	r3, r3, #2
 80106ec:	4413      	add	r3, r2
 80106ee:	009b      	lsls	r3, r3, #2
 80106f0:	4a19      	ldr	r2, [pc, #100]	@ (8010758 <vTaskPrioritySet+0x130>)
 80106f2:	4413      	add	r3, r2
 80106f4:	4299      	cmp	r1, r3
 80106f6:	d11c      	bne.n	8010732 <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80106f8:	69bb      	ldr	r3, [r7, #24]
 80106fa:	3304      	adds	r3, #4
 80106fc:	4618      	mov	r0, r3
 80106fe:	f7fe fd81 	bl	800f204 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8010702:	69bb      	ldr	r3, [r7, #24]
 8010704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010706:	4b15      	ldr	r3, [pc, #84]	@ (801075c <vTaskPrioritySet+0x134>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	429a      	cmp	r2, r3
 801070c:	d903      	bls.n	8010716 <vTaskPrioritySet+0xee>
 801070e:	69bb      	ldr	r3, [r7, #24]
 8010710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010712:	4a12      	ldr	r2, [pc, #72]	@ (801075c <vTaskPrioritySet+0x134>)
 8010714:	6013      	str	r3, [r2, #0]
 8010716:	69bb      	ldr	r3, [r7, #24]
 8010718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801071a:	4613      	mov	r3, r2
 801071c:	009b      	lsls	r3, r3, #2
 801071e:	4413      	add	r3, r2
 8010720:	009b      	lsls	r3, r3, #2
 8010722:	4a0d      	ldr	r2, [pc, #52]	@ (8010758 <vTaskPrioritySet+0x130>)
 8010724:	441a      	add	r2, r3
 8010726:	69bb      	ldr	r3, [r7, #24]
 8010728:	3304      	adds	r3, #4
 801072a:	4619      	mov	r1, r3
 801072c:	4610      	mov	r0, r2
 801072e:	f7fe fd0c 	bl	800f14a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8010732:	69fb      	ldr	r3, [r7, #28]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d007      	beq.n	8010748 <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8010738:	4b09      	ldr	r3, [pc, #36]	@ (8010760 <vTaskPrioritySet+0x138>)
 801073a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801073e:	601a      	str	r2, [r3, #0]
 8010740:	f3bf 8f4f 	dsb	sy
 8010744:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8010748:	f002 f850 	bl	80127ec <vPortExitCritical>
	}
 801074c:	bf00      	nop
 801074e:	3720      	adds	r7, #32
 8010750:	46bd      	mov	sp, r7
 8010752:	bd80      	pop	{r7, pc}
 8010754:	200032f4 	.word	0x200032f4
 8010758:	200032f8 	.word	0x200032f8
 801075c:	200037d0 	.word	0x200037d0
 8010760:	e000ed04 	.word	0xe000ed04

08010764 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8010764:	b580      	push	{r7, lr}
 8010766:	b084      	sub	sp, #16
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801076c:	f002 f80c 	bl	8012788 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d102      	bne.n	801077c <vTaskSuspend+0x18>
 8010776:	4b30      	ldr	r3, [pc, #192]	@ (8010838 <vTaskSuspend+0xd4>)
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	e000      	b.n	801077e <vTaskSuspend+0x1a>
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	3304      	adds	r3, #4
 8010784:	4618      	mov	r0, r3
 8010786:	f7fe fd3d 	bl	800f204 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801078e:	2b00      	cmp	r3, #0
 8010790:	d004      	beq.n	801079c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	3318      	adds	r3, #24
 8010796:	4618      	mov	r0, r3
 8010798:	f7fe fd34 	bl	800f204 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	3304      	adds	r3, #4
 80107a0:	4619      	mov	r1, r3
 80107a2:	4826      	ldr	r0, [pc, #152]	@ (801083c <vTaskSuspend+0xd8>)
 80107a4:	f7fe fcd1 	bl	800f14a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80107ae:	b2db      	uxtb	r3, r3
 80107b0:	2b01      	cmp	r3, #1
 80107b2:	d103      	bne.n	80107bc <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	2200      	movs	r2, #0
 80107b8:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80107bc:	f002 f816 	bl	80127ec <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80107c0:	4b1f      	ldr	r3, [pc, #124]	@ (8010840 <vTaskSuspend+0xdc>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d005      	beq.n	80107d4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80107c8:	f001 ffde 	bl	8012788 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80107cc:	f000 ff48 	bl	8011660 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80107d0:	f002 f80c 	bl	80127ec <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80107d4:	4b18      	ldr	r3, [pc, #96]	@ (8010838 <vTaskSuspend+0xd4>)
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	68fa      	ldr	r2, [r7, #12]
 80107da:	429a      	cmp	r2, r3
 80107dc:	d128      	bne.n	8010830 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 80107de:	4b18      	ldr	r3, [pc, #96]	@ (8010840 <vTaskSuspend+0xdc>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d018      	beq.n	8010818 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80107e6:	4b17      	ldr	r3, [pc, #92]	@ (8010844 <vTaskSuspend+0xe0>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d00b      	beq.n	8010806 <vTaskSuspend+0xa2>
	__asm volatile
 80107ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107f2:	f383 8811 	msr	BASEPRI, r3
 80107f6:	f3bf 8f6f 	isb	sy
 80107fa:	f3bf 8f4f 	dsb	sy
 80107fe:	60bb      	str	r3, [r7, #8]
}
 8010800:	bf00      	nop
 8010802:	bf00      	nop
 8010804:	e7fd      	b.n	8010802 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8010806:	4b10      	ldr	r3, [pc, #64]	@ (8010848 <vTaskSuspend+0xe4>)
 8010808:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801080c:	601a      	str	r2, [r3, #0]
 801080e:	f3bf 8f4f 	dsb	sy
 8010812:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010816:	e00b      	b.n	8010830 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8010818:	4b08      	ldr	r3, [pc, #32]	@ (801083c <vTaskSuspend+0xd8>)
 801081a:	681a      	ldr	r2, [r3, #0]
 801081c:	4b0b      	ldr	r3, [pc, #44]	@ (801084c <vTaskSuspend+0xe8>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	429a      	cmp	r2, r3
 8010822:	d103      	bne.n	801082c <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8010824:	4b04      	ldr	r3, [pc, #16]	@ (8010838 <vTaskSuspend+0xd4>)
 8010826:	2200      	movs	r2, #0
 8010828:	601a      	str	r2, [r3, #0]
	}
 801082a:	e001      	b.n	8010830 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 801082c:	f000 fb5c 	bl	8010ee8 <vTaskSwitchContext>
	}
 8010830:	bf00      	nop
 8010832:	3710      	adds	r7, #16
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}
 8010838:	200032f4 	.word	0x200032f4
 801083c:	200037b4 	.word	0x200037b4
 8010840:	200037d4 	.word	0x200037d4
 8010844:	200037f0 	.word	0x200037f0
 8010848:	e000ed04 	.word	0xe000ed04
 801084c:	200037c8 	.word	0x200037c8

08010850 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8010850:	b480      	push	{r7}
 8010852:	b087      	sub	sp, #28
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8010858:	2300      	movs	r3, #0
 801085a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d10b      	bne.n	801087e <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8010866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801086a:	f383 8811 	msr	BASEPRI, r3
 801086e:	f3bf 8f6f 	isb	sy
 8010872:	f3bf 8f4f 	dsb	sy
 8010876:	60fb      	str	r3, [r7, #12]
}
 8010878:	bf00      	nop
 801087a:	bf00      	nop
 801087c:	e7fd      	b.n	801087a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	695b      	ldr	r3, [r3, #20]
 8010882:	4a0a      	ldr	r2, [pc, #40]	@ (80108ac <prvTaskIsTaskSuspended+0x5c>)
 8010884:	4293      	cmp	r3, r2
 8010886:	d10a      	bne.n	801089e <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801088c:	4a08      	ldr	r2, [pc, #32]	@ (80108b0 <prvTaskIsTaskSuspended+0x60>)
 801088e:	4293      	cmp	r3, r2
 8010890:	d005      	beq.n	801089e <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010896:	2b00      	cmp	r3, #0
 8010898:	d101      	bne.n	801089e <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 801089a:	2301      	movs	r3, #1
 801089c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801089e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80108a0:	4618      	mov	r0, r3
 80108a2:	371c      	adds	r7, #28
 80108a4:	46bd      	mov	sp, r7
 80108a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108aa:	4770      	bx	lr
 80108ac:	200037b4 	.word	0x200037b4
 80108b0:	20003788 	.word	0x20003788

080108b4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b084      	sub	sp, #16
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d10b      	bne.n	80108de <vTaskResume+0x2a>
	__asm volatile
 80108c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108ca:	f383 8811 	msr	BASEPRI, r3
 80108ce:	f3bf 8f6f 	isb	sy
 80108d2:	f3bf 8f4f 	dsb	sy
 80108d6:	60bb      	str	r3, [r7, #8]
}
 80108d8:	bf00      	nop
 80108da:	bf00      	nop
 80108dc:	e7fd      	b.n	80108da <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80108de:	4b21      	ldr	r3, [pc, #132]	@ (8010964 <vTaskResume+0xb0>)
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	68fa      	ldr	r2, [r7, #12]
 80108e4:	429a      	cmp	r2, r3
 80108e6:	d038      	beq.n	801095a <vTaskResume+0xa6>
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d035      	beq.n	801095a <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 80108ee:	f001 ff4b 	bl	8012788 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80108f2:	68f8      	ldr	r0, [r7, #12]
 80108f4:	f7ff ffac 	bl	8010850 <prvTaskIsTaskSuspended>
 80108f8:	4603      	mov	r3, r0
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d02b      	beq.n	8010956 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	3304      	adds	r3, #4
 8010902:	4618      	mov	r0, r3
 8010904:	f7fe fc7e 	bl	800f204 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801090c:	4b16      	ldr	r3, [pc, #88]	@ (8010968 <vTaskResume+0xb4>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	429a      	cmp	r2, r3
 8010912:	d903      	bls.n	801091c <vTaskResume+0x68>
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010918:	4a13      	ldr	r2, [pc, #76]	@ (8010968 <vTaskResume+0xb4>)
 801091a:	6013      	str	r3, [r2, #0]
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010920:	4613      	mov	r3, r2
 8010922:	009b      	lsls	r3, r3, #2
 8010924:	4413      	add	r3, r2
 8010926:	009b      	lsls	r3, r3, #2
 8010928:	4a10      	ldr	r2, [pc, #64]	@ (801096c <vTaskResume+0xb8>)
 801092a:	441a      	add	r2, r3
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	3304      	adds	r3, #4
 8010930:	4619      	mov	r1, r3
 8010932:	4610      	mov	r0, r2
 8010934:	f7fe fc09 	bl	800f14a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801093c:	4b09      	ldr	r3, [pc, #36]	@ (8010964 <vTaskResume+0xb0>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010942:	429a      	cmp	r2, r3
 8010944:	d307      	bcc.n	8010956 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8010946:	4b0a      	ldr	r3, [pc, #40]	@ (8010970 <vTaskResume+0xbc>)
 8010948:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801094c:	601a      	str	r2, [r3, #0]
 801094e:	f3bf 8f4f 	dsb	sy
 8010952:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8010956:	f001 ff49 	bl	80127ec <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801095a:	bf00      	nop
 801095c:	3710      	adds	r7, #16
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}
 8010962:	bf00      	nop
 8010964:	200032f4 	.word	0x200032f4
 8010968:	200037d0 	.word	0x200037d0
 801096c:	200032f8 	.word	0x200032f8
 8010970:	e000ed04 	.word	0xe000ed04

08010974 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b08a      	sub	sp, #40	@ 0x28
 8010978:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801097a:	2300      	movs	r3, #0
 801097c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801097e:	2300      	movs	r3, #0
 8010980:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010982:	463a      	mov	r2, r7
 8010984:	1d39      	adds	r1, r7, #4
 8010986:	f107 0308 	add.w	r3, r7, #8
 801098a:	4618      	mov	r0, r3
 801098c:	f7fe f9c0 	bl	800ed10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010990:	6839      	ldr	r1, [r7, #0]
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	68ba      	ldr	r2, [r7, #8]
 8010996:	9202      	str	r2, [sp, #8]
 8010998:	9301      	str	r3, [sp, #4]
 801099a:	2300      	movs	r3, #0
 801099c:	9300      	str	r3, [sp, #0]
 801099e:	2300      	movs	r3, #0
 80109a0:	460a      	mov	r2, r1
 80109a2:	4924      	ldr	r1, [pc, #144]	@ (8010a34 <vTaskStartScheduler+0xc0>)
 80109a4:	4824      	ldr	r0, [pc, #144]	@ (8010a38 <vTaskStartScheduler+0xc4>)
 80109a6:	f7ff fb69 	bl	801007c <xTaskCreateStatic>
 80109aa:	4603      	mov	r3, r0
 80109ac:	4a23      	ldr	r2, [pc, #140]	@ (8010a3c <vTaskStartScheduler+0xc8>)
 80109ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80109b0:	4b22      	ldr	r3, [pc, #136]	@ (8010a3c <vTaskStartScheduler+0xc8>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d002      	beq.n	80109be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80109b8:	2301      	movs	r3, #1
 80109ba:	617b      	str	r3, [r7, #20]
 80109bc:	e001      	b.n	80109c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80109be:	2300      	movs	r3, #0
 80109c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	2b01      	cmp	r3, #1
 80109c6:	d102      	bne.n	80109ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80109c8:	f001 f9d2 	bl	8011d70 <xTimerCreateTimerTask>
 80109cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	2b01      	cmp	r3, #1
 80109d2:	d11b      	bne.n	8010a0c <vTaskStartScheduler+0x98>
	__asm volatile
 80109d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109d8:	f383 8811 	msr	BASEPRI, r3
 80109dc:	f3bf 8f6f 	isb	sy
 80109e0:	f3bf 8f4f 	dsb	sy
 80109e4:	613b      	str	r3, [r7, #16]
}
 80109e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80109e8:	4b15      	ldr	r3, [pc, #84]	@ (8010a40 <vTaskStartScheduler+0xcc>)
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	335c      	adds	r3, #92	@ 0x5c
 80109ee:	4a15      	ldr	r2, [pc, #84]	@ (8010a44 <vTaskStartScheduler+0xd0>)
 80109f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80109f2:	4b15      	ldr	r3, [pc, #84]	@ (8010a48 <vTaskStartScheduler+0xd4>)
 80109f4:	f04f 32ff 	mov.w	r2, #4294967295
 80109f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80109fa:	4b14      	ldr	r3, [pc, #80]	@ (8010a4c <vTaskStartScheduler+0xd8>)
 80109fc:	2201      	movs	r2, #1
 80109fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010a00:	4b13      	ldr	r3, [pc, #76]	@ (8010a50 <vTaskStartScheduler+0xdc>)
 8010a02:	2200      	movs	r2, #0
 8010a04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010a06:	f001 fe1b 	bl	8012640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010a0a:	e00f      	b.n	8010a2c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010a0c:	697b      	ldr	r3, [r7, #20]
 8010a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a12:	d10b      	bne.n	8010a2c <vTaskStartScheduler+0xb8>
	__asm volatile
 8010a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a18:	f383 8811 	msr	BASEPRI, r3
 8010a1c:	f3bf 8f6f 	isb	sy
 8010a20:	f3bf 8f4f 	dsb	sy
 8010a24:	60fb      	str	r3, [r7, #12]
}
 8010a26:	bf00      	nop
 8010a28:	bf00      	nop
 8010a2a:	e7fd      	b.n	8010a28 <vTaskStartScheduler+0xb4>
}
 8010a2c:	bf00      	nop
 8010a2e:	3718      	adds	r7, #24
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}
 8010a34:	08019ab4 	.word	0x08019ab4
 8010a38:	080113ad 	.word	0x080113ad
 8010a3c:	200037ec 	.word	0x200037ec
 8010a40:	200032f4 	.word	0x200032f4
 8010a44:	200003ac 	.word	0x200003ac
 8010a48:	200037e8 	.word	0x200037e8
 8010a4c:	200037d4 	.word	0x200037d4
 8010a50:	200037cc 	.word	0x200037cc

08010a54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010a54:	b480      	push	{r7}
 8010a56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010a58:	4b04      	ldr	r3, [pc, #16]	@ (8010a6c <vTaskSuspendAll+0x18>)
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	3301      	adds	r3, #1
 8010a5e:	4a03      	ldr	r2, [pc, #12]	@ (8010a6c <vTaskSuspendAll+0x18>)
 8010a60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010a62:	bf00      	nop
 8010a64:	46bd      	mov	sp, r7
 8010a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6a:	4770      	bx	lr
 8010a6c:	200037f0 	.word	0x200037f0

08010a70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b084      	sub	sp, #16
 8010a74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010a76:	2300      	movs	r3, #0
 8010a78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010a7e:	4b42      	ldr	r3, [pc, #264]	@ (8010b88 <xTaskResumeAll+0x118>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d10b      	bne.n	8010a9e <xTaskResumeAll+0x2e>
	__asm volatile
 8010a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a8a:	f383 8811 	msr	BASEPRI, r3
 8010a8e:	f3bf 8f6f 	isb	sy
 8010a92:	f3bf 8f4f 	dsb	sy
 8010a96:	603b      	str	r3, [r7, #0]
}
 8010a98:	bf00      	nop
 8010a9a:	bf00      	nop
 8010a9c:	e7fd      	b.n	8010a9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010a9e:	f001 fe73 	bl	8012788 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010aa2:	4b39      	ldr	r3, [pc, #228]	@ (8010b88 <xTaskResumeAll+0x118>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	3b01      	subs	r3, #1
 8010aa8:	4a37      	ldr	r2, [pc, #220]	@ (8010b88 <xTaskResumeAll+0x118>)
 8010aaa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010aac:	4b36      	ldr	r3, [pc, #216]	@ (8010b88 <xTaskResumeAll+0x118>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d162      	bne.n	8010b7a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010ab4:	4b35      	ldr	r3, [pc, #212]	@ (8010b8c <xTaskResumeAll+0x11c>)
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d05e      	beq.n	8010b7a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010abc:	e02f      	b.n	8010b1e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010abe:	4b34      	ldr	r3, [pc, #208]	@ (8010b90 <xTaskResumeAll+0x120>)
 8010ac0:	68db      	ldr	r3, [r3, #12]
 8010ac2:	68db      	ldr	r3, [r3, #12]
 8010ac4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	3318      	adds	r3, #24
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7fe fb9a 	bl	800f204 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	3304      	adds	r3, #4
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f7fe fb95 	bl	800f204 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ade:	4b2d      	ldr	r3, [pc, #180]	@ (8010b94 <xTaskResumeAll+0x124>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d903      	bls.n	8010aee <xTaskResumeAll+0x7e>
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010aea:	4a2a      	ldr	r2, [pc, #168]	@ (8010b94 <xTaskResumeAll+0x124>)
 8010aec:	6013      	str	r3, [r2, #0]
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010af2:	4613      	mov	r3, r2
 8010af4:	009b      	lsls	r3, r3, #2
 8010af6:	4413      	add	r3, r2
 8010af8:	009b      	lsls	r3, r3, #2
 8010afa:	4a27      	ldr	r2, [pc, #156]	@ (8010b98 <xTaskResumeAll+0x128>)
 8010afc:	441a      	add	r2, r3
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	3304      	adds	r3, #4
 8010b02:	4619      	mov	r1, r3
 8010b04:	4610      	mov	r0, r2
 8010b06:	f7fe fb20 	bl	800f14a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b0e:	4b23      	ldr	r3, [pc, #140]	@ (8010b9c <xTaskResumeAll+0x12c>)
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b14:	429a      	cmp	r2, r3
 8010b16:	d302      	bcc.n	8010b1e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8010b18:	4b21      	ldr	r3, [pc, #132]	@ (8010ba0 <xTaskResumeAll+0x130>)
 8010b1a:	2201      	movs	r2, #1
 8010b1c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8010b90 <xTaskResumeAll+0x120>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d1cb      	bne.n	8010abe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d001      	beq.n	8010b30 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010b2c:	f000 fd98 	bl	8011660 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010b30:	4b1c      	ldr	r3, [pc, #112]	@ (8010ba4 <xTaskResumeAll+0x134>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d010      	beq.n	8010b5e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010b3c:	f000 f91a 	bl	8010d74 <xTaskIncrementTick>
 8010b40:	4603      	mov	r3, r0
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d002      	beq.n	8010b4c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8010b46:	4b16      	ldr	r3, [pc, #88]	@ (8010ba0 <xTaskResumeAll+0x130>)
 8010b48:	2201      	movs	r2, #1
 8010b4a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	3b01      	subs	r3, #1
 8010b50:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d1f1      	bne.n	8010b3c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8010b58:	4b12      	ldr	r3, [pc, #72]	@ (8010ba4 <xTaskResumeAll+0x134>)
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010b5e:	4b10      	ldr	r3, [pc, #64]	@ (8010ba0 <xTaskResumeAll+0x130>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d009      	beq.n	8010b7a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010b66:	2301      	movs	r3, #1
 8010b68:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8010ba8 <xTaskResumeAll+0x138>)
 8010b6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b70:	601a      	str	r2, [r3, #0]
 8010b72:	f3bf 8f4f 	dsb	sy
 8010b76:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010b7a:	f001 fe37 	bl	80127ec <vPortExitCritical>

	return xAlreadyYielded;
 8010b7e:	68bb      	ldr	r3, [r7, #8]
}
 8010b80:	4618      	mov	r0, r3
 8010b82:	3710      	adds	r7, #16
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}
 8010b88:	200037f0 	.word	0x200037f0
 8010b8c:	200037c8 	.word	0x200037c8
 8010b90:	20003788 	.word	0x20003788
 8010b94:	200037d0 	.word	0x200037d0
 8010b98:	200032f8 	.word	0x200032f8
 8010b9c:	200032f4 	.word	0x200032f4
 8010ba0:	200037dc 	.word	0x200037dc
 8010ba4:	200037d8 	.word	0x200037d8
 8010ba8:	e000ed04 	.word	0xe000ed04

08010bac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010bac:	b480      	push	{r7}
 8010bae:	b083      	sub	sp, #12
 8010bb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010bb2:	4b05      	ldr	r3, [pc, #20]	@ (8010bc8 <xTaskGetTickCount+0x1c>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010bb8:	687b      	ldr	r3, [r7, #4]
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	370c      	adds	r7, #12
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc4:	4770      	bx	lr
 8010bc6:	bf00      	nop
 8010bc8:	200037cc 	.word	0x200037cc

08010bcc <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 8010bcc:	b480      	push	{r7}
 8010bce:	b08b      	sub	sp, #44	@ 0x2c
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
 8010bd4:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d05b      	beq.n	8010c9a <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	61bb      	str	r3, [r7, #24]
 8010be6:	69bb      	ldr	r3, [r7, #24]
 8010be8:	685b      	ldr	r3, [r3, #4]
 8010bea:	685a      	ldr	r2, [r3, #4]
 8010bec:	69bb      	ldr	r3, [r7, #24]
 8010bee:	605a      	str	r2, [r3, #4]
 8010bf0:	69bb      	ldr	r3, [r7, #24]
 8010bf2:	685a      	ldr	r2, [r3, #4]
 8010bf4:	69bb      	ldr	r3, [r7, #24]
 8010bf6:	3308      	adds	r3, #8
 8010bf8:	429a      	cmp	r2, r3
 8010bfa:	d104      	bne.n	8010c06 <prvSearchForNameWithinSingleList+0x3a>
 8010bfc:	69bb      	ldr	r3, [r7, #24]
 8010bfe:	685b      	ldr	r3, [r3, #4]
 8010c00:	685a      	ldr	r2, [r3, #4]
 8010c02:	69bb      	ldr	r3, [r7, #24]
 8010c04:	605a      	str	r2, [r3, #4]
 8010c06:	69bb      	ldr	r3, [r7, #24]
 8010c08:	685b      	ldr	r3, [r3, #4]
 8010c0a:	68db      	ldr	r3, [r3, #12]
 8010c0c:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	613b      	str	r3, [r7, #16]
 8010c12:	693b      	ldr	r3, [r7, #16]
 8010c14:	685b      	ldr	r3, [r3, #4]
 8010c16:	685a      	ldr	r2, [r3, #4]
 8010c18:	693b      	ldr	r3, [r7, #16]
 8010c1a:	605a      	str	r2, [r3, #4]
 8010c1c:	693b      	ldr	r3, [r7, #16]
 8010c1e:	685a      	ldr	r2, [r3, #4]
 8010c20:	693b      	ldr	r3, [r7, #16]
 8010c22:	3308      	adds	r3, #8
 8010c24:	429a      	cmp	r2, r3
 8010c26:	d104      	bne.n	8010c32 <prvSearchForNameWithinSingleList+0x66>
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	685b      	ldr	r3, [r3, #4]
 8010c2c:	685a      	ldr	r2, [r3, #4]
 8010c2e:	693b      	ldr	r3, [r7, #16]
 8010c30:	605a      	str	r2, [r3, #4]
 8010c32:	693b      	ldr	r3, [r7, #16]
 8010c34:	685b      	ldr	r3, [r3, #4]
 8010c36:	68db      	ldr	r3, [r3, #12]
 8010c38:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010c3e:	2300      	movs	r3, #0
 8010c40:	623b      	str	r3, [r7, #32]
 8010c42:	e01c      	b.n	8010c7e <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 8010c44:	68fa      	ldr	r2, [r7, #12]
 8010c46:	6a3b      	ldr	r3, [r7, #32]
 8010c48:	4413      	add	r3, r2
 8010c4a:	3334      	adds	r3, #52	@ 0x34
 8010c4c:	781b      	ldrb	r3, [r3, #0]
 8010c4e:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 8010c50:	683a      	ldr	r2, [r7, #0]
 8010c52:	6a3b      	ldr	r3, [r7, #32]
 8010c54:	4413      	add	r3, r2
 8010c56:	781b      	ldrb	r3, [r3, #0]
 8010c58:	7afa      	ldrb	r2, [r7, #11]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d002      	beq.n	8010c64 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 8010c5e:	2301      	movs	r3, #1
 8010c60:	61fb      	str	r3, [r7, #28]
 8010c62:	e006      	b.n	8010c72 <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 8010c64:	7afb      	ldrb	r3, [r7, #11]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d103      	bne.n	8010c72 <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 8010c6e:	2301      	movs	r3, #1
 8010c70:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 8010c72:	69fb      	ldr	r3, [r7, #28]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d106      	bne.n	8010c86 <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010c78:	6a3b      	ldr	r3, [r7, #32]
 8010c7a:	3301      	adds	r3, #1
 8010c7c:	623b      	str	r3, [r7, #32]
 8010c7e:	6a3b      	ldr	r3, [r7, #32]
 8010c80:	2b0f      	cmp	r3, #15
 8010c82:	d9df      	bls.n	8010c44 <prvSearchForNameWithinSingleList+0x78>
 8010c84:	e000      	b.n	8010c88 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 8010c86:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 8010c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d104      	bne.n	8010c98 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 8010c8e:	68fa      	ldr	r2, [r7, #12]
 8010c90:	697b      	ldr	r3, [r7, #20]
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d1bb      	bne.n	8010c0e <prvSearchForNameWithinSingleList+0x42>
 8010c96:	e000      	b.n	8010c9a <prvSearchForNameWithinSingleList+0xce>
					break;
 8010c98:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 8010c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	372c      	adds	r7, #44	@ 0x2c
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca6:	4770      	bx	lr

08010ca8 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b086      	sub	sp, #24
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 8010cb0:	2338      	movs	r3, #56	@ 0x38
 8010cb2:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8010cb4:	6878      	ldr	r0, [r7, #4]
 8010cb6:	f7ef faeb 	bl	8000290 <strlen>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	2b0f      	cmp	r3, #15
 8010cbe:	d90b      	bls.n	8010cd8 <xTaskGetHandle+0x30>
	__asm volatile
 8010cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cc4:	f383 8811 	msr	BASEPRI, r3
 8010cc8:	f3bf 8f6f 	isb	sy
 8010ccc:	f3bf 8f4f 	dsb	sy
 8010cd0:	60fb      	str	r3, [r7, #12]
}
 8010cd2:	bf00      	nop
 8010cd4:	bf00      	nop
 8010cd6:	e7fd      	b.n	8010cd4 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 8010cd8:	f7ff febc 	bl	8010a54 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 8010cdc:	697b      	ldr	r3, [r7, #20]
 8010cde:	3b01      	subs	r3, #1
 8010ce0:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8010ce2:	697a      	ldr	r2, [r7, #20]
 8010ce4:	4613      	mov	r3, r2
 8010ce6:	009b      	lsls	r3, r3, #2
 8010ce8:	4413      	add	r3, r2
 8010cea:	009b      	lsls	r3, r3, #2
 8010cec:	4a1c      	ldr	r2, [pc, #112]	@ (8010d60 <xTaskGetHandle+0xb8>)
 8010cee:	4413      	add	r3, r2
 8010cf0:	6879      	ldr	r1, [r7, #4]
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7ff ff6a 	bl	8010bcc <prvSearchForNameWithinSingleList>
 8010cf8:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 8010cfa:	693b      	ldr	r3, [r7, #16]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d103      	bne.n	8010d08 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d1ea      	bne.n	8010cdc <xTaskGetHandle+0x34>
 8010d06:	e000      	b.n	8010d0a <xTaskGetHandle+0x62>
					break;
 8010d08:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 8010d0a:	693b      	ldr	r3, [r7, #16]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d106      	bne.n	8010d1e <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 8010d10:	4b14      	ldr	r3, [pc, #80]	@ (8010d64 <xTaskGetHandle+0xbc>)
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	6879      	ldr	r1, [r7, #4]
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7ff ff58 	bl	8010bcc <prvSearchForNameWithinSingleList>
 8010d1c:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 8010d1e:	693b      	ldr	r3, [r7, #16]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d106      	bne.n	8010d32 <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 8010d24:	4b10      	ldr	r3, [pc, #64]	@ (8010d68 <xTaskGetHandle+0xc0>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	6879      	ldr	r1, [r7, #4]
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f7ff ff4e 	bl	8010bcc <prvSearchForNameWithinSingleList>
 8010d30:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 8010d32:	693b      	ldr	r3, [r7, #16]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d104      	bne.n	8010d42 <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 8010d38:	6879      	ldr	r1, [r7, #4]
 8010d3a:	480c      	ldr	r0, [pc, #48]	@ (8010d6c <xTaskGetHandle+0xc4>)
 8010d3c:	f7ff ff46 	bl	8010bcc <prvSearchForNameWithinSingleList>
 8010d40:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 8010d42:	693b      	ldr	r3, [r7, #16]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d104      	bne.n	8010d52 <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 8010d48:	6879      	ldr	r1, [r7, #4]
 8010d4a:	4809      	ldr	r0, [pc, #36]	@ (8010d70 <xTaskGetHandle+0xc8>)
 8010d4c:	f7ff ff3e 	bl	8010bcc <prvSearchForNameWithinSingleList>
 8010d50:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 8010d52:	f7ff fe8d 	bl	8010a70 <xTaskResumeAll>

		return pxTCB;
 8010d56:	693b      	ldr	r3, [r7, #16]
	}
 8010d58:	4618      	mov	r0, r3
 8010d5a:	3718      	adds	r7, #24
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}
 8010d60:	200032f8 	.word	0x200032f8
 8010d64:	20003780 	.word	0x20003780
 8010d68:	20003784 	.word	0x20003784
 8010d6c:	200037b4 	.word	0x200037b4
 8010d70:	2000379c 	.word	0x2000379c

08010d74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b086      	sub	sp, #24
 8010d78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d7e:	4b4f      	ldr	r3, [pc, #316]	@ (8010ebc <xTaskIncrementTick+0x148>)
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	f040 8090 	bne.w	8010ea8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010d88:	4b4d      	ldr	r3, [pc, #308]	@ (8010ec0 <xTaskIncrementTick+0x14c>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	3301      	adds	r3, #1
 8010d8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010d90:	4a4b      	ldr	r2, [pc, #300]	@ (8010ec0 <xTaskIncrementTick+0x14c>)
 8010d92:	693b      	ldr	r3, [r7, #16]
 8010d94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010d96:	693b      	ldr	r3, [r7, #16]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d121      	bne.n	8010de0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010d9c:	4b49      	ldr	r3, [pc, #292]	@ (8010ec4 <xTaskIncrementTick+0x150>)
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d00b      	beq.n	8010dbe <xTaskIncrementTick+0x4a>
	__asm volatile
 8010da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010daa:	f383 8811 	msr	BASEPRI, r3
 8010dae:	f3bf 8f6f 	isb	sy
 8010db2:	f3bf 8f4f 	dsb	sy
 8010db6:	603b      	str	r3, [r7, #0]
}
 8010db8:	bf00      	nop
 8010dba:	bf00      	nop
 8010dbc:	e7fd      	b.n	8010dba <xTaskIncrementTick+0x46>
 8010dbe:	4b41      	ldr	r3, [pc, #260]	@ (8010ec4 <xTaskIncrementTick+0x150>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	60fb      	str	r3, [r7, #12]
 8010dc4:	4b40      	ldr	r3, [pc, #256]	@ (8010ec8 <xTaskIncrementTick+0x154>)
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	4a3e      	ldr	r2, [pc, #248]	@ (8010ec4 <xTaskIncrementTick+0x150>)
 8010dca:	6013      	str	r3, [r2, #0]
 8010dcc:	4a3e      	ldr	r2, [pc, #248]	@ (8010ec8 <xTaskIncrementTick+0x154>)
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	6013      	str	r3, [r2, #0]
 8010dd2:	4b3e      	ldr	r3, [pc, #248]	@ (8010ecc <xTaskIncrementTick+0x158>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	3301      	adds	r3, #1
 8010dd8:	4a3c      	ldr	r2, [pc, #240]	@ (8010ecc <xTaskIncrementTick+0x158>)
 8010dda:	6013      	str	r3, [r2, #0]
 8010ddc:	f000 fc40 	bl	8011660 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010de0:	4b3b      	ldr	r3, [pc, #236]	@ (8010ed0 <xTaskIncrementTick+0x15c>)
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	693a      	ldr	r2, [r7, #16]
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d349      	bcc.n	8010e7e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010dea:	4b36      	ldr	r3, [pc, #216]	@ (8010ec4 <xTaskIncrementTick+0x150>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d104      	bne.n	8010dfe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010df4:	4b36      	ldr	r3, [pc, #216]	@ (8010ed0 <xTaskIncrementTick+0x15c>)
 8010df6:	f04f 32ff 	mov.w	r2, #4294967295
 8010dfa:	601a      	str	r2, [r3, #0]
					break;
 8010dfc:	e03f      	b.n	8010e7e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010dfe:	4b31      	ldr	r3, [pc, #196]	@ (8010ec4 <xTaskIncrementTick+0x150>)
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	68db      	ldr	r3, [r3, #12]
 8010e04:	68db      	ldr	r3, [r3, #12]
 8010e06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	685b      	ldr	r3, [r3, #4]
 8010e0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010e0e:	693a      	ldr	r2, [r7, #16]
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	429a      	cmp	r2, r3
 8010e14:	d203      	bcs.n	8010e1e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010e16:	4a2e      	ldr	r2, [pc, #184]	@ (8010ed0 <xTaskIncrementTick+0x15c>)
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010e1c:	e02f      	b.n	8010e7e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e1e:	68bb      	ldr	r3, [r7, #8]
 8010e20:	3304      	adds	r3, #4
 8010e22:	4618      	mov	r0, r3
 8010e24:	f7fe f9ee 	bl	800f204 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d004      	beq.n	8010e3a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	3318      	adds	r3, #24
 8010e34:	4618      	mov	r0, r3
 8010e36:	f7fe f9e5 	bl	800f204 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e3e:	4b25      	ldr	r3, [pc, #148]	@ (8010ed4 <xTaskIncrementTick+0x160>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	429a      	cmp	r2, r3
 8010e44:	d903      	bls.n	8010e4e <xTaskIncrementTick+0xda>
 8010e46:	68bb      	ldr	r3, [r7, #8]
 8010e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e4a:	4a22      	ldr	r2, [pc, #136]	@ (8010ed4 <xTaskIncrementTick+0x160>)
 8010e4c:	6013      	str	r3, [r2, #0]
 8010e4e:	68bb      	ldr	r3, [r7, #8]
 8010e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e52:	4613      	mov	r3, r2
 8010e54:	009b      	lsls	r3, r3, #2
 8010e56:	4413      	add	r3, r2
 8010e58:	009b      	lsls	r3, r3, #2
 8010e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8010ed8 <xTaskIncrementTick+0x164>)
 8010e5c:	441a      	add	r2, r3
 8010e5e:	68bb      	ldr	r3, [r7, #8]
 8010e60:	3304      	adds	r3, #4
 8010e62:	4619      	mov	r1, r3
 8010e64:	4610      	mov	r0, r2
 8010e66:	f7fe f970 	bl	800f14a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8010edc <xTaskIncrementTick+0x168>)
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e74:	429a      	cmp	r2, r3
 8010e76:	d3b8      	bcc.n	8010dea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010e78:	2301      	movs	r3, #1
 8010e7a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e7c:	e7b5      	b.n	8010dea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010e7e:	4b17      	ldr	r3, [pc, #92]	@ (8010edc <xTaskIncrementTick+0x168>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e84:	4914      	ldr	r1, [pc, #80]	@ (8010ed8 <xTaskIncrementTick+0x164>)
 8010e86:	4613      	mov	r3, r2
 8010e88:	009b      	lsls	r3, r3, #2
 8010e8a:	4413      	add	r3, r2
 8010e8c:	009b      	lsls	r3, r3, #2
 8010e8e:	440b      	add	r3, r1
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	2b01      	cmp	r3, #1
 8010e94:	d901      	bls.n	8010e9a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8010e96:	2301      	movs	r3, #1
 8010e98:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010e9a:	4b11      	ldr	r3, [pc, #68]	@ (8010ee0 <xTaskIncrementTick+0x16c>)
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d007      	beq.n	8010eb2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8010ea2:	2301      	movs	r3, #1
 8010ea4:	617b      	str	r3, [r7, #20]
 8010ea6:	e004      	b.n	8010eb2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8010ee4 <xTaskIncrementTick+0x170>)
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	3301      	adds	r3, #1
 8010eae:	4a0d      	ldr	r2, [pc, #52]	@ (8010ee4 <xTaskIncrementTick+0x170>)
 8010eb0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010eb2:	697b      	ldr	r3, [r7, #20]
}
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	3718      	adds	r7, #24
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	bd80      	pop	{r7, pc}
 8010ebc:	200037f0 	.word	0x200037f0
 8010ec0:	200037cc 	.word	0x200037cc
 8010ec4:	20003780 	.word	0x20003780
 8010ec8:	20003784 	.word	0x20003784
 8010ecc:	200037e0 	.word	0x200037e0
 8010ed0:	200037e8 	.word	0x200037e8
 8010ed4:	200037d0 	.word	0x200037d0
 8010ed8:	200032f8 	.word	0x200032f8
 8010edc:	200032f4 	.word	0x200032f4
 8010ee0:	200037dc 	.word	0x200037dc
 8010ee4:	200037d8 	.word	0x200037d8

08010ee8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010ee8:	b480      	push	{r7}
 8010eea:	b085      	sub	sp, #20
 8010eec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010eee:	4b37      	ldr	r3, [pc, #220]	@ (8010fcc <vTaskSwitchContext+0xe4>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d003      	beq.n	8010efe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010ef6:	4b36      	ldr	r3, [pc, #216]	@ (8010fd0 <vTaskSwitchContext+0xe8>)
 8010ef8:	2201      	movs	r2, #1
 8010efa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010efc:	e05f      	b.n	8010fbe <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8010efe:	4b34      	ldr	r3, [pc, #208]	@ (8010fd0 <vTaskSwitchContext+0xe8>)
 8010f00:	2200      	movs	r2, #0
 8010f02:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010f04:	4b33      	ldr	r3, [pc, #204]	@ (8010fd4 <vTaskSwitchContext+0xec>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	4a33      	ldr	r2, [pc, #204]	@ (8010fd8 <vTaskSwitchContext+0xf0>)
 8010f0a:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8010f0c:	4b32      	ldr	r3, [pc, #200]	@ (8010fd8 <vTaskSwitchContext+0xf0>)
 8010f0e:	681a      	ldr	r2, [r3, #0]
 8010f10:	4b32      	ldr	r3, [pc, #200]	@ (8010fdc <vTaskSwitchContext+0xf4>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d909      	bls.n	8010f2c <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8010f18:	4b31      	ldr	r3, [pc, #196]	@ (8010fe0 <vTaskSwitchContext+0xf8>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8010f1e:	4a2e      	ldr	r2, [pc, #184]	@ (8010fd8 <vTaskSwitchContext+0xf0>)
 8010f20:	6810      	ldr	r0, [r2, #0]
 8010f22:	4a2e      	ldr	r2, [pc, #184]	@ (8010fdc <vTaskSwitchContext+0xf4>)
 8010f24:	6812      	ldr	r2, [r2, #0]
 8010f26:	1a82      	subs	r2, r0, r2
 8010f28:	440a      	add	r2, r1
 8010f2a:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8010f2c:	4b2a      	ldr	r3, [pc, #168]	@ (8010fd8 <vTaskSwitchContext+0xf0>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	4a2a      	ldr	r2, [pc, #168]	@ (8010fdc <vTaskSwitchContext+0xf4>)
 8010f32:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f34:	4b2b      	ldr	r3, [pc, #172]	@ (8010fe4 <vTaskSwitchContext+0xfc>)
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	60fb      	str	r3, [r7, #12]
 8010f3a:	e011      	b.n	8010f60 <vTaskSwitchContext+0x78>
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d10b      	bne.n	8010f5a <vTaskSwitchContext+0x72>
	__asm volatile
 8010f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f46:	f383 8811 	msr	BASEPRI, r3
 8010f4a:	f3bf 8f6f 	isb	sy
 8010f4e:	f3bf 8f4f 	dsb	sy
 8010f52:	607b      	str	r3, [r7, #4]
}
 8010f54:	bf00      	nop
 8010f56:	bf00      	nop
 8010f58:	e7fd      	b.n	8010f56 <vTaskSwitchContext+0x6e>
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	3b01      	subs	r3, #1
 8010f5e:	60fb      	str	r3, [r7, #12]
 8010f60:	4921      	ldr	r1, [pc, #132]	@ (8010fe8 <vTaskSwitchContext+0x100>)
 8010f62:	68fa      	ldr	r2, [r7, #12]
 8010f64:	4613      	mov	r3, r2
 8010f66:	009b      	lsls	r3, r3, #2
 8010f68:	4413      	add	r3, r2
 8010f6a:	009b      	lsls	r3, r3, #2
 8010f6c:	440b      	add	r3, r1
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d0e3      	beq.n	8010f3c <vTaskSwitchContext+0x54>
 8010f74:	68fa      	ldr	r2, [r7, #12]
 8010f76:	4613      	mov	r3, r2
 8010f78:	009b      	lsls	r3, r3, #2
 8010f7a:	4413      	add	r3, r2
 8010f7c:	009b      	lsls	r3, r3, #2
 8010f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8010fe8 <vTaskSwitchContext+0x100>)
 8010f80:	4413      	add	r3, r2
 8010f82:	60bb      	str	r3, [r7, #8]
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	685b      	ldr	r3, [r3, #4]
 8010f88:	685a      	ldr	r2, [r3, #4]
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	605a      	str	r2, [r3, #4]
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	685a      	ldr	r2, [r3, #4]
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	3308      	adds	r3, #8
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d104      	bne.n	8010fa4 <vTaskSwitchContext+0xbc>
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	685b      	ldr	r3, [r3, #4]
 8010f9e:	685a      	ldr	r2, [r3, #4]
 8010fa0:	68bb      	ldr	r3, [r7, #8]
 8010fa2:	605a      	str	r2, [r3, #4]
 8010fa4:	68bb      	ldr	r3, [r7, #8]
 8010fa6:	685b      	ldr	r3, [r3, #4]
 8010fa8:	68db      	ldr	r3, [r3, #12]
 8010faa:	4a0d      	ldr	r2, [pc, #52]	@ (8010fe0 <vTaskSwitchContext+0xf8>)
 8010fac:	6013      	str	r3, [r2, #0]
 8010fae:	4a0d      	ldr	r2, [pc, #52]	@ (8010fe4 <vTaskSwitchContext+0xfc>)
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8010fe0 <vTaskSwitchContext+0xf8>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	335c      	adds	r3, #92	@ 0x5c
 8010fba:	4a0c      	ldr	r2, [pc, #48]	@ (8010fec <vTaskSwitchContext+0x104>)
 8010fbc:	6013      	str	r3, [r2, #0]
}
 8010fbe:	bf00      	nop
 8010fc0:	3714      	adds	r7, #20
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc8:	4770      	bx	lr
 8010fca:	bf00      	nop
 8010fcc:	200037f0 	.word	0x200037f0
 8010fd0:	200037dc 	.word	0x200037dc
 8010fd4:	20002b28 	.word	0x20002b28
 8010fd8:	200037f8 	.word	0x200037f8
 8010fdc:	200037f4 	.word	0x200037f4
 8010fe0:	200032f4 	.word	0x200032f4
 8010fe4:	200037d0 	.word	0x200037d0
 8010fe8:	200032f8 	.word	0x200032f8
 8010fec:	200003ac 	.word	0x200003ac

08010ff0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b084      	sub	sp, #16
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
 8010ff8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d10b      	bne.n	8011018 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8011000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011004:	f383 8811 	msr	BASEPRI, r3
 8011008:	f3bf 8f6f 	isb	sy
 801100c:	f3bf 8f4f 	dsb	sy
 8011010:	60fb      	str	r3, [r7, #12]
}
 8011012:	bf00      	nop
 8011014:	bf00      	nop
 8011016:	e7fd      	b.n	8011014 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011018:	4b07      	ldr	r3, [pc, #28]	@ (8011038 <vTaskPlaceOnEventList+0x48>)
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	3318      	adds	r3, #24
 801101e:	4619      	mov	r1, r3
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	f7fe f8b6 	bl	800f192 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011026:	2101      	movs	r1, #1
 8011028:	6838      	ldr	r0, [r7, #0]
 801102a:	f000 fe4d 	bl	8011cc8 <prvAddCurrentTaskToDelayedList>
}
 801102e:	bf00      	nop
 8011030:	3710      	adds	r7, #16
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}
 8011036:	bf00      	nop
 8011038:	200032f4 	.word	0x200032f4

0801103c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b086      	sub	sp, #24
 8011040:	af00      	add	r7, sp, #0
 8011042:	60f8      	str	r0, [r7, #12]
 8011044:	60b9      	str	r1, [r7, #8]
 8011046:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d10b      	bne.n	8011066 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 801104e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011052:	f383 8811 	msr	BASEPRI, r3
 8011056:	f3bf 8f6f 	isb	sy
 801105a:	f3bf 8f4f 	dsb	sy
 801105e:	617b      	str	r3, [r7, #20]
}
 8011060:	bf00      	nop
 8011062:	bf00      	nop
 8011064:	e7fd      	b.n	8011062 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8011066:	4b12      	ldr	r3, [pc, #72]	@ (80110b0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d10b      	bne.n	8011086 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 801106e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011072:	f383 8811 	msr	BASEPRI, r3
 8011076:	f3bf 8f6f 	isb	sy
 801107a:	f3bf 8f4f 	dsb	sy
 801107e:	613b      	str	r3, [r7, #16]
}
 8011080:	bf00      	nop
 8011082:	bf00      	nop
 8011084:	e7fd      	b.n	8011082 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8011086:	4b0b      	ldr	r3, [pc, #44]	@ (80110b4 <vTaskPlaceOnUnorderedEventList+0x78>)
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	68ba      	ldr	r2, [r7, #8]
 801108c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8011090:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011092:	4b08      	ldr	r3, [pc, #32]	@ (80110b4 <vTaskPlaceOnUnorderedEventList+0x78>)
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	3318      	adds	r3, #24
 8011098:	4619      	mov	r1, r3
 801109a:	68f8      	ldr	r0, [r7, #12]
 801109c:	f7fe f855 	bl	800f14a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80110a0:	2101      	movs	r1, #1
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	f000 fe10 	bl	8011cc8 <prvAddCurrentTaskToDelayedList>
}
 80110a8:	bf00      	nop
 80110aa:	3718      	adds	r7, #24
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}
 80110b0:	200037f0 	.word	0x200037f0
 80110b4:	200032f4 	.word	0x200032f4

080110b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b086      	sub	sp, #24
 80110bc:	af00      	add	r7, sp, #0
 80110be:	60f8      	str	r0, [r7, #12]
 80110c0:	60b9      	str	r1, [r7, #8]
 80110c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d10b      	bne.n	80110e2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80110ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110ce:	f383 8811 	msr	BASEPRI, r3
 80110d2:	f3bf 8f6f 	isb	sy
 80110d6:	f3bf 8f4f 	dsb	sy
 80110da:	617b      	str	r3, [r7, #20]
}
 80110dc:	bf00      	nop
 80110de:	bf00      	nop
 80110e0:	e7fd      	b.n	80110de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80110e2:	4b0a      	ldr	r3, [pc, #40]	@ (801110c <vTaskPlaceOnEventListRestricted+0x54>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	3318      	adds	r3, #24
 80110e8:	4619      	mov	r1, r3
 80110ea:	68f8      	ldr	r0, [r7, #12]
 80110ec:	f7fe f82d 	bl	800f14a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d002      	beq.n	80110fc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80110f6:	f04f 33ff 	mov.w	r3, #4294967295
 80110fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80110fc:	6879      	ldr	r1, [r7, #4]
 80110fe:	68b8      	ldr	r0, [r7, #8]
 8011100:	f000 fde2 	bl	8011cc8 <prvAddCurrentTaskToDelayedList>
	}
 8011104:	bf00      	nop
 8011106:	3718      	adds	r7, #24
 8011108:	46bd      	mov	sp, r7
 801110a:	bd80      	pop	{r7, pc}
 801110c:	200032f4 	.word	0x200032f4

08011110 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b086      	sub	sp, #24
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	68db      	ldr	r3, [r3, #12]
 801111c:	68db      	ldr	r3, [r3, #12]
 801111e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011120:	693b      	ldr	r3, [r7, #16]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d10b      	bne.n	801113e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8011126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801112a:	f383 8811 	msr	BASEPRI, r3
 801112e:	f3bf 8f6f 	isb	sy
 8011132:	f3bf 8f4f 	dsb	sy
 8011136:	60fb      	str	r3, [r7, #12]
}
 8011138:	bf00      	nop
 801113a:	bf00      	nop
 801113c:	e7fd      	b.n	801113a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801113e:	693b      	ldr	r3, [r7, #16]
 8011140:	3318      	adds	r3, #24
 8011142:	4618      	mov	r0, r3
 8011144:	f7fe f85e 	bl	800f204 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011148:	4b1d      	ldr	r3, [pc, #116]	@ (80111c0 <xTaskRemoveFromEventList+0xb0>)
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d11d      	bne.n	801118c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011150:	693b      	ldr	r3, [r7, #16]
 8011152:	3304      	adds	r3, #4
 8011154:	4618      	mov	r0, r3
 8011156:	f7fe f855 	bl	800f204 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801115a:	693b      	ldr	r3, [r7, #16]
 801115c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801115e:	4b19      	ldr	r3, [pc, #100]	@ (80111c4 <xTaskRemoveFromEventList+0xb4>)
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	429a      	cmp	r2, r3
 8011164:	d903      	bls.n	801116e <xTaskRemoveFromEventList+0x5e>
 8011166:	693b      	ldr	r3, [r7, #16]
 8011168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801116a:	4a16      	ldr	r2, [pc, #88]	@ (80111c4 <xTaskRemoveFromEventList+0xb4>)
 801116c:	6013      	str	r3, [r2, #0]
 801116e:	693b      	ldr	r3, [r7, #16]
 8011170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011172:	4613      	mov	r3, r2
 8011174:	009b      	lsls	r3, r3, #2
 8011176:	4413      	add	r3, r2
 8011178:	009b      	lsls	r3, r3, #2
 801117a:	4a13      	ldr	r2, [pc, #76]	@ (80111c8 <xTaskRemoveFromEventList+0xb8>)
 801117c:	441a      	add	r2, r3
 801117e:	693b      	ldr	r3, [r7, #16]
 8011180:	3304      	adds	r3, #4
 8011182:	4619      	mov	r1, r3
 8011184:	4610      	mov	r0, r2
 8011186:	f7fd ffe0 	bl	800f14a <vListInsertEnd>
 801118a:	e005      	b.n	8011198 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801118c:	693b      	ldr	r3, [r7, #16]
 801118e:	3318      	adds	r3, #24
 8011190:	4619      	mov	r1, r3
 8011192:	480e      	ldr	r0, [pc, #56]	@ (80111cc <xTaskRemoveFromEventList+0xbc>)
 8011194:	f7fd ffd9 	bl	800f14a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011198:	693b      	ldr	r3, [r7, #16]
 801119a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801119c:	4b0c      	ldr	r3, [pc, #48]	@ (80111d0 <xTaskRemoveFromEventList+0xc0>)
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d905      	bls.n	80111b2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80111a6:	2301      	movs	r3, #1
 80111a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80111aa:	4b0a      	ldr	r3, [pc, #40]	@ (80111d4 <xTaskRemoveFromEventList+0xc4>)
 80111ac:	2201      	movs	r2, #1
 80111ae:	601a      	str	r2, [r3, #0]
 80111b0:	e001      	b.n	80111b6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80111b2:	2300      	movs	r3, #0
 80111b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80111b6:	697b      	ldr	r3, [r7, #20]
}
 80111b8:	4618      	mov	r0, r3
 80111ba:	3718      	adds	r7, #24
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd80      	pop	{r7, pc}
 80111c0:	200037f0 	.word	0x200037f0
 80111c4:	200037d0 	.word	0x200037d0
 80111c8:	200032f8 	.word	0x200032f8
 80111cc:	20003788 	.word	0x20003788
 80111d0:	200032f4 	.word	0x200032f4
 80111d4:	200037dc 	.word	0x200037dc

080111d8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b086      	sub	sp, #24
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
 80111e0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80111e2:	4b2a      	ldr	r3, [pc, #168]	@ (801128c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d10b      	bne.n	8011202 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 80111ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111ee:	f383 8811 	msr	BASEPRI, r3
 80111f2:	f3bf 8f6f 	isb	sy
 80111f6:	f3bf 8f4f 	dsb	sy
 80111fa:	613b      	str	r3, [r7, #16]
}
 80111fc:	bf00      	nop
 80111fe:	bf00      	nop
 8011200:	e7fd      	b.n	80111fe <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8011202:	683b      	ldr	r3, [r7, #0]
 8011204:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	68db      	ldr	r3, [r3, #12]
 8011210:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8011212:	697b      	ldr	r3, [r7, #20]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d10b      	bne.n	8011230 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8011218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801121c:	f383 8811 	msr	BASEPRI, r3
 8011220:	f3bf 8f6f 	isb	sy
 8011224:	f3bf 8f4f 	dsb	sy
 8011228:	60fb      	str	r3, [r7, #12]
}
 801122a:	bf00      	nop
 801122c:	bf00      	nop
 801122e:	e7fd      	b.n	801122c <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8011230:	6878      	ldr	r0, [r7, #4]
 8011232:	f7fd ffe7 	bl	800f204 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011236:	697b      	ldr	r3, [r7, #20]
 8011238:	3304      	adds	r3, #4
 801123a:	4618      	mov	r0, r3
 801123c:	f7fd ffe2 	bl	800f204 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011244:	4b12      	ldr	r3, [pc, #72]	@ (8011290 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	429a      	cmp	r2, r3
 801124a:	d903      	bls.n	8011254 <vTaskRemoveFromUnorderedEventList+0x7c>
 801124c:	697b      	ldr	r3, [r7, #20]
 801124e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011250:	4a0f      	ldr	r2, [pc, #60]	@ (8011290 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8011252:	6013      	str	r3, [r2, #0]
 8011254:	697b      	ldr	r3, [r7, #20]
 8011256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011258:	4613      	mov	r3, r2
 801125a:	009b      	lsls	r3, r3, #2
 801125c:	4413      	add	r3, r2
 801125e:	009b      	lsls	r3, r3, #2
 8011260:	4a0c      	ldr	r2, [pc, #48]	@ (8011294 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8011262:	441a      	add	r2, r3
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	3304      	adds	r3, #4
 8011268:	4619      	mov	r1, r3
 801126a:	4610      	mov	r0, r2
 801126c:	f7fd ff6d 	bl	800f14a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011274:	4b08      	ldr	r3, [pc, #32]	@ (8011298 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801127a:	429a      	cmp	r2, r3
 801127c:	d902      	bls.n	8011284 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801127e:	4b07      	ldr	r3, [pc, #28]	@ (801129c <vTaskRemoveFromUnorderedEventList+0xc4>)
 8011280:	2201      	movs	r2, #1
 8011282:	601a      	str	r2, [r3, #0]
	}
}
 8011284:	bf00      	nop
 8011286:	3718      	adds	r7, #24
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}
 801128c:	200037f0 	.word	0x200037f0
 8011290:	200037d0 	.word	0x200037d0
 8011294:	200032f8 	.word	0x200032f8
 8011298:	200032f4 	.word	0x200032f4
 801129c:	200037dc 	.word	0x200037dc

080112a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80112a0:	b480      	push	{r7}
 80112a2:	b083      	sub	sp, #12
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80112a8:	4b06      	ldr	r3, [pc, #24]	@ (80112c4 <vTaskInternalSetTimeOutState+0x24>)
 80112aa:	681a      	ldr	r2, [r3, #0]
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80112b0:	4b05      	ldr	r3, [pc, #20]	@ (80112c8 <vTaskInternalSetTimeOutState+0x28>)
 80112b2:	681a      	ldr	r2, [r3, #0]
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	605a      	str	r2, [r3, #4]
}
 80112b8:	bf00      	nop
 80112ba:	370c      	adds	r7, #12
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr
 80112c4:	200037e0 	.word	0x200037e0
 80112c8:	200037cc 	.word	0x200037cc

080112cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b088      	sub	sp, #32
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
 80112d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d10b      	bne.n	80112f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80112dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112e0:	f383 8811 	msr	BASEPRI, r3
 80112e4:	f3bf 8f6f 	isb	sy
 80112e8:	f3bf 8f4f 	dsb	sy
 80112ec:	613b      	str	r3, [r7, #16]
}
 80112ee:	bf00      	nop
 80112f0:	bf00      	nop
 80112f2:	e7fd      	b.n	80112f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d10b      	bne.n	8011312 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80112fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112fe:	f383 8811 	msr	BASEPRI, r3
 8011302:	f3bf 8f6f 	isb	sy
 8011306:	f3bf 8f4f 	dsb	sy
 801130a:	60fb      	str	r3, [r7, #12]
}
 801130c:	bf00      	nop
 801130e:	bf00      	nop
 8011310:	e7fd      	b.n	801130e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8011312:	f001 fa39 	bl	8012788 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011316:	4b1d      	ldr	r3, [pc, #116]	@ (801138c <xTaskCheckForTimeOut+0xc0>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	685b      	ldr	r3, [r3, #4]
 8011320:	69ba      	ldr	r2, [r7, #24]
 8011322:	1ad3      	subs	r3, r2, r3
 8011324:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801132e:	d102      	bne.n	8011336 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011330:	2300      	movs	r3, #0
 8011332:	61fb      	str	r3, [r7, #28]
 8011334:	e023      	b.n	801137e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681a      	ldr	r2, [r3, #0]
 801133a:	4b15      	ldr	r3, [pc, #84]	@ (8011390 <xTaskCheckForTimeOut+0xc4>)
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	429a      	cmp	r2, r3
 8011340:	d007      	beq.n	8011352 <xTaskCheckForTimeOut+0x86>
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	685b      	ldr	r3, [r3, #4]
 8011346:	69ba      	ldr	r2, [r7, #24]
 8011348:	429a      	cmp	r2, r3
 801134a:	d302      	bcc.n	8011352 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801134c:	2301      	movs	r3, #1
 801134e:	61fb      	str	r3, [r7, #28]
 8011350:	e015      	b.n	801137e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	697a      	ldr	r2, [r7, #20]
 8011358:	429a      	cmp	r2, r3
 801135a:	d20b      	bcs.n	8011374 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	681a      	ldr	r2, [r3, #0]
 8011360:	697b      	ldr	r3, [r7, #20]
 8011362:	1ad2      	subs	r2, r2, r3
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011368:	6878      	ldr	r0, [r7, #4]
 801136a:	f7ff ff99 	bl	80112a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801136e:	2300      	movs	r3, #0
 8011370:	61fb      	str	r3, [r7, #28]
 8011372:	e004      	b.n	801137e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	2200      	movs	r2, #0
 8011378:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801137a:	2301      	movs	r3, #1
 801137c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801137e:	f001 fa35 	bl	80127ec <vPortExitCritical>

	return xReturn;
 8011382:	69fb      	ldr	r3, [r7, #28]
}
 8011384:	4618      	mov	r0, r3
 8011386:	3720      	adds	r7, #32
 8011388:	46bd      	mov	sp, r7
 801138a:	bd80      	pop	{r7, pc}
 801138c:	200037cc 	.word	0x200037cc
 8011390:	200037e0 	.word	0x200037e0

08011394 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011394:	b480      	push	{r7}
 8011396:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011398:	4b03      	ldr	r3, [pc, #12]	@ (80113a8 <vTaskMissedYield+0x14>)
 801139a:	2201      	movs	r2, #1
 801139c:	601a      	str	r2, [r3, #0]
}
 801139e:	bf00      	nop
 80113a0:	46bd      	mov	sp, r7
 80113a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a6:	4770      	bx	lr
 80113a8:	200037dc 	.word	0x200037dc

080113ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b082      	sub	sp, #8
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80113b4:	f000 f852 	bl	801145c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80113b8:	4b06      	ldr	r3, [pc, #24]	@ (80113d4 <prvIdleTask+0x28>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	2b01      	cmp	r3, #1
 80113be:	d9f9      	bls.n	80113b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80113c0:	4b05      	ldr	r3, [pc, #20]	@ (80113d8 <prvIdleTask+0x2c>)
 80113c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80113c6:	601a      	str	r2, [r3, #0]
 80113c8:	f3bf 8f4f 	dsb	sy
 80113cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80113d0:	e7f0      	b.n	80113b4 <prvIdleTask+0x8>
 80113d2:	bf00      	nop
 80113d4:	200032f8 	.word	0x200032f8
 80113d8:	e000ed04 	.word	0xe000ed04

080113dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b082      	sub	sp, #8
 80113e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80113e2:	2300      	movs	r3, #0
 80113e4:	607b      	str	r3, [r7, #4]
 80113e6:	e00c      	b.n	8011402 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80113e8:	687a      	ldr	r2, [r7, #4]
 80113ea:	4613      	mov	r3, r2
 80113ec:	009b      	lsls	r3, r3, #2
 80113ee:	4413      	add	r3, r2
 80113f0:	009b      	lsls	r3, r3, #2
 80113f2:	4a12      	ldr	r2, [pc, #72]	@ (801143c <prvInitialiseTaskLists+0x60>)
 80113f4:	4413      	add	r3, r2
 80113f6:	4618      	mov	r0, r3
 80113f8:	f7fd fe7a 	bl	800f0f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	3301      	adds	r3, #1
 8011400:	607b      	str	r3, [r7, #4]
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2b37      	cmp	r3, #55	@ 0x37
 8011406:	d9ef      	bls.n	80113e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011408:	480d      	ldr	r0, [pc, #52]	@ (8011440 <prvInitialiseTaskLists+0x64>)
 801140a:	f7fd fe71 	bl	800f0f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801140e:	480d      	ldr	r0, [pc, #52]	@ (8011444 <prvInitialiseTaskLists+0x68>)
 8011410:	f7fd fe6e 	bl	800f0f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011414:	480c      	ldr	r0, [pc, #48]	@ (8011448 <prvInitialiseTaskLists+0x6c>)
 8011416:	f7fd fe6b 	bl	800f0f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801141a:	480c      	ldr	r0, [pc, #48]	@ (801144c <prvInitialiseTaskLists+0x70>)
 801141c:	f7fd fe68 	bl	800f0f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011420:	480b      	ldr	r0, [pc, #44]	@ (8011450 <prvInitialiseTaskLists+0x74>)
 8011422:	f7fd fe65 	bl	800f0f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011426:	4b0b      	ldr	r3, [pc, #44]	@ (8011454 <prvInitialiseTaskLists+0x78>)
 8011428:	4a05      	ldr	r2, [pc, #20]	@ (8011440 <prvInitialiseTaskLists+0x64>)
 801142a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801142c:	4b0a      	ldr	r3, [pc, #40]	@ (8011458 <prvInitialiseTaskLists+0x7c>)
 801142e:	4a05      	ldr	r2, [pc, #20]	@ (8011444 <prvInitialiseTaskLists+0x68>)
 8011430:	601a      	str	r2, [r3, #0]
}
 8011432:	bf00      	nop
 8011434:	3708      	adds	r7, #8
 8011436:	46bd      	mov	sp, r7
 8011438:	bd80      	pop	{r7, pc}
 801143a:	bf00      	nop
 801143c:	200032f8 	.word	0x200032f8
 8011440:	20003758 	.word	0x20003758
 8011444:	2000376c 	.word	0x2000376c
 8011448:	20003788 	.word	0x20003788
 801144c:	2000379c 	.word	0x2000379c
 8011450:	200037b4 	.word	0x200037b4
 8011454:	20003780 	.word	0x20003780
 8011458:	20003784 	.word	0x20003784

0801145c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b082      	sub	sp, #8
 8011460:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011462:	e019      	b.n	8011498 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011464:	f001 f990 	bl	8012788 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011468:	4b10      	ldr	r3, [pc, #64]	@ (80114ac <prvCheckTasksWaitingTermination+0x50>)
 801146a:	68db      	ldr	r3, [r3, #12]
 801146c:	68db      	ldr	r3, [r3, #12]
 801146e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	3304      	adds	r3, #4
 8011474:	4618      	mov	r0, r3
 8011476:	f7fd fec5 	bl	800f204 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801147a:	4b0d      	ldr	r3, [pc, #52]	@ (80114b0 <prvCheckTasksWaitingTermination+0x54>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	3b01      	subs	r3, #1
 8011480:	4a0b      	ldr	r2, [pc, #44]	@ (80114b0 <prvCheckTasksWaitingTermination+0x54>)
 8011482:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011484:	4b0b      	ldr	r3, [pc, #44]	@ (80114b4 <prvCheckTasksWaitingTermination+0x58>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	3b01      	subs	r3, #1
 801148a:	4a0a      	ldr	r2, [pc, #40]	@ (80114b4 <prvCheckTasksWaitingTermination+0x58>)
 801148c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801148e:	f001 f9ad 	bl	80127ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011492:	6878      	ldr	r0, [r7, #4]
 8011494:	f000 f8ae 	bl	80115f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011498:	4b06      	ldr	r3, [pc, #24]	@ (80114b4 <prvCheckTasksWaitingTermination+0x58>)
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d1e1      	bne.n	8011464 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80114a0:	bf00      	nop
 80114a2:	bf00      	nop
 80114a4:	3708      	adds	r7, #8
 80114a6:	46bd      	mov	sp, r7
 80114a8:	bd80      	pop	{r7, pc}
 80114aa:	bf00      	nop
 80114ac:	2000379c 	.word	0x2000379c
 80114b0:	200037c8 	.word	0x200037c8
 80114b4:	200037b0 	.word	0x200037b0

080114b8 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b086      	sub	sp, #24
 80114bc:	af00      	add	r7, sp, #0
 80114be:	60f8      	str	r0, [r7, #12]
 80114c0:	60b9      	str	r1, [r7, #8]
 80114c2:	607a      	str	r2, [r7, #4]
 80114c4:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d102      	bne.n	80114d2 <vTaskGetInfo+0x1a>
 80114cc:	4b2c      	ldr	r3, [pc, #176]	@ (8011580 <vTaskGetInfo+0xc8>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	e000      	b.n	80114d4 <vTaskGetInfo+0x1c>
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	697a      	ldr	r2, [r7, #20]
 80114da:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80114dc:	697b      	ldr	r3, [r7, #20]
 80114de:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80114e6:	697b      	ldr	r3, [r7, #20]
 80114e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80114f2:	68bb      	ldr	r3, [r7, #8]
 80114f4:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80114f6:	697b      	ldr	r3, [r7, #20]
 80114f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80114fe:	697b      	ldr	r3, [r7, #20]
 8011500:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011502:	68bb      	ldr	r3, [r7, #8]
 8011504:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8011506:	697b      	ldr	r3, [r7, #20]
 8011508:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 801150e:	78fb      	ldrb	r3, [r7, #3]
 8011510:	2b05      	cmp	r3, #5
 8011512:	d01a      	beq.n	801154a <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8011514:	4b1a      	ldr	r3, [pc, #104]	@ (8011580 <vTaskGetInfo+0xc8>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	697a      	ldr	r2, [r7, #20]
 801151a:	429a      	cmp	r2, r3
 801151c:	d103      	bne.n	8011526 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	2200      	movs	r2, #0
 8011522:	731a      	strb	r2, [r3, #12]
 8011524:	e018      	b.n	8011558 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	78fa      	ldrb	r2, [r7, #3]
 801152a:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 801152c:	78fb      	ldrb	r3, [r7, #3]
 801152e:	2b03      	cmp	r3, #3
 8011530:	d112      	bne.n	8011558 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8011532:	f7ff fa8f 	bl	8010a54 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011536:	697b      	ldr	r3, [r7, #20]
 8011538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801153a:	2b00      	cmp	r3, #0
 801153c:	d002      	beq.n	8011544 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	2202      	movs	r2, #2
 8011542:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8011544:	f7ff fa94 	bl	8010a70 <xTaskResumeAll>
 8011548:	e006      	b.n	8011558 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 801154a:	6978      	ldr	r0, [r7, #20]
 801154c:	f7ff f804 	bl	8010558 <eTaskGetState>
 8011550:	4603      	mov	r3, r0
 8011552:	461a      	mov	r2, r3
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d009      	beq.n	8011572 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 801155e:	697b      	ldr	r3, [r7, #20]
 8011560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011562:	4618      	mov	r0, r3
 8011564:	f000 f80e 	bl	8011584 <prvTaskCheckFreeStackSpace>
 8011568:	4603      	mov	r3, r0
 801156a:	461a      	mov	r2, r3
 801156c:	68bb      	ldr	r3, [r7, #8]
 801156e:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8011570:	e002      	b.n	8011578 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8011572:	68bb      	ldr	r3, [r7, #8]
 8011574:	2200      	movs	r2, #0
 8011576:	841a      	strh	r2, [r3, #32]
	}
 8011578:	bf00      	nop
 801157a:	3718      	adds	r7, #24
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}
 8011580:	200032f4 	.word	0x200032f4

08011584 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8011584:	b480      	push	{r7}
 8011586:	b085      	sub	sp, #20
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 801158c:	2300      	movs	r3, #0
 801158e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8011590:	e005      	b.n	801159e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	3301      	adds	r3, #1
 8011596:	607b      	str	r3, [r7, #4]
			ulCount++;
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	3301      	adds	r3, #1
 801159c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	781b      	ldrb	r3, [r3, #0]
 80115a2:	2ba5      	cmp	r3, #165	@ 0xa5
 80115a4:	d0f5      	beq.n	8011592 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	089b      	lsrs	r3, r3, #2
 80115aa:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	b29b      	uxth	r3, r3
	}
 80115b0:	4618      	mov	r0, r3
 80115b2:	3714      	adds	r7, #20
 80115b4:	46bd      	mov	sp, r7
 80115b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ba:	4770      	bx	lr

080115bc <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b086      	sub	sp, #24
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d102      	bne.n	80115d0 <uxTaskGetStackHighWaterMark+0x14>
 80115ca:	4b09      	ldr	r3, [pc, #36]	@ (80115f0 <uxTaskGetStackHighWaterMark+0x34>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	e000      	b.n	80115d2 <uxTaskGetStackHighWaterMark+0x16>
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80115d4:	697b      	ldr	r3, [r7, #20]
 80115d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80115d8:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80115da:	6938      	ldr	r0, [r7, #16]
 80115dc:	f7ff ffd2 	bl	8011584 <prvTaskCheckFreeStackSpace>
 80115e0:	4603      	mov	r3, r0
 80115e2:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80115e4:	68fb      	ldr	r3, [r7, #12]
	}
 80115e6:	4618      	mov	r0, r3
 80115e8:	3718      	adds	r7, #24
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}
 80115ee:	bf00      	nop
 80115f0:	200032f4 	.word	0x200032f4

080115f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b084      	sub	sp, #16
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	335c      	adds	r3, #92	@ 0x5c
 8011600:	4618      	mov	r0, r3
 8011602:	f003 fc1f 	bl	8014e44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801160c:	2b00      	cmp	r3, #0
 801160e:	d108      	bne.n	8011622 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011614:	4618      	mov	r0, r3
 8011616:	f001 faa7 	bl	8012b68 <vPortFree>
				vPortFree( pxTCB );
 801161a:	6878      	ldr	r0, [r7, #4]
 801161c:	f001 faa4 	bl	8012b68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011620:	e019      	b.n	8011656 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8011628:	2b01      	cmp	r3, #1
 801162a:	d103      	bne.n	8011634 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801162c:	6878      	ldr	r0, [r7, #4]
 801162e:	f001 fa9b 	bl	8012b68 <vPortFree>
	}
 8011632:	e010      	b.n	8011656 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801163a:	2b02      	cmp	r3, #2
 801163c:	d00b      	beq.n	8011656 <prvDeleteTCB+0x62>
	__asm volatile
 801163e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011642:	f383 8811 	msr	BASEPRI, r3
 8011646:	f3bf 8f6f 	isb	sy
 801164a:	f3bf 8f4f 	dsb	sy
 801164e:	60fb      	str	r3, [r7, #12]
}
 8011650:	bf00      	nop
 8011652:	bf00      	nop
 8011654:	e7fd      	b.n	8011652 <prvDeleteTCB+0x5e>
	}
 8011656:	bf00      	nop
 8011658:	3710      	adds	r7, #16
 801165a:	46bd      	mov	sp, r7
 801165c:	bd80      	pop	{r7, pc}
	...

08011660 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011660:	b480      	push	{r7}
 8011662:	b083      	sub	sp, #12
 8011664:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011666:	4b0c      	ldr	r3, [pc, #48]	@ (8011698 <prvResetNextTaskUnblockTime+0x38>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d104      	bne.n	801167a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011670:	4b0a      	ldr	r3, [pc, #40]	@ (801169c <prvResetNextTaskUnblockTime+0x3c>)
 8011672:	f04f 32ff 	mov.w	r2, #4294967295
 8011676:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011678:	e008      	b.n	801168c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801167a:	4b07      	ldr	r3, [pc, #28]	@ (8011698 <prvResetNextTaskUnblockTime+0x38>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	68db      	ldr	r3, [r3, #12]
 8011680:	68db      	ldr	r3, [r3, #12]
 8011682:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	685b      	ldr	r3, [r3, #4]
 8011688:	4a04      	ldr	r2, [pc, #16]	@ (801169c <prvResetNextTaskUnblockTime+0x3c>)
 801168a:	6013      	str	r3, [r2, #0]
}
 801168c:	bf00      	nop
 801168e:	370c      	adds	r7, #12
 8011690:	46bd      	mov	sp, r7
 8011692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011696:	4770      	bx	lr
 8011698:	20003780 	.word	0x20003780
 801169c:	200037e8 	.word	0x200037e8

080116a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80116a0:	b480      	push	{r7}
 80116a2:	b083      	sub	sp, #12
 80116a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80116a6:	4b0b      	ldr	r3, [pc, #44]	@ (80116d4 <xTaskGetSchedulerState+0x34>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d102      	bne.n	80116b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80116ae:	2301      	movs	r3, #1
 80116b0:	607b      	str	r3, [r7, #4]
 80116b2:	e008      	b.n	80116c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80116b4:	4b08      	ldr	r3, [pc, #32]	@ (80116d8 <xTaskGetSchedulerState+0x38>)
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d102      	bne.n	80116c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80116bc:	2302      	movs	r3, #2
 80116be:	607b      	str	r3, [r7, #4]
 80116c0:	e001      	b.n	80116c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80116c2:	2300      	movs	r3, #0
 80116c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80116c6:	687b      	ldr	r3, [r7, #4]
	}
 80116c8:	4618      	mov	r0, r3
 80116ca:	370c      	adds	r7, #12
 80116cc:	46bd      	mov	sp, r7
 80116ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d2:	4770      	bx	lr
 80116d4:	200037d4 	.word	0x200037d4
 80116d8:	200037f0 	.word	0x200037f0

080116dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b084      	sub	sp, #16
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80116e8:	2300      	movs	r3, #0
 80116ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d051      	beq.n	8011796 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80116f2:	68bb      	ldr	r3, [r7, #8]
 80116f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116f6:	4b2a      	ldr	r3, [pc, #168]	@ (80117a0 <xTaskPriorityInherit+0xc4>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d241      	bcs.n	8011784 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011700:	68bb      	ldr	r3, [r7, #8]
 8011702:	699b      	ldr	r3, [r3, #24]
 8011704:	2b00      	cmp	r3, #0
 8011706:	db06      	blt.n	8011716 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011708:	4b25      	ldr	r3, [pc, #148]	@ (80117a0 <xTaskPriorityInherit+0xc4>)
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801170e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011716:	68bb      	ldr	r3, [r7, #8]
 8011718:	6959      	ldr	r1, [r3, #20]
 801171a:	68bb      	ldr	r3, [r7, #8]
 801171c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801171e:	4613      	mov	r3, r2
 8011720:	009b      	lsls	r3, r3, #2
 8011722:	4413      	add	r3, r2
 8011724:	009b      	lsls	r3, r3, #2
 8011726:	4a1f      	ldr	r2, [pc, #124]	@ (80117a4 <xTaskPriorityInherit+0xc8>)
 8011728:	4413      	add	r3, r2
 801172a:	4299      	cmp	r1, r3
 801172c:	d122      	bne.n	8011774 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	3304      	adds	r3, #4
 8011732:	4618      	mov	r0, r3
 8011734:	f7fd fd66 	bl	800f204 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011738:	4b19      	ldr	r3, [pc, #100]	@ (80117a0 <xTaskPriorityInherit+0xc4>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801173e:	68bb      	ldr	r3, [r7, #8]
 8011740:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011742:	68bb      	ldr	r3, [r7, #8]
 8011744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011746:	4b18      	ldr	r3, [pc, #96]	@ (80117a8 <xTaskPriorityInherit+0xcc>)
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	429a      	cmp	r2, r3
 801174c:	d903      	bls.n	8011756 <xTaskPriorityInherit+0x7a>
 801174e:	68bb      	ldr	r3, [r7, #8]
 8011750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011752:	4a15      	ldr	r2, [pc, #84]	@ (80117a8 <xTaskPriorityInherit+0xcc>)
 8011754:	6013      	str	r3, [r2, #0]
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801175a:	4613      	mov	r3, r2
 801175c:	009b      	lsls	r3, r3, #2
 801175e:	4413      	add	r3, r2
 8011760:	009b      	lsls	r3, r3, #2
 8011762:	4a10      	ldr	r2, [pc, #64]	@ (80117a4 <xTaskPriorityInherit+0xc8>)
 8011764:	441a      	add	r2, r3
 8011766:	68bb      	ldr	r3, [r7, #8]
 8011768:	3304      	adds	r3, #4
 801176a:	4619      	mov	r1, r3
 801176c:	4610      	mov	r0, r2
 801176e:	f7fd fcec 	bl	800f14a <vListInsertEnd>
 8011772:	e004      	b.n	801177e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011774:	4b0a      	ldr	r3, [pc, #40]	@ (80117a0 <xTaskPriorityInherit+0xc4>)
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801177e:	2301      	movs	r3, #1
 8011780:	60fb      	str	r3, [r7, #12]
 8011782:	e008      	b.n	8011796 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011788:	4b05      	ldr	r3, [pc, #20]	@ (80117a0 <xTaskPriorityInherit+0xc4>)
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801178e:	429a      	cmp	r2, r3
 8011790:	d201      	bcs.n	8011796 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011792:	2301      	movs	r3, #1
 8011794:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011796:	68fb      	ldr	r3, [r7, #12]
	}
 8011798:	4618      	mov	r0, r3
 801179a:	3710      	adds	r7, #16
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}
 80117a0:	200032f4 	.word	0x200032f4
 80117a4:	200032f8 	.word	0x200032f8
 80117a8:	200037d0 	.word	0x200037d0

080117ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b086      	sub	sp, #24
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80117b8:	2300      	movs	r3, #0
 80117ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d058      	beq.n	8011874 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80117c2:	4b2f      	ldr	r3, [pc, #188]	@ (8011880 <xTaskPriorityDisinherit+0xd4>)
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	693a      	ldr	r2, [r7, #16]
 80117c8:	429a      	cmp	r2, r3
 80117ca:	d00b      	beq.n	80117e4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80117cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117d0:	f383 8811 	msr	BASEPRI, r3
 80117d4:	f3bf 8f6f 	isb	sy
 80117d8:	f3bf 8f4f 	dsb	sy
 80117dc:	60fb      	str	r3, [r7, #12]
}
 80117de:	bf00      	nop
 80117e0:	bf00      	nop
 80117e2:	e7fd      	b.n	80117e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80117e4:	693b      	ldr	r3, [r7, #16]
 80117e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d10b      	bne.n	8011804 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80117ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117f0:	f383 8811 	msr	BASEPRI, r3
 80117f4:	f3bf 8f6f 	isb	sy
 80117f8:	f3bf 8f4f 	dsb	sy
 80117fc:	60bb      	str	r3, [r7, #8]
}
 80117fe:	bf00      	nop
 8011800:	bf00      	nop
 8011802:	e7fd      	b.n	8011800 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8011804:	693b      	ldr	r3, [r7, #16]
 8011806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011808:	1e5a      	subs	r2, r3, #1
 801180a:	693b      	ldr	r3, [r7, #16]
 801180c:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801180e:	693b      	ldr	r3, [r7, #16]
 8011810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011812:	693b      	ldr	r3, [r7, #16]
 8011814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011816:	429a      	cmp	r2, r3
 8011818:	d02c      	beq.n	8011874 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801181a:	693b      	ldr	r3, [r7, #16]
 801181c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801181e:	2b00      	cmp	r3, #0
 8011820:	d128      	bne.n	8011874 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011822:	693b      	ldr	r3, [r7, #16]
 8011824:	3304      	adds	r3, #4
 8011826:	4618      	mov	r0, r3
 8011828:	f7fd fcec 	bl	800f204 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801182c:	693b      	ldr	r3, [r7, #16]
 801182e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011830:	693b      	ldr	r3, [r7, #16]
 8011832:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011834:	693b      	ldr	r3, [r7, #16]
 8011836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011838:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801183c:	693b      	ldr	r3, [r7, #16]
 801183e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011840:	693b      	ldr	r3, [r7, #16]
 8011842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011844:	4b0f      	ldr	r3, [pc, #60]	@ (8011884 <xTaskPriorityDisinherit+0xd8>)
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	429a      	cmp	r2, r3
 801184a:	d903      	bls.n	8011854 <xTaskPriorityDisinherit+0xa8>
 801184c:	693b      	ldr	r3, [r7, #16]
 801184e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011850:	4a0c      	ldr	r2, [pc, #48]	@ (8011884 <xTaskPriorityDisinherit+0xd8>)
 8011852:	6013      	str	r3, [r2, #0]
 8011854:	693b      	ldr	r3, [r7, #16]
 8011856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011858:	4613      	mov	r3, r2
 801185a:	009b      	lsls	r3, r3, #2
 801185c:	4413      	add	r3, r2
 801185e:	009b      	lsls	r3, r3, #2
 8011860:	4a09      	ldr	r2, [pc, #36]	@ (8011888 <xTaskPriorityDisinherit+0xdc>)
 8011862:	441a      	add	r2, r3
 8011864:	693b      	ldr	r3, [r7, #16]
 8011866:	3304      	adds	r3, #4
 8011868:	4619      	mov	r1, r3
 801186a:	4610      	mov	r0, r2
 801186c:	f7fd fc6d 	bl	800f14a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011870:	2301      	movs	r3, #1
 8011872:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011874:	697b      	ldr	r3, [r7, #20]
	}
 8011876:	4618      	mov	r0, r3
 8011878:	3718      	adds	r7, #24
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}
 801187e:	bf00      	nop
 8011880:	200032f4 	.word	0x200032f4
 8011884:	200037d0 	.word	0x200037d0
 8011888:	200032f8 	.word	0x200032f8

0801188c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801188c:	b580      	push	{r7, lr}
 801188e:	b088      	sub	sp, #32
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
 8011894:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801189a:	2301      	movs	r3, #1
 801189c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d06c      	beq.n	801197e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80118a4:	69bb      	ldr	r3, [r7, #24]
 80118a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d10b      	bne.n	80118c4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80118ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118b0:	f383 8811 	msr	BASEPRI, r3
 80118b4:	f3bf 8f6f 	isb	sy
 80118b8:	f3bf 8f4f 	dsb	sy
 80118bc:	60fb      	str	r3, [r7, #12]
}
 80118be:	bf00      	nop
 80118c0:	bf00      	nop
 80118c2:	e7fd      	b.n	80118c0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80118c4:	69bb      	ldr	r3, [r7, #24]
 80118c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80118c8:	683a      	ldr	r2, [r7, #0]
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d902      	bls.n	80118d4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	61fb      	str	r3, [r7, #28]
 80118d2:	e002      	b.n	80118da <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80118d4:	69bb      	ldr	r3, [r7, #24]
 80118d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80118d8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80118da:	69bb      	ldr	r3, [r7, #24]
 80118dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118de:	69fa      	ldr	r2, [r7, #28]
 80118e0:	429a      	cmp	r2, r3
 80118e2:	d04c      	beq.n	801197e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80118e4:	69bb      	ldr	r3, [r7, #24]
 80118e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80118e8:	697a      	ldr	r2, [r7, #20]
 80118ea:	429a      	cmp	r2, r3
 80118ec:	d147      	bne.n	801197e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80118ee:	4b26      	ldr	r3, [pc, #152]	@ (8011988 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	69ba      	ldr	r2, [r7, #24]
 80118f4:	429a      	cmp	r2, r3
 80118f6:	d10b      	bne.n	8011910 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80118f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118fc:	f383 8811 	msr	BASEPRI, r3
 8011900:	f3bf 8f6f 	isb	sy
 8011904:	f3bf 8f4f 	dsb	sy
 8011908:	60bb      	str	r3, [r7, #8]
}
 801190a:	bf00      	nop
 801190c:	bf00      	nop
 801190e:	e7fd      	b.n	801190c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011910:	69bb      	ldr	r3, [r7, #24]
 8011912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011914:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011916:	69bb      	ldr	r3, [r7, #24]
 8011918:	69fa      	ldr	r2, [r7, #28]
 801191a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801191c:	69bb      	ldr	r3, [r7, #24]
 801191e:	699b      	ldr	r3, [r3, #24]
 8011920:	2b00      	cmp	r3, #0
 8011922:	db04      	blt.n	801192e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011924:	69fb      	ldr	r3, [r7, #28]
 8011926:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801192a:	69bb      	ldr	r3, [r7, #24]
 801192c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801192e:	69bb      	ldr	r3, [r7, #24]
 8011930:	6959      	ldr	r1, [r3, #20]
 8011932:	693a      	ldr	r2, [r7, #16]
 8011934:	4613      	mov	r3, r2
 8011936:	009b      	lsls	r3, r3, #2
 8011938:	4413      	add	r3, r2
 801193a:	009b      	lsls	r3, r3, #2
 801193c:	4a13      	ldr	r2, [pc, #76]	@ (801198c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801193e:	4413      	add	r3, r2
 8011940:	4299      	cmp	r1, r3
 8011942:	d11c      	bne.n	801197e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011944:	69bb      	ldr	r3, [r7, #24]
 8011946:	3304      	adds	r3, #4
 8011948:	4618      	mov	r0, r3
 801194a:	f7fd fc5b 	bl	800f204 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801194e:	69bb      	ldr	r3, [r7, #24]
 8011950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011952:	4b0f      	ldr	r3, [pc, #60]	@ (8011990 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	429a      	cmp	r2, r3
 8011958:	d903      	bls.n	8011962 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 801195a:	69bb      	ldr	r3, [r7, #24]
 801195c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801195e:	4a0c      	ldr	r2, [pc, #48]	@ (8011990 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011960:	6013      	str	r3, [r2, #0]
 8011962:	69bb      	ldr	r3, [r7, #24]
 8011964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011966:	4613      	mov	r3, r2
 8011968:	009b      	lsls	r3, r3, #2
 801196a:	4413      	add	r3, r2
 801196c:	009b      	lsls	r3, r3, #2
 801196e:	4a07      	ldr	r2, [pc, #28]	@ (801198c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011970:	441a      	add	r2, r3
 8011972:	69bb      	ldr	r3, [r7, #24]
 8011974:	3304      	adds	r3, #4
 8011976:	4619      	mov	r1, r3
 8011978:	4610      	mov	r0, r2
 801197a:	f7fd fbe6 	bl	800f14a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801197e:	bf00      	nop
 8011980:	3720      	adds	r7, #32
 8011982:	46bd      	mov	sp, r7
 8011984:	bd80      	pop	{r7, pc}
 8011986:	bf00      	nop
 8011988:	200032f4 	.word	0x200032f4
 801198c:	200032f8 	.word	0x200032f8
 8011990:	200037d0 	.word	0x200037d0

08011994 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8011994:	b480      	push	{r7}
 8011996:	b083      	sub	sp, #12
 8011998:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801199a:	4b09      	ldr	r3, [pc, #36]	@ (80119c0 <uxTaskResetEventItemValue+0x2c>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	699b      	ldr	r3, [r3, #24]
 80119a0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119a2:	4b07      	ldr	r3, [pc, #28]	@ (80119c0 <uxTaskResetEventItemValue+0x2c>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80119a8:	4b05      	ldr	r3, [pc, #20]	@ (80119c0 <uxTaskResetEventItemValue+0x2c>)
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80119b0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80119b2:	687b      	ldr	r3, [r7, #4]
}
 80119b4:	4618      	mov	r0, r3
 80119b6:	370c      	adds	r7, #12
 80119b8:	46bd      	mov	sp, r7
 80119ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119be:	4770      	bx	lr
 80119c0:	200032f4 	.word	0x200032f4

080119c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80119c4:	b480      	push	{r7}
 80119c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80119c8:	4b07      	ldr	r3, [pc, #28]	@ (80119e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d004      	beq.n	80119da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80119d0:	4b05      	ldr	r3, [pc, #20]	@ (80119e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80119d6:	3201      	adds	r2, #1
 80119d8:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 80119da:	4b03      	ldr	r3, [pc, #12]	@ (80119e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80119dc:	681b      	ldr	r3, [r3, #0]
	}
 80119de:	4618      	mov	r0, r3
 80119e0:	46bd      	mov	sp, r7
 80119e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e6:	4770      	bx	lr
 80119e8:	200032f4 	.word	0x200032f4

080119ec <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b084      	sub	sp, #16
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
 80119f4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80119f6:	f000 fec7 	bl	8012788 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80119fa:	4b20      	ldr	r3, [pc, #128]	@ (8011a7c <ulTaskNotifyTake+0x90>)
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d113      	bne.n	8011a2e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8011a06:	4b1d      	ldr	r3, [pc, #116]	@ (8011a7c <ulTaskNotifyTake+0x90>)
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	2201      	movs	r2, #1
 8011a0c:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac

				if( xTicksToWait > ( TickType_t ) 0 )
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d00b      	beq.n	8011a2e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011a16:	2101      	movs	r1, #1
 8011a18:	6838      	ldr	r0, [r7, #0]
 8011a1a:	f000 f955 	bl	8011cc8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011a1e:	4b18      	ldr	r3, [pc, #96]	@ (8011a80 <ulTaskNotifyTake+0x94>)
 8011a20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a24:	601a      	str	r2, [r3, #0]
 8011a26:	f3bf 8f4f 	dsb	sy
 8011a2a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011a2e:	f000 fedd 	bl	80127ec <vPortExitCritical>

		taskENTER_CRITICAL();
 8011a32:	f000 fea9 	bl	8012788 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8011a36:	4b11      	ldr	r3, [pc, #68]	@ (8011a7c <ulTaskNotifyTake+0x90>)
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011a3e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d00e      	beq.n	8011a64 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d005      	beq.n	8011a58 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8011a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8011a7c <ulTaskNotifyTake+0x90>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	2200      	movs	r2, #0
 8011a52:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8011a56:	e005      	b.n	8011a64 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8011a58:	4b08      	ldr	r3, [pc, #32]	@ (8011a7c <ulTaskNotifyTake+0x90>)
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	68fa      	ldr	r2, [r7, #12]
 8011a5e:	3a01      	subs	r2, #1
 8011a60:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011a64:	4b05      	ldr	r3, [pc, #20]	@ (8011a7c <ulTaskNotifyTake+0x90>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	2200      	movs	r2, #0
 8011a6a:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
		}
		taskEXIT_CRITICAL();
 8011a6e:	f000 febd 	bl	80127ec <vPortExitCritical>

		return ulReturn;
 8011a72:	68fb      	ldr	r3, [r7, #12]
	}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3710      	adds	r7, #16
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}
 8011a7c:	200032f4 	.word	0x200032f4
 8011a80:	e000ed04 	.word	0xe000ed04

08011a84 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b086      	sub	sp, #24
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	60f8      	str	r0, [r7, #12]
 8011a8c:	60b9      	str	r1, [r7, #8]
 8011a8e:	607a      	str	r2, [r7, #4]
 8011a90:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8011a92:	f000 fe79 	bl	8012788 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011a96:	4b29      	ldr	r3, [pc, #164]	@ (8011b3c <xTaskNotifyWait+0xb8>)
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011a9e:	b2db      	uxtb	r3, r3
 8011aa0:	2b02      	cmp	r3, #2
 8011aa2:	d01c      	beq.n	8011ade <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8011aa4:	4b25      	ldr	r3, [pc, #148]	@ (8011b3c <xTaskNotifyWait+0xb8>)
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	f8d3 10a8 	ldr.w	r1, [r3, #168]	@ 0xa8
 8011aac:	68fa      	ldr	r2, [r7, #12]
 8011aae:	43d2      	mvns	r2, r2
 8011ab0:	400a      	ands	r2, r1
 8011ab2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8011ab6:	4b21      	ldr	r3, [pc, #132]	@ (8011b3c <xTaskNotifyWait+0xb8>)
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	2201      	movs	r2, #1
 8011abc:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac

				if( xTicksToWait > ( TickType_t ) 0 )
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d00b      	beq.n	8011ade <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011ac6:	2101      	movs	r1, #1
 8011ac8:	6838      	ldr	r0, [r7, #0]
 8011aca:	f000 f8fd 	bl	8011cc8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011ace:	4b1c      	ldr	r3, [pc, #112]	@ (8011b40 <xTaskNotifyWait+0xbc>)
 8011ad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ad4:	601a      	str	r2, [r3, #0]
 8011ad6:	f3bf 8f4f 	dsb	sy
 8011ada:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011ade:	f000 fe85 	bl	80127ec <vPortExitCritical>

		taskENTER_CRITICAL();
 8011ae2:	f000 fe51 	bl	8012788 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d005      	beq.n	8011af8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8011aec:	4b13      	ldr	r3, [pc, #76]	@ (8011b3c <xTaskNotifyWait+0xb8>)
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011af8:	4b10      	ldr	r3, [pc, #64]	@ (8011b3c <xTaskNotifyWait+0xb8>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011b00:	b2db      	uxtb	r3, r3
 8011b02:	2b02      	cmp	r3, #2
 8011b04:	d002      	beq.n	8011b0c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8011b06:	2300      	movs	r3, #0
 8011b08:	617b      	str	r3, [r7, #20]
 8011b0a:	e00a      	b.n	8011b22 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8011b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8011b3c <xTaskNotifyWait+0xb8>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	f8d3 10a8 	ldr.w	r1, [r3, #168]	@ 0xa8
 8011b14:	68ba      	ldr	r2, [r7, #8]
 8011b16:	43d2      	mvns	r2, r2
 8011b18:	400a      	ands	r2, r1
 8011b1a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
				xReturn = pdTRUE;
 8011b1e:	2301      	movs	r3, #1
 8011b20:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011b22:	4b06      	ldr	r3, [pc, #24]	@ (8011b3c <xTaskNotifyWait+0xb8>)
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	2200      	movs	r2, #0
 8011b28:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
		}
		taskEXIT_CRITICAL();
 8011b2c:	f000 fe5e 	bl	80127ec <vPortExitCritical>

		return xReturn;
 8011b30:	697b      	ldr	r3, [r7, #20]
	}
 8011b32:	4618      	mov	r0, r3
 8011b34:	3718      	adds	r7, #24
 8011b36:	46bd      	mov	sp, r7
 8011b38:	bd80      	pop	{r7, pc}
 8011b3a:	bf00      	nop
 8011b3c:	200032f4 	.word	0x200032f4
 8011b40:	e000ed04 	.word	0xe000ed04

08011b44 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b08a      	sub	sp, #40	@ 0x28
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	60f8      	str	r0, [r7, #12]
 8011b4c:	60b9      	str	r1, [r7, #8]
 8011b4e:	603b      	str	r3, [r7, #0]
 8011b50:	4613      	mov	r3, r2
 8011b52:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011b54:	2301      	movs	r3, #1
 8011b56:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d10b      	bne.n	8011b76 <xTaskGenericNotify+0x32>
	__asm volatile
 8011b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b62:	f383 8811 	msr	BASEPRI, r3
 8011b66:	f3bf 8f6f 	isb	sy
 8011b6a:	f3bf 8f4f 	dsb	sy
 8011b6e:	61bb      	str	r3, [r7, #24]
}
 8011b70:	bf00      	nop
 8011b72:	bf00      	nop
 8011b74:	e7fd      	b.n	8011b72 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8011b7a:	f000 fe05 	bl	8012788 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d004      	beq.n	8011b8e <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011b84:	6a3b      	ldr	r3, [r7, #32]
 8011b86:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8011b8a:	683b      	ldr	r3, [r7, #0]
 8011b8c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011b8e:	6a3b      	ldr	r3, [r7, #32]
 8011b90:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011b94:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011b96:	6a3b      	ldr	r3, [r7, #32]
 8011b98:	2202      	movs	r2, #2
 8011b9a:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac

			switch( eAction )
 8011b9e:	79fb      	ldrb	r3, [r7, #7]
 8011ba0:	2b04      	cmp	r3, #4
 8011ba2:	d82e      	bhi.n	8011c02 <xTaskGenericNotify+0xbe>
 8011ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8011bac <xTaskGenericNotify+0x68>)
 8011ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011baa:	bf00      	nop
 8011bac:	08011c27 	.word	0x08011c27
 8011bb0:	08011bc1 	.word	0x08011bc1
 8011bb4:	08011bd3 	.word	0x08011bd3
 8011bb8:	08011be3 	.word	0x08011be3
 8011bbc:	08011bed 	.word	0x08011bed
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011bc0:	6a3b      	ldr	r3, [r7, #32]
 8011bc2:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8011bc6:	68bb      	ldr	r3, [r7, #8]
 8011bc8:	431a      	orrs	r2, r3
 8011bca:	6a3b      	ldr	r3, [r7, #32]
 8011bcc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 8011bd0:	e02c      	b.n	8011c2c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011bd2:	6a3b      	ldr	r3, [r7, #32]
 8011bd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011bd8:	1c5a      	adds	r2, r3, #1
 8011bda:	6a3b      	ldr	r3, [r7, #32]
 8011bdc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 8011be0:	e024      	b.n	8011c2c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011be2:	6a3b      	ldr	r3, [r7, #32]
 8011be4:	68ba      	ldr	r2, [r7, #8]
 8011be6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 8011bea:	e01f      	b.n	8011c2c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011bec:	7ffb      	ldrb	r3, [r7, #31]
 8011bee:	2b02      	cmp	r3, #2
 8011bf0:	d004      	beq.n	8011bfc <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011bf2:	6a3b      	ldr	r3, [r7, #32]
 8011bf4:	68ba      	ldr	r2, [r7, #8]
 8011bf6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011bfa:	e017      	b.n	8011c2c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8011c00:	e014      	b.n	8011c2c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011c02:	6a3b      	ldr	r3, [r7, #32]
 8011c04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c0c:	d00d      	beq.n	8011c2a <xTaskGenericNotify+0xe6>
	__asm volatile
 8011c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c12:	f383 8811 	msr	BASEPRI, r3
 8011c16:	f3bf 8f6f 	isb	sy
 8011c1a:	f3bf 8f4f 	dsb	sy
 8011c1e:	617b      	str	r3, [r7, #20]
}
 8011c20:	bf00      	nop
 8011c22:	bf00      	nop
 8011c24:	e7fd      	b.n	8011c22 <xTaskGenericNotify+0xde>
					break;
 8011c26:	bf00      	nop
 8011c28:	e000      	b.n	8011c2c <xTaskGenericNotify+0xe8>

					break;
 8011c2a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011c2c:	7ffb      	ldrb	r3, [r7, #31]
 8011c2e:	2b01      	cmp	r3, #1
 8011c30:	d13b      	bne.n	8011caa <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011c32:	6a3b      	ldr	r3, [r7, #32]
 8011c34:	3304      	adds	r3, #4
 8011c36:	4618      	mov	r0, r3
 8011c38:	f7fd fae4 	bl	800f204 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8011c3c:	6a3b      	ldr	r3, [r7, #32]
 8011c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c40:	4b1d      	ldr	r3, [pc, #116]	@ (8011cb8 <xTaskGenericNotify+0x174>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	429a      	cmp	r2, r3
 8011c46:	d903      	bls.n	8011c50 <xTaskGenericNotify+0x10c>
 8011c48:	6a3b      	ldr	r3, [r7, #32]
 8011c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8011cb8 <xTaskGenericNotify+0x174>)
 8011c4e:	6013      	str	r3, [r2, #0]
 8011c50:	6a3b      	ldr	r3, [r7, #32]
 8011c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c54:	4613      	mov	r3, r2
 8011c56:	009b      	lsls	r3, r3, #2
 8011c58:	4413      	add	r3, r2
 8011c5a:	009b      	lsls	r3, r3, #2
 8011c5c:	4a17      	ldr	r2, [pc, #92]	@ (8011cbc <xTaskGenericNotify+0x178>)
 8011c5e:	441a      	add	r2, r3
 8011c60:	6a3b      	ldr	r3, [r7, #32]
 8011c62:	3304      	adds	r3, #4
 8011c64:	4619      	mov	r1, r3
 8011c66:	4610      	mov	r0, r2
 8011c68:	f7fd fa6f 	bl	800f14a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011c6c:	6a3b      	ldr	r3, [r7, #32]
 8011c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d00b      	beq.n	8011c8c <xTaskGenericNotify+0x148>
	__asm volatile
 8011c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c78:	f383 8811 	msr	BASEPRI, r3
 8011c7c:	f3bf 8f6f 	isb	sy
 8011c80:	f3bf 8f4f 	dsb	sy
 8011c84:	613b      	str	r3, [r7, #16]
}
 8011c86:	bf00      	nop
 8011c88:	bf00      	nop
 8011c8a:	e7fd      	b.n	8011c88 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011c8c:	6a3b      	ldr	r3, [r7, #32]
 8011c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c90:	4b0b      	ldr	r3, [pc, #44]	@ (8011cc0 <xTaskGenericNotify+0x17c>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c96:	429a      	cmp	r2, r3
 8011c98:	d907      	bls.n	8011caa <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8011c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8011cc4 <xTaskGenericNotify+0x180>)
 8011c9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ca0:	601a      	str	r2, [r3, #0]
 8011ca2:	f3bf 8f4f 	dsb	sy
 8011ca6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011caa:	f000 fd9f 	bl	80127ec <vPortExitCritical>

		return xReturn;
 8011cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	3728      	adds	r7, #40	@ 0x28
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	bd80      	pop	{r7, pc}
 8011cb8:	200037d0 	.word	0x200037d0
 8011cbc:	200032f8 	.word	0x200032f8
 8011cc0:	200032f4 	.word	0x200032f4
 8011cc4:	e000ed04 	.word	0xe000ed04

08011cc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b084      	sub	sp, #16
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
 8011cd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011cd2:	4b21      	ldr	r3, [pc, #132]	@ (8011d58 <prvAddCurrentTaskToDelayedList+0x90>)
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011cd8:	4b20      	ldr	r3, [pc, #128]	@ (8011d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	3304      	adds	r3, #4
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7fd fa90 	bl	800f204 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cea:	d10a      	bne.n	8011d02 <prvAddCurrentTaskToDelayedList+0x3a>
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d007      	beq.n	8011d02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8011d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	3304      	adds	r3, #4
 8011cf8:	4619      	mov	r1, r3
 8011cfa:	4819      	ldr	r0, [pc, #100]	@ (8011d60 <prvAddCurrentTaskToDelayedList+0x98>)
 8011cfc:	f7fd fa25 	bl	800f14a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011d00:	e026      	b.n	8011d50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011d02:	68fa      	ldr	r2, [r7, #12]
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	4413      	add	r3, r2
 8011d08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011d0a:	4b14      	ldr	r3, [pc, #80]	@ (8011d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	68ba      	ldr	r2, [r7, #8]
 8011d10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011d12:	68ba      	ldr	r2, [r7, #8]
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	429a      	cmp	r2, r3
 8011d18:	d209      	bcs.n	8011d2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d1a:	4b12      	ldr	r3, [pc, #72]	@ (8011d64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011d1c:	681a      	ldr	r2, [r3, #0]
 8011d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8011d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	3304      	adds	r3, #4
 8011d24:	4619      	mov	r1, r3
 8011d26:	4610      	mov	r0, r2
 8011d28:	f7fd fa33 	bl	800f192 <vListInsert>
}
 8011d2c:	e010      	b.n	8011d50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8011d68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011d30:	681a      	ldr	r2, [r3, #0]
 8011d32:	4b0a      	ldr	r3, [pc, #40]	@ (8011d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	3304      	adds	r3, #4
 8011d38:	4619      	mov	r1, r3
 8011d3a:	4610      	mov	r0, r2
 8011d3c:	f7fd fa29 	bl	800f192 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011d40:	4b0a      	ldr	r3, [pc, #40]	@ (8011d6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	68ba      	ldr	r2, [r7, #8]
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d202      	bcs.n	8011d50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011d4a:	4a08      	ldr	r2, [pc, #32]	@ (8011d6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	6013      	str	r3, [r2, #0]
}
 8011d50:	bf00      	nop
 8011d52:	3710      	adds	r7, #16
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}
 8011d58:	200037cc 	.word	0x200037cc
 8011d5c:	200032f4 	.word	0x200032f4
 8011d60:	200037b4 	.word	0x200037b4
 8011d64:	20003784 	.word	0x20003784
 8011d68:	20003780 	.word	0x20003780
 8011d6c:	200037e8 	.word	0x200037e8

08011d70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b08a      	sub	sp, #40	@ 0x28
 8011d74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011d76:	2300      	movs	r3, #0
 8011d78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011d7a:	f000 fb71 	bl	8012460 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8011df4 <xTimerCreateTimerTask+0x84>)
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d021      	beq.n	8011dca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011d86:	2300      	movs	r3, #0
 8011d88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011d8e:	1d3a      	adds	r2, r7, #4
 8011d90:	f107 0108 	add.w	r1, r7, #8
 8011d94:	f107 030c 	add.w	r3, r7, #12
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f7fc ffd3 	bl	800ed44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011d9e:	6879      	ldr	r1, [r7, #4]
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	68fa      	ldr	r2, [r7, #12]
 8011da4:	9202      	str	r2, [sp, #8]
 8011da6:	9301      	str	r3, [sp, #4]
 8011da8:	2302      	movs	r3, #2
 8011daa:	9300      	str	r3, [sp, #0]
 8011dac:	2300      	movs	r3, #0
 8011dae:	460a      	mov	r2, r1
 8011db0:	4911      	ldr	r1, [pc, #68]	@ (8011df8 <xTimerCreateTimerTask+0x88>)
 8011db2:	4812      	ldr	r0, [pc, #72]	@ (8011dfc <xTimerCreateTimerTask+0x8c>)
 8011db4:	f7fe f962 	bl	801007c <xTaskCreateStatic>
 8011db8:	4603      	mov	r3, r0
 8011dba:	4a11      	ldr	r2, [pc, #68]	@ (8011e00 <xTimerCreateTimerTask+0x90>)
 8011dbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011dbe:	4b10      	ldr	r3, [pc, #64]	@ (8011e00 <xTimerCreateTimerTask+0x90>)
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d001      	beq.n	8011dca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011dc6:	2301      	movs	r3, #1
 8011dc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011dca:	697b      	ldr	r3, [r7, #20]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d10b      	bne.n	8011de8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8011dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dd4:	f383 8811 	msr	BASEPRI, r3
 8011dd8:	f3bf 8f6f 	isb	sy
 8011ddc:	f3bf 8f4f 	dsb	sy
 8011de0:	613b      	str	r3, [r7, #16]
}
 8011de2:	bf00      	nop
 8011de4:	bf00      	nop
 8011de6:	e7fd      	b.n	8011de4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011de8:	697b      	ldr	r3, [r7, #20]
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	3718      	adds	r7, #24
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}
 8011df2:	bf00      	nop
 8011df4:	2000382c 	.word	0x2000382c
 8011df8:	08019ae4 	.word	0x08019ae4
 8011dfc:	08011ff9 	.word	0x08011ff9
 8011e00:	20003830 	.word	0x20003830

08011e04 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b088      	sub	sp, #32
 8011e08:	af02      	add	r7, sp, #8
 8011e0a:	60f8      	str	r0, [r7, #12]
 8011e0c:	60b9      	str	r1, [r7, #8]
 8011e0e:	607a      	str	r2, [r7, #4]
 8011e10:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8011e12:	202c      	movs	r0, #44	@ 0x2c
 8011e14:	f000 fdda 	bl	80129cc <pvPortMalloc>
 8011e18:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8011e1a:	697b      	ldr	r3, [r7, #20]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d00d      	beq.n	8011e3c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8011e20:	697b      	ldr	r3, [r7, #20]
 8011e22:	2200      	movs	r2, #0
 8011e24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011e28:	697b      	ldr	r3, [r7, #20]
 8011e2a:	9301      	str	r3, [sp, #4]
 8011e2c:	6a3b      	ldr	r3, [r7, #32]
 8011e2e:	9300      	str	r3, [sp, #0]
 8011e30:	683b      	ldr	r3, [r7, #0]
 8011e32:	687a      	ldr	r2, [r7, #4]
 8011e34:	68b9      	ldr	r1, [r7, #8]
 8011e36:	68f8      	ldr	r0, [r7, #12]
 8011e38:	f000 f805 	bl	8011e46 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011e3c:	697b      	ldr	r3, [r7, #20]
	}
 8011e3e:	4618      	mov	r0, r3
 8011e40:	3718      	adds	r7, #24
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}

08011e46 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8011e46:	b580      	push	{r7, lr}
 8011e48:	b086      	sub	sp, #24
 8011e4a:	af00      	add	r7, sp, #0
 8011e4c:	60f8      	str	r0, [r7, #12]
 8011e4e:	60b9      	str	r1, [r7, #8]
 8011e50:	607a      	str	r2, [r7, #4]
 8011e52:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8011e54:	68bb      	ldr	r3, [r7, #8]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d10b      	bne.n	8011e72 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8011e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e5e:	f383 8811 	msr	BASEPRI, r3
 8011e62:	f3bf 8f6f 	isb	sy
 8011e66:	f3bf 8f4f 	dsb	sy
 8011e6a:	617b      	str	r3, [r7, #20]
}
 8011e6c:	bf00      	nop
 8011e6e:	bf00      	nop
 8011e70:	e7fd      	b.n	8011e6e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8011e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d01e      	beq.n	8011eb6 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8011e78:	f000 faf2 	bl	8012460 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8011e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e7e:	68fa      	ldr	r2, [r7, #12]
 8011e80:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8011e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e84:	68ba      	ldr	r2, [r7, #8]
 8011e86:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8011e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e8a:	683a      	ldr	r2, [r7, #0]
 8011e8c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8011e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e90:	6a3a      	ldr	r2, [r7, #32]
 8011e92:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8011e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e96:	3304      	adds	r3, #4
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7fd f949 	bl	800f130 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d008      	beq.n	8011eb6 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8011ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ea6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011eaa:	f043 0304 	orr.w	r3, r3, #4
 8011eae:	b2da      	uxtb	r2, r3
 8011eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8011eb6:	bf00      	nop
 8011eb8:	3718      	adds	r7, #24
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}
	...

08011ec0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b08a      	sub	sp, #40	@ 0x28
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	60f8      	str	r0, [r7, #12]
 8011ec8:	60b9      	str	r1, [r7, #8]
 8011eca:	607a      	str	r2, [r7, #4]
 8011ecc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011ece:	2300      	movs	r3, #0
 8011ed0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d10b      	bne.n	8011ef0 <xTimerGenericCommand+0x30>
	__asm volatile
 8011ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011edc:	f383 8811 	msr	BASEPRI, r3
 8011ee0:	f3bf 8f6f 	isb	sy
 8011ee4:	f3bf 8f4f 	dsb	sy
 8011ee8:	623b      	str	r3, [r7, #32]
}
 8011eea:	bf00      	nop
 8011eec:	bf00      	nop
 8011eee:	e7fd      	b.n	8011eec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011ef0:	4b19      	ldr	r3, [pc, #100]	@ (8011f58 <xTimerGenericCommand+0x98>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d02a      	beq.n	8011f4e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011ef8:	68bb      	ldr	r3, [r7, #8]
 8011efa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011f04:	68bb      	ldr	r3, [r7, #8]
 8011f06:	2b05      	cmp	r3, #5
 8011f08:	dc18      	bgt.n	8011f3c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011f0a:	f7ff fbc9 	bl	80116a0 <xTaskGetSchedulerState>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	2b02      	cmp	r3, #2
 8011f12:	d109      	bne.n	8011f28 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011f14:	4b10      	ldr	r3, [pc, #64]	@ (8011f58 <xTimerGenericCommand+0x98>)
 8011f16:	6818      	ldr	r0, [r3, #0]
 8011f18:	f107 0110 	add.w	r1, r7, #16
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011f20:	f7fd fb12 	bl	800f548 <xQueueGenericSend>
 8011f24:	6278      	str	r0, [r7, #36]	@ 0x24
 8011f26:	e012      	b.n	8011f4e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011f28:	4b0b      	ldr	r3, [pc, #44]	@ (8011f58 <xTimerGenericCommand+0x98>)
 8011f2a:	6818      	ldr	r0, [r3, #0]
 8011f2c:	f107 0110 	add.w	r1, r7, #16
 8011f30:	2300      	movs	r3, #0
 8011f32:	2200      	movs	r2, #0
 8011f34:	f7fd fb08 	bl	800f548 <xQueueGenericSend>
 8011f38:	6278      	str	r0, [r7, #36]	@ 0x24
 8011f3a:	e008      	b.n	8011f4e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011f3c:	4b06      	ldr	r3, [pc, #24]	@ (8011f58 <xTimerGenericCommand+0x98>)
 8011f3e:	6818      	ldr	r0, [r3, #0]
 8011f40:	f107 0110 	add.w	r1, r7, #16
 8011f44:	2300      	movs	r3, #0
 8011f46:	683a      	ldr	r2, [r7, #0]
 8011f48:	f7fd fc00 	bl	800f74c <xQueueGenericSendFromISR>
 8011f4c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011f50:	4618      	mov	r0, r3
 8011f52:	3728      	adds	r7, #40	@ 0x28
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}
 8011f58:	2000382c 	.word	0x2000382c

08011f5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b088      	sub	sp, #32
 8011f60:	af02      	add	r7, sp, #8
 8011f62:	6078      	str	r0, [r7, #4]
 8011f64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f66:	4b23      	ldr	r3, [pc, #140]	@ (8011ff4 <prvProcessExpiredTimer+0x98>)
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	68db      	ldr	r3, [r3, #12]
 8011f6c:	68db      	ldr	r3, [r3, #12]
 8011f6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011f70:	697b      	ldr	r3, [r7, #20]
 8011f72:	3304      	adds	r3, #4
 8011f74:	4618      	mov	r0, r3
 8011f76:	f7fd f945 	bl	800f204 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011f7a:	697b      	ldr	r3, [r7, #20]
 8011f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011f80:	f003 0304 	and.w	r3, r3, #4
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d023      	beq.n	8011fd0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011f88:	697b      	ldr	r3, [r7, #20]
 8011f8a:	699a      	ldr	r2, [r3, #24]
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	18d1      	adds	r1, r2, r3
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	683a      	ldr	r2, [r7, #0]
 8011f94:	6978      	ldr	r0, [r7, #20]
 8011f96:	f000 f8d5 	bl	8012144 <prvInsertTimerInActiveList>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d020      	beq.n	8011fe2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	9300      	str	r3, [sp, #0]
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	687a      	ldr	r2, [r7, #4]
 8011fa8:	2100      	movs	r1, #0
 8011faa:	6978      	ldr	r0, [r7, #20]
 8011fac:	f7ff ff88 	bl	8011ec0 <xTimerGenericCommand>
 8011fb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011fb2:	693b      	ldr	r3, [r7, #16]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d114      	bne.n	8011fe2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8011fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fbc:	f383 8811 	msr	BASEPRI, r3
 8011fc0:	f3bf 8f6f 	isb	sy
 8011fc4:	f3bf 8f4f 	dsb	sy
 8011fc8:	60fb      	str	r3, [r7, #12]
}
 8011fca:	bf00      	nop
 8011fcc:	bf00      	nop
 8011fce:	e7fd      	b.n	8011fcc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011fd0:	697b      	ldr	r3, [r7, #20]
 8011fd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011fd6:	f023 0301 	bic.w	r3, r3, #1
 8011fda:	b2da      	uxtb	r2, r3
 8011fdc:	697b      	ldr	r3, [r7, #20]
 8011fde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011fe2:	697b      	ldr	r3, [r7, #20]
 8011fe4:	6a1b      	ldr	r3, [r3, #32]
 8011fe6:	6978      	ldr	r0, [r7, #20]
 8011fe8:	4798      	blx	r3
}
 8011fea:	bf00      	nop
 8011fec:	3718      	adds	r7, #24
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}
 8011ff2:	bf00      	nop
 8011ff4:	20003824 	.word	0x20003824

08011ff8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b084      	sub	sp, #16
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012000:	f107 0308 	add.w	r3, r7, #8
 8012004:	4618      	mov	r0, r3
 8012006:	f000 f859 	bl	80120bc <prvGetNextExpireTime>
 801200a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801200c:	68bb      	ldr	r3, [r7, #8]
 801200e:	4619      	mov	r1, r3
 8012010:	68f8      	ldr	r0, [r7, #12]
 8012012:	f000 f805 	bl	8012020 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012016:	f000 f8d7 	bl	80121c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801201a:	bf00      	nop
 801201c:	e7f0      	b.n	8012000 <prvTimerTask+0x8>
	...

08012020 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b084      	sub	sp, #16
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
 8012028:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801202a:	f7fe fd13 	bl	8010a54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801202e:	f107 0308 	add.w	r3, r7, #8
 8012032:	4618      	mov	r0, r3
 8012034:	f000 f866 	bl	8012104 <prvSampleTimeNow>
 8012038:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801203a:	68bb      	ldr	r3, [r7, #8]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d130      	bne.n	80120a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012040:	683b      	ldr	r3, [r7, #0]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d10a      	bne.n	801205c <prvProcessTimerOrBlockTask+0x3c>
 8012046:	687a      	ldr	r2, [r7, #4]
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	429a      	cmp	r2, r3
 801204c:	d806      	bhi.n	801205c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801204e:	f7fe fd0f 	bl	8010a70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012052:	68f9      	ldr	r1, [r7, #12]
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f7ff ff81 	bl	8011f5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801205a:	e024      	b.n	80120a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801205c:	683b      	ldr	r3, [r7, #0]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d008      	beq.n	8012074 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012062:	4b13      	ldr	r3, [pc, #76]	@ (80120b0 <prvProcessTimerOrBlockTask+0x90>)
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d101      	bne.n	8012070 <prvProcessTimerOrBlockTask+0x50>
 801206c:	2301      	movs	r3, #1
 801206e:	e000      	b.n	8012072 <prvProcessTimerOrBlockTask+0x52>
 8012070:	2300      	movs	r3, #0
 8012072:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012074:	4b0f      	ldr	r3, [pc, #60]	@ (80120b4 <prvProcessTimerOrBlockTask+0x94>)
 8012076:	6818      	ldr	r0, [r3, #0]
 8012078:	687a      	ldr	r2, [r7, #4]
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	1ad3      	subs	r3, r2, r3
 801207e:	683a      	ldr	r2, [r7, #0]
 8012080:	4619      	mov	r1, r3
 8012082:	f7fd ffc7 	bl	8010014 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012086:	f7fe fcf3 	bl	8010a70 <xTaskResumeAll>
 801208a:	4603      	mov	r3, r0
 801208c:	2b00      	cmp	r3, #0
 801208e:	d10a      	bne.n	80120a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012090:	4b09      	ldr	r3, [pc, #36]	@ (80120b8 <prvProcessTimerOrBlockTask+0x98>)
 8012092:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012096:	601a      	str	r2, [r3, #0]
 8012098:	f3bf 8f4f 	dsb	sy
 801209c:	f3bf 8f6f 	isb	sy
}
 80120a0:	e001      	b.n	80120a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80120a2:	f7fe fce5 	bl	8010a70 <xTaskResumeAll>
}
 80120a6:	bf00      	nop
 80120a8:	3710      	adds	r7, #16
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd80      	pop	{r7, pc}
 80120ae:	bf00      	nop
 80120b0:	20003828 	.word	0x20003828
 80120b4:	2000382c 	.word	0x2000382c
 80120b8:	e000ed04 	.word	0xe000ed04

080120bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80120bc:	b480      	push	{r7}
 80120be:	b085      	sub	sp, #20
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80120c4:	4b0e      	ldr	r3, [pc, #56]	@ (8012100 <prvGetNextExpireTime+0x44>)
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d101      	bne.n	80120d2 <prvGetNextExpireTime+0x16>
 80120ce:	2201      	movs	r2, #1
 80120d0:	e000      	b.n	80120d4 <prvGetNextExpireTime+0x18>
 80120d2:	2200      	movs	r2, #0
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d105      	bne.n	80120ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80120e0:	4b07      	ldr	r3, [pc, #28]	@ (8012100 <prvGetNextExpireTime+0x44>)
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	68db      	ldr	r3, [r3, #12]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	60fb      	str	r3, [r7, #12]
 80120ea:	e001      	b.n	80120f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80120ec:	2300      	movs	r3, #0
 80120ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80120f0:	68fb      	ldr	r3, [r7, #12]
}
 80120f2:	4618      	mov	r0, r3
 80120f4:	3714      	adds	r7, #20
 80120f6:	46bd      	mov	sp, r7
 80120f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fc:	4770      	bx	lr
 80120fe:	bf00      	nop
 8012100:	20003824 	.word	0x20003824

08012104 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b084      	sub	sp, #16
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801210c:	f7fe fd4e 	bl	8010bac <xTaskGetTickCount>
 8012110:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012112:	4b0b      	ldr	r3, [pc, #44]	@ (8012140 <prvSampleTimeNow+0x3c>)
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	68fa      	ldr	r2, [r7, #12]
 8012118:	429a      	cmp	r2, r3
 801211a:	d205      	bcs.n	8012128 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801211c:	f000 f93a 	bl	8012394 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2201      	movs	r2, #1
 8012124:	601a      	str	r2, [r3, #0]
 8012126:	e002      	b.n	801212e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	2200      	movs	r2, #0
 801212c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801212e:	4a04      	ldr	r2, [pc, #16]	@ (8012140 <prvSampleTimeNow+0x3c>)
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012134:	68fb      	ldr	r3, [r7, #12]
}
 8012136:	4618      	mov	r0, r3
 8012138:	3710      	adds	r7, #16
 801213a:	46bd      	mov	sp, r7
 801213c:	bd80      	pop	{r7, pc}
 801213e:	bf00      	nop
 8012140:	20003834 	.word	0x20003834

08012144 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012144:	b580      	push	{r7, lr}
 8012146:	b086      	sub	sp, #24
 8012148:	af00      	add	r7, sp, #0
 801214a:	60f8      	str	r0, [r7, #12]
 801214c:	60b9      	str	r1, [r7, #8]
 801214e:	607a      	str	r2, [r7, #4]
 8012150:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012152:	2300      	movs	r3, #0
 8012154:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	68ba      	ldr	r2, [r7, #8]
 801215a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	68fa      	ldr	r2, [r7, #12]
 8012160:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012162:	68ba      	ldr	r2, [r7, #8]
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	429a      	cmp	r2, r3
 8012168:	d812      	bhi.n	8012190 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801216a:	687a      	ldr	r2, [r7, #4]
 801216c:	683b      	ldr	r3, [r7, #0]
 801216e:	1ad2      	subs	r2, r2, r3
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	699b      	ldr	r3, [r3, #24]
 8012174:	429a      	cmp	r2, r3
 8012176:	d302      	bcc.n	801217e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012178:	2301      	movs	r3, #1
 801217a:	617b      	str	r3, [r7, #20]
 801217c:	e01b      	b.n	80121b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801217e:	4b10      	ldr	r3, [pc, #64]	@ (80121c0 <prvInsertTimerInActiveList+0x7c>)
 8012180:	681a      	ldr	r2, [r3, #0]
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	3304      	adds	r3, #4
 8012186:	4619      	mov	r1, r3
 8012188:	4610      	mov	r0, r2
 801218a:	f7fd f802 	bl	800f192 <vListInsert>
 801218e:	e012      	b.n	80121b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012190:	687a      	ldr	r2, [r7, #4]
 8012192:	683b      	ldr	r3, [r7, #0]
 8012194:	429a      	cmp	r2, r3
 8012196:	d206      	bcs.n	80121a6 <prvInsertTimerInActiveList+0x62>
 8012198:	68ba      	ldr	r2, [r7, #8]
 801219a:	683b      	ldr	r3, [r7, #0]
 801219c:	429a      	cmp	r2, r3
 801219e:	d302      	bcc.n	80121a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80121a0:	2301      	movs	r3, #1
 80121a2:	617b      	str	r3, [r7, #20]
 80121a4:	e007      	b.n	80121b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80121a6:	4b07      	ldr	r3, [pc, #28]	@ (80121c4 <prvInsertTimerInActiveList+0x80>)
 80121a8:	681a      	ldr	r2, [r3, #0]
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	3304      	adds	r3, #4
 80121ae:	4619      	mov	r1, r3
 80121b0:	4610      	mov	r0, r2
 80121b2:	f7fc ffee 	bl	800f192 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80121b6:	697b      	ldr	r3, [r7, #20]
}
 80121b8:	4618      	mov	r0, r3
 80121ba:	3718      	adds	r7, #24
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}
 80121c0:	20003828 	.word	0x20003828
 80121c4:	20003824 	.word	0x20003824

080121c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b08e      	sub	sp, #56	@ 0x38
 80121cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80121ce:	e0ce      	b.n	801236e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	da19      	bge.n	801220a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80121d6:	1d3b      	adds	r3, r7, #4
 80121d8:	3304      	adds	r3, #4
 80121da:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80121dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d10b      	bne.n	80121fa <prvProcessReceivedCommands+0x32>
	__asm volatile
 80121e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121e6:	f383 8811 	msr	BASEPRI, r3
 80121ea:	f3bf 8f6f 	isb	sy
 80121ee:	f3bf 8f4f 	dsb	sy
 80121f2:	61fb      	str	r3, [r7, #28]
}
 80121f4:	bf00      	nop
 80121f6:	bf00      	nop
 80121f8:	e7fd      	b.n	80121f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80121fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012200:	6850      	ldr	r0, [r2, #4]
 8012202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012204:	6892      	ldr	r2, [r2, #8]
 8012206:	4611      	mov	r1, r2
 8012208:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	2b00      	cmp	r3, #0
 801220e:	f2c0 80ae 	blt.w	801236e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012218:	695b      	ldr	r3, [r3, #20]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d004      	beq.n	8012228 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801221e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012220:	3304      	adds	r3, #4
 8012222:	4618      	mov	r0, r3
 8012224:	f7fc ffee 	bl	800f204 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012228:	463b      	mov	r3, r7
 801222a:	4618      	mov	r0, r3
 801222c:	f7ff ff6a 	bl	8012104 <prvSampleTimeNow>
 8012230:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	2b09      	cmp	r3, #9
 8012236:	f200 8097 	bhi.w	8012368 <prvProcessReceivedCommands+0x1a0>
 801223a:	a201      	add	r2, pc, #4	@ (adr r2, 8012240 <prvProcessReceivedCommands+0x78>)
 801223c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012240:	08012269 	.word	0x08012269
 8012244:	08012269 	.word	0x08012269
 8012248:	08012269 	.word	0x08012269
 801224c:	080122df 	.word	0x080122df
 8012250:	080122f3 	.word	0x080122f3
 8012254:	0801233f 	.word	0x0801233f
 8012258:	08012269 	.word	0x08012269
 801225c:	08012269 	.word	0x08012269
 8012260:	080122df 	.word	0x080122df
 8012264:	080122f3 	.word	0x080122f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801226a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801226e:	f043 0301 	orr.w	r3, r3, #1
 8012272:	b2da      	uxtb	r2, r3
 8012274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012276:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801227a:	68ba      	ldr	r2, [r7, #8]
 801227c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801227e:	699b      	ldr	r3, [r3, #24]
 8012280:	18d1      	adds	r1, r2, r3
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012286:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012288:	f7ff ff5c 	bl	8012144 <prvInsertTimerInActiveList>
 801228c:	4603      	mov	r3, r0
 801228e:	2b00      	cmp	r3, #0
 8012290:	d06c      	beq.n	801236c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012294:	6a1b      	ldr	r3, [r3, #32]
 8012296:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012298:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801229a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801229c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80122a0:	f003 0304 	and.w	r3, r3, #4
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d061      	beq.n	801236c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80122a8:	68ba      	ldr	r2, [r7, #8]
 80122aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122ac:	699b      	ldr	r3, [r3, #24]
 80122ae:	441a      	add	r2, r3
 80122b0:	2300      	movs	r3, #0
 80122b2:	9300      	str	r3, [sp, #0]
 80122b4:	2300      	movs	r3, #0
 80122b6:	2100      	movs	r1, #0
 80122b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80122ba:	f7ff fe01 	bl	8011ec0 <xTimerGenericCommand>
 80122be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80122c0:	6a3b      	ldr	r3, [r7, #32]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d152      	bne.n	801236c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80122c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122ca:	f383 8811 	msr	BASEPRI, r3
 80122ce:	f3bf 8f6f 	isb	sy
 80122d2:	f3bf 8f4f 	dsb	sy
 80122d6:	61bb      	str	r3, [r7, #24]
}
 80122d8:	bf00      	nop
 80122da:	bf00      	nop
 80122dc:	e7fd      	b.n	80122da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80122de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80122e4:	f023 0301 	bic.w	r3, r3, #1
 80122e8:	b2da      	uxtb	r2, r3
 80122ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80122f0:	e03d      	b.n	801236e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80122f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80122f8:	f043 0301 	orr.w	r3, r3, #1
 80122fc:	b2da      	uxtb	r2, r3
 80122fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012300:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012304:	68ba      	ldr	r2, [r7, #8]
 8012306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012308:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801230a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801230c:	699b      	ldr	r3, [r3, #24]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d10b      	bne.n	801232a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8012312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012316:	f383 8811 	msr	BASEPRI, r3
 801231a:	f3bf 8f6f 	isb	sy
 801231e:	f3bf 8f4f 	dsb	sy
 8012322:	617b      	str	r3, [r7, #20]
}
 8012324:	bf00      	nop
 8012326:	bf00      	nop
 8012328:	e7fd      	b.n	8012326 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801232a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801232c:	699a      	ldr	r2, [r3, #24]
 801232e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012330:	18d1      	adds	r1, r2, r3
 8012332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012336:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012338:	f7ff ff04 	bl	8012144 <prvInsertTimerInActiveList>
					break;
 801233c:	e017      	b.n	801236e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801233e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012340:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012344:	f003 0302 	and.w	r3, r3, #2
 8012348:	2b00      	cmp	r3, #0
 801234a:	d103      	bne.n	8012354 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801234c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801234e:	f000 fc0b 	bl	8012b68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012352:	e00c      	b.n	801236e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012356:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801235a:	f023 0301 	bic.w	r3, r3, #1
 801235e:	b2da      	uxtb	r2, r3
 8012360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012362:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8012366:	e002      	b.n	801236e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8012368:	bf00      	nop
 801236a:	e000      	b.n	801236e <prvProcessReceivedCommands+0x1a6>
					break;
 801236c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801236e:	4b08      	ldr	r3, [pc, #32]	@ (8012390 <prvProcessReceivedCommands+0x1c8>)
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	1d39      	adds	r1, r7, #4
 8012374:	2200      	movs	r2, #0
 8012376:	4618      	mov	r0, r3
 8012378:	f7fd fa86 	bl	800f888 <xQueueReceive>
 801237c:	4603      	mov	r3, r0
 801237e:	2b00      	cmp	r3, #0
 8012380:	f47f af26 	bne.w	80121d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8012384:	bf00      	nop
 8012386:	bf00      	nop
 8012388:	3730      	adds	r7, #48	@ 0x30
 801238a:	46bd      	mov	sp, r7
 801238c:	bd80      	pop	{r7, pc}
 801238e:	bf00      	nop
 8012390:	2000382c 	.word	0x2000382c

08012394 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b088      	sub	sp, #32
 8012398:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801239a:	e049      	b.n	8012430 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801239c:	4b2e      	ldr	r3, [pc, #184]	@ (8012458 <prvSwitchTimerLists+0xc4>)
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	68db      	ldr	r3, [r3, #12]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80123a6:	4b2c      	ldr	r3, [pc, #176]	@ (8012458 <prvSwitchTimerLists+0xc4>)
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	68db      	ldr	r3, [r3, #12]
 80123ac:	68db      	ldr	r3, [r3, #12]
 80123ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	3304      	adds	r3, #4
 80123b4:	4618      	mov	r0, r3
 80123b6:	f7fc ff25 	bl	800f204 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	6a1b      	ldr	r3, [r3, #32]
 80123be:	68f8      	ldr	r0, [r7, #12]
 80123c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80123c8:	f003 0304 	and.w	r3, r3, #4
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d02f      	beq.n	8012430 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	699b      	ldr	r3, [r3, #24]
 80123d4:	693a      	ldr	r2, [r7, #16]
 80123d6:	4413      	add	r3, r2
 80123d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80123da:	68ba      	ldr	r2, [r7, #8]
 80123dc:	693b      	ldr	r3, [r7, #16]
 80123de:	429a      	cmp	r2, r3
 80123e0:	d90e      	bls.n	8012400 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	68ba      	ldr	r2, [r7, #8]
 80123e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	68fa      	ldr	r2, [r7, #12]
 80123ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80123ee:	4b1a      	ldr	r3, [pc, #104]	@ (8012458 <prvSwitchTimerLists+0xc4>)
 80123f0:	681a      	ldr	r2, [r3, #0]
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	3304      	adds	r3, #4
 80123f6:	4619      	mov	r1, r3
 80123f8:	4610      	mov	r0, r2
 80123fa:	f7fc feca 	bl	800f192 <vListInsert>
 80123fe:	e017      	b.n	8012430 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012400:	2300      	movs	r3, #0
 8012402:	9300      	str	r3, [sp, #0]
 8012404:	2300      	movs	r3, #0
 8012406:	693a      	ldr	r2, [r7, #16]
 8012408:	2100      	movs	r1, #0
 801240a:	68f8      	ldr	r0, [r7, #12]
 801240c:	f7ff fd58 	bl	8011ec0 <xTimerGenericCommand>
 8012410:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d10b      	bne.n	8012430 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8012418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801241c:	f383 8811 	msr	BASEPRI, r3
 8012420:	f3bf 8f6f 	isb	sy
 8012424:	f3bf 8f4f 	dsb	sy
 8012428:	603b      	str	r3, [r7, #0]
}
 801242a:	bf00      	nop
 801242c:	bf00      	nop
 801242e:	e7fd      	b.n	801242c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012430:	4b09      	ldr	r3, [pc, #36]	@ (8012458 <prvSwitchTimerLists+0xc4>)
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d1b0      	bne.n	801239c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801243a:	4b07      	ldr	r3, [pc, #28]	@ (8012458 <prvSwitchTimerLists+0xc4>)
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012440:	4b06      	ldr	r3, [pc, #24]	@ (801245c <prvSwitchTimerLists+0xc8>)
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	4a04      	ldr	r2, [pc, #16]	@ (8012458 <prvSwitchTimerLists+0xc4>)
 8012446:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012448:	4a04      	ldr	r2, [pc, #16]	@ (801245c <prvSwitchTimerLists+0xc8>)
 801244a:	697b      	ldr	r3, [r7, #20]
 801244c:	6013      	str	r3, [r2, #0]
}
 801244e:	bf00      	nop
 8012450:	3718      	adds	r7, #24
 8012452:	46bd      	mov	sp, r7
 8012454:	bd80      	pop	{r7, pc}
 8012456:	bf00      	nop
 8012458:	20003824 	.word	0x20003824
 801245c:	20003828 	.word	0x20003828

08012460 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b082      	sub	sp, #8
 8012464:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012466:	f000 f98f 	bl	8012788 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801246a:	4b15      	ldr	r3, [pc, #84]	@ (80124c0 <prvCheckForValidListAndQueue+0x60>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d120      	bne.n	80124b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012472:	4814      	ldr	r0, [pc, #80]	@ (80124c4 <prvCheckForValidListAndQueue+0x64>)
 8012474:	f7fc fe3c 	bl	800f0f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012478:	4813      	ldr	r0, [pc, #76]	@ (80124c8 <prvCheckForValidListAndQueue+0x68>)
 801247a:	f7fc fe39 	bl	800f0f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801247e:	4b13      	ldr	r3, [pc, #76]	@ (80124cc <prvCheckForValidListAndQueue+0x6c>)
 8012480:	4a10      	ldr	r2, [pc, #64]	@ (80124c4 <prvCheckForValidListAndQueue+0x64>)
 8012482:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012484:	4b12      	ldr	r3, [pc, #72]	@ (80124d0 <prvCheckForValidListAndQueue+0x70>)
 8012486:	4a10      	ldr	r2, [pc, #64]	@ (80124c8 <prvCheckForValidListAndQueue+0x68>)
 8012488:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801248a:	2300      	movs	r3, #0
 801248c:	9300      	str	r3, [sp, #0]
 801248e:	4b11      	ldr	r3, [pc, #68]	@ (80124d4 <prvCheckForValidListAndQueue+0x74>)
 8012490:	4a11      	ldr	r2, [pc, #68]	@ (80124d8 <prvCheckForValidListAndQueue+0x78>)
 8012492:	2110      	movs	r1, #16
 8012494:	200a      	movs	r0, #10
 8012496:	f7fc ff49 	bl	800f32c <xQueueGenericCreateStatic>
 801249a:	4603      	mov	r3, r0
 801249c:	4a08      	ldr	r2, [pc, #32]	@ (80124c0 <prvCheckForValidListAndQueue+0x60>)
 801249e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80124a0:	4b07      	ldr	r3, [pc, #28]	@ (80124c0 <prvCheckForValidListAndQueue+0x60>)
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d005      	beq.n	80124b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80124a8:	4b05      	ldr	r3, [pc, #20]	@ (80124c0 <prvCheckForValidListAndQueue+0x60>)
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	490b      	ldr	r1, [pc, #44]	@ (80124dc <prvCheckForValidListAndQueue+0x7c>)
 80124ae:	4618      	mov	r0, r3
 80124b0:	f7fd fd86 	bl	800ffc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80124b4:	f000 f99a 	bl	80127ec <vPortExitCritical>
}
 80124b8:	bf00      	nop
 80124ba:	46bd      	mov	sp, r7
 80124bc:	bd80      	pop	{r7, pc}
 80124be:	bf00      	nop
 80124c0:	2000382c 	.word	0x2000382c
 80124c4:	200037fc 	.word	0x200037fc
 80124c8:	20003810 	.word	0x20003810
 80124cc:	20003824 	.word	0x20003824
 80124d0:	20003828 	.word	0x20003828
 80124d4:	200038d8 	.word	0x200038d8
 80124d8:	20003838 	.word	0x20003838
 80124dc:	08019aec 	.word	0x08019aec

080124e0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b08a      	sub	sp, #40	@ 0x28
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	60f8      	str	r0, [r7, #12]
 80124e8:	60b9      	str	r1, [r7, #8]
 80124ea:	607a      	str	r2, [r7, #4]
 80124ec:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80124ee:	f06f 0301 	mvn.w	r3, #1
 80124f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80124f8:	68bb      	ldr	r3, [r7, #8]
 80124fa:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012500:	4b06      	ldr	r3, [pc, #24]	@ (801251c <xTimerPendFunctionCallFromISR+0x3c>)
 8012502:	6818      	ldr	r0, [r3, #0]
 8012504:	f107 0114 	add.w	r1, r7, #20
 8012508:	2300      	movs	r3, #0
 801250a:	683a      	ldr	r2, [r7, #0]
 801250c:	f7fd f91e 	bl	800f74c <xQueueGenericSendFromISR>
 8012510:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8012512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8012514:	4618      	mov	r0, r3
 8012516:	3728      	adds	r7, #40	@ 0x28
 8012518:	46bd      	mov	sp, r7
 801251a:	bd80      	pop	{r7, pc}
 801251c:	2000382c 	.word	0x2000382c

08012520 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012520:	b480      	push	{r7}
 8012522:	b085      	sub	sp, #20
 8012524:	af00      	add	r7, sp, #0
 8012526:	60f8      	str	r0, [r7, #12]
 8012528:	60b9      	str	r1, [r7, #8]
 801252a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	3b04      	subs	r3, #4
 8012530:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8012538:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	3b04      	subs	r3, #4
 801253e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	f023 0201 	bic.w	r2, r3, #1
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	3b04      	subs	r3, #4
 801254e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012550:	4a0c      	ldr	r2, [pc, #48]	@ (8012584 <pxPortInitialiseStack+0x64>)
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	3b14      	subs	r3, #20
 801255a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801255c:	687a      	ldr	r2, [r7, #4]
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	3b04      	subs	r3, #4
 8012566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	f06f 0202 	mvn.w	r2, #2
 801256e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	3b20      	subs	r3, #32
 8012574:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012576:	68fb      	ldr	r3, [r7, #12]
}
 8012578:	4618      	mov	r0, r3
 801257a:	3714      	adds	r7, #20
 801257c:	46bd      	mov	sp, r7
 801257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012582:	4770      	bx	lr
 8012584:	08012589 	.word	0x08012589

08012588 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012588:	b480      	push	{r7}
 801258a:	b085      	sub	sp, #20
 801258c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801258e:	2300      	movs	r3, #0
 8012590:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012592:	4b13      	ldr	r3, [pc, #76]	@ (80125e0 <prvTaskExitError+0x58>)
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	f1b3 3fff 	cmp.w	r3, #4294967295
 801259a:	d00b      	beq.n	80125b4 <prvTaskExitError+0x2c>
	__asm volatile
 801259c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125a0:	f383 8811 	msr	BASEPRI, r3
 80125a4:	f3bf 8f6f 	isb	sy
 80125a8:	f3bf 8f4f 	dsb	sy
 80125ac:	60fb      	str	r3, [r7, #12]
}
 80125ae:	bf00      	nop
 80125b0:	bf00      	nop
 80125b2:	e7fd      	b.n	80125b0 <prvTaskExitError+0x28>
	__asm volatile
 80125b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125b8:	f383 8811 	msr	BASEPRI, r3
 80125bc:	f3bf 8f6f 	isb	sy
 80125c0:	f3bf 8f4f 	dsb	sy
 80125c4:	60bb      	str	r3, [r7, #8]
}
 80125c6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80125c8:	bf00      	nop
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d0fc      	beq.n	80125ca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80125d0:	bf00      	nop
 80125d2:	bf00      	nop
 80125d4:	3714      	adds	r7, #20
 80125d6:	46bd      	mov	sp, r7
 80125d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125dc:	4770      	bx	lr
 80125de:	bf00      	nop
 80125e0:	20000230 	.word	0x20000230
	...

080125f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80125f0:	4b07      	ldr	r3, [pc, #28]	@ (8012610 <pxCurrentTCBConst2>)
 80125f2:	6819      	ldr	r1, [r3, #0]
 80125f4:	6808      	ldr	r0, [r1, #0]
 80125f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125fa:	f380 8809 	msr	PSP, r0
 80125fe:	f3bf 8f6f 	isb	sy
 8012602:	f04f 0000 	mov.w	r0, #0
 8012606:	f380 8811 	msr	BASEPRI, r0
 801260a:	4770      	bx	lr
 801260c:	f3af 8000 	nop.w

08012610 <pxCurrentTCBConst2>:
 8012610:	200032f4 	.word	0x200032f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012614:	bf00      	nop
 8012616:	bf00      	nop

08012618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012618:	4808      	ldr	r0, [pc, #32]	@ (801263c <prvPortStartFirstTask+0x24>)
 801261a:	6800      	ldr	r0, [r0, #0]
 801261c:	6800      	ldr	r0, [r0, #0]
 801261e:	f380 8808 	msr	MSP, r0
 8012622:	f04f 0000 	mov.w	r0, #0
 8012626:	f380 8814 	msr	CONTROL, r0
 801262a:	b662      	cpsie	i
 801262c:	b661      	cpsie	f
 801262e:	f3bf 8f4f 	dsb	sy
 8012632:	f3bf 8f6f 	isb	sy
 8012636:	df00      	svc	0
 8012638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801263a:	bf00      	nop
 801263c:	e000ed08 	.word	0xe000ed08

08012640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b086      	sub	sp, #24
 8012644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012646:	4b47      	ldr	r3, [pc, #284]	@ (8012764 <xPortStartScheduler+0x124>)
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	4a47      	ldr	r2, [pc, #284]	@ (8012768 <xPortStartScheduler+0x128>)
 801264c:	4293      	cmp	r3, r2
 801264e:	d10b      	bne.n	8012668 <xPortStartScheduler+0x28>
	__asm volatile
 8012650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012654:	f383 8811 	msr	BASEPRI, r3
 8012658:	f3bf 8f6f 	isb	sy
 801265c:	f3bf 8f4f 	dsb	sy
 8012660:	60fb      	str	r3, [r7, #12]
}
 8012662:	bf00      	nop
 8012664:	bf00      	nop
 8012666:	e7fd      	b.n	8012664 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012668:	4b3e      	ldr	r3, [pc, #248]	@ (8012764 <xPortStartScheduler+0x124>)
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	4a3f      	ldr	r2, [pc, #252]	@ (801276c <xPortStartScheduler+0x12c>)
 801266e:	4293      	cmp	r3, r2
 8012670:	d10b      	bne.n	801268a <xPortStartScheduler+0x4a>
	__asm volatile
 8012672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012676:	f383 8811 	msr	BASEPRI, r3
 801267a:	f3bf 8f6f 	isb	sy
 801267e:	f3bf 8f4f 	dsb	sy
 8012682:	613b      	str	r3, [r7, #16]
}
 8012684:	bf00      	nop
 8012686:	bf00      	nop
 8012688:	e7fd      	b.n	8012686 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801268a:	4b39      	ldr	r3, [pc, #228]	@ (8012770 <xPortStartScheduler+0x130>)
 801268c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801268e:	697b      	ldr	r3, [r7, #20]
 8012690:	781b      	ldrb	r3, [r3, #0]
 8012692:	b2db      	uxtb	r3, r3
 8012694:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	22ff      	movs	r2, #255	@ 0xff
 801269a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801269c:	697b      	ldr	r3, [r7, #20]
 801269e:	781b      	ldrb	r3, [r3, #0]
 80126a0:	b2db      	uxtb	r3, r3
 80126a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80126a4:	78fb      	ldrb	r3, [r7, #3]
 80126a6:	b2db      	uxtb	r3, r3
 80126a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80126ac:	b2da      	uxtb	r2, r3
 80126ae:	4b31      	ldr	r3, [pc, #196]	@ (8012774 <xPortStartScheduler+0x134>)
 80126b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80126b2:	4b31      	ldr	r3, [pc, #196]	@ (8012778 <xPortStartScheduler+0x138>)
 80126b4:	2207      	movs	r2, #7
 80126b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80126b8:	e009      	b.n	80126ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80126ba:	4b2f      	ldr	r3, [pc, #188]	@ (8012778 <xPortStartScheduler+0x138>)
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	3b01      	subs	r3, #1
 80126c0:	4a2d      	ldr	r2, [pc, #180]	@ (8012778 <xPortStartScheduler+0x138>)
 80126c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80126c4:	78fb      	ldrb	r3, [r7, #3]
 80126c6:	b2db      	uxtb	r3, r3
 80126c8:	005b      	lsls	r3, r3, #1
 80126ca:	b2db      	uxtb	r3, r3
 80126cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80126ce:	78fb      	ldrb	r3, [r7, #3]
 80126d0:	b2db      	uxtb	r3, r3
 80126d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80126d6:	2b80      	cmp	r3, #128	@ 0x80
 80126d8:	d0ef      	beq.n	80126ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80126da:	4b27      	ldr	r3, [pc, #156]	@ (8012778 <xPortStartScheduler+0x138>)
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	f1c3 0307 	rsb	r3, r3, #7
 80126e2:	2b04      	cmp	r3, #4
 80126e4:	d00b      	beq.n	80126fe <xPortStartScheduler+0xbe>
	__asm volatile
 80126e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126ea:	f383 8811 	msr	BASEPRI, r3
 80126ee:	f3bf 8f6f 	isb	sy
 80126f2:	f3bf 8f4f 	dsb	sy
 80126f6:	60bb      	str	r3, [r7, #8]
}
 80126f8:	bf00      	nop
 80126fa:	bf00      	nop
 80126fc:	e7fd      	b.n	80126fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80126fe:	4b1e      	ldr	r3, [pc, #120]	@ (8012778 <xPortStartScheduler+0x138>)
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	021b      	lsls	r3, r3, #8
 8012704:	4a1c      	ldr	r2, [pc, #112]	@ (8012778 <xPortStartScheduler+0x138>)
 8012706:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012708:	4b1b      	ldr	r3, [pc, #108]	@ (8012778 <xPortStartScheduler+0x138>)
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012710:	4a19      	ldr	r2, [pc, #100]	@ (8012778 <xPortStartScheduler+0x138>)
 8012712:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	b2da      	uxtb	r2, r3
 8012718:	697b      	ldr	r3, [r7, #20]
 801271a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801271c:	4b17      	ldr	r3, [pc, #92]	@ (801277c <xPortStartScheduler+0x13c>)
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	4a16      	ldr	r2, [pc, #88]	@ (801277c <xPortStartScheduler+0x13c>)
 8012722:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012726:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012728:	4b14      	ldr	r3, [pc, #80]	@ (801277c <xPortStartScheduler+0x13c>)
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	4a13      	ldr	r2, [pc, #76]	@ (801277c <xPortStartScheduler+0x13c>)
 801272e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012732:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012734:	f000 f8da 	bl	80128ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012738:	4b11      	ldr	r3, [pc, #68]	@ (8012780 <xPortStartScheduler+0x140>)
 801273a:	2200      	movs	r2, #0
 801273c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801273e:	f000 f8f9 	bl	8012934 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012742:	4b10      	ldr	r3, [pc, #64]	@ (8012784 <xPortStartScheduler+0x144>)
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	4a0f      	ldr	r2, [pc, #60]	@ (8012784 <xPortStartScheduler+0x144>)
 8012748:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801274c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801274e:	f7ff ff63 	bl	8012618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012752:	f7fe fbc9 	bl	8010ee8 <vTaskSwitchContext>
	prvTaskExitError();
 8012756:	f7ff ff17 	bl	8012588 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801275a:	2300      	movs	r3, #0
}
 801275c:	4618      	mov	r0, r3
 801275e:	3718      	adds	r7, #24
 8012760:	46bd      	mov	sp, r7
 8012762:	bd80      	pop	{r7, pc}
 8012764:	e000ed00 	.word	0xe000ed00
 8012768:	410fc271 	.word	0x410fc271
 801276c:	410fc270 	.word	0x410fc270
 8012770:	e000e400 	.word	0xe000e400
 8012774:	20003928 	.word	0x20003928
 8012778:	2000392c 	.word	0x2000392c
 801277c:	e000ed20 	.word	0xe000ed20
 8012780:	20000230 	.word	0x20000230
 8012784:	e000ef34 	.word	0xe000ef34

08012788 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012788:	b480      	push	{r7}
 801278a:	b083      	sub	sp, #12
 801278c:	af00      	add	r7, sp, #0
	__asm volatile
 801278e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012792:	f383 8811 	msr	BASEPRI, r3
 8012796:	f3bf 8f6f 	isb	sy
 801279a:	f3bf 8f4f 	dsb	sy
 801279e:	607b      	str	r3, [r7, #4]
}
 80127a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80127a2:	4b10      	ldr	r3, [pc, #64]	@ (80127e4 <vPortEnterCritical+0x5c>)
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	3301      	adds	r3, #1
 80127a8:	4a0e      	ldr	r2, [pc, #56]	@ (80127e4 <vPortEnterCritical+0x5c>)
 80127aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80127ac:	4b0d      	ldr	r3, [pc, #52]	@ (80127e4 <vPortEnterCritical+0x5c>)
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	2b01      	cmp	r3, #1
 80127b2:	d110      	bne.n	80127d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80127b4:	4b0c      	ldr	r3, [pc, #48]	@ (80127e8 <vPortEnterCritical+0x60>)
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	b2db      	uxtb	r3, r3
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d00b      	beq.n	80127d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80127be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127c2:	f383 8811 	msr	BASEPRI, r3
 80127c6:	f3bf 8f6f 	isb	sy
 80127ca:	f3bf 8f4f 	dsb	sy
 80127ce:	603b      	str	r3, [r7, #0]
}
 80127d0:	bf00      	nop
 80127d2:	bf00      	nop
 80127d4:	e7fd      	b.n	80127d2 <vPortEnterCritical+0x4a>
	}
}
 80127d6:	bf00      	nop
 80127d8:	370c      	adds	r7, #12
 80127da:	46bd      	mov	sp, r7
 80127dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e0:	4770      	bx	lr
 80127e2:	bf00      	nop
 80127e4:	20000230 	.word	0x20000230
 80127e8:	e000ed04 	.word	0xe000ed04

080127ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80127ec:	b480      	push	{r7}
 80127ee:	b083      	sub	sp, #12
 80127f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80127f2:	4b12      	ldr	r3, [pc, #72]	@ (801283c <vPortExitCritical+0x50>)
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d10b      	bne.n	8012812 <vPortExitCritical+0x26>
	__asm volatile
 80127fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127fe:	f383 8811 	msr	BASEPRI, r3
 8012802:	f3bf 8f6f 	isb	sy
 8012806:	f3bf 8f4f 	dsb	sy
 801280a:	607b      	str	r3, [r7, #4]
}
 801280c:	bf00      	nop
 801280e:	bf00      	nop
 8012810:	e7fd      	b.n	801280e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012812:	4b0a      	ldr	r3, [pc, #40]	@ (801283c <vPortExitCritical+0x50>)
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	3b01      	subs	r3, #1
 8012818:	4a08      	ldr	r2, [pc, #32]	@ (801283c <vPortExitCritical+0x50>)
 801281a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801281c:	4b07      	ldr	r3, [pc, #28]	@ (801283c <vPortExitCritical+0x50>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d105      	bne.n	8012830 <vPortExitCritical+0x44>
 8012824:	2300      	movs	r3, #0
 8012826:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801282e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012830:	bf00      	nop
 8012832:	370c      	adds	r7, #12
 8012834:	46bd      	mov	sp, r7
 8012836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283a:	4770      	bx	lr
 801283c:	20000230 	.word	0x20000230

08012840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012840:	f3ef 8009 	mrs	r0, PSP
 8012844:	f3bf 8f6f 	isb	sy
 8012848:	4b15      	ldr	r3, [pc, #84]	@ (80128a0 <pxCurrentTCBConst>)
 801284a:	681a      	ldr	r2, [r3, #0]
 801284c:	f01e 0f10 	tst.w	lr, #16
 8012850:	bf08      	it	eq
 8012852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801285a:	6010      	str	r0, [r2, #0]
 801285c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012860:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012864:	f380 8811 	msr	BASEPRI, r0
 8012868:	f3bf 8f4f 	dsb	sy
 801286c:	f3bf 8f6f 	isb	sy
 8012870:	f7fe fb3a 	bl	8010ee8 <vTaskSwitchContext>
 8012874:	f04f 0000 	mov.w	r0, #0
 8012878:	f380 8811 	msr	BASEPRI, r0
 801287c:	bc09      	pop	{r0, r3}
 801287e:	6819      	ldr	r1, [r3, #0]
 8012880:	6808      	ldr	r0, [r1, #0]
 8012882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012886:	f01e 0f10 	tst.w	lr, #16
 801288a:	bf08      	it	eq
 801288c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012890:	f380 8809 	msr	PSP, r0
 8012894:	f3bf 8f6f 	isb	sy
 8012898:	4770      	bx	lr
 801289a:	bf00      	nop
 801289c:	f3af 8000 	nop.w

080128a0 <pxCurrentTCBConst>:
 80128a0:	200032f4 	.word	0x200032f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80128a4:	bf00      	nop
 80128a6:	bf00      	nop

080128a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b082      	sub	sp, #8
 80128ac:	af00      	add	r7, sp, #0
	__asm volatile
 80128ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128b2:	f383 8811 	msr	BASEPRI, r3
 80128b6:	f3bf 8f6f 	isb	sy
 80128ba:	f3bf 8f4f 	dsb	sy
 80128be:	607b      	str	r3, [r7, #4]
}
 80128c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80128c2:	f7fe fa57 	bl	8010d74 <xTaskIncrementTick>
 80128c6:	4603      	mov	r3, r0
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d003      	beq.n	80128d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80128cc:	4b06      	ldr	r3, [pc, #24]	@ (80128e8 <xPortSysTickHandler+0x40>)
 80128ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80128d2:	601a      	str	r2, [r3, #0]
 80128d4:	2300      	movs	r3, #0
 80128d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80128d8:	683b      	ldr	r3, [r7, #0]
 80128da:	f383 8811 	msr	BASEPRI, r3
}
 80128de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80128e0:	bf00      	nop
 80128e2:	3708      	adds	r7, #8
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}
 80128e8:	e000ed04 	.word	0xe000ed04

080128ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80128ec:	b480      	push	{r7}
 80128ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80128f0:	4b0b      	ldr	r3, [pc, #44]	@ (8012920 <vPortSetupTimerInterrupt+0x34>)
 80128f2:	2200      	movs	r2, #0
 80128f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80128f6:	4b0b      	ldr	r3, [pc, #44]	@ (8012924 <vPortSetupTimerInterrupt+0x38>)
 80128f8:	2200      	movs	r2, #0
 80128fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80128fc:	4b0a      	ldr	r3, [pc, #40]	@ (8012928 <vPortSetupTimerInterrupt+0x3c>)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	4a0a      	ldr	r2, [pc, #40]	@ (801292c <vPortSetupTimerInterrupt+0x40>)
 8012902:	fba2 2303 	umull	r2, r3, r2, r3
 8012906:	099b      	lsrs	r3, r3, #6
 8012908:	4a09      	ldr	r2, [pc, #36]	@ (8012930 <vPortSetupTimerInterrupt+0x44>)
 801290a:	3b01      	subs	r3, #1
 801290c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801290e:	4b04      	ldr	r3, [pc, #16]	@ (8012920 <vPortSetupTimerInterrupt+0x34>)
 8012910:	2207      	movs	r2, #7
 8012912:	601a      	str	r2, [r3, #0]
}
 8012914:	bf00      	nop
 8012916:	46bd      	mov	sp, r7
 8012918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291c:	4770      	bx	lr
 801291e:	bf00      	nop
 8012920:	e000e010 	.word	0xe000e010
 8012924:	e000e018 	.word	0xe000e018
 8012928:	20000204 	.word	0x20000204
 801292c:	10624dd3 	.word	0x10624dd3
 8012930:	e000e014 	.word	0xe000e014

08012934 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012934:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012944 <vPortEnableVFP+0x10>
 8012938:	6801      	ldr	r1, [r0, #0]
 801293a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801293e:	6001      	str	r1, [r0, #0]
 8012940:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012942:	bf00      	nop
 8012944:	e000ed88 	.word	0xe000ed88

08012948 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012948:	b480      	push	{r7}
 801294a:	b085      	sub	sp, #20
 801294c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801294e:	f3ef 8305 	mrs	r3, IPSR
 8012952:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	2b0f      	cmp	r3, #15
 8012958:	d915      	bls.n	8012986 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801295a:	4a18      	ldr	r2, [pc, #96]	@ (80129bc <vPortValidateInterruptPriority+0x74>)
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	4413      	add	r3, r2
 8012960:	781b      	ldrb	r3, [r3, #0]
 8012962:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012964:	4b16      	ldr	r3, [pc, #88]	@ (80129c0 <vPortValidateInterruptPriority+0x78>)
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	7afa      	ldrb	r2, [r7, #11]
 801296a:	429a      	cmp	r2, r3
 801296c:	d20b      	bcs.n	8012986 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801296e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012972:	f383 8811 	msr	BASEPRI, r3
 8012976:	f3bf 8f6f 	isb	sy
 801297a:	f3bf 8f4f 	dsb	sy
 801297e:	607b      	str	r3, [r7, #4]
}
 8012980:	bf00      	nop
 8012982:	bf00      	nop
 8012984:	e7fd      	b.n	8012982 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012986:	4b0f      	ldr	r3, [pc, #60]	@ (80129c4 <vPortValidateInterruptPriority+0x7c>)
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801298e:	4b0e      	ldr	r3, [pc, #56]	@ (80129c8 <vPortValidateInterruptPriority+0x80>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	429a      	cmp	r2, r3
 8012994:	d90b      	bls.n	80129ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801299a:	f383 8811 	msr	BASEPRI, r3
 801299e:	f3bf 8f6f 	isb	sy
 80129a2:	f3bf 8f4f 	dsb	sy
 80129a6:	603b      	str	r3, [r7, #0]
}
 80129a8:	bf00      	nop
 80129aa:	bf00      	nop
 80129ac:	e7fd      	b.n	80129aa <vPortValidateInterruptPriority+0x62>
	}
 80129ae:	bf00      	nop
 80129b0:	3714      	adds	r7, #20
 80129b2:	46bd      	mov	sp, r7
 80129b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b8:	4770      	bx	lr
 80129ba:	bf00      	nop
 80129bc:	e000e3f0 	.word	0xe000e3f0
 80129c0:	20003928 	.word	0x20003928
 80129c4:	e000ed0c 	.word	0xe000ed0c
 80129c8:	2000392c 	.word	0x2000392c

080129cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b08a      	sub	sp, #40	@ 0x28
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80129d4:	2300      	movs	r3, #0
 80129d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80129d8:	f7fe f83c 	bl	8010a54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80129dc:	4b5c      	ldr	r3, [pc, #368]	@ (8012b50 <pvPortMalloc+0x184>)
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d101      	bne.n	80129e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80129e4:	f000 f924 	bl	8012c30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80129e8:	4b5a      	ldr	r3, [pc, #360]	@ (8012b54 <pvPortMalloc+0x188>)
 80129ea:	681a      	ldr	r2, [r3, #0]
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	4013      	ands	r3, r2
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	f040 8095 	bne.w	8012b20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d01e      	beq.n	8012a3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80129fc:	2208      	movs	r2, #8
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	4413      	add	r3, r2
 8012a02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	f003 0307 	and.w	r3, r3, #7
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d015      	beq.n	8012a3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	f023 0307 	bic.w	r3, r3, #7
 8012a14:	3308      	adds	r3, #8
 8012a16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	f003 0307 	and.w	r3, r3, #7
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d00b      	beq.n	8012a3a <pvPortMalloc+0x6e>
	__asm volatile
 8012a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a26:	f383 8811 	msr	BASEPRI, r3
 8012a2a:	f3bf 8f6f 	isb	sy
 8012a2e:	f3bf 8f4f 	dsb	sy
 8012a32:	617b      	str	r3, [r7, #20]
}
 8012a34:	bf00      	nop
 8012a36:	bf00      	nop
 8012a38:	e7fd      	b.n	8012a36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d06f      	beq.n	8012b20 <pvPortMalloc+0x154>
 8012a40:	4b45      	ldr	r3, [pc, #276]	@ (8012b58 <pvPortMalloc+0x18c>)
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	687a      	ldr	r2, [r7, #4]
 8012a46:	429a      	cmp	r2, r3
 8012a48:	d86a      	bhi.n	8012b20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012a4a:	4b44      	ldr	r3, [pc, #272]	@ (8012b5c <pvPortMalloc+0x190>)
 8012a4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012a4e:	4b43      	ldr	r3, [pc, #268]	@ (8012b5c <pvPortMalloc+0x190>)
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012a54:	e004      	b.n	8012a60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a62:	685b      	ldr	r3, [r3, #4]
 8012a64:	687a      	ldr	r2, [r7, #4]
 8012a66:	429a      	cmp	r2, r3
 8012a68:	d903      	bls.n	8012a72 <pvPortMalloc+0xa6>
 8012a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d1f1      	bne.n	8012a56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012a72:	4b37      	ldr	r3, [pc, #220]	@ (8012b50 <pvPortMalloc+0x184>)
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	d051      	beq.n	8012b20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012a7c:	6a3b      	ldr	r3, [r7, #32]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	2208      	movs	r2, #8
 8012a82:	4413      	add	r3, r2
 8012a84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a88:	681a      	ldr	r2, [r3, #0]
 8012a8a:	6a3b      	ldr	r3, [r7, #32]
 8012a8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a90:	685a      	ldr	r2, [r3, #4]
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	1ad2      	subs	r2, r2, r3
 8012a96:	2308      	movs	r3, #8
 8012a98:	005b      	lsls	r3, r3, #1
 8012a9a:	429a      	cmp	r2, r3
 8012a9c:	d920      	bls.n	8012ae0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	4413      	add	r3, r2
 8012aa4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012aa6:	69bb      	ldr	r3, [r7, #24]
 8012aa8:	f003 0307 	and.w	r3, r3, #7
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d00b      	beq.n	8012ac8 <pvPortMalloc+0xfc>
	__asm volatile
 8012ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ab4:	f383 8811 	msr	BASEPRI, r3
 8012ab8:	f3bf 8f6f 	isb	sy
 8012abc:	f3bf 8f4f 	dsb	sy
 8012ac0:	613b      	str	r3, [r7, #16]
}
 8012ac2:	bf00      	nop
 8012ac4:	bf00      	nop
 8012ac6:	e7fd      	b.n	8012ac4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012aca:	685a      	ldr	r2, [r3, #4]
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	1ad2      	subs	r2, r2, r3
 8012ad0:	69bb      	ldr	r3, [r7, #24]
 8012ad2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ad6:	687a      	ldr	r2, [r7, #4]
 8012ad8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012ada:	69b8      	ldr	r0, [r7, #24]
 8012adc:	f000 f90a 	bl	8012cf4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8012b58 <pvPortMalloc+0x18c>)
 8012ae2:	681a      	ldr	r2, [r3, #0]
 8012ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ae6:	685b      	ldr	r3, [r3, #4]
 8012ae8:	1ad3      	subs	r3, r2, r3
 8012aea:	4a1b      	ldr	r2, [pc, #108]	@ (8012b58 <pvPortMalloc+0x18c>)
 8012aec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012aee:	4b1a      	ldr	r3, [pc, #104]	@ (8012b58 <pvPortMalloc+0x18c>)
 8012af0:	681a      	ldr	r2, [r3, #0]
 8012af2:	4b1b      	ldr	r3, [pc, #108]	@ (8012b60 <pvPortMalloc+0x194>)
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	429a      	cmp	r2, r3
 8012af8:	d203      	bcs.n	8012b02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012afa:	4b17      	ldr	r3, [pc, #92]	@ (8012b58 <pvPortMalloc+0x18c>)
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	4a18      	ldr	r2, [pc, #96]	@ (8012b60 <pvPortMalloc+0x194>)
 8012b00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b04:	685a      	ldr	r2, [r3, #4]
 8012b06:	4b13      	ldr	r3, [pc, #76]	@ (8012b54 <pvPortMalloc+0x188>)
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	431a      	orrs	r2, r3
 8012b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b12:	2200      	movs	r2, #0
 8012b14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012b16:	4b13      	ldr	r3, [pc, #76]	@ (8012b64 <pvPortMalloc+0x198>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	3301      	adds	r3, #1
 8012b1c:	4a11      	ldr	r2, [pc, #68]	@ (8012b64 <pvPortMalloc+0x198>)
 8012b1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012b20:	f7fd ffa6 	bl	8010a70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012b24:	69fb      	ldr	r3, [r7, #28]
 8012b26:	f003 0307 	and.w	r3, r3, #7
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d00b      	beq.n	8012b46 <pvPortMalloc+0x17a>
	__asm volatile
 8012b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b32:	f383 8811 	msr	BASEPRI, r3
 8012b36:	f3bf 8f6f 	isb	sy
 8012b3a:	f3bf 8f4f 	dsb	sy
 8012b3e:	60fb      	str	r3, [r7, #12]
}
 8012b40:	bf00      	nop
 8012b42:	bf00      	nop
 8012b44:	e7fd      	b.n	8012b42 <pvPortMalloc+0x176>
	return pvReturn;
 8012b46:	69fb      	ldr	r3, [r7, #28]
}
 8012b48:	4618      	mov	r0, r3
 8012b4a:	3728      	adds	r7, #40	@ 0x28
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}
 8012b50:	20013338 	.word	0x20013338
 8012b54:	2001334c 	.word	0x2001334c
 8012b58:	2001333c 	.word	0x2001333c
 8012b5c:	20013330 	.word	0x20013330
 8012b60:	20013340 	.word	0x20013340
 8012b64:	20013344 	.word	0x20013344

08012b68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b086      	sub	sp, #24
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d04f      	beq.n	8012c1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012b7a:	2308      	movs	r3, #8
 8012b7c:	425b      	negs	r3, r3
 8012b7e:	697a      	ldr	r2, [r7, #20]
 8012b80:	4413      	add	r3, r2
 8012b82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012b84:	697b      	ldr	r3, [r7, #20]
 8012b86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012b88:	693b      	ldr	r3, [r7, #16]
 8012b8a:	685a      	ldr	r2, [r3, #4]
 8012b8c:	4b25      	ldr	r3, [pc, #148]	@ (8012c24 <vPortFree+0xbc>)
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	4013      	ands	r3, r2
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d10b      	bne.n	8012bae <vPortFree+0x46>
	__asm volatile
 8012b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b9a:	f383 8811 	msr	BASEPRI, r3
 8012b9e:	f3bf 8f6f 	isb	sy
 8012ba2:	f3bf 8f4f 	dsb	sy
 8012ba6:	60fb      	str	r3, [r7, #12]
}
 8012ba8:	bf00      	nop
 8012baa:	bf00      	nop
 8012bac:	e7fd      	b.n	8012baa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012bae:	693b      	ldr	r3, [r7, #16]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d00b      	beq.n	8012bce <vPortFree+0x66>
	__asm volatile
 8012bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bba:	f383 8811 	msr	BASEPRI, r3
 8012bbe:	f3bf 8f6f 	isb	sy
 8012bc2:	f3bf 8f4f 	dsb	sy
 8012bc6:	60bb      	str	r3, [r7, #8]
}
 8012bc8:	bf00      	nop
 8012bca:	bf00      	nop
 8012bcc:	e7fd      	b.n	8012bca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012bce:	693b      	ldr	r3, [r7, #16]
 8012bd0:	685a      	ldr	r2, [r3, #4]
 8012bd2:	4b14      	ldr	r3, [pc, #80]	@ (8012c24 <vPortFree+0xbc>)
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	4013      	ands	r3, r2
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d01e      	beq.n	8012c1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012bdc:	693b      	ldr	r3, [r7, #16]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d11a      	bne.n	8012c1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012be4:	693b      	ldr	r3, [r7, #16]
 8012be6:	685a      	ldr	r2, [r3, #4]
 8012be8:	4b0e      	ldr	r3, [pc, #56]	@ (8012c24 <vPortFree+0xbc>)
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	43db      	mvns	r3, r3
 8012bee:	401a      	ands	r2, r3
 8012bf0:	693b      	ldr	r3, [r7, #16]
 8012bf2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012bf4:	f7fd ff2e 	bl	8010a54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012bf8:	693b      	ldr	r3, [r7, #16]
 8012bfa:	685a      	ldr	r2, [r3, #4]
 8012bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8012c28 <vPortFree+0xc0>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	4413      	add	r3, r2
 8012c02:	4a09      	ldr	r2, [pc, #36]	@ (8012c28 <vPortFree+0xc0>)
 8012c04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012c06:	6938      	ldr	r0, [r7, #16]
 8012c08:	f000 f874 	bl	8012cf4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012c0c:	4b07      	ldr	r3, [pc, #28]	@ (8012c2c <vPortFree+0xc4>)
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	3301      	adds	r3, #1
 8012c12:	4a06      	ldr	r2, [pc, #24]	@ (8012c2c <vPortFree+0xc4>)
 8012c14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012c16:	f7fd ff2b 	bl	8010a70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012c1a:	bf00      	nop
 8012c1c:	3718      	adds	r7, #24
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}
 8012c22:	bf00      	nop
 8012c24:	2001334c 	.word	0x2001334c
 8012c28:	2001333c 	.word	0x2001333c
 8012c2c:	20013348 	.word	0x20013348

08012c30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012c30:	b480      	push	{r7}
 8012c32:	b085      	sub	sp, #20
 8012c34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012c36:	f44f 437a 	mov.w	r3, #64000	@ 0xfa00
 8012c3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012c3c:	4b27      	ldr	r3, [pc, #156]	@ (8012cdc <prvHeapInit+0xac>)
 8012c3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	f003 0307 	and.w	r3, r3, #7
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d00c      	beq.n	8012c64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	3307      	adds	r3, #7
 8012c4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	f023 0307 	bic.w	r3, r3, #7
 8012c56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012c58:	68ba      	ldr	r2, [r7, #8]
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	1ad3      	subs	r3, r2, r3
 8012c5e:	4a1f      	ldr	r2, [pc, #124]	@ (8012cdc <prvHeapInit+0xac>)
 8012c60:	4413      	add	r3, r2
 8012c62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012c68:	4a1d      	ldr	r2, [pc, #116]	@ (8012ce0 <prvHeapInit+0xb0>)
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8012ce0 <prvHeapInit+0xb0>)
 8012c70:	2200      	movs	r2, #0
 8012c72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	68ba      	ldr	r2, [r7, #8]
 8012c78:	4413      	add	r3, r2
 8012c7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012c7c:	2208      	movs	r2, #8
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	1a9b      	subs	r3, r3, r2
 8012c82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	f023 0307 	bic.w	r3, r3, #7
 8012c8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	4a15      	ldr	r2, [pc, #84]	@ (8012ce4 <prvHeapInit+0xb4>)
 8012c90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012c92:	4b14      	ldr	r3, [pc, #80]	@ (8012ce4 <prvHeapInit+0xb4>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	2200      	movs	r2, #0
 8012c98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012c9a:	4b12      	ldr	r3, [pc, #72]	@ (8012ce4 <prvHeapInit+0xb4>)
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	68fa      	ldr	r2, [r7, #12]
 8012caa:	1ad2      	subs	r2, r2, r3
 8012cac:	683b      	ldr	r3, [r7, #0]
 8012cae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8012ce4 <prvHeapInit+0xb4>)
 8012cb2:	681a      	ldr	r2, [r3, #0]
 8012cb4:	683b      	ldr	r3, [r7, #0]
 8012cb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012cb8:	683b      	ldr	r3, [r7, #0]
 8012cba:	685b      	ldr	r3, [r3, #4]
 8012cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8012ce8 <prvHeapInit+0xb8>)
 8012cbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012cc0:	683b      	ldr	r3, [r7, #0]
 8012cc2:	685b      	ldr	r3, [r3, #4]
 8012cc4:	4a09      	ldr	r2, [pc, #36]	@ (8012cec <prvHeapInit+0xbc>)
 8012cc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012cc8:	4b09      	ldr	r3, [pc, #36]	@ (8012cf0 <prvHeapInit+0xc0>)
 8012cca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8012cce:	601a      	str	r2, [r3, #0]
}
 8012cd0:	bf00      	nop
 8012cd2:	3714      	adds	r7, #20
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cda:	4770      	bx	lr
 8012cdc:	20003930 	.word	0x20003930
 8012ce0:	20013330 	.word	0x20013330
 8012ce4:	20013338 	.word	0x20013338
 8012ce8:	20013340 	.word	0x20013340
 8012cec:	2001333c 	.word	0x2001333c
 8012cf0:	2001334c 	.word	0x2001334c

08012cf4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012cf4:	b480      	push	{r7}
 8012cf6:	b085      	sub	sp, #20
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012cfc:	4b28      	ldr	r3, [pc, #160]	@ (8012da0 <prvInsertBlockIntoFreeList+0xac>)
 8012cfe:	60fb      	str	r3, [r7, #12]
 8012d00:	e002      	b.n	8012d08 <prvInsertBlockIntoFreeList+0x14>
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	60fb      	str	r3, [r7, #12]
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	687a      	ldr	r2, [r7, #4]
 8012d0e:	429a      	cmp	r2, r3
 8012d10:	d8f7      	bhi.n	8012d02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	685b      	ldr	r3, [r3, #4]
 8012d1a:	68ba      	ldr	r2, [r7, #8]
 8012d1c:	4413      	add	r3, r2
 8012d1e:	687a      	ldr	r2, [r7, #4]
 8012d20:	429a      	cmp	r2, r3
 8012d22:	d108      	bne.n	8012d36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	685a      	ldr	r2, [r3, #4]
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	685b      	ldr	r3, [r3, #4]
 8012d2c:	441a      	add	r2, r3
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	685b      	ldr	r3, [r3, #4]
 8012d3e:	68ba      	ldr	r2, [r7, #8]
 8012d40:	441a      	add	r2, r3
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	429a      	cmp	r2, r3
 8012d48:	d118      	bne.n	8012d7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	681a      	ldr	r2, [r3, #0]
 8012d4e:	4b15      	ldr	r3, [pc, #84]	@ (8012da4 <prvInsertBlockIntoFreeList+0xb0>)
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	429a      	cmp	r2, r3
 8012d54:	d00d      	beq.n	8012d72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	685a      	ldr	r2, [r3, #4]
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	685b      	ldr	r3, [r3, #4]
 8012d60:	441a      	add	r2, r3
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	681a      	ldr	r2, [r3, #0]
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	601a      	str	r2, [r3, #0]
 8012d70:	e008      	b.n	8012d84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012d72:	4b0c      	ldr	r3, [pc, #48]	@ (8012da4 <prvInsertBlockIntoFreeList+0xb0>)
 8012d74:	681a      	ldr	r2, [r3, #0]
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	601a      	str	r2, [r3, #0]
 8012d7a:	e003      	b.n	8012d84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	681a      	ldr	r2, [r3, #0]
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012d84:	68fa      	ldr	r2, [r7, #12]
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	429a      	cmp	r2, r3
 8012d8a:	d002      	beq.n	8012d92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	687a      	ldr	r2, [r7, #4]
 8012d90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012d92:	bf00      	nop
 8012d94:	3714      	adds	r7, #20
 8012d96:	46bd      	mov	sp, r7
 8012d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9c:	4770      	bx	lr
 8012d9e:	bf00      	nop
 8012da0:	20013330 	.word	0x20013330
 8012da4:	20013338 	.word	0x20013338

08012da8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8012dac:	2201      	movs	r2, #1
 8012dae:	490e      	ldr	r1, [pc, #56]	@ (8012de8 <MX_USB_HOST_Init+0x40>)
 8012db0:	480e      	ldr	r0, [pc, #56]	@ (8012dec <MX_USB_HOST_Init+0x44>)
 8012db2:	f7f9 fdef 	bl	800c994 <USBH_Init>
 8012db6:	4603      	mov	r3, r0
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d001      	beq.n	8012dc0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8012dbc:	f7f1 f97a 	bl	80040b4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8012dc0:	490b      	ldr	r1, [pc, #44]	@ (8012df0 <MX_USB_HOST_Init+0x48>)
 8012dc2:	480a      	ldr	r0, [pc, #40]	@ (8012dec <MX_USB_HOST_Init+0x44>)
 8012dc4:	f7f9 feb5 	bl	800cb32 <USBH_RegisterClass>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d001      	beq.n	8012dd2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8012dce:	f7f1 f971 	bl	80040b4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8012dd2:	4806      	ldr	r0, [pc, #24]	@ (8012dec <MX_USB_HOST_Init+0x44>)
 8012dd4:	f7f9 ff39 	bl	800cc4a <USBH_Start>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d001      	beq.n	8012de2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8012dde:	f7f1 f969 	bl	80040b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8012de2:	bf00      	nop
 8012de4:	bd80      	pop	{r7, pc}
 8012de6:	bf00      	nop
 8012de8:	08012df5 	.word	0x08012df5
 8012dec:	20013350 	.word	0x20013350
 8012df0:	20000210 	.word	0x20000210

08012df4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8012df4:	b480      	push	{r7}
 8012df6:	b083      	sub	sp, #12
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	6078      	str	r0, [r7, #4]
 8012dfc:	460b      	mov	r3, r1
 8012dfe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8012e00:	78fb      	ldrb	r3, [r7, #3]
 8012e02:	3b01      	subs	r3, #1
 8012e04:	2b04      	cmp	r3, #4
 8012e06:	d819      	bhi.n	8012e3c <USBH_UserProcess+0x48>
 8012e08:	a201      	add	r2, pc, #4	@ (adr r2, 8012e10 <USBH_UserProcess+0x1c>)
 8012e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e0e:	bf00      	nop
 8012e10:	08012e3d 	.word	0x08012e3d
 8012e14:	08012e2d 	.word	0x08012e2d
 8012e18:	08012e3d 	.word	0x08012e3d
 8012e1c:	08012e35 	.word	0x08012e35
 8012e20:	08012e25 	.word	0x08012e25
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8012e24:	4b09      	ldr	r3, [pc, #36]	@ (8012e4c <USBH_UserProcess+0x58>)
 8012e26:	2203      	movs	r2, #3
 8012e28:	701a      	strb	r2, [r3, #0]
  break;
 8012e2a:	e008      	b.n	8012e3e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8012e2c:	4b07      	ldr	r3, [pc, #28]	@ (8012e4c <USBH_UserProcess+0x58>)
 8012e2e:	2202      	movs	r2, #2
 8012e30:	701a      	strb	r2, [r3, #0]
  break;
 8012e32:	e004      	b.n	8012e3e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8012e34:	4b05      	ldr	r3, [pc, #20]	@ (8012e4c <USBH_UserProcess+0x58>)
 8012e36:	2201      	movs	r2, #1
 8012e38:	701a      	strb	r2, [r3, #0]
  break;
 8012e3a:	e000      	b.n	8012e3e <USBH_UserProcess+0x4a>

  default:
  break;
 8012e3c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8012e3e:	bf00      	nop
 8012e40:	370c      	adds	r7, #12
 8012e42:	46bd      	mov	sp, r7
 8012e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e48:	4770      	bx	lr
 8012e4a:	bf00      	nop
 8012e4c:	20013734 	.word	0x20013734

08012e50 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b08a      	sub	sp, #40	@ 0x28
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012e58:	f107 0314 	add.w	r3, r7, #20
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	601a      	str	r2, [r3, #0]
 8012e60:	605a      	str	r2, [r3, #4]
 8012e62:	609a      	str	r2, [r3, #8]
 8012e64:	60da      	str	r2, [r3, #12]
 8012e66:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012e70:	d147      	bne.n	8012f02 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012e72:	2300      	movs	r3, #0
 8012e74:	613b      	str	r3, [r7, #16]
 8012e76:	4b25      	ldr	r3, [pc, #148]	@ (8012f0c <HAL_HCD_MspInit+0xbc>)
 8012e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e7a:	4a24      	ldr	r2, [pc, #144]	@ (8012f0c <HAL_HCD_MspInit+0xbc>)
 8012e7c:	f043 0301 	orr.w	r3, r3, #1
 8012e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8012e82:	4b22      	ldr	r3, [pc, #136]	@ (8012f0c <HAL_HCD_MspInit+0xbc>)
 8012e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e86:	f003 0301 	and.w	r3, r3, #1
 8012e8a:	613b      	str	r3, [r7, #16]
 8012e8c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8012e8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012e94:	2300      	movs	r3, #0
 8012e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e98:	2300      	movs	r3, #0
 8012e9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8012e9c:	f107 0314 	add.w	r3, r7, #20
 8012ea0:	4619      	mov	r1, r3
 8012ea2:	481b      	ldr	r0, [pc, #108]	@ (8012f10 <HAL_HCD_MspInit+0xc0>)
 8012ea4:	f7f1 ff3c 	bl	8004d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8012ea8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8012eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012eae:	2302      	movs	r3, #2
 8012eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012eba:	230a      	movs	r3, #10
 8012ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012ebe:	f107 0314 	add.w	r3, r7, #20
 8012ec2:	4619      	mov	r1, r3
 8012ec4:	4812      	ldr	r0, [pc, #72]	@ (8012f10 <HAL_HCD_MspInit+0xc0>)
 8012ec6:	f7f1 ff2b 	bl	8004d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012eca:	4b10      	ldr	r3, [pc, #64]	@ (8012f0c <HAL_HCD_MspInit+0xbc>)
 8012ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012ece:	4a0f      	ldr	r2, [pc, #60]	@ (8012f0c <HAL_HCD_MspInit+0xbc>)
 8012ed0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ed4:	6353      	str	r3, [r2, #52]	@ 0x34
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	60fb      	str	r3, [r7, #12]
 8012eda:	4b0c      	ldr	r3, [pc, #48]	@ (8012f0c <HAL_HCD_MspInit+0xbc>)
 8012edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012ede:	4a0b      	ldr	r2, [pc, #44]	@ (8012f0c <HAL_HCD_MspInit+0xbc>)
 8012ee0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8012ee4:	6453      	str	r3, [r2, #68]	@ 0x44
 8012ee6:	4b09      	ldr	r3, [pc, #36]	@ (8012f0c <HAL_HCD_MspInit+0xbc>)
 8012ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012eea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012eee:	60fb      	str	r3, [r7, #12]
 8012ef0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	2105      	movs	r1, #5
 8012ef6:	2043      	movs	r0, #67	@ 0x43
 8012ef8:	f7f1 fe56 	bl	8004ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012efc:	2043      	movs	r0, #67	@ 0x43
 8012efe:	f7f1 fe6f 	bl	8004be0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012f02:	bf00      	nop
 8012f04:	3728      	adds	r7, #40	@ 0x28
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}
 8012f0a:	bf00      	nop
 8012f0c:	40023800 	.word	0x40023800
 8012f10:	40020000 	.word	0x40020000

08012f14 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b082      	sub	sp, #8
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012f22:	4618      	mov	r0, r3
 8012f24:	f7fa fb43 	bl	800d5ae <USBH_LL_IncTimer>
}
 8012f28:	bf00      	nop
 8012f2a:	3708      	adds	r7, #8
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd80      	pop	{r7, pc}

08012f30 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b082      	sub	sp, #8
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012f3e:	4618      	mov	r0, r3
 8012f40:	f7fa fb87 	bl	800d652 <USBH_LL_Connect>
}
 8012f44:	bf00      	nop
 8012f46:	3708      	adds	r7, #8
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	bd80      	pop	{r7, pc}

08012f4c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	b082      	sub	sp, #8
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f7fa fb9c 	bl	800d698 <USBH_LL_Disconnect>
}
 8012f60:	bf00      	nop
 8012f62:	3708      	adds	r7, #8
 8012f64:	46bd      	mov	sp, r7
 8012f66:	bd80      	pop	{r7, pc}

08012f68 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b082      	sub	sp, #8
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
 8012f70:	460b      	mov	r3, r1
 8012f72:	70fb      	strb	r3, [r7, #3]
 8012f74:	4613      	mov	r3, r2
 8012f76:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f7fa fbd3 	bl	800d72a <USBH_LL_NotifyURBChange>
#endif
}
 8012f84:	bf00      	nop
 8012f86:	3708      	adds	r7, #8
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bd80      	pop	{r7, pc}

08012f8c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b082      	sub	sp, #8
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f7fa fb31 	bl	800d602 <USBH_LL_PortEnabled>
}
 8012fa0:	bf00      	nop
 8012fa2:	3708      	adds	r7, #8
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	bd80      	pop	{r7, pc}

08012fa8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b082      	sub	sp, #8
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f7fa fb3d 	bl	800d636 <USBH_LL_PortDisabled>
}
 8012fbc:	bf00      	nop
 8012fbe:	3708      	adds	r7, #8
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}

08012fc4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b082      	sub	sp, #8
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8012fd2:	2b01      	cmp	r3, #1
 8012fd4:	d12a      	bne.n	801302c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8012fd6:	4a18      	ldr	r2, [pc, #96]	@ (8013038 <USBH_LL_Init+0x74>)
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	4a15      	ldr	r2, [pc, #84]	@ (8013038 <USBH_LL_Init+0x74>)
 8012fe2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012fe6:	4b14      	ldr	r3, [pc, #80]	@ (8013038 <USBH_LL_Init+0x74>)
 8012fe8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8012fec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8012fee:	4b12      	ldr	r3, [pc, #72]	@ (8013038 <USBH_LL_Init+0x74>)
 8012ff0:	2208      	movs	r2, #8
 8012ff2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8012ff4:	4b10      	ldr	r3, [pc, #64]	@ (8013038 <USBH_LL_Init+0x74>)
 8012ff6:	2201      	movs	r2, #1
 8012ff8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8013038 <USBH_LL_Init+0x74>)
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8013000:	4b0d      	ldr	r3, [pc, #52]	@ (8013038 <USBH_LL_Init+0x74>)
 8013002:	2202      	movs	r2, #2
 8013004:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013006:	4b0c      	ldr	r3, [pc, #48]	@ (8013038 <USBH_LL_Init+0x74>)
 8013008:	2200      	movs	r2, #0
 801300a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801300c:	480a      	ldr	r0, [pc, #40]	@ (8013038 <USBH_LL_Init+0x74>)
 801300e:	f7f2 f892 	bl	8005136 <HAL_HCD_Init>
 8013012:	4603      	mov	r3, r0
 8013014:	2b00      	cmp	r3, #0
 8013016:	d001      	beq.n	801301c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8013018:	f7f1 f84c 	bl	80040b4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801301c:	4806      	ldr	r0, [pc, #24]	@ (8013038 <USBH_LL_Init+0x74>)
 801301e:	f7f2 fcf3 	bl	8005a08 <HAL_HCD_GetCurrentFrame>
 8013022:	4603      	mov	r3, r0
 8013024:	4619      	mov	r1, r3
 8013026:	6878      	ldr	r0, [r7, #4]
 8013028:	f7fa fab2 	bl	800d590 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801302c:	2300      	movs	r3, #0
}
 801302e:	4618      	mov	r0, r3
 8013030:	3708      	adds	r7, #8
 8013032:	46bd      	mov	sp, r7
 8013034:	bd80      	pop	{r7, pc}
 8013036:	bf00      	nop
 8013038:	20013738 	.word	0x20013738

0801303c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801303c:	b580      	push	{r7, lr}
 801303e:	b084      	sub	sp, #16
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013044:	2300      	movs	r3, #0
 8013046:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013048:	2300      	movs	r3, #0
 801304a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013052:	4618      	mov	r0, r3
 8013054:	f7f2 fc60 	bl	8005918 <HAL_HCD_Start>
 8013058:	4603      	mov	r3, r0
 801305a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801305c:	7bfb      	ldrb	r3, [r7, #15]
 801305e:	4618      	mov	r0, r3
 8013060:	f000 f95e 	bl	8013320 <USBH_Get_USB_Status>
 8013064:	4603      	mov	r3, r0
 8013066:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013068:	7bbb      	ldrb	r3, [r7, #14]
}
 801306a:	4618      	mov	r0, r3
 801306c:	3710      	adds	r7, #16
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}

08013072 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8013072:	b580      	push	{r7, lr}
 8013074:	b084      	sub	sp, #16
 8013076:	af00      	add	r7, sp, #0
 8013078:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801307a:	2300      	movs	r3, #0
 801307c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801307e:	2300      	movs	r3, #0
 8013080:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013088:	4618      	mov	r0, r3
 801308a:	f7f2 fc68 	bl	800595e <HAL_HCD_Stop>
 801308e:	4603      	mov	r3, r0
 8013090:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013092:	7bfb      	ldrb	r3, [r7, #15]
 8013094:	4618      	mov	r0, r3
 8013096:	f000 f943 	bl	8013320 <USBH_Get_USB_Status>
 801309a:	4603      	mov	r3, r0
 801309c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801309e:	7bbb      	ldrb	r3, [r7, #14]
}
 80130a0:	4618      	mov	r0, r3
 80130a2:	3710      	adds	r7, #16
 80130a4:	46bd      	mov	sp, r7
 80130a6:	bd80      	pop	{r7, pc}

080130a8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b084      	sub	sp, #16
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80130b0:	2301      	movs	r3, #1
 80130b2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80130ba:	4618      	mov	r0, r3
 80130bc:	f7f2 fcb2 	bl	8005a24 <HAL_HCD_GetCurrentSpeed>
 80130c0:	4603      	mov	r3, r0
 80130c2:	2b02      	cmp	r3, #2
 80130c4:	d00c      	beq.n	80130e0 <USBH_LL_GetSpeed+0x38>
 80130c6:	2b02      	cmp	r3, #2
 80130c8:	d80d      	bhi.n	80130e6 <USBH_LL_GetSpeed+0x3e>
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d002      	beq.n	80130d4 <USBH_LL_GetSpeed+0x2c>
 80130ce:	2b01      	cmp	r3, #1
 80130d0:	d003      	beq.n	80130da <USBH_LL_GetSpeed+0x32>
 80130d2:	e008      	b.n	80130e6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80130d4:	2300      	movs	r3, #0
 80130d6:	73fb      	strb	r3, [r7, #15]
    break;
 80130d8:	e008      	b.n	80130ec <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80130da:	2301      	movs	r3, #1
 80130dc:	73fb      	strb	r3, [r7, #15]
    break;
 80130de:	e005      	b.n	80130ec <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80130e0:	2302      	movs	r3, #2
 80130e2:	73fb      	strb	r3, [r7, #15]
    break;
 80130e4:	e002      	b.n	80130ec <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80130e6:	2301      	movs	r3, #1
 80130e8:	73fb      	strb	r3, [r7, #15]
    break;
 80130ea:	bf00      	nop
  }
  return  speed;
 80130ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80130ee:	4618      	mov	r0, r3
 80130f0:	3710      	adds	r7, #16
 80130f2:	46bd      	mov	sp, r7
 80130f4:	bd80      	pop	{r7, pc}

080130f6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80130f6:	b580      	push	{r7, lr}
 80130f8:	b084      	sub	sp, #16
 80130fa:	af00      	add	r7, sp, #0
 80130fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80130fe:	2300      	movs	r3, #0
 8013100:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013102:	2300      	movs	r3, #0
 8013104:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801310c:	4618      	mov	r0, r3
 801310e:	f7f2 fc43 	bl	8005998 <HAL_HCD_ResetPort>
 8013112:	4603      	mov	r3, r0
 8013114:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013116:	7bfb      	ldrb	r3, [r7, #15]
 8013118:	4618      	mov	r0, r3
 801311a:	f000 f901 	bl	8013320 <USBH_Get_USB_Status>
 801311e:	4603      	mov	r3, r0
 8013120:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013122:	7bbb      	ldrb	r3, [r7, #14]
}
 8013124:	4618      	mov	r0, r3
 8013126:	3710      	adds	r7, #16
 8013128:	46bd      	mov	sp, r7
 801312a:	bd80      	pop	{r7, pc}

0801312c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b082      	sub	sp, #8
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
 8013134:	460b      	mov	r3, r1
 8013136:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801313e:	78fa      	ldrb	r2, [r7, #3]
 8013140:	4611      	mov	r1, r2
 8013142:	4618      	mov	r0, r3
 8013144:	f7f2 fc4b 	bl	80059de <HAL_HCD_HC_GetXferCount>
 8013148:	4603      	mov	r3, r0
}
 801314a:	4618      	mov	r0, r3
 801314c:	3708      	adds	r7, #8
 801314e:	46bd      	mov	sp, r7
 8013150:	bd80      	pop	{r7, pc}

08013152 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8013152:	b590      	push	{r4, r7, lr}
 8013154:	b089      	sub	sp, #36	@ 0x24
 8013156:	af04      	add	r7, sp, #16
 8013158:	6078      	str	r0, [r7, #4]
 801315a:	4608      	mov	r0, r1
 801315c:	4611      	mov	r1, r2
 801315e:	461a      	mov	r2, r3
 8013160:	4603      	mov	r3, r0
 8013162:	70fb      	strb	r3, [r7, #3]
 8013164:	460b      	mov	r3, r1
 8013166:	70bb      	strb	r3, [r7, #2]
 8013168:	4613      	mov	r3, r2
 801316a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801316c:	2300      	movs	r3, #0
 801316e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013170:	2300      	movs	r3, #0
 8013172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801317a:	787c      	ldrb	r4, [r7, #1]
 801317c:	78ba      	ldrb	r2, [r7, #2]
 801317e:	78f9      	ldrb	r1, [r7, #3]
 8013180:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013182:	9302      	str	r3, [sp, #8]
 8013184:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013188:	9301      	str	r3, [sp, #4]
 801318a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801318e:	9300      	str	r3, [sp, #0]
 8013190:	4623      	mov	r3, r4
 8013192:	f7f2 f837 	bl	8005204 <HAL_HCD_HC_Init>
 8013196:	4603      	mov	r3, r0
 8013198:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801319a:	7bfb      	ldrb	r3, [r7, #15]
 801319c:	4618      	mov	r0, r3
 801319e:	f000 f8bf 	bl	8013320 <USBH_Get_USB_Status>
 80131a2:	4603      	mov	r3, r0
 80131a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80131a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80131a8:	4618      	mov	r0, r3
 80131aa:	3714      	adds	r7, #20
 80131ac:	46bd      	mov	sp, r7
 80131ae:	bd90      	pop	{r4, r7, pc}

080131b0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b084      	sub	sp, #16
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
 80131b8:	460b      	mov	r3, r1
 80131ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80131bc:	2300      	movs	r3, #0
 80131be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80131c0:	2300      	movs	r3, #0
 80131c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80131ca:	78fa      	ldrb	r2, [r7, #3]
 80131cc:	4611      	mov	r1, r2
 80131ce:	4618      	mov	r0, r3
 80131d0:	f7f2 f8d0 	bl	8005374 <HAL_HCD_HC_Halt>
 80131d4:	4603      	mov	r3, r0
 80131d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80131d8:	7bfb      	ldrb	r3, [r7, #15]
 80131da:	4618      	mov	r0, r3
 80131dc:	f000 f8a0 	bl	8013320 <USBH_Get_USB_Status>
 80131e0:	4603      	mov	r3, r0
 80131e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80131e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80131e6:	4618      	mov	r0, r3
 80131e8:	3710      	adds	r7, #16
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bd80      	pop	{r7, pc}

080131ee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80131ee:	b590      	push	{r4, r7, lr}
 80131f0:	b089      	sub	sp, #36	@ 0x24
 80131f2:	af04      	add	r7, sp, #16
 80131f4:	6078      	str	r0, [r7, #4]
 80131f6:	4608      	mov	r0, r1
 80131f8:	4611      	mov	r1, r2
 80131fa:	461a      	mov	r2, r3
 80131fc:	4603      	mov	r3, r0
 80131fe:	70fb      	strb	r3, [r7, #3]
 8013200:	460b      	mov	r3, r1
 8013202:	70bb      	strb	r3, [r7, #2]
 8013204:	4613      	mov	r3, r2
 8013206:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013208:	2300      	movs	r3, #0
 801320a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801320c:	2300      	movs	r3, #0
 801320e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8013216:	787c      	ldrb	r4, [r7, #1]
 8013218:	78ba      	ldrb	r2, [r7, #2]
 801321a:	78f9      	ldrb	r1, [r7, #3]
 801321c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8013220:	9303      	str	r3, [sp, #12]
 8013222:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013224:	9302      	str	r3, [sp, #8]
 8013226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013228:	9301      	str	r3, [sp, #4]
 801322a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801322e:	9300      	str	r3, [sp, #0]
 8013230:	4623      	mov	r3, r4
 8013232:	f7f2 f8c3 	bl	80053bc <HAL_HCD_HC_SubmitRequest>
 8013236:	4603      	mov	r3, r0
 8013238:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801323a:	7bfb      	ldrb	r3, [r7, #15]
 801323c:	4618      	mov	r0, r3
 801323e:	f000 f86f 	bl	8013320 <USBH_Get_USB_Status>
 8013242:	4603      	mov	r3, r0
 8013244:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013246:	7bbb      	ldrb	r3, [r7, #14]
}
 8013248:	4618      	mov	r0, r3
 801324a:	3714      	adds	r7, #20
 801324c:	46bd      	mov	sp, r7
 801324e:	bd90      	pop	{r4, r7, pc}

08013250 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b082      	sub	sp, #8
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
 8013258:	460b      	mov	r3, r1
 801325a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013262:	78fa      	ldrb	r2, [r7, #3]
 8013264:	4611      	mov	r1, r2
 8013266:	4618      	mov	r0, r3
 8013268:	f7f2 fba4 	bl	80059b4 <HAL_HCD_HC_GetURBState>
 801326c:	4603      	mov	r3, r0
}
 801326e:	4618      	mov	r0, r3
 8013270:	3708      	adds	r7, #8
 8013272:	46bd      	mov	sp, r7
 8013274:	bd80      	pop	{r7, pc}

08013276 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8013276:	b580      	push	{r7, lr}
 8013278:	b082      	sub	sp, #8
 801327a:	af00      	add	r7, sp, #0
 801327c:	6078      	str	r0, [r7, #4]
 801327e:	460b      	mov	r3, r1
 8013280:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8013288:	2b01      	cmp	r3, #1
 801328a:	d103      	bne.n	8013294 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801328c:	78fb      	ldrb	r3, [r7, #3]
 801328e:	4618      	mov	r0, r3
 8013290:	f000 f872 	bl	8013378 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8013294:	20c8      	movs	r0, #200	@ 0xc8
 8013296:	f7f1 fbab 	bl	80049f0 <HAL_Delay>
  return USBH_OK;
 801329a:	2300      	movs	r3, #0
}
 801329c:	4618      	mov	r0, r3
 801329e:	3708      	adds	r7, #8
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd80      	pop	{r7, pc}

080132a4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80132a4:	b480      	push	{r7}
 80132a6:	b085      	sub	sp, #20
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
 80132ac:	460b      	mov	r3, r1
 80132ae:	70fb      	strb	r3, [r7, #3]
 80132b0:	4613      	mov	r3, r2
 80132b2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80132ba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80132bc:	78fa      	ldrb	r2, [r7, #3]
 80132be:	68f9      	ldr	r1, [r7, #12]
 80132c0:	4613      	mov	r3, r2
 80132c2:	011b      	lsls	r3, r3, #4
 80132c4:	1a9b      	subs	r3, r3, r2
 80132c6:	009b      	lsls	r3, r3, #2
 80132c8:	440b      	add	r3, r1
 80132ca:	3317      	adds	r3, #23
 80132cc:	781b      	ldrb	r3, [r3, #0]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d00a      	beq.n	80132e8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80132d2:	78fa      	ldrb	r2, [r7, #3]
 80132d4:	68f9      	ldr	r1, [r7, #12]
 80132d6:	4613      	mov	r3, r2
 80132d8:	011b      	lsls	r3, r3, #4
 80132da:	1a9b      	subs	r3, r3, r2
 80132dc:	009b      	lsls	r3, r3, #2
 80132de:	440b      	add	r3, r1
 80132e0:	333c      	adds	r3, #60	@ 0x3c
 80132e2:	78ba      	ldrb	r2, [r7, #2]
 80132e4:	701a      	strb	r2, [r3, #0]
 80132e6:	e009      	b.n	80132fc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80132e8:	78fa      	ldrb	r2, [r7, #3]
 80132ea:	68f9      	ldr	r1, [r7, #12]
 80132ec:	4613      	mov	r3, r2
 80132ee:	011b      	lsls	r3, r3, #4
 80132f0:	1a9b      	subs	r3, r3, r2
 80132f2:	009b      	lsls	r3, r3, #2
 80132f4:	440b      	add	r3, r1
 80132f6:	333d      	adds	r3, #61	@ 0x3d
 80132f8:	78ba      	ldrb	r2, [r7, #2]
 80132fa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80132fc:	2300      	movs	r3, #0
}
 80132fe:	4618      	mov	r0, r3
 8013300:	3714      	adds	r7, #20
 8013302:	46bd      	mov	sp, r7
 8013304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013308:	4770      	bx	lr

0801330a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801330a:	b580      	push	{r7, lr}
 801330c:	b082      	sub	sp, #8
 801330e:	af00      	add	r7, sp, #0
 8013310:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8013312:	6878      	ldr	r0, [r7, #4]
 8013314:	f7f1 fb6c 	bl	80049f0 <HAL_Delay>
}
 8013318:	bf00      	nop
 801331a:	3708      	adds	r7, #8
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}

08013320 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013320:	b480      	push	{r7}
 8013322:	b085      	sub	sp, #20
 8013324:	af00      	add	r7, sp, #0
 8013326:	4603      	mov	r3, r0
 8013328:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801332a:	2300      	movs	r3, #0
 801332c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801332e:	79fb      	ldrb	r3, [r7, #7]
 8013330:	2b03      	cmp	r3, #3
 8013332:	d817      	bhi.n	8013364 <USBH_Get_USB_Status+0x44>
 8013334:	a201      	add	r2, pc, #4	@ (adr r2, 801333c <USBH_Get_USB_Status+0x1c>)
 8013336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801333a:	bf00      	nop
 801333c:	0801334d 	.word	0x0801334d
 8013340:	08013353 	.word	0x08013353
 8013344:	08013359 	.word	0x08013359
 8013348:	0801335f 	.word	0x0801335f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801334c:	2300      	movs	r3, #0
 801334e:	73fb      	strb	r3, [r7, #15]
    break;
 8013350:	e00b      	b.n	801336a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8013352:	2302      	movs	r3, #2
 8013354:	73fb      	strb	r3, [r7, #15]
    break;
 8013356:	e008      	b.n	801336a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8013358:	2301      	movs	r3, #1
 801335a:	73fb      	strb	r3, [r7, #15]
    break;
 801335c:	e005      	b.n	801336a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801335e:	2302      	movs	r3, #2
 8013360:	73fb      	strb	r3, [r7, #15]
    break;
 8013362:	e002      	b.n	801336a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8013364:	2302      	movs	r3, #2
 8013366:	73fb      	strb	r3, [r7, #15]
    break;
 8013368:	bf00      	nop
  }
  return usb_status;
 801336a:	7bfb      	ldrb	r3, [r7, #15]
}
 801336c:	4618      	mov	r0, r3
 801336e:	3714      	adds	r7, #20
 8013370:	46bd      	mov	sp, r7
 8013372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013376:	4770      	bx	lr

08013378 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b084      	sub	sp, #16
 801337c:	af00      	add	r7, sp, #0
 801337e:	4603      	mov	r3, r0
 8013380:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8013382:	79fb      	ldrb	r3, [r7, #7]
 8013384:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8013386:	79fb      	ldrb	r3, [r7, #7]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d102      	bne.n	8013392 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 801338c:	2301      	movs	r3, #1
 801338e:	73fb      	strb	r3, [r7, #15]
 8013390:	e001      	b.n	8013396 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8013392:	2300      	movs	r3, #0
 8013394:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8013396:	7bfb      	ldrb	r3, [r7, #15]
 8013398:	461a      	mov	r2, r3
 801339a:	2101      	movs	r1, #1
 801339c:	4803      	ldr	r0, [pc, #12]	@ (80133ac <MX_DriverVbusFS+0x34>)
 801339e:	f7f1 fe73 	bl	8005088 <HAL_GPIO_WritePin>
}
 80133a2:	bf00      	nop
 80133a4:	3710      	adds	r7, #16
 80133a6:	46bd      	mov	sp, r7
 80133a8:	bd80      	pop	{r7, pc}
 80133aa:	bf00      	nop
 80133ac:	40020800 	.word	0x40020800

080133b0 <atof>:
 80133b0:	2100      	movs	r1, #0
 80133b2:	f000 bec5 	b.w	8014140 <strtod>

080133b6 <atoi>:
 80133b6:	220a      	movs	r2, #10
 80133b8:	2100      	movs	r1, #0
 80133ba:	f000 bf47 	b.w	801424c <strtol>
	...

080133c0 <malloc>:
 80133c0:	4b02      	ldr	r3, [pc, #8]	@ (80133cc <malloc+0xc>)
 80133c2:	4601      	mov	r1, r0
 80133c4:	6818      	ldr	r0, [r3, #0]
 80133c6:	f000 b82d 	b.w	8013424 <_malloc_r>
 80133ca:	bf00      	nop
 80133cc:	200003ac 	.word	0x200003ac

080133d0 <free>:
 80133d0:	4b02      	ldr	r3, [pc, #8]	@ (80133dc <free+0xc>)
 80133d2:	4601      	mov	r1, r0
 80133d4:	6818      	ldr	r0, [r3, #0]
 80133d6:	f002 bc9f 	b.w	8015d18 <_free_r>
 80133da:	bf00      	nop
 80133dc:	200003ac 	.word	0x200003ac

080133e0 <sbrk_aligned>:
 80133e0:	b570      	push	{r4, r5, r6, lr}
 80133e2:	4e0f      	ldr	r6, [pc, #60]	@ (8013420 <sbrk_aligned+0x40>)
 80133e4:	460c      	mov	r4, r1
 80133e6:	6831      	ldr	r1, [r6, #0]
 80133e8:	4605      	mov	r5, r0
 80133ea:	b911      	cbnz	r1, 80133f2 <sbrk_aligned+0x12>
 80133ec:	f001 fdac 	bl	8014f48 <_sbrk_r>
 80133f0:	6030      	str	r0, [r6, #0]
 80133f2:	4621      	mov	r1, r4
 80133f4:	4628      	mov	r0, r5
 80133f6:	f001 fda7 	bl	8014f48 <_sbrk_r>
 80133fa:	1c43      	adds	r3, r0, #1
 80133fc:	d103      	bne.n	8013406 <sbrk_aligned+0x26>
 80133fe:	f04f 34ff 	mov.w	r4, #4294967295
 8013402:	4620      	mov	r0, r4
 8013404:	bd70      	pop	{r4, r5, r6, pc}
 8013406:	1cc4      	adds	r4, r0, #3
 8013408:	f024 0403 	bic.w	r4, r4, #3
 801340c:	42a0      	cmp	r0, r4
 801340e:	d0f8      	beq.n	8013402 <sbrk_aligned+0x22>
 8013410:	1a21      	subs	r1, r4, r0
 8013412:	4628      	mov	r0, r5
 8013414:	f001 fd98 	bl	8014f48 <_sbrk_r>
 8013418:	3001      	adds	r0, #1
 801341a:	d1f2      	bne.n	8013402 <sbrk_aligned+0x22>
 801341c:	e7ef      	b.n	80133fe <sbrk_aligned+0x1e>
 801341e:	bf00      	nop
 8013420:	20013b18 	.word	0x20013b18

08013424 <_malloc_r>:
 8013424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013428:	1ccd      	adds	r5, r1, #3
 801342a:	f025 0503 	bic.w	r5, r5, #3
 801342e:	3508      	adds	r5, #8
 8013430:	2d0c      	cmp	r5, #12
 8013432:	bf38      	it	cc
 8013434:	250c      	movcc	r5, #12
 8013436:	2d00      	cmp	r5, #0
 8013438:	4606      	mov	r6, r0
 801343a:	db01      	blt.n	8013440 <_malloc_r+0x1c>
 801343c:	42a9      	cmp	r1, r5
 801343e:	d904      	bls.n	801344a <_malloc_r+0x26>
 8013440:	230c      	movs	r3, #12
 8013442:	6033      	str	r3, [r6, #0]
 8013444:	2000      	movs	r0, #0
 8013446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801344a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013520 <_malloc_r+0xfc>
 801344e:	f000 f869 	bl	8013524 <__malloc_lock>
 8013452:	f8d8 3000 	ldr.w	r3, [r8]
 8013456:	461c      	mov	r4, r3
 8013458:	bb44      	cbnz	r4, 80134ac <_malloc_r+0x88>
 801345a:	4629      	mov	r1, r5
 801345c:	4630      	mov	r0, r6
 801345e:	f7ff ffbf 	bl	80133e0 <sbrk_aligned>
 8013462:	1c43      	adds	r3, r0, #1
 8013464:	4604      	mov	r4, r0
 8013466:	d158      	bne.n	801351a <_malloc_r+0xf6>
 8013468:	f8d8 4000 	ldr.w	r4, [r8]
 801346c:	4627      	mov	r7, r4
 801346e:	2f00      	cmp	r7, #0
 8013470:	d143      	bne.n	80134fa <_malloc_r+0xd6>
 8013472:	2c00      	cmp	r4, #0
 8013474:	d04b      	beq.n	801350e <_malloc_r+0xea>
 8013476:	6823      	ldr	r3, [r4, #0]
 8013478:	4639      	mov	r1, r7
 801347a:	4630      	mov	r0, r6
 801347c:	eb04 0903 	add.w	r9, r4, r3
 8013480:	f001 fd62 	bl	8014f48 <_sbrk_r>
 8013484:	4581      	cmp	r9, r0
 8013486:	d142      	bne.n	801350e <_malloc_r+0xea>
 8013488:	6821      	ldr	r1, [r4, #0]
 801348a:	1a6d      	subs	r5, r5, r1
 801348c:	4629      	mov	r1, r5
 801348e:	4630      	mov	r0, r6
 8013490:	f7ff ffa6 	bl	80133e0 <sbrk_aligned>
 8013494:	3001      	adds	r0, #1
 8013496:	d03a      	beq.n	801350e <_malloc_r+0xea>
 8013498:	6823      	ldr	r3, [r4, #0]
 801349a:	442b      	add	r3, r5
 801349c:	6023      	str	r3, [r4, #0]
 801349e:	f8d8 3000 	ldr.w	r3, [r8]
 80134a2:	685a      	ldr	r2, [r3, #4]
 80134a4:	bb62      	cbnz	r2, 8013500 <_malloc_r+0xdc>
 80134a6:	f8c8 7000 	str.w	r7, [r8]
 80134aa:	e00f      	b.n	80134cc <_malloc_r+0xa8>
 80134ac:	6822      	ldr	r2, [r4, #0]
 80134ae:	1b52      	subs	r2, r2, r5
 80134b0:	d420      	bmi.n	80134f4 <_malloc_r+0xd0>
 80134b2:	2a0b      	cmp	r2, #11
 80134b4:	d917      	bls.n	80134e6 <_malloc_r+0xc2>
 80134b6:	1961      	adds	r1, r4, r5
 80134b8:	42a3      	cmp	r3, r4
 80134ba:	6025      	str	r5, [r4, #0]
 80134bc:	bf18      	it	ne
 80134be:	6059      	strne	r1, [r3, #4]
 80134c0:	6863      	ldr	r3, [r4, #4]
 80134c2:	bf08      	it	eq
 80134c4:	f8c8 1000 	streq.w	r1, [r8]
 80134c8:	5162      	str	r2, [r4, r5]
 80134ca:	604b      	str	r3, [r1, #4]
 80134cc:	4630      	mov	r0, r6
 80134ce:	f000 f82f 	bl	8013530 <__malloc_unlock>
 80134d2:	f104 000b 	add.w	r0, r4, #11
 80134d6:	1d23      	adds	r3, r4, #4
 80134d8:	f020 0007 	bic.w	r0, r0, #7
 80134dc:	1ac2      	subs	r2, r0, r3
 80134de:	bf1c      	itt	ne
 80134e0:	1a1b      	subne	r3, r3, r0
 80134e2:	50a3      	strne	r3, [r4, r2]
 80134e4:	e7af      	b.n	8013446 <_malloc_r+0x22>
 80134e6:	6862      	ldr	r2, [r4, #4]
 80134e8:	42a3      	cmp	r3, r4
 80134ea:	bf0c      	ite	eq
 80134ec:	f8c8 2000 	streq.w	r2, [r8]
 80134f0:	605a      	strne	r2, [r3, #4]
 80134f2:	e7eb      	b.n	80134cc <_malloc_r+0xa8>
 80134f4:	4623      	mov	r3, r4
 80134f6:	6864      	ldr	r4, [r4, #4]
 80134f8:	e7ae      	b.n	8013458 <_malloc_r+0x34>
 80134fa:	463c      	mov	r4, r7
 80134fc:	687f      	ldr	r7, [r7, #4]
 80134fe:	e7b6      	b.n	801346e <_malloc_r+0x4a>
 8013500:	461a      	mov	r2, r3
 8013502:	685b      	ldr	r3, [r3, #4]
 8013504:	42a3      	cmp	r3, r4
 8013506:	d1fb      	bne.n	8013500 <_malloc_r+0xdc>
 8013508:	2300      	movs	r3, #0
 801350a:	6053      	str	r3, [r2, #4]
 801350c:	e7de      	b.n	80134cc <_malloc_r+0xa8>
 801350e:	230c      	movs	r3, #12
 8013510:	6033      	str	r3, [r6, #0]
 8013512:	4630      	mov	r0, r6
 8013514:	f000 f80c 	bl	8013530 <__malloc_unlock>
 8013518:	e794      	b.n	8013444 <_malloc_r+0x20>
 801351a:	6005      	str	r5, [r0, #0]
 801351c:	e7d6      	b.n	80134cc <_malloc_r+0xa8>
 801351e:	bf00      	nop
 8013520:	20013b1c 	.word	0x20013b1c

08013524 <__malloc_lock>:
 8013524:	4801      	ldr	r0, [pc, #4]	@ (801352c <__malloc_lock+0x8>)
 8013526:	f001 bd5c 	b.w	8014fe2 <__retarget_lock_acquire_recursive>
 801352a:	bf00      	nop
 801352c:	20013c60 	.word	0x20013c60

08013530 <__malloc_unlock>:
 8013530:	4801      	ldr	r0, [pc, #4]	@ (8013538 <__malloc_unlock+0x8>)
 8013532:	f001 bd57 	b.w	8014fe4 <__retarget_lock_release_recursive>
 8013536:	bf00      	nop
 8013538:	20013c60 	.word	0x20013c60

0801353c <sulp>:
 801353c:	b570      	push	{r4, r5, r6, lr}
 801353e:	4604      	mov	r4, r0
 8013540:	460d      	mov	r5, r1
 8013542:	ec45 4b10 	vmov	d0, r4, r5
 8013546:	4616      	mov	r6, r2
 8013548:	f003 fae8 	bl	8016b1c <__ulp>
 801354c:	ec51 0b10 	vmov	r0, r1, d0
 8013550:	b17e      	cbz	r6, 8013572 <sulp+0x36>
 8013552:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013556:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801355a:	2b00      	cmp	r3, #0
 801355c:	dd09      	ble.n	8013572 <sulp+0x36>
 801355e:	051b      	lsls	r3, r3, #20
 8013560:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8013564:	2400      	movs	r4, #0
 8013566:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801356a:	4622      	mov	r2, r4
 801356c:	462b      	mov	r3, r5
 801356e:	f7ed f853 	bl	8000618 <__aeabi_dmul>
 8013572:	ec41 0b10 	vmov	d0, r0, r1
 8013576:	bd70      	pop	{r4, r5, r6, pc}

08013578 <_strtod_l>:
 8013578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801357c:	b09f      	sub	sp, #124	@ 0x7c
 801357e:	460c      	mov	r4, r1
 8013580:	9217      	str	r2, [sp, #92]	@ 0x5c
 8013582:	2200      	movs	r2, #0
 8013584:	921a      	str	r2, [sp, #104]	@ 0x68
 8013586:	9005      	str	r0, [sp, #20]
 8013588:	f04f 0a00 	mov.w	sl, #0
 801358c:	f04f 0b00 	mov.w	fp, #0
 8013590:	460a      	mov	r2, r1
 8013592:	9219      	str	r2, [sp, #100]	@ 0x64
 8013594:	7811      	ldrb	r1, [r2, #0]
 8013596:	292b      	cmp	r1, #43	@ 0x2b
 8013598:	d04a      	beq.n	8013630 <_strtod_l+0xb8>
 801359a:	d838      	bhi.n	801360e <_strtod_l+0x96>
 801359c:	290d      	cmp	r1, #13
 801359e:	d832      	bhi.n	8013606 <_strtod_l+0x8e>
 80135a0:	2908      	cmp	r1, #8
 80135a2:	d832      	bhi.n	801360a <_strtod_l+0x92>
 80135a4:	2900      	cmp	r1, #0
 80135a6:	d03b      	beq.n	8013620 <_strtod_l+0xa8>
 80135a8:	2200      	movs	r2, #0
 80135aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80135ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80135ae:	782a      	ldrb	r2, [r5, #0]
 80135b0:	2a30      	cmp	r2, #48	@ 0x30
 80135b2:	f040 80b2 	bne.w	801371a <_strtod_l+0x1a2>
 80135b6:	786a      	ldrb	r2, [r5, #1]
 80135b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80135bc:	2a58      	cmp	r2, #88	@ 0x58
 80135be:	d16e      	bne.n	801369e <_strtod_l+0x126>
 80135c0:	9302      	str	r3, [sp, #8]
 80135c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80135c4:	9301      	str	r3, [sp, #4]
 80135c6:	ab1a      	add	r3, sp, #104	@ 0x68
 80135c8:	9300      	str	r3, [sp, #0]
 80135ca:	4a8f      	ldr	r2, [pc, #572]	@ (8013808 <_strtod_l+0x290>)
 80135cc:	9805      	ldr	r0, [sp, #20]
 80135ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 80135d0:	a919      	add	r1, sp, #100	@ 0x64
 80135d2:	f002 fc53 	bl	8015e7c <__gethex>
 80135d6:	f010 060f 	ands.w	r6, r0, #15
 80135da:	4604      	mov	r4, r0
 80135dc:	d005      	beq.n	80135ea <_strtod_l+0x72>
 80135de:	2e06      	cmp	r6, #6
 80135e0:	d128      	bne.n	8013634 <_strtod_l+0xbc>
 80135e2:	3501      	adds	r5, #1
 80135e4:	2300      	movs	r3, #0
 80135e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80135e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80135ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	f040 858e 	bne.w	801410e <_strtod_l+0xb96>
 80135f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80135f4:	b1cb      	cbz	r3, 801362a <_strtod_l+0xb2>
 80135f6:	4652      	mov	r2, sl
 80135f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80135fc:	ec43 2b10 	vmov	d0, r2, r3
 8013600:	b01f      	add	sp, #124	@ 0x7c
 8013602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013606:	2920      	cmp	r1, #32
 8013608:	d1ce      	bne.n	80135a8 <_strtod_l+0x30>
 801360a:	3201      	adds	r2, #1
 801360c:	e7c1      	b.n	8013592 <_strtod_l+0x1a>
 801360e:	292d      	cmp	r1, #45	@ 0x2d
 8013610:	d1ca      	bne.n	80135a8 <_strtod_l+0x30>
 8013612:	2101      	movs	r1, #1
 8013614:	910e      	str	r1, [sp, #56]	@ 0x38
 8013616:	1c51      	adds	r1, r2, #1
 8013618:	9119      	str	r1, [sp, #100]	@ 0x64
 801361a:	7852      	ldrb	r2, [r2, #1]
 801361c:	2a00      	cmp	r2, #0
 801361e:	d1c5      	bne.n	80135ac <_strtod_l+0x34>
 8013620:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013622:	9419      	str	r4, [sp, #100]	@ 0x64
 8013624:	2b00      	cmp	r3, #0
 8013626:	f040 8570 	bne.w	801410a <_strtod_l+0xb92>
 801362a:	4652      	mov	r2, sl
 801362c:	465b      	mov	r3, fp
 801362e:	e7e5      	b.n	80135fc <_strtod_l+0x84>
 8013630:	2100      	movs	r1, #0
 8013632:	e7ef      	b.n	8013614 <_strtod_l+0x9c>
 8013634:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013636:	b13a      	cbz	r2, 8013648 <_strtod_l+0xd0>
 8013638:	2135      	movs	r1, #53	@ 0x35
 801363a:	a81c      	add	r0, sp, #112	@ 0x70
 801363c:	f003 fb68 	bl	8016d10 <__copybits>
 8013640:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013642:	9805      	ldr	r0, [sp, #20]
 8013644:	f002 ff3e 	bl	80164c4 <_Bfree>
 8013648:	3e01      	subs	r6, #1
 801364a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801364c:	2e04      	cmp	r6, #4
 801364e:	d806      	bhi.n	801365e <_strtod_l+0xe6>
 8013650:	e8df f006 	tbb	[pc, r6]
 8013654:	201d0314 	.word	0x201d0314
 8013658:	14          	.byte	0x14
 8013659:	00          	.byte	0x00
 801365a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801365e:	05e1      	lsls	r1, r4, #23
 8013660:	bf48      	it	mi
 8013662:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8013666:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801366a:	0d1b      	lsrs	r3, r3, #20
 801366c:	051b      	lsls	r3, r3, #20
 801366e:	2b00      	cmp	r3, #0
 8013670:	d1bb      	bne.n	80135ea <_strtod_l+0x72>
 8013672:	f001 fc8b 	bl	8014f8c <__errno>
 8013676:	2322      	movs	r3, #34	@ 0x22
 8013678:	6003      	str	r3, [r0, #0]
 801367a:	e7b6      	b.n	80135ea <_strtod_l+0x72>
 801367c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8013680:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013684:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013688:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801368c:	e7e7      	b.n	801365e <_strtod_l+0xe6>
 801368e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8013810 <_strtod_l+0x298>
 8013692:	e7e4      	b.n	801365e <_strtod_l+0xe6>
 8013694:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013698:	f04f 3aff 	mov.w	sl, #4294967295
 801369c:	e7df      	b.n	801365e <_strtod_l+0xe6>
 801369e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80136a0:	1c5a      	adds	r2, r3, #1
 80136a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80136a4:	785b      	ldrb	r3, [r3, #1]
 80136a6:	2b30      	cmp	r3, #48	@ 0x30
 80136a8:	d0f9      	beq.n	801369e <_strtod_l+0x126>
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d09d      	beq.n	80135ea <_strtod_l+0x72>
 80136ae:	2301      	movs	r3, #1
 80136b0:	2700      	movs	r7, #0
 80136b2:	9308      	str	r3, [sp, #32]
 80136b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80136b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80136b8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80136ba:	46b9      	mov	r9, r7
 80136bc:	220a      	movs	r2, #10
 80136be:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80136c0:	7805      	ldrb	r5, [r0, #0]
 80136c2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80136c6:	b2d9      	uxtb	r1, r3
 80136c8:	2909      	cmp	r1, #9
 80136ca:	d928      	bls.n	801371e <_strtod_l+0x1a6>
 80136cc:	494f      	ldr	r1, [pc, #316]	@ (801380c <_strtod_l+0x294>)
 80136ce:	2201      	movs	r2, #1
 80136d0:	f001 fb36 	bl	8014d40 <strncmp>
 80136d4:	2800      	cmp	r0, #0
 80136d6:	d032      	beq.n	801373e <_strtod_l+0x1c6>
 80136d8:	2000      	movs	r0, #0
 80136da:	462a      	mov	r2, r5
 80136dc:	900a      	str	r0, [sp, #40]	@ 0x28
 80136de:	464d      	mov	r5, r9
 80136e0:	4603      	mov	r3, r0
 80136e2:	2a65      	cmp	r2, #101	@ 0x65
 80136e4:	d001      	beq.n	80136ea <_strtod_l+0x172>
 80136e6:	2a45      	cmp	r2, #69	@ 0x45
 80136e8:	d114      	bne.n	8013714 <_strtod_l+0x19c>
 80136ea:	b91d      	cbnz	r5, 80136f4 <_strtod_l+0x17c>
 80136ec:	9a08      	ldr	r2, [sp, #32]
 80136ee:	4302      	orrs	r2, r0
 80136f0:	d096      	beq.n	8013620 <_strtod_l+0xa8>
 80136f2:	2500      	movs	r5, #0
 80136f4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80136f6:	1c62      	adds	r2, r4, #1
 80136f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80136fa:	7862      	ldrb	r2, [r4, #1]
 80136fc:	2a2b      	cmp	r2, #43	@ 0x2b
 80136fe:	d07a      	beq.n	80137f6 <_strtod_l+0x27e>
 8013700:	2a2d      	cmp	r2, #45	@ 0x2d
 8013702:	d07e      	beq.n	8013802 <_strtod_l+0x28a>
 8013704:	f04f 0c00 	mov.w	ip, #0
 8013708:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801370c:	2909      	cmp	r1, #9
 801370e:	f240 8085 	bls.w	801381c <_strtod_l+0x2a4>
 8013712:	9419      	str	r4, [sp, #100]	@ 0x64
 8013714:	f04f 0800 	mov.w	r8, #0
 8013718:	e0a5      	b.n	8013866 <_strtod_l+0x2ee>
 801371a:	2300      	movs	r3, #0
 801371c:	e7c8      	b.n	80136b0 <_strtod_l+0x138>
 801371e:	f1b9 0f08 	cmp.w	r9, #8
 8013722:	bfd8      	it	le
 8013724:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8013726:	f100 0001 	add.w	r0, r0, #1
 801372a:	bfda      	itte	le
 801372c:	fb02 3301 	mlale	r3, r2, r1, r3
 8013730:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8013732:	fb02 3707 	mlagt	r7, r2, r7, r3
 8013736:	f109 0901 	add.w	r9, r9, #1
 801373a:	9019      	str	r0, [sp, #100]	@ 0x64
 801373c:	e7bf      	b.n	80136be <_strtod_l+0x146>
 801373e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013740:	1c5a      	adds	r2, r3, #1
 8013742:	9219      	str	r2, [sp, #100]	@ 0x64
 8013744:	785a      	ldrb	r2, [r3, #1]
 8013746:	f1b9 0f00 	cmp.w	r9, #0
 801374a:	d03b      	beq.n	80137c4 <_strtod_l+0x24c>
 801374c:	900a      	str	r0, [sp, #40]	@ 0x28
 801374e:	464d      	mov	r5, r9
 8013750:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8013754:	2b09      	cmp	r3, #9
 8013756:	d912      	bls.n	801377e <_strtod_l+0x206>
 8013758:	2301      	movs	r3, #1
 801375a:	e7c2      	b.n	80136e2 <_strtod_l+0x16a>
 801375c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801375e:	1c5a      	adds	r2, r3, #1
 8013760:	9219      	str	r2, [sp, #100]	@ 0x64
 8013762:	785a      	ldrb	r2, [r3, #1]
 8013764:	3001      	adds	r0, #1
 8013766:	2a30      	cmp	r2, #48	@ 0x30
 8013768:	d0f8      	beq.n	801375c <_strtod_l+0x1e4>
 801376a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801376e:	2b08      	cmp	r3, #8
 8013770:	f200 84d2 	bhi.w	8014118 <_strtod_l+0xba0>
 8013774:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013776:	900a      	str	r0, [sp, #40]	@ 0x28
 8013778:	2000      	movs	r0, #0
 801377a:	930c      	str	r3, [sp, #48]	@ 0x30
 801377c:	4605      	mov	r5, r0
 801377e:	3a30      	subs	r2, #48	@ 0x30
 8013780:	f100 0301 	add.w	r3, r0, #1
 8013784:	d018      	beq.n	80137b8 <_strtod_l+0x240>
 8013786:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013788:	4419      	add	r1, r3
 801378a:	910a      	str	r1, [sp, #40]	@ 0x28
 801378c:	462e      	mov	r6, r5
 801378e:	f04f 0e0a 	mov.w	lr, #10
 8013792:	1c71      	adds	r1, r6, #1
 8013794:	eba1 0c05 	sub.w	ip, r1, r5
 8013798:	4563      	cmp	r3, ip
 801379a:	dc15      	bgt.n	80137c8 <_strtod_l+0x250>
 801379c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80137a0:	182b      	adds	r3, r5, r0
 80137a2:	2b08      	cmp	r3, #8
 80137a4:	f105 0501 	add.w	r5, r5, #1
 80137a8:	4405      	add	r5, r0
 80137aa:	dc1a      	bgt.n	80137e2 <_strtod_l+0x26a>
 80137ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80137ae:	230a      	movs	r3, #10
 80137b0:	fb03 2301 	mla	r3, r3, r1, r2
 80137b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80137b6:	2300      	movs	r3, #0
 80137b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80137ba:	1c51      	adds	r1, r2, #1
 80137bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80137be:	7852      	ldrb	r2, [r2, #1]
 80137c0:	4618      	mov	r0, r3
 80137c2:	e7c5      	b.n	8013750 <_strtod_l+0x1d8>
 80137c4:	4648      	mov	r0, r9
 80137c6:	e7ce      	b.n	8013766 <_strtod_l+0x1ee>
 80137c8:	2e08      	cmp	r6, #8
 80137ca:	dc05      	bgt.n	80137d8 <_strtod_l+0x260>
 80137cc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80137ce:	fb0e f606 	mul.w	r6, lr, r6
 80137d2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80137d4:	460e      	mov	r6, r1
 80137d6:	e7dc      	b.n	8013792 <_strtod_l+0x21a>
 80137d8:	2910      	cmp	r1, #16
 80137da:	bfd8      	it	le
 80137dc:	fb0e f707 	mulle.w	r7, lr, r7
 80137e0:	e7f8      	b.n	80137d4 <_strtod_l+0x25c>
 80137e2:	2b0f      	cmp	r3, #15
 80137e4:	bfdc      	itt	le
 80137e6:	230a      	movle	r3, #10
 80137e8:	fb03 2707 	mlale	r7, r3, r7, r2
 80137ec:	e7e3      	b.n	80137b6 <_strtod_l+0x23e>
 80137ee:	2300      	movs	r3, #0
 80137f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80137f2:	2301      	movs	r3, #1
 80137f4:	e77a      	b.n	80136ec <_strtod_l+0x174>
 80137f6:	f04f 0c00 	mov.w	ip, #0
 80137fa:	1ca2      	adds	r2, r4, #2
 80137fc:	9219      	str	r2, [sp, #100]	@ 0x64
 80137fe:	78a2      	ldrb	r2, [r4, #2]
 8013800:	e782      	b.n	8013708 <_strtod_l+0x190>
 8013802:	f04f 0c01 	mov.w	ip, #1
 8013806:	e7f8      	b.n	80137fa <_strtod_l+0x282>
 8013808:	08019da8 	.word	0x08019da8
 801380c:	08019b68 	.word	0x08019b68
 8013810:	7ff00000 	.word	0x7ff00000
 8013814:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013816:	1c51      	adds	r1, r2, #1
 8013818:	9119      	str	r1, [sp, #100]	@ 0x64
 801381a:	7852      	ldrb	r2, [r2, #1]
 801381c:	2a30      	cmp	r2, #48	@ 0x30
 801381e:	d0f9      	beq.n	8013814 <_strtod_l+0x29c>
 8013820:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8013824:	2908      	cmp	r1, #8
 8013826:	f63f af75 	bhi.w	8013714 <_strtod_l+0x19c>
 801382a:	3a30      	subs	r2, #48	@ 0x30
 801382c:	9209      	str	r2, [sp, #36]	@ 0x24
 801382e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013830:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013832:	f04f 080a 	mov.w	r8, #10
 8013836:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013838:	1c56      	adds	r6, r2, #1
 801383a:	9619      	str	r6, [sp, #100]	@ 0x64
 801383c:	7852      	ldrb	r2, [r2, #1]
 801383e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8013842:	f1be 0f09 	cmp.w	lr, #9
 8013846:	d939      	bls.n	80138bc <_strtod_l+0x344>
 8013848:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801384a:	1a76      	subs	r6, r6, r1
 801384c:	2e08      	cmp	r6, #8
 801384e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8013852:	dc03      	bgt.n	801385c <_strtod_l+0x2e4>
 8013854:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013856:	4588      	cmp	r8, r1
 8013858:	bfa8      	it	ge
 801385a:	4688      	movge	r8, r1
 801385c:	f1bc 0f00 	cmp.w	ip, #0
 8013860:	d001      	beq.n	8013866 <_strtod_l+0x2ee>
 8013862:	f1c8 0800 	rsb	r8, r8, #0
 8013866:	2d00      	cmp	r5, #0
 8013868:	d14e      	bne.n	8013908 <_strtod_l+0x390>
 801386a:	9908      	ldr	r1, [sp, #32]
 801386c:	4308      	orrs	r0, r1
 801386e:	f47f aebc 	bne.w	80135ea <_strtod_l+0x72>
 8013872:	2b00      	cmp	r3, #0
 8013874:	f47f aed4 	bne.w	8013620 <_strtod_l+0xa8>
 8013878:	2a69      	cmp	r2, #105	@ 0x69
 801387a:	d028      	beq.n	80138ce <_strtod_l+0x356>
 801387c:	dc25      	bgt.n	80138ca <_strtod_l+0x352>
 801387e:	2a49      	cmp	r2, #73	@ 0x49
 8013880:	d025      	beq.n	80138ce <_strtod_l+0x356>
 8013882:	2a4e      	cmp	r2, #78	@ 0x4e
 8013884:	f47f aecc 	bne.w	8013620 <_strtod_l+0xa8>
 8013888:	499a      	ldr	r1, [pc, #616]	@ (8013af4 <_strtod_l+0x57c>)
 801388a:	a819      	add	r0, sp, #100	@ 0x64
 801388c:	f002 fd18 	bl	80162c0 <__match>
 8013890:	2800      	cmp	r0, #0
 8013892:	f43f aec5 	beq.w	8013620 <_strtod_l+0xa8>
 8013896:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013898:	781b      	ldrb	r3, [r3, #0]
 801389a:	2b28      	cmp	r3, #40	@ 0x28
 801389c:	d12e      	bne.n	80138fc <_strtod_l+0x384>
 801389e:	4996      	ldr	r1, [pc, #600]	@ (8013af8 <_strtod_l+0x580>)
 80138a0:	aa1c      	add	r2, sp, #112	@ 0x70
 80138a2:	a819      	add	r0, sp, #100	@ 0x64
 80138a4:	f002 fd20 	bl	80162e8 <__hexnan>
 80138a8:	2805      	cmp	r0, #5
 80138aa:	d127      	bne.n	80138fc <_strtod_l+0x384>
 80138ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80138ae:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80138b2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80138b6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80138ba:	e696      	b.n	80135ea <_strtod_l+0x72>
 80138bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80138be:	fb08 2101 	mla	r1, r8, r1, r2
 80138c2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80138c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80138c8:	e7b5      	b.n	8013836 <_strtod_l+0x2be>
 80138ca:	2a6e      	cmp	r2, #110	@ 0x6e
 80138cc:	e7da      	b.n	8013884 <_strtod_l+0x30c>
 80138ce:	498b      	ldr	r1, [pc, #556]	@ (8013afc <_strtod_l+0x584>)
 80138d0:	a819      	add	r0, sp, #100	@ 0x64
 80138d2:	f002 fcf5 	bl	80162c0 <__match>
 80138d6:	2800      	cmp	r0, #0
 80138d8:	f43f aea2 	beq.w	8013620 <_strtod_l+0xa8>
 80138dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80138de:	4988      	ldr	r1, [pc, #544]	@ (8013b00 <_strtod_l+0x588>)
 80138e0:	3b01      	subs	r3, #1
 80138e2:	a819      	add	r0, sp, #100	@ 0x64
 80138e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80138e6:	f002 fceb 	bl	80162c0 <__match>
 80138ea:	b910      	cbnz	r0, 80138f2 <_strtod_l+0x37a>
 80138ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80138ee:	3301      	adds	r3, #1
 80138f0:	9319      	str	r3, [sp, #100]	@ 0x64
 80138f2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8013b10 <_strtod_l+0x598>
 80138f6:	f04f 0a00 	mov.w	sl, #0
 80138fa:	e676      	b.n	80135ea <_strtod_l+0x72>
 80138fc:	4881      	ldr	r0, [pc, #516]	@ (8013b04 <_strtod_l+0x58c>)
 80138fe:	f001 fb8b 	bl	8015018 <nan>
 8013902:	ec5b ab10 	vmov	sl, fp, d0
 8013906:	e670      	b.n	80135ea <_strtod_l+0x72>
 8013908:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801390a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801390c:	eba8 0303 	sub.w	r3, r8, r3
 8013910:	f1b9 0f00 	cmp.w	r9, #0
 8013914:	bf08      	it	eq
 8013916:	46a9      	moveq	r9, r5
 8013918:	2d10      	cmp	r5, #16
 801391a:	9309      	str	r3, [sp, #36]	@ 0x24
 801391c:	462c      	mov	r4, r5
 801391e:	bfa8      	it	ge
 8013920:	2410      	movge	r4, #16
 8013922:	f7ec fdff 	bl	8000524 <__aeabi_ui2d>
 8013926:	2d09      	cmp	r5, #9
 8013928:	4682      	mov	sl, r0
 801392a:	468b      	mov	fp, r1
 801392c:	dc13      	bgt.n	8013956 <_strtod_l+0x3de>
 801392e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013930:	2b00      	cmp	r3, #0
 8013932:	f43f ae5a 	beq.w	80135ea <_strtod_l+0x72>
 8013936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013938:	dd78      	ble.n	8013a2c <_strtod_l+0x4b4>
 801393a:	2b16      	cmp	r3, #22
 801393c:	dc5f      	bgt.n	80139fe <_strtod_l+0x486>
 801393e:	4972      	ldr	r1, [pc, #456]	@ (8013b08 <_strtod_l+0x590>)
 8013940:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013944:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013948:	4652      	mov	r2, sl
 801394a:	465b      	mov	r3, fp
 801394c:	f7ec fe64 	bl	8000618 <__aeabi_dmul>
 8013950:	4682      	mov	sl, r0
 8013952:	468b      	mov	fp, r1
 8013954:	e649      	b.n	80135ea <_strtod_l+0x72>
 8013956:	4b6c      	ldr	r3, [pc, #432]	@ (8013b08 <_strtod_l+0x590>)
 8013958:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801395c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8013960:	f7ec fe5a 	bl	8000618 <__aeabi_dmul>
 8013964:	4682      	mov	sl, r0
 8013966:	4638      	mov	r0, r7
 8013968:	468b      	mov	fp, r1
 801396a:	f7ec fddb 	bl	8000524 <__aeabi_ui2d>
 801396e:	4602      	mov	r2, r0
 8013970:	460b      	mov	r3, r1
 8013972:	4650      	mov	r0, sl
 8013974:	4659      	mov	r1, fp
 8013976:	f7ec fc99 	bl	80002ac <__adddf3>
 801397a:	2d0f      	cmp	r5, #15
 801397c:	4682      	mov	sl, r0
 801397e:	468b      	mov	fp, r1
 8013980:	ddd5      	ble.n	801392e <_strtod_l+0x3b6>
 8013982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013984:	1b2c      	subs	r4, r5, r4
 8013986:	441c      	add	r4, r3
 8013988:	2c00      	cmp	r4, #0
 801398a:	f340 8093 	ble.w	8013ab4 <_strtod_l+0x53c>
 801398e:	f014 030f 	ands.w	r3, r4, #15
 8013992:	d00a      	beq.n	80139aa <_strtod_l+0x432>
 8013994:	495c      	ldr	r1, [pc, #368]	@ (8013b08 <_strtod_l+0x590>)
 8013996:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801399a:	4652      	mov	r2, sl
 801399c:	465b      	mov	r3, fp
 801399e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80139a2:	f7ec fe39 	bl	8000618 <__aeabi_dmul>
 80139a6:	4682      	mov	sl, r0
 80139a8:	468b      	mov	fp, r1
 80139aa:	f034 040f 	bics.w	r4, r4, #15
 80139ae:	d073      	beq.n	8013a98 <_strtod_l+0x520>
 80139b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80139b4:	dd49      	ble.n	8013a4a <_strtod_l+0x4d2>
 80139b6:	2400      	movs	r4, #0
 80139b8:	46a0      	mov	r8, r4
 80139ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 80139bc:	46a1      	mov	r9, r4
 80139be:	9a05      	ldr	r2, [sp, #20]
 80139c0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8013b10 <_strtod_l+0x598>
 80139c4:	2322      	movs	r3, #34	@ 0x22
 80139c6:	6013      	str	r3, [r2, #0]
 80139c8:	f04f 0a00 	mov.w	sl, #0
 80139cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	f43f ae0b 	beq.w	80135ea <_strtod_l+0x72>
 80139d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80139d6:	9805      	ldr	r0, [sp, #20]
 80139d8:	f002 fd74 	bl	80164c4 <_Bfree>
 80139dc:	9805      	ldr	r0, [sp, #20]
 80139de:	4649      	mov	r1, r9
 80139e0:	f002 fd70 	bl	80164c4 <_Bfree>
 80139e4:	9805      	ldr	r0, [sp, #20]
 80139e6:	4641      	mov	r1, r8
 80139e8:	f002 fd6c 	bl	80164c4 <_Bfree>
 80139ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80139ee:	9805      	ldr	r0, [sp, #20]
 80139f0:	f002 fd68 	bl	80164c4 <_Bfree>
 80139f4:	9805      	ldr	r0, [sp, #20]
 80139f6:	4621      	mov	r1, r4
 80139f8:	f002 fd64 	bl	80164c4 <_Bfree>
 80139fc:	e5f5      	b.n	80135ea <_strtod_l+0x72>
 80139fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013a00:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8013a04:	4293      	cmp	r3, r2
 8013a06:	dbbc      	blt.n	8013982 <_strtod_l+0x40a>
 8013a08:	4c3f      	ldr	r4, [pc, #252]	@ (8013b08 <_strtod_l+0x590>)
 8013a0a:	f1c5 050f 	rsb	r5, r5, #15
 8013a0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013a12:	4652      	mov	r2, sl
 8013a14:	465b      	mov	r3, fp
 8013a16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a1a:	f7ec fdfd 	bl	8000618 <__aeabi_dmul>
 8013a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a20:	1b5d      	subs	r5, r3, r5
 8013a22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013a26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013a2a:	e78f      	b.n	801394c <_strtod_l+0x3d4>
 8013a2c:	3316      	adds	r3, #22
 8013a2e:	dba8      	blt.n	8013982 <_strtod_l+0x40a>
 8013a30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013a32:	eba3 0808 	sub.w	r8, r3, r8
 8013a36:	4b34      	ldr	r3, [pc, #208]	@ (8013b08 <_strtod_l+0x590>)
 8013a38:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8013a3c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8013a40:	4650      	mov	r0, sl
 8013a42:	4659      	mov	r1, fp
 8013a44:	f7ec ff12 	bl	800086c <__aeabi_ddiv>
 8013a48:	e782      	b.n	8013950 <_strtod_l+0x3d8>
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	4f2f      	ldr	r7, [pc, #188]	@ (8013b0c <_strtod_l+0x594>)
 8013a4e:	1124      	asrs	r4, r4, #4
 8013a50:	4650      	mov	r0, sl
 8013a52:	4659      	mov	r1, fp
 8013a54:	461e      	mov	r6, r3
 8013a56:	2c01      	cmp	r4, #1
 8013a58:	dc21      	bgt.n	8013a9e <_strtod_l+0x526>
 8013a5a:	b10b      	cbz	r3, 8013a60 <_strtod_l+0x4e8>
 8013a5c:	4682      	mov	sl, r0
 8013a5e:	468b      	mov	fp, r1
 8013a60:	492a      	ldr	r1, [pc, #168]	@ (8013b0c <_strtod_l+0x594>)
 8013a62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013a66:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8013a6a:	4652      	mov	r2, sl
 8013a6c:	465b      	mov	r3, fp
 8013a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a72:	f7ec fdd1 	bl	8000618 <__aeabi_dmul>
 8013a76:	4b26      	ldr	r3, [pc, #152]	@ (8013b10 <_strtod_l+0x598>)
 8013a78:	460a      	mov	r2, r1
 8013a7a:	400b      	ands	r3, r1
 8013a7c:	4925      	ldr	r1, [pc, #148]	@ (8013b14 <_strtod_l+0x59c>)
 8013a7e:	428b      	cmp	r3, r1
 8013a80:	4682      	mov	sl, r0
 8013a82:	d898      	bhi.n	80139b6 <_strtod_l+0x43e>
 8013a84:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013a88:	428b      	cmp	r3, r1
 8013a8a:	bf86      	itte	hi
 8013a8c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8013b18 <_strtod_l+0x5a0>
 8013a90:	f04f 3aff 	movhi.w	sl, #4294967295
 8013a94:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013a98:	2300      	movs	r3, #0
 8013a9a:	9308      	str	r3, [sp, #32]
 8013a9c:	e076      	b.n	8013b8c <_strtod_l+0x614>
 8013a9e:	07e2      	lsls	r2, r4, #31
 8013aa0:	d504      	bpl.n	8013aac <_strtod_l+0x534>
 8013aa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013aa6:	f7ec fdb7 	bl	8000618 <__aeabi_dmul>
 8013aaa:	2301      	movs	r3, #1
 8013aac:	3601      	adds	r6, #1
 8013aae:	1064      	asrs	r4, r4, #1
 8013ab0:	3708      	adds	r7, #8
 8013ab2:	e7d0      	b.n	8013a56 <_strtod_l+0x4de>
 8013ab4:	d0f0      	beq.n	8013a98 <_strtod_l+0x520>
 8013ab6:	4264      	negs	r4, r4
 8013ab8:	f014 020f 	ands.w	r2, r4, #15
 8013abc:	d00a      	beq.n	8013ad4 <_strtod_l+0x55c>
 8013abe:	4b12      	ldr	r3, [pc, #72]	@ (8013b08 <_strtod_l+0x590>)
 8013ac0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013ac4:	4650      	mov	r0, sl
 8013ac6:	4659      	mov	r1, fp
 8013ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013acc:	f7ec fece 	bl	800086c <__aeabi_ddiv>
 8013ad0:	4682      	mov	sl, r0
 8013ad2:	468b      	mov	fp, r1
 8013ad4:	1124      	asrs	r4, r4, #4
 8013ad6:	d0df      	beq.n	8013a98 <_strtod_l+0x520>
 8013ad8:	2c1f      	cmp	r4, #31
 8013ada:	dd1f      	ble.n	8013b1c <_strtod_l+0x5a4>
 8013adc:	2400      	movs	r4, #0
 8013ade:	46a0      	mov	r8, r4
 8013ae0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013ae2:	46a1      	mov	r9, r4
 8013ae4:	9a05      	ldr	r2, [sp, #20]
 8013ae6:	2322      	movs	r3, #34	@ 0x22
 8013ae8:	f04f 0a00 	mov.w	sl, #0
 8013aec:	f04f 0b00 	mov.w	fp, #0
 8013af0:	6013      	str	r3, [r2, #0]
 8013af2:	e76b      	b.n	80139cc <_strtod_l+0x454>
 8013af4:	08019b77 	.word	0x08019b77
 8013af8:	08019d94 	.word	0x08019d94
 8013afc:	08019b6f 	.word	0x08019b6f
 8013b00:	08019c56 	.word	0x08019c56
 8013b04:	08019c52 	.word	0x08019c52
 8013b08:	08019f20 	.word	0x08019f20
 8013b0c:	08019ef8 	.word	0x08019ef8
 8013b10:	7ff00000 	.word	0x7ff00000
 8013b14:	7ca00000 	.word	0x7ca00000
 8013b18:	7fefffff 	.word	0x7fefffff
 8013b1c:	f014 0310 	ands.w	r3, r4, #16
 8013b20:	bf18      	it	ne
 8013b22:	236a      	movne	r3, #106	@ 0x6a
 8013b24:	4ea9      	ldr	r6, [pc, #676]	@ (8013dcc <_strtod_l+0x854>)
 8013b26:	9308      	str	r3, [sp, #32]
 8013b28:	4650      	mov	r0, sl
 8013b2a:	4659      	mov	r1, fp
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	07e7      	lsls	r7, r4, #31
 8013b30:	d504      	bpl.n	8013b3c <_strtod_l+0x5c4>
 8013b32:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013b36:	f7ec fd6f 	bl	8000618 <__aeabi_dmul>
 8013b3a:	2301      	movs	r3, #1
 8013b3c:	1064      	asrs	r4, r4, #1
 8013b3e:	f106 0608 	add.w	r6, r6, #8
 8013b42:	d1f4      	bne.n	8013b2e <_strtod_l+0x5b6>
 8013b44:	b10b      	cbz	r3, 8013b4a <_strtod_l+0x5d2>
 8013b46:	4682      	mov	sl, r0
 8013b48:	468b      	mov	fp, r1
 8013b4a:	9b08      	ldr	r3, [sp, #32]
 8013b4c:	b1b3      	cbz	r3, 8013b7c <_strtod_l+0x604>
 8013b4e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013b52:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	4659      	mov	r1, fp
 8013b5a:	dd0f      	ble.n	8013b7c <_strtod_l+0x604>
 8013b5c:	2b1f      	cmp	r3, #31
 8013b5e:	dd56      	ble.n	8013c0e <_strtod_l+0x696>
 8013b60:	2b34      	cmp	r3, #52	@ 0x34
 8013b62:	bfde      	ittt	le
 8013b64:	f04f 33ff 	movle.w	r3, #4294967295
 8013b68:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8013b6c:	4093      	lslle	r3, r2
 8013b6e:	f04f 0a00 	mov.w	sl, #0
 8013b72:	bfcc      	ite	gt
 8013b74:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013b78:	ea03 0b01 	andle.w	fp, r3, r1
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	2300      	movs	r3, #0
 8013b80:	4650      	mov	r0, sl
 8013b82:	4659      	mov	r1, fp
 8013b84:	f7ec ffb0 	bl	8000ae8 <__aeabi_dcmpeq>
 8013b88:	2800      	cmp	r0, #0
 8013b8a:	d1a7      	bne.n	8013adc <_strtod_l+0x564>
 8013b8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013b8e:	9300      	str	r3, [sp, #0]
 8013b90:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013b92:	9805      	ldr	r0, [sp, #20]
 8013b94:	462b      	mov	r3, r5
 8013b96:	464a      	mov	r2, r9
 8013b98:	f002 fcfc 	bl	8016594 <__s2b>
 8013b9c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013b9e:	2800      	cmp	r0, #0
 8013ba0:	f43f af09 	beq.w	80139b6 <_strtod_l+0x43e>
 8013ba4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013ba6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013ba8:	2a00      	cmp	r2, #0
 8013baa:	eba3 0308 	sub.w	r3, r3, r8
 8013bae:	bfa8      	it	ge
 8013bb0:	2300      	movge	r3, #0
 8013bb2:	9312      	str	r3, [sp, #72]	@ 0x48
 8013bb4:	2400      	movs	r4, #0
 8013bb6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013bba:	9316      	str	r3, [sp, #88]	@ 0x58
 8013bbc:	46a0      	mov	r8, r4
 8013bbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013bc0:	9805      	ldr	r0, [sp, #20]
 8013bc2:	6859      	ldr	r1, [r3, #4]
 8013bc4:	f002 fc3e 	bl	8016444 <_Balloc>
 8013bc8:	4681      	mov	r9, r0
 8013bca:	2800      	cmp	r0, #0
 8013bcc:	f43f aef7 	beq.w	80139be <_strtod_l+0x446>
 8013bd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013bd2:	691a      	ldr	r2, [r3, #16]
 8013bd4:	3202      	adds	r2, #2
 8013bd6:	f103 010c 	add.w	r1, r3, #12
 8013bda:	0092      	lsls	r2, r2, #2
 8013bdc:	300c      	adds	r0, #12
 8013bde:	f001 fa0a 	bl	8014ff6 <memcpy>
 8013be2:	ec4b ab10 	vmov	d0, sl, fp
 8013be6:	9805      	ldr	r0, [sp, #20]
 8013be8:	aa1c      	add	r2, sp, #112	@ 0x70
 8013bea:	a91b      	add	r1, sp, #108	@ 0x6c
 8013bec:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8013bf0:	f003 f804 	bl	8016bfc <__d2b>
 8013bf4:	901a      	str	r0, [sp, #104]	@ 0x68
 8013bf6:	2800      	cmp	r0, #0
 8013bf8:	f43f aee1 	beq.w	80139be <_strtod_l+0x446>
 8013bfc:	9805      	ldr	r0, [sp, #20]
 8013bfe:	2101      	movs	r1, #1
 8013c00:	f002 fd5e 	bl	80166c0 <__i2b>
 8013c04:	4680      	mov	r8, r0
 8013c06:	b948      	cbnz	r0, 8013c1c <_strtod_l+0x6a4>
 8013c08:	f04f 0800 	mov.w	r8, #0
 8013c0c:	e6d7      	b.n	80139be <_strtod_l+0x446>
 8013c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8013c12:	fa02 f303 	lsl.w	r3, r2, r3
 8013c16:	ea03 0a0a 	and.w	sl, r3, sl
 8013c1a:	e7af      	b.n	8013b7c <_strtod_l+0x604>
 8013c1c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8013c1e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013c20:	2d00      	cmp	r5, #0
 8013c22:	bfab      	itete	ge
 8013c24:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8013c26:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8013c28:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8013c2a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8013c2c:	bfac      	ite	ge
 8013c2e:	18ef      	addge	r7, r5, r3
 8013c30:	1b5e      	sublt	r6, r3, r5
 8013c32:	9b08      	ldr	r3, [sp, #32]
 8013c34:	1aed      	subs	r5, r5, r3
 8013c36:	4415      	add	r5, r2
 8013c38:	4b65      	ldr	r3, [pc, #404]	@ (8013dd0 <_strtod_l+0x858>)
 8013c3a:	3d01      	subs	r5, #1
 8013c3c:	429d      	cmp	r5, r3
 8013c3e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013c42:	da50      	bge.n	8013ce6 <_strtod_l+0x76e>
 8013c44:	1b5b      	subs	r3, r3, r5
 8013c46:	2b1f      	cmp	r3, #31
 8013c48:	eba2 0203 	sub.w	r2, r2, r3
 8013c4c:	f04f 0101 	mov.w	r1, #1
 8013c50:	dc3d      	bgt.n	8013cce <_strtod_l+0x756>
 8013c52:	fa01 f303 	lsl.w	r3, r1, r3
 8013c56:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013c58:	2300      	movs	r3, #0
 8013c5a:	9310      	str	r3, [sp, #64]	@ 0x40
 8013c5c:	18bd      	adds	r5, r7, r2
 8013c5e:	9b08      	ldr	r3, [sp, #32]
 8013c60:	42af      	cmp	r7, r5
 8013c62:	4416      	add	r6, r2
 8013c64:	441e      	add	r6, r3
 8013c66:	463b      	mov	r3, r7
 8013c68:	bfa8      	it	ge
 8013c6a:	462b      	movge	r3, r5
 8013c6c:	42b3      	cmp	r3, r6
 8013c6e:	bfa8      	it	ge
 8013c70:	4633      	movge	r3, r6
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	bfc2      	ittt	gt
 8013c76:	1aed      	subgt	r5, r5, r3
 8013c78:	1af6      	subgt	r6, r6, r3
 8013c7a:	1aff      	subgt	r7, r7, r3
 8013c7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	dd16      	ble.n	8013cb0 <_strtod_l+0x738>
 8013c82:	4641      	mov	r1, r8
 8013c84:	9805      	ldr	r0, [sp, #20]
 8013c86:	461a      	mov	r2, r3
 8013c88:	f002 fdd2 	bl	8016830 <__pow5mult>
 8013c8c:	4680      	mov	r8, r0
 8013c8e:	2800      	cmp	r0, #0
 8013c90:	d0ba      	beq.n	8013c08 <_strtod_l+0x690>
 8013c92:	4601      	mov	r1, r0
 8013c94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013c96:	9805      	ldr	r0, [sp, #20]
 8013c98:	f002 fd28 	bl	80166ec <__multiply>
 8013c9c:	900a      	str	r0, [sp, #40]	@ 0x28
 8013c9e:	2800      	cmp	r0, #0
 8013ca0:	f43f ae8d 	beq.w	80139be <_strtod_l+0x446>
 8013ca4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013ca6:	9805      	ldr	r0, [sp, #20]
 8013ca8:	f002 fc0c 	bl	80164c4 <_Bfree>
 8013cac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013cae:	931a      	str	r3, [sp, #104]	@ 0x68
 8013cb0:	2d00      	cmp	r5, #0
 8013cb2:	dc1d      	bgt.n	8013cf0 <_strtod_l+0x778>
 8013cb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	dd23      	ble.n	8013d02 <_strtod_l+0x78a>
 8013cba:	4649      	mov	r1, r9
 8013cbc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013cbe:	9805      	ldr	r0, [sp, #20]
 8013cc0:	f002 fdb6 	bl	8016830 <__pow5mult>
 8013cc4:	4681      	mov	r9, r0
 8013cc6:	b9e0      	cbnz	r0, 8013d02 <_strtod_l+0x78a>
 8013cc8:	f04f 0900 	mov.w	r9, #0
 8013ccc:	e677      	b.n	80139be <_strtod_l+0x446>
 8013cce:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8013cd2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8013cd6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8013cda:	35e2      	adds	r5, #226	@ 0xe2
 8013cdc:	fa01 f305 	lsl.w	r3, r1, r5
 8013ce0:	9310      	str	r3, [sp, #64]	@ 0x40
 8013ce2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013ce4:	e7ba      	b.n	8013c5c <_strtod_l+0x6e4>
 8013ce6:	2300      	movs	r3, #0
 8013ce8:	9310      	str	r3, [sp, #64]	@ 0x40
 8013cea:	2301      	movs	r3, #1
 8013cec:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013cee:	e7b5      	b.n	8013c5c <_strtod_l+0x6e4>
 8013cf0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013cf2:	9805      	ldr	r0, [sp, #20]
 8013cf4:	462a      	mov	r2, r5
 8013cf6:	f002 fdf5 	bl	80168e4 <__lshift>
 8013cfa:	901a      	str	r0, [sp, #104]	@ 0x68
 8013cfc:	2800      	cmp	r0, #0
 8013cfe:	d1d9      	bne.n	8013cb4 <_strtod_l+0x73c>
 8013d00:	e65d      	b.n	80139be <_strtod_l+0x446>
 8013d02:	2e00      	cmp	r6, #0
 8013d04:	dd07      	ble.n	8013d16 <_strtod_l+0x79e>
 8013d06:	4649      	mov	r1, r9
 8013d08:	9805      	ldr	r0, [sp, #20]
 8013d0a:	4632      	mov	r2, r6
 8013d0c:	f002 fdea 	bl	80168e4 <__lshift>
 8013d10:	4681      	mov	r9, r0
 8013d12:	2800      	cmp	r0, #0
 8013d14:	d0d8      	beq.n	8013cc8 <_strtod_l+0x750>
 8013d16:	2f00      	cmp	r7, #0
 8013d18:	dd08      	ble.n	8013d2c <_strtod_l+0x7b4>
 8013d1a:	4641      	mov	r1, r8
 8013d1c:	9805      	ldr	r0, [sp, #20]
 8013d1e:	463a      	mov	r2, r7
 8013d20:	f002 fde0 	bl	80168e4 <__lshift>
 8013d24:	4680      	mov	r8, r0
 8013d26:	2800      	cmp	r0, #0
 8013d28:	f43f ae49 	beq.w	80139be <_strtod_l+0x446>
 8013d2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013d2e:	9805      	ldr	r0, [sp, #20]
 8013d30:	464a      	mov	r2, r9
 8013d32:	f002 fe5f 	bl	80169f4 <__mdiff>
 8013d36:	4604      	mov	r4, r0
 8013d38:	2800      	cmp	r0, #0
 8013d3a:	f43f ae40 	beq.w	80139be <_strtod_l+0x446>
 8013d3e:	68c3      	ldr	r3, [r0, #12]
 8013d40:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013d42:	2300      	movs	r3, #0
 8013d44:	60c3      	str	r3, [r0, #12]
 8013d46:	4641      	mov	r1, r8
 8013d48:	f002 fe38 	bl	80169bc <__mcmp>
 8013d4c:	2800      	cmp	r0, #0
 8013d4e:	da45      	bge.n	8013ddc <_strtod_l+0x864>
 8013d50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013d52:	ea53 030a 	orrs.w	r3, r3, sl
 8013d56:	d16b      	bne.n	8013e30 <_strtod_l+0x8b8>
 8013d58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d167      	bne.n	8013e30 <_strtod_l+0x8b8>
 8013d60:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013d64:	0d1b      	lsrs	r3, r3, #20
 8013d66:	051b      	lsls	r3, r3, #20
 8013d68:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013d6c:	d960      	bls.n	8013e30 <_strtod_l+0x8b8>
 8013d6e:	6963      	ldr	r3, [r4, #20]
 8013d70:	b913      	cbnz	r3, 8013d78 <_strtod_l+0x800>
 8013d72:	6923      	ldr	r3, [r4, #16]
 8013d74:	2b01      	cmp	r3, #1
 8013d76:	dd5b      	ble.n	8013e30 <_strtod_l+0x8b8>
 8013d78:	4621      	mov	r1, r4
 8013d7a:	2201      	movs	r2, #1
 8013d7c:	9805      	ldr	r0, [sp, #20]
 8013d7e:	f002 fdb1 	bl	80168e4 <__lshift>
 8013d82:	4641      	mov	r1, r8
 8013d84:	4604      	mov	r4, r0
 8013d86:	f002 fe19 	bl	80169bc <__mcmp>
 8013d8a:	2800      	cmp	r0, #0
 8013d8c:	dd50      	ble.n	8013e30 <_strtod_l+0x8b8>
 8013d8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013d92:	9a08      	ldr	r2, [sp, #32]
 8013d94:	0d1b      	lsrs	r3, r3, #20
 8013d96:	051b      	lsls	r3, r3, #20
 8013d98:	2a00      	cmp	r2, #0
 8013d9a:	d06a      	beq.n	8013e72 <_strtod_l+0x8fa>
 8013d9c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013da0:	d867      	bhi.n	8013e72 <_strtod_l+0x8fa>
 8013da2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8013da6:	f67f ae9d 	bls.w	8013ae4 <_strtod_l+0x56c>
 8013daa:	4b0a      	ldr	r3, [pc, #40]	@ (8013dd4 <_strtod_l+0x85c>)
 8013dac:	4650      	mov	r0, sl
 8013dae:	4659      	mov	r1, fp
 8013db0:	2200      	movs	r2, #0
 8013db2:	f7ec fc31 	bl	8000618 <__aeabi_dmul>
 8013db6:	4b08      	ldr	r3, [pc, #32]	@ (8013dd8 <_strtod_l+0x860>)
 8013db8:	400b      	ands	r3, r1
 8013dba:	4682      	mov	sl, r0
 8013dbc:	468b      	mov	fp, r1
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	f47f ae08 	bne.w	80139d4 <_strtod_l+0x45c>
 8013dc4:	9a05      	ldr	r2, [sp, #20]
 8013dc6:	2322      	movs	r3, #34	@ 0x22
 8013dc8:	6013      	str	r3, [r2, #0]
 8013dca:	e603      	b.n	80139d4 <_strtod_l+0x45c>
 8013dcc:	08019dc0 	.word	0x08019dc0
 8013dd0:	fffffc02 	.word	0xfffffc02
 8013dd4:	39500000 	.word	0x39500000
 8013dd8:	7ff00000 	.word	0x7ff00000
 8013ddc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8013de0:	d165      	bne.n	8013eae <_strtod_l+0x936>
 8013de2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013de4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013de8:	b35a      	cbz	r2, 8013e42 <_strtod_l+0x8ca>
 8013dea:	4a9f      	ldr	r2, [pc, #636]	@ (8014068 <_strtod_l+0xaf0>)
 8013dec:	4293      	cmp	r3, r2
 8013dee:	d12b      	bne.n	8013e48 <_strtod_l+0x8d0>
 8013df0:	9b08      	ldr	r3, [sp, #32]
 8013df2:	4651      	mov	r1, sl
 8013df4:	b303      	cbz	r3, 8013e38 <_strtod_l+0x8c0>
 8013df6:	4b9d      	ldr	r3, [pc, #628]	@ (801406c <_strtod_l+0xaf4>)
 8013df8:	465a      	mov	r2, fp
 8013dfa:	4013      	ands	r3, r2
 8013dfc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013e00:	f04f 32ff 	mov.w	r2, #4294967295
 8013e04:	d81b      	bhi.n	8013e3e <_strtod_l+0x8c6>
 8013e06:	0d1b      	lsrs	r3, r3, #20
 8013e08:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8013e10:	4299      	cmp	r1, r3
 8013e12:	d119      	bne.n	8013e48 <_strtod_l+0x8d0>
 8013e14:	4b96      	ldr	r3, [pc, #600]	@ (8014070 <_strtod_l+0xaf8>)
 8013e16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013e18:	429a      	cmp	r2, r3
 8013e1a:	d102      	bne.n	8013e22 <_strtod_l+0x8aa>
 8013e1c:	3101      	adds	r1, #1
 8013e1e:	f43f adce 	beq.w	80139be <_strtod_l+0x446>
 8013e22:	4b92      	ldr	r3, [pc, #584]	@ (801406c <_strtod_l+0xaf4>)
 8013e24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013e26:	401a      	ands	r2, r3
 8013e28:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8013e2c:	f04f 0a00 	mov.w	sl, #0
 8013e30:	9b08      	ldr	r3, [sp, #32]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d1b9      	bne.n	8013daa <_strtod_l+0x832>
 8013e36:	e5cd      	b.n	80139d4 <_strtod_l+0x45c>
 8013e38:	f04f 33ff 	mov.w	r3, #4294967295
 8013e3c:	e7e8      	b.n	8013e10 <_strtod_l+0x898>
 8013e3e:	4613      	mov	r3, r2
 8013e40:	e7e6      	b.n	8013e10 <_strtod_l+0x898>
 8013e42:	ea53 030a 	orrs.w	r3, r3, sl
 8013e46:	d0a2      	beq.n	8013d8e <_strtod_l+0x816>
 8013e48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013e4a:	b1db      	cbz	r3, 8013e84 <_strtod_l+0x90c>
 8013e4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013e4e:	4213      	tst	r3, r2
 8013e50:	d0ee      	beq.n	8013e30 <_strtod_l+0x8b8>
 8013e52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e54:	9a08      	ldr	r2, [sp, #32]
 8013e56:	4650      	mov	r0, sl
 8013e58:	4659      	mov	r1, fp
 8013e5a:	b1bb      	cbz	r3, 8013e8c <_strtod_l+0x914>
 8013e5c:	f7ff fb6e 	bl	801353c <sulp>
 8013e60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013e64:	ec53 2b10 	vmov	r2, r3, d0
 8013e68:	f7ec fa20 	bl	80002ac <__adddf3>
 8013e6c:	4682      	mov	sl, r0
 8013e6e:	468b      	mov	fp, r1
 8013e70:	e7de      	b.n	8013e30 <_strtod_l+0x8b8>
 8013e72:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013e76:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013e7a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013e7e:	f04f 3aff 	mov.w	sl, #4294967295
 8013e82:	e7d5      	b.n	8013e30 <_strtod_l+0x8b8>
 8013e84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013e86:	ea13 0f0a 	tst.w	r3, sl
 8013e8a:	e7e1      	b.n	8013e50 <_strtod_l+0x8d8>
 8013e8c:	f7ff fb56 	bl	801353c <sulp>
 8013e90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013e94:	ec53 2b10 	vmov	r2, r3, d0
 8013e98:	f7ec fa06 	bl	80002a8 <__aeabi_dsub>
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	4682      	mov	sl, r0
 8013ea2:	468b      	mov	fp, r1
 8013ea4:	f7ec fe20 	bl	8000ae8 <__aeabi_dcmpeq>
 8013ea8:	2800      	cmp	r0, #0
 8013eaa:	d0c1      	beq.n	8013e30 <_strtod_l+0x8b8>
 8013eac:	e61a      	b.n	8013ae4 <_strtod_l+0x56c>
 8013eae:	4641      	mov	r1, r8
 8013eb0:	4620      	mov	r0, r4
 8013eb2:	f002 fefb 	bl	8016cac <__ratio>
 8013eb6:	ec57 6b10 	vmov	r6, r7, d0
 8013eba:	2200      	movs	r2, #0
 8013ebc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013ec0:	4630      	mov	r0, r6
 8013ec2:	4639      	mov	r1, r7
 8013ec4:	f7ec fe24 	bl	8000b10 <__aeabi_dcmple>
 8013ec8:	2800      	cmp	r0, #0
 8013eca:	d06f      	beq.n	8013fac <_strtod_l+0xa34>
 8013ecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d17a      	bne.n	8013fc8 <_strtod_l+0xa50>
 8013ed2:	f1ba 0f00 	cmp.w	sl, #0
 8013ed6:	d158      	bne.n	8013f8a <_strtod_l+0xa12>
 8013ed8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013eda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d15a      	bne.n	8013f98 <_strtod_l+0xa20>
 8013ee2:	4b64      	ldr	r3, [pc, #400]	@ (8014074 <_strtod_l+0xafc>)
 8013ee4:	2200      	movs	r2, #0
 8013ee6:	4630      	mov	r0, r6
 8013ee8:	4639      	mov	r1, r7
 8013eea:	f7ec fe07 	bl	8000afc <__aeabi_dcmplt>
 8013eee:	2800      	cmp	r0, #0
 8013ef0:	d159      	bne.n	8013fa6 <_strtod_l+0xa2e>
 8013ef2:	4630      	mov	r0, r6
 8013ef4:	4639      	mov	r1, r7
 8013ef6:	4b60      	ldr	r3, [pc, #384]	@ (8014078 <_strtod_l+0xb00>)
 8013ef8:	2200      	movs	r2, #0
 8013efa:	f7ec fb8d 	bl	8000618 <__aeabi_dmul>
 8013efe:	4606      	mov	r6, r0
 8013f00:	460f      	mov	r7, r1
 8013f02:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8013f06:	9606      	str	r6, [sp, #24]
 8013f08:	9307      	str	r3, [sp, #28]
 8013f0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013f0e:	4d57      	ldr	r5, [pc, #348]	@ (801406c <_strtod_l+0xaf4>)
 8013f10:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013f14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f16:	401d      	ands	r5, r3
 8013f18:	4b58      	ldr	r3, [pc, #352]	@ (801407c <_strtod_l+0xb04>)
 8013f1a:	429d      	cmp	r5, r3
 8013f1c:	f040 80b2 	bne.w	8014084 <_strtod_l+0xb0c>
 8013f20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f22:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8013f26:	ec4b ab10 	vmov	d0, sl, fp
 8013f2a:	f002 fdf7 	bl	8016b1c <__ulp>
 8013f2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013f32:	ec51 0b10 	vmov	r0, r1, d0
 8013f36:	f7ec fb6f 	bl	8000618 <__aeabi_dmul>
 8013f3a:	4652      	mov	r2, sl
 8013f3c:	465b      	mov	r3, fp
 8013f3e:	f7ec f9b5 	bl	80002ac <__adddf3>
 8013f42:	460b      	mov	r3, r1
 8013f44:	4949      	ldr	r1, [pc, #292]	@ (801406c <_strtod_l+0xaf4>)
 8013f46:	4a4e      	ldr	r2, [pc, #312]	@ (8014080 <_strtod_l+0xb08>)
 8013f48:	4019      	ands	r1, r3
 8013f4a:	4291      	cmp	r1, r2
 8013f4c:	4682      	mov	sl, r0
 8013f4e:	d942      	bls.n	8013fd6 <_strtod_l+0xa5e>
 8013f50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013f52:	4b47      	ldr	r3, [pc, #284]	@ (8014070 <_strtod_l+0xaf8>)
 8013f54:	429a      	cmp	r2, r3
 8013f56:	d103      	bne.n	8013f60 <_strtod_l+0x9e8>
 8013f58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013f5a:	3301      	adds	r3, #1
 8013f5c:	f43f ad2f 	beq.w	80139be <_strtod_l+0x446>
 8013f60:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8014070 <_strtod_l+0xaf8>
 8013f64:	f04f 3aff 	mov.w	sl, #4294967295
 8013f68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013f6a:	9805      	ldr	r0, [sp, #20]
 8013f6c:	f002 faaa 	bl	80164c4 <_Bfree>
 8013f70:	9805      	ldr	r0, [sp, #20]
 8013f72:	4649      	mov	r1, r9
 8013f74:	f002 faa6 	bl	80164c4 <_Bfree>
 8013f78:	9805      	ldr	r0, [sp, #20]
 8013f7a:	4641      	mov	r1, r8
 8013f7c:	f002 faa2 	bl	80164c4 <_Bfree>
 8013f80:	9805      	ldr	r0, [sp, #20]
 8013f82:	4621      	mov	r1, r4
 8013f84:	f002 fa9e 	bl	80164c4 <_Bfree>
 8013f88:	e619      	b.n	8013bbe <_strtod_l+0x646>
 8013f8a:	f1ba 0f01 	cmp.w	sl, #1
 8013f8e:	d103      	bne.n	8013f98 <_strtod_l+0xa20>
 8013f90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	f43f ada6 	beq.w	8013ae4 <_strtod_l+0x56c>
 8013f98:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8014048 <_strtod_l+0xad0>
 8013f9c:	4f35      	ldr	r7, [pc, #212]	@ (8014074 <_strtod_l+0xafc>)
 8013f9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013fa2:	2600      	movs	r6, #0
 8013fa4:	e7b1      	b.n	8013f0a <_strtod_l+0x992>
 8013fa6:	4f34      	ldr	r7, [pc, #208]	@ (8014078 <_strtod_l+0xb00>)
 8013fa8:	2600      	movs	r6, #0
 8013faa:	e7aa      	b.n	8013f02 <_strtod_l+0x98a>
 8013fac:	4b32      	ldr	r3, [pc, #200]	@ (8014078 <_strtod_l+0xb00>)
 8013fae:	4630      	mov	r0, r6
 8013fb0:	4639      	mov	r1, r7
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	f7ec fb30 	bl	8000618 <__aeabi_dmul>
 8013fb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013fba:	4606      	mov	r6, r0
 8013fbc:	460f      	mov	r7, r1
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d09f      	beq.n	8013f02 <_strtod_l+0x98a>
 8013fc2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8013fc6:	e7a0      	b.n	8013f0a <_strtod_l+0x992>
 8013fc8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8014050 <_strtod_l+0xad8>
 8013fcc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013fd0:	ec57 6b17 	vmov	r6, r7, d7
 8013fd4:	e799      	b.n	8013f0a <_strtod_l+0x992>
 8013fd6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8013fda:	9b08      	ldr	r3, [sp, #32]
 8013fdc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d1c1      	bne.n	8013f68 <_strtod_l+0x9f0>
 8013fe4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013fe8:	0d1b      	lsrs	r3, r3, #20
 8013fea:	051b      	lsls	r3, r3, #20
 8013fec:	429d      	cmp	r5, r3
 8013fee:	d1bb      	bne.n	8013f68 <_strtod_l+0x9f0>
 8013ff0:	4630      	mov	r0, r6
 8013ff2:	4639      	mov	r1, r7
 8013ff4:	f7ec fe20 	bl	8000c38 <__aeabi_d2lz>
 8013ff8:	f7ec fae0 	bl	80005bc <__aeabi_l2d>
 8013ffc:	4602      	mov	r2, r0
 8013ffe:	460b      	mov	r3, r1
 8014000:	4630      	mov	r0, r6
 8014002:	4639      	mov	r1, r7
 8014004:	f7ec f950 	bl	80002a8 <__aeabi_dsub>
 8014008:	460b      	mov	r3, r1
 801400a:	4602      	mov	r2, r0
 801400c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8014010:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8014014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014016:	ea46 060a 	orr.w	r6, r6, sl
 801401a:	431e      	orrs	r6, r3
 801401c:	d06f      	beq.n	80140fe <_strtod_l+0xb86>
 801401e:	a30e      	add	r3, pc, #56	@ (adr r3, 8014058 <_strtod_l+0xae0>)
 8014020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014024:	f7ec fd6a 	bl	8000afc <__aeabi_dcmplt>
 8014028:	2800      	cmp	r0, #0
 801402a:	f47f acd3 	bne.w	80139d4 <_strtod_l+0x45c>
 801402e:	a30c      	add	r3, pc, #48	@ (adr r3, 8014060 <_strtod_l+0xae8>)
 8014030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014034:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014038:	f7ec fd7e 	bl	8000b38 <__aeabi_dcmpgt>
 801403c:	2800      	cmp	r0, #0
 801403e:	d093      	beq.n	8013f68 <_strtod_l+0x9f0>
 8014040:	e4c8      	b.n	80139d4 <_strtod_l+0x45c>
 8014042:	bf00      	nop
 8014044:	f3af 8000 	nop.w
 8014048:	00000000 	.word	0x00000000
 801404c:	bff00000 	.word	0xbff00000
 8014050:	00000000 	.word	0x00000000
 8014054:	3ff00000 	.word	0x3ff00000
 8014058:	94a03595 	.word	0x94a03595
 801405c:	3fdfffff 	.word	0x3fdfffff
 8014060:	35afe535 	.word	0x35afe535
 8014064:	3fe00000 	.word	0x3fe00000
 8014068:	000fffff 	.word	0x000fffff
 801406c:	7ff00000 	.word	0x7ff00000
 8014070:	7fefffff 	.word	0x7fefffff
 8014074:	3ff00000 	.word	0x3ff00000
 8014078:	3fe00000 	.word	0x3fe00000
 801407c:	7fe00000 	.word	0x7fe00000
 8014080:	7c9fffff 	.word	0x7c9fffff
 8014084:	9b08      	ldr	r3, [sp, #32]
 8014086:	b323      	cbz	r3, 80140d2 <_strtod_l+0xb5a>
 8014088:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801408c:	d821      	bhi.n	80140d2 <_strtod_l+0xb5a>
 801408e:	a328      	add	r3, pc, #160	@ (adr r3, 8014130 <_strtod_l+0xbb8>)
 8014090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014094:	4630      	mov	r0, r6
 8014096:	4639      	mov	r1, r7
 8014098:	f7ec fd3a 	bl	8000b10 <__aeabi_dcmple>
 801409c:	b1a0      	cbz	r0, 80140c8 <_strtod_l+0xb50>
 801409e:	4639      	mov	r1, r7
 80140a0:	4630      	mov	r0, r6
 80140a2:	f7ec fd91 	bl	8000bc8 <__aeabi_d2uiz>
 80140a6:	2801      	cmp	r0, #1
 80140a8:	bf38      	it	cc
 80140aa:	2001      	movcc	r0, #1
 80140ac:	f7ec fa3a 	bl	8000524 <__aeabi_ui2d>
 80140b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80140b2:	4606      	mov	r6, r0
 80140b4:	460f      	mov	r7, r1
 80140b6:	b9fb      	cbnz	r3, 80140f8 <_strtod_l+0xb80>
 80140b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80140bc:	9014      	str	r0, [sp, #80]	@ 0x50
 80140be:	9315      	str	r3, [sp, #84]	@ 0x54
 80140c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80140c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80140c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80140ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80140ce:	1b5b      	subs	r3, r3, r5
 80140d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80140d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80140d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80140da:	f002 fd1f 	bl	8016b1c <__ulp>
 80140de:	4650      	mov	r0, sl
 80140e0:	ec53 2b10 	vmov	r2, r3, d0
 80140e4:	4659      	mov	r1, fp
 80140e6:	f7ec fa97 	bl	8000618 <__aeabi_dmul>
 80140ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80140ee:	f7ec f8dd 	bl	80002ac <__adddf3>
 80140f2:	4682      	mov	sl, r0
 80140f4:	468b      	mov	fp, r1
 80140f6:	e770      	b.n	8013fda <_strtod_l+0xa62>
 80140f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80140fc:	e7e0      	b.n	80140c0 <_strtod_l+0xb48>
 80140fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8014138 <_strtod_l+0xbc0>)
 8014100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014104:	f7ec fcfa 	bl	8000afc <__aeabi_dcmplt>
 8014108:	e798      	b.n	801403c <_strtod_l+0xac4>
 801410a:	2300      	movs	r3, #0
 801410c:	930e      	str	r3, [sp, #56]	@ 0x38
 801410e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8014110:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014112:	6013      	str	r3, [r2, #0]
 8014114:	f7ff ba6d 	b.w	80135f2 <_strtod_l+0x7a>
 8014118:	2a65      	cmp	r2, #101	@ 0x65
 801411a:	f43f ab68 	beq.w	80137ee <_strtod_l+0x276>
 801411e:	2a45      	cmp	r2, #69	@ 0x45
 8014120:	f43f ab65 	beq.w	80137ee <_strtod_l+0x276>
 8014124:	2301      	movs	r3, #1
 8014126:	f7ff bba0 	b.w	801386a <_strtod_l+0x2f2>
 801412a:	bf00      	nop
 801412c:	f3af 8000 	nop.w
 8014130:	ffc00000 	.word	0xffc00000
 8014134:	41dfffff 	.word	0x41dfffff
 8014138:	94a03595 	.word	0x94a03595
 801413c:	3fcfffff 	.word	0x3fcfffff

08014140 <strtod>:
 8014140:	460a      	mov	r2, r1
 8014142:	4601      	mov	r1, r0
 8014144:	4802      	ldr	r0, [pc, #8]	@ (8014150 <strtod+0x10>)
 8014146:	4b03      	ldr	r3, [pc, #12]	@ (8014154 <strtod+0x14>)
 8014148:	6800      	ldr	r0, [r0, #0]
 801414a:	f7ff ba15 	b.w	8013578 <_strtod_l>
 801414e:	bf00      	nop
 8014150:	200003ac 	.word	0x200003ac
 8014154:	20000240 	.word	0x20000240

08014158 <_strtol_l.isra.0>:
 8014158:	2b24      	cmp	r3, #36	@ 0x24
 801415a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801415e:	4686      	mov	lr, r0
 8014160:	4690      	mov	r8, r2
 8014162:	d801      	bhi.n	8014168 <_strtol_l.isra.0+0x10>
 8014164:	2b01      	cmp	r3, #1
 8014166:	d106      	bne.n	8014176 <_strtol_l.isra.0+0x1e>
 8014168:	f000 ff10 	bl	8014f8c <__errno>
 801416c:	2316      	movs	r3, #22
 801416e:	6003      	str	r3, [r0, #0]
 8014170:	2000      	movs	r0, #0
 8014172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014176:	4834      	ldr	r0, [pc, #208]	@ (8014248 <_strtol_l.isra.0+0xf0>)
 8014178:	460d      	mov	r5, r1
 801417a:	462a      	mov	r2, r5
 801417c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014180:	5d06      	ldrb	r6, [r0, r4]
 8014182:	f016 0608 	ands.w	r6, r6, #8
 8014186:	d1f8      	bne.n	801417a <_strtol_l.isra.0+0x22>
 8014188:	2c2d      	cmp	r4, #45	@ 0x2d
 801418a:	d110      	bne.n	80141ae <_strtol_l.isra.0+0x56>
 801418c:	782c      	ldrb	r4, [r5, #0]
 801418e:	2601      	movs	r6, #1
 8014190:	1c95      	adds	r5, r2, #2
 8014192:	f033 0210 	bics.w	r2, r3, #16
 8014196:	d115      	bne.n	80141c4 <_strtol_l.isra.0+0x6c>
 8014198:	2c30      	cmp	r4, #48	@ 0x30
 801419a:	d10d      	bne.n	80141b8 <_strtol_l.isra.0+0x60>
 801419c:	782a      	ldrb	r2, [r5, #0]
 801419e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80141a2:	2a58      	cmp	r2, #88	@ 0x58
 80141a4:	d108      	bne.n	80141b8 <_strtol_l.isra.0+0x60>
 80141a6:	786c      	ldrb	r4, [r5, #1]
 80141a8:	3502      	adds	r5, #2
 80141aa:	2310      	movs	r3, #16
 80141ac:	e00a      	b.n	80141c4 <_strtol_l.isra.0+0x6c>
 80141ae:	2c2b      	cmp	r4, #43	@ 0x2b
 80141b0:	bf04      	itt	eq
 80141b2:	782c      	ldrbeq	r4, [r5, #0]
 80141b4:	1c95      	addeq	r5, r2, #2
 80141b6:	e7ec      	b.n	8014192 <_strtol_l.isra.0+0x3a>
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d1f6      	bne.n	80141aa <_strtol_l.isra.0+0x52>
 80141bc:	2c30      	cmp	r4, #48	@ 0x30
 80141be:	bf14      	ite	ne
 80141c0:	230a      	movne	r3, #10
 80141c2:	2308      	moveq	r3, #8
 80141c4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80141c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80141cc:	2200      	movs	r2, #0
 80141ce:	fbbc f9f3 	udiv	r9, ip, r3
 80141d2:	4610      	mov	r0, r2
 80141d4:	fb03 ca19 	mls	sl, r3, r9, ip
 80141d8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80141dc:	2f09      	cmp	r7, #9
 80141de:	d80f      	bhi.n	8014200 <_strtol_l.isra.0+0xa8>
 80141e0:	463c      	mov	r4, r7
 80141e2:	42a3      	cmp	r3, r4
 80141e4:	dd1b      	ble.n	801421e <_strtol_l.isra.0+0xc6>
 80141e6:	1c57      	adds	r7, r2, #1
 80141e8:	d007      	beq.n	80141fa <_strtol_l.isra.0+0xa2>
 80141ea:	4581      	cmp	r9, r0
 80141ec:	d314      	bcc.n	8014218 <_strtol_l.isra.0+0xc0>
 80141ee:	d101      	bne.n	80141f4 <_strtol_l.isra.0+0x9c>
 80141f0:	45a2      	cmp	sl, r4
 80141f2:	db11      	blt.n	8014218 <_strtol_l.isra.0+0xc0>
 80141f4:	fb00 4003 	mla	r0, r0, r3, r4
 80141f8:	2201      	movs	r2, #1
 80141fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80141fe:	e7eb      	b.n	80141d8 <_strtol_l.isra.0+0x80>
 8014200:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8014204:	2f19      	cmp	r7, #25
 8014206:	d801      	bhi.n	801420c <_strtol_l.isra.0+0xb4>
 8014208:	3c37      	subs	r4, #55	@ 0x37
 801420a:	e7ea      	b.n	80141e2 <_strtol_l.isra.0+0x8a>
 801420c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8014210:	2f19      	cmp	r7, #25
 8014212:	d804      	bhi.n	801421e <_strtol_l.isra.0+0xc6>
 8014214:	3c57      	subs	r4, #87	@ 0x57
 8014216:	e7e4      	b.n	80141e2 <_strtol_l.isra.0+0x8a>
 8014218:	f04f 32ff 	mov.w	r2, #4294967295
 801421c:	e7ed      	b.n	80141fa <_strtol_l.isra.0+0xa2>
 801421e:	1c53      	adds	r3, r2, #1
 8014220:	d108      	bne.n	8014234 <_strtol_l.isra.0+0xdc>
 8014222:	2322      	movs	r3, #34	@ 0x22
 8014224:	f8ce 3000 	str.w	r3, [lr]
 8014228:	4660      	mov	r0, ip
 801422a:	f1b8 0f00 	cmp.w	r8, #0
 801422e:	d0a0      	beq.n	8014172 <_strtol_l.isra.0+0x1a>
 8014230:	1e69      	subs	r1, r5, #1
 8014232:	e006      	b.n	8014242 <_strtol_l.isra.0+0xea>
 8014234:	b106      	cbz	r6, 8014238 <_strtol_l.isra.0+0xe0>
 8014236:	4240      	negs	r0, r0
 8014238:	f1b8 0f00 	cmp.w	r8, #0
 801423c:	d099      	beq.n	8014172 <_strtol_l.isra.0+0x1a>
 801423e:	2a00      	cmp	r2, #0
 8014240:	d1f6      	bne.n	8014230 <_strtol_l.isra.0+0xd8>
 8014242:	f8c8 1000 	str.w	r1, [r8]
 8014246:	e794      	b.n	8014172 <_strtol_l.isra.0+0x1a>
 8014248:	08019de9 	.word	0x08019de9

0801424c <strtol>:
 801424c:	4613      	mov	r3, r2
 801424e:	460a      	mov	r2, r1
 8014250:	4601      	mov	r1, r0
 8014252:	4802      	ldr	r0, [pc, #8]	@ (801425c <strtol+0x10>)
 8014254:	6800      	ldr	r0, [r0, #0]
 8014256:	f7ff bf7f 	b.w	8014158 <_strtol_l.isra.0>
 801425a:	bf00      	nop
 801425c:	200003ac 	.word	0x200003ac

08014260 <__cvt>:
 8014260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014264:	ec57 6b10 	vmov	r6, r7, d0
 8014268:	2f00      	cmp	r7, #0
 801426a:	460c      	mov	r4, r1
 801426c:	4619      	mov	r1, r3
 801426e:	463b      	mov	r3, r7
 8014270:	bfbb      	ittet	lt
 8014272:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8014276:	461f      	movlt	r7, r3
 8014278:	2300      	movge	r3, #0
 801427a:	232d      	movlt	r3, #45	@ 0x2d
 801427c:	700b      	strb	r3, [r1, #0]
 801427e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014280:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8014284:	4691      	mov	r9, r2
 8014286:	f023 0820 	bic.w	r8, r3, #32
 801428a:	bfbc      	itt	lt
 801428c:	4632      	movlt	r2, r6
 801428e:	4616      	movlt	r6, r2
 8014290:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8014294:	d005      	beq.n	80142a2 <__cvt+0x42>
 8014296:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801429a:	d100      	bne.n	801429e <__cvt+0x3e>
 801429c:	3401      	adds	r4, #1
 801429e:	2102      	movs	r1, #2
 80142a0:	e000      	b.n	80142a4 <__cvt+0x44>
 80142a2:	2103      	movs	r1, #3
 80142a4:	ab03      	add	r3, sp, #12
 80142a6:	9301      	str	r3, [sp, #4]
 80142a8:	ab02      	add	r3, sp, #8
 80142aa:	9300      	str	r3, [sp, #0]
 80142ac:	ec47 6b10 	vmov	d0, r6, r7
 80142b0:	4653      	mov	r3, sl
 80142b2:	4622      	mov	r2, r4
 80142b4:	f000 ff60 	bl	8015178 <_dtoa_r>
 80142b8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80142bc:	4605      	mov	r5, r0
 80142be:	d119      	bne.n	80142f4 <__cvt+0x94>
 80142c0:	f019 0f01 	tst.w	r9, #1
 80142c4:	d00e      	beq.n	80142e4 <__cvt+0x84>
 80142c6:	eb00 0904 	add.w	r9, r0, r4
 80142ca:	2200      	movs	r2, #0
 80142cc:	2300      	movs	r3, #0
 80142ce:	4630      	mov	r0, r6
 80142d0:	4639      	mov	r1, r7
 80142d2:	f7ec fc09 	bl	8000ae8 <__aeabi_dcmpeq>
 80142d6:	b108      	cbz	r0, 80142dc <__cvt+0x7c>
 80142d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80142dc:	2230      	movs	r2, #48	@ 0x30
 80142de:	9b03      	ldr	r3, [sp, #12]
 80142e0:	454b      	cmp	r3, r9
 80142e2:	d31e      	bcc.n	8014322 <__cvt+0xc2>
 80142e4:	9b03      	ldr	r3, [sp, #12]
 80142e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80142e8:	1b5b      	subs	r3, r3, r5
 80142ea:	4628      	mov	r0, r5
 80142ec:	6013      	str	r3, [r2, #0]
 80142ee:	b004      	add	sp, #16
 80142f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80142f8:	eb00 0904 	add.w	r9, r0, r4
 80142fc:	d1e5      	bne.n	80142ca <__cvt+0x6a>
 80142fe:	7803      	ldrb	r3, [r0, #0]
 8014300:	2b30      	cmp	r3, #48	@ 0x30
 8014302:	d10a      	bne.n	801431a <__cvt+0xba>
 8014304:	2200      	movs	r2, #0
 8014306:	2300      	movs	r3, #0
 8014308:	4630      	mov	r0, r6
 801430a:	4639      	mov	r1, r7
 801430c:	f7ec fbec 	bl	8000ae8 <__aeabi_dcmpeq>
 8014310:	b918      	cbnz	r0, 801431a <__cvt+0xba>
 8014312:	f1c4 0401 	rsb	r4, r4, #1
 8014316:	f8ca 4000 	str.w	r4, [sl]
 801431a:	f8da 3000 	ldr.w	r3, [sl]
 801431e:	4499      	add	r9, r3
 8014320:	e7d3      	b.n	80142ca <__cvt+0x6a>
 8014322:	1c59      	adds	r1, r3, #1
 8014324:	9103      	str	r1, [sp, #12]
 8014326:	701a      	strb	r2, [r3, #0]
 8014328:	e7d9      	b.n	80142de <__cvt+0x7e>

0801432a <__exponent>:
 801432a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801432c:	2900      	cmp	r1, #0
 801432e:	bfba      	itte	lt
 8014330:	4249      	neglt	r1, r1
 8014332:	232d      	movlt	r3, #45	@ 0x2d
 8014334:	232b      	movge	r3, #43	@ 0x2b
 8014336:	2909      	cmp	r1, #9
 8014338:	7002      	strb	r2, [r0, #0]
 801433a:	7043      	strb	r3, [r0, #1]
 801433c:	dd29      	ble.n	8014392 <__exponent+0x68>
 801433e:	f10d 0307 	add.w	r3, sp, #7
 8014342:	461d      	mov	r5, r3
 8014344:	270a      	movs	r7, #10
 8014346:	461a      	mov	r2, r3
 8014348:	fbb1 f6f7 	udiv	r6, r1, r7
 801434c:	fb07 1416 	mls	r4, r7, r6, r1
 8014350:	3430      	adds	r4, #48	@ 0x30
 8014352:	f802 4c01 	strb.w	r4, [r2, #-1]
 8014356:	460c      	mov	r4, r1
 8014358:	2c63      	cmp	r4, #99	@ 0x63
 801435a:	f103 33ff 	add.w	r3, r3, #4294967295
 801435e:	4631      	mov	r1, r6
 8014360:	dcf1      	bgt.n	8014346 <__exponent+0x1c>
 8014362:	3130      	adds	r1, #48	@ 0x30
 8014364:	1e94      	subs	r4, r2, #2
 8014366:	f803 1c01 	strb.w	r1, [r3, #-1]
 801436a:	1c41      	adds	r1, r0, #1
 801436c:	4623      	mov	r3, r4
 801436e:	42ab      	cmp	r3, r5
 8014370:	d30a      	bcc.n	8014388 <__exponent+0x5e>
 8014372:	f10d 0309 	add.w	r3, sp, #9
 8014376:	1a9b      	subs	r3, r3, r2
 8014378:	42ac      	cmp	r4, r5
 801437a:	bf88      	it	hi
 801437c:	2300      	movhi	r3, #0
 801437e:	3302      	adds	r3, #2
 8014380:	4403      	add	r3, r0
 8014382:	1a18      	subs	r0, r3, r0
 8014384:	b003      	add	sp, #12
 8014386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014388:	f813 6b01 	ldrb.w	r6, [r3], #1
 801438c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8014390:	e7ed      	b.n	801436e <__exponent+0x44>
 8014392:	2330      	movs	r3, #48	@ 0x30
 8014394:	3130      	adds	r1, #48	@ 0x30
 8014396:	7083      	strb	r3, [r0, #2]
 8014398:	70c1      	strb	r1, [r0, #3]
 801439a:	1d03      	adds	r3, r0, #4
 801439c:	e7f1      	b.n	8014382 <__exponent+0x58>
	...

080143a0 <_printf_float>:
 80143a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143a4:	b08d      	sub	sp, #52	@ 0x34
 80143a6:	460c      	mov	r4, r1
 80143a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80143ac:	4616      	mov	r6, r2
 80143ae:	461f      	mov	r7, r3
 80143b0:	4605      	mov	r5, r0
 80143b2:	f000 fd33 	bl	8014e1c <_localeconv_r>
 80143b6:	6803      	ldr	r3, [r0, #0]
 80143b8:	9304      	str	r3, [sp, #16]
 80143ba:	4618      	mov	r0, r3
 80143bc:	f7eb ff68 	bl	8000290 <strlen>
 80143c0:	2300      	movs	r3, #0
 80143c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80143c4:	f8d8 3000 	ldr.w	r3, [r8]
 80143c8:	9005      	str	r0, [sp, #20]
 80143ca:	3307      	adds	r3, #7
 80143cc:	f023 0307 	bic.w	r3, r3, #7
 80143d0:	f103 0208 	add.w	r2, r3, #8
 80143d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80143d8:	f8d4 b000 	ldr.w	fp, [r4]
 80143dc:	f8c8 2000 	str.w	r2, [r8]
 80143e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80143e4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80143e8:	9307      	str	r3, [sp, #28]
 80143ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80143ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80143f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80143f6:	4b9c      	ldr	r3, [pc, #624]	@ (8014668 <_printf_float+0x2c8>)
 80143f8:	f04f 32ff 	mov.w	r2, #4294967295
 80143fc:	f7ec fba6 	bl	8000b4c <__aeabi_dcmpun>
 8014400:	bb70      	cbnz	r0, 8014460 <_printf_float+0xc0>
 8014402:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014406:	4b98      	ldr	r3, [pc, #608]	@ (8014668 <_printf_float+0x2c8>)
 8014408:	f04f 32ff 	mov.w	r2, #4294967295
 801440c:	f7ec fb80 	bl	8000b10 <__aeabi_dcmple>
 8014410:	bb30      	cbnz	r0, 8014460 <_printf_float+0xc0>
 8014412:	2200      	movs	r2, #0
 8014414:	2300      	movs	r3, #0
 8014416:	4640      	mov	r0, r8
 8014418:	4649      	mov	r1, r9
 801441a:	f7ec fb6f 	bl	8000afc <__aeabi_dcmplt>
 801441e:	b110      	cbz	r0, 8014426 <_printf_float+0x86>
 8014420:	232d      	movs	r3, #45	@ 0x2d
 8014422:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014426:	4a91      	ldr	r2, [pc, #580]	@ (801466c <_printf_float+0x2cc>)
 8014428:	4b91      	ldr	r3, [pc, #580]	@ (8014670 <_printf_float+0x2d0>)
 801442a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801442e:	bf8c      	ite	hi
 8014430:	4690      	movhi	r8, r2
 8014432:	4698      	movls	r8, r3
 8014434:	2303      	movs	r3, #3
 8014436:	6123      	str	r3, [r4, #16]
 8014438:	f02b 0304 	bic.w	r3, fp, #4
 801443c:	6023      	str	r3, [r4, #0]
 801443e:	f04f 0900 	mov.w	r9, #0
 8014442:	9700      	str	r7, [sp, #0]
 8014444:	4633      	mov	r3, r6
 8014446:	aa0b      	add	r2, sp, #44	@ 0x2c
 8014448:	4621      	mov	r1, r4
 801444a:	4628      	mov	r0, r5
 801444c:	f000 f9d2 	bl	80147f4 <_printf_common>
 8014450:	3001      	adds	r0, #1
 8014452:	f040 808d 	bne.w	8014570 <_printf_float+0x1d0>
 8014456:	f04f 30ff 	mov.w	r0, #4294967295
 801445a:	b00d      	add	sp, #52	@ 0x34
 801445c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014460:	4642      	mov	r2, r8
 8014462:	464b      	mov	r3, r9
 8014464:	4640      	mov	r0, r8
 8014466:	4649      	mov	r1, r9
 8014468:	f7ec fb70 	bl	8000b4c <__aeabi_dcmpun>
 801446c:	b140      	cbz	r0, 8014480 <_printf_float+0xe0>
 801446e:	464b      	mov	r3, r9
 8014470:	2b00      	cmp	r3, #0
 8014472:	bfbc      	itt	lt
 8014474:	232d      	movlt	r3, #45	@ 0x2d
 8014476:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801447a:	4a7e      	ldr	r2, [pc, #504]	@ (8014674 <_printf_float+0x2d4>)
 801447c:	4b7e      	ldr	r3, [pc, #504]	@ (8014678 <_printf_float+0x2d8>)
 801447e:	e7d4      	b.n	801442a <_printf_float+0x8a>
 8014480:	6863      	ldr	r3, [r4, #4]
 8014482:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8014486:	9206      	str	r2, [sp, #24]
 8014488:	1c5a      	adds	r2, r3, #1
 801448a:	d13b      	bne.n	8014504 <_printf_float+0x164>
 801448c:	2306      	movs	r3, #6
 801448e:	6063      	str	r3, [r4, #4]
 8014490:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8014494:	2300      	movs	r3, #0
 8014496:	6022      	str	r2, [r4, #0]
 8014498:	9303      	str	r3, [sp, #12]
 801449a:	ab0a      	add	r3, sp, #40	@ 0x28
 801449c:	e9cd a301 	strd	sl, r3, [sp, #4]
 80144a0:	ab09      	add	r3, sp, #36	@ 0x24
 80144a2:	9300      	str	r3, [sp, #0]
 80144a4:	6861      	ldr	r1, [r4, #4]
 80144a6:	ec49 8b10 	vmov	d0, r8, r9
 80144aa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80144ae:	4628      	mov	r0, r5
 80144b0:	f7ff fed6 	bl	8014260 <__cvt>
 80144b4:	9b06      	ldr	r3, [sp, #24]
 80144b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80144b8:	2b47      	cmp	r3, #71	@ 0x47
 80144ba:	4680      	mov	r8, r0
 80144bc:	d129      	bne.n	8014512 <_printf_float+0x172>
 80144be:	1cc8      	adds	r0, r1, #3
 80144c0:	db02      	blt.n	80144c8 <_printf_float+0x128>
 80144c2:	6863      	ldr	r3, [r4, #4]
 80144c4:	4299      	cmp	r1, r3
 80144c6:	dd41      	ble.n	801454c <_printf_float+0x1ac>
 80144c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80144cc:	fa5f fa8a 	uxtb.w	sl, sl
 80144d0:	3901      	subs	r1, #1
 80144d2:	4652      	mov	r2, sl
 80144d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80144d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80144da:	f7ff ff26 	bl	801432a <__exponent>
 80144de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80144e0:	1813      	adds	r3, r2, r0
 80144e2:	2a01      	cmp	r2, #1
 80144e4:	4681      	mov	r9, r0
 80144e6:	6123      	str	r3, [r4, #16]
 80144e8:	dc02      	bgt.n	80144f0 <_printf_float+0x150>
 80144ea:	6822      	ldr	r2, [r4, #0]
 80144ec:	07d2      	lsls	r2, r2, #31
 80144ee:	d501      	bpl.n	80144f4 <_printf_float+0x154>
 80144f0:	3301      	adds	r3, #1
 80144f2:	6123      	str	r3, [r4, #16]
 80144f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d0a2      	beq.n	8014442 <_printf_float+0xa2>
 80144fc:	232d      	movs	r3, #45	@ 0x2d
 80144fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014502:	e79e      	b.n	8014442 <_printf_float+0xa2>
 8014504:	9a06      	ldr	r2, [sp, #24]
 8014506:	2a47      	cmp	r2, #71	@ 0x47
 8014508:	d1c2      	bne.n	8014490 <_printf_float+0xf0>
 801450a:	2b00      	cmp	r3, #0
 801450c:	d1c0      	bne.n	8014490 <_printf_float+0xf0>
 801450e:	2301      	movs	r3, #1
 8014510:	e7bd      	b.n	801448e <_printf_float+0xee>
 8014512:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014516:	d9db      	bls.n	80144d0 <_printf_float+0x130>
 8014518:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801451c:	d118      	bne.n	8014550 <_printf_float+0x1b0>
 801451e:	2900      	cmp	r1, #0
 8014520:	6863      	ldr	r3, [r4, #4]
 8014522:	dd0b      	ble.n	801453c <_printf_float+0x19c>
 8014524:	6121      	str	r1, [r4, #16]
 8014526:	b913      	cbnz	r3, 801452e <_printf_float+0x18e>
 8014528:	6822      	ldr	r2, [r4, #0]
 801452a:	07d0      	lsls	r0, r2, #31
 801452c:	d502      	bpl.n	8014534 <_printf_float+0x194>
 801452e:	3301      	adds	r3, #1
 8014530:	440b      	add	r3, r1
 8014532:	6123      	str	r3, [r4, #16]
 8014534:	65a1      	str	r1, [r4, #88]	@ 0x58
 8014536:	f04f 0900 	mov.w	r9, #0
 801453a:	e7db      	b.n	80144f4 <_printf_float+0x154>
 801453c:	b913      	cbnz	r3, 8014544 <_printf_float+0x1a4>
 801453e:	6822      	ldr	r2, [r4, #0]
 8014540:	07d2      	lsls	r2, r2, #31
 8014542:	d501      	bpl.n	8014548 <_printf_float+0x1a8>
 8014544:	3302      	adds	r3, #2
 8014546:	e7f4      	b.n	8014532 <_printf_float+0x192>
 8014548:	2301      	movs	r3, #1
 801454a:	e7f2      	b.n	8014532 <_printf_float+0x192>
 801454c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8014550:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014552:	4299      	cmp	r1, r3
 8014554:	db05      	blt.n	8014562 <_printf_float+0x1c2>
 8014556:	6823      	ldr	r3, [r4, #0]
 8014558:	6121      	str	r1, [r4, #16]
 801455a:	07d8      	lsls	r0, r3, #31
 801455c:	d5ea      	bpl.n	8014534 <_printf_float+0x194>
 801455e:	1c4b      	adds	r3, r1, #1
 8014560:	e7e7      	b.n	8014532 <_printf_float+0x192>
 8014562:	2900      	cmp	r1, #0
 8014564:	bfd4      	ite	le
 8014566:	f1c1 0202 	rsble	r2, r1, #2
 801456a:	2201      	movgt	r2, #1
 801456c:	4413      	add	r3, r2
 801456e:	e7e0      	b.n	8014532 <_printf_float+0x192>
 8014570:	6823      	ldr	r3, [r4, #0]
 8014572:	055a      	lsls	r2, r3, #21
 8014574:	d407      	bmi.n	8014586 <_printf_float+0x1e6>
 8014576:	6923      	ldr	r3, [r4, #16]
 8014578:	4642      	mov	r2, r8
 801457a:	4631      	mov	r1, r6
 801457c:	4628      	mov	r0, r5
 801457e:	47b8      	blx	r7
 8014580:	3001      	adds	r0, #1
 8014582:	d12b      	bne.n	80145dc <_printf_float+0x23c>
 8014584:	e767      	b.n	8014456 <_printf_float+0xb6>
 8014586:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801458a:	f240 80dd 	bls.w	8014748 <_printf_float+0x3a8>
 801458e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014592:	2200      	movs	r2, #0
 8014594:	2300      	movs	r3, #0
 8014596:	f7ec faa7 	bl	8000ae8 <__aeabi_dcmpeq>
 801459a:	2800      	cmp	r0, #0
 801459c:	d033      	beq.n	8014606 <_printf_float+0x266>
 801459e:	4a37      	ldr	r2, [pc, #220]	@ (801467c <_printf_float+0x2dc>)
 80145a0:	2301      	movs	r3, #1
 80145a2:	4631      	mov	r1, r6
 80145a4:	4628      	mov	r0, r5
 80145a6:	47b8      	blx	r7
 80145a8:	3001      	adds	r0, #1
 80145aa:	f43f af54 	beq.w	8014456 <_printf_float+0xb6>
 80145ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80145b2:	4543      	cmp	r3, r8
 80145b4:	db02      	blt.n	80145bc <_printf_float+0x21c>
 80145b6:	6823      	ldr	r3, [r4, #0]
 80145b8:	07d8      	lsls	r0, r3, #31
 80145ba:	d50f      	bpl.n	80145dc <_printf_float+0x23c>
 80145bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80145c0:	4631      	mov	r1, r6
 80145c2:	4628      	mov	r0, r5
 80145c4:	47b8      	blx	r7
 80145c6:	3001      	adds	r0, #1
 80145c8:	f43f af45 	beq.w	8014456 <_printf_float+0xb6>
 80145cc:	f04f 0900 	mov.w	r9, #0
 80145d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80145d4:	f104 0a1a 	add.w	sl, r4, #26
 80145d8:	45c8      	cmp	r8, r9
 80145da:	dc09      	bgt.n	80145f0 <_printf_float+0x250>
 80145dc:	6823      	ldr	r3, [r4, #0]
 80145de:	079b      	lsls	r3, r3, #30
 80145e0:	f100 8103 	bmi.w	80147ea <_printf_float+0x44a>
 80145e4:	68e0      	ldr	r0, [r4, #12]
 80145e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80145e8:	4298      	cmp	r0, r3
 80145ea:	bfb8      	it	lt
 80145ec:	4618      	movlt	r0, r3
 80145ee:	e734      	b.n	801445a <_printf_float+0xba>
 80145f0:	2301      	movs	r3, #1
 80145f2:	4652      	mov	r2, sl
 80145f4:	4631      	mov	r1, r6
 80145f6:	4628      	mov	r0, r5
 80145f8:	47b8      	blx	r7
 80145fa:	3001      	adds	r0, #1
 80145fc:	f43f af2b 	beq.w	8014456 <_printf_float+0xb6>
 8014600:	f109 0901 	add.w	r9, r9, #1
 8014604:	e7e8      	b.n	80145d8 <_printf_float+0x238>
 8014606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014608:	2b00      	cmp	r3, #0
 801460a:	dc39      	bgt.n	8014680 <_printf_float+0x2e0>
 801460c:	4a1b      	ldr	r2, [pc, #108]	@ (801467c <_printf_float+0x2dc>)
 801460e:	2301      	movs	r3, #1
 8014610:	4631      	mov	r1, r6
 8014612:	4628      	mov	r0, r5
 8014614:	47b8      	blx	r7
 8014616:	3001      	adds	r0, #1
 8014618:	f43f af1d 	beq.w	8014456 <_printf_float+0xb6>
 801461c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014620:	ea59 0303 	orrs.w	r3, r9, r3
 8014624:	d102      	bne.n	801462c <_printf_float+0x28c>
 8014626:	6823      	ldr	r3, [r4, #0]
 8014628:	07d9      	lsls	r1, r3, #31
 801462a:	d5d7      	bpl.n	80145dc <_printf_float+0x23c>
 801462c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014630:	4631      	mov	r1, r6
 8014632:	4628      	mov	r0, r5
 8014634:	47b8      	blx	r7
 8014636:	3001      	adds	r0, #1
 8014638:	f43f af0d 	beq.w	8014456 <_printf_float+0xb6>
 801463c:	f04f 0a00 	mov.w	sl, #0
 8014640:	f104 0b1a 	add.w	fp, r4, #26
 8014644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014646:	425b      	negs	r3, r3
 8014648:	4553      	cmp	r3, sl
 801464a:	dc01      	bgt.n	8014650 <_printf_float+0x2b0>
 801464c:	464b      	mov	r3, r9
 801464e:	e793      	b.n	8014578 <_printf_float+0x1d8>
 8014650:	2301      	movs	r3, #1
 8014652:	465a      	mov	r2, fp
 8014654:	4631      	mov	r1, r6
 8014656:	4628      	mov	r0, r5
 8014658:	47b8      	blx	r7
 801465a:	3001      	adds	r0, #1
 801465c:	f43f aefb 	beq.w	8014456 <_printf_float+0xb6>
 8014660:	f10a 0a01 	add.w	sl, sl, #1
 8014664:	e7ee      	b.n	8014644 <_printf_float+0x2a4>
 8014666:	bf00      	nop
 8014668:	7fefffff 	.word	0x7fefffff
 801466c:	08019b6e 	.word	0x08019b6e
 8014670:	08019b6a 	.word	0x08019b6a
 8014674:	08019b76 	.word	0x08019b76
 8014678:	08019b72 	.word	0x08019b72
 801467c:	08019b7a 	.word	0x08019b7a
 8014680:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014682:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014686:	4553      	cmp	r3, sl
 8014688:	bfa8      	it	ge
 801468a:	4653      	movge	r3, sl
 801468c:	2b00      	cmp	r3, #0
 801468e:	4699      	mov	r9, r3
 8014690:	dc36      	bgt.n	8014700 <_printf_float+0x360>
 8014692:	f04f 0b00 	mov.w	fp, #0
 8014696:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801469a:	f104 021a 	add.w	r2, r4, #26
 801469e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80146a0:	9306      	str	r3, [sp, #24]
 80146a2:	eba3 0309 	sub.w	r3, r3, r9
 80146a6:	455b      	cmp	r3, fp
 80146a8:	dc31      	bgt.n	801470e <_printf_float+0x36e>
 80146aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146ac:	459a      	cmp	sl, r3
 80146ae:	dc3a      	bgt.n	8014726 <_printf_float+0x386>
 80146b0:	6823      	ldr	r3, [r4, #0]
 80146b2:	07da      	lsls	r2, r3, #31
 80146b4:	d437      	bmi.n	8014726 <_printf_float+0x386>
 80146b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146b8:	ebaa 0903 	sub.w	r9, sl, r3
 80146bc:	9b06      	ldr	r3, [sp, #24]
 80146be:	ebaa 0303 	sub.w	r3, sl, r3
 80146c2:	4599      	cmp	r9, r3
 80146c4:	bfa8      	it	ge
 80146c6:	4699      	movge	r9, r3
 80146c8:	f1b9 0f00 	cmp.w	r9, #0
 80146cc:	dc33      	bgt.n	8014736 <_printf_float+0x396>
 80146ce:	f04f 0800 	mov.w	r8, #0
 80146d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80146d6:	f104 0b1a 	add.w	fp, r4, #26
 80146da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146dc:	ebaa 0303 	sub.w	r3, sl, r3
 80146e0:	eba3 0309 	sub.w	r3, r3, r9
 80146e4:	4543      	cmp	r3, r8
 80146e6:	f77f af79 	ble.w	80145dc <_printf_float+0x23c>
 80146ea:	2301      	movs	r3, #1
 80146ec:	465a      	mov	r2, fp
 80146ee:	4631      	mov	r1, r6
 80146f0:	4628      	mov	r0, r5
 80146f2:	47b8      	blx	r7
 80146f4:	3001      	adds	r0, #1
 80146f6:	f43f aeae 	beq.w	8014456 <_printf_float+0xb6>
 80146fa:	f108 0801 	add.w	r8, r8, #1
 80146fe:	e7ec      	b.n	80146da <_printf_float+0x33a>
 8014700:	4642      	mov	r2, r8
 8014702:	4631      	mov	r1, r6
 8014704:	4628      	mov	r0, r5
 8014706:	47b8      	blx	r7
 8014708:	3001      	adds	r0, #1
 801470a:	d1c2      	bne.n	8014692 <_printf_float+0x2f2>
 801470c:	e6a3      	b.n	8014456 <_printf_float+0xb6>
 801470e:	2301      	movs	r3, #1
 8014710:	4631      	mov	r1, r6
 8014712:	4628      	mov	r0, r5
 8014714:	9206      	str	r2, [sp, #24]
 8014716:	47b8      	blx	r7
 8014718:	3001      	adds	r0, #1
 801471a:	f43f ae9c 	beq.w	8014456 <_printf_float+0xb6>
 801471e:	9a06      	ldr	r2, [sp, #24]
 8014720:	f10b 0b01 	add.w	fp, fp, #1
 8014724:	e7bb      	b.n	801469e <_printf_float+0x2fe>
 8014726:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801472a:	4631      	mov	r1, r6
 801472c:	4628      	mov	r0, r5
 801472e:	47b8      	blx	r7
 8014730:	3001      	adds	r0, #1
 8014732:	d1c0      	bne.n	80146b6 <_printf_float+0x316>
 8014734:	e68f      	b.n	8014456 <_printf_float+0xb6>
 8014736:	9a06      	ldr	r2, [sp, #24]
 8014738:	464b      	mov	r3, r9
 801473a:	4442      	add	r2, r8
 801473c:	4631      	mov	r1, r6
 801473e:	4628      	mov	r0, r5
 8014740:	47b8      	blx	r7
 8014742:	3001      	adds	r0, #1
 8014744:	d1c3      	bne.n	80146ce <_printf_float+0x32e>
 8014746:	e686      	b.n	8014456 <_printf_float+0xb6>
 8014748:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801474c:	f1ba 0f01 	cmp.w	sl, #1
 8014750:	dc01      	bgt.n	8014756 <_printf_float+0x3b6>
 8014752:	07db      	lsls	r3, r3, #31
 8014754:	d536      	bpl.n	80147c4 <_printf_float+0x424>
 8014756:	2301      	movs	r3, #1
 8014758:	4642      	mov	r2, r8
 801475a:	4631      	mov	r1, r6
 801475c:	4628      	mov	r0, r5
 801475e:	47b8      	blx	r7
 8014760:	3001      	adds	r0, #1
 8014762:	f43f ae78 	beq.w	8014456 <_printf_float+0xb6>
 8014766:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801476a:	4631      	mov	r1, r6
 801476c:	4628      	mov	r0, r5
 801476e:	47b8      	blx	r7
 8014770:	3001      	adds	r0, #1
 8014772:	f43f ae70 	beq.w	8014456 <_printf_float+0xb6>
 8014776:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801477a:	2200      	movs	r2, #0
 801477c:	2300      	movs	r3, #0
 801477e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014782:	f7ec f9b1 	bl	8000ae8 <__aeabi_dcmpeq>
 8014786:	b9c0      	cbnz	r0, 80147ba <_printf_float+0x41a>
 8014788:	4653      	mov	r3, sl
 801478a:	f108 0201 	add.w	r2, r8, #1
 801478e:	4631      	mov	r1, r6
 8014790:	4628      	mov	r0, r5
 8014792:	47b8      	blx	r7
 8014794:	3001      	adds	r0, #1
 8014796:	d10c      	bne.n	80147b2 <_printf_float+0x412>
 8014798:	e65d      	b.n	8014456 <_printf_float+0xb6>
 801479a:	2301      	movs	r3, #1
 801479c:	465a      	mov	r2, fp
 801479e:	4631      	mov	r1, r6
 80147a0:	4628      	mov	r0, r5
 80147a2:	47b8      	blx	r7
 80147a4:	3001      	adds	r0, #1
 80147a6:	f43f ae56 	beq.w	8014456 <_printf_float+0xb6>
 80147aa:	f108 0801 	add.w	r8, r8, #1
 80147ae:	45d0      	cmp	r8, sl
 80147b0:	dbf3      	blt.n	801479a <_printf_float+0x3fa>
 80147b2:	464b      	mov	r3, r9
 80147b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80147b8:	e6df      	b.n	801457a <_printf_float+0x1da>
 80147ba:	f04f 0800 	mov.w	r8, #0
 80147be:	f104 0b1a 	add.w	fp, r4, #26
 80147c2:	e7f4      	b.n	80147ae <_printf_float+0x40e>
 80147c4:	2301      	movs	r3, #1
 80147c6:	4642      	mov	r2, r8
 80147c8:	e7e1      	b.n	801478e <_printf_float+0x3ee>
 80147ca:	2301      	movs	r3, #1
 80147cc:	464a      	mov	r2, r9
 80147ce:	4631      	mov	r1, r6
 80147d0:	4628      	mov	r0, r5
 80147d2:	47b8      	blx	r7
 80147d4:	3001      	adds	r0, #1
 80147d6:	f43f ae3e 	beq.w	8014456 <_printf_float+0xb6>
 80147da:	f108 0801 	add.w	r8, r8, #1
 80147de:	68e3      	ldr	r3, [r4, #12]
 80147e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80147e2:	1a5b      	subs	r3, r3, r1
 80147e4:	4543      	cmp	r3, r8
 80147e6:	dcf0      	bgt.n	80147ca <_printf_float+0x42a>
 80147e8:	e6fc      	b.n	80145e4 <_printf_float+0x244>
 80147ea:	f04f 0800 	mov.w	r8, #0
 80147ee:	f104 0919 	add.w	r9, r4, #25
 80147f2:	e7f4      	b.n	80147de <_printf_float+0x43e>

080147f4 <_printf_common>:
 80147f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147f8:	4616      	mov	r6, r2
 80147fa:	4698      	mov	r8, r3
 80147fc:	688a      	ldr	r2, [r1, #8]
 80147fe:	690b      	ldr	r3, [r1, #16]
 8014800:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014804:	4293      	cmp	r3, r2
 8014806:	bfb8      	it	lt
 8014808:	4613      	movlt	r3, r2
 801480a:	6033      	str	r3, [r6, #0]
 801480c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014810:	4607      	mov	r7, r0
 8014812:	460c      	mov	r4, r1
 8014814:	b10a      	cbz	r2, 801481a <_printf_common+0x26>
 8014816:	3301      	adds	r3, #1
 8014818:	6033      	str	r3, [r6, #0]
 801481a:	6823      	ldr	r3, [r4, #0]
 801481c:	0699      	lsls	r1, r3, #26
 801481e:	bf42      	ittt	mi
 8014820:	6833      	ldrmi	r3, [r6, #0]
 8014822:	3302      	addmi	r3, #2
 8014824:	6033      	strmi	r3, [r6, #0]
 8014826:	6825      	ldr	r5, [r4, #0]
 8014828:	f015 0506 	ands.w	r5, r5, #6
 801482c:	d106      	bne.n	801483c <_printf_common+0x48>
 801482e:	f104 0a19 	add.w	sl, r4, #25
 8014832:	68e3      	ldr	r3, [r4, #12]
 8014834:	6832      	ldr	r2, [r6, #0]
 8014836:	1a9b      	subs	r3, r3, r2
 8014838:	42ab      	cmp	r3, r5
 801483a:	dc26      	bgt.n	801488a <_printf_common+0x96>
 801483c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014840:	6822      	ldr	r2, [r4, #0]
 8014842:	3b00      	subs	r3, #0
 8014844:	bf18      	it	ne
 8014846:	2301      	movne	r3, #1
 8014848:	0692      	lsls	r2, r2, #26
 801484a:	d42b      	bmi.n	80148a4 <_printf_common+0xb0>
 801484c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014850:	4641      	mov	r1, r8
 8014852:	4638      	mov	r0, r7
 8014854:	47c8      	blx	r9
 8014856:	3001      	adds	r0, #1
 8014858:	d01e      	beq.n	8014898 <_printf_common+0xa4>
 801485a:	6823      	ldr	r3, [r4, #0]
 801485c:	6922      	ldr	r2, [r4, #16]
 801485e:	f003 0306 	and.w	r3, r3, #6
 8014862:	2b04      	cmp	r3, #4
 8014864:	bf02      	ittt	eq
 8014866:	68e5      	ldreq	r5, [r4, #12]
 8014868:	6833      	ldreq	r3, [r6, #0]
 801486a:	1aed      	subeq	r5, r5, r3
 801486c:	68a3      	ldr	r3, [r4, #8]
 801486e:	bf0c      	ite	eq
 8014870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014874:	2500      	movne	r5, #0
 8014876:	4293      	cmp	r3, r2
 8014878:	bfc4      	itt	gt
 801487a:	1a9b      	subgt	r3, r3, r2
 801487c:	18ed      	addgt	r5, r5, r3
 801487e:	2600      	movs	r6, #0
 8014880:	341a      	adds	r4, #26
 8014882:	42b5      	cmp	r5, r6
 8014884:	d11a      	bne.n	80148bc <_printf_common+0xc8>
 8014886:	2000      	movs	r0, #0
 8014888:	e008      	b.n	801489c <_printf_common+0xa8>
 801488a:	2301      	movs	r3, #1
 801488c:	4652      	mov	r2, sl
 801488e:	4641      	mov	r1, r8
 8014890:	4638      	mov	r0, r7
 8014892:	47c8      	blx	r9
 8014894:	3001      	adds	r0, #1
 8014896:	d103      	bne.n	80148a0 <_printf_common+0xac>
 8014898:	f04f 30ff 	mov.w	r0, #4294967295
 801489c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148a0:	3501      	adds	r5, #1
 80148a2:	e7c6      	b.n	8014832 <_printf_common+0x3e>
 80148a4:	18e1      	adds	r1, r4, r3
 80148a6:	1c5a      	adds	r2, r3, #1
 80148a8:	2030      	movs	r0, #48	@ 0x30
 80148aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80148ae:	4422      	add	r2, r4
 80148b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80148b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80148b8:	3302      	adds	r3, #2
 80148ba:	e7c7      	b.n	801484c <_printf_common+0x58>
 80148bc:	2301      	movs	r3, #1
 80148be:	4622      	mov	r2, r4
 80148c0:	4641      	mov	r1, r8
 80148c2:	4638      	mov	r0, r7
 80148c4:	47c8      	blx	r9
 80148c6:	3001      	adds	r0, #1
 80148c8:	d0e6      	beq.n	8014898 <_printf_common+0xa4>
 80148ca:	3601      	adds	r6, #1
 80148cc:	e7d9      	b.n	8014882 <_printf_common+0x8e>
	...

080148d0 <_printf_i>:
 80148d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80148d4:	7e0f      	ldrb	r7, [r1, #24]
 80148d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80148d8:	2f78      	cmp	r7, #120	@ 0x78
 80148da:	4691      	mov	r9, r2
 80148dc:	4680      	mov	r8, r0
 80148de:	460c      	mov	r4, r1
 80148e0:	469a      	mov	sl, r3
 80148e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80148e6:	d807      	bhi.n	80148f8 <_printf_i+0x28>
 80148e8:	2f62      	cmp	r7, #98	@ 0x62
 80148ea:	d80a      	bhi.n	8014902 <_printf_i+0x32>
 80148ec:	2f00      	cmp	r7, #0
 80148ee:	f000 80d1 	beq.w	8014a94 <_printf_i+0x1c4>
 80148f2:	2f58      	cmp	r7, #88	@ 0x58
 80148f4:	f000 80b8 	beq.w	8014a68 <_printf_i+0x198>
 80148f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80148fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014900:	e03a      	b.n	8014978 <_printf_i+0xa8>
 8014902:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014906:	2b15      	cmp	r3, #21
 8014908:	d8f6      	bhi.n	80148f8 <_printf_i+0x28>
 801490a:	a101      	add	r1, pc, #4	@ (adr r1, 8014910 <_printf_i+0x40>)
 801490c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014910:	08014969 	.word	0x08014969
 8014914:	0801497d 	.word	0x0801497d
 8014918:	080148f9 	.word	0x080148f9
 801491c:	080148f9 	.word	0x080148f9
 8014920:	080148f9 	.word	0x080148f9
 8014924:	080148f9 	.word	0x080148f9
 8014928:	0801497d 	.word	0x0801497d
 801492c:	080148f9 	.word	0x080148f9
 8014930:	080148f9 	.word	0x080148f9
 8014934:	080148f9 	.word	0x080148f9
 8014938:	080148f9 	.word	0x080148f9
 801493c:	08014a7b 	.word	0x08014a7b
 8014940:	080149a7 	.word	0x080149a7
 8014944:	08014a35 	.word	0x08014a35
 8014948:	080148f9 	.word	0x080148f9
 801494c:	080148f9 	.word	0x080148f9
 8014950:	08014a9d 	.word	0x08014a9d
 8014954:	080148f9 	.word	0x080148f9
 8014958:	080149a7 	.word	0x080149a7
 801495c:	080148f9 	.word	0x080148f9
 8014960:	080148f9 	.word	0x080148f9
 8014964:	08014a3d 	.word	0x08014a3d
 8014968:	6833      	ldr	r3, [r6, #0]
 801496a:	1d1a      	adds	r2, r3, #4
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	6032      	str	r2, [r6, #0]
 8014970:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014974:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014978:	2301      	movs	r3, #1
 801497a:	e09c      	b.n	8014ab6 <_printf_i+0x1e6>
 801497c:	6833      	ldr	r3, [r6, #0]
 801497e:	6820      	ldr	r0, [r4, #0]
 8014980:	1d19      	adds	r1, r3, #4
 8014982:	6031      	str	r1, [r6, #0]
 8014984:	0606      	lsls	r6, r0, #24
 8014986:	d501      	bpl.n	801498c <_printf_i+0xbc>
 8014988:	681d      	ldr	r5, [r3, #0]
 801498a:	e003      	b.n	8014994 <_printf_i+0xc4>
 801498c:	0645      	lsls	r5, r0, #25
 801498e:	d5fb      	bpl.n	8014988 <_printf_i+0xb8>
 8014990:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014994:	2d00      	cmp	r5, #0
 8014996:	da03      	bge.n	80149a0 <_printf_i+0xd0>
 8014998:	232d      	movs	r3, #45	@ 0x2d
 801499a:	426d      	negs	r5, r5
 801499c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80149a0:	4858      	ldr	r0, [pc, #352]	@ (8014b04 <_printf_i+0x234>)
 80149a2:	230a      	movs	r3, #10
 80149a4:	e011      	b.n	80149ca <_printf_i+0xfa>
 80149a6:	6821      	ldr	r1, [r4, #0]
 80149a8:	6833      	ldr	r3, [r6, #0]
 80149aa:	0608      	lsls	r0, r1, #24
 80149ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80149b0:	d402      	bmi.n	80149b8 <_printf_i+0xe8>
 80149b2:	0649      	lsls	r1, r1, #25
 80149b4:	bf48      	it	mi
 80149b6:	b2ad      	uxthmi	r5, r5
 80149b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80149ba:	4852      	ldr	r0, [pc, #328]	@ (8014b04 <_printf_i+0x234>)
 80149bc:	6033      	str	r3, [r6, #0]
 80149be:	bf14      	ite	ne
 80149c0:	230a      	movne	r3, #10
 80149c2:	2308      	moveq	r3, #8
 80149c4:	2100      	movs	r1, #0
 80149c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80149ca:	6866      	ldr	r6, [r4, #4]
 80149cc:	60a6      	str	r6, [r4, #8]
 80149ce:	2e00      	cmp	r6, #0
 80149d0:	db05      	blt.n	80149de <_printf_i+0x10e>
 80149d2:	6821      	ldr	r1, [r4, #0]
 80149d4:	432e      	orrs	r6, r5
 80149d6:	f021 0104 	bic.w	r1, r1, #4
 80149da:	6021      	str	r1, [r4, #0]
 80149dc:	d04b      	beq.n	8014a76 <_printf_i+0x1a6>
 80149de:	4616      	mov	r6, r2
 80149e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80149e4:	fb03 5711 	mls	r7, r3, r1, r5
 80149e8:	5dc7      	ldrb	r7, [r0, r7]
 80149ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80149ee:	462f      	mov	r7, r5
 80149f0:	42bb      	cmp	r3, r7
 80149f2:	460d      	mov	r5, r1
 80149f4:	d9f4      	bls.n	80149e0 <_printf_i+0x110>
 80149f6:	2b08      	cmp	r3, #8
 80149f8:	d10b      	bne.n	8014a12 <_printf_i+0x142>
 80149fa:	6823      	ldr	r3, [r4, #0]
 80149fc:	07df      	lsls	r7, r3, #31
 80149fe:	d508      	bpl.n	8014a12 <_printf_i+0x142>
 8014a00:	6923      	ldr	r3, [r4, #16]
 8014a02:	6861      	ldr	r1, [r4, #4]
 8014a04:	4299      	cmp	r1, r3
 8014a06:	bfde      	ittt	le
 8014a08:	2330      	movle	r3, #48	@ 0x30
 8014a0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014a0e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014a12:	1b92      	subs	r2, r2, r6
 8014a14:	6122      	str	r2, [r4, #16]
 8014a16:	f8cd a000 	str.w	sl, [sp]
 8014a1a:	464b      	mov	r3, r9
 8014a1c:	aa03      	add	r2, sp, #12
 8014a1e:	4621      	mov	r1, r4
 8014a20:	4640      	mov	r0, r8
 8014a22:	f7ff fee7 	bl	80147f4 <_printf_common>
 8014a26:	3001      	adds	r0, #1
 8014a28:	d14a      	bne.n	8014ac0 <_printf_i+0x1f0>
 8014a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8014a2e:	b004      	add	sp, #16
 8014a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a34:	6823      	ldr	r3, [r4, #0]
 8014a36:	f043 0320 	orr.w	r3, r3, #32
 8014a3a:	6023      	str	r3, [r4, #0]
 8014a3c:	4832      	ldr	r0, [pc, #200]	@ (8014b08 <_printf_i+0x238>)
 8014a3e:	2778      	movs	r7, #120	@ 0x78
 8014a40:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014a44:	6823      	ldr	r3, [r4, #0]
 8014a46:	6831      	ldr	r1, [r6, #0]
 8014a48:	061f      	lsls	r7, r3, #24
 8014a4a:	f851 5b04 	ldr.w	r5, [r1], #4
 8014a4e:	d402      	bmi.n	8014a56 <_printf_i+0x186>
 8014a50:	065f      	lsls	r7, r3, #25
 8014a52:	bf48      	it	mi
 8014a54:	b2ad      	uxthmi	r5, r5
 8014a56:	6031      	str	r1, [r6, #0]
 8014a58:	07d9      	lsls	r1, r3, #31
 8014a5a:	bf44      	itt	mi
 8014a5c:	f043 0320 	orrmi.w	r3, r3, #32
 8014a60:	6023      	strmi	r3, [r4, #0]
 8014a62:	b11d      	cbz	r5, 8014a6c <_printf_i+0x19c>
 8014a64:	2310      	movs	r3, #16
 8014a66:	e7ad      	b.n	80149c4 <_printf_i+0xf4>
 8014a68:	4826      	ldr	r0, [pc, #152]	@ (8014b04 <_printf_i+0x234>)
 8014a6a:	e7e9      	b.n	8014a40 <_printf_i+0x170>
 8014a6c:	6823      	ldr	r3, [r4, #0]
 8014a6e:	f023 0320 	bic.w	r3, r3, #32
 8014a72:	6023      	str	r3, [r4, #0]
 8014a74:	e7f6      	b.n	8014a64 <_printf_i+0x194>
 8014a76:	4616      	mov	r6, r2
 8014a78:	e7bd      	b.n	80149f6 <_printf_i+0x126>
 8014a7a:	6833      	ldr	r3, [r6, #0]
 8014a7c:	6825      	ldr	r5, [r4, #0]
 8014a7e:	6961      	ldr	r1, [r4, #20]
 8014a80:	1d18      	adds	r0, r3, #4
 8014a82:	6030      	str	r0, [r6, #0]
 8014a84:	062e      	lsls	r6, r5, #24
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	d501      	bpl.n	8014a8e <_printf_i+0x1be>
 8014a8a:	6019      	str	r1, [r3, #0]
 8014a8c:	e002      	b.n	8014a94 <_printf_i+0x1c4>
 8014a8e:	0668      	lsls	r0, r5, #25
 8014a90:	d5fb      	bpl.n	8014a8a <_printf_i+0x1ba>
 8014a92:	8019      	strh	r1, [r3, #0]
 8014a94:	2300      	movs	r3, #0
 8014a96:	6123      	str	r3, [r4, #16]
 8014a98:	4616      	mov	r6, r2
 8014a9a:	e7bc      	b.n	8014a16 <_printf_i+0x146>
 8014a9c:	6833      	ldr	r3, [r6, #0]
 8014a9e:	1d1a      	adds	r2, r3, #4
 8014aa0:	6032      	str	r2, [r6, #0]
 8014aa2:	681e      	ldr	r6, [r3, #0]
 8014aa4:	6862      	ldr	r2, [r4, #4]
 8014aa6:	2100      	movs	r1, #0
 8014aa8:	4630      	mov	r0, r6
 8014aaa:	f7eb fba1 	bl	80001f0 <memchr>
 8014aae:	b108      	cbz	r0, 8014ab4 <_printf_i+0x1e4>
 8014ab0:	1b80      	subs	r0, r0, r6
 8014ab2:	6060      	str	r0, [r4, #4]
 8014ab4:	6863      	ldr	r3, [r4, #4]
 8014ab6:	6123      	str	r3, [r4, #16]
 8014ab8:	2300      	movs	r3, #0
 8014aba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014abe:	e7aa      	b.n	8014a16 <_printf_i+0x146>
 8014ac0:	6923      	ldr	r3, [r4, #16]
 8014ac2:	4632      	mov	r2, r6
 8014ac4:	4649      	mov	r1, r9
 8014ac6:	4640      	mov	r0, r8
 8014ac8:	47d0      	blx	sl
 8014aca:	3001      	adds	r0, #1
 8014acc:	d0ad      	beq.n	8014a2a <_printf_i+0x15a>
 8014ace:	6823      	ldr	r3, [r4, #0]
 8014ad0:	079b      	lsls	r3, r3, #30
 8014ad2:	d413      	bmi.n	8014afc <_printf_i+0x22c>
 8014ad4:	68e0      	ldr	r0, [r4, #12]
 8014ad6:	9b03      	ldr	r3, [sp, #12]
 8014ad8:	4298      	cmp	r0, r3
 8014ada:	bfb8      	it	lt
 8014adc:	4618      	movlt	r0, r3
 8014ade:	e7a6      	b.n	8014a2e <_printf_i+0x15e>
 8014ae0:	2301      	movs	r3, #1
 8014ae2:	4632      	mov	r2, r6
 8014ae4:	4649      	mov	r1, r9
 8014ae6:	4640      	mov	r0, r8
 8014ae8:	47d0      	blx	sl
 8014aea:	3001      	adds	r0, #1
 8014aec:	d09d      	beq.n	8014a2a <_printf_i+0x15a>
 8014aee:	3501      	adds	r5, #1
 8014af0:	68e3      	ldr	r3, [r4, #12]
 8014af2:	9903      	ldr	r1, [sp, #12]
 8014af4:	1a5b      	subs	r3, r3, r1
 8014af6:	42ab      	cmp	r3, r5
 8014af8:	dcf2      	bgt.n	8014ae0 <_printf_i+0x210>
 8014afa:	e7eb      	b.n	8014ad4 <_printf_i+0x204>
 8014afc:	2500      	movs	r5, #0
 8014afe:	f104 0619 	add.w	r6, r4, #25
 8014b02:	e7f5      	b.n	8014af0 <_printf_i+0x220>
 8014b04:	08019b7c 	.word	0x08019b7c
 8014b08:	08019b8d 	.word	0x08019b8d

08014b0c <std>:
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	b510      	push	{r4, lr}
 8014b10:	4604      	mov	r4, r0
 8014b12:	e9c0 3300 	strd	r3, r3, [r0]
 8014b16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014b1a:	6083      	str	r3, [r0, #8]
 8014b1c:	8181      	strh	r1, [r0, #12]
 8014b1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8014b20:	81c2      	strh	r2, [r0, #14]
 8014b22:	6183      	str	r3, [r0, #24]
 8014b24:	4619      	mov	r1, r3
 8014b26:	2208      	movs	r2, #8
 8014b28:	305c      	adds	r0, #92	@ 0x5c
 8014b2a:	f000 f8f4 	bl	8014d16 <memset>
 8014b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8014b64 <std+0x58>)
 8014b30:	6263      	str	r3, [r4, #36]	@ 0x24
 8014b32:	4b0d      	ldr	r3, [pc, #52]	@ (8014b68 <std+0x5c>)
 8014b34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014b36:	4b0d      	ldr	r3, [pc, #52]	@ (8014b6c <std+0x60>)
 8014b38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8014b70 <std+0x64>)
 8014b3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8014b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8014b74 <std+0x68>)
 8014b40:	6224      	str	r4, [r4, #32]
 8014b42:	429c      	cmp	r4, r3
 8014b44:	d006      	beq.n	8014b54 <std+0x48>
 8014b46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014b4a:	4294      	cmp	r4, r2
 8014b4c:	d002      	beq.n	8014b54 <std+0x48>
 8014b4e:	33d0      	adds	r3, #208	@ 0xd0
 8014b50:	429c      	cmp	r4, r3
 8014b52:	d105      	bne.n	8014b60 <std+0x54>
 8014b54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b5c:	f000 ba40 	b.w	8014fe0 <__retarget_lock_init_recursive>
 8014b60:	bd10      	pop	{r4, pc}
 8014b62:	bf00      	nop
 8014b64:	08014c91 	.word	0x08014c91
 8014b68:	08014cb3 	.word	0x08014cb3
 8014b6c:	08014ceb 	.word	0x08014ceb
 8014b70:	08014d0f 	.word	0x08014d0f
 8014b74:	20013b20 	.word	0x20013b20

08014b78 <stdio_exit_handler>:
 8014b78:	4a02      	ldr	r2, [pc, #8]	@ (8014b84 <stdio_exit_handler+0xc>)
 8014b7a:	4903      	ldr	r1, [pc, #12]	@ (8014b88 <stdio_exit_handler+0x10>)
 8014b7c:	4803      	ldr	r0, [pc, #12]	@ (8014b8c <stdio_exit_handler+0x14>)
 8014b7e:	f000 b869 	b.w	8014c54 <_fwalk_sglue>
 8014b82:	bf00      	nop
 8014b84:	20000234 	.word	0x20000234
 8014b88:	08016ebd 	.word	0x08016ebd
 8014b8c:	200003b0 	.word	0x200003b0

08014b90 <cleanup_stdio>:
 8014b90:	6841      	ldr	r1, [r0, #4]
 8014b92:	4b0c      	ldr	r3, [pc, #48]	@ (8014bc4 <cleanup_stdio+0x34>)
 8014b94:	4299      	cmp	r1, r3
 8014b96:	b510      	push	{r4, lr}
 8014b98:	4604      	mov	r4, r0
 8014b9a:	d001      	beq.n	8014ba0 <cleanup_stdio+0x10>
 8014b9c:	f002 f98e 	bl	8016ebc <_fflush_r>
 8014ba0:	68a1      	ldr	r1, [r4, #8]
 8014ba2:	4b09      	ldr	r3, [pc, #36]	@ (8014bc8 <cleanup_stdio+0x38>)
 8014ba4:	4299      	cmp	r1, r3
 8014ba6:	d002      	beq.n	8014bae <cleanup_stdio+0x1e>
 8014ba8:	4620      	mov	r0, r4
 8014baa:	f002 f987 	bl	8016ebc <_fflush_r>
 8014bae:	68e1      	ldr	r1, [r4, #12]
 8014bb0:	4b06      	ldr	r3, [pc, #24]	@ (8014bcc <cleanup_stdio+0x3c>)
 8014bb2:	4299      	cmp	r1, r3
 8014bb4:	d004      	beq.n	8014bc0 <cleanup_stdio+0x30>
 8014bb6:	4620      	mov	r0, r4
 8014bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bbc:	f002 b97e 	b.w	8016ebc <_fflush_r>
 8014bc0:	bd10      	pop	{r4, pc}
 8014bc2:	bf00      	nop
 8014bc4:	20013b20 	.word	0x20013b20
 8014bc8:	20013b88 	.word	0x20013b88
 8014bcc:	20013bf0 	.word	0x20013bf0

08014bd0 <global_stdio_init.part.0>:
 8014bd0:	b510      	push	{r4, lr}
 8014bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8014c00 <global_stdio_init.part.0+0x30>)
 8014bd4:	4c0b      	ldr	r4, [pc, #44]	@ (8014c04 <global_stdio_init.part.0+0x34>)
 8014bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8014c08 <global_stdio_init.part.0+0x38>)
 8014bd8:	601a      	str	r2, [r3, #0]
 8014bda:	4620      	mov	r0, r4
 8014bdc:	2200      	movs	r2, #0
 8014bde:	2104      	movs	r1, #4
 8014be0:	f7ff ff94 	bl	8014b0c <std>
 8014be4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014be8:	2201      	movs	r2, #1
 8014bea:	2109      	movs	r1, #9
 8014bec:	f7ff ff8e 	bl	8014b0c <std>
 8014bf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014bf4:	2202      	movs	r2, #2
 8014bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bfa:	2112      	movs	r1, #18
 8014bfc:	f7ff bf86 	b.w	8014b0c <std>
 8014c00:	20013c58 	.word	0x20013c58
 8014c04:	20013b20 	.word	0x20013b20
 8014c08:	08014b79 	.word	0x08014b79

08014c0c <__sfp_lock_acquire>:
 8014c0c:	4801      	ldr	r0, [pc, #4]	@ (8014c14 <__sfp_lock_acquire+0x8>)
 8014c0e:	f000 b9e8 	b.w	8014fe2 <__retarget_lock_acquire_recursive>
 8014c12:	bf00      	nop
 8014c14:	20013c61 	.word	0x20013c61

08014c18 <__sfp_lock_release>:
 8014c18:	4801      	ldr	r0, [pc, #4]	@ (8014c20 <__sfp_lock_release+0x8>)
 8014c1a:	f000 b9e3 	b.w	8014fe4 <__retarget_lock_release_recursive>
 8014c1e:	bf00      	nop
 8014c20:	20013c61 	.word	0x20013c61

08014c24 <__sinit>:
 8014c24:	b510      	push	{r4, lr}
 8014c26:	4604      	mov	r4, r0
 8014c28:	f7ff fff0 	bl	8014c0c <__sfp_lock_acquire>
 8014c2c:	6a23      	ldr	r3, [r4, #32]
 8014c2e:	b11b      	cbz	r3, 8014c38 <__sinit+0x14>
 8014c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c34:	f7ff bff0 	b.w	8014c18 <__sfp_lock_release>
 8014c38:	4b04      	ldr	r3, [pc, #16]	@ (8014c4c <__sinit+0x28>)
 8014c3a:	6223      	str	r3, [r4, #32]
 8014c3c:	4b04      	ldr	r3, [pc, #16]	@ (8014c50 <__sinit+0x2c>)
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d1f5      	bne.n	8014c30 <__sinit+0xc>
 8014c44:	f7ff ffc4 	bl	8014bd0 <global_stdio_init.part.0>
 8014c48:	e7f2      	b.n	8014c30 <__sinit+0xc>
 8014c4a:	bf00      	nop
 8014c4c:	08014b91 	.word	0x08014b91
 8014c50:	20013c58 	.word	0x20013c58

08014c54 <_fwalk_sglue>:
 8014c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c58:	4607      	mov	r7, r0
 8014c5a:	4688      	mov	r8, r1
 8014c5c:	4614      	mov	r4, r2
 8014c5e:	2600      	movs	r6, #0
 8014c60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014c64:	f1b9 0901 	subs.w	r9, r9, #1
 8014c68:	d505      	bpl.n	8014c76 <_fwalk_sglue+0x22>
 8014c6a:	6824      	ldr	r4, [r4, #0]
 8014c6c:	2c00      	cmp	r4, #0
 8014c6e:	d1f7      	bne.n	8014c60 <_fwalk_sglue+0xc>
 8014c70:	4630      	mov	r0, r6
 8014c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c76:	89ab      	ldrh	r3, [r5, #12]
 8014c78:	2b01      	cmp	r3, #1
 8014c7a:	d907      	bls.n	8014c8c <_fwalk_sglue+0x38>
 8014c7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014c80:	3301      	adds	r3, #1
 8014c82:	d003      	beq.n	8014c8c <_fwalk_sglue+0x38>
 8014c84:	4629      	mov	r1, r5
 8014c86:	4638      	mov	r0, r7
 8014c88:	47c0      	blx	r8
 8014c8a:	4306      	orrs	r6, r0
 8014c8c:	3568      	adds	r5, #104	@ 0x68
 8014c8e:	e7e9      	b.n	8014c64 <_fwalk_sglue+0x10>

08014c90 <__sread>:
 8014c90:	b510      	push	{r4, lr}
 8014c92:	460c      	mov	r4, r1
 8014c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c98:	f000 f944 	bl	8014f24 <_read_r>
 8014c9c:	2800      	cmp	r0, #0
 8014c9e:	bfab      	itete	ge
 8014ca0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014ca2:	89a3      	ldrhlt	r3, [r4, #12]
 8014ca4:	181b      	addge	r3, r3, r0
 8014ca6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014caa:	bfac      	ite	ge
 8014cac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014cae:	81a3      	strhlt	r3, [r4, #12]
 8014cb0:	bd10      	pop	{r4, pc}

08014cb2 <__swrite>:
 8014cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cb6:	461f      	mov	r7, r3
 8014cb8:	898b      	ldrh	r3, [r1, #12]
 8014cba:	05db      	lsls	r3, r3, #23
 8014cbc:	4605      	mov	r5, r0
 8014cbe:	460c      	mov	r4, r1
 8014cc0:	4616      	mov	r6, r2
 8014cc2:	d505      	bpl.n	8014cd0 <__swrite+0x1e>
 8014cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cc8:	2302      	movs	r3, #2
 8014cca:	2200      	movs	r2, #0
 8014ccc:	f000 f918 	bl	8014f00 <_lseek_r>
 8014cd0:	89a3      	ldrh	r3, [r4, #12]
 8014cd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014cd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014cda:	81a3      	strh	r3, [r4, #12]
 8014cdc:	4632      	mov	r2, r6
 8014cde:	463b      	mov	r3, r7
 8014ce0:	4628      	mov	r0, r5
 8014ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ce6:	f000 b93f 	b.w	8014f68 <_write_r>

08014cea <__sseek>:
 8014cea:	b510      	push	{r4, lr}
 8014cec:	460c      	mov	r4, r1
 8014cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cf2:	f000 f905 	bl	8014f00 <_lseek_r>
 8014cf6:	1c43      	adds	r3, r0, #1
 8014cf8:	89a3      	ldrh	r3, [r4, #12]
 8014cfa:	bf15      	itete	ne
 8014cfc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014cfe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014d02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014d06:	81a3      	strheq	r3, [r4, #12]
 8014d08:	bf18      	it	ne
 8014d0a:	81a3      	strhne	r3, [r4, #12]
 8014d0c:	bd10      	pop	{r4, pc}

08014d0e <__sclose>:
 8014d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d12:	f000 b887 	b.w	8014e24 <_close_r>

08014d16 <memset>:
 8014d16:	4402      	add	r2, r0
 8014d18:	4603      	mov	r3, r0
 8014d1a:	4293      	cmp	r3, r2
 8014d1c:	d100      	bne.n	8014d20 <memset+0xa>
 8014d1e:	4770      	bx	lr
 8014d20:	f803 1b01 	strb.w	r1, [r3], #1
 8014d24:	e7f9      	b.n	8014d1a <memset+0x4>

08014d26 <strchr>:
 8014d26:	b2c9      	uxtb	r1, r1
 8014d28:	4603      	mov	r3, r0
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d30:	b112      	cbz	r2, 8014d38 <strchr+0x12>
 8014d32:	428a      	cmp	r2, r1
 8014d34:	d1f9      	bne.n	8014d2a <strchr+0x4>
 8014d36:	4770      	bx	lr
 8014d38:	2900      	cmp	r1, #0
 8014d3a:	bf18      	it	ne
 8014d3c:	2000      	movne	r0, #0
 8014d3e:	4770      	bx	lr

08014d40 <strncmp>:
 8014d40:	b510      	push	{r4, lr}
 8014d42:	b16a      	cbz	r2, 8014d60 <strncmp+0x20>
 8014d44:	3901      	subs	r1, #1
 8014d46:	1884      	adds	r4, r0, r2
 8014d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d4c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014d50:	429a      	cmp	r2, r3
 8014d52:	d103      	bne.n	8014d5c <strncmp+0x1c>
 8014d54:	42a0      	cmp	r0, r4
 8014d56:	d001      	beq.n	8014d5c <strncmp+0x1c>
 8014d58:	2a00      	cmp	r2, #0
 8014d5a:	d1f5      	bne.n	8014d48 <strncmp+0x8>
 8014d5c:	1ad0      	subs	r0, r2, r3
 8014d5e:	bd10      	pop	{r4, pc}
 8014d60:	4610      	mov	r0, r2
 8014d62:	e7fc      	b.n	8014d5e <strncmp+0x1e>

08014d64 <strtok>:
 8014d64:	4b16      	ldr	r3, [pc, #88]	@ (8014dc0 <strtok+0x5c>)
 8014d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d6a:	681f      	ldr	r7, [r3, #0]
 8014d6c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8014d6e:	4605      	mov	r5, r0
 8014d70:	460e      	mov	r6, r1
 8014d72:	b9ec      	cbnz	r4, 8014db0 <strtok+0x4c>
 8014d74:	2050      	movs	r0, #80	@ 0x50
 8014d76:	f7fe fb23 	bl	80133c0 <malloc>
 8014d7a:	4602      	mov	r2, r0
 8014d7c:	6478      	str	r0, [r7, #68]	@ 0x44
 8014d7e:	b920      	cbnz	r0, 8014d8a <strtok+0x26>
 8014d80:	4b10      	ldr	r3, [pc, #64]	@ (8014dc4 <strtok+0x60>)
 8014d82:	4811      	ldr	r0, [pc, #68]	@ (8014dc8 <strtok+0x64>)
 8014d84:	215b      	movs	r1, #91	@ 0x5b
 8014d86:	f000 f94f 	bl	8015028 <__assert_func>
 8014d8a:	e9c0 4400 	strd	r4, r4, [r0]
 8014d8e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8014d92:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8014d96:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8014d9a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8014d9e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8014da2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8014da6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8014daa:	6184      	str	r4, [r0, #24]
 8014dac:	7704      	strb	r4, [r0, #28]
 8014dae:	6244      	str	r4, [r0, #36]	@ 0x24
 8014db0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014db2:	4631      	mov	r1, r6
 8014db4:	4628      	mov	r0, r5
 8014db6:	2301      	movs	r3, #1
 8014db8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014dbc:	f000 b806 	b.w	8014dcc <__strtok_r>
 8014dc0:	200003ac 	.word	0x200003ac
 8014dc4:	08019b9e 	.word	0x08019b9e
 8014dc8:	08019bb5 	.word	0x08019bb5

08014dcc <__strtok_r>:
 8014dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014dce:	4604      	mov	r4, r0
 8014dd0:	b908      	cbnz	r0, 8014dd6 <__strtok_r+0xa>
 8014dd2:	6814      	ldr	r4, [r2, #0]
 8014dd4:	b144      	cbz	r4, 8014de8 <__strtok_r+0x1c>
 8014dd6:	4620      	mov	r0, r4
 8014dd8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014ddc:	460f      	mov	r7, r1
 8014dde:	f817 6b01 	ldrb.w	r6, [r7], #1
 8014de2:	b91e      	cbnz	r6, 8014dec <__strtok_r+0x20>
 8014de4:	b965      	cbnz	r5, 8014e00 <__strtok_r+0x34>
 8014de6:	6015      	str	r5, [r2, #0]
 8014de8:	2000      	movs	r0, #0
 8014dea:	e005      	b.n	8014df8 <__strtok_r+0x2c>
 8014dec:	42b5      	cmp	r5, r6
 8014dee:	d1f6      	bne.n	8014dde <__strtok_r+0x12>
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d1f0      	bne.n	8014dd6 <__strtok_r+0xa>
 8014df4:	6014      	str	r4, [r2, #0]
 8014df6:	7003      	strb	r3, [r0, #0]
 8014df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014dfa:	461c      	mov	r4, r3
 8014dfc:	e00c      	b.n	8014e18 <__strtok_r+0x4c>
 8014dfe:	b91d      	cbnz	r5, 8014e08 <__strtok_r+0x3c>
 8014e00:	4627      	mov	r7, r4
 8014e02:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014e06:	460e      	mov	r6, r1
 8014e08:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014e0c:	42ab      	cmp	r3, r5
 8014e0e:	d1f6      	bne.n	8014dfe <__strtok_r+0x32>
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d0f2      	beq.n	8014dfa <__strtok_r+0x2e>
 8014e14:	2300      	movs	r3, #0
 8014e16:	703b      	strb	r3, [r7, #0]
 8014e18:	6014      	str	r4, [r2, #0]
 8014e1a:	e7ed      	b.n	8014df8 <__strtok_r+0x2c>

08014e1c <_localeconv_r>:
 8014e1c:	4800      	ldr	r0, [pc, #0]	@ (8014e20 <_localeconv_r+0x4>)
 8014e1e:	4770      	bx	lr
 8014e20:	20000330 	.word	0x20000330

08014e24 <_close_r>:
 8014e24:	b538      	push	{r3, r4, r5, lr}
 8014e26:	4d06      	ldr	r5, [pc, #24]	@ (8014e40 <_close_r+0x1c>)
 8014e28:	2300      	movs	r3, #0
 8014e2a:	4604      	mov	r4, r0
 8014e2c:	4608      	mov	r0, r1
 8014e2e:	602b      	str	r3, [r5, #0]
 8014e30:	f7ef fcf6 	bl	8004820 <_close>
 8014e34:	1c43      	adds	r3, r0, #1
 8014e36:	d102      	bne.n	8014e3e <_close_r+0x1a>
 8014e38:	682b      	ldr	r3, [r5, #0]
 8014e3a:	b103      	cbz	r3, 8014e3e <_close_r+0x1a>
 8014e3c:	6023      	str	r3, [r4, #0]
 8014e3e:	bd38      	pop	{r3, r4, r5, pc}
 8014e40:	20013c5c 	.word	0x20013c5c

08014e44 <_reclaim_reent>:
 8014e44:	4b2d      	ldr	r3, [pc, #180]	@ (8014efc <_reclaim_reent+0xb8>)
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	4283      	cmp	r3, r0
 8014e4a:	b570      	push	{r4, r5, r6, lr}
 8014e4c:	4604      	mov	r4, r0
 8014e4e:	d053      	beq.n	8014ef8 <_reclaim_reent+0xb4>
 8014e50:	69c3      	ldr	r3, [r0, #28]
 8014e52:	b31b      	cbz	r3, 8014e9c <_reclaim_reent+0x58>
 8014e54:	68db      	ldr	r3, [r3, #12]
 8014e56:	b163      	cbz	r3, 8014e72 <_reclaim_reent+0x2e>
 8014e58:	2500      	movs	r5, #0
 8014e5a:	69e3      	ldr	r3, [r4, #28]
 8014e5c:	68db      	ldr	r3, [r3, #12]
 8014e5e:	5959      	ldr	r1, [r3, r5]
 8014e60:	b9b1      	cbnz	r1, 8014e90 <_reclaim_reent+0x4c>
 8014e62:	3504      	adds	r5, #4
 8014e64:	2d80      	cmp	r5, #128	@ 0x80
 8014e66:	d1f8      	bne.n	8014e5a <_reclaim_reent+0x16>
 8014e68:	69e3      	ldr	r3, [r4, #28]
 8014e6a:	4620      	mov	r0, r4
 8014e6c:	68d9      	ldr	r1, [r3, #12]
 8014e6e:	f000 ff53 	bl	8015d18 <_free_r>
 8014e72:	69e3      	ldr	r3, [r4, #28]
 8014e74:	6819      	ldr	r1, [r3, #0]
 8014e76:	b111      	cbz	r1, 8014e7e <_reclaim_reent+0x3a>
 8014e78:	4620      	mov	r0, r4
 8014e7a:	f000 ff4d 	bl	8015d18 <_free_r>
 8014e7e:	69e3      	ldr	r3, [r4, #28]
 8014e80:	689d      	ldr	r5, [r3, #8]
 8014e82:	b15d      	cbz	r5, 8014e9c <_reclaim_reent+0x58>
 8014e84:	4629      	mov	r1, r5
 8014e86:	4620      	mov	r0, r4
 8014e88:	682d      	ldr	r5, [r5, #0]
 8014e8a:	f000 ff45 	bl	8015d18 <_free_r>
 8014e8e:	e7f8      	b.n	8014e82 <_reclaim_reent+0x3e>
 8014e90:	680e      	ldr	r6, [r1, #0]
 8014e92:	4620      	mov	r0, r4
 8014e94:	f000 ff40 	bl	8015d18 <_free_r>
 8014e98:	4631      	mov	r1, r6
 8014e9a:	e7e1      	b.n	8014e60 <_reclaim_reent+0x1c>
 8014e9c:	6961      	ldr	r1, [r4, #20]
 8014e9e:	b111      	cbz	r1, 8014ea6 <_reclaim_reent+0x62>
 8014ea0:	4620      	mov	r0, r4
 8014ea2:	f000 ff39 	bl	8015d18 <_free_r>
 8014ea6:	69e1      	ldr	r1, [r4, #28]
 8014ea8:	b111      	cbz	r1, 8014eb0 <_reclaim_reent+0x6c>
 8014eaa:	4620      	mov	r0, r4
 8014eac:	f000 ff34 	bl	8015d18 <_free_r>
 8014eb0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014eb2:	b111      	cbz	r1, 8014eba <_reclaim_reent+0x76>
 8014eb4:	4620      	mov	r0, r4
 8014eb6:	f000 ff2f 	bl	8015d18 <_free_r>
 8014eba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014ebc:	b111      	cbz	r1, 8014ec4 <_reclaim_reent+0x80>
 8014ebe:	4620      	mov	r0, r4
 8014ec0:	f000 ff2a 	bl	8015d18 <_free_r>
 8014ec4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8014ec6:	b111      	cbz	r1, 8014ece <_reclaim_reent+0x8a>
 8014ec8:	4620      	mov	r0, r4
 8014eca:	f000 ff25 	bl	8015d18 <_free_r>
 8014ece:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8014ed0:	b111      	cbz	r1, 8014ed8 <_reclaim_reent+0x94>
 8014ed2:	4620      	mov	r0, r4
 8014ed4:	f000 ff20 	bl	8015d18 <_free_r>
 8014ed8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8014eda:	b111      	cbz	r1, 8014ee2 <_reclaim_reent+0x9e>
 8014edc:	4620      	mov	r0, r4
 8014ede:	f000 ff1b 	bl	8015d18 <_free_r>
 8014ee2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014ee4:	b111      	cbz	r1, 8014eec <_reclaim_reent+0xa8>
 8014ee6:	4620      	mov	r0, r4
 8014ee8:	f000 ff16 	bl	8015d18 <_free_r>
 8014eec:	6a23      	ldr	r3, [r4, #32]
 8014eee:	b11b      	cbz	r3, 8014ef8 <_reclaim_reent+0xb4>
 8014ef0:	4620      	mov	r0, r4
 8014ef2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ef6:	4718      	bx	r3
 8014ef8:	bd70      	pop	{r4, r5, r6, pc}
 8014efa:	bf00      	nop
 8014efc:	200003ac 	.word	0x200003ac

08014f00 <_lseek_r>:
 8014f00:	b538      	push	{r3, r4, r5, lr}
 8014f02:	4d07      	ldr	r5, [pc, #28]	@ (8014f20 <_lseek_r+0x20>)
 8014f04:	4604      	mov	r4, r0
 8014f06:	4608      	mov	r0, r1
 8014f08:	4611      	mov	r1, r2
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	602a      	str	r2, [r5, #0]
 8014f0e:	461a      	mov	r2, r3
 8014f10:	f7ef fcad 	bl	800486e <_lseek>
 8014f14:	1c43      	adds	r3, r0, #1
 8014f16:	d102      	bne.n	8014f1e <_lseek_r+0x1e>
 8014f18:	682b      	ldr	r3, [r5, #0]
 8014f1a:	b103      	cbz	r3, 8014f1e <_lseek_r+0x1e>
 8014f1c:	6023      	str	r3, [r4, #0]
 8014f1e:	bd38      	pop	{r3, r4, r5, pc}
 8014f20:	20013c5c 	.word	0x20013c5c

08014f24 <_read_r>:
 8014f24:	b538      	push	{r3, r4, r5, lr}
 8014f26:	4d07      	ldr	r5, [pc, #28]	@ (8014f44 <_read_r+0x20>)
 8014f28:	4604      	mov	r4, r0
 8014f2a:	4608      	mov	r0, r1
 8014f2c:	4611      	mov	r1, r2
 8014f2e:	2200      	movs	r2, #0
 8014f30:	602a      	str	r2, [r5, #0]
 8014f32:	461a      	mov	r2, r3
 8014f34:	f7ef fc3b 	bl	80047ae <_read>
 8014f38:	1c43      	adds	r3, r0, #1
 8014f3a:	d102      	bne.n	8014f42 <_read_r+0x1e>
 8014f3c:	682b      	ldr	r3, [r5, #0]
 8014f3e:	b103      	cbz	r3, 8014f42 <_read_r+0x1e>
 8014f40:	6023      	str	r3, [r4, #0]
 8014f42:	bd38      	pop	{r3, r4, r5, pc}
 8014f44:	20013c5c 	.word	0x20013c5c

08014f48 <_sbrk_r>:
 8014f48:	b538      	push	{r3, r4, r5, lr}
 8014f4a:	4d06      	ldr	r5, [pc, #24]	@ (8014f64 <_sbrk_r+0x1c>)
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	4604      	mov	r4, r0
 8014f50:	4608      	mov	r0, r1
 8014f52:	602b      	str	r3, [r5, #0]
 8014f54:	f7ef fc98 	bl	8004888 <_sbrk>
 8014f58:	1c43      	adds	r3, r0, #1
 8014f5a:	d102      	bne.n	8014f62 <_sbrk_r+0x1a>
 8014f5c:	682b      	ldr	r3, [r5, #0]
 8014f5e:	b103      	cbz	r3, 8014f62 <_sbrk_r+0x1a>
 8014f60:	6023      	str	r3, [r4, #0]
 8014f62:	bd38      	pop	{r3, r4, r5, pc}
 8014f64:	20013c5c 	.word	0x20013c5c

08014f68 <_write_r>:
 8014f68:	b538      	push	{r3, r4, r5, lr}
 8014f6a:	4d07      	ldr	r5, [pc, #28]	@ (8014f88 <_write_r+0x20>)
 8014f6c:	4604      	mov	r4, r0
 8014f6e:	4608      	mov	r0, r1
 8014f70:	4611      	mov	r1, r2
 8014f72:	2200      	movs	r2, #0
 8014f74:	602a      	str	r2, [r5, #0]
 8014f76:	461a      	mov	r2, r3
 8014f78:	f7ef fc36 	bl	80047e8 <_write>
 8014f7c:	1c43      	adds	r3, r0, #1
 8014f7e:	d102      	bne.n	8014f86 <_write_r+0x1e>
 8014f80:	682b      	ldr	r3, [r5, #0]
 8014f82:	b103      	cbz	r3, 8014f86 <_write_r+0x1e>
 8014f84:	6023      	str	r3, [r4, #0]
 8014f86:	bd38      	pop	{r3, r4, r5, pc}
 8014f88:	20013c5c 	.word	0x20013c5c

08014f8c <__errno>:
 8014f8c:	4b01      	ldr	r3, [pc, #4]	@ (8014f94 <__errno+0x8>)
 8014f8e:	6818      	ldr	r0, [r3, #0]
 8014f90:	4770      	bx	lr
 8014f92:	bf00      	nop
 8014f94:	200003ac 	.word	0x200003ac

08014f98 <__libc_init_array>:
 8014f98:	b570      	push	{r4, r5, r6, lr}
 8014f9a:	4d0d      	ldr	r5, [pc, #52]	@ (8014fd0 <__libc_init_array+0x38>)
 8014f9c:	4c0d      	ldr	r4, [pc, #52]	@ (8014fd4 <__libc_init_array+0x3c>)
 8014f9e:	1b64      	subs	r4, r4, r5
 8014fa0:	10a4      	asrs	r4, r4, #2
 8014fa2:	2600      	movs	r6, #0
 8014fa4:	42a6      	cmp	r6, r4
 8014fa6:	d109      	bne.n	8014fbc <__libc_init_array+0x24>
 8014fa8:	4d0b      	ldr	r5, [pc, #44]	@ (8014fd8 <__libc_init_array+0x40>)
 8014faa:	4c0c      	ldr	r4, [pc, #48]	@ (8014fdc <__libc_init_array+0x44>)
 8014fac:	f003 ff8c 	bl	8018ec8 <_init>
 8014fb0:	1b64      	subs	r4, r4, r5
 8014fb2:	10a4      	asrs	r4, r4, #2
 8014fb4:	2600      	movs	r6, #0
 8014fb6:	42a6      	cmp	r6, r4
 8014fb8:	d105      	bne.n	8014fc6 <__libc_init_array+0x2e>
 8014fba:	bd70      	pop	{r4, r5, r6, pc}
 8014fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8014fc0:	4798      	blx	r3
 8014fc2:	3601      	adds	r6, #1
 8014fc4:	e7ee      	b.n	8014fa4 <__libc_init_array+0xc>
 8014fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8014fca:	4798      	blx	r3
 8014fcc:	3601      	adds	r6, #1
 8014fce:	e7f2      	b.n	8014fb6 <__libc_init_array+0x1e>
 8014fd0:	0801a258 	.word	0x0801a258
 8014fd4:	0801a258 	.word	0x0801a258
 8014fd8:	0801a258 	.word	0x0801a258
 8014fdc:	0801a25c 	.word	0x0801a25c

08014fe0 <__retarget_lock_init_recursive>:
 8014fe0:	4770      	bx	lr

08014fe2 <__retarget_lock_acquire_recursive>:
 8014fe2:	4770      	bx	lr

08014fe4 <__retarget_lock_release_recursive>:
 8014fe4:	4770      	bx	lr

08014fe6 <strcpy>:
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014fec:	f803 2b01 	strb.w	r2, [r3], #1
 8014ff0:	2a00      	cmp	r2, #0
 8014ff2:	d1f9      	bne.n	8014fe8 <strcpy+0x2>
 8014ff4:	4770      	bx	lr

08014ff6 <memcpy>:
 8014ff6:	440a      	add	r2, r1
 8014ff8:	4291      	cmp	r1, r2
 8014ffa:	f100 33ff 	add.w	r3, r0, #4294967295
 8014ffe:	d100      	bne.n	8015002 <memcpy+0xc>
 8015000:	4770      	bx	lr
 8015002:	b510      	push	{r4, lr}
 8015004:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015008:	f803 4f01 	strb.w	r4, [r3, #1]!
 801500c:	4291      	cmp	r1, r2
 801500e:	d1f9      	bne.n	8015004 <memcpy+0xe>
 8015010:	bd10      	pop	{r4, pc}
 8015012:	0000      	movs	r0, r0
 8015014:	0000      	movs	r0, r0
	...

08015018 <nan>:
 8015018:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015020 <nan+0x8>
 801501c:	4770      	bx	lr
 801501e:	bf00      	nop
 8015020:	00000000 	.word	0x00000000
 8015024:	7ff80000 	.word	0x7ff80000

08015028 <__assert_func>:
 8015028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801502a:	4614      	mov	r4, r2
 801502c:	461a      	mov	r2, r3
 801502e:	4b09      	ldr	r3, [pc, #36]	@ (8015054 <__assert_func+0x2c>)
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	4605      	mov	r5, r0
 8015034:	68d8      	ldr	r0, [r3, #12]
 8015036:	b14c      	cbz	r4, 801504c <__assert_func+0x24>
 8015038:	4b07      	ldr	r3, [pc, #28]	@ (8015058 <__assert_func+0x30>)
 801503a:	9100      	str	r1, [sp, #0]
 801503c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015040:	4906      	ldr	r1, [pc, #24]	@ (801505c <__assert_func+0x34>)
 8015042:	462b      	mov	r3, r5
 8015044:	f001 ff62 	bl	8016f0c <fiprintf>
 8015048:	f001 ff72 	bl	8016f30 <abort>
 801504c:	4b04      	ldr	r3, [pc, #16]	@ (8015060 <__assert_func+0x38>)
 801504e:	461c      	mov	r4, r3
 8015050:	e7f3      	b.n	801503a <__assert_func+0x12>
 8015052:	bf00      	nop
 8015054:	200003ac 	.word	0x200003ac
 8015058:	08019c17 	.word	0x08019c17
 801505c:	08019c24 	.word	0x08019c24
 8015060:	08019c52 	.word	0x08019c52

08015064 <quorem>:
 8015064:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015068:	6903      	ldr	r3, [r0, #16]
 801506a:	690c      	ldr	r4, [r1, #16]
 801506c:	42a3      	cmp	r3, r4
 801506e:	4607      	mov	r7, r0
 8015070:	db7e      	blt.n	8015170 <quorem+0x10c>
 8015072:	3c01      	subs	r4, #1
 8015074:	f101 0814 	add.w	r8, r1, #20
 8015078:	00a3      	lsls	r3, r4, #2
 801507a:	f100 0514 	add.w	r5, r0, #20
 801507e:	9300      	str	r3, [sp, #0]
 8015080:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015084:	9301      	str	r3, [sp, #4]
 8015086:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801508a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801508e:	3301      	adds	r3, #1
 8015090:	429a      	cmp	r2, r3
 8015092:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015096:	fbb2 f6f3 	udiv	r6, r2, r3
 801509a:	d32e      	bcc.n	80150fa <quorem+0x96>
 801509c:	f04f 0a00 	mov.w	sl, #0
 80150a0:	46c4      	mov	ip, r8
 80150a2:	46ae      	mov	lr, r5
 80150a4:	46d3      	mov	fp, sl
 80150a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80150aa:	b298      	uxth	r0, r3
 80150ac:	fb06 a000 	mla	r0, r6, r0, sl
 80150b0:	0c02      	lsrs	r2, r0, #16
 80150b2:	0c1b      	lsrs	r3, r3, #16
 80150b4:	fb06 2303 	mla	r3, r6, r3, r2
 80150b8:	f8de 2000 	ldr.w	r2, [lr]
 80150bc:	b280      	uxth	r0, r0
 80150be:	b292      	uxth	r2, r2
 80150c0:	1a12      	subs	r2, r2, r0
 80150c2:	445a      	add	r2, fp
 80150c4:	f8de 0000 	ldr.w	r0, [lr]
 80150c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80150cc:	b29b      	uxth	r3, r3
 80150ce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80150d2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80150d6:	b292      	uxth	r2, r2
 80150d8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80150dc:	45e1      	cmp	r9, ip
 80150de:	f84e 2b04 	str.w	r2, [lr], #4
 80150e2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80150e6:	d2de      	bcs.n	80150a6 <quorem+0x42>
 80150e8:	9b00      	ldr	r3, [sp, #0]
 80150ea:	58eb      	ldr	r3, [r5, r3]
 80150ec:	b92b      	cbnz	r3, 80150fa <quorem+0x96>
 80150ee:	9b01      	ldr	r3, [sp, #4]
 80150f0:	3b04      	subs	r3, #4
 80150f2:	429d      	cmp	r5, r3
 80150f4:	461a      	mov	r2, r3
 80150f6:	d32f      	bcc.n	8015158 <quorem+0xf4>
 80150f8:	613c      	str	r4, [r7, #16]
 80150fa:	4638      	mov	r0, r7
 80150fc:	f001 fc5e 	bl	80169bc <__mcmp>
 8015100:	2800      	cmp	r0, #0
 8015102:	db25      	blt.n	8015150 <quorem+0xec>
 8015104:	4629      	mov	r1, r5
 8015106:	2000      	movs	r0, #0
 8015108:	f858 2b04 	ldr.w	r2, [r8], #4
 801510c:	f8d1 c000 	ldr.w	ip, [r1]
 8015110:	fa1f fe82 	uxth.w	lr, r2
 8015114:	fa1f f38c 	uxth.w	r3, ip
 8015118:	eba3 030e 	sub.w	r3, r3, lr
 801511c:	4403      	add	r3, r0
 801511e:	0c12      	lsrs	r2, r2, #16
 8015120:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8015124:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8015128:	b29b      	uxth	r3, r3
 801512a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801512e:	45c1      	cmp	r9, r8
 8015130:	f841 3b04 	str.w	r3, [r1], #4
 8015134:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015138:	d2e6      	bcs.n	8015108 <quorem+0xa4>
 801513a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801513e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015142:	b922      	cbnz	r2, 801514e <quorem+0xea>
 8015144:	3b04      	subs	r3, #4
 8015146:	429d      	cmp	r5, r3
 8015148:	461a      	mov	r2, r3
 801514a:	d30b      	bcc.n	8015164 <quorem+0x100>
 801514c:	613c      	str	r4, [r7, #16]
 801514e:	3601      	adds	r6, #1
 8015150:	4630      	mov	r0, r6
 8015152:	b003      	add	sp, #12
 8015154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015158:	6812      	ldr	r2, [r2, #0]
 801515a:	3b04      	subs	r3, #4
 801515c:	2a00      	cmp	r2, #0
 801515e:	d1cb      	bne.n	80150f8 <quorem+0x94>
 8015160:	3c01      	subs	r4, #1
 8015162:	e7c6      	b.n	80150f2 <quorem+0x8e>
 8015164:	6812      	ldr	r2, [r2, #0]
 8015166:	3b04      	subs	r3, #4
 8015168:	2a00      	cmp	r2, #0
 801516a:	d1ef      	bne.n	801514c <quorem+0xe8>
 801516c:	3c01      	subs	r4, #1
 801516e:	e7ea      	b.n	8015146 <quorem+0xe2>
 8015170:	2000      	movs	r0, #0
 8015172:	e7ee      	b.n	8015152 <quorem+0xee>
 8015174:	0000      	movs	r0, r0
	...

08015178 <_dtoa_r>:
 8015178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801517c:	69c7      	ldr	r7, [r0, #28]
 801517e:	b097      	sub	sp, #92	@ 0x5c
 8015180:	ed8d 0b04 	vstr	d0, [sp, #16]
 8015184:	ec55 4b10 	vmov	r4, r5, d0
 8015188:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801518a:	9107      	str	r1, [sp, #28]
 801518c:	4681      	mov	r9, r0
 801518e:	920c      	str	r2, [sp, #48]	@ 0x30
 8015190:	9311      	str	r3, [sp, #68]	@ 0x44
 8015192:	b97f      	cbnz	r7, 80151b4 <_dtoa_r+0x3c>
 8015194:	2010      	movs	r0, #16
 8015196:	f7fe f913 	bl	80133c0 <malloc>
 801519a:	4602      	mov	r2, r0
 801519c:	f8c9 001c 	str.w	r0, [r9, #28]
 80151a0:	b920      	cbnz	r0, 80151ac <_dtoa_r+0x34>
 80151a2:	4ba9      	ldr	r3, [pc, #676]	@ (8015448 <_dtoa_r+0x2d0>)
 80151a4:	21ef      	movs	r1, #239	@ 0xef
 80151a6:	48a9      	ldr	r0, [pc, #676]	@ (801544c <_dtoa_r+0x2d4>)
 80151a8:	f7ff ff3e 	bl	8015028 <__assert_func>
 80151ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80151b0:	6007      	str	r7, [r0, #0]
 80151b2:	60c7      	str	r7, [r0, #12]
 80151b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80151b8:	6819      	ldr	r1, [r3, #0]
 80151ba:	b159      	cbz	r1, 80151d4 <_dtoa_r+0x5c>
 80151bc:	685a      	ldr	r2, [r3, #4]
 80151be:	604a      	str	r2, [r1, #4]
 80151c0:	2301      	movs	r3, #1
 80151c2:	4093      	lsls	r3, r2
 80151c4:	608b      	str	r3, [r1, #8]
 80151c6:	4648      	mov	r0, r9
 80151c8:	f001 f97c 	bl	80164c4 <_Bfree>
 80151cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80151d0:	2200      	movs	r2, #0
 80151d2:	601a      	str	r2, [r3, #0]
 80151d4:	1e2b      	subs	r3, r5, #0
 80151d6:	bfb9      	ittee	lt
 80151d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80151dc:	9305      	strlt	r3, [sp, #20]
 80151de:	2300      	movge	r3, #0
 80151e0:	6033      	strge	r3, [r6, #0]
 80151e2:	9f05      	ldr	r7, [sp, #20]
 80151e4:	4b9a      	ldr	r3, [pc, #616]	@ (8015450 <_dtoa_r+0x2d8>)
 80151e6:	bfbc      	itt	lt
 80151e8:	2201      	movlt	r2, #1
 80151ea:	6032      	strlt	r2, [r6, #0]
 80151ec:	43bb      	bics	r3, r7
 80151ee:	d112      	bne.n	8015216 <_dtoa_r+0x9e>
 80151f0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80151f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80151f6:	6013      	str	r3, [r2, #0]
 80151f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80151fc:	4323      	orrs	r3, r4
 80151fe:	f000 855a 	beq.w	8015cb6 <_dtoa_r+0xb3e>
 8015202:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015204:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8015464 <_dtoa_r+0x2ec>
 8015208:	2b00      	cmp	r3, #0
 801520a:	f000 855c 	beq.w	8015cc6 <_dtoa_r+0xb4e>
 801520e:	f10a 0303 	add.w	r3, sl, #3
 8015212:	f000 bd56 	b.w	8015cc2 <_dtoa_r+0xb4a>
 8015216:	ed9d 7b04 	vldr	d7, [sp, #16]
 801521a:	2200      	movs	r2, #0
 801521c:	ec51 0b17 	vmov	r0, r1, d7
 8015220:	2300      	movs	r3, #0
 8015222:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8015226:	f7eb fc5f 	bl	8000ae8 <__aeabi_dcmpeq>
 801522a:	4680      	mov	r8, r0
 801522c:	b158      	cbz	r0, 8015246 <_dtoa_r+0xce>
 801522e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015230:	2301      	movs	r3, #1
 8015232:	6013      	str	r3, [r2, #0]
 8015234:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015236:	b113      	cbz	r3, 801523e <_dtoa_r+0xc6>
 8015238:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801523a:	4b86      	ldr	r3, [pc, #536]	@ (8015454 <_dtoa_r+0x2dc>)
 801523c:	6013      	str	r3, [r2, #0]
 801523e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8015468 <_dtoa_r+0x2f0>
 8015242:	f000 bd40 	b.w	8015cc6 <_dtoa_r+0xb4e>
 8015246:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801524a:	aa14      	add	r2, sp, #80	@ 0x50
 801524c:	a915      	add	r1, sp, #84	@ 0x54
 801524e:	4648      	mov	r0, r9
 8015250:	f001 fcd4 	bl	8016bfc <__d2b>
 8015254:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8015258:	9002      	str	r0, [sp, #8]
 801525a:	2e00      	cmp	r6, #0
 801525c:	d078      	beq.n	8015350 <_dtoa_r+0x1d8>
 801525e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015260:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8015264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015268:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801526c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8015270:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8015274:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8015278:	4619      	mov	r1, r3
 801527a:	2200      	movs	r2, #0
 801527c:	4b76      	ldr	r3, [pc, #472]	@ (8015458 <_dtoa_r+0x2e0>)
 801527e:	f7eb f813 	bl	80002a8 <__aeabi_dsub>
 8015282:	a36b      	add	r3, pc, #428	@ (adr r3, 8015430 <_dtoa_r+0x2b8>)
 8015284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015288:	f7eb f9c6 	bl	8000618 <__aeabi_dmul>
 801528c:	a36a      	add	r3, pc, #424	@ (adr r3, 8015438 <_dtoa_r+0x2c0>)
 801528e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015292:	f7eb f80b 	bl	80002ac <__adddf3>
 8015296:	4604      	mov	r4, r0
 8015298:	4630      	mov	r0, r6
 801529a:	460d      	mov	r5, r1
 801529c:	f7eb f952 	bl	8000544 <__aeabi_i2d>
 80152a0:	a367      	add	r3, pc, #412	@ (adr r3, 8015440 <_dtoa_r+0x2c8>)
 80152a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152a6:	f7eb f9b7 	bl	8000618 <__aeabi_dmul>
 80152aa:	4602      	mov	r2, r0
 80152ac:	460b      	mov	r3, r1
 80152ae:	4620      	mov	r0, r4
 80152b0:	4629      	mov	r1, r5
 80152b2:	f7ea fffb 	bl	80002ac <__adddf3>
 80152b6:	4604      	mov	r4, r0
 80152b8:	460d      	mov	r5, r1
 80152ba:	f7eb fc5d 	bl	8000b78 <__aeabi_d2iz>
 80152be:	2200      	movs	r2, #0
 80152c0:	4607      	mov	r7, r0
 80152c2:	2300      	movs	r3, #0
 80152c4:	4620      	mov	r0, r4
 80152c6:	4629      	mov	r1, r5
 80152c8:	f7eb fc18 	bl	8000afc <__aeabi_dcmplt>
 80152cc:	b140      	cbz	r0, 80152e0 <_dtoa_r+0x168>
 80152ce:	4638      	mov	r0, r7
 80152d0:	f7eb f938 	bl	8000544 <__aeabi_i2d>
 80152d4:	4622      	mov	r2, r4
 80152d6:	462b      	mov	r3, r5
 80152d8:	f7eb fc06 	bl	8000ae8 <__aeabi_dcmpeq>
 80152dc:	b900      	cbnz	r0, 80152e0 <_dtoa_r+0x168>
 80152de:	3f01      	subs	r7, #1
 80152e0:	2f16      	cmp	r7, #22
 80152e2:	d852      	bhi.n	801538a <_dtoa_r+0x212>
 80152e4:	4b5d      	ldr	r3, [pc, #372]	@ (801545c <_dtoa_r+0x2e4>)
 80152e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80152ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80152f2:	f7eb fc03 	bl	8000afc <__aeabi_dcmplt>
 80152f6:	2800      	cmp	r0, #0
 80152f8:	d049      	beq.n	801538e <_dtoa_r+0x216>
 80152fa:	3f01      	subs	r7, #1
 80152fc:	2300      	movs	r3, #0
 80152fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8015300:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8015302:	1b9b      	subs	r3, r3, r6
 8015304:	1e5a      	subs	r2, r3, #1
 8015306:	bf45      	ittet	mi
 8015308:	f1c3 0301 	rsbmi	r3, r3, #1
 801530c:	9300      	strmi	r3, [sp, #0]
 801530e:	2300      	movpl	r3, #0
 8015310:	2300      	movmi	r3, #0
 8015312:	9206      	str	r2, [sp, #24]
 8015314:	bf54      	ite	pl
 8015316:	9300      	strpl	r3, [sp, #0]
 8015318:	9306      	strmi	r3, [sp, #24]
 801531a:	2f00      	cmp	r7, #0
 801531c:	db39      	blt.n	8015392 <_dtoa_r+0x21a>
 801531e:	9b06      	ldr	r3, [sp, #24]
 8015320:	970d      	str	r7, [sp, #52]	@ 0x34
 8015322:	443b      	add	r3, r7
 8015324:	9306      	str	r3, [sp, #24]
 8015326:	2300      	movs	r3, #0
 8015328:	9308      	str	r3, [sp, #32]
 801532a:	9b07      	ldr	r3, [sp, #28]
 801532c:	2b09      	cmp	r3, #9
 801532e:	d863      	bhi.n	80153f8 <_dtoa_r+0x280>
 8015330:	2b05      	cmp	r3, #5
 8015332:	bfc4      	itt	gt
 8015334:	3b04      	subgt	r3, #4
 8015336:	9307      	strgt	r3, [sp, #28]
 8015338:	9b07      	ldr	r3, [sp, #28]
 801533a:	f1a3 0302 	sub.w	r3, r3, #2
 801533e:	bfcc      	ite	gt
 8015340:	2400      	movgt	r4, #0
 8015342:	2401      	movle	r4, #1
 8015344:	2b03      	cmp	r3, #3
 8015346:	d863      	bhi.n	8015410 <_dtoa_r+0x298>
 8015348:	e8df f003 	tbb	[pc, r3]
 801534c:	2b375452 	.word	0x2b375452
 8015350:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8015354:	441e      	add	r6, r3
 8015356:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801535a:	2b20      	cmp	r3, #32
 801535c:	bfc1      	itttt	gt
 801535e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8015362:	409f      	lslgt	r7, r3
 8015364:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8015368:	fa24 f303 	lsrgt.w	r3, r4, r3
 801536c:	bfd6      	itet	le
 801536e:	f1c3 0320 	rsble	r3, r3, #32
 8015372:	ea47 0003 	orrgt.w	r0, r7, r3
 8015376:	fa04 f003 	lslle.w	r0, r4, r3
 801537a:	f7eb f8d3 	bl	8000524 <__aeabi_ui2d>
 801537e:	2201      	movs	r2, #1
 8015380:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8015384:	3e01      	subs	r6, #1
 8015386:	9212      	str	r2, [sp, #72]	@ 0x48
 8015388:	e776      	b.n	8015278 <_dtoa_r+0x100>
 801538a:	2301      	movs	r3, #1
 801538c:	e7b7      	b.n	80152fe <_dtoa_r+0x186>
 801538e:	9010      	str	r0, [sp, #64]	@ 0x40
 8015390:	e7b6      	b.n	8015300 <_dtoa_r+0x188>
 8015392:	9b00      	ldr	r3, [sp, #0]
 8015394:	1bdb      	subs	r3, r3, r7
 8015396:	9300      	str	r3, [sp, #0]
 8015398:	427b      	negs	r3, r7
 801539a:	9308      	str	r3, [sp, #32]
 801539c:	2300      	movs	r3, #0
 801539e:	930d      	str	r3, [sp, #52]	@ 0x34
 80153a0:	e7c3      	b.n	801532a <_dtoa_r+0x1b2>
 80153a2:	2301      	movs	r3, #1
 80153a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80153a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80153a8:	eb07 0b03 	add.w	fp, r7, r3
 80153ac:	f10b 0301 	add.w	r3, fp, #1
 80153b0:	2b01      	cmp	r3, #1
 80153b2:	9303      	str	r3, [sp, #12]
 80153b4:	bfb8      	it	lt
 80153b6:	2301      	movlt	r3, #1
 80153b8:	e006      	b.n	80153c8 <_dtoa_r+0x250>
 80153ba:	2301      	movs	r3, #1
 80153bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80153be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	dd28      	ble.n	8015416 <_dtoa_r+0x29e>
 80153c4:	469b      	mov	fp, r3
 80153c6:	9303      	str	r3, [sp, #12]
 80153c8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80153cc:	2100      	movs	r1, #0
 80153ce:	2204      	movs	r2, #4
 80153d0:	f102 0514 	add.w	r5, r2, #20
 80153d4:	429d      	cmp	r5, r3
 80153d6:	d926      	bls.n	8015426 <_dtoa_r+0x2ae>
 80153d8:	6041      	str	r1, [r0, #4]
 80153da:	4648      	mov	r0, r9
 80153dc:	f001 f832 	bl	8016444 <_Balloc>
 80153e0:	4682      	mov	sl, r0
 80153e2:	2800      	cmp	r0, #0
 80153e4:	d142      	bne.n	801546c <_dtoa_r+0x2f4>
 80153e6:	4b1e      	ldr	r3, [pc, #120]	@ (8015460 <_dtoa_r+0x2e8>)
 80153e8:	4602      	mov	r2, r0
 80153ea:	f240 11af 	movw	r1, #431	@ 0x1af
 80153ee:	e6da      	b.n	80151a6 <_dtoa_r+0x2e>
 80153f0:	2300      	movs	r3, #0
 80153f2:	e7e3      	b.n	80153bc <_dtoa_r+0x244>
 80153f4:	2300      	movs	r3, #0
 80153f6:	e7d5      	b.n	80153a4 <_dtoa_r+0x22c>
 80153f8:	2401      	movs	r4, #1
 80153fa:	2300      	movs	r3, #0
 80153fc:	9307      	str	r3, [sp, #28]
 80153fe:	9409      	str	r4, [sp, #36]	@ 0x24
 8015400:	f04f 3bff 	mov.w	fp, #4294967295
 8015404:	2200      	movs	r2, #0
 8015406:	f8cd b00c 	str.w	fp, [sp, #12]
 801540a:	2312      	movs	r3, #18
 801540c:	920c      	str	r2, [sp, #48]	@ 0x30
 801540e:	e7db      	b.n	80153c8 <_dtoa_r+0x250>
 8015410:	2301      	movs	r3, #1
 8015412:	9309      	str	r3, [sp, #36]	@ 0x24
 8015414:	e7f4      	b.n	8015400 <_dtoa_r+0x288>
 8015416:	f04f 0b01 	mov.w	fp, #1
 801541a:	f8cd b00c 	str.w	fp, [sp, #12]
 801541e:	465b      	mov	r3, fp
 8015420:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8015424:	e7d0      	b.n	80153c8 <_dtoa_r+0x250>
 8015426:	3101      	adds	r1, #1
 8015428:	0052      	lsls	r2, r2, #1
 801542a:	e7d1      	b.n	80153d0 <_dtoa_r+0x258>
 801542c:	f3af 8000 	nop.w
 8015430:	636f4361 	.word	0x636f4361
 8015434:	3fd287a7 	.word	0x3fd287a7
 8015438:	8b60c8b3 	.word	0x8b60c8b3
 801543c:	3fc68a28 	.word	0x3fc68a28
 8015440:	509f79fb 	.word	0x509f79fb
 8015444:	3fd34413 	.word	0x3fd34413
 8015448:	08019b9e 	.word	0x08019b9e
 801544c:	08019c60 	.word	0x08019c60
 8015450:	7ff00000 	.word	0x7ff00000
 8015454:	08019b7b 	.word	0x08019b7b
 8015458:	3ff80000 	.word	0x3ff80000
 801545c:	08019f20 	.word	0x08019f20
 8015460:	08019cb8 	.word	0x08019cb8
 8015464:	08019c5c 	.word	0x08019c5c
 8015468:	08019b7a 	.word	0x08019b7a
 801546c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015470:	6018      	str	r0, [r3, #0]
 8015472:	9b03      	ldr	r3, [sp, #12]
 8015474:	2b0e      	cmp	r3, #14
 8015476:	f200 80a1 	bhi.w	80155bc <_dtoa_r+0x444>
 801547a:	2c00      	cmp	r4, #0
 801547c:	f000 809e 	beq.w	80155bc <_dtoa_r+0x444>
 8015480:	2f00      	cmp	r7, #0
 8015482:	dd33      	ble.n	80154ec <_dtoa_r+0x374>
 8015484:	4b9c      	ldr	r3, [pc, #624]	@ (80156f8 <_dtoa_r+0x580>)
 8015486:	f007 020f 	and.w	r2, r7, #15
 801548a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801548e:	ed93 7b00 	vldr	d7, [r3]
 8015492:	05f8      	lsls	r0, r7, #23
 8015494:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8015498:	ea4f 1427 	mov.w	r4, r7, asr #4
 801549c:	d516      	bpl.n	80154cc <_dtoa_r+0x354>
 801549e:	4b97      	ldr	r3, [pc, #604]	@ (80156fc <_dtoa_r+0x584>)
 80154a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80154a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80154a8:	f7eb f9e0 	bl	800086c <__aeabi_ddiv>
 80154ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80154b0:	f004 040f 	and.w	r4, r4, #15
 80154b4:	2603      	movs	r6, #3
 80154b6:	4d91      	ldr	r5, [pc, #580]	@ (80156fc <_dtoa_r+0x584>)
 80154b8:	b954      	cbnz	r4, 80154d0 <_dtoa_r+0x358>
 80154ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80154be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80154c2:	f7eb f9d3 	bl	800086c <__aeabi_ddiv>
 80154c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80154ca:	e028      	b.n	801551e <_dtoa_r+0x3a6>
 80154cc:	2602      	movs	r6, #2
 80154ce:	e7f2      	b.n	80154b6 <_dtoa_r+0x33e>
 80154d0:	07e1      	lsls	r1, r4, #31
 80154d2:	d508      	bpl.n	80154e6 <_dtoa_r+0x36e>
 80154d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80154d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80154dc:	f7eb f89c 	bl	8000618 <__aeabi_dmul>
 80154e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80154e4:	3601      	adds	r6, #1
 80154e6:	1064      	asrs	r4, r4, #1
 80154e8:	3508      	adds	r5, #8
 80154ea:	e7e5      	b.n	80154b8 <_dtoa_r+0x340>
 80154ec:	f000 80af 	beq.w	801564e <_dtoa_r+0x4d6>
 80154f0:	427c      	negs	r4, r7
 80154f2:	4b81      	ldr	r3, [pc, #516]	@ (80156f8 <_dtoa_r+0x580>)
 80154f4:	4d81      	ldr	r5, [pc, #516]	@ (80156fc <_dtoa_r+0x584>)
 80154f6:	f004 020f 	and.w	r2, r4, #15
 80154fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80154fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015502:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015506:	f7eb f887 	bl	8000618 <__aeabi_dmul>
 801550a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801550e:	1124      	asrs	r4, r4, #4
 8015510:	2300      	movs	r3, #0
 8015512:	2602      	movs	r6, #2
 8015514:	2c00      	cmp	r4, #0
 8015516:	f040 808f 	bne.w	8015638 <_dtoa_r+0x4c0>
 801551a:	2b00      	cmp	r3, #0
 801551c:	d1d3      	bne.n	80154c6 <_dtoa_r+0x34e>
 801551e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015520:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8015524:	2b00      	cmp	r3, #0
 8015526:	f000 8094 	beq.w	8015652 <_dtoa_r+0x4da>
 801552a:	4b75      	ldr	r3, [pc, #468]	@ (8015700 <_dtoa_r+0x588>)
 801552c:	2200      	movs	r2, #0
 801552e:	4620      	mov	r0, r4
 8015530:	4629      	mov	r1, r5
 8015532:	f7eb fae3 	bl	8000afc <__aeabi_dcmplt>
 8015536:	2800      	cmp	r0, #0
 8015538:	f000 808b 	beq.w	8015652 <_dtoa_r+0x4da>
 801553c:	9b03      	ldr	r3, [sp, #12]
 801553e:	2b00      	cmp	r3, #0
 8015540:	f000 8087 	beq.w	8015652 <_dtoa_r+0x4da>
 8015544:	f1bb 0f00 	cmp.w	fp, #0
 8015548:	dd34      	ble.n	80155b4 <_dtoa_r+0x43c>
 801554a:	4620      	mov	r0, r4
 801554c:	4b6d      	ldr	r3, [pc, #436]	@ (8015704 <_dtoa_r+0x58c>)
 801554e:	2200      	movs	r2, #0
 8015550:	4629      	mov	r1, r5
 8015552:	f7eb f861 	bl	8000618 <__aeabi_dmul>
 8015556:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801555a:	f107 38ff 	add.w	r8, r7, #4294967295
 801555e:	3601      	adds	r6, #1
 8015560:	465c      	mov	r4, fp
 8015562:	4630      	mov	r0, r6
 8015564:	f7ea ffee 	bl	8000544 <__aeabi_i2d>
 8015568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801556c:	f7eb f854 	bl	8000618 <__aeabi_dmul>
 8015570:	4b65      	ldr	r3, [pc, #404]	@ (8015708 <_dtoa_r+0x590>)
 8015572:	2200      	movs	r2, #0
 8015574:	f7ea fe9a 	bl	80002ac <__adddf3>
 8015578:	4605      	mov	r5, r0
 801557a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801557e:	2c00      	cmp	r4, #0
 8015580:	d16a      	bne.n	8015658 <_dtoa_r+0x4e0>
 8015582:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015586:	4b61      	ldr	r3, [pc, #388]	@ (801570c <_dtoa_r+0x594>)
 8015588:	2200      	movs	r2, #0
 801558a:	f7ea fe8d 	bl	80002a8 <__aeabi_dsub>
 801558e:	4602      	mov	r2, r0
 8015590:	460b      	mov	r3, r1
 8015592:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015596:	462a      	mov	r2, r5
 8015598:	4633      	mov	r3, r6
 801559a:	f7eb facd 	bl	8000b38 <__aeabi_dcmpgt>
 801559e:	2800      	cmp	r0, #0
 80155a0:	f040 8298 	bne.w	8015ad4 <_dtoa_r+0x95c>
 80155a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80155a8:	462a      	mov	r2, r5
 80155aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80155ae:	f7eb faa5 	bl	8000afc <__aeabi_dcmplt>
 80155b2:	bb38      	cbnz	r0, 8015604 <_dtoa_r+0x48c>
 80155b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80155b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80155bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80155be:	2b00      	cmp	r3, #0
 80155c0:	f2c0 8157 	blt.w	8015872 <_dtoa_r+0x6fa>
 80155c4:	2f0e      	cmp	r7, #14
 80155c6:	f300 8154 	bgt.w	8015872 <_dtoa_r+0x6fa>
 80155ca:	4b4b      	ldr	r3, [pc, #300]	@ (80156f8 <_dtoa_r+0x580>)
 80155cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80155d0:	ed93 7b00 	vldr	d7, [r3]
 80155d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	ed8d 7b00 	vstr	d7, [sp]
 80155dc:	f280 80e5 	bge.w	80157aa <_dtoa_r+0x632>
 80155e0:	9b03      	ldr	r3, [sp, #12]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	f300 80e1 	bgt.w	80157aa <_dtoa_r+0x632>
 80155e8:	d10c      	bne.n	8015604 <_dtoa_r+0x48c>
 80155ea:	4b48      	ldr	r3, [pc, #288]	@ (801570c <_dtoa_r+0x594>)
 80155ec:	2200      	movs	r2, #0
 80155ee:	ec51 0b17 	vmov	r0, r1, d7
 80155f2:	f7eb f811 	bl	8000618 <__aeabi_dmul>
 80155f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80155fa:	f7eb fa93 	bl	8000b24 <__aeabi_dcmpge>
 80155fe:	2800      	cmp	r0, #0
 8015600:	f000 8266 	beq.w	8015ad0 <_dtoa_r+0x958>
 8015604:	2400      	movs	r4, #0
 8015606:	4625      	mov	r5, r4
 8015608:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801560a:	4656      	mov	r6, sl
 801560c:	ea6f 0803 	mvn.w	r8, r3
 8015610:	2700      	movs	r7, #0
 8015612:	4621      	mov	r1, r4
 8015614:	4648      	mov	r0, r9
 8015616:	f000 ff55 	bl	80164c4 <_Bfree>
 801561a:	2d00      	cmp	r5, #0
 801561c:	f000 80bd 	beq.w	801579a <_dtoa_r+0x622>
 8015620:	b12f      	cbz	r7, 801562e <_dtoa_r+0x4b6>
 8015622:	42af      	cmp	r7, r5
 8015624:	d003      	beq.n	801562e <_dtoa_r+0x4b6>
 8015626:	4639      	mov	r1, r7
 8015628:	4648      	mov	r0, r9
 801562a:	f000 ff4b 	bl	80164c4 <_Bfree>
 801562e:	4629      	mov	r1, r5
 8015630:	4648      	mov	r0, r9
 8015632:	f000 ff47 	bl	80164c4 <_Bfree>
 8015636:	e0b0      	b.n	801579a <_dtoa_r+0x622>
 8015638:	07e2      	lsls	r2, r4, #31
 801563a:	d505      	bpl.n	8015648 <_dtoa_r+0x4d0>
 801563c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015640:	f7ea ffea 	bl	8000618 <__aeabi_dmul>
 8015644:	3601      	adds	r6, #1
 8015646:	2301      	movs	r3, #1
 8015648:	1064      	asrs	r4, r4, #1
 801564a:	3508      	adds	r5, #8
 801564c:	e762      	b.n	8015514 <_dtoa_r+0x39c>
 801564e:	2602      	movs	r6, #2
 8015650:	e765      	b.n	801551e <_dtoa_r+0x3a6>
 8015652:	9c03      	ldr	r4, [sp, #12]
 8015654:	46b8      	mov	r8, r7
 8015656:	e784      	b.n	8015562 <_dtoa_r+0x3ea>
 8015658:	4b27      	ldr	r3, [pc, #156]	@ (80156f8 <_dtoa_r+0x580>)
 801565a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801565c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015660:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015664:	4454      	add	r4, sl
 8015666:	2900      	cmp	r1, #0
 8015668:	d054      	beq.n	8015714 <_dtoa_r+0x59c>
 801566a:	4929      	ldr	r1, [pc, #164]	@ (8015710 <_dtoa_r+0x598>)
 801566c:	2000      	movs	r0, #0
 801566e:	f7eb f8fd 	bl	800086c <__aeabi_ddiv>
 8015672:	4633      	mov	r3, r6
 8015674:	462a      	mov	r2, r5
 8015676:	f7ea fe17 	bl	80002a8 <__aeabi_dsub>
 801567a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801567e:	4656      	mov	r6, sl
 8015680:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015684:	f7eb fa78 	bl	8000b78 <__aeabi_d2iz>
 8015688:	4605      	mov	r5, r0
 801568a:	f7ea ff5b 	bl	8000544 <__aeabi_i2d>
 801568e:	4602      	mov	r2, r0
 8015690:	460b      	mov	r3, r1
 8015692:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015696:	f7ea fe07 	bl	80002a8 <__aeabi_dsub>
 801569a:	3530      	adds	r5, #48	@ 0x30
 801569c:	4602      	mov	r2, r0
 801569e:	460b      	mov	r3, r1
 80156a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80156a4:	f806 5b01 	strb.w	r5, [r6], #1
 80156a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80156ac:	f7eb fa26 	bl	8000afc <__aeabi_dcmplt>
 80156b0:	2800      	cmp	r0, #0
 80156b2:	d172      	bne.n	801579a <_dtoa_r+0x622>
 80156b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80156b8:	4911      	ldr	r1, [pc, #68]	@ (8015700 <_dtoa_r+0x588>)
 80156ba:	2000      	movs	r0, #0
 80156bc:	f7ea fdf4 	bl	80002a8 <__aeabi_dsub>
 80156c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80156c4:	f7eb fa1a 	bl	8000afc <__aeabi_dcmplt>
 80156c8:	2800      	cmp	r0, #0
 80156ca:	f040 80b4 	bne.w	8015836 <_dtoa_r+0x6be>
 80156ce:	42a6      	cmp	r6, r4
 80156d0:	f43f af70 	beq.w	80155b4 <_dtoa_r+0x43c>
 80156d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80156d8:	4b0a      	ldr	r3, [pc, #40]	@ (8015704 <_dtoa_r+0x58c>)
 80156da:	2200      	movs	r2, #0
 80156dc:	f7ea ff9c 	bl	8000618 <__aeabi_dmul>
 80156e0:	4b08      	ldr	r3, [pc, #32]	@ (8015704 <_dtoa_r+0x58c>)
 80156e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80156e6:	2200      	movs	r2, #0
 80156e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80156ec:	f7ea ff94 	bl	8000618 <__aeabi_dmul>
 80156f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80156f4:	e7c4      	b.n	8015680 <_dtoa_r+0x508>
 80156f6:	bf00      	nop
 80156f8:	08019f20 	.word	0x08019f20
 80156fc:	08019ef8 	.word	0x08019ef8
 8015700:	3ff00000 	.word	0x3ff00000
 8015704:	40240000 	.word	0x40240000
 8015708:	401c0000 	.word	0x401c0000
 801570c:	40140000 	.word	0x40140000
 8015710:	3fe00000 	.word	0x3fe00000
 8015714:	4631      	mov	r1, r6
 8015716:	4628      	mov	r0, r5
 8015718:	f7ea ff7e 	bl	8000618 <__aeabi_dmul>
 801571c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015720:	9413      	str	r4, [sp, #76]	@ 0x4c
 8015722:	4656      	mov	r6, sl
 8015724:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015728:	f7eb fa26 	bl	8000b78 <__aeabi_d2iz>
 801572c:	4605      	mov	r5, r0
 801572e:	f7ea ff09 	bl	8000544 <__aeabi_i2d>
 8015732:	4602      	mov	r2, r0
 8015734:	460b      	mov	r3, r1
 8015736:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801573a:	f7ea fdb5 	bl	80002a8 <__aeabi_dsub>
 801573e:	3530      	adds	r5, #48	@ 0x30
 8015740:	f806 5b01 	strb.w	r5, [r6], #1
 8015744:	4602      	mov	r2, r0
 8015746:	460b      	mov	r3, r1
 8015748:	42a6      	cmp	r6, r4
 801574a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801574e:	f04f 0200 	mov.w	r2, #0
 8015752:	d124      	bne.n	801579e <_dtoa_r+0x626>
 8015754:	4baf      	ldr	r3, [pc, #700]	@ (8015a14 <_dtoa_r+0x89c>)
 8015756:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801575a:	f7ea fda7 	bl	80002ac <__adddf3>
 801575e:	4602      	mov	r2, r0
 8015760:	460b      	mov	r3, r1
 8015762:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015766:	f7eb f9e7 	bl	8000b38 <__aeabi_dcmpgt>
 801576a:	2800      	cmp	r0, #0
 801576c:	d163      	bne.n	8015836 <_dtoa_r+0x6be>
 801576e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015772:	49a8      	ldr	r1, [pc, #672]	@ (8015a14 <_dtoa_r+0x89c>)
 8015774:	2000      	movs	r0, #0
 8015776:	f7ea fd97 	bl	80002a8 <__aeabi_dsub>
 801577a:	4602      	mov	r2, r0
 801577c:	460b      	mov	r3, r1
 801577e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015782:	f7eb f9bb 	bl	8000afc <__aeabi_dcmplt>
 8015786:	2800      	cmp	r0, #0
 8015788:	f43f af14 	beq.w	80155b4 <_dtoa_r+0x43c>
 801578c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801578e:	1e73      	subs	r3, r6, #1
 8015790:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015792:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015796:	2b30      	cmp	r3, #48	@ 0x30
 8015798:	d0f8      	beq.n	801578c <_dtoa_r+0x614>
 801579a:	4647      	mov	r7, r8
 801579c:	e03b      	b.n	8015816 <_dtoa_r+0x69e>
 801579e:	4b9e      	ldr	r3, [pc, #632]	@ (8015a18 <_dtoa_r+0x8a0>)
 80157a0:	f7ea ff3a 	bl	8000618 <__aeabi_dmul>
 80157a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80157a8:	e7bc      	b.n	8015724 <_dtoa_r+0x5ac>
 80157aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80157ae:	4656      	mov	r6, sl
 80157b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80157b4:	4620      	mov	r0, r4
 80157b6:	4629      	mov	r1, r5
 80157b8:	f7eb f858 	bl	800086c <__aeabi_ddiv>
 80157bc:	f7eb f9dc 	bl	8000b78 <__aeabi_d2iz>
 80157c0:	4680      	mov	r8, r0
 80157c2:	f7ea febf 	bl	8000544 <__aeabi_i2d>
 80157c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80157ca:	f7ea ff25 	bl	8000618 <__aeabi_dmul>
 80157ce:	4602      	mov	r2, r0
 80157d0:	460b      	mov	r3, r1
 80157d2:	4620      	mov	r0, r4
 80157d4:	4629      	mov	r1, r5
 80157d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80157da:	f7ea fd65 	bl	80002a8 <__aeabi_dsub>
 80157de:	f806 4b01 	strb.w	r4, [r6], #1
 80157e2:	9d03      	ldr	r5, [sp, #12]
 80157e4:	eba6 040a 	sub.w	r4, r6, sl
 80157e8:	42a5      	cmp	r5, r4
 80157ea:	4602      	mov	r2, r0
 80157ec:	460b      	mov	r3, r1
 80157ee:	d133      	bne.n	8015858 <_dtoa_r+0x6e0>
 80157f0:	f7ea fd5c 	bl	80002ac <__adddf3>
 80157f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80157f8:	4604      	mov	r4, r0
 80157fa:	460d      	mov	r5, r1
 80157fc:	f7eb f99c 	bl	8000b38 <__aeabi_dcmpgt>
 8015800:	b9c0      	cbnz	r0, 8015834 <_dtoa_r+0x6bc>
 8015802:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015806:	4620      	mov	r0, r4
 8015808:	4629      	mov	r1, r5
 801580a:	f7eb f96d 	bl	8000ae8 <__aeabi_dcmpeq>
 801580e:	b110      	cbz	r0, 8015816 <_dtoa_r+0x69e>
 8015810:	f018 0f01 	tst.w	r8, #1
 8015814:	d10e      	bne.n	8015834 <_dtoa_r+0x6bc>
 8015816:	9902      	ldr	r1, [sp, #8]
 8015818:	4648      	mov	r0, r9
 801581a:	f000 fe53 	bl	80164c4 <_Bfree>
 801581e:	2300      	movs	r3, #0
 8015820:	7033      	strb	r3, [r6, #0]
 8015822:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015824:	3701      	adds	r7, #1
 8015826:	601f      	str	r7, [r3, #0]
 8015828:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801582a:	2b00      	cmp	r3, #0
 801582c:	f000 824b 	beq.w	8015cc6 <_dtoa_r+0xb4e>
 8015830:	601e      	str	r6, [r3, #0]
 8015832:	e248      	b.n	8015cc6 <_dtoa_r+0xb4e>
 8015834:	46b8      	mov	r8, r7
 8015836:	4633      	mov	r3, r6
 8015838:	461e      	mov	r6, r3
 801583a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801583e:	2a39      	cmp	r2, #57	@ 0x39
 8015840:	d106      	bne.n	8015850 <_dtoa_r+0x6d8>
 8015842:	459a      	cmp	sl, r3
 8015844:	d1f8      	bne.n	8015838 <_dtoa_r+0x6c0>
 8015846:	2230      	movs	r2, #48	@ 0x30
 8015848:	f108 0801 	add.w	r8, r8, #1
 801584c:	f88a 2000 	strb.w	r2, [sl]
 8015850:	781a      	ldrb	r2, [r3, #0]
 8015852:	3201      	adds	r2, #1
 8015854:	701a      	strb	r2, [r3, #0]
 8015856:	e7a0      	b.n	801579a <_dtoa_r+0x622>
 8015858:	4b6f      	ldr	r3, [pc, #444]	@ (8015a18 <_dtoa_r+0x8a0>)
 801585a:	2200      	movs	r2, #0
 801585c:	f7ea fedc 	bl	8000618 <__aeabi_dmul>
 8015860:	2200      	movs	r2, #0
 8015862:	2300      	movs	r3, #0
 8015864:	4604      	mov	r4, r0
 8015866:	460d      	mov	r5, r1
 8015868:	f7eb f93e 	bl	8000ae8 <__aeabi_dcmpeq>
 801586c:	2800      	cmp	r0, #0
 801586e:	d09f      	beq.n	80157b0 <_dtoa_r+0x638>
 8015870:	e7d1      	b.n	8015816 <_dtoa_r+0x69e>
 8015872:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015874:	2a00      	cmp	r2, #0
 8015876:	f000 80ea 	beq.w	8015a4e <_dtoa_r+0x8d6>
 801587a:	9a07      	ldr	r2, [sp, #28]
 801587c:	2a01      	cmp	r2, #1
 801587e:	f300 80cd 	bgt.w	8015a1c <_dtoa_r+0x8a4>
 8015882:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015884:	2a00      	cmp	r2, #0
 8015886:	f000 80c1 	beq.w	8015a0c <_dtoa_r+0x894>
 801588a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801588e:	9c08      	ldr	r4, [sp, #32]
 8015890:	9e00      	ldr	r6, [sp, #0]
 8015892:	9a00      	ldr	r2, [sp, #0]
 8015894:	441a      	add	r2, r3
 8015896:	9200      	str	r2, [sp, #0]
 8015898:	9a06      	ldr	r2, [sp, #24]
 801589a:	2101      	movs	r1, #1
 801589c:	441a      	add	r2, r3
 801589e:	4648      	mov	r0, r9
 80158a0:	9206      	str	r2, [sp, #24]
 80158a2:	f000 ff0d 	bl	80166c0 <__i2b>
 80158a6:	4605      	mov	r5, r0
 80158a8:	b166      	cbz	r6, 80158c4 <_dtoa_r+0x74c>
 80158aa:	9b06      	ldr	r3, [sp, #24]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	dd09      	ble.n	80158c4 <_dtoa_r+0x74c>
 80158b0:	42b3      	cmp	r3, r6
 80158b2:	9a00      	ldr	r2, [sp, #0]
 80158b4:	bfa8      	it	ge
 80158b6:	4633      	movge	r3, r6
 80158b8:	1ad2      	subs	r2, r2, r3
 80158ba:	9200      	str	r2, [sp, #0]
 80158bc:	9a06      	ldr	r2, [sp, #24]
 80158be:	1af6      	subs	r6, r6, r3
 80158c0:	1ad3      	subs	r3, r2, r3
 80158c2:	9306      	str	r3, [sp, #24]
 80158c4:	9b08      	ldr	r3, [sp, #32]
 80158c6:	b30b      	cbz	r3, 801590c <_dtoa_r+0x794>
 80158c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	f000 80c6 	beq.w	8015a5c <_dtoa_r+0x8e4>
 80158d0:	2c00      	cmp	r4, #0
 80158d2:	f000 80c0 	beq.w	8015a56 <_dtoa_r+0x8de>
 80158d6:	4629      	mov	r1, r5
 80158d8:	4622      	mov	r2, r4
 80158da:	4648      	mov	r0, r9
 80158dc:	f000 ffa8 	bl	8016830 <__pow5mult>
 80158e0:	9a02      	ldr	r2, [sp, #8]
 80158e2:	4601      	mov	r1, r0
 80158e4:	4605      	mov	r5, r0
 80158e6:	4648      	mov	r0, r9
 80158e8:	f000 ff00 	bl	80166ec <__multiply>
 80158ec:	9902      	ldr	r1, [sp, #8]
 80158ee:	4680      	mov	r8, r0
 80158f0:	4648      	mov	r0, r9
 80158f2:	f000 fde7 	bl	80164c4 <_Bfree>
 80158f6:	9b08      	ldr	r3, [sp, #32]
 80158f8:	1b1b      	subs	r3, r3, r4
 80158fa:	9308      	str	r3, [sp, #32]
 80158fc:	f000 80b1 	beq.w	8015a62 <_dtoa_r+0x8ea>
 8015900:	9a08      	ldr	r2, [sp, #32]
 8015902:	4641      	mov	r1, r8
 8015904:	4648      	mov	r0, r9
 8015906:	f000 ff93 	bl	8016830 <__pow5mult>
 801590a:	9002      	str	r0, [sp, #8]
 801590c:	2101      	movs	r1, #1
 801590e:	4648      	mov	r0, r9
 8015910:	f000 fed6 	bl	80166c0 <__i2b>
 8015914:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015916:	4604      	mov	r4, r0
 8015918:	2b00      	cmp	r3, #0
 801591a:	f000 81d8 	beq.w	8015cce <_dtoa_r+0xb56>
 801591e:	461a      	mov	r2, r3
 8015920:	4601      	mov	r1, r0
 8015922:	4648      	mov	r0, r9
 8015924:	f000 ff84 	bl	8016830 <__pow5mult>
 8015928:	9b07      	ldr	r3, [sp, #28]
 801592a:	2b01      	cmp	r3, #1
 801592c:	4604      	mov	r4, r0
 801592e:	f300 809f 	bgt.w	8015a70 <_dtoa_r+0x8f8>
 8015932:	9b04      	ldr	r3, [sp, #16]
 8015934:	2b00      	cmp	r3, #0
 8015936:	f040 8097 	bne.w	8015a68 <_dtoa_r+0x8f0>
 801593a:	9b05      	ldr	r3, [sp, #20]
 801593c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015940:	2b00      	cmp	r3, #0
 8015942:	f040 8093 	bne.w	8015a6c <_dtoa_r+0x8f4>
 8015946:	9b05      	ldr	r3, [sp, #20]
 8015948:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801594c:	0d1b      	lsrs	r3, r3, #20
 801594e:	051b      	lsls	r3, r3, #20
 8015950:	b133      	cbz	r3, 8015960 <_dtoa_r+0x7e8>
 8015952:	9b00      	ldr	r3, [sp, #0]
 8015954:	3301      	adds	r3, #1
 8015956:	9300      	str	r3, [sp, #0]
 8015958:	9b06      	ldr	r3, [sp, #24]
 801595a:	3301      	adds	r3, #1
 801595c:	9306      	str	r3, [sp, #24]
 801595e:	2301      	movs	r3, #1
 8015960:	9308      	str	r3, [sp, #32]
 8015962:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015964:	2b00      	cmp	r3, #0
 8015966:	f000 81b8 	beq.w	8015cda <_dtoa_r+0xb62>
 801596a:	6923      	ldr	r3, [r4, #16]
 801596c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015970:	6918      	ldr	r0, [r3, #16]
 8015972:	f000 fe59 	bl	8016628 <__hi0bits>
 8015976:	f1c0 0020 	rsb	r0, r0, #32
 801597a:	9b06      	ldr	r3, [sp, #24]
 801597c:	4418      	add	r0, r3
 801597e:	f010 001f 	ands.w	r0, r0, #31
 8015982:	f000 8082 	beq.w	8015a8a <_dtoa_r+0x912>
 8015986:	f1c0 0320 	rsb	r3, r0, #32
 801598a:	2b04      	cmp	r3, #4
 801598c:	dd73      	ble.n	8015a76 <_dtoa_r+0x8fe>
 801598e:	9b00      	ldr	r3, [sp, #0]
 8015990:	f1c0 001c 	rsb	r0, r0, #28
 8015994:	4403      	add	r3, r0
 8015996:	9300      	str	r3, [sp, #0]
 8015998:	9b06      	ldr	r3, [sp, #24]
 801599a:	4403      	add	r3, r0
 801599c:	4406      	add	r6, r0
 801599e:	9306      	str	r3, [sp, #24]
 80159a0:	9b00      	ldr	r3, [sp, #0]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	dd05      	ble.n	80159b2 <_dtoa_r+0x83a>
 80159a6:	9902      	ldr	r1, [sp, #8]
 80159a8:	461a      	mov	r2, r3
 80159aa:	4648      	mov	r0, r9
 80159ac:	f000 ff9a 	bl	80168e4 <__lshift>
 80159b0:	9002      	str	r0, [sp, #8]
 80159b2:	9b06      	ldr	r3, [sp, #24]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	dd05      	ble.n	80159c4 <_dtoa_r+0x84c>
 80159b8:	4621      	mov	r1, r4
 80159ba:	461a      	mov	r2, r3
 80159bc:	4648      	mov	r0, r9
 80159be:	f000 ff91 	bl	80168e4 <__lshift>
 80159c2:	4604      	mov	r4, r0
 80159c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d061      	beq.n	8015a8e <_dtoa_r+0x916>
 80159ca:	9802      	ldr	r0, [sp, #8]
 80159cc:	4621      	mov	r1, r4
 80159ce:	f000 fff5 	bl	80169bc <__mcmp>
 80159d2:	2800      	cmp	r0, #0
 80159d4:	da5b      	bge.n	8015a8e <_dtoa_r+0x916>
 80159d6:	2300      	movs	r3, #0
 80159d8:	9902      	ldr	r1, [sp, #8]
 80159da:	220a      	movs	r2, #10
 80159dc:	4648      	mov	r0, r9
 80159de:	f000 fd93 	bl	8016508 <__multadd>
 80159e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80159e4:	9002      	str	r0, [sp, #8]
 80159e6:	f107 38ff 	add.w	r8, r7, #4294967295
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	f000 8177 	beq.w	8015cde <_dtoa_r+0xb66>
 80159f0:	4629      	mov	r1, r5
 80159f2:	2300      	movs	r3, #0
 80159f4:	220a      	movs	r2, #10
 80159f6:	4648      	mov	r0, r9
 80159f8:	f000 fd86 	bl	8016508 <__multadd>
 80159fc:	f1bb 0f00 	cmp.w	fp, #0
 8015a00:	4605      	mov	r5, r0
 8015a02:	dc6f      	bgt.n	8015ae4 <_dtoa_r+0x96c>
 8015a04:	9b07      	ldr	r3, [sp, #28]
 8015a06:	2b02      	cmp	r3, #2
 8015a08:	dc49      	bgt.n	8015a9e <_dtoa_r+0x926>
 8015a0a:	e06b      	b.n	8015ae4 <_dtoa_r+0x96c>
 8015a0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8015a0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015a12:	e73c      	b.n	801588e <_dtoa_r+0x716>
 8015a14:	3fe00000 	.word	0x3fe00000
 8015a18:	40240000 	.word	0x40240000
 8015a1c:	9b03      	ldr	r3, [sp, #12]
 8015a1e:	1e5c      	subs	r4, r3, #1
 8015a20:	9b08      	ldr	r3, [sp, #32]
 8015a22:	42a3      	cmp	r3, r4
 8015a24:	db09      	blt.n	8015a3a <_dtoa_r+0x8c2>
 8015a26:	1b1c      	subs	r4, r3, r4
 8015a28:	9b03      	ldr	r3, [sp, #12]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	f6bf af30 	bge.w	8015890 <_dtoa_r+0x718>
 8015a30:	9b00      	ldr	r3, [sp, #0]
 8015a32:	9a03      	ldr	r2, [sp, #12]
 8015a34:	1a9e      	subs	r6, r3, r2
 8015a36:	2300      	movs	r3, #0
 8015a38:	e72b      	b.n	8015892 <_dtoa_r+0x71a>
 8015a3a:	9b08      	ldr	r3, [sp, #32]
 8015a3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015a3e:	9408      	str	r4, [sp, #32]
 8015a40:	1ae3      	subs	r3, r4, r3
 8015a42:	441a      	add	r2, r3
 8015a44:	9e00      	ldr	r6, [sp, #0]
 8015a46:	9b03      	ldr	r3, [sp, #12]
 8015a48:	920d      	str	r2, [sp, #52]	@ 0x34
 8015a4a:	2400      	movs	r4, #0
 8015a4c:	e721      	b.n	8015892 <_dtoa_r+0x71a>
 8015a4e:	9c08      	ldr	r4, [sp, #32]
 8015a50:	9e00      	ldr	r6, [sp, #0]
 8015a52:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8015a54:	e728      	b.n	80158a8 <_dtoa_r+0x730>
 8015a56:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8015a5a:	e751      	b.n	8015900 <_dtoa_r+0x788>
 8015a5c:	9a08      	ldr	r2, [sp, #32]
 8015a5e:	9902      	ldr	r1, [sp, #8]
 8015a60:	e750      	b.n	8015904 <_dtoa_r+0x78c>
 8015a62:	f8cd 8008 	str.w	r8, [sp, #8]
 8015a66:	e751      	b.n	801590c <_dtoa_r+0x794>
 8015a68:	2300      	movs	r3, #0
 8015a6a:	e779      	b.n	8015960 <_dtoa_r+0x7e8>
 8015a6c:	9b04      	ldr	r3, [sp, #16]
 8015a6e:	e777      	b.n	8015960 <_dtoa_r+0x7e8>
 8015a70:	2300      	movs	r3, #0
 8015a72:	9308      	str	r3, [sp, #32]
 8015a74:	e779      	b.n	801596a <_dtoa_r+0x7f2>
 8015a76:	d093      	beq.n	80159a0 <_dtoa_r+0x828>
 8015a78:	9a00      	ldr	r2, [sp, #0]
 8015a7a:	331c      	adds	r3, #28
 8015a7c:	441a      	add	r2, r3
 8015a7e:	9200      	str	r2, [sp, #0]
 8015a80:	9a06      	ldr	r2, [sp, #24]
 8015a82:	441a      	add	r2, r3
 8015a84:	441e      	add	r6, r3
 8015a86:	9206      	str	r2, [sp, #24]
 8015a88:	e78a      	b.n	80159a0 <_dtoa_r+0x828>
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	e7f4      	b.n	8015a78 <_dtoa_r+0x900>
 8015a8e:	9b03      	ldr	r3, [sp, #12]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	46b8      	mov	r8, r7
 8015a94:	dc20      	bgt.n	8015ad8 <_dtoa_r+0x960>
 8015a96:	469b      	mov	fp, r3
 8015a98:	9b07      	ldr	r3, [sp, #28]
 8015a9a:	2b02      	cmp	r3, #2
 8015a9c:	dd1e      	ble.n	8015adc <_dtoa_r+0x964>
 8015a9e:	f1bb 0f00 	cmp.w	fp, #0
 8015aa2:	f47f adb1 	bne.w	8015608 <_dtoa_r+0x490>
 8015aa6:	4621      	mov	r1, r4
 8015aa8:	465b      	mov	r3, fp
 8015aaa:	2205      	movs	r2, #5
 8015aac:	4648      	mov	r0, r9
 8015aae:	f000 fd2b 	bl	8016508 <__multadd>
 8015ab2:	4601      	mov	r1, r0
 8015ab4:	4604      	mov	r4, r0
 8015ab6:	9802      	ldr	r0, [sp, #8]
 8015ab8:	f000 ff80 	bl	80169bc <__mcmp>
 8015abc:	2800      	cmp	r0, #0
 8015abe:	f77f ada3 	ble.w	8015608 <_dtoa_r+0x490>
 8015ac2:	4656      	mov	r6, sl
 8015ac4:	2331      	movs	r3, #49	@ 0x31
 8015ac6:	f806 3b01 	strb.w	r3, [r6], #1
 8015aca:	f108 0801 	add.w	r8, r8, #1
 8015ace:	e59f      	b.n	8015610 <_dtoa_r+0x498>
 8015ad0:	9c03      	ldr	r4, [sp, #12]
 8015ad2:	46b8      	mov	r8, r7
 8015ad4:	4625      	mov	r5, r4
 8015ad6:	e7f4      	b.n	8015ac2 <_dtoa_r+0x94a>
 8015ad8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8015adc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	f000 8101 	beq.w	8015ce6 <_dtoa_r+0xb6e>
 8015ae4:	2e00      	cmp	r6, #0
 8015ae6:	dd05      	ble.n	8015af4 <_dtoa_r+0x97c>
 8015ae8:	4629      	mov	r1, r5
 8015aea:	4632      	mov	r2, r6
 8015aec:	4648      	mov	r0, r9
 8015aee:	f000 fef9 	bl	80168e4 <__lshift>
 8015af2:	4605      	mov	r5, r0
 8015af4:	9b08      	ldr	r3, [sp, #32]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d05c      	beq.n	8015bb4 <_dtoa_r+0xa3c>
 8015afa:	6869      	ldr	r1, [r5, #4]
 8015afc:	4648      	mov	r0, r9
 8015afe:	f000 fca1 	bl	8016444 <_Balloc>
 8015b02:	4606      	mov	r6, r0
 8015b04:	b928      	cbnz	r0, 8015b12 <_dtoa_r+0x99a>
 8015b06:	4b82      	ldr	r3, [pc, #520]	@ (8015d10 <_dtoa_r+0xb98>)
 8015b08:	4602      	mov	r2, r0
 8015b0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8015b0e:	f7ff bb4a 	b.w	80151a6 <_dtoa_r+0x2e>
 8015b12:	692a      	ldr	r2, [r5, #16]
 8015b14:	3202      	adds	r2, #2
 8015b16:	0092      	lsls	r2, r2, #2
 8015b18:	f105 010c 	add.w	r1, r5, #12
 8015b1c:	300c      	adds	r0, #12
 8015b1e:	f7ff fa6a 	bl	8014ff6 <memcpy>
 8015b22:	2201      	movs	r2, #1
 8015b24:	4631      	mov	r1, r6
 8015b26:	4648      	mov	r0, r9
 8015b28:	f000 fedc 	bl	80168e4 <__lshift>
 8015b2c:	f10a 0301 	add.w	r3, sl, #1
 8015b30:	9300      	str	r3, [sp, #0]
 8015b32:	eb0a 030b 	add.w	r3, sl, fp
 8015b36:	9308      	str	r3, [sp, #32]
 8015b38:	9b04      	ldr	r3, [sp, #16]
 8015b3a:	f003 0301 	and.w	r3, r3, #1
 8015b3e:	462f      	mov	r7, r5
 8015b40:	9306      	str	r3, [sp, #24]
 8015b42:	4605      	mov	r5, r0
 8015b44:	9b00      	ldr	r3, [sp, #0]
 8015b46:	9802      	ldr	r0, [sp, #8]
 8015b48:	4621      	mov	r1, r4
 8015b4a:	f103 3bff 	add.w	fp, r3, #4294967295
 8015b4e:	f7ff fa89 	bl	8015064 <quorem>
 8015b52:	4603      	mov	r3, r0
 8015b54:	3330      	adds	r3, #48	@ 0x30
 8015b56:	9003      	str	r0, [sp, #12]
 8015b58:	4639      	mov	r1, r7
 8015b5a:	9802      	ldr	r0, [sp, #8]
 8015b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8015b5e:	f000 ff2d 	bl	80169bc <__mcmp>
 8015b62:	462a      	mov	r2, r5
 8015b64:	9004      	str	r0, [sp, #16]
 8015b66:	4621      	mov	r1, r4
 8015b68:	4648      	mov	r0, r9
 8015b6a:	f000 ff43 	bl	80169f4 <__mdiff>
 8015b6e:	68c2      	ldr	r2, [r0, #12]
 8015b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b72:	4606      	mov	r6, r0
 8015b74:	bb02      	cbnz	r2, 8015bb8 <_dtoa_r+0xa40>
 8015b76:	4601      	mov	r1, r0
 8015b78:	9802      	ldr	r0, [sp, #8]
 8015b7a:	f000 ff1f 	bl	80169bc <__mcmp>
 8015b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b80:	4602      	mov	r2, r0
 8015b82:	4631      	mov	r1, r6
 8015b84:	4648      	mov	r0, r9
 8015b86:	920c      	str	r2, [sp, #48]	@ 0x30
 8015b88:	9309      	str	r3, [sp, #36]	@ 0x24
 8015b8a:	f000 fc9b 	bl	80164c4 <_Bfree>
 8015b8e:	9b07      	ldr	r3, [sp, #28]
 8015b90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015b92:	9e00      	ldr	r6, [sp, #0]
 8015b94:	ea42 0103 	orr.w	r1, r2, r3
 8015b98:	9b06      	ldr	r3, [sp, #24]
 8015b9a:	4319      	orrs	r1, r3
 8015b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b9e:	d10d      	bne.n	8015bbc <_dtoa_r+0xa44>
 8015ba0:	2b39      	cmp	r3, #57	@ 0x39
 8015ba2:	d027      	beq.n	8015bf4 <_dtoa_r+0xa7c>
 8015ba4:	9a04      	ldr	r2, [sp, #16]
 8015ba6:	2a00      	cmp	r2, #0
 8015ba8:	dd01      	ble.n	8015bae <_dtoa_r+0xa36>
 8015baa:	9b03      	ldr	r3, [sp, #12]
 8015bac:	3331      	adds	r3, #49	@ 0x31
 8015bae:	f88b 3000 	strb.w	r3, [fp]
 8015bb2:	e52e      	b.n	8015612 <_dtoa_r+0x49a>
 8015bb4:	4628      	mov	r0, r5
 8015bb6:	e7b9      	b.n	8015b2c <_dtoa_r+0x9b4>
 8015bb8:	2201      	movs	r2, #1
 8015bba:	e7e2      	b.n	8015b82 <_dtoa_r+0xa0a>
 8015bbc:	9904      	ldr	r1, [sp, #16]
 8015bbe:	2900      	cmp	r1, #0
 8015bc0:	db04      	blt.n	8015bcc <_dtoa_r+0xa54>
 8015bc2:	9807      	ldr	r0, [sp, #28]
 8015bc4:	4301      	orrs	r1, r0
 8015bc6:	9806      	ldr	r0, [sp, #24]
 8015bc8:	4301      	orrs	r1, r0
 8015bca:	d120      	bne.n	8015c0e <_dtoa_r+0xa96>
 8015bcc:	2a00      	cmp	r2, #0
 8015bce:	ddee      	ble.n	8015bae <_dtoa_r+0xa36>
 8015bd0:	9902      	ldr	r1, [sp, #8]
 8015bd2:	9300      	str	r3, [sp, #0]
 8015bd4:	2201      	movs	r2, #1
 8015bd6:	4648      	mov	r0, r9
 8015bd8:	f000 fe84 	bl	80168e4 <__lshift>
 8015bdc:	4621      	mov	r1, r4
 8015bde:	9002      	str	r0, [sp, #8]
 8015be0:	f000 feec 	bl	80169bc <__mcmp>
 8015be4:	2800      	cmp	r0, #0
 8015be6:	9b00      	ldr	r3, [sp, #0]
 8015be8:	dc02      	bgt.n	8015bf0 <_dtoa_r+0xa78>
 8015bea:	d1e0      	bne.n	8015bae <_dtoa_r+0xa36>
 8015bec:	07da      	lsls	r2, r3, #31
 8015bee:	d5de      	bpl.n	8015bae <_dtoa_r+0xa36>
 8015bf0:	2b39      	cmp	r3, #57	@ 0x39
 8015bf2:	d1da      	bne.n	8015baa <_dtoa_r+0xa32>
 8015bf4:	2339      	movs	r3, #57	@ 0x39
 8015bf6:	f88b 3000 	strb.w	r3, [fp]
 8015bfa:	4633      	mov	r3, r6
 8015bfc:	461e      	mov	r6, r3
 8015bfe:	3b01      	subs	r3, #1
 8015c00:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015c04:	2a39      	cmp	r2, #57	@ 0x39
 8015c06:	d04e      	beq.n	8015ca6 <_dtoa_r+0xb2e>
 8015c08:	3201      	adds	r2, #1
 8015c0a:	701a      	strb	r2, [r3, #0]
 8015c0c:	e501      	b.n	8015612 <_dtoa_r+0x49a>
 8015c0e:	2a00      	cmp	r2, #0
 8015c10:	dd03      	ble.n	8015c1a <_dtoa_r+0xaa2>
 8015c12:	2b39      	cmp	r3, #57	@ 0x39
 8015c14:	d0ee      	beq.n	8015bf4 <_dtoa_r+0xa7c>
 8015c16:	3301      	adds	r3, #1
 8015c18:	e7c9      	b.n	8015bae <_dtoa_r+0xa36>
 8015c1a:	9a00      	ldr	r2, [sp, #0]
 8015c1c:	9908      	ldr	r1, [sp, #32]
 8015c1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015c22:	428a      	cmp	r2, r1
 8015c24:	d028      	beq.n	8015c78 <_dtoa_r+0xb00>
 8015c26:	9902      	ldr	r1, [sp, #8]
 8015c28:	2300      	movs	r3, #0
 8015c2a:	220a      	movs	r2, #10
 8015c2c:	4648      	mov	r0, r9
 8015c2e:	f000 fc6b 	bl	8016508 <__multadd>
 8015c32:	42af      	cmp	r7, r5
 8015c34:	9002      	str	r0, [sp, #8]
 8015c36:	f04f 0300 	mov.w	r3, #0
 8015c3a:	f04f 020a 	mov.w	r2, #10
 8015c3e:	4639      	mov	r1, r7
 8015c40:	4648      	mov	r0, r9
 8015c42:	d107      	bne.n	8015c54 <_dtoa_r+0xadc>
 8015c44:	f000 fc60 	bl	8016508 <__multadd>
 8015c48:	4607      	mov	r7, r0
 8015c4a:	4605      	mov	r5, r0
 8015c4c:	9b00      	ldr	r3, [sp, #0]
 8015c4e:	3301      	adds	r3, #1
 8015c50:	9300      	str	r3, [sp, #0]
 8015c52:	e777      	b.n	8015b44 <_dtoa_r+0x9cc>
 8015c54:	f000 fc58 	bl	8016508 <__multadd>
 8015c58:	4629      	mov	r1, r5
 8015c5a:	4607      	mov	r7, r0
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	220a      	movs	r2, #10
 8015c60:	4648      	mov	r0, r9
 8015c62:	f000 fc51 	bl	8016508 <__multadd>
 8015c66:	4605      	mov	r5, r0
 8015c68:	e7f0      	b.n	8015c4c <_dtoa_r+0xad4>
 8015c6a:	f1bb 0f00 	cmp.w	fp, #0
 8015c6e:	bfcc      	ite	gt
 8015c70:	465e      	movgt	r6, fp
 8015c72:	2601      	movle	r6, #1
 8015c74:	4456      	add	r6, sl
 8015c76:	2700      	movs	r7, #0
 8015c78:	9902      	ldr	r1, [sp, #8]
 8015c7a:	9300      	str	r3, [sp, #0]
 8015c7c:	2201      	movs	r2, #1
 8015c7e:	4648      	mov	r0, r9
 8015c80:	f000 fe30 	bl	80168e4 <__lshift>
 8015c84:	4621      	mov	r1, r4
 8015c86:	9002      	str	r0, [sp, #8]
 8015c88:	f000 fe98 	bl	80169bc <__mcmp>
 8015c8c:	2800      	cmp	r0, #0
 8015c8e:	dcb4      	bgt.n	8015bfa <_dtoa_r+0xa82>
 8015c90:	d102      	bne.n	8015c98 <_dtoa_r+0xb20>
 8015c92:	9b00      	ldr	r3, [sp, #0]
 8015c94:	07db      	lsls	r3, r3, #31
 8015c96:	d4b0      	bmi.n	8015bfa <_dtoa_r+0xa82>
 8015c98:	4633      	mov	r3, r6
 8015c9a:	461e      	mov	r6, r3
 8015c9c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015ca0:	2a30      	cmp	r2, #48	@ 0x30
 8015ca2:	d0fa      	beq.n	8015c9a <_dtoa_r+0xb22>
 8015ca4:	e4b5      	b.n	8015612 <_dtoa_r+0x49a>
 8015ca6:	459a      	cmp	sl, r3
 8015ca8:	d1a8      	bne.n	8015bfc <_dtoa_r+0xa84>
 8015caa:	2331      	movs	r3, #49	@ 0x31
 8015cac:	f108 0801 	add.w	r8, r8, #1
 8015cb0:	f88a 3000 	strb.w	r3, [sl]
 8015cb4:	e4ad      	b.n	8015612 <_dtoa_r+0x49a>
 8015cb6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015cb8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8015d14 <_dtoa_r+0xb9c>
 8015cbc:	b11b      	cbz	r3, 8015cc6 <_dtoa_r+0xb4e>
 8015cbe:	f10a 0308 	add.w	r3, sl, #8
 8015cc2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8015cc4:	6013      	str	r3, [r2, #0]
 8015cc6:	4650      	mov	r0, sl
 8015cc8:	b017      	add	sp, #92	@ 0x5c
 8015cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cce:	9b07      	ldr	r3, [sp, #28]
 8015cd0:	2b01      	cmp	r3, #1
 8015cd2:	f77f ae2e 	ble.w	8015932 <_dtoa_r+0x7ba>
 8015cd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015cd8:	9308      	str	r3, [sp, #32]
 8015cda:	2001      	movs	r0, #1
 8015cdc:	e64d      	b.n	801597a <_dtoa_r+0x802>
 8015cde:	f1bb 0f00 	cmp.w	fp, #0
 8015ce2:	f77f aed9 	ble.w	8015a98 <_dtoa_r+0x920>
 8015ce6:	4656      	mov	r6, sl
 8015ce8:	9802      	ldr	r0, [sp, #8]
 8015cea:	4621      	mov	r1, r4
 8015cec:	f7ff f9ba 	bl	8015064 <quorem>
 8015cf0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8015cf4:	f806 3b01 	strb.w	r3, [r6], #1
 8015cf8:	eba6 020a 	sub.w	r2, r6, sl
 8015cfc:	4593      	cmp	fp, r2
 8015cfe:	ddb4      	ble.n	8015c6a <_dtoa_r+0xaf2>
 8015d00:	9902      	ldr	r1, [sp, #8]
 8015d02:	2300      	movs	r3, #0
 8015d04:	220a      	movs	r2, #10
 8015d06:	4648      	mov	r0, r9
 8015d08:	f000 fbfe 	bl	8016508 <__multadd>
 8015d0c:	9002      	str	r0, [sp, #8]
 8015d0e:	e7eb      	b.n	8015ce8 <_dtoa_r+0xb70>
 8015d10:	08019cb8 	.word	0x08019cb8
 8015d14:	08019c53 	.word	0x08019c53

08015d18 <_free_r>:
 8015d18:	b538      	push	{r3, r4, r5, lr}
 8015d1a:	4605      	mov	r5, r0
 8015d1c:	2900      	cmp	r1, #0
 8015d1e:	d041      	beq.n	8015da4 <_free_r+0x8c>
 8015d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015d24:	1f0c      	subs	r4, r1, #4
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	bfb8      	it	lt
 8015d2a:	18e4      	addlt	r4, r4, r3
 8015d2c:	f7fd fbfa 	bl	8013524 <__malloc_lock>
 8015d30:	4a1d      	ldr	r2, [pc, #116]	@ (8015da8 <_free_r+0x90>)
 8015d32:	6813      	ldr	r3, [r2, #0]
 8015d34:	b933      	cbnz	r3, 8015d44 <_free_r+0x2c>
 8015d36:	6063      	str	r3, [r4, #4]
 8015d38:	6014      	str	r4, [r2, #0]
 8015d3a:	4628      	mov	r0, r5
 8015d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015d40:	f7fd bbf6 	b.w	8013530 <__malloc_unlock>
 8015d44:	42a3      	cmp	r3, r4
 8015d46:	d908      	bls.n	8015d5a <_free_r+0x42>
 8015d48:	6820      	ldr	r0, [r4, #0]
 8015d4a:	1821      	adds	r1, r4, r0
 8015d4c:	428b      	cmp	r3, r1
 8015d4e:	bf01      	itttt	eq
 8015d50:	6819      	ldreq	r1, [r3, #0]
 8015d52:	685b      	ldreq	r3, [r3, #4]
 8015d54:	1809      	addeq	r1, r1, r0
 8015d56:	6021      	streq	r1, [r4, #0]
 8015d58:	e7ed      	b.n	8015d36 <_free_r+0x1e>
 8015d5a:	461a      	mov	r2, r3
 8015d5c:	685b      	ldr	r3, [r3, #4]
 8015d5e:	b10b      	cbz	r3, 8015d64 <_free_r+0x4c>
 8015d60:	42a3      	cmp	r3, r4
 8015d62:	d9fa      	bls.n	8015d5a <_free_r+0x42>
 8015d64:	6811      	ldr	r1, [r2, #0]
 8015d66:	1850      	adds	r0, r2, r1
 8015d68:	42a0      	cmp	r0, r4
 8015d6a:	d10b      	bne.n	8015d84 <_free_r+0x6c>
 8015d6c:	6820      	ldr	r0, [r4, #0]
 8015d6e:	4401      	add	r1, r0
 8015d70:	1850      	adds	r0, r2, r1
 8015d72:	4283      	cmp	r3, r0
 8015d74:	6011      	str	r1, [r2, #0]
 8015d76:	d1e0      	bne.n	8015d3a <_free_r+0x22>
 8015d78:	6818      	ldr	r0, [r3, #0]
 8015d7a:	685b      	ldr	r3, [r3, #4]
 8015d7c:	6053      	str	r3, [r2, #4]
 8015d7e:	4408      	add	r0, r1
 8015d80:	6010      	str	r0, [r2, #0]
 8015d82:	e7da      	b.n	8015d3a <_free_r+0x22>
 8015d84:	d902      	bls.n	8015d8c <_free_r+0x74>
 8015d86:	230c      	movs	r3, #12
 8015d88:	602b      	str	r3, [r5, #0]
 8015d8a:	e7d6      	b.n	8015d3a <_free_r+0x22>
 8015d8c:	6820      	ldr	r0, [r4, #0]
 8015d8e:	1821      	adds	r1, r4, r0
 8015d90:	428b      	cmp	r3, r1
 8015d92:	bf04      	itt	eq
 8015d94:	6819      	ldreq	r1, [r3, #0]
 8015d96:	685b      	ldreq	r3, [r3, #4]
 8015d98:	6063      	str	r3, [r4, #4]
 8015d9a:	bf04      	itt	eq
 8015d9c:	1809      	addeq	r1, r1, r0
 8015d9e:	6021      	streq	r1, [r4, #0]
 8015da0:	6054      	str	r4, [r2, #4]
 8015da2:	e7ca      	b.n	8015d3a <_free_r+0x22>
 8015da4:	bd38      	pop	{r3, r4, r5, pc}
 8015da6:	bf00      	nop
 8015da8:	20013b1c 	.word	0x20013b1c

08015dac <rshift>:
 8015dac:	6903      	ldr	r3, [r0, #16]
 8015dae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015db2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015db6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015dba:	f100 0414 	add.w	r4, r0, #20
 8015dbe:	dd45      	ble.n	8015e4c <rshift+0xa0>
 8015dc0:	f011 011f 	ands.w	r1, r1, #31
 8015dc4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015dc8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015dcc:	d10c      	bne.n	8015de8 <rshift+0x3c>
 8015dce:	f100 0710 	add.w	r7, r0, #16
 8015dd2:	4629      	mov	r1, r5
 8015dd4:	42b1      	cmp	r1, r6
 8015dd6:	d334      	bcc.n	8015e42 <rshift+0x96>
 8015dd8:	1a9b      	subs	r3, r3, r2
 8015dda:	009b      	lsls	r3, r3, #2
 8015ddc:	1eea      	subs	r2, r5, #3
 8015dde:	4296      	cmp	r6, r2
 8015de0:	bf38      	it	cc
 8015de2:	2300      	movcc	r3, #0
 8015de4:	4423      	add	r3, r4
 8015de6:	e015      	b.n	8015e14 <rshift+0x68>
 8015de8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015dec:	f1c1 0820 	rsb	r8, r1, #32
 8015df0:	40cf      	lsrs	r7, r1
 8015df2:	f105 0e04 	add.w	lr, r5, #4
 8015df6:	46a1      	mov	r9, r4
 8015df8:	4576      	cmp	r6, lr
 8015dfa:	46f4      	mov	ip, lr
 8015dfc:	d815      	bhi.n	8015e2a <rshift+0x7e>
 8015dfe:	1a9a      	subs	r2, r3, r2
 8015e00:	0092      	lsls	r2, r2, #2
 8015e02:	3a04      	subs	r2, #4
 8015e04:	3501      	adds	r5, #1
 8015e06:	42ae      	cmp	r6, r5
 8015e08:	bf38      	it	cc
 8015e0a:	2200      	movcc	r2, #0
 8015e0c:	18a3      	adds	r3, r4, r2
 8015e0e:	50a7      	str	r7, [r4, r2]
 8015e10:	b107      	cbz	r7, 8015e14 <rshift+0x68>
 8015e12:	3304      	adds	r3, #4
 8015e14:	1b1a      	subs	r2, r3, r4
 8015e16:	42a3      	cmp	r3, r4
 8015e18:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015e1c:	bf08      	it	eq
 8015e1e:	2300      	moveq	r3, #0
 8015e20:	6102      	str	r2, [r0, #16]
 8015e22:	bf08      	it	eq
 8015e24:	6143      	streq	r3, [r0, #20]
 8015e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e2a:	f8dc c000 	ldr.w	ip, [ip]
 8015e2e:	fa0c fc08 	lsl.w	ip, ip, r8
 8015e32:	ea4c 0707 	orr.w	r7, ip, r7
 8015e36:	f849 7b04 	str.w	r7, [r9], #4
 8015e3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015e3e:	40cf      	lsrs	r7, r1
 8015e40:	e7da      	b.n	8015df8 <rshift+0x4c>
 8015e42:	f851 cb04 	ldr.w	ip, [r1], #4
 8015e46:	f847 cf04 	str.w	ip, [r7, #4]!
 8015e4a:	e7c3      	b.n	8015dd4 <rshift+0x28>
 8015e4c:	4623      	mov	r3, r4
 8015e4e:	e7e1      	b.n	8015e14 <rshift+0x68>

08015e50 <__hexdig_fun>:
 8015e50:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8015e54:	2b09      	cmp	r3, #9
 8015e56:	d802      	bhi.n	8015e5e <__hexdig_fun+0xe>
 8015e58:	3820      	subs	r0, #32
 8015e5a:	b2c0      	uxtb	r0, r0
 8015e5c:	4770      	bx	lr
 8015e5e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8015e62:	2b05      	cmp	r3, #5
 8015e64:	d801      	bhi.n	8015e6a <__hexdig_fun+0x1a>
 8015e66:	3847      	subs	r0, #71	@ 0x47
 8015e68:	e7f7      	b.n	8015e5a <__hexdig_fun+0xa>
 8015e6a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8015e6e:	2b05      	cmp	r3, #5
 8015e70:	d801      	bhi.n	8015e76 <__hexdig_fun+0x26>
 8015e72:	3827      	subs	r0, #39	@ 0x27
 8015e74:	e7f1      	b.n	8015e5a <__hexdig_fun+0xa>
 8015e76:	2000      	movs	r0, #0
 8015e78:	4770      	bx	lr
	...

08015e7c <__gethex>:
 8015e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e80:	b085      	sub	sp, #20
 8015e82:	468a      	mov	sl, r1
 8015e84:	9302      	str	r3, [sp, #8]
 8015e86:	680b      	ldr	r3, [r1, #0]
 8015e88:	9001      	str	r0, [sp, #4]
 8015e8a:	4690      	mov	r8, r2
 8015e8c:	1c9c      	adds	r4, r3, #2
 8015e8e:	46a1      	mov	r9, r4
 8015e90:	f814 0b01 	ldrb.w	r0, [r4], #1
 8015e94:	2830      	cmp	r0, #48	@ 0x30
 8015e96:	d0fa      	beq.n	8015e8e <__gethex+0x12>
 8015e98:	eba9 0303 	sub.w	r3, r9, r3
 8015e9c:	f1a3 0b02 	sub.w	fp, r3, #2
 8015ea0:	f7ff ffd6 	bl	8015e50 <__hexdig_fun>
 8015ea4:	4605      	mov	r5, r0
 8015ea6:	2800      	cmp	r0, #0
 8015ea8:	d168      	bne.n	8015f7c <__gethex+0x100>
 8015eaa:	49a0      	ldr	r1, [pc, #640]	@ (801612c <__gethex+0x2b0>)
 8015eac:	2201      	movs	r2, #1
 8015eae:	4648      	mov	r0, r9
 8015eb0:	f7fe ff46 	bl	8014d40 <strncmp>
 8015eb4:	4607      	mov	r7, r0
 8015eb6:	2800      	cmp	r0, #0
 8015eb8:	d167      	bne.n	8015f8a <__gethex+0x10e>
 8015eba:	f899 0001 	ldrb.w	r0, [r9, #1]
 8015ebe:	4626      	mov	r6, r4
 8015ec0:	f7ff ffc6 	bl	8015e50 <__hexdig_fun>
 8015ec4:	2800      	cmp	r0, #0
 8015ec6:	d062      	beq.n	8015f8e <__gethex+0x112>
 8015ec8:	4623      	mov	r3, r4
 8015eca:	7818      	ldrb	r0, [r3, #0]
 8015ecc:	2830      	cmp	r0, #48	@ 0x30
 8015ece:	4699      	mov	r9, r3
 8015ed0:	f103 0301 	add.w	r3, r3, #1
 8015ed4:	d0f9      	beq.n	8015eca <__gethex+0x4e>
 8015ed6:	f7ff ffbb 	bl	8015e50 <__hexdig_fun>
 8015eda:	fab0 f580 	clz	r5, r0
 8015ede:	096d      	lsrs	r5, r5, #5
 8015ee0:	f04f 0b01 	mov.w	fp, #1
 8015ee4:	464a      	mov	r2, r9
 8015ee6:	4616      	mov	r6, r2
 8015ee8:	3201      	adds	r2, #1
 8015eea:	7830      	ldrb	r0, [r6, #0]
 8015eec:	f7ff ffb0 	bl	8015e50 <__hexdig_fun>
 8015ef0:	2800      	cmp	r0, #0
 8015ef2:	d1f8      	bne.n	8015ee6 <__gethex+0x6a>
 8015ef4:	498d      	ldr	r1, [pc, #564]	@ (801612c <__gethex+0x2b0>)
 8015ef6:	2201      	movs	r2, #1
 8015ef8:	4630      	mov	r0, r6
 8015efa:	f7fe ff21 	bl	8014d40 <strncmp>
 8015efe:	2800      	cmp	r0, #0
 8015f00:	d13f      	bne.n	8015f82 <__gethex+0x106>
 8015f02:	b944      	cbnz	r4, 8015f16 <__gethex+0x9a>
 8015f04:	1c74      	adds	r4, r6, #1
 8015f06:	4622      	mov	r2, r4
 8015f08:	4616      	mov	r6, r2
 8015f0a:	3201      	adds	r2, #1
 8015f0c:	7830      	ldrb	r0, [r6, #0]
 8015f0e:	f7ff ff9f 	bl	8015e50 <__hexdig_fun>
 8015f12:	2800      	cmp	r0, #0
 8015f14:	d1f8      	bne.n	8015f08 <__gethex+0x8c>
 8015f16:	1ba4      	subs	r4, r4, r6
 8015f18:	00a7      	lsls	r7, r4, #2
 8015f1a:	7833      	ldrb	r3, [r6, #0]
 8015f1c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8015f20:	2b50      	cmp	r3, #80	@ 0x50
 8015f22:	d13e      	bne.n	8015fa2 <__gethex+0x126>
 8015f24:	7873      	ldrb	r3, [r6, #1]
 8015f26:	2b2b      	cmp	r3, #43	@ 0x2b
 8015f28:	d033      	beq.n	8015f92 <__gethex+0x116>
 8015f2a:	2b2d      	cmp	r3, #45	@ 0x2d
 8015f2c:	d034      	beq.n	8015f98 <__gethex+0x11c>
 8015f2e:	1c71      	adds	r1, r6, #1
 8015f30:	2400      	movs	r4, #0
 8015f32:	7808      	ldrb	r0, [r1, #0]
 8015f34:	f7ff ff8c 	bl	8015e50 <__hexdig_fun>
 8015f38:	1e43      	subs	r3, r0, #1
 8015f3a:	b2db      	uxtb	r3, r3
 8015f3c:	2b18      	cmp	r3, #24
 8015f3e:	d830      	bhi.n	8015fa2 <__gethex+0x126>
 8015f40:	f1a0 0210 	sub.w	r2, r0, #16
 8015f44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015f48:	f7ff ff82 	bl	8015e50 <__hexdig_fun>
 8015f4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8015f50:	fa5f fc8c 	uxtb.w	ip, ip
 8015f54:	f1bc 0f18 	cmp.w	ip, #24
 8015f58:	f04f 030a 	mov.w	r3, #10
 8015f5c:	d91e      	bls.n	8015f9c <__gethex+0x120>
 8015f5e:	b104      	cbz	r4, 8015f62 <__gethex+0xe6>
 8015f60:	4252      	negs	r2, r2
 8015f62:	4417      	add	r7, r2
 8015f64:	f8ca 1000 	str.w	r1, [sl]
 8015f68:	b1ed      	cbz	r5, 8015fa6 <__gethex+0x12a>
 8015f6a:	f1bb 0f00 	cmp.w	fp, #0
 8015f6e:	bf0c      	ite	eq
 8015f70:	2506      	moveq	r5, #6
 8015f72:	2500      	movne	r5, #0
 8015f74:	4628      	mov	r0, r5
 8015f76:	b005      	add	sp, #20
 8015f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f7c:	2500      	movs	r5, #0
 8015f7e:	462c      	mov	r4, r5
 8015f80:	e7b0      	b.n	8015ee4 <__gethex+0x68>
 8015f82:	2c00      	cmp	r4, #0
 8015f84:	d1c7      	bne.n	8015f16 <__gethex+0x9a>
 8015f86:	4627      	mov	r7, r4
 8015f88:	e7c7      	b.n	8015f1a <__gethex+0x9e>
 8015f8a:	464e      	mov	r6, r9
 8015f8c:	462f      	mov	r7, r5
 8015f8e:	2501      	movs	r5, #1
 8015f90:	e7c3      	b.n	8015f1a <__gethex+0x9e>
 8015f92:	2400      	movs	r4, #0
 8015f94:	1cb1      	adds	r1, r6, #2
 8015f96:	e7cc      	b.n	8015f32 <__gethex+0xb6>
 8015f98:	2401      	movs	r4, #1
 8015f9a:	e7fb      	b.n	8015f94 <__gethex+0x118>
 8015f9c:	fb03 0002 	mla	r0, r3, r2, r0
 8015fa0:	e7ce      	b.n	8015f40 <__gethex+0xc4>
 8015fa2:	4631      	mov	r1, r6
 8015fa4:	e7de      	b.n	8015f64 <__gethex+0xe8>
 8015fa6:	eba6 0309 	sub.w	r3, r6, r9
 8015faa:	3b01      	subs	r3, #1
 8015fac:	4629      	mov	r1, r5
 8015fae:	2b07      	cmp	r3, #7
 8015fb0:	dc0a      	bgt.n	8015fc8 <__gethex+0x14c>
 8015fb2:	9801      	ldr	r0, [sp, #4]
 8015fb4:	f000 fa46 	bl	8016444 <_Balloc>
 8015fb8:	4604      	mov	r4, r0
 8015fba:	b940      	cbnz	r0, 8015fce <__gethex+0x152>
 8015fbc:	4b5c      	ldr	r3, [pc, #368]	@ (8016130 <__gethex+0x2b4>)
 8015fbe:	4602      	mov	r2, r0
 8015fc0:	21e4      	movs	r1, #228	@ 0xe4
 8015fc2:	485c      	ldr	r0, [pc, #368]	@ (8016134 <__gethex+0x2b8>)
 8015fc4:	f7ff f830 	bl	8015028 <__assert_func>
 8015fc8:	3101      	adds	r1, #1
 8015fca:	105b      	asrs	r3, r3, #1
 8015fcc:	e7ef      	b.n	8015fae <__gethex+0x132>
 8015fce:	f100 0a14 	add.w	sl, r0, #20
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	4655      	mov	r5, sl
 8015fd6:	469b      	mov	fp, r3
 8015fd8:	45b1      	cmp	r9, r6
 8015fda:	d337      	bcc.n	801604c <__gethex+0x1d0>
 8015fdc:	f845 bb04 	str.w	fp, [r5], #4
 8015fe0:	eba5 050a 	sub.w	r5, r5, sl
 8015fe4:	10ad      	asrs	r5, r5, #2
 8015fe6:	6125      	str	r5, [r4, #16]
 8015fe8:	4658      	mov	r0, fp
 8015fea:	f000 fb1d 	bl	8016628 <__hi0bits>
 8015fee:	016d      	lsls	r5, r5, #5
 8015ff0:	f8d8 6000 	ldr.w	r6, [r8]
 8015ff4:	1a2d      	subs	r5, r5, r0
 8015ff6:	42b5      	cmp	r5, r6
 8015ff8:	dd54      	ble.n	80160a4 <__gethex+0x228>
 8015ffa:	1bad      	subs	r5, r5, r6
 8015ffc:	4629      	mov	r1, r5
 8015ffe:	4620      	mov	r0, r4
 8016000:	f000 fea9 	bl	8016d56 <__any_on>
 8016004:	4681      	mov	r9, r0
 8016006:	b178      	cbz	r0, 8016028 <__gethex+0x1ac>
 8016008:	1e6b      	subs	r3, r5, #1
 801600a:	1159      	asrs	r1, r3, #5
 801600c:	f003 021f 	and.w	r2, r3, #31
 8016010:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016014:	f04f 0901 	mov.w	r9, #1
 8016018:	fa09 f202 	lsl.w	r2, r9, r2
 801601c:	420a      	tst	r2, r1
 801601e:	d003      	beq.n	8016028 <__gethex+0x1ac>
 8016020:	454b      	cmp	r3, r9
 8016022:	dc36      	bgt.n	8016092 <__gethex+0x216>
 8016024:	f04f 0902 	mov.w	r9, #2
 8016028:	4629      	mov	r1, r5
 801602a:	4620      	mov	r0, r4
 801602c:	f7ff febe 	bl	8015dac <rshift>
 8016030:	442f      	add	r7, r5
 8016032:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016036:	42bb      	cmp	r3, r7
 8016038:	da42      	bge.n	80160c0 <__gethex+0x244>
 801603a:	9801      	ldr	r0, [sp, #4]
 801603c:	4621      	mov	r1, r4
 801603e:	f000 fa41 	bl	80164c4 <_Bfree>
 8016042:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016044:	2300      	movs	r3, #0
 8016046:	6013      	str	r3, [r2, #0]
 8016048:	25a3      	movs	r5, #163	@ 0xa3
 801604a:	e793      	b.n	8015f74 <__gethex+0xf8>
 801604c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8016050:	2a2e      	cmp	r2, #46	@ 0x2e
 8016052:	d012      	beq.n	801607a <__gethex+0x1fe>
 8016054:	2b20      	cmp	r3, #32
 8016056:	d104      	bne.n	8016062 <__gethex+0x1e6>
 8016058:	f845 bb04 	str.w	fp, [r5], #4
 801605c:	f04f 0b00 	mov.w	fp, #0
 8016060:	465b      	mov	r3, fp
 8016062:	7830      	ldrb	r0, [r6, #0]
 8016064:	9303      	str	r3, [sp, #12]
 8016066:	f7ff fef3 	bl	8015e50 <__hexdig_fun>
 801606a:	9b03      	ldr	r3, [sp, #12]
 801606c:	f000 000f 	and.w	r0, r0, #15
 8016070:	4098      	lsls	r0, r3
 8016072:	ea4b 0b00 	orr.w	fp, fp, r0
 8016076:	3304      	adds	r3, #4
 8016078:	e7ae      	b.n	8015fd8 <__gethex+0x15c>
 801607a:	45b1      	cmp	r9, r6
 801607c:	d8ea      	bhi.n	8016054 <__gethex+0x1d8>
 801607e:	492b      	ldr	r1, [pc, #172]	@ (801612c <__gethex+0x2b0>)
 8016080:	9303      	str	r3, [sp, #12]
 8016082:	2201      	movs	r2, #1
 8016084:	4630      	mov	r0, r6
 8016086:	f7fe fe5b 	bl	8014d40 <strncmp>
 801608a:	9b03      	ldr	r3, [sp, #12]
 801608c:	2800      	cmp	r0, #0
 801608e:	d1e1      	bne.n	8016054 <__gethex+0x1d8>
 8016090:	e7a2      	b.n	8015fd8 <__gethex+0x15c>
 8016092:	1ea9      	subs	r1, r5, #2
 8016094:	4620      	mov	r0, r4
 8016096:	f000 fe5e 	bl	8016d56 <__any_on>
 801609a:	2800      	cmp	r0, #0
 801609c:	d0c2      	beq.n	8016024 <__gethex+0x1a8>
 801609e:	f04f 0903 	mov.w	r9, #3
 80160a2:	e7c1      	b.n	8016028 <__gethex+0x1ac>
 80160a4:	da09      	bge.n	80160ba <__gethex+0x23e>
 80160a6:	1b75      	subs	r5, r6, r5
 80160a8:	4621      	mov	r1, r4
 80160aa:	9801      	ldr	r0, [sp, #4]
 80160ac:	462a      	mov	r2, r5
 80160ae:	f000 fc19 	bl	80168e4 <__lshift>
 80160b2:	1b7f      	subs	r7, r7, r5
 80160b4:	4604      	mov	r4, r0
 80160b6:	f100 0a14 	add.w	sl, r0, #20
 80160ba:	f04f 0900 	mov.w	r9, #0
 80160be:	e7b8      	b.n	8016032 <__gethex+0x1b6>
 80160c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80160c4:	42bd      	cmp	r5, r7
 80160c6:	dd6f      	ble.n	80161a8 <__gethex+0x32c>
 80160c8:	1bed      	subs	r5, r5, r7
 80160ca:	42ae      	cmp	r6, r5
 80160cc:	dc34      	bgt.n	8016138 <__gethex+0x2bc>
 80160ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80160d2:	2b02      	cmp	r3, #2
 80160d4:	d022      	beq.n	801611c <__gethex+0x2a0>
 80160d6:	2b03      	cmp	r3, #3
 80160d8:	d024      	beq.n	8016124 <__gethex+0x2a8>
 80160da:	2b01      	cmp	r3, #1
 80160dc:	d115      	bne.n	801610a <__gethex+0x28e>
 80160de:	42ae      	cmp	r6, r5
 80160e0:	d113      	bne.n	801610a <__gethex+0x28e>
 80160e2:	2e01      	cmp	r6, #1
 80160e4:	d10b      	bne.n	80160fe <__gethex+0x282>
 80160e6:	9a02      	ldr	r2, [sp, #8]
 80160e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80160ec:	6013      	str	r3, [r2, #0]
 80160ee:	2301      	movs	r3, #1
 80160f0:	6123      	str	r3, [r4, #16]
 80160f2:	f8ca 3000 	str.w	r3, [sl]
 80160f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80160f8:	2562      	movs	r5, #98	@ 0x62
 80160fa:	601c      	str	r4, [r3, #0]
 80160fc:	e73a      	b.n	8015f74 <__gethex+0xf8>
 80160fe:	1e71      	subs	r1, r6, #1
 8016100:	4620      	mov	r0, r4
 8016102:	f000 fe28 	bl	8016d56 <__any_on>
 8016106:	2800      	cmp	r0, #0
 8016108:	d1ed      	bne.n	80160e6 <__gethex+0x26a>
 801610a:	9801      	ldr	r0, [sp, #4]
 801610c:	4621      	mov	r1, r4
 801610e:	f000 f9d9 	bl	80164c4 <_Bfree>
 8016112:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016114:	2300      	movs	r3, #0
 8016116:	6013      	str	r3, [r2, #0]
 8016118:	2550      	movs	r5, #80	@ 0x50
 801611a:	e72b      	b.n	8015f74 <__gethex+0xf8>
 801611c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801611e:	2b00      	cmp	r3, #0
 8016120:	d1f3      	bne.n	801610a <__gethex+0x28e>
 8016122:	e7e0      	b.n	80160e6 <__gethex+0x26a>
 8016124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016126:	2b00      	cmp	r3, #0
 8016128:	d1dd      	bne.n	80160e6 <__gethex+0x26a>
 801612a:	e7ee      	b.n	801610a <__gethex+0x28e>
 801612c:	08019b68 	.word	0x08019b68
 8016130:	08019cb8 	.word	0x08019cb8
 8016134:	08019cc9 	.word	0x08019cc9
 8016138:	1e6f      	subs	r7, r5, #1
 801613a:	f1b9 0f00 	cmp.w	r9, #0
 801613e:	d130      	bne.n	80161a2 <__gethex+0x326>
 8016140:	b127      	cbz	r7, 801614c <__gethex+0x2d0>
 8016142:	4639      	mov	r1, r7
 8016144:	4620      	mov	r0, r4
 8016146:	f000 fe06 	bl	8016d56 <__any_on>
 801614a:	4681      	mov	r9, r0
 801614c:	117a      	asrs	r2, r7, #5
 801614e:	2301      	movs	r3, #1
 8016150:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016154:	f007 071f 	and.w	r7, r7, #31
 8016158:	40bb      	lsls	r3, r7
 801615a:	4213      	tst	r3, r2
 801615c:	4629      	mov	r1, r5
 801615e:	4620      	mov	r0, r4
 8016160:	bf18      	it	ne
 8016162:	f049 0902 	orrne.w	r9, r9, #2
 8016166:	f7ff fe21 	bl	8015dac <rshift>
 801616a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801616e:	1b76      	subs	r6, r6, r5
 8016170:	2502      	movs	r5, #2
 8016172:	f1b9 0f00 	cmp.w	r9, #0
 8016176:	d047      	beq.n	8016208 <__gethex+0x38c>
 8016178:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801617c:	2b02      	cmp	r3, #2
 801617e:	d015      	beq.n	80161ac <__gethex+0x330>
 8016180:	2b03      	cmp	r3, #3
 8016182:	d017      	beq.n	80161b4 <__gethex+0x338>
 8016184:	2b01      	cmp	r3, #1
 8016186:	d109      	bne.n	801619c <__gethex+0x320>
 8016188:	f019 0f02 	tst.w	r9, #2
 801618c:	d006      	beq.n	801619c <__gethex+0x320>
 801618e:	f8da 3000 	ldr.w	r3, [sl]
 8016192:	ea49 0903 	orr.w	r9, r9, r3
 8016196:	f019 0f01 	tst.w	r9, #1
 801619a:	d10e      	bne.n	80161ba <__gethex+0x33e>
 801619c:	f045 0510 	orr.w	r5, r5, #16
 80161a0:	e032      	b.n	8016208 <__gethex+0x38c>
 80161a2:	f04f 0901 	mov.w	r9, #1
 80161a6:	e7d1      	b.n	801614c <__gethex+0x2d0>
 80161a8:	2501      	movs	r5, #1
 80161aa:	e7e2      	b.n	8016172 <__gethex+0x2f6>
 80161ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80161ae:	f1c3 0301 	rsb	r3, r3, #1
 80161b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80161b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d0f0      	beq.n	801619c <__gethex+0x320>
 80161ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80161be:	f104 0314 	add.w	r3, r4, #20
 80161c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80161c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80161ca:	f04f 0c00 	mov.w	ip, #0
 80161ce:	4618      	mov	r0, r3
 80161d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80161d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80161d8:	d01b      	beq.n	8016212 <__gethex+0x396>
 80161da:	3201      	adds	r2, #1
 80161dc:	6002      	str	r2, [r0, #0]
 80161de:	2d02      	cmp	r5, #2
 80161e0:	f104 0314 	add.w	r3, r4, #20
 80161e4:	d13c      	bne.n	8016260 <__gethex+0x3e4>
 80161e6:	f8d8 2000 	ldr.w	r2, [r8]
 80161ea:	3a01      	subs	r2, #1
 80161ec:	42b2      	cmp	r2, r6
 80161ee:	d109      	bne.n	8016204 <__gethex+0x388>
 80161f0:	1171      	asrs	r1, r6, #5
 80161f2:	2201      	movs	r2, #1
 80161f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80161f8:	f006 061f 	and.w	r6, r6, #31
 80161fc:	fa02 f606 	lsl.w	r6, r2, r6
 8016200:	421e      	tst	r6, r3
 8016202:	d13a      	bne.n	801627a <__gethex+0x3fe>
 8016204:	f045 0520 	orr.w	r5, r5, #32
 8016208:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801620a:	601c      	str	r4, [r3, #0]
 801620c:	9b02      	ldr	r3, [sp, #8]
 801620e:	601f      	str	r7, [r3, #0]
 8016210:	e6b0      	b.n	8015f74 <__gethex+0xf8>
 8016212:	4299      	cmp	r1, r3
 8016214:	f843 cc04 	str.w	ip, [r3, #-4]
 8016218:	d8d9      	bhi.n	80161ce <__gethex+0x352>
 801621a:	68a3      	ldr	r3, [r4, #8]
 801621c:	459b      	cmp	fp, r3
 801621e:	db17      	blt.n	8016250 <__gethex+0x3d4>
 8016220:	6861      	ldr	r1, [r4, #4]
 8016222:	9801      	ldr	r0, [sp, #4]
 8016224:	3101      	adds	r1, #1
 8016226:	f000 f90d 	bl	8016444 <_Balloc>
 801622a:	4681      	mov	r9, r0
 801622c:	b918      	cbnz	r0, 8016236 <__gethex+0x3ba>
 801622e:	4b1a      	ldr	r3, [pc, #104]	@ (8016298 <__gethex+0x41c>)
 8016230:	4602      	mov	r2, r0
 8016232:	2184      	movs	r1, #132	@ 0x84
 8016234:	e6c5      	b.n	8015fc2 <__gethex+0x146>
 8016236:	6922      	ldr	r2, [r4, #16]
 8016238:	3202      	adds	r2, #2
 801623a:	f104 010c 	add.w	r1, r4, #12
 801623e:	0092      	lsls	r2, r2, #2
 8016240:	300c      	adds	r0, #12
 8016242:	f7fe fed8 	bl	8014ff6 <memcpy>
 8016246:	4621      	mov	r1, r4
 8016248:	9801      	ldr	r0, [sp, #4]
 801624a:	f000 f93b 	bl	80164c4 <_Bfree>
 801624e:	464c      	mov	r4, r9
 8016250:	6923      	ldr	r3, [r4, #16]
 8016252:	1c5a      	adds	r2, r3, #1
 8016254:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016258:	6122      	str	r2, [r4, #16]
 801625a:	2201      	movs	r2, #1
 801625c:	615a      	str	r2, [r3, #20]
 801625e:	e7be      	b.n	80161de <__gethex+0x362>
 8016260:	6922      	ldr	r2, [r4, #16]
 8016262:	455a      	cmp	r2, fp
 8016264:	dd0b      	ble.n	801627e <__gethex+0x402>
 8016266:	2101      	movs	r1, #1
 8016268:	4620      	mov	r0, r4
 801626a:	f7ff fd9f 	bl	8015dac <rshift>
 801626e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016272:	3701      	adds	r7, #1
 8016274:	42bb      	cmp	r3, r7
 8016276:	f6ff aee0 	blt.w	801603a <__gethex+0x1be>
 801627a:	2501      	movs	r5, #1
 801627c:	e7c2      	b.n	8016204 <__gethex+0x388>
 801627e:	f016 061f 	ands.w	r6, r6, #31
 8016282:	d0fa      	beq.n	801627a <__gethex+0x3fe>
 8016284:	4453      	add	r3, sl
 8016286:	f1c6 0620 	rsb	r6, r6, #32
 801628a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801628e:	f000 f9cb 	bl	8016628 <__hi0bits>
 8016292:	42b0      	cmp	r0, r6
 8016294:	dbe7      	blt.n	8016266 <__gethex+0x3ea>
 8016296:	e7f0      	b.n	801627a <__gethex+0x3fe>
 8016298:	08019cb8 	.word	0x08019cb8

0801629c <L_shift>:
 801629c:	f1c2 0208 	rsb	r2, r2, #8
 80162a0:	0092      	lsls	r2, r2, #2
 80162a2:	b570      	push	{r4, r5, r6, lr}
 80162a4:	f1c2 0620 	rsb	r6, r2, #32
 80162a8:	6843      	ldr	r3, [r0, #4]
 80162aa:	6804      	ldr	r4, [r0, #0]
 80162ac:	fa03 f506 	lsl.w	r5, r3, r6
 80162b0:	432c      	orrs	r4, r5
 80162b2:	40d3      	lsrs	r3, r2
 80162b4:	6004      	str	r4, [r0, #0]
 80162b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80162ba:	4288      	cmp	r0, r1
 80162bc:	d3f4      	bcc.n	80162a8 <L_shift+0xc>
 80162be:	bd70      	pop	{r4, r5, r6, pc}

080162c0 <__match>:
 80162c0:	b530      	push	{r4, r5, lr}
 80162c2:	6803      	ldr	r3, [r0, #0]
 80162c4:	3301      	adds	r3, #1
 80162c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80162ca:	b914      	cbnz	r4, 80162d2 <__match+0x12>
 80162cc:	6003      	str	r3, [r0, #0]
 80162ce:	2001      	movs	r0, #1
 80162d0:	bd30      	pop	{r4, r5, pc}
 80162d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80162d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80162da:	2d19      	cmp	r5, #25
 80162dc:	bf98      	it	ls
 80162de:	3220      	addls	r2, #32
 80162e0:	42a2      	cmp	r2, r4
 80162e2:	d0f0      	beq.n	80162c6 <__match+0x6>
 80162e4:	2000      	movs	r0, #0
 80162e6:	e7f3      	b.n	80162d0 <__match+0x10>

080162e8 <__hexnan>:
 80162e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162ec:	680b      	ldr	r3, [r1, #0]
 80162ee:	6801      	ldr	r1, [r0, #0]
 80162f0:	115e      	asrs	r6, r3, #5
 80162f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80162f6:	f013 031f 	ands.w	r3, r3, #31
 80162fa:	b087      	sub	sp, #28
 80162fc:	bf18      	it	ne
 80162fe:	3604      	addne	r6, #4
 8016300:	2500      	movs	r5, #0
 8016302:	1f37      	subs	r7, r6, #4
 8016304:	4682      	mov	sl, r0
 8016306:	4690      	mov	r8, r2
 8016308:	9301      	str	r3, [sp, #4]
 801630a:	f846 5c04 	str.w	r5, [r6, #-4]
 801630e:	46b9      	mov	r9, r7
 8016310:	463c      	mov	r4, r7
 8016312:	9502      	str	r5, [sp, #8]
 8016314:	46ab      	mov	fp, r5
 8016316:	784a      	ldrb	r2, [r1, #1]
 8016318:	1c4b      	adds	r3, r1, #1
 801631a:	9303      	str	r3, [sp, #12]
 801631c:	b342      	cbz	r2, 8016370 <__hexnan+0x88>
 801631e:	4610      	mov	r0, r2
 8016320:	9105      	str	r1, [sp, #20]
 8016322:	9204      	str	r2, [sp, #16]
 8016324:	f7ff fd94 	bl	8015e50 <__hexdig_fun>
 8016328:	2800      	cmp	r0, #0
 801632a:	d151      	bne.n	80163d0 <__hexnan+0xe8>
 801632c:	9a04      	ldr	r2, [sp, #16]
 801632e:	9905      	ldr	r1, [sp, #20]
 8016330:	2a20      	cmp	r2, #32
 8016332:	d818      	bhi.n	8016366 <__hexnan+0x7e>
 8016334:	9b02      	ldr	r3, [sp, #8]
 8016336:	459b      	cmp	fp, r3
 8016338:	dd13      	ble.n	8016362 <__hexnan+0x7a>
 801633a:	454c      	cmp	r4, r9
 801633c:	d206      	bcs.n	801634c <__hexnan+0x64>
 801633e:	2d07      	cmp	r5, #7
 8016340:	dc04      	bgt.n	801634c <__hexnan+0x64>
 8016342:	462a      	mov	r2, r5
 8016344:	4649      	mov	r1, r9
 8016346:	4620      	mov	r0, r4
 8016348:	f7ff ffa8 	bl	801629c <L_shift>
 801634c:	4544      	cmp	r4, r8
 801634e:	d952      	bls.n	80163f6 <__hexnan+0x10e>
 8016350:	2300      	movs	r3, #0
 8016352:	f1a4 0904 	sub.w	r9, r4, #4
 8016356:	f844 3c04 	str.w	r3, [r4, #-4]
 801635a:	f8cd b008 	str.w	fp, [sp, #8]
 801635e:	464c      	mov	r4, r9
 8016360:	461d      	mov	r5, r3
 8016362:	9903      	ldr	r1, [sp, #12]
 8016364:	e7d7      	b.n	8016316 <__hexnan+0x2e>
 8016366:	2a29      	cmp	r2, #41	@ 0x29
 8016368:	d157      	bne.n	801641a <__hexnan+0x132>
 801636a:	3102      	adds	r1, #2
 801636c:	f8ca 1000 	str.w	r1, [sl]
 8016370:	f1bb 0f00 	cmp.w	fp, #0
 8016374:	d051      	beq.n	801641a <__hexnan+0x132>
 8016376:	454c      	cmp	r4, r9
 8016378:	d206      	bcs.n	8016388 <__hexnan+0xa0>
 801637a:	2d07      	cmp	r5, #7
 801637c:	dc04      	bgt.n	8016388 <__hexnan+0xa0>
 801637e:	462a      	mov	r2, r5
 8016380:	4649      	mov	r1, r9
 8016382:	4620      	mov	r0, r4
 8016384:	f7ff ff8a 	bl	801629c <L_shift>
 8016388:	4544      	cmp	r4, r8
 801638a:	d936      	bls.n	80163fa <__hexnan+0x112>
 801638c:	f1a8 0204 	sub.w	r2, r8, #4
 8016390:	4623      	mov	r3, r4
 8016392:	f853 1b04 	ldr.w	r1, [r3], #4
 8016396:	f842 1f04 	str.w	r1, [r2, #4]!
 801639a:	429f      	cmp	r7, r3
 801639c:	d2f9      	bcs.n	8016392 <__hexnan+0xaa>
 801639e:	1b3b      	subs	r3, r7, r4
 80163a0:	f023 0303 	bic.w	r3, r3, #3
 80163a4:	3304      	adds	r3, #4
 80163a6:	3401      	adds	r4, #1
 80163a8:	3e03      	subs	r6, #3
 80163aa:	42b4      	cmp	r4, r6
 80163ac:	bf88      	it	hi
 80163ae:	2304      	movhi	r3, #4
 80163b0:	4443      	add	r3, r8
 80163b2:	2200      	movs	r2, #0
 80163b4:	f843 2b04 	str.w	r2, [r3], #4
 80163b8:	429f      	cmp	r7, r3
 80163ba:	d2fb      	bcs.n	80163b4 <__hexnan+0xcc>
 80163bc:	683b      	ldr	r3, [r7, #0]
 80163be:	b91b      	cbnz	r3, 80163c8 <__hexnan+0xe0>
 80163c0:	4547      	cmp	r7, r8
 80163c2:	d128      	bne.n	8016416 <__hexnan+0x12e>
 80163c4:	2301      	movs	r3, #1
 80163c6:	603b      	str	r3, [r7, #0]
 80163c8:	2005      	movs	r0, #5
 80163ca:	b007      	add	sp, #28
 80163cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163d0:	3501      	adds	r5, #1
 80163d2:	2d08      	cmp	r5, #8
 80163d4:	f10b 0b01 	add.w	fp, fp, #1
 80163d8:	dd06      	ble.n	80163e8 <__hexnan+0x100>
 80163da:	4544      	cmp	r4, r8
 80163dc:	d9c1      	bls.n	8016362 <__hexnan+0x7a>
 80163de:	2300      	movs	r3, #0
 80163e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80163e4:	2501      	movs	r5, #1
 80163e6:	3c04      	subs	r4, #4
 80163e8:	6822      	ldr	r2, [r4, #0]
 80163ea:	f000 000f 	and.w	r0, r0, #15
 80163ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80163f2:	6020      	str	r0, [r4, #0]
 80163f4:	e7b5      	b.n	8016362 <__hexnan+0x7a>
 80163f6:	2508      	movs	r5, #8
 80163f8:	e7b3      	b.n	8016362 <__hexnan+0x7a>
 80163fa:	9b01      	ldr	r3, [sp, #4]
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d0dd      	beq.n	80163bc <__hexnan+0xd4>
 8016400:	f1c3 0320 	rsb	r3, r3, #32
 8016404:	f04f 32ff 	mov.w	r2, #4294967295
 8016408:	40da      	lsrs	r2, r3
 801640a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801640e:	4013      	ands	r3, r2
 8016410:	f846 3c04 	str.w	r3, [r6, #-4]
 8016414:	e7d2      	b.n	80163bc <__hexnan+0xd4>
 8016416:	3f04      	subs	r7, #4
 8016418:	e7d0      	b.n	80163bc <__hexnan+0xd4>
 801641a:	2004      	movs	r0, #4
 801641c:	e7d5      	b.n	80163ca <__hexnan+0xe2>

0801641e <__ascii_mbtowc>:
 801641e:	b082      	sub	sp, #8
 8016420:	b901      	cbnz	r1, 8016424 <__ascii_mbtowc+0x6>
 8016422:	a901      	add	r1, sp, #4
 8016424:	b142      	cbz	r2, 8016438 <__ascii_mbtowc+0x1a>
 8016426:	b14b      	cbz	r3, 801643c <__ascii_mbtowc+0x1e>
 8016428:	7813      	ldrb	r3, [r2, #0]
 801642a:	600b      	str	r3, [r1, #0]
 801642c:	7812      	ldrb	r2, [r2, #0]
 801642e:	1e10      	subs	r0, r2, #0
 8016430:	bf18      	it	ne
 8016432:	2001      	movne	r0, #1
 8016434:	b002      	add	sp, #8
 8016436:	4770      	bx	lr
 8016438:	4610      	mov	r0, r2
 801643a:	e7fb      	b.n	8016434 <__ascii_mbtowc+0x16>
 801643c:	f06f 0001 	mvn.w	r0, #1
 8016440:	e7f8      	b.n	8016434 <__ascii_mbtowc+0x16>
	...

08016444 <_Balloc>:
 8016444:	b570      	push	{r4, r5, r6, lr}
 8016446:	69c6      	ldr	r6, [r0, #28]
 8016448:	4604      	mov	r4, r0
 801644a:	460d      	mov	r5, r1
 801644c:	b976      	cbnz	r6, 801646c <_Balloc+0x28>
 801644e:	2010      	movs	r0, #16
 8016450:	f7fc ffb6 	bl	80133c0 <malloc>
 8016454:	4602      	mov	r2, r0
 8016456:	61e0      	str	r0, [r4, #28]
 8016458:	b920      	cbnz	r0, 8016464 <_Balloc+0x20>
 801645a:	4b18      	ldr	r3, [pc, #96]	@ (80164bc <_Balloc+0x78>)
 801645c:	4818      	ldr	r0, [pc, #96]	@ (80164c0 <_Balloc+0x7c>)
 801645e:	216b      	movs	r1, #107	@ 0x6b
 8016460:	f7fe fde2 	bl	8015028 <__assert_func>
 8016464:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016468:	6006      	str	r6, [r0, #0]
 801646a:	60c6      	str	r6, [r0, #12]
 801646c:	69e6      	ldr	r6, [r4, #28]
 801646e:	68f3      	ldr	r3, [r6, #12]
 8016470:	b183      	cbz	r3, 8016494 <_Balloc+0x50>
 8016472:	69e3      	ldr	r3, [r4, #28]
 8016474:	68db      	ldr	r3, [r3, #12]
 8016476:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801647a:	b9b8      	cbnz	r0, 80164ac <_Balloc+0x68>
 801647c:	2101      	movs	r1, #1
 801647e:	fa01 f605 	lsl.w	r6, r1, r5
 8016482:	1d72      	adds	r2, r6, #5
 8016484:	0092      	lsls	r2, r2, #2
 8016486:	4620      	mov	r0, r4
 8016488:	f000 fd59 	bl	8016f3e <_calloc_r>
 801648c:	b160      	cbz	r0, 80164a8 <_Balloc+0x64>
 801648e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016492:	e00e      	b.n	80164b2 <_Balloc+0x6e>
 8016494:	2221      	movs	r2, #33	@ 0x21
 8016496:	2104      	movs	r1, #4
 8016498:	4620      	mov	r0, r4
 801649a:	f000 fd50 	bl	8016f3e <_calloc_r>
 801649e:	69e3      	ldr	r3, [r4, #28]
 80164a0:	60f0      	str	r0, [r6, #12]
 80164a2:	68db      	ldr	r3, [r3, #12]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d1e4      	bne.n	8016472 <_Balloc+0x2e>
 80164a8:	2000      	movs	r0, #0
 80164aa:	bd70      	pop	{r4, r5, r6, pc}
 80164ac:	6802      	ldr	r2, [r0, #0]
 80164ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80164b2:	2300      	movs	r3, #0
 80164b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80164b8:	e7f7      	b.n	80164aa <_Balloc+0x66>
 80164ba:	bf00      	nop
 80164bc:	08019b9e 	.word	0x08019b9e
 80164c0:	08019d29 	.word	0x08019d29

080164c4 <_Bfree>:
 80164c4:	b570      	push	{r4, r5, r6, lr}
 80164c6:	69c6      	ldr	r6, [r0, #28]
 80164c8:	4605      	mov	r5, r0
 80164ca:	460c      	mov	r4, r1
 80164cc:	b976      	cbnz	r6, 80164ec <_Bfree+0x28>
 80164ce:	2010      	movs	r0, #16
 80164d0:	f7fc ff76 	bl	80133c0 <malloc>
 80164d4:	4602      	mov	r2, r0
 80164d6:	61e8      	str	r0, [r5, #28]
 80164d8:	b920      	cbnz	r0, 80164e4 <_Bfree+0x20>
 80164da:	4b09      	ldr	r3, [pc, #36]	@ (8016500 <_Bfree+0x3c>)
 80164dc:	4809      	ldr	r0, [pc, #36]	@ (8016504 <_Bfree+0x40>)
 80164de:	218f      	movs	r1, #143	@ 0x8f
 80164e0:	f7fe fda2 	bl	8015028 <__assert_func>
 80164e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80164e8:	6006      	str	r6, [r0, #0]
 80164ea:	60c6      	str	r6, [r0, #12]
 80164ec:	b13c      	cbz	r4, 80164fe <_Bfree+0x3a>
 80164ee:	69eb      	ldr	r3, [r5, #28]
 80164f0:	6862      	ldr	r2, [r4, #4]
 80164f2:	68db      	ldr	r3, [r3, #12]
 80164f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80164f8:	6021      	str	r1, [r4, #0]
 80164fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80164fe:	bd70      	pop	{r4, r5, r6, pc}
 8016500:	08019b9e 	.word	0x08019b9e
 8016504:	08019d29 	.word	0x08019d29

08016508 <__multadd>:
 8016508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801650c:	690d      	ldr	r5, [r1, #16]
 801650e:	4607      	mov	r7, r0
 8016510:	460c      	mov	r4, r1
 8016512:	461e      	mov	r6, r3
 8016514:	f101 0c14 	add.w	ip, r1, #20
 8016518:	2000      	movs	r0, #0
 801651a:	f8dc 3000 	ldr.w	r3, [ip]
 801651e:	b299      	uxth	r1, r3
 8016520:	fb02 6101 	mla	r1, r2, r1, r6
 8016524:	0c1e      	lsrs	r6, r3, #16
 8016526:	0c0b      	lsrs	r3, r1, #16
 8016528:	fb02 3306 	mla	r3, r2, r6, r3
 801652c:	b289      	uxth	r1, r1
 801652e:	3001      	adds	r0, #1
 8016530:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016534:	4285      	cmp	r5, r0
 8016536:	f84c 1b04 	str.w	r1, [ip], #4
 801653a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801653e:	dcec      	bgt.n	801651a <__multadd+0x12>
 8016540:	b30e      	cbz	r6, 8016586 <__multadd+0x7e>
 8016542:	68a3      	ldr	r3, [r4, #8]
 8016544:	42ab      	cmp	r3, r5
 8016546:	dc19      	bgt.n	801657c <__multadd+0x74>
 8016548:	6861      	ldr	r1, [r4, #4]
 801654a:	4638      	mov	r0, r7
 801654c:	3101      	adds	r1, #1
 801654e:	f7ff ff79 	bl	8016444 <_Balloc>
 8016552:	4680      	mov	r8, r0
 8016554:	b928      	cbnz	r0, 8016562 <__multadd+0x5a>
 8016556:	4602      	mov	r2, r0
 8016558:	4b0c      	ldr	r3, [pc, #48]	@ (801658c <__multadd+0x84>)
 801655a:	480d      	ldr	r0, [pc, #52]	@ (8016590 <__multadd+0x88>)
 801655c:	21ba      	movs	r1, #186	@ 0xba
 801655e:	f7fe fd63 	bl	8015028 <__assert_func>
 8016562:	6922      	ldr	r2, [r4, #16]
 8016564:	3202      	adds	r2, #2
 8016566:	f104 010c 	add.w	r1, r4, #12
 801656a:	0092      	lsls	r2, r2, #2
 801656c:	300c      	adds	r0, #12
 801656e:	f7fe fd42 	bl	8014ff6 <memcpy>
 8016572:	4621      	mov	r1, r4
 8016574:	4638      	mov	r0, r7
 8016576:	f7ff ffa5 	bl	80164c4 <_Bfree>
 801657a:	4644      	mov	r4, r8
 801657c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016580:	3501      	adds	r5, #1
 8016582:	615e      	str	r6, [r3, #20]
 8016584:	6125      	str	r5, [r4, #16]
 8016586:	4620      	mov	r0, r4
 8016588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801658c:	08019cb8 	.word	0x08019cb8
 8016590:	08019d29 	.word	0x08019d29

08016594 <__s2b>:
 8016594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016598:	460c      	mov	r4, r1
 801659a:	4615      	mov	r5, r2
 801659c:	461f      	mov	r7, r3
 801659e:	2209      	movs	r2, #9
 80165a0:	3308      	adds	r3, #8
 80165a2:	4606      	mov	r6, r0
 80165a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80165a8:	2100      	movs	r1, #0
 80165aa:	2201      	movs	r2, #1
 80165ac:	429a      	cmp	r2, r3
 80165ae:	db09      	blt.n	80165c4 <__s2b+0x30>
 80165b0:	4630      	mov	r0, r6
 80165b2:	f7ff ff47 	bl	8016444 <_Balloc>
 80165b6:	b940      	cbnz	r0, 80165ca <__s2b+0x36>
 80165b8:	4602      	mov	r2, r0
 80165ba:	4b19      	ldr	r3, [pc, #100]	@ (8016620 <__s2b+0x8c>)
 80165bc:	4819      	ldr	r0, [pc, #100]	@ (8016624 <__s2b+0x90>)
 80165be:	21d3      	movs	r1, #211	@ 0xd3
 80165c0:	f7fe fd32 	bl	8015028 <__assert_func>
 80165c4:	0052      	lsls	r2, r2, #1
 80165c6:	3101      	adds	r1, #1
 80165c8:	e7f0      	b.n	80165ac <__s2b+0x18>
 80165ca:	9b08      	ldr	r3, [sp, #32]
 80165cc:	6143      	str	r3, [r0, #20]
 80165ce:	2d09      	cmp	r5, #9
 80165d0:	f04f 0301 	mov.w	r3, #1
 80165d4:	6103      	str	r3, [r0, #16]
 80165d6:	dd16      	ble.n	8016606 <__s2b+0x72>
 80165d8:	f104 0909 	add.w	r9, r4, #9
 80165dc:	46c8      	mov	r8, r9
 80165de:	442c      	add	r4, r5
 80165e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80165e4:	4601      	mov	r1, r0
 80165e6:	3b30      	subs	r3, #48	@ 0x30
 80165e8:	220a      	movs	r2, #10
 80165ea:	4630      	mov	r0, r6
 80165ec:	f7ff ff8c 	bl	8016508 <__multadd>
 80165f0:	45a0      	cmp	r8, r4
 80165f2:	d1f5      	bne.n	80165e0 <__s2b+0x4c>
 80165f4:	f1a5 0408 	sub.w	r4, r5, #8
 80165f8:	444c      	add	r4, r9
 80165fa:	1b2d      	subs	r5, r5, r4
 80165fc:	1963      	adds	r3, r4, r5
 80165fe:	42bb      	cmp	r3, r7
 8016600:	db04      	blt.n	801660c <__s2b+0x78>
 8016602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016606:	340a      	adds	r4, #10
 8016608:	2509      	movs	r5, #9
 801660a:	e7f6      	b.n	80165fa <__s2b+0x66>
 801660c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016610:	4601      	mov	r1, r0
 8016612:	3b30      	subs	r3, #48	@ 0x30
 8016614:	220a      	movs	r2, #10
 8016616:	4630      	mov	r0, r6
 8016618:	f7ff ff76 	bl	8016508 <__multadd>
 801661c:	e7ee      	b.n	80165fc <__s2b+0x68>
 801661e:	bf00      	nop
 8016620:	08019cb8 	.word	0x08019cb8
 8016624:	08019d29 	.word	0x08019d29

08016628 <__hi0bits>:
 8016628:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801662c:	4603      	mov	r3, r0
 801662e:	bf36      	itet	cc
 8016630:	0403      	lslcc	r3, r0, #16
 8016632:	2000      	movcs	r0, #0
 8016634:	2010      	movcc	r0, #16
 8016636:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801663a:	bf3c      	itt	cc
 801663c:	021b      	lslcc	r3, r3, #8
 801663e:	3008      	addcc	r0, #8
 8016640:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016644:	bf3c      	itt	cc
 8016646:	011b      	lslcc	r3, r3, #4
 8016648:	3004      	addcc	r0, #4
 801664a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801664e:	bf3c      	itt	cc
 8016650:	009b      	lslcc	r3, r3, #2
 8016652:	3002      	addcc	r0, #2
 8016654:	2b00      	cmp	r3, #0
 8016656:	db05      	blt.n	8016664 <__hi0bits+0x3c>
 8016658:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801665c:	f100 0001 	add.w	r0, r0, #1
 8016660:	bf08      	it	eq
 8016662:	2020      	moveq	r0, #32
 8016664:	4770      	bx	lr

08016666 <__lo0bits>:
 8016666:	6803      	ldr	r3, [r0, #0]
 8016668:	4602      	mov	r2, r0
 801666a:	f013 0007 	ands.w	r0, r3, #7
 801666e:	d00b      	beq.n	8016688 <__lo0bits+0x22>
 8016670:	07d9      	lsls	r1, r3, #31
 8016672:	d421      	bmi.n	80166b8 <__lo0bits+0x52>
 8016674:	0798      	lsls	r0, r3, #30
 8016676:	bf49      	itett	mi
 8016678:	085b      	lsrmi	r3, r3, #1
 801667a:	089b      	lsrpl	r3, r3, #2
 801667c:	2001      	movmi	r0, #1
 801667e:	6013      	strmi	r3, [r2, #0]
 8016680:	bf5c      	itt	pl
 8016682:	6013      	strpl	r3, [r2, #0]
 8016684:	2002      	movpl	r0, #2
 8016686:	4770      	bx	lr
 8016688:	b299      	uxth	r1, r3
 801668a:	b909      	cbnz	r1, 8016690 <__lo0bits+0x2a>
 801668c:	0c1b      	lsrs	r3, r3, #16
 801668e:	2010      	movs	r0, #16
 8016690:	b2d9      	uxtb	r1, r3
 8016692:	b909      	cbnz	r1, 8016698 <__lo0bits+0x32>
 8016694:	3008      	adds	r0, #8
 8016696:	0a1b      	lsrs	r3, r3, #8
 8016698:	0719      	lsls	r1, r3, #28
 801669a:	bf04      	itt	eq
 801669c:	091b      	lsreq	r3, r3, #4
 801669e:	3004      	addeq	r0, #4
 80166a0:	0799      	lsls	r1, r3, #30
 80166a2:	bf04      	itt	eq
 80166a4:	089b      	lsreq	r3, r3, #2
 80166a6:	3002      	addeq	r0, #2
 80166a8:	07d9      	lsls	r1, r3, #31
 80166aa:	d403      	bmi.n	80166b4 <__lo0bits+0x4e>
 80166ac:	085b      	lsrs	r3, r3, #1
 80166ae:	f100 0001 	add.w	r0, r0, #1
 80166b2:	d003      	beq.n	80166bc <__lo0bits+0x56>
 80166b4:	6013      	str	r3, [r2, #0]
 80166b6:	4770      	bx	lr
 80166b8:	2000      	movs	r0, #0
 80166ba:	4770      	bx	lr
 80166bc:	2020      	movs	r0, #32
 80166be:	4770      	bx	lr

080166c0 <__i2b>:
 80166c0:	b510      	push	{r4, lr}
 80166c2:	460c      	mov	r4, r1
 80166c4:	2101      	movs	r1, #1
 80166c6:	f7ff febd 	bl	8016444 <_Balloc>
 80166ca:	4602      	mov	r2, r0
 80166cc:	b928      	cbnz	r0, 80166da <__i2b+0x1a>
 80166ce:	4b05      	ldr	r3, [pc, #20]	@ (80166e4 <__i2b+0x24>)
 80166d0:	4805      	ldr	r0, [pc, #20]	@ (80166e8 <__i2b+0x28>)
 80166d2:	f240 1145 	movw	r1, #325	@ 0x145
 80166d6:	f7fe fca7 	bl	8015028 <__assert_func>
 80166da:	2301      	movs	r3, #1
 80166dc:	6144      	str	r4, [r0, #20]
 80166de:	6103      	str	r3, [r0, #16]
 80166e0:	bd10      	pop	{r4, pc}
 80166e2:	bf00      	nop
 80166e4:	08019cb8 	.word	0x08019cb8
 80166e8:	08019d29 	.word	0x08019d29

080166ec <__multiply>:
 80166ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166f0:	4617      	mov	r7, r2
 80166f2:	690a      	ldr	r2, [r1, #16]
 80166f4:	693b      	ldr	r3, [r7, #16]
 80166f6:	429a      	cmp	r2, r3
 80166f8:	bfa8      	it	ge
 80166fa:	463b      	movge	r3, r7
 80166fc:	4689      	mov	r9, r1
 80166fe:	bfa4      	itt	ge
 8016700:	460f      	movge	r7, r1
 8016702:	4699      	movge	r9, r3
 8016704:	693d      	ldr	r5, [r7, #16]
 8016706:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801670a:	68bb      	ldr	r3, [r7, #8]
 801670c:	6879      	ldr	r1, [r7, #4]
 801670e:	eb05 060a 	add.w	r6, r5, sl
 8016712:	42b3      	cmp	r3, r6
 8016714:	b085      	sub	sp, #20
 8016716:	bfb8      	it	lt
 8016718:	3101      	addlt	r1, #1
 801671a:	f7ff fe93 	bl	8016444 <_Balloc>
 801671e:	b930      	cbnz	r0, 801672e <__multiply+0x42>
 8016720:	4602      	mov	r2, r0
 8016722:	4b41      	ldr	r3, [pc, #260]	@ (8016828 <__multiply+0x13c>)
 8016724:	4841      	ldr	r0, [pc, #260]	@ (801682c <__multiply+0x140>)
 8016726:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801672a:	f7fe fc7d 	bl	8015028 <__assert_func>
 801672e:	f100 0414 	add.w	r4, r0, #20
 8016732:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8016736:	4623      	mov	r3, r4
 8016738:	2200      	movs	r2, #0
 801673a:	4573      	cmp	r3, lr
 801673c:	d320      	bcc.n	8016780 <__multiply+0x94>
 801673e:	f107 0814 	add.w	r8, r7, #20
 8016742:	f109 0114 	add.w	r1, r9, #20
 8016746:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801674a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801674e:	9302      	str	r3, [sp, #8]
 8016750:	1beb      	subs	r3, r5, r7
 8016752:	3b15      	subs	r3, #21
 8016754:	f023 0303 	bic.w	r3, r3, #3
 8016758:	3304      	adds	r3, #4
 801675a:	3715      	adds	r7, #21
 801675c:	42bd      	cmp	r5, r7
 801675e:	bf38      	it	cc
 8016760:	2304      	movcc	r3, #4
 8016762:	9301      	str	r3, [sp, #4]
 8016764:	9b02      	ldr	r3, [sp, #8]
 8016766:	9103      	str	r1, [sp, #12]
 8016768:	428b      	cmp	r3, r1
 801676a:	d80c      	bhi.n	8016786 <__multiply+0x9a>
 801676c:	2e00      	cmp	r6, #0
 801676e:	dd03      	ble.n	8016778 <__multiply+0x8c>
 8016770:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016774:	2b00      	cmp	r3, #0
 8016776:	d055      	beq.n	8016824 <__multiply+0x138>
 8016778:	6106      	str	r6, [r0, #16]
 801677a:	b005      	add	sp, #20
 801677c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016780:	f843 2b04 	str.w	r2, [r3], #4
 8016784:	e7d9      	b.n	801673a <__multiply+0x4e>
 8016786:	f8b1 a000 	ldrh.w	sl, [r1]
 801678a:	f1ba 0f00 	cmp.w	sl, #0
 801678e:	d01f      	beq.n	80167d0 <__multiply+0xe4>
 8016790:	46c4      	mov	ip, r8
 8016792:	46a1      	mov	r9, r4
 8016794:	2700      	movs	r7, #0
 8016796:	f85c 2b04 	ldr.w	r2, [ip], #4
 801679a:	f8d9 3000 	ldr.w	r3, [r9]
 801679e:	fa1f fb82 	uxth.w	fp, r2
 80167a2:	b29b      	uxth	r3, r3
 80167a4:	fb0a 330b 	mla	r3, sl, fp, r3
 80167a8:	443b      	add	r3, r7
 80167aa:	f8d9 7000 	ldr.w	r7, [r9]
 80167ae:	0c12      	lsrs	r2, r2, #16
 80167b0:	0c3f      	lsrs	r7, r7, #16
 80167b2:	fb0a 7202 	mla	r2, sl, r2, r7
 80167b6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80167ba:	b29b      	uxth	r3, r3
 80167bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80167c0:	4565      	cmp	r5, ip
 80167c2:	f849 3b04 	str.w	r3, [r9], #4
 80167c6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80167ca:	d8e4      	bhi.n	8016796 <__multiply+0xaa>
 80167cc:	9b01      	ldr	r3, [sp, #4]
 80167ce:	50e7      	str	r7, [r4, r3]
 80167d0:	9b03      	ldr	r3, [sp, #12]
 80167d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80167d6:	3104      	adds	r1, #4
 80167d8:	f1b9 0f00 	cmp.w	r9, #0
 80167dc:	d020      	beq.n	8016820 <__multiply+0x134>
 80167de:	6823      	ldr	r3, [r4, #0]
 80167e0:	4647      	mov	r7, r8
 80167e2:	46a4      	mov	ip, r4
 80167e4:	f04f 0a00 	mov.w	sl, #0
 80167e8:	f8b7 b000 	ldrh.w	fp, [r7]
 80167ec:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80167f0:	fb09 220b 	mla	r2, r9, fp, r2
 80167f4:	4452      	add	r2, sl
 80167f6:	b29b      	uxth	r3, r3
 80167f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80167fc:	f84c 3b04 	str.w	r3, [ip], #4
 8016800:	f857 3b04 	ldr.w	r3, [r7], #4
 8016804:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016808:	f8bc 3000 	ldrh.w	r3, [ip]
 801680c:	fb09 330a 	mla	r3, r9, sl, r3
 8016810:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8016814:	42bd      	cmp	r5, r7
 8016816:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801681a:	d8e5      	bhi.n	80167e8 <__multiply+0xfc>
 801681c:	9a01      	ldr	r2, [sp, #4]
 801681e:	50a3      	str	r3, [r4, r2]
 8016820:	3404      	adds	r4, #4
 8016822:	e79f      	b.n	8016764 <__multiply+0x78>
 8016824:	3e01      	subs	r6, #1
 8016826:	e7a1      	b.n	801676c <__multiply+0x80>
 8016828:	08019cb8 	.word	0x08019cb8
 801682c:	08019d29 	.word	0x08019d29

08016830 <__pow5mult>:
 8016830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016834:	4615      	mov	r5, r2
 8016836:	f012 0203 	ands.w	r2, r2, #3
 801683a:	4607      	mov	r7, r0
 801683c:	460e      	mov	r6, r1
 801683e:	d007      	beq.n	8016850 <__pow5mult+0x20>
 8016840:	4c25      	ldr	r4, [pc, #148]	@ (80168d8 <__pow5mult+0xa8>)
 8016842:	3a01      	subs	r2, #1
 8016844:	2300      	movs	r3, #0
 8016846:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801684a:	f7ff fe5d 	bl	8016508 <__multadd>
 801684e:	4606      	mov	r6, r0
 8016850:	10ad      	asrs	r5, r5, #2
 8016852:	d03d      	beq.n	80168d0 <__pow5mult+0xa0>
 8016854:	69fc      	ldr	r4, [r7, #28]
 8016856:	b97c      	cbnz	r4, 8016878 <__pow5mult+0x48>
 8016858:	2010      	movs	r0, #16
 801685a:	f7fc fdb1 	bl	80133c0 <malloc>
 801685e:	4602      	mov	r2, r0
 8016860:	61f8      	str	r0, [r7, #28]
 8016862:	b928      	cbnz	r0, 8016870 <__pow5mult+0x40>
 8016864:	4b1d      	ldr	r3, [pc, #116]	@ (80168dc <__pow5mult+0xac>)
 8016866:	481e      	ldr	r0, [pc, #120]	@ (80168e0 <__pow5mult+0xb0>)
 8016868:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801686c:	f7fe fbdc 	bl	8015028 <__assert_func>
 8016870:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016874:	6004      	str	r4, [r0, #0]
 8016876:	60c4      	str	r4, [r0, #12]
 8016878:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801687c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016880:	b94c      	cbnz	r4, 8016896 <__pow5mult+0x66>
 8016882:	f240 2171 	movw	r1, #625	@ 0x271
 8016886:	4638      	mov	r0, r7
 8016888:	f7ff ff1a 	bl	80166c0 <__i2b>
 801688c:	2300      	movs	r3, #0
 801688e:	f8c8 0008 	str.w	r0, [r8, #8]
 8016892:	4604      	mov	r4, r0
 8016894:	6003      	str	r3, [r0, #0]
 8016896:	f04f 0900 	mov.w	r9, #0
 801689a:	07eb      	lsls	r3, r5, #31
 801689c:	d50a      	bpl.n	80168b4 <__pow5mult+0x84>
 801689e:	4631      	mov	r1, r6
 80168a0:	4622      	mov	r2, r4
 80168a2:	4638      	mov	r0, r7
 80168a4:	f7ff ff22 	bl	80166ec <__multiply>
 80168a8:	4631      	mov	r1, r6
 80168aa:	4680      	mov	r8, r0
 80168ac:	4638      	mov	r0, r7
 80168ae:	f7ff fe09 	bl	80164c4 <_Bfree>
 80168b2:	4646      	mov	r6, r8
 80168b4:	106d      	asrs	r5, r5, #1
 80168b6:	d00b      	beq.n	80168d0 <__pow5mult+0xa0>
 80168b8:	6820      	ldr	r0, [r4, #0]
 80168ba:	b938      	cbnz	r0, 80168cc <__pow5mult+0x9c>
 80168bc:	4622      	mov	r2, r4
 80168be:	4621      	mov	r1, r4
 80168c0:	4638      	mov	r0, r7
 80168c2:	f7ff ff13 	bl	80166ec <__multiply>
 80168c6:	6020      	str	r0, [r4, #0]
 80168c8:	f8c0 9000 	str.w	r9, [r0]
 80168cc:	4604      	mov	r4, r0
 80168ce:	e7e4      	b.n	801689a <__pow5mult+0x6a>
 80168d0:	4630      	mov	r0, r6
 80168d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168d6:	bf00      	nop
 80168d8:	08019eec 	.word	0x08019eec
 80168dc:	08019b9e 	.word	0x08019b9e
 80168e0:	08019d29 	.word	0x08019d29

080168e4 <__lshift>:
 80168e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168e8:	460c      	mov	r4, r1
 80168ea:	6849      	ldr	r1, [r1, #4]
 80168ec:	6923      	ldr	r3, [r4, #16]
 80168ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80168f2:	68a3      	ldr	r3, [r4, #8]
 80168f4:	4607      	mov	r7, r0
 80168f6:	4691      	mov	r9, r2
 80168f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80168fc:	f108 0601 	add.w	r6, r8, #1
 8016900:	42b3      	cmp	r3, r6
 8016902:	db0b      	blt.n	801691c <__lshift+0x38>
 8016904:	4638      	mov	r0, r7
 8016906:	f7ff fd9d 	bl	8016444 <_Balloc>
 801690a:	4605      	mov	r5, r0
 801690c:	b948      	cbnz	r0, 8016922 <__lshift+0x3e>
 801690e:	4602      	mov	r2, r0
 8016910:	4b28      	ldr	r3, [pc, #160]	@ (80169b4 <__lshift+0xd0>)
 8016912:	4829      	ldr	r0, [pc, #164]	@ (80169b8 <__lshift+0xd4>)
 8016914:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016918:	f7fe fb86 	bl	8015028 <__assert_func>
 801691c:	3101      	adds	r1, #1
 801691e:	005b      	lsls	r3, r3, #1
 8016920:	e7ee      	b.n	8016900 <__lshift+0x1c>
 8016922:	2300      	movs	r3, #0
 8016924:	f100 0114 	add.w	r1, r0, #20
 8016928:	f100 0210 	add.w	r2, r0, #16
 801692c:	4618      	mov	r0, r3
 801692e:	4553      	cmp	r3, sl
 8016930:	db33      	blt.n	801699a <__lshift+0xb6>
 8016932:	6920      	ldr	r0, [r4, #16]
 8016934:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016938:	f104 0314 	add.w	r3, r4, #20
 801693c:	f019 091f 	ands.w	r9, r9, #31
 8016940:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016944:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016948:	d02b      	beq.n	80169a2 <__lshift+0xbe>
 801694a:	f1c9 0e20 	rsb	lr, r9, #32
 801694e:	468a      	mov	sl, r1
 8016950:	2200      	movs	r2, #0
 8016952:	6818      	ldr	r0, [r3, #0]
 8016954:	fa00 f009 	lsl.w	r0, r0, r9
 8016958:	4310      	orrs	r0, r2
 801695a:	f84a 0b04 	str.w	r0, [sl], #4
 801695e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016962:	459c      	cmp	ip, r3
 8016964:	fa22 f20e 	lsr.w	r2, r2, lr
 8016968:	d8f3      	bhi.n	8016952 <__lshift+0x6e>
 801696a:	ebac 0304 	sub.w	r3, ip, r4
 801696e:	3b15      	subs	r3, #21
 8016970:	f023 0303 	bic.w	r3, r3, #3
 8016974:	3304      	adds	r3, #4
 8016976:	f104 0015 	add.w	r0, r4, #21
 801697a:	4560      	cmp	r0, ip
 801697c:	bf88      	it	hi
 801697e:	2304      	movhi	r3, #4
 8016980:	50ca      	str	r2, [r1, r3]
 8016982:	b10a      	cbz	r2, 8016988 <__lshift+0xa4>
 8016984:	f108 0602 	add.w	r6, r8, #2
 8016988:	3e01      	subs	r6, #1
 801698a:	4638      	mov	r0, r7
 801698c:	612e      	str	r6, [r5, #16]
 801698e:	4621      	mov	r1, r4
 8016990:	f7ff fd98 	bl	80164c4 <_Bfree>
 8016994:	4628      	mov	r0, r5
 8016996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801699a:	f842 0f04 	str.w	r0, [r2, #4]!
 801699e:	3301      	adds	r3, #1
 80169a0:	e7c5      	b.n	801692e <__lshift+0x4a>
 80169a2:	3904      	subs	r1, #4
 80169a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80169a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80169ac:	459c      	cmp	ip, r3
 80169ae:	d8f9      	bhi.n	80169a4 <__lshift+0xc0>
 80169b0:	e7ea      	b.n	8016988 <__lshift+0xa4>
 80169b2:	bf00      	nop
 80169b4:	08019cb8 	.word	0x08019cb8
 80169b8:	08019d29 	.word	0x08019d29

080169bc <__mcmp>:
 80169bc:	690a      	ldr	r2, [r1, #16]
 80169be:	4603      	mov	r3, r0
 80169c0:	6900      	ldr	r0, [r0, #16]
 80169c2:	1a80      	subs	r0, r0, r2
 80169c4:	b530      	push	{r4, r5, lr}
 80169c6:	d10e      	bne.n	80169e6 <__mcmp+0x2a>
 80169c8:	3314      	adds	r3, #20
 80169ca:	3114      	adds	r1, #20
 80169cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80169d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80169d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80169d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80169dc:	4295      	cmp	r5, r2
 80169de:	d003      	beq.n	80169e8 <__mcmp+0x2c>
 80169e0:	d205      	bcs.n	80169ee <__mcmp+0x32>
 80169e2:	f04f 30ff 	mov.w	r0, #4294967295
 80169e6:	bd30      	pop	{r4, r5, pc}
 80169e8:	42a3      	cmp	r3, r4
 80169ea:	d3f3      	bcc.n	80169d4 <__mcmp+0x18>
 80169ec:	e7fb      	b.n	80169e6 <__mcmp+0x2a>
 80169ee:	2001      	movs	r0, #1
 80169f0:	e7f9      	b.n	80169e6 <__mcmp+0x2a>
	...

080169f4 <__mdiff>:
 80169f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169f8:	4689      	mov	r9, r1
 80169fa:	4606      	mov	r6, r0
 80169fc:	4611      	mov	r1, r2
 80169fe:	4648      	mov	r0, r9
 8016a00:	4614      	mov	r4, r2
 8016a02:	f7ff ffdb 	bl	80169bc <__mcmp>
 8016a06:	1e05      	subs	r5, r0, #0
 8016a08:	d112      	bne.n	8016a30 <__mdiff+0x3c>
 8016a0a:	4629      	mov	r1, r5
 8016a0c:	4630      	mov	r0, r6
 8016a0e:	f7ff fd19 	bl	8016444 <_Balloc>
 8016a12:	4602      	mov	r2, r0
 8016a14:	b928      	cbnz	r0, 8016a22 <__mdiff+0x2e>
 8016a16:	4b3f      	ldr	r3, [pc, #252]	@ (8016b14 <__mdiff+0x120>)
 8016a18:	f240 2137 	movw	r1, #567	@ 0x237
 8016a1c:	483e      	ldr	r0, [pc, #248]	@ (8016b18 <__mdiff+0x124>)
 8016a1e:	f7fe fb03 	bl	8015028 <__assert_func>
 8016a22:	2301      	movs	r3, #1
 8016a24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016a28:	4610      	mov	r0, r2
 8016a2a:	b003      	add	sp, #12
 8016a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a30:	bfbc      	itt	lt
 8016a32:	464b      	movlt	r3, r9
 8016a34:	46a1      	movlt	r9, r4
 8016a36:	4630      	mov	r0, r6
 8016a38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016a3c:	bfba      	itte	lt
 8016a3e:	461c      	movlt	r4, r3
 8016a40:	2501      	movlt	r5, #1
 8016a42:	2500      	movge	r5, #0
 8016a44:	f7ff fcfe 	bl	8016444 <_Balloc>
 8016a48:	4602      	mov	r2, r0
 8016a4a:	b918      	cbnz	r0, 8016a54 <__mdiff+0x60>
 8016a4c:	4b31      	ldr	r3, [pc, #196]	@ (8016b14 <__mdiff+0x120>)
 8016a4e:	f240 2145 	movw	r1, #581	@ 0x245
 8016a52:	e7e3      	b.n	8016a1c <__mdiff+0x28>
 8016a54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016a58:	6926      	ldr	r6, [r4, #16]
 8016a5a:	60c5      	str	r5, [r0, #12]
 8016a5c:	f109 0310 	add.w	r3, r9, #16
 8016a60:	f109 0514 	add.w	r5, r9, #20
 8016a64:	f104 0e14 	add.w	lr, r4, #20
 8016a68:	f100 0b14 	add.w	fp, r0, #20
 8016a6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016a70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016a74:	9301      	str	r3, [sp, #4]
 8016a76:	46d9      	mov	r9, fp
 8016a78:	f04f 0c00 	mov.w	ip, #0
 8016a7c:	9b01      	ldr	r3, [sp, #4]
 8016a7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016a82:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016a86:	9301      	str	r3, [sp, #4]
 8016a88:	fa1f f38a 	uxth.w	r3, sl
 8016a8c:	4619      	mov	r1, r3
 8016a8e:	b283      	uxth	r3, r0
 8016a90:	1acb      	subs	r3, r1, r3
 8016a92:	0c00      	lsrs	r0, r0, #16
 8016a94:	4463      	add	r3, ip
 8016a96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016a9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016a9e:	b29b      	uxth	r3, r3
 8016aa0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016aa4:	4576      	cmp	r6, lr
 8016aa6:	f849 3b04 	str.w	r3, [r9], #4
 8016aaa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016aae:	d8e5      	bhi.n	8016a7c <__mdiff+0x88>
 8016ab0:	1b33      	subs	r3, r6, r4
 8016ab2:	3b15      	subs	r3, #21
 8016ab4:	f023 0303 	bic.w	r3, r3, #3
 8016ab8:	3415      	adds	r4, #21
 8016aba:	3304      	adds	r3, #4
 8016abc:	42a6      	cmp	r6, r4
 8016abe:	bf38      	it	cc
 8016ac0:	2304      	movcc	r3, #4
 8016ac2:	441d      	add	r5, r3
 8016ac4:	445b      	add	r3, fp
 8016ac6:	461e      	mov	r6, r3
 8016ac8:	462c      	mov	r4, r5
 8016aca:	4544      	cmp	r4, r8
 8016acc:	d30e      	bcc.n	8016aec <__mdiff+0xf8>
 8016ace:	f108 0103 	add.w	r1, r8, #3
 8016ad2:	1b49      	subs	r1, r1, r5
 8016ad4:	f021 0103 	bic.w	r1, r1, #3
 8016ad8:	3d03      	subs	r5, #3
 8016ada:	45a8      	cmp	r8, r5
 8016adc:	bf38      	it	cc
 8016ade:	2100      	movcc	r1, #0
 8016ae0:	440b      	add	r3, r1
 8016ae2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016ae6:	b191      	cbz	r1, 8016b0e <__mdiff+0x11a>
 8016ae8:	6117      	str	r7, [r2, #16]
 8016aea:	e79d      	b.n	8016a28 <__mdiff+0x34>
 8016aec:	f854 1b04 	ldr.w	r1, [r4], #4
 8016af0:	46e6      	mov	lr, ip
 8016af2:	0c08      	lsrs	r0, r1, #16
 8016af4:	fa1c fc81 	uxtah	ip, ip, r1
 8016af8:	4471      	add	r1, lr
 8016afa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016afe:	b289      	uxth	r1, r1
 8016b00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016b04:	f846 1b04 	str.w	r1, [r6], #4
 8016b08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016b0c:	e7dd      	b.n	8016aca <__mdiff+0xd6>
 8016b0e:	3f01      	subs	r7, #1
 8016b10:	e7e7      	b.n	8016ae2 <__mdiff+0xee>
 8016b12:	bf00      	nop
 8016b14:	08019cb8 	.word	0x08019cb8
 8016b18:	08019d29 	.word	0x08019d29

08016b1c <__ulp>:
 8016b1c:	b082      	sub	sp, #8
 8016b1e:	ed8d 0b00 	vstr	d0, [sp]
 8016b22:	9a01      	ldr	r2, [sp, #4]
 8016b24:	4b0f      	ldr	r3, [pc, #60]	@ (8016b64 <__ulp+0x48>)
 8016b26:	4013      	ands	r3, r2
 8016b28:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	dc08      	bgt.n	8016b42 <__ulp+0x26>
 8016b30:	425b      	negs	r3, r3
 8016b32:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8016b36:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016b3a:	da04      	bge.n	8016b46 <__ulp+0x2a>
 8016b3c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016b40:	4113      	asrs	r3, r2
 8016b42:	2200      	movs	r2, #0
 8016b44:	e008      	b.n	8016b58 <__ulp+0x3c>
 8016b46:	f1a2 0314 	sub.w	r3, r2, #20
 8016b4a:	2b1e      	cmp	r3, #30
 8016b4c:	bfda      	itte	le
 8016b4e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8016b52:	40da      	lsrle	r2, r3
 8016b54:	2201      	movgt	r2, #1
 8016b56:	2300      	movs	r3, #0
 8016b58:	4619      	mov	r1, r3
 8016b5a:	4610      	mov	r0, r2
 8016b5c:	ec41 0b10 	vmov	d0, r0, r1
 8016b60:	b002      	add	sp, #8
 8016b62:	4770      	bx	lr
 8016b64:	7ff00000 	.word	0x7ff00000

08016b68 <__b2d>:
 8016b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b6c:	6906      	ldr	r6, [r0, #16]
 8016b6e:	f100 0814 	add.w	r8, r0, #20
 8016b72:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016b76:	1f37      	subs	r7, r6, #4
 8016b78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016b7c:	4610      	mov	r0, r2
 8016b7e:	f7ff fd53 	bl	8016628 <__hi0bits>
 8016b82:	f1c0 0320 	rsb	r3, r0, #32
 8016b86:	280a      	cmp	r0, #10
 8016b88:	600b      	str	r3, [r1, #0]
 8016b8a:	491b      	ldr	r1, [pc, #108]	@ (8016bf8 <__b2d+0x90>)
 8016b8c:	dc15      	bgt.n	8016bba <__b2d+0x52>
 8016b8e:	f1c0 0c0b 	rsb	ip, r0, #11
 8016b92:	fa22 f30c 	lsr.w	r3, r2, ip
 8016b96:	45b8      	cmp	r8, r7
 8016b98:	ea43 0501 	orr.w	r5, r3, r1
 8016b9c:	bf34      	ite	cc
 8016b9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016ba2:	2300      	movcs	r3, #0
 8016ba4:	3015      	adds	r0, #21
 8016ba6:	fa02 f000 	lsl.w	r0, r2, r0
 8016baa:	fa23 f30c 	lsr.w	r3, r3, ip
 8016bae:	4303      	orrs	r3, r0
 8016bb0:	461c      	mov	r4, r3
 8016bb2:	ec45 4b10 	vmov	d0, r4, r5
 8016bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bba:	45b8      	cmp	r8, r7
 8016bbc:	bf3a      	itte	cc
 8016bbe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016bc2:	f1a6 0708 	subcc.w	r7, r6, #8
 8016bc6:	2300      	movcs	r3, #0
 8016bc8:	380b      	subs	r0, #11
 8016bca:	d012      	beq.n	8016bf2 <__b2d+0x8a>
 8016bcc:	f1c0 0120 	rsb	r1, r0, #32
 8016bd0:	fa23 f401 	lsr.w	r4, r3, r1
 8016bd4:	4082      	lsls	r2, r0
 8016bd6:	4322      	orrs	r2, r4
 8016bd8:	4547      	cmp	r7, r8
 8016bda:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8016bde:	bf8c      	ite	hi
 8016be0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016be4:	2200      	movls	r2, #0
 8016be6:	4083      	lsls	r3, r0
 8016be8:	40ca      	lsrs	r2, r1
 8016bea:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016bee:	4313      	orrs	r3, r2
 8016bf0:	e7de      	b.n	8016bb0 <__b2d+0x48>
 8016bf2:	ea42 0501 	orr.w	r5, r2, r1
 8016bf6:	e7db      	b.n	8016bb0 <__b2d+0x48>
 8016bf8:	3ff00000 	.word	0x3ff00000

08016bfc <__d2b>:
 8016bfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016c00:	460f      	mov	r7, r1
 8016c02:	2101      	movs	r1, #1
 8016c04:	ec59 8b10 	vmov	r8, r9, d0
 8016c08:	4616      	mov	r6, r2
 8016c0a:	f7ff fc1b 	bl	8016444 <_Balloc>
 8016c0e:	4604      	mov	r4, r0
 8016c10:	b930      	cbnz	r0, 8016c20 <__d2b+0x24>
 8016c12:	4602      	mov	r2, r0
 8016c14:	4b23      	ldr	r3, [pc, #140]	@ (8016ca4 <__d2b+0xa8>)
 8016c16:	4824      	ldr	r0, [pc, #144]	@ (8016ca8 <__d2b+0xac>)
 8016c18:	f240 310f 	movw	r1, #783	@ 0x30f
 8016c1c:	f7fe fa04 	bl	8015028 <__assert_func>
 8016c20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016c24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016c28:	b10d      	cbz	r5, 8016c2e <__d2b+0x32>
 8016c2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016c2e:	9301      	str	r3, [sp, #4]
 8016c30:	f1b8 0300 	subs.w	r3, r8, #0
 8016c34:	d023      	beq.n	8016c7e <__d2b+0x82>
 8016c36:	4668      	mov	r0, sp
 8016c38:	9300      	str	r3, [sp, #0]
 8016c3a:	f7ff fd14 	bl	8016666 <__lo0bits>
 8016c3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016c42:	b1d0      	cbz	r0, 8016c7a <__d2b+0x7e>
 8016c44:	f1c0 0320 	rsb	r3, r0, #32
 8016c48:	fa02 f303 	lsl.w	r3, r2, r3
 8016c4c:	430b      	orrs	r3, r1
 8016c4e:	40c2      	lsrs	r2, r0
 8016c50:	6163      	str	r3, [r4, #20]
 8016c52:	9201      	str	r2, [sp, #4]
 8016c54:	9b01      	ldr	r3, [sp, #4]
 8016c56:	61a3      	str	r3, [r4, #24]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	bf0c      	ite	eq
 8016c5c:	2201      	moveq	r2, #1
 8016c5e:	2202      	movne	r2, #2
 8016c60:	6122      	str	r2, [r4, #16]
 8016c62:	b1a5      	cbz	r5, 8016c8e <__d2b+0x92>
 8016c64:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016c68:	4405      	add	r5, r0
 8016c6a:	603d      	str	r5, [r7, #0]
 8016c6c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016c70:	6030      	str	r0, [r6, #0]
 8016c72:	4620      	mov	r0, r4
 8016c74:	b003      	add	sp, #12
 8016c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c7a:	6161      	str	r1, [r4, #20]
 8016c7c:	e7ea      	b.n	8016c54 <__d2b+0x58>
 8016c7e:	a801      	add	r0, sp, #4
 8016c80:	f7ff fcf1 	bl	8016666 <__lo0bits>
 8016c84:	9b01      	ldr	r3, [sp, #4]
 8016c86:	6163      	str	r3, [r4, #20]
 8016c88:	3020      	adds	r0, #32
 8016c8a:	2201      	movs	r2, #1
 8016c8c:	e7e8      	b.n	8016c60 <__d2b+0x64>
 8016c8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016c92:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016c96:	6038      	str	r0, [r7, #0]
 8016c98:	6918      	ldr	r0, [r3, #16]
 8016c9a:	f7ff fcc5 	bl	8016628 <__hi0bits>
 8016c9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016ca2:	e7e5      	b.n	8016c70 <__d2b+0x74>
 8016ca4:	08019cb8 	.word	0x08019cb8
 8016ca8:	08019d29 	.word	0x08019d29

08016cac <__ratio>:
 8016cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cb0:	b085      	sub	sp, #20
 8016cb2:	e9cd 1000 	strd	r1, r0, [sp]
 8016cb6:	a902      	add	r1, sp, #8
 8016cb8:	f7ff ff56 	bl	8016b68 <__b2d>
 8016cbc:	9800      	ldr	r0, [sp, #0]
 8016cbe:	a903      	add	r1, sp, #12
 8016cc0:	ec55 4b10 	vmov	r4, r5, d0
 8016cc4:	f7ff ff50 	bl	8016b68 <__b2d>
 8016cc8:	9b01      	ldr	r3, [sp, #4]
 8016cca:	6919      	ldr	r1, [r3, #16]
 8016ccc:	9b00      	ldr	r3, [sp, #0]
 8016cce:	691b      	ldr	r3, [r3, #16]
 8016cd0:	1ac9      	subs	r1, r1, r3
 8016cd2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8016cd6:	1a9b      	subs	r3, r3, r2
 8016cd8:	ec5b ab10 	vmov	sl, fp, d0
 8016cdc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	bfce      	itee	gt
 8016ce4:	462a      	movgt	r2, r5
 8016ce6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016cea:	465a      	movle	r2, fp
 8016cec:	462f      	mov	r7, r5
 8016cee:	46d9      	mov	r9, fp
 8016cf0:	bfcc      	ite	gt
 8016cf2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016cf6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8016cfa:	464b      	mov	r3, r9
 8016cfc:	4652      	mov	r2, sl
 8016cfe:	4620      	mov	r0, r4
 8016d00:	4639      	mov	r1, r7
 8016d02:	f7e9 fdb3 	bl	800086c <__aeabi_ddiv>
 8016d06:	ec41 0b10 	vmov	d0, r0, r1
 8016d0a:	b005      	add	sp, #20
 8016d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016d10 <__copybits>:
 8016d10:	3901      	subs	r1, #1
 8016d12:	b570      	push	{r4, r5, r6, lr}
 8016d14:	1149      	asrs	r1, r1, #5
 8016d16:	6914      	ldr	r4, [r2, #16]
 8016d18:	3101      	adds	r1, #1
 8016d1a:	f102 0314 	add.w	r3, r2, #20
 8016d1e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016d22:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016d26:	1f05      	subs	r5, r0, #4
 8016d28:	42a3      	cmp	r3, r4
 8016d2a:	d30c      	bcc.n	8016d46 <__copybits+0x36>
 8016d2c:	1aa3      	subs	r3, r4, r2
 8016d2e:	3b11      	subs	r3, #17
 8016d30:	f023 0303 	bic.w	r3, r3, #3
 8016d34:	3211      	adds	r2, #17
 8016d36:	42a2      	cmp	r2, r4
 8016d38:	bf88      	it	hi
 8016d3a:	2300      	movhi	r3, #0
 8016d3c:	4418      	add	r0, r3
 8016d3e:	2300      	movs	r3, #0
 8016d40:	4288      	cmp	r0, r1
 8016d42:	d305      	bcc.n	8016d50 <__copybits+0x40>
 8016d44:	bd70      	pop	{r4, r5, r6, pc}
 8016d46:	f853 6b04 	ldr.w	r6, [r3], #4
 8016d4a:	f845 6f04 	str.w	r6, [r5, #4]!
 8016d4e:	e7eb      	b.n	8016d28 <__copybits+0x18>
 8016d50:	f840 3b04 	str.w	r3, [r0], #4
 8016d54:	e7f4      	b.n	8016d40 <__copybits+0x30>

08016d56 <__any_on>:
 8016d56:	f100 0214 	add.w	r2, r0, #20
 8016d5a:	6900      	ldr	r0, [r0, #16]
 8016d5c:	114b      	asrs	r3, r1, #5
 8016d5e:	4298      	cmp	r0, r3
 8016d60:	b510      	push	{r4, lr}
 8016d62:	db11      	blt.n	8016d88 <__any_on+0x32>
 8016d64:	dd0a      	ble.n	8016d7c <__any_on+0x26>
 8016d66:	f011 011f 	ands.w	r1, r1, #31
 8016d6a:	d007      	beq.n	8016d7c <__any_on+0x26>
 8016d6c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016d70:	fa24 f001 	lsr.w	r0, r4, r1
 8016d74:	fa00 f101 	lsl.w	r1, r0, r1
 8016d78:	428c      	cmp	r4, r1
 8016d7a:	d10b      	bne.n	8016d94 <__any_on+0x3e>
 8016d7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016d80:	4293      	cmp	r3, r2
 8016d82:	d803      	bhi.n	8016d8c <__any_on+0x36>
 8016d84:	2000      	movs	r0, #0
 8016d86:	bd10      	pop	{r4, pc}
 8016d88:	4603      	mov	r3, r0
 8016d8a:	e7f7      	b.n	8016d7c <__any_on+0x26>
 8016d8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016d90:	2900      	cmp	r1, #0
 8016d92:	d0f5      	beq.n	8016d80 <__any_on+0x2a>
 8016d94:	2001      	movs	r0, #1
 8016d96:	e7f6      	b.n	8016d86 <__any_on+0x30>

08016d98 <__ascii_wctomb>:
 8016d98:	4603      	mov	r3, r0
 8016d9a:	4608      	mov	r0, r1
 8016d9c:	b141      	cbz	r1, 8016db0 <__ascii_wctomb+0x18>
 8016d9e:	2aff      	cmp	r2, #255	@ 0xff
 8016da0:	d904      	bls.n	8016dac <__ascii_wctomb+0x14>
 8016da2:	228a      	movs	r2, #138	@ 0x8a
 8016da4:	601a      	str	r2, [r3, #0]
 8016da6:	f04f 30ff 	mov.w	r0, #4294967295
 8016daa:	4770      	bx	lr
 8016dac:	700a      	strb	r2, [r1, #0]
 8016dae:	2001      	movs	r0, #1
 8016db0:	4770      	bx	lr
	...

08016db4 <__sflush_r>:
 8016db4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dbc:	0716      	lsls	r6, r2, #28
 8016dbe:	4605      	mov	r5, r0
 8016dc0:	460c      	mov	r4, r1
 8016dc2:	d454      	bmi.n	8016e6e <__sflush_r+0xba>
 8016dc4:	684b      	ldr	r3, [r1, #4]
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	dc02      	bgt.n	8016dd0 <__sflush_r+0x1c>
 8016dca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	dd48      	ble.n	8016e62 <__sflush_r+0xae>
 8016dd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016dd2:	2e00      	cmp	r6, #0
 8016dd4:	d045      	beq.n	8016e62 <__sflush_r+0xae>
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016ddc:	682f      	ldr	r7, [r5, #0]
 8016dde:	6a21      	ldr	r1, [r4, #32]
 8016de0:	602b      	str	r3, [r5, #0]
 8016de2:	d030      	beq.n	8016e46 <__sflush_r+0x92>
 8016de4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016de6:	89a3      	ldrh	r3, [r4, #12]
 8016de8:	0759      	lsls	r1, r3, #29
 8016dea:	d505      	bpl.n	8016df8 <__sflush_r+0x44>
 8016dec:	6863      	ldr	r3, [r4, #4]
 8016dee:	1ad2      	subs	r2, r2, r3
 8016df0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016df2:	b10b      	cbz	r3, 8016df8 <__sflush_r+0x44>
 8016df4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016df6:	1ad2      	subs	r2, r2, r3
 8016df8:	2300      	movs	r3, #0
 8016dfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016dfc:	6a21      	ldr	r1, [r4, #32]
 8016dfe:	4628      	mov	r0, r5
 8016e00:	47b0      	blx	r6
 8016e02:	1c43      	adds	r3, r0, #1
 8016e04:	89a3      	ldrh	r3, [r4, #12]
 8016e06:	d106      	bne.n	8016e16 <__sflush_r+0x62>
 8016e08:	6829      	ldr	r1, [r5, #0]
 8016e0a:	291d      	cmp	r1, #29
 8016e0c:	d82b      	bhi.n	8016e66 <__sflush_r+0xb2>
 8016e0e:	4a2a      	ldr	r2, [pc, #168]	@ (8016eb8 <__sflush_r+0x104>)
 8016e10:	40ca      	lsrs	r2, r1
 8016e12:	07d6      	lsls	r6, r2, #31
 8016e14:	d527      	bpl.n	8016e66 <__sflush_r+0xb2>
 8016e16:	2200      	movs	r2, #0
 8016e18:	6062      	str	r2, [r4, #4]
 8016e1a:	04d9      	lsls	r1, r3, #19
 8016e1c:	6922      	ldr	r2, [r4, #16]
 8016e1e:	6022      	str	r2, [r4, #0]
 8016e20:	d504      	bpl.n	8016e2c <__sflush_r+0x78>
 8016e22:	1c42      	adds	r2, r0, #1
 8016e24:	d101      	bne.n	8016e2a <__sflush_r+0x76>
 8016e26:	682b      	ldr	r3, [r5, #0]
 8016e28:	b903      	cbnz	r3, 8016e2c <__sflush_r+0x78>
 8016e2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8016e2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016e2e:	602f      	str	r7, [r5, #0]
 8016e30:	b1b9      	cbz	r1, 8016e62 <__sflush_r+0xae>
 8016e32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016e36:	4299      	cmp	r1, r3
 8016e38:	d002      	beq.n	8016e40 <__sflush_r+0x8c>
 8016e3a:	4628      	mov	r0, r5
 8016e3c:	f7fe ff6c 	bl	8015d18 <_free_r>
 8016e40:	2300      	movs	r3, #0
 8016e42:	6363      	str	r3, [r4, #52]	@ 0x34
 8016e44:	e00d      	b.n	8016e62 <__sflush_r+0xae>
 8016e46:	2301      	movs	r3, #1
 8016e48:	4628      	mov	r0, r5
 8016e4a:	47b0      	blx	r6
 8016e4c:	4602      	mov	r2, r0
 8016e4e:	1c50      	adds	r0, r2, #1
 8016e50:	d1c9      	bne.n	8016de6 <__sflush_r+0x32>
 8016e52:	682b      	ldr	r3, [r5, #0]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d0c6      	beq.n	8016de6 <__sflush_r+0x32>
 8016e58:	2b1d      	cmp	r3, #29
 8016e5a:	d001      	beq.n	8016e60 <__sflush_r+0xac>
 8016e5c:	2b16      	cmp	r3, #22
 8016e5e:	d11e      	bne.n	8016e9e <__sflush_r+0xea>
 8016e60:	602f      	str	r7, [r5, #0]
 8016e62:	2000      	movs	r0, #0
 8016e64:	e022      	b.n	8016eac <__sflush_r+0xf8>
 8016e66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016e6a:	b21b      	sxth	r3, r3
 8016e6c:	e01b      	b.n	8016ea6 <__sflush_r+0xf2>
 8016e6e:	690f      	ldr	r7, [r1, #16]
 8016e70:	2f00      	cmp	r7, #0
 8016e72:	d0f6      	beq.n	8016e62 <__sflush_r+0xae>
 8016e74:	0793      	lsls	r3, r2, #30
 8016e76:	680e      	ldr	r6, [r1, #0]
 8016e78:	bf08      	it	eq
 8016e7a:	694b      	ldreq	r3, [r1, #20]
 8016e7c:	600f      	str	r7, [r1, #0]
 8016e7e:	bf18      	it	ne
 8016e80:	2300      	movne	r3, #0
 8016e82:	eba6 0807 	sub.w	r8, r6, r7
 8016e86:	608b      	str	r3, [r1, #8]
 8016e88:	f1b8 0f00 	cmp.w	r8, #0
 8016e8c:	dde9      	ble.n	8016e62 <__sflush_r+0xae>
 8016e8e:	6a21      	ldr	r1, [r4, #32]
 8016e90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016e92:	4643      	mov	r3, r8
 8016e94:	463a      	mov	r2, r7
 8016e96:	4628      	mov	r0, r5
 8016e98:	47b0      	blx	r6
 8016e9a:	2800      	cmp	r0, #0
 8016e9c:	dc08      	bgt.n	8016eb0 <__sflush_r+0xfc>
 8016e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016ea6:	81a3      	strh	r3, [r4, #12]
 8016ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8016eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016eb0:	4407      	add	r7, r0
 8016eb2:	eba8 0800 	sub.w	r8, r8, r0
 8016eb6:	e7e7      	b.n	8016e88 <__sflush_r+0xd4>
 8016eb8:	20400001 	.word	0x20400001

08016ebc <_fflush_r>:
 8016ebc:	b538      	push	{r3, r4, r5, lr}
 8016ebe:	690b      	ldr	r3, [r1, #16]
 8016ec0:	4605      	mov	r5, r0
 8016ec2:	460c      	mov	r4, r1
 8016ec4:	b913      	cbnz	r3, 8016ecc <_fflush_r+0x10>
 8016ec6:	2500      	movs	r5, #0
 8016ec8:	4628      	mov	r0, r5
 8016eca:	bd38      	pop	{r3, r4, r5, pc}
 8016ecc:	b118      	cbz	r0, 8016ed6 <_fflush_r+0x1a>
 8016ece:	6a03      	ldr	r3, [r0, #32]
 8016ed0:	b90b      	cbnz	r3, 8016ed6 <_fflush_r+0x1a>
 8016ed2:	f7fd fea7 	bl	8014c24 <__sinit>
 8016ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d0f3      	beq.n	8016ec6 <_fflush_r+0xa>
 8016ede:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016ee0:	07d0      	lsls	r0, r2, #31
 8016ee2:	d404      	bmi.n	8016eee <_fflush_r+0x32>
 8016ee4:	0599      	lsls	r1, r3, #22
 8016ee6:	d402      	bmi.n	8016eee <_fflush_r+0x32>
 8016ee8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016eea:	f7fe f87a 	bl	8014fe2 <__retarget_lock_acquire_recursive>
 8016eee:	4628      	mov	r0, r5
 8016ef0:	4621      	mov	r1, r4
 8016ef2:	f7ff ff5f 	bl	8016db4 <__sflush_r>
 8016ef6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016ef8:	07da      	lsls	r2, r3, #31
 8016efa:	4605      	mov	r5, r0
 8016efc:	d4e4      	bmi.n	8016ec8 <_fflush_r+0xc>
 8016efe:	89a3      	ldrh	r3, [r4, #12]
 8016f00:	059b      	lsls	r3, r3, #22
 8016f02:	d4e1      	bmi.n	8016ec8 <_fflush_r+0xc>
 8016f04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016f06:	f7fe f86d 	bl	8014fe4 <__retarget_lock_release_recursive>
 8016f0a:	e7dd      	b.n	8016ec8 <_fflush_r+0xc>

08016f0c <fiprintf>:
 8016f0c:	b40e      	push	{r1, r2, r3}
 8016f0e:	b503      	push	{r0, r1, lr}
 8016f10:	4601      	mov	r1, r0
 8016f12:	ab03      	add	r3, sp, #12
 8016f14:	4805      	ldr	r0, [pc, #20]	@ (8016f2c <fiprintf+0x20>)
 8016f16:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f1a:	6800      	ldr	r0, [r0, #0]
 8016f1c:	9301      	str	r3, [sp, #4]
 8016f1e:	f000 f84b 	bl	8016fb8 <_vfiprintf_r>
 8016f22:	b002      	add	sp, #8
 8016f24:	f85d eb04 	ldr.w	lr, [sp], #4
 8016f28:	b003      	add	sp, #12
 8016f2a:	4770      	bx	lr
 8016f2c:	200003ac 	.word	0x200003ac

08016f30 <abort>:
 8016f30:	b508      	push	{r3, lr}
 8016f32:	2006      	movs	r0, #6
 8016f34:	f000 fa14 	bl	8017360 <raise>
 8016f38:	2001      	movs	r0, #1
 8016f3a:	f7ed fc2d 	bl	8004798 <_exit>

08016f3e <_calloc_r>:
 8016f3e:	b570      	push	{r4, r5, r6, lr}
 8016f40:	fba1 5402 	umull	r5, r4, r1, r2
 8016f44:	b934      	cbnz	r4, 8016f54 <_calloc_r+0x16>
 8016f46:	4629      	mov	r1, r5
 8016f48:	f7fc fa6c 	bl	8013424 <_malloc_r>
 8016f4c:	4606      	mov	r6, r0
 8016f4e:	b928      	cbnz	r0, 8016f5c <_calloc_r+0x1e>
 8016f50:	4630      	mov	r0, r6
 8016f52:	bd70      	pop	{r4, r5, r6, pc}
 8016f54:	220c      	movs	r2, #12
 8016f56:	6002      	str	r2, [r0, #0]
 8016f58:	2600      	movs	r6, #0
 8016f5a:	e7f9      	b.n	8016f50 <_calloc_r+0x12>
 8016f5c:	462a      	mov	r2, r5
 8016f5e:	4621      	mov	r1, r4
 8016f60:	f7fd fed9 	bl	8014d16 <memset>
 8016f64:	e7f4      	b.n	8016f50 <_calloc_r+0x12>

08016f66 <__sfputc_r>:
 8016f66:	6893      	ldr	r3, [r2, #8]
 8016f68:	3b01      	subs	r3, #1
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	b410      	push	{r4}
 8016f6e:	6093      	str	r3, [r2, #8]
 8016f70:	da08      	bge.n	8016f84 <__sfputc_r+0x1e>
 8016f72:	6994      	ldr	r4, [r2, #24]
 8016f74:	42a3      	cmp	r3, r4
 8016f76:	db01      	blt.n	8016f7c <__sfputc_r+0x16>
 8016f78:	290a      	cmp	r1, #10
 8016f7a:	d103      	bne.n	8016f84 <__sfputc_r+0x1e>
 8016f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f80:	f000 b932 	b.w	80171e8 <__swbuf_r>
 8016f84:	6813      	ldr	r3, [r2, #0]
 8016f86:	1c58      	adds	r0, r3, #1
 8016f88:	6010      	str	r0, [r2, #0]
 8016f8a:	7019      	strb	r1, [r3, #0]
 8016f8c:	4608      	mov	r0, r1
 8016f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f92:	4770      	bx	lr

08016f94 <__sfputs_r>:
 8016f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f96:	4606      	mov	r6, r0
 8016f98:	460f      	mov	r7, r1
 8016f9a:	4614      	mov	r4, r2
 8016f9c:	18d5      	adds	r5, r2, r3
 8016f9e:	42ac      	cmp	r4, r5
 8016fa0:	d101      	bne.n	8016fa6 <__sfputs_r+0x12>
 8016fa2:	2000      	movs	r0, #0
 8016fa4:	e007      	b.n	8016fb6 <__sfputs_r+0x22>
 8016fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016faa:	463a      	mov	r2, r7
 8016fac:	4630      	mov	r0, r6
 8016fae:	f7ff ffda 	bl	8016f66 <__sfputc_r>
 8016fb2:	1c43      	adds	r3, r0, #1
 8016fb4:	d1f3      	bne.n	8016f9e <__sfputs_r+0xa>
 8016fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016fb8 <_vfiprintf_r>:
 8016fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fbc:	460d      	mov	r5, r1
 8016fbe:	b09d      	sub	sp, #116	@ 0x74
 8016fc0:	4614      	mov	r4, r2
 8016fc2:	4698      	mov	r8, r3
 8016fc4:	4606      	mov	r6, r0
 8016fc6:	b118      	cbz	r0, 8016fd0 <_vfiprintf_r+0x18>
 8016fc8:	6a03      	ldr	r3, [r0, #32]
 8016fca:	b90b      	cbnz	r3, 8016fd0 <_vfiprintf_r+0x18>
 8016fcc:	f7fd fe2a 	bl	8014c24 <__sinit>
 8016fd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016fd2:	07d9      	lsls	r1, r3, #31
 8016fd4:	d405      	bmi.n	8016fe2 <_vfiprintf_r+0x2a>
 8016fd6:	89ab      	ldrh	r3, [r5, #12]
 8016fd8:	059a      	lsls	r2, r3, #22
 8016fda:	d402      	bmi.n	8016fe2 <_vfiprintf_r+0x2a>
 8016fdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016fde:	f7fe f800 	bl	8014fe2 <__retarget_lock_acquire_recursive>
 8016fe2:	89ab      	ldrh	r3, [r5, #12]
 8016fe4:	071b      	lsls	r3, r3, #28
 8016fe6:	d501      	bpl.n	8016fec <_vfiprintf_r+0x34>
 8016fe8:	692b      	ldr	r3, [r5, #16]
 8016fea:	b99b      	cbnz	r3, 8017014 <_vfiprintf_r+0x5c>
 8016fec:	4629      	mov	r1, r5
 8016fee:	4630      	mov	r0, r6
 8016ff0:	f000 f938 	bl	8017264 <__swsetup_r>
 8016ff4:	b170      	cbz	r0, 8017014 <_vfiprintf_r+0x5c>
 8016ff6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016ff8:	07dc      	lsls	r4, r3, #31
 8016ffa:	d504      	bpl.n	8017006 <_vfiprintf_r+0x4e>
 8016ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8017000:	b01d      	add	sp, #116	@ 0x74
 8017002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017006:	89ab      	ldrh	r3, [r5, #12]
 8017008:	0598      	lsls	r0, r3, #22
 801700a:	d4f7      	bmi.n	8016ffc <_vfiprintf_r+0x44>
 801700c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801700e:	f7fd ffe9 	bl	8014fe4 <__retarget_lock_release_recursive>
 8017012:	e7f3      	b.n	8016ffc <_vfiprintf_r+0x44>
 8017014:	2300      	movs	r3, #0
 8017016:	9309      	str	r3, [sp, #36]	@ 0x24
 8017018:	2320      	movs	r3, #32
 801701a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801701e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017022:	2330      	movs	r3, #48	@ 0x30
 8017024:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80171d4 <_vfiprintf_r+0x21c>
 8017028:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801702c:	f04f 0901 	mov.w	r9, #1
 8017030:	4623      	mov	r3, r4
 8017032:	469a      	mov	sl, r3
 8017034:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017038:	b10a      	cbz	r2, 801703e <_vfiprintf_r+0x86>
 801703a:	2a25      	cmp	r2, #37	@ 0x25
 801703c:	d1f9      	bne.n	8017032 <_vfiprintf_r+0x7a>
 801703e:	ebba 0b04 	subs.w	fp, sl, r4
 8017042:	d00b      	beq.n	801705c <_vfiprintf_r+0xa4>
 8017044:	465b      	mov	r3, fp
 8017046:	4622      	mov	r2, r4
 8017048:	4629      	mov	r1, r5
 801704a:	4630      	mov	r0, r6
 801704c:	f7ff ffa2 	bl	8016f94 <__sfputs_r>
 8017050:	3001      	adds	r0, #1
 8017052:	f000 80a7 	beq.w	80171a4 <_vfiprintf_r+0x1ec>
 8017056:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017058:	445a      	add	r2, fp
 801705a:	9209      	str	r2, [sp, #36]	@ 0x24
 801705c:	f89a 3000 	ldrb.w	r3, [sl]
 8017060:	2b00      	cmp	r3, #0
 8017062:	f000 809f 	beq.w	80171a4 <_vfiprintf_r+0x1ec>
 8017066:	2300      	movs	r3, #0
 8017068:	f04f 32ff 	mov.w	r2, #4294967295
 801706c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017070:	f10a 0a01 	add.w	sl, sl, #1
 8017074:	9304      	str	r3, [sp, #16]
 8017076:	9307      	str	r3, [sp, #28]
 8017078:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801707c:	931a      	str	r3, [sp, #104]	@ 0x68
 801707e:	4654      	mov	r4, sl
 8017080:	2205      	movs	r2, #5
 8017082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017086:	4853      	ldr	r0, [pc, #332]	@ (80171d4 <_vfiprintf_r+0x21c>)
 8017088:	f7e9 f8b2 	bl	80001f0 <memchr>
 801708c:	9a04      	ldr	r2, [sp, #16]
 801708e:	b9d8      	cbnz	r0, 80170c8 <_vfiprintf_r+0x110>
 8017090:	06d1      	lsls	r1, r2, #27
 8017092:	bf44      	itt	mi
 8017094:	2320      	movmi	r3, #32
 8017096:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801709a:	0713      	lsls	r3, r2, #28
 801709c:	bf44      	itt	mi
 801709e:	232b      	movmi	r3, #43	@ 0x2b
 80170a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80170a4:	f89a 3000 	ldrb.w	r3, [sl]
 80170a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80170aa:	d015      	beq.n	80170d8 <_vfiprintf_r+0x120>
 80170ac:	9a07      	ldr	r2, [sp, #28]
 80170ae:	4654      	mov	r4, sl
 80170b0:	2000      	movs	r0, #0
 80170b2:	f04f 0c0a 	mov.w	ip, #10
 80170b6:	4621      	mov	r1, r4
 80170b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80170bc:	3b30      	subs	r3, #48	@ 0x30
 80170be:	2b09      	cmp	r3, #9
 80170c0:	d94b      	bls.n	801715a <_vfiprintf_r+0x1a2>
 80170c2:	b1b0      	cbz	r0, 80170f2 <_vfiprintf_r+0x13a>
 80170c4:	9207      	str	r2, [sp, #28]
 80170c6:	e014      	b.n	80170f2 <_vfiprintf_r+0x13a>
 80170c8:	eba0 0308 	sub.w	r3, r0, r8
 80170cc:	fa09 f303 	lsl.w	r3, r9, r3
 80170d0:	4313      	orrs	r3, r2
 80170d2:	9304      	str	r3, [sp, #16]
 80170d4:	46a2      	mov	sl, r4
 80170d6:	e7d2      	b.n	801707e <_vfiprintf_r+0xc6>
 80170d8:	9b03      	ldr	r3, [sp, #12]
 80170da:	1d19      	adds	r1, r3, #4
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	9103      	str	r1, [sp, #12]
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	bfbb      	ittet	lt
 80170e4:	425b      	neglt	r3, r3
 80170e6:	f042 0202 	orrlt.w	r2, r2, #2
 80170ea:	9307      	strge	r3, [sp, #28]
 80170ec:	9307      	strlt	r3, [sp, #28]
 80170ee:	bfb8      	it	lt
 80170f0:	9204      	strlt	r2, [sp, #16]
 80170f2:	7823      	ldrb	r3, [r4, #0]
 80170f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80170f6:	d10a      	bne.n	801710e <_vfiprintf_r+0x156>
 80170f8:	7863      	ldrb	r3, [r4, #1]
 80170fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80170fc:	d132      	bne.n	8017164 <_vfiprintf_r+0x1ac>
 80170fe:	9b03      	ldr	r3, [sp, #12]
 8017100:	1d1a      	adds	r2, r3, #4
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	9203      	str	r2, [sp, #12]
 8017106:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801710a:	3402      	adds	r4, #2
 801710c:	9305      	str	r3, [sp, #20]
 801710e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80171e4 <_vfiprintf_r+0x22c>
 8017112:	7821      	ldrb	r1, [r4, #0]
 8017114:	2203      	movs	r2, #3
 8017116:	4650      	mov	r0, sl
 8017118:	f7e9 f86a 	bl	80001f0 <memchr>
 801711c:	b138      	cbz	r0, 801712e <_vfiprintf_r+0x176>
 801711e:	9b04      	ldr	r3, [sp, #16]
 8017120:	eba0 000a 	sub.w	r0, r0, sl
 8017124:	2240      	movs	r2, #64	@ 0x40
 8017126:	4082      	lsls	r2, r0
 8017128:	4313      	orrs	r3, r2
 801712a:	3401      	adds	r4, #1
 801712c:	9304      	str	r3, [sp, #16]
 801712e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017132:	4829      	ldr	r0, [pc, #164]	@ (80171d8 <_vfiprintf_r+0x220>)
 8017134:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017138:	2206      	movs	r2, #6
 801713a:	f7e9 f859 	bl	80001f0 <memchr>
 801713e:	2800      	cmp	r0, #0
 8017140:	d03f      	beq.n	80171c2 <_vfiprintf_r+0x20a>
 8017142:	4b26      	ldr	r3, [pc, #152]	@ (80171dc <_vfiprintf_r+0x224>)
 8017144:	bb1b      	cbnz	r3, 801718e <_vfiprintf_r+0x1d6>
 8017146:	9b03      	ldr	r3, [sp, #12]
 8017148:	3307      	adds	r3, #7
 801714a:	f023 0307 	bic.w	r3, r3, #7
 801714e:	3308      	adds	r3, #8
 8017150:	9303      	str	r3, [sp, #12]
 8017152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017154:	443b      	add	r3, r7
 8017156:	9309      	str	r3, [sp, #36]	@ 0x24
 8017158:	e76a      	b.n	8017030 <_vfiprintf_r+0x78>
 801715a:	fb0c 3202 	mla	r2, ip, r2, r3
 801715e:	460c      	mov	r4, r1
 8017160:	2001      	movs	r0, #1
 8017162:	e7a8      	b.n	80170b6 <_vfiprintf_r+0xfe>
 8017164:	2300      	movs	r3, #0
 8017166:	3401      	adds	r4, #1
 8017168:	9305      	str	r3, [sp, #20]
 801716a:	4619      	mov	r1, r3
 801716c:	f04f 0c0a 	mov.w	ip, #10
 8017170:	4620      	mov	r0, r4
 8017172:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017176:	3a30      	subs	r2, #48	@ 0x30
 8017178:	2a09      	cmp	r2, #9
 801717a:	d903      	bls.n	8017184 <_vfiprintf_r+0x1cc>
 801717c:	2b00      	cmp	r3, #0
 801717e:	d0c6      	beq.n	801710e <_vfiprintf_r+0x156>
 8017180:	9105      	str	r1, [sp, #20]
 8017182:	e7c4      	b.n	801710e <_vfiprintf_r+0x156>
 8017184:	fb0c 2101 	mla	r1, ip, r1, r2
 8017188:	4604      	mov	r4, r0
 801718a:	2301      	movs	r3, #1
 801718c:	e7f0      	b.n	8017170 <_vfiprintf_r+0x1b8>
 801718e:	ab03      	add	r3, sp, #12
 8017190:	9300      	str	r3, [sp, #0]
 8017192:	462a      	mov	r2, r5
 8017194:	4b12      	ldr	r3, [pc, #72]	@ (80171e0 <_vfiprintf_r+0x228>)
 8017196:	a904      	add	r1, sp, #16
 8017198:	4630      	mov	r0, r6
 801719a:	f7fd f901 	bl	80143a0 <_printf_float>
 801719e:	4607      	mov	r7, r0
 80171a0:	1c78      	adds	r0, r7, #1
 80171a2:	d1d6      	bne.n	8017152 <_vfiprintf_r+0x19a>
 80171a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80171a6:	07d9      	lsls	r1, r3, #31
 80171a8:	d405      	bmi.n	80171b6 <_vfiprintf_r+0x1fe>
 80171aa:	89ab      	ldrh	r3, [r5, #12]
 80171ac:	059a      	lsls	r2, r3, #22
 80171ae:	d402      	bmi.n	80171b6 <_vfiprintf_r+0x1fe>
 80171b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80171b2:	f7fd ff17 	bl	8014fe4 <__retarget_lock_release_recursive>
 80171b6:	89ab      	ldrh	r3, [r5, #12]
 80171b8:	065b      	lsls	r3, r3, #25
 80171ba:	f53f af1f 	bmi.w	8016ffc <_vfiprintf_r+0x44>
 80171be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80171c0:	e71e      	b.n	8017000 <_vfiprintf_r+0x48>
 80171c2:	ab03      	add	r3, sp, #12
 80171c4:	9300      	str	r3, [sp, #0]
 80171c6:	462a      	mov	r2, r5
 80171c8:	4b05      	ldr	r3, [pc, #20]	@ (80171e0 <_vfiprintf_r+0x228>)
 80171ca:	a904      	add	r1, sp, #16
 80171cc:	4630      	mov	r0, r6
 80171ce:	f7fd fb7f 	bl	80148d0 <_printf_i>
 80171d2:	e7e4      	b.n	801719e <_vfiprintf_r+0x1e6>
 80171d4:	08019d82 	.word	0x08019d82
 80171d8:	08019d8c 	.word	0x08019d8c
 80171dc:	080143a1 	.word	0x080143a1
 80171e0:	08016f95 	.word	0x08016f95
 80171e4:	08019d88 	.word	0x08019d88

080171e8 <__swbuf_r>:
 80171e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171ea:	460e      	mov	r6, r1
 80171ec:	4614      	mov	r4, r2
 80171ee:	4605      	mov	r5, r0
 80171f0:	b118      	cbz	r0, 80171fa <__swbuf_r+0x12>
 80171f2:	6a03      	ldr	r3, [r0, #32]
 80171f4:	b90b      	cbnz	r3, 80171fa <__swbuf_r+0x12>
 80171f6:	f7fd fd15 	bl	8014c24 <__sinit>
 80171fa:	69a3      	ldr	r3, [r4, #24]
 80171fc:	60a3      	str	r3, [r4, #8]
 80171fe:	89a3      	ldrh	r3, [r4, #12]
 8017200:	071a      	lsls	r2, r3, #28
 8017202:	d501      	bpl.n	8017208 <__swbuf_r+0x20>
 8017204:	6923      	ldr	r3, [r4, #16]
 8017206:	b943      	cbnz	r3, 801721a <__swbuf_r+0x32>
 8017208:	4621      	mov	r1, r4
 801720a:	4628      	mov	r0, r5
 801720c:	f000 f82a 	bl	8017264 <__swsetup_r>
 8017210:	b118      	cbz	r0, 801721a <__swbuf_r+0x32>
 8017212:	f04f 37ff 	mov.w	r7, #4294967295
 8017216:	4638      	mov	r0, r7
 8017218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801721a:	6823      	ldr	r3, [r4, #0]
 801721c:	6922      	ldr	r2, [r4, #16]
 801721e:	1a98      	subs	r0, r3, r2
 8017220:	6963      	ldr	r3, [r4, #20]
 8017222:	b2f6      	uxtb	r6, r6
 8017224:	4283      	cmp	r3, r0
 8017226:	4637      	mov	r7, r6
 8017228:	dc05      	bgt.n	8017236 <__swbuf_r+0x4e>
 801722a:	4621      	mov	r1, r4
 801722c:	4628      	mov	r0, r5
 801722e:	f7ff fe45 	bl	8016ebc <_fflush_r>
 8017232:	2800      	cmp	r0, #0
 8017234:	d1ed      	bne.n	8017212 <__swbuf_r+0x2a>
 8017236:	68a3      	ldr	r3, [r4, #8]
 8017238:	3b01      	subs	r3, #1
 801723a:	60a3      	str	r3, [r4, #8]
 801723c:	6823      	ldr	r3, [r4, #0]
 801723e:	1c5a      	adds	r2, r3, #1
 8017240:	6022      	str	r2, [r4, #0]
 8017242:	701e      	strb	r6, [r3, #0]
 8017244:	6962      	ldr	r2, [r4, #20]
 8017246:	1c43      	adds	r3, r0, #1
 8017248:	429a      	cmp	r2, r3
 801724a:	d004      	beq.n	8017256 <__swbuf_r+0x6e>
 801724c:	89a3      	ldrh	r3, [r4, #12]
 801724e:	07db      	lsls	r3, r3, #31
 8017250:	d5e1      	bpl.n	8017216 <__swbuf_r+0x2e>
 8017252:	2e0a      	cmp	r6, #10
 8017254:	d1df      	bne.n	8017216 <__swbuf_r+0x2e>
 8017256:	4621      	mov	r1, r4
 8017258:	4628      	mov	r0, r5
 801725a:	f7ff fe2f 	bl	8016ebc <_fflush_r>
 801725e:	2800      	cmp	r0, #0
 8017260:	d0d9      	beq.n	8017216 <__swbuf_r+0x2e>
 8017262:	e7d6      	b.n	8017212 <__swbuf_r+0x2a>

08017264 <__swsetup_r>:
 8017264:	b538      	push	{r3, r4, r5, lr}
 8017266:	4b29      	ldr	r3, [pc, #164]	@ (801730c <__swsetup_r+0xa8>)
 8017268:	4605      	mov	r5, r0
 801726a:	6818      	ldr	r0, [r3, #0]
 801726c:	460c      	mov	r4, r1
 801726e:	b118      	cbz	r0, 8017278 <__swsetup_r+0x14>
 8017270:	6a03      	ldr	r3, [r0, #32]
 8017272:	b90b      	cbnz	r3, 8017278 <__swsetup_r+0x14>
 8017274:	f7fd fcd6 	bl	8014c24 <__sinit>
 8017278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801727c:	0719      	lsls	r1, r3, #28
 801727e:	d422      	bmi.n	80172c6 <__swsetup_r+0x62>
 8017280:	06da      	lsls	r2, r3, #27
 8017282:	d407      	bmi.n	8017294 <__swsetup_r+0x30>
 8017284:	2209      	movs	r2, #9
 8017286:	602a      	str	r2, [r5, #0]
 8017288:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801728c:	81a3      	strh	r3, [r4, #12]
 801728e:	f04f 30ff 	mov.w	r0, #4294967295
 8017292:	e033      	b.n	80172fc <__swsetup_r+0x98>
 8017294:	0758      	lsls	r0, r3, #29
 8017296:	d512      	bpl.n	80172be <__swsetup_r+0x5a>
 8017298:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801729a:	b141      	cbz	r1, 80172ae <__swsetup_r+0x4a>
 801729c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80172a0:	4299      	cmp	r1, r3
 80172a2:	d002      	beq.n	80172aa <__swsetup_r+0x46>
 80172a4:	4628      	mov	r0, r5
 80172a6:	f7fe fd37 	bl	8015d18 <_free_r>
 80172aa:	2300      	movs	r3, #0
 80172ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80172ae:	89a3      	ldrh	r3, [r4, #12]
 80172b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80172b4:	81a3      	strh	r3, [r4, #12]
 80172b6:	2300      	movs	r3, #0
 80172b8:	6063      	str	r3, [r4, #4]
 80172ba:	6923      	ldr	r3, [r4, #16]
 80172bc:	6023      	str	r3, [r4, #0]
 80172be:	89a3      	ldrh	r3, [r4, #12]
 80172c0:	f043 0308 	orr.w	r3, r3, #8
 80172c4:	81a3      	strh	r3, [r4, #12]
 80172c6:	6923      	ldr	r3, [r4, #16]
 80172c8:	b94b      	cbnz	r3, 80172de <__swsetup_r+0x7a>
 80172ca:	89a3      	ldrh	r3, [r4, #12]
 80172cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80172d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80172d4:	d003      	beq.n	80172de <__swsetup_r+0x7a>
 80172d6:	4621      	mov	r1, r4
 80172d8:	4628      	mov	r0, r5
 80172da:	f000 f883 	bl	80173e4 <__smakebuf_r>
 80172de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80172e2:	f013 0201 	ands.w	r2, r3, #1
 80172e6:	d00a      	beq.n	80172fe <__swsetup_r+0x9a>
 80172e8:	2200      	movs	r2, #0
 80172ea:	60a2      	str	r2, [r4, #8]
 80172ec:	6962      	ldr	r2, [r4, #20]
 80172ee:	4252      	negs	r2, r2
 80172f0:	61a2      	str	r2, [r4, #24]
 80172f2:	6922      	ldr	r2, [r4, #16]
 80172f4:	b942      	cbnz	r2, 8017308 <__swsetup_r+0xa4>
 80172f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80172fa:	d1c5      	bne.n	8017288 <__swsetup_r+0x24>
 80172fc:	bd38      	pop	{r3, r4, r5, pc}
 80172fe:	0799      	lsls	r1, r3, #30
 8017300:	bf58      	it	pl
 8017302:	6962      	ldrpl	r2, [r4, #20]
 8017304:	60a2      	str	r2, [r4, #8]
 8017306:	e7f4      	b.n	80172f2 <__swsetup_r+0x8e>
 8017308:	2000      	movs	r0, #0
 801730a:	e7f7      	b.n	80172fc <__swsetup_r+0x98>
 801730c:	200003ac 	.word	0x200003ac

08017310 <_raise_r>:
 8017310:	291f      	cmp	r1, #31
 8017312:	b538      	push	{r3, r4, r5, lr}
 8017314:	4605      	mov	r5, r0
 8017316:	460c      	mov	r4, r1
 8017318:	d904      	bls.n	8017324 <_raise_r+0x14>
 801731a:	2316      	movs	r3, #22
 801731c:	6003      	str	r3, [r0, #0]
 801731e:	f04f 30ff 	mov.w	r0, #4294967295
 8017322:	bd38      	pop	{r3, r4, r5, pc}
 8017324:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017326:	b112      	cbz	r2, 801732e <_raise_r+0x1e>
 8017328:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801732c:	b94b      	cbnz	r3, 8017342 <_raise_r+0x32>
 801732e:	4628      	mov	r0, r5
 8017330:	f000 f830 	bl	8017394 <_getpid_r>
 8017334:	4622      	mov	r2, r4
 8017336:	4601      	mov	r1, r0
 8017338:	4628      	mov	r0, r5
 801733a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801733e:	f000 b817 	b.w	8017370 <_kill_r>
 8017342:	2b01      	cmp	r3, #1
 8017344:	d00a      	beq.n	801735c <_raise_r+0x4c>
 8017346:	1c59      	adds	r1, r3, #1
 8017348:	d103      	bne.n	8017352 <_raise_r+0x42>
 801734a:	2316      	movs	r3, #22
 801734c:	6003      	str	r3, [r0, #0]
 801734e:	2001      	movs	r0, #1
 8017350:	e7e7      	b.n	8017322 <_raise_r+0x12>
 8017352:	2100      	movs	r1, #0
 8017354:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017358:	4620      	mov	r0, r4
 801735a:	4798      	blx	r3
 801735c:	2000      	movs	r0, #0
 801735e:	e7e0      	b.n	8017322 <_raise_r+0x12>

08017360 <raise>:
 8017360:	4b02      	ldr	r3, [pc, #8]	@ (801736c <raise+0xc>)
 8017362:	4601      	mov	r1, r0
 8017364:	6818      	ldr	r0, [r3, #0]
 8017366:	f7ff bfd3 	b.w	8017310 <_raise_r>
 801736a:	bf00      	nop
 801736c:	200003ac 	.word	0x200003ac

08017370 <_kill_r>:
 8017370:	b538      	push	{r3, r4, r5, lr}
 8017372:	4d07      	ldr	r5, [pc, #28]	@ (8017390 <_kill_r+0x20>)
 8017374:	2300      	movs	r3, #0
 8017376:	4604      	mov	r4, r0
 8017378:	4608      	mov	r0, r1
 801737a:	4611      	mov	r1, r2
 801737c:	602b      	str	r3, [r5, #0]
 801737e:	f7ed f9fb 	bl	8004778 <_kill>
 8017382:	1c43      	adds	r3, r0, #1
 8017384:	d102      	bne.n	801738c <_kill_r+0x1c>
 8017386:	682b      	ldr	r3, [r5, #0]
 8017388:	b103      	cbz	r3, 801738c <_kill_r+0x1c>
 801738a:	6023      	str	r3, [r4, #0]
 801738c:	bd38      	pop	{r3, r4, r5, pc}
 801738e:	bf00      	nop
 8017390:	20013c5c 	.word	0x20013c5c

08017394 <_getpid_r>:
 8017394:	f7ed b9e8 	b.w	8004768 <_getpid>

08017398 <__swhatbuf_r>:
 8017398:	b570      	push	{r4, r5, r6, lr}
 801739a:	460c      	mov	r4, r1
 801739c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173a0:	2900      	cmp	r1, #0
 80173a2:	b096      	sub	sp, #88	@ 0x58
 80173a4:	4615      	mov	r5, r2
 80173a6:	461e      	mov	r6, r3
 80173a8:	da0d      	bge.n	80173c6 <__swhatbuf_r+0x2e>
 80173aa:	89a3      	ldrh	r3, [r4, #12]
 80173ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80173b0:	f04f 0100 	mov.w	r1, #0
 80173b4:	bf14      	ite	ne
 80173b6:	2340      	movne	r3, #64	@ 0x40
 80173b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80173bc:	2000      	movs	r0, #0
 80173be:	6031      	str	r1, [r6, #0]
 80173c0:	602b      	str	r3, [r5, #0]
 80173c2:	b016      	add	sp, #88	@ 0x58
 80173c4:	bd70      	pop	{r4, r5, r6, pc}
 80173c6:	466a      	mov	r2, sp
 80173c8:	f000 f848 	bl	801745c <_fstat_r>
 80173cc:	2800      	cmp	r0, #0
 80173ce:	dbec      	blt.n	80173aa <__swhatbuf_r+0x12>
 80173d0:	9901      	ldr	r1, [sp, #4]
 80173d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80173d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80173da:	4259      	negs	r1, r3
 80173dc:	4159      	adcs	r1, r3
 80173de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80173e2:	e7eb      	b.n	80173bc <__swhatbuf_r+0x24>

080173e4 <__smakebuf_r>:
 80173e4:	898b      	ldrh	r3, [r1, #12]
 80173e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80173e8:	079d      	lsls	r5, r3, #30
 80173ea:	4606      	mov	r6, r0
 80173ec:	460c      	mov	r4, r1
 80173ee:	d507      	bpl.n	8017400 <__smakebuf_r+0x1c>
 80173f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80173f4:	6023      	str	r3, [r4, #0]
 80173f6:	6123      	str	r3, [r4, #16]
 80173f8:	2301      	movs	r3, #1
 80173fa:	6163      	str	r3, [r4, #20]
 80173fc:	b003      	add	sp, #12
 80173fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017400:	ab01      	add	r3, sp, #4
 8017402:	466a      	mov	r2, sp
 8017404:	f7ff ffc8 	bl	8017398 <__swhatbuf_r>
 8017408:	9f00      	ldr	r7, [sp, #0]
 801740a:	4605      	mov	r5, r0
 801740c:	4639      	mov	r1, r7
 801740e:	4630      	mov	r0, r6
 8017410:	f7fc f808 	bl	8013424 <_malloc_r>
 8017414:	b948      	cbnz	r0, 801742a <__smakebuf_r+0x46>
 8017416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801741a:	059a      	lsls	r2, r3, #22
 801741c:	d4ee      	bmi.n	80173fc <__smakebuf_r+0x18>
 801741e:	f023 0303 	bic.w	r3, r3, #3
 8017422:	f043 0302 	orr.w	r3, r3, #2
 8017426:	81a3      	strh	r3, [r4, #12]
 8017428:	e7e2      	b.n	80173f0 <__smakebuf_r+0xc>
 801742a:	89a3      	ldrh	r3, [r4, #12]
 801742c:	6020      	str	r0, [r4, #0]
 801742e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017432:	81a3      	strh	r3, [r4, #12]
 8017434:	9b01      	ldr	r3, [sp, #4]
 8017436:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801743a:	b15b      	cbz	r3, 8017454 <__smakebuf_r+0x70>
 801743c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017440:	4630      	mov	r0, r6
 8017442:	f000 f81d 	bl	8017480 <_isatty_r>
 8017446:	b128      	cbz	r0, 8017454 <__smakebuf_r+0x70>
 8017448:	89a3      	ldrh	r3, [r4, #12]
 801744a:	f023 0303 	bic.w	r3, r3, #3
 801744e:	f043 0301 	orr.w	r3, r3, #1
 8017452:	81a3      	strh	r3, [r4, #12]
 8017454:	89a3      	ldrh	r3, [r4, #12]
 8017456:	431d      	orrs	r5, r3
 8017458:	81a5      	strh	r5, [r4, #12]
 801745a:	e7cf      	b.n	80173fc <__smakebuf_r+0x18>

0801745c <_fstat_r>:
 801745c:	b538      	push	{r3, r4, r5, lr}
 801745e:	4d07      	ldr	r5, [pc, #28]	@ (801747c <_fstat_r+0x20>)
 8017460:	2300      	movs	r3, #0
 8017462:	4604      	mov	r4, r0
 8017464:	4608      	mov	r0, r1
 8017466:	4611      	mov	r1, r2
 8017468:	602b      	str	r3, [r5, #0]
 801746a:	f7ed f9e5 	bl	8004838 <_fstat>
 801746e:	1c43      	adds	r3, r0, #1
 8017470:	d102      	bne.n	8017478 <_fstat_r+0x1c>
 8017472:	682b      	ldr	r3, [r5, #0]
 8017474:	b103      	cbz	r3, 8017478 <_fstat_r+0x1c>
 8017476:	6023      	str	r3, [r4, #0]
 8017478:	bd38      	pop	{r3, r4, r5, pc}
 801747a:	bf00      	nop
 801747c:	20013c5c 	.word	0x20013c5c

08017480 <_isatty_r>:
 8017480:	b538      	push	{r3, r4, r5, lr}
 8017482:	4d06      	ldr	r5, [pc, #24]	@ (801749c <_isatty_r+0x1c>)
 8017484:	2300      	movs	r3, #0
 8017486:	4604      	mov	r4, r0
 8017488:	4608      	mov	r0, r1
 801748a:	602b      	str	r3, [r5, #0]
 801748c:	f7ed f9e4 	bl	8004858 <_isatty>
 8017490:	1c43      	adds	r3, r0, #1
 8017492:	d102      	bne.n	801749a <_isatty_r+0x1a>
 8017494:	682b      	ldr	r3, [r5, #0]
 8017496:	b103      	cbz	r3, 801749a <_isatty_r+0x1a>
 8017498:	6023      	str	r3, [r4, #0]
 801749a:	bd38      	pop	{r3, r4, r5, pc}
 801749c:	20013c5c 	.word	0x20013c5c

080174a0 <atan2>:
 80174a0:	f000 bb5e 	b.w	8017b60 <__ieee754_atan2>

080174a4 <fmod>:
 80174a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174a6:	ed2d 8b02 	vpush	{d8}
 80174aa:	ec57 6b10 	vmov	r6, r7, d0
 80174ae:	ec55 4b11 	vmov	r4, r5, d1
 80174b2:	f000 fc1b 	bl	8017cec <__ieee754_fmod>
 80174b6:	4622      	mov	r2, r4
 80174b8:	462b      	mov	r3, r5
 80174ba:	4630      	mov	r0, r6
 80174bc:	4639      	mov	r1, r7
 80174be:	eeb0 8a40 	vmov.f32	s16, s0
 80174c2:	eef0 8a60 	vmov.f32	s17, s1
 80174c6:	f7e9 fb41 	bl	8000b4c <__aeabi_dcmpun>
 80174ca:	b990      	cbnz	r0, 80174f2 <fmod+0x4e>
 80174cc:	2200      	movs	r2, #0
 80174ce:	2300      	movs	r3, #0
 80174d0:	4620      	mov	r0, r4
 80174d2:	4629      	mov	r1, r5
 80174d4:	f7e9 fb08 	bl	8000ae8 <__aeabi_dcmpeq>
 80174d8:	b158      	cbz	r0, 80174f2 <fmod+0x4e>
 80174da:	f7fd fd57 	bl	8014f8c <__errno>
 80174de:	2321      	movs	r3, #33	@ 0x21
 80174e0:	6003      	str	r3, [r0, #0]
 80174e2:	2200      	movs	r2, #0
 80174e4:	2300      	movs	r3, #0
 80174e6:	4610      	mov	r0, r2
 80174e8:	4619      	mov	r1, r3
 80174ea:	f7e9 f9bf 	bl	800086c <__aeabi_ddiv>
 80174ee:	ec41 0b18 	vmov	d8, r0, r1
 80174f2:	eeb0 0a48 	vmov.f32	s0, s16
 80174f6:	eef0 0a68 	vmov.f32	s1, s17
 80174fa:	ecbd 8b02 	vpop	{d8}
 80174fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017500 <sqrt>:
 8017500:	b538      	push	{r3, r4, r5, lr}
 8017502:	ed2d 8b02 	vpush	{d8}
 8017506:	ec55 4b10 	vmov	r4, r5, d0
 801750a:	f000 f8cd 	bl	80176a8 <__ieee754_sqrt>
 801750e:	4622      	mov	r2, r4
 8017510:	462b      	mov	r3, r5
 8017512:	4620      	mov	r0, r4
 8017514:	4629      	mov	r1, r5
 8017516:	eeb0 8a40 	vmov.f32	s16, s0
 801751a:	eef0 8a60 	vmov.f32	s17, s1
 801751e:	f7e9 fb15 	bl	8000b4c <__aeabi_dcmpun>
 8017522:	b990      	cbnz	r0, 801754a <sqrt+0x4a>
 8017524:	2200      	movs	r2, #0
 8017526:	2300      	movs	r3, #0
 8017528:	4620      	mov	r0, r4
 801752a:	4629      	mov	r1, r5
 801752c:	f7e9 fae6 	bl	8000afc <__aeabi_dcmplt>
 8017530:	b158      	cbz	r0, 801754a <sqrt+0x4a>
 8017532:	f7fd fd2b 	bl	8014f8c <__errno>
 8017536:	2321      	movs	r3, #33	@ 0x21
 8017538:	6003      	str	r3, [r0, #0]
 801753a:	2200      	movs	r2, #0
 801753c:	2300      	movs	r3, #0
 801753e:	4610      	mov	r0, r2
 8017540:	4619      	mov	r1, r3
 8017542:	f7e9 f993 	bl	800086c <__aeabi_ddiv>
 8017546:	ec41 0b18 	vmov	d8, r0, r1
 801754a:	eeb0 0a48 	vmov.f32	s0, s16
 801754e:	eef0 0a68 	vmov.f32	s1, s17
 8017552:	ecbd 8b02 	vpop	{d8}
 8017556:	bd38      	pop	{r3, r4, r5, pc}

08017558 <cos>:
 8017558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801755a:	ec53 2b10 	vmov	r2, r3, d0
 801755e:	4826      	ldr	r0, [pc, #152]	@ (80175f8 <cos+0xa0>)
 8017560:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8017564:	4281      	cmp	r1, r0
 8017566:	d806      	bhi.n	8017576 <cos+0x1e>
 8017568:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80175f0 <cos+0x98>
 801756c:	b005      	add	sp, #20
 801756e:	f85d eb04 	ldr.w	lr, [sp], #4
 8017572:	f000 b971 	b.w	8017858 <__kernel_cos>
 8017576:	4821      	ldr	r0, [pc, #132]	@ (80175fc <cos+0xa4>)
 8017578:	4281      	cmp	r1, r0
 801757a:	d908      	bls.n	801758e <cos+0x36>
 801757c:	4610      	mov	r0, r2
 801757e:	4619      	mov	r1, r3
 8017580:	f7e8 fe92 	bl	80002a8 <__aeabi_dsub>
 8017584:	ec41 0b10 	vmov	d0, r0, r1
 8017588:	b005      	add	sp, #20
 801758a:	f85d fb04 	ldr.w	pc, [sp], #4
 801758e:	4668      	mov	r0, sp
 8017590:	f000 fcb6 	bl	8017f00 <__ieee754_rem_pio2>
 8017594:	f000 0003 	and.w	r0, r0, #3
 8017598:	2801      	cmp	r0, #1
 801759a:	d00b      	beq.n	80175b4 <cos+0x5c>
 801759c:	2802      	cmp	r0, #2
 801759e:	d015      	beq.n	80175cc <cos+0x74>
 80175a0:	b9d8      	cbnz	r0, 80175da <cos+0x82>
 80175a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80175a6:	ed9d 0b00 	vldr	d0, [sp]
 80175aa:	f000 f955 	bl	8017858 <__kernel_cos>
 80175ae:	ec51 0b10 	vmov	r0, r1, d0
 80175b2:	e7e7      	b.n	8017584 <cos+0x2c>
 80175b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80175b8:	ed9d 0b00 	vldr	d0, [sp]
 80175bc:	f000 fa14 	bl	80179e8 <__kernel_sin>
 80175c0:	ec53 2b10 	vmov	r2, r3, d0
 80175c4:	4610      	mov	r0, r2
 80175c6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80175ca:	e7db      	b.n	8017584 <cos+0x2c>
 80175cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80175d0:	ed9d 0b00 	vldr	d0, [sp]
 80175d4:	f000 f940 	bl	8017858 <__kernel_cos>
 80175d8:	e7f2      	b.n	80175c0 <cos+0x68>
 80175da:	ed9d 1b02 	vldr	d1, [sp, #8]
 80175de:	ed9d 0b00 	vldr	d0, [sp]
 80175e2:	2001      	movs	r0, #1
 80175e4:	f000 fa00 	bl	80179e8 <__kernel_sin>
 80175e8:	e7e1      	b.n	80175ae <cos+0x56>
 80175ea:	bf00      	nop
 80175ec:	f3af 8000 	nop.w
	...
 80175f8:	3fe921fb 	.word	0x3fe921fb
 80175fc:	7fefffff 	.word	0x7fefffff

08017600 <sin>:
 8017600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017602:	ec53 2b10 	vmov	r2, r3, d0
 8017606:	4826      	ldr	r0, [pc, #152]	@ (80176a0 <sin+0xa0>)
 8017608:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801760c:	4281      	cmp	r1, r0
 801760e:	d807      	bhi.n	8017620 <sin+0x20>
 8017610:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8017698 <sin+0x98>
 8017614:	2000      	movs	r0, #0
 8017616:	b005      	add	sp, #20
 8017618:	f85d eb04 	ldr.w	lr, [sp], #4
 801761c:	f000 b9e4 	b.w	80179e8 <__kernel_sin>
 8017620:	4820      	ldr	r0, [pc, #128]	@ (80176a4 <sin+0xa4>)
 8017622:	4281      	cmp	r1, r0
 8017624:	d908      	bls.n	8017638 <sin+0x38>
 8017626:	4610      	mov	r0, r2
 8017628:	4619      	mov	r1, r3
 801762a:	f7e8 fe3d 	bl	80002a8 <__aeabi_dsub>
 801762e:	ec41 0b10 	vmov	d0, r0, r1
 8017632:	b005      	add	sp, #20
 8017634:	f85d fb04 	ldr.w	pc, [sp], #4
 8017638:	4668      	mov	r0, sp
 801763a:	f000 fc61 	bl	8017f00 <__ieee754_rem_pio2>
 801763e:	f000 0003 	and.w	r0, r0, #3
 8017642:	2801      	cmp	r0, #1
 8017644:	d00c      	beq.n	8017660 <sin+0x60>
 8017646:	2802      	cmp	r0, #2
 8017648:	d011      	beq.n	801766e <sin+0x6e>
 801764a:	b9e8      	cbnz	r0, 8017688 <sin+0x88>
 801764c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017650:	ed9d 0b00 	vldr	d0, [sp]
 8017654:	2001      	movs	r0, #1
 8017656:	f000 f9c7 	bl	80179e8 <__kernel_sin>
 801765a:	ec51 0b10 	vmov	r0, r1, d0
 801765e:	e7e6      	b.n	801762e <sin+0x2e>
 8017660:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017664:	ed9d 0b00 	vldr	d0, [sp]
 8017668:	f000 f8f6 	bl	8017858 <__kernel_cos>
 801766c:	e7f5      	b.n	801765a <sin+0x5a>
 801766e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017672:	ed9d 0b00 	vldr	d0, [sp]
 8017676:	2001      	movs	r0, #1
 8017678:	f000 f9b6 	bl	80179e8 <__kernel_sin>
 801767c:	ec53 2b10 	vmov	r2, r3, d0
 8017680:	4610      	mov	r0, r2
 8017682:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8017686:	e7d2      	b.n	801762e <sin+0x2e>
 8017688:	ed9d 1b02 	vldr	d1, [sp, #8]
 801768c:	ed9d 0b00 	vldr	d0, [sp]
 8017690:	f000 f8e2 	bl	8017858 <__kernel_cos>
 8017694:	e7f2      	b.n	801767c <sin+0x7c>
 8017696:	bf00      	nop
	...
 80176a0:	3fe921fb 	.word	0x3fe921fb
 80176a4:	7fefffff 	.word	0x7fefffff

080176a8 <__ieee754_sqrt>:
 80176a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176ac:	4a66      	ldr	r2, [pc, #408]	@ (8017848 <__ieee754_sqrt+0x1a0>)
 80176ae:	ec55 4b10 	vmov	r4, r5, d0
 80176b2:	43aa      	bics	r2, r5
 80176b4:	462b      	mov	r3, r5
 80176b6:	4621      	mov	r1, r4
 80176b8:	d110      	bne.n	80176dc <__ieee754_sqrt+0x34>
 80176ba:	4622      	mov	r2, r4
 80176bc:	4620      	mov	r0, r4
 80176be:	4629      	mov	r1, r5
 80176c0:	f7e8 ffaa 	bl	8000618 <__aeabi_dmul>
 80176c4:	4602      	mov	r2, r0
 80176c6:	460b      	mov	r3, r1
 80176c8:	4620      	mov	r0, r4
 80176ca:	4629      	mov	r1, r5
 80176cc:	f7e8 fdee 	bl	80002ac <__adddf3>
 80176d0:	4604      	mov	r4, r0
 80176d2:	460d      	mov	r5, r1
 80176d4:	ec45 4b10 	vmov	d0, r4, r5
 80176d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176dc:	2d00      	cmp	r5, #0
 80176de:	dc0e      	bgt.n	80176fe <__ieee754_sqrt+0x56>
 80176e0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80176e4:	4322      	orrs	r2, r4
 80176e6:	d0f5      	beq.n	80176d4 <__ieee754_sqrt+0x2c>
 80176e8:	b19d      	cbz	r5, 8017712 <__ieee754_sqrt+0x6a>
 80176ea:	4622      	mov	r2, r4
 80176ec:	4620      	mov	r0, r4
 80176ee:	4629      	mov	r1, r5
 80176f0:	f7e8 fdda 	bl	80002a8 <__aeabi_dsub>
 80176f4:	4602      	mov	r2, r0
 80176f6:	460b      	mov	r3, r1
 80176f8:	f7e9 f8b8 	bl	800086c <__aeabi_ddiv>
 80176fc:	e7e8      	b.n	80176d0 <__ieee754_sqrt+0x28>
 80176fe:	152a      	asrs	r2, r5, #20
 8017700:	d115      	bne.n	801772e <__ieee754_sqrt+0x86>
 8017702:	2000      	movs	r0, #0
 8017704:	e009      	b.n	801771a <__ieee754_sqrt+0x72>
 8017706:	0acb      	lsrs	r3, r1, #11
 8017708:	3a15      	subs	r2, #21
 801770a:	0549      	lsls	r1, r1, #21
 801770c:	2b00      	cmp	r3, #0
 801770e:	d0fa      	beq.n	8017706 <__ieee754_sqrt+0x5e>
 8017710:	e7f7      	b.n	8017702 <__ieee754_sqrt+0x5a>
 8017712:	462a      	mov	r2, r5
 8017714:	e7fa      	b.n	801770c <__ieee754_sqrt+0x64>
 8017716:	005b      	lsls	r3, r3, #1
 8017718:	3001      	adds	r0, #1
 801771a:	02dc      	lsls	r4, r3, #11
 801771c:	d5fb      	bpl.n	8017716 <__ieee754_sqrt+0x6e>
 801771e:	1e44      	subs	r4, r0, #1
 8017720:	1b12      	subs	r2, r2, r4
 8017722:	f1c0 0420 	rsb	r4, r0, #32
 8017726:	fa21 f404 	lsr.w	r4, r1, r4
 801772a:	4323      	orrs	r3, r4
 801772c:	4081      	lsls	r1, r0
 801772e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017732:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8017736:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801773a:	07d2      	lsls	r2, r2, #31
 801773c:	bf5c      	itt	pl
 801773e:	005b      	lslpl	r3, r3, #1
 8017740:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8017744:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017748:	bf58      	it	pl
 801774a:	0049      	lslpl	r1, r1, #1
 801774c:	2600      	movs	r6, #0
 801774e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8017752:	107f      	asrs	r7, r7, #1
 8017754:	0049      	lsls	r1, r1, #1
 8017756:	2016      	movs	r0, #22
 8017758:	4632      	mov	r2, r6
 801775a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801775e:	1915      	adds	r5, r2, r4
 8017760:	429d      	cmp	r5, r3
 8017762:	bfde      	ittt	le
 8017764:	192a      	addle	r2, r5, r4
 8017766:	1b5b      	suble	r3, r3, r5
 8017768:	1936      	addle	r6, r6, r4
 801776a:	0fcd      	lsrs	r5, r1, #31
 801776c:	3801      	subs	r0, #1
 801776e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8017772:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017776:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801777a:	d1f0      	bne.n	801775e <__ieee754_sqrt+0xb6>
 801777c:	4605      	mov	r5, r0
 801777e:	2420      	movs	r4, #32
 8017780:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8017784:	4293      	cmp	r3, r2
 8017786:	eb0c 0e00 	add.w	lr, ip, r0
 801778a:	dc02      	bgt.n	8017792 <__ieee754_sqrt+0xea>
 801778c:	d113      	bne.n	80177b6 <__ieee754_sqrt+0x10e>
 801778e:	458e      	cmp	lr, r1
 8017790:	d811      	bhi.n	80177b6 <__ieee754_sqrt+0x10e>
 8017792:	f1be 0f00 	cmp.w	lr, #0
 8017796:	eb0e 000c 	add.w	r0, lr, ip
 801779a:	da3f      	bge.n	801781c <__ieee754_sqrt+0x174>
 801779c:	2800      	cmp	r0, #0
 801779e:	db3d      	blt.n	801781c <__ieee754_sqrt+0x174>
 80177a0:	f102 0801 	add.w	r8, r2, #1
 80177a4:	1a9b      	subs	r3, r3, r2
 80177a6:	458e      	cmp	lr, r1
 80177a8:	bf88      	it	hi
 80177aa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80177ae:	eba1 010e 	sub.w	r1, r1, lr
 80177b2:	4465      	add	r5, ip
 80177b4:	4642      	mov	r2, r8
 80177b6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80177ba:	3c01      	subs	r4, #1
 80177bc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80177c0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80177c4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80177c8:	d1dc      	bne.n	8017784 <__ieee754_sqrt+0xdc>
 80177ca:	4319      	orrs	r1, r3
 80177cc:	d01b      	beq.n	8017806 <__ieee754_sqrt+0x15e>
 80177ce:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 801784c <__ieee754_sqrt+0x1a4>
 80177d2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8017850 <__ieee754_sqrt+0x1a8>
 80177d6:	e9da 0100 	ldrd	r0, r1, [sl]
 80177da:	e9db 2300 	ldrd	r2, r3, [fp]
 80177de:	f7e8 fd63 	bl	80002a8 <__aeabi_dsub>
 80177e2:	e9da 8900 	ldrd	r8, r9, [sl]
 80177e6:	4602      	mov	r2, r0
 80177e8:	460b      	mov	r3, r1
 80177ea:	4640      	mov	r0, r8
 80177ec:	4649      	mov	r1, r9
 80177ee:	f7e9 f98f 	bl	8000b10 <__aeabi_dcmple>
 80177f2:	b140      	cbz	r0, 8017806 <__ieee754_sqrt+0x15e>
 80177f4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80177f8:	e9da 0100 	ldrd	r0, r1, [sl]
 80177fc:	e9db 2300 	ldrd	r2, r3, [fp]
 8017800:	d10e      	bne.n	8017820 <__ieee754_sqrt+0x178>
 8017802:	3601      	adds	r6, #1
 8017804:	4625      	mov	r5, r4
 8017806:	1073      	asrs	r3, r6, #1
 8017808:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 801780c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8017810:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8017814:	086b      	lsrs	r3, r5, #1
 8017816:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 801781a:	e759      	b.n	80176d0 <__ieee754_sqrt+0x28>
 801781c:	4690      	mov	r8, r2
 801781e:	e7c1      	b.n	80177a4 <__ieee754_sqrt+0xfc>
 8017820:	f7e8 fd44 	bl	80002ac <__adddf3>
 8017824:	e9da 8900 	ldrd	r8, r9, [sl]
 8017828:	4602      	mov	r2, r0
 801782a:	460b      	mov	r3, r1
 801782c:	4640      	mov	r0, r8
 801782e:	4649      	mov	r1, r9
 8017830:	f7e9 f964 	bl	8000afc <__aeabi_dcmplt>
 8017834:	b120      	cbz	r0, 8017840 <__ieee754_sqrt+0x198>
 8017836:	1cab      	adds	r3, r5, #2
 8017838:	bf08      	it	eq
 801783a:	3601      	addeq	r6, #1
 801783c:	3502      	adds	r5, #2
 801783e:	e7e2      	b.n	8017806 <__ieee754_sqrt+0x15e>
 8017840:	1c6b      	adds	r3, r5, #1
 8017842:	f023 0501 	bic.w	r5, r3, #1
 8017846:	e7de      	b.n	8017806 <__ieee754_sqrt+0x15e>
 8017848:	7ff00000 	.word	0x7ff00000
 801784c:	08019ff0 	.word	0x08019ff0
 8017850:	08019fe8 	.word	0x08019fe8
 8017854:	00000000 	.word	0x00000000

08017858 <__kernel_cos>:
 8017858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801785c:	ec57 6b10 	vmov	r6, r7, d0
 8017860:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8017864:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8017868:	ed8d 1b00 	vstr	d1, [sp]
 801786c:	d206      	bcs.n	801787c <__kernel_cos+0x24>
 801786e:	4630      	mov	r0, r6
 8017870:	4639      	mov	r1, r7
 8017872:	f7e9 f981 	bl	8000b78 <__aeabi_d2iz>
 8017876:	2800      	cmp	r0, #0
 8017878:	f000 8088 	beq.w	801798c <__kernel_cos+0x134>
 801787c:	4632      	mov	r2, r6
 801787e:	463b      	mov	r3, r7
 8017880:	4630      	mov	r0, r6
 8017882:	4639      	mov	r1, r7
 8017884:	f7e8 fec8 	bl	8000618 <__aeabi_dmul>
 8017888:	4b51      	ldr	r3, [pc, #324]	@ (80179d0 <__kernel_cos+0x178>)
 801788a:	2200      	movs	r2, #0
 801788c:	4604      	mov	r4, r0
 801788e:	460d      	mov	r5, r1
 8017890:	f7e8 fec2 	bl	8000618 <__aeabi_dmul>
 8017894:	a340      	add	r3, pc, #256	@ (adr r3, 8017998 <__kernel_cos+0x140>)
 8017896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801789a:	4682      	mov	sl, r0
 801789c:	468b      	mov	fp, r1
 801789e:	4620      	mov	r0, r4
 80178a0:	4629      	mov	r1, r5
 80178a2:	f7e8 feb9 	bl	8000618 <__aeabi_dmul>
 80178a6:	a33e      	add	r3, pc, #248	@ (adr r3, 80179a0 <__kernel_cos+0x148>)
 80178a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178ac:	f7e8 fcfe 	bl	80002ac <__adddf3>
 80178b0:	4622      	mov	r2, r4
 80178b2:	462b      	mov	r3, r5
 80178b4:	f7e8 feb0 	bl	8000618 <__aeabi_dmul>
 80178b8:	a33b      	add	r3, pc, #236	@ (adr r3, 80179a8 <__kernel_cos+0x150>)
 80178ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178be:	f7e8 fcf3 	bl	80002a8 <__aeabi_dsub>
 80178c2:	4622      	mov	r2, r4
 80178c4:	462b      	mov	r3, r5
 80178c6:	f7e8 fea7 	bl	8000618 <__aeabi_dmul>
 80178ca:	a339      	add	r3, pc, #228	@ (adr r3, 80179b0 <__kernel_cos+0x158>)
 80178cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178d0:	f7e8 fcec 	bl	80002ac <__adddf3>
 80178d4:	4622      	mov	r2, r4
 80178d6:	462b      	mov	r3, r5
 80178d8:	f7e8 fe9e 	bl	8000618 <__aeabi_dmul>
 80178dc:	a336      	add	r3, pc, #216	@ (adr r3, 80179b8 <__kernel_cos+0x160>)
 80178de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178e2:	f7e8 fce1 	bl	80002a8 <__aeabi_dsub>
 80178e6:	4622      	mov	r2, r4
 80178e8:	462b      	mov	r3, r5
 80178ea:	f7e8 fe95 	bl	8000618 <__aeabi_dmul>
 80178ee:	a334      	add	r3, pc, #208	@ (adr r3, 80179c0 <__kernel_cos+0x168>)
 80178f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178f4:	f7e8 fcda 	bl	80002ac <__adddf3>
 80178f8:	4622      	mov	r2, r4
 80178fa:	462b      	mov	r3, r5
 80178fc:	f7e8 fe8c 	bl	8000618 <__aeabi_dmul>
 8017900:	4622      	mov	r2, r4
 8017902:	462b      	mov	r3, r5
 8017904:	f7e8 fe88 	bl	8000618 <__aeabi_dmul>
 8017908:	e9dd 2300 	ldrd	r2, r3, [sp]
 801790c:	4604      	mov	r4, r0
 801790e:	460d      	mov	r5, r1
 8017910:	4630      	mov	r0, r6
 8017912:	4639      	mov	r1, r7
 8017914:	f7e8 fe80 	bl	8000618 <__aeabi_dmul>
 8017918:	460b      	mov	r3, r1
 801791a:	4602      	mov	r2, r0
 801791c:	4629      	mov	r1, r5
 801791e:	4620      	mov	r0, r4
 8017920:	f7e8 fcc2 	bl	80002a8 <__aeabi_dsub>
 8017924:	4b2b      	ldr	r3, [pc, #172]	@ (80179d4 <__kernel_cos+0x17c>)
 8017926:	4598      	cmp	r8, r3
 8017928:	4606      	mov	r6, r0
 801792a:	460f      	mov	r7, r1
 801792c:	d810      	bhi.n	8017950 <__kernel_cos+0xf8>
 801792e:	4602      	mov	r2, r0
 8017930:	460b      	mov	r3, r1
 8017932:	4650      	mov	r0, sl
 8017934:	4659      	mov	r1, fp
 8017936:	f7e8 fcb7 	bl	80002a8 <__aeabi_dsub>
 801793a:	460b      	mov	r3, r1
 801793c:	4926      	ldr	r1, [pc, #152]	@ (80179d8 <__kernel_cos+0x180>)
 801793e:	4602      	mov	r2, r0
 8017940:	2000      	movs	r0, #0
 8017942:	f7e8 fcb1 	bl	80002a8 <__aeabi_dsub>
 8017946:	ec41 0b10 	vmov	d0, r0, r1
 801794a:	b003      	add	sp, #12
 801794c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017950:	4b22      	ldr	r3, [pc, #136]	@ (80179dc <__kernel_cos+0x184>)
 8017952:	4921      	ldr	r1, [pc, #132]	@ (80179d8 <__kernel_cos+0x180>)
 8017954:	4598      	cmp	r8, r3
 8017956:	bf8c      	ite	hi
 8017958:	4d21      	ldrhi	r5, [pc, #132]	@ (80179e0 <__kernel_cos+0x188>)
 801795a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801795e:	2400      	movs	r4, #0
 8017960:	4622      	mov	r2, r4
 8017962:	462b      	mov	r3, r5
 8017964:	2000      	movs	r0, #0
 8017966:	f7e8 fc9f 	bl	80002a8 <__aeabi_dsub>
 801796a:	4622      	mov	r2, r4
 801796c:	4680      	mov	r8, r0
 801796e:	4689      	mov	r9, r1
 8017970:	462b      	mov	r3, r5
 8017972:	4650      	mov	r0, sl
 8017974:	4659      	mov	r1, fp
 8017976:	f7e8 fc97 	bl	80002a8 <__aeabi_dsub>
 801797a:	4632      	mov	r2, r6
 801797c:	463b      	mov	r3, r7
 801797e:	f7e8 fc93 	bl	80002a8 <__aeabi_dsub>
 8017982:	4602      	mov	r2, r0
 8017984:	460b      	mov	r3, r1
 8017986:	4640      	mov	r0, r8
 8017988:	4649      	mov	r1, r9
 801798a:	e7da      	b.n	8017942 <__kernel_cos+0xea>
 801798c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80179c8 <__kernel_cos+0x170>
 8017990:	e7db      	b.n	801794a <__kernel_cos+0xf2>
 8017992:	bf00      	nop
 8017994:	f3af 8000 	nop.w
 8017998:	be8838d4 	.word	0xbe8838d4
 801799c:	bda8fae9 	.word	0xbda8fae9
 80179a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80179a4:	3e21ee9e 	.word	0x3e21ee9e
 80179a8:	809c52ad 	.word	0x809c52ad
 80179ac:	3e927e4f 	.word	0x3e927e4f
 80179b0:	19cb1590 	.word	0x19cb1590
 80179b4:	3efa01a0 	.word	0x3efa01a0
 80179b8:	16c15177 	.word	0x16c15177
 80179bc:	3f56c16c 	.word	0x3f56c16c
 80179c0:	5555554c 	.word	0x5555554c
 80179c4:	3fa55555 	.word	0x3fa55555
 80179c8:	00000000 	.word	0x00000000
 80179cc:	3ff00000 	.word	0x3ff00000
 80179d0:	3fe00000 	.word	0x3fe00000
 80179d4:	3fd33332 	.word	0x3fd33332
 80179d8:	3ff00000 	.word	0x3ff00000
 80179dc:	3fe90000 	.word	0x3fe90000
 80179e0:	3fd20000 	.word	0x3fd20000
 80179e4:	00000000 	.word	0x00000000

080179e8 <__kernel_sin>:
 80179e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179ec:	ec55 4b10 	vmov	r4, r5, d0
 80179f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80179f4:	b085      	sub	sp, #20
 80179f6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80179fa:	ed8d 1b02 	vstr	d1, [sp, #8]
 80179fe:	4680      	mov	r8, r0
 8017a00:	d205      	bcs.n	8017a0e <__kernel_sin+0x26>
 8017a02:	4620      	mov	r0, r4
 8017a04:	4629      	mov	r1, r5
 8017a06:	f7e9 f8b7 	bl	8000b78 <__aeabi_d2iz>
 8017a0a:	2800      	cmp	r0, #0
 8017a0c:	d052      	beq.n	8017ab4 <__kernel_sin+0xcc>
 8017a0e:	4622      	mov	r2, r4
 8017a10:	462b      	mov	r3, r5
 8017a12:	4620      	mov	r0, r4
 8017a14:	4629      	mov	r1, r5
 8017a16:	f7e8 fdff 	bl	8000618 <__aeabi_dmul>
 8017a1a:	4682      	mov	sl, r0
 8017a1c:	468b      	mov	fp, r1
 8017a1e:	4602      	mov	r2, r0
 8017a20:	460b      	mov	r3, r1
 8017a22:	4620      	mov	r0, r4
 8017a24:	4629      	mov	r1, r5
 8017a26:	f7e8 fdf7 	bl	8000618 <__aeabi_dmul>
 8017a2a:	a342      	add	r3, pc, #264	@ (adr r3, 8017b34 <__kernel_sin+0x14c>)
 8017a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a30:	e9cd 0100 	strd	r0, r1, [sp]
 8017a34:	4650      	mov	r0, sl
 8017a36:	4659      	mov	r1, fp
 8017a38:	f7e8 fdee 	bl	8000618 <__aeabi_dmul>
 8017a3c:	a33f      	add	r3, pc, #252	@ (adr r3, 8017b3c <__kernel_sin+0x154>)
 8017a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a42:	f7e8 fc31 	bl	80002a8 <__aeabi_dsub>
 8017a46:	4652      	mov	r2, sl
 8017a48:	465b      	mov	r3, fp
 8017a4a:	f7e8 fde5 	bl	8000618 <__aeabi_dmul>
 8017a4e:	a33d      	add	r3, pc, #244	@ (adr r3, 8017b44 <__kernel_sin+0x15c>)
 8017a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a54:	f7e8 fc2a 	bl	80002ac <__adddf3>
 8017a58:	4652      	mov	r2, sl
 8017a5a:	465b      	mov	r3, fp
 8017a5c:	f7e8 fddc 	bl	8000618 <__aeabi_dmul>
 8017a60:	a33a      	add	r3, pc, #232	@ (adr r3, 8017b4c <__kernel_sin+0x164>)
 8017a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a66:	f7e8 fc1f 	bl	80002a8 <__aeabi_dsub>
 8017a6a:	4652      	mov	r2, sl
 8017a6c:	465b      	mov	r3, fp
 8017a6e:	f7e8 fdd3 	bl	8000618 <__aeabi_dmul>
 8017a72:	a338      	add	r3, pc, #224	@ (adr r3, 8017b54 <__kernel_sin+0x16c>)
 8017a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a78:	f7e8 fc18 	bl	80002ac <__adddf3>
 8017a7c:	4606      	mov	r6, r0
 8017a7e:	460f      	mov	r7, r1
 8017a80:	f1b8 0f00 	cmp.w	r8, #0
 8017a84:	d11b      	bne.n	8017abe <__kernel_sin+0xd6>
 8017a86:	4602      	mov	r2, r0
 8017a88:	460b      	mov	r3, r1
 8017a8a:	4650      	mov	r0, sl
 8017a8c:	4659      	mov	r1, fp
 8017a8e:	f7e8 fdc3 	bl	8000618 <__aeabi_dmul>
 8017a92:	a325      	add	r3, pc, #148	@ (adr r3, 8017b28 <__kernel_sin+0x140>)
 8017a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a98:	f7e8 fc06 	bl	80002a8 <__aeabi_dsub>
 8017a9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017aa0:	f7e8 fdba 	bl	8000618 <__aeabi_dmul>
 8017aa4:	4602      	mov	r2, r0
 8017aa6:	460b      	mov	r3, r1
 8017aa8:	4620      	mov	r0, r4
 8017aaa:	4629      	mov	r1, r5
 8017aac:	f7e8 fbfe 	bl	80002ac <__adddf3>
 8017ab0:	4604      	mov	r4, r0
 8017ab2:	460d      	mov	r5, r1
 8017ab4:	ec45 4b10 	vmov	d0, r4, r5
 8017ab8:	b005      	add	sp, #20
 8017aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017abe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8017b30 <__kernel_sin+0x148>)
 8017ac4:	2200      	movs	r2, #0
 8017ac6:	f7e8 fda7 	bl	8000618 <__aeabi_dmul>
 8017aca:	4632      	mov	r2, r6
 8017acc:	4680      	mov	r8, r0
 8017ace:	4689      	mov	r9, r1
 8017ad0:	463b      	mov	r3, r7
 8017ad2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ad6:	f7e8 fd9f 	bl	8000618 <__aeabi_dmul>
 8017ada:	4602      	mov	r2, r0
 8017adc:	460b      	mov	r3, r1
 8017ade:	4640      	mov	r0, r8
 8017ae0:	4649      	mov	r1, r9
 8017ae2:	f7e8 fbe1 	bl	80002a8 <__aeabi_dsub>
 8017ae6:	4652      	mov	r2, sl
 8017ae8:	465b      	mov	r3, fp
 8017aea:	f7e8 fd95 	bl	8000618 <__aeabi_dmul>
 8017aee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017af2:	f7e8 fbd9 	bl	80002a8 <__aeabi_dsub>
 8017af6:	a30c      	add	r3, pc, #48	@ (adr r3, 8017b28 <__kernel_sin+0x140>)
 8017af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017afc:	4606      	mov	r6, r0
 8017afe:	460f      	mov	r7, r1
 8017b00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b04:	f7e8 fd88 	bl	8000618 <__aeabi_dmul>
 8017b08:	4602      	mov	r2, r0
 8017b0a:	460b      	mov	r3, r1
 8017b0c:	4630      	mov	r0, r6
 8017b0e:	4639      	mov	r1, r7
 8017b10:	f7e8 fbcc 	bl	80002ac <__adddf3>
 8017b14:	4602      	mov	r2, r0
 8017b16:	460b      	mov	r3, r1
 8017b18:	4620      	mov	r0, r4
 8017b1a:	4629      	mov	r1, r5
 8017b1c:	f7e8 fbc4 	bl	80002a8 <__aeabi_dsub>
 8017b20:	e7c6      	b.n	8017ab0 <__kernel_sin+0xc8>
 8017b22:	bf00      	nop
 8017b24:	f3af 8000 	nop.w
 8017b28:	55555549 	.word	0x55555549
 8017b2c:	3fc55555 	.word	0x3fc55555
 8017b30:	3fe00000 	.word	0x3fe00000
 8017b34:	5acfd57c 	.word	0x5acfd57c
 8017b38:	3de5d93a 	.word	0x3de5d93a
 8017b3c:	8a2b9ceb 	.word	0x8a2b9ceb
 8017b40:	3e5ae5e6 	.word	0x3e5ae5e6
 8017b44:	57b1fe7d 	.word	0x57b1fe7d
 8017b48:	3ec71de3 	.word	0x3ec71de3
 8017b4c:	19c161d5 	.word	0x19c161d5
 8017b50:	3f2a01a0 	.word	0x3f2a01a0
 8017b54:	1110f8a6 	.word	0x1110f8a6
 8017b58:	3f811111 	.word	0x3f811111
 8017b5c:	00000000 	.word	0x00000000

08017b60 <__ieee754_atan2>:
 8017b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b64:	ec57 6b11 	vmov	r6, r7, d1
 8017b68:	4273      	negs	r3, r6
 8017b6a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8017ce8 <__ieee754_atan2+0x188>
 8017b6e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8017b72:	4333      	orrs	r3, r6
 8017b74:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8017b78:	4543      	cmp	r3, r8
 8017b7a:	ec51 0b10 	vmov	r0, r1, d0
 8017b7e:	4635      	mov	r5, r6
 8017b80:	d809      	bhi.n	8017b96 <__ieee754_atan2+0x36>
 8017b82:	4244      	negs	r4, r0
 8017b84:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8017b88:	4304      	orrs	r4, r0
 8017b8a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8017b8e:	4544      	cmp	r4, r8
 8017b90:	468e      	mov	lr, r1
 8017b92:	4681      	mov	r9, r0
 8017b94:	d907      	bls.n	8017ba6 <__ieee754_atan2+0x46>
 8017b96:	4632      	mov	r2, r6
 8017b98:	463b      	mov	r3, r7
 8017b9a:	f7e8 fb87 	bl	80002ac <__adddf3>
 8017b9e:	ec41 0b10 	vmov	d0, r0, r1
 8017ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017ba6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8017baa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8017bae:	4334      	orrs	r4, r6
 8017bb0:	d103      	bne.n	8017bba <__ieee754_atan2+0x5a>
 8017bb2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017bb6:	f000 bb9f 	b.w	80182f8 <atan>
 8017bba:	17bc      	asrs	r4, r7, #30
 8017bbc:	f004 0402 	and.w	r4, r4, #2
 8017bc0:	ea53 0909 	orrs.w	r9, r3, r9
 8017bc4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8017bc8:	d107      	bne.n	8017bda <__ieee754_atan2+0x7a>
 8017bca:	2c02      	cmp	r4, #2
 8017bcc:	d05f      	beq.n	8017c8e <__ieee754_atan2+0x12e>
 8017bce:	2c03      	cmp	r4, #3
 8017bd0:	d1e5      	bne.n	8017b9e <__ieee754_atan2+0x3e>
 8017bd2:	a143      	add	r1, pc, #268	@ (adr r1, 8017ce0 <__ieee754_atan2+0x180>)
 8017bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017bd8:	e7e1      	b.n	8017b9e <__ieee754_atan2+0x3e>
 8017bda:	4315      	orrs	r5, r2
 8017bdc:	d106      	bne.n	8017bec <__ieee754_atan2+0x8c>
 8017bde:	f1be 0f00 	cmp.w	lr, #0
 8017be2:	db5f      	blt.n	8017ca4 <__ieee754_atan2+0x144>
 8017be4:	a136      	add	r1, pc, #216	@ (adr r1, 8017cc0 <__ieee754_atan2+0x160>)
 8017be6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017bea:	e7d8      	b.n	8017b9e <__ieee754_atan2+0x3e>
 8017bec:	4542      	cmp	r2, r8
 8017bee:	d10f      	bne.n	8017c10 <__ieee754_atan2+0xb0>
 8017bf0:	4293      	cmp	r3, r2
 8017bf2:	f104 34ff 	add.w	r4, r4, #4294967295
 8017bf6:	d107      	bne.n	8017c08 <__ieee754_atan2+0xa8>
 8017bf8:	2c02      	cmp	r4, #2
 8017bfa:	d84c      	bhi.n	8017c96 <__ieee754_atan2+0x136>
 8017bfc:	4b36      	ldr	r3, [pc, #216]	@ (8017cd8 <__ieee754_atan2+0x178>)
 8017bfe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017c02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017c06:	e7ca      	b.n	8017b9e <__ieee754_atan2+0x3e>
 8017c08:	2c02      	cmp	r4, #2
 8017c0a:	d848      	bhi.n	8017c9e <__ieee754_atan2+0x13e>
 8017c0c:	4b33      	ldr	r3, [pc, #204]	@ (8017cdc <__ieee754_atan2+0x17c>)
 8017c0e:	e7f6      	b.n	8017bfe <__ieee754_atan2+0x9e>
 8017c10:	4543      	cmp	r3, r8
 8017c12:	d0e4      	beq.n	8017bde <__ieee754_atan2+0x7e>
 8017c14:	1a9b      	subs	r3, r3, r2
 8017c16:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8017c1a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8017c1e:	da1e      	bge.n	8017c5e <__ieee754_atan2+0xfe>
 8017c20:	2f00      	cmp	r7, #0
 8017c22:	da01      	bge.n	8017c28 <__ieee754_atan2+0xc8>
 8017c24:	323c      	adds	r2, #60	@ 0x3c
 8017c26:	db1e      	blt.n	8017c66 <__ieee754_atan2+0x106>
 8017c28:	4632      	mov	r2, r6
 8017c2a:	463b      	mov	r3, r7
 8017c2c:	f7e8 fe1e 	bl	800086c <__aeabi_ddiv>
 8017c30:	ec41 0b10 	vmov	d0, r0, r1
 8017c34:	f000 fcf8 	bl	8018628 <fabs>
 8017c38:	f000 fb5e 	bl	80182f8 <atan>
 8017c3c:	ec51 0b10 	vmov	r0, r1, d0
 8017c40:	2c01      	cmp	r4, #1
 8017c42:	d013      	beq.n	8017c6c <__ieee754_atan2+0x10c>
 8017c44:	2c02      	cmp	r4, #2
 8017c46:	d015      	beq.n	8017c74 <__ieee754_atan2+0x114>
 8017c48:	2c00      	cmp	r4, #0
 8017c4a:	d0a8      	beq.n	8017b9e <__ieee754_atan2+0x3e>
 8017c4c:	a318      	add	r3, pc, #96	@ (adr r3, 8017cb0 <__ieee754_atan2+0x150>)
 8017c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c52:	f7e8 fb29 	bl	80002a8 <__aeabi_dsub>
 8017c56:	a318      	add	r3, pc, #96	@ (adr r3, 8017cb8 <__ieee754_atan2+0x158>)
 8017c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c5c:	e014      	b.n	8017c88 <__ieee754_atan2+0x128>
 8017c5e:	a118      	add	r1, pc, #96	@ (adr r1, 8017cc0 <__ieee754_atan2+0x160>)
 8017c60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017c64:	e7ec      	b.n	8017c40 <__ieee754_atan2+0xe0>
 8017c66:	2000      	movs	r0, #0
 8017c68:	2100      	movs	r1, #0
 8017c6a:	e7e9      	b.n	8017c40 <__ieee754_atan2+0xe0>
 8017c6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017c70:	4619      	mov	r1, r3
 8017c72:	e794      	b.n	8017b9e <__ieee754_atan2+0x3e>
 8017c74:	a30e      	add	r3, pc, #56	@ (adr r3, 8017cb0 <__ieee754_atan2+0x150>)
 8017c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c7a:	f7e8 fb15 	bl	80002a8 <__aeabi_dsub>
 8017c7e:	4602      	mov	r2, r0
 8017c80:	460b      	mov	r3, r1
 8017c82:	a10d      	add	r1, pc, #52	@ (adr r1, 8017cb8 <__ieee754_atan2+0x158>)
 8017c84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017c88:	f7e8 fb0e 	bl	80002a8 <__aeabi_dsub>
 8017c8c:	e787      	b.n	8017b9e <__ieee754_atan2+0x3e>
 8017c8e:	a10a      	add	r1, pc, #40	@ (adr r1, 8017cb8 <__ieee754_atan2+0x158>)
 8017c90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017c94:	e783      	b.n	8017b9e <__ieee754_atan2+0x3e>
 8017c96:	a10c      	add	r1, pc, #48	@ (adr r1, 8017cc8 <__ieee754_atan2+0x168>)
 8017c98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017c9c:	e77f      	b.n	8017b9e <__ieee754_atan2+0x3e>
 8017c9e:	2000      	movs	r0, #0
 8017ca0:	2100      	movs	r1, #0
 8017ca2:	e77c      	b.n	8017b9e <__ieee754_atan2+0x3e>
 8017ca4:	a10a      	add	r1, pc, #40	@ (adr r1, 8017cd0 <__ieee754_atan2+0x170>)
 8017ca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017caa:	e778      	b.n	8017b9e <__ieee754_atan2+0x3e>
 8017cac:	f3af 8000 	nop.w
 8017cb0:	33145c07 	.word	0x33145c07
 8017cb4:	3ca1a626 	.word	0x3ca1a626
 8017cb8:	54442d18 	.word	0x54442d18
 8017cbc:	400921fb 	.word	0x400921fb
 8017cc0:	54442d18 	.word	0x54442d18
 8017cc4:	3ff921fb 	.word	0x3ff921fb
 8017cc8:	54442d18 	.word	0x54442d18
 8017ccc:	3fe921fb 	.word	0x3fe921fb
 8017cd0:	54442d18 	.word	0x54442d18
 8017cd4:	bff921fb 	.word	0xbff921fb
 8017cd8:	0801a010 	.word	0x0801a010
 8017cdc:	08019ff8 	.word	0x08019ff8
 8017ce0:	54442d18 	.word	0x54442d18
 8017ce4:	c00921fb 	.word	0xc00921fb
 8017ce8:	7ff00000 	.word	0x7ff00000

08017cec <__ieee754_fmod>:
 8017cec:	ec53 2b11 	vmov	r2, r3, d1
 8017cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017cf4:	f023 4800 	bic.w	r8, r3, #2147483648	@ 0x80000000
 8017cf8:	ea52 0408 	orrs.w	r4, r2, r8
 8017cfc:	ec51 0b10 	vmov	r0, r1, d0
 8017d00:	461e      	mov	r6, r3
 8017d02:	4696      	mov	lr, r2
 8017d04:	4694      	mov	ip, r2
 8017d06:	d00c      	beq.n	8017d22 <__ieee754_fmod+0x36>
 8017d08:	4d76      	ldr	r5, [pc, #472]	@ (8017ee4 <__ieee754_fmod+0x1f8>)
 8017d0a:	f021 4900 	bic.w	r9, r1, #2147483648	@ 0x80000000
 8017d0e:	45a9      	cmp	r9, r5
 8017d10:	460c      	mov	r4, r1
 8017d12:	d806      	bhi.n	8017d22 <__ieee754_fmod+0x36>
 8017d14:	4255      	negs	r5, r2
 8017d16:	4f74      	ldr	r7, [pc, #464]	@ (8017ee8 <__ieee754_fmod+0x1fc>)
 8017d18:	4315      	orrs	r5, r2
 8017d1a:	ea48 75d5 	orr.w	r5, r8, r5, lsr #31
 8017d1e:	42bd      	cmp	r5, r7
 8017d20:	d909      	bls.n	8017d36 <__ieee754_fmod+0x4a>
 8017d22:	f7e8 fc79 	bl	8000618 <__aeabi_dmul>
 8017d26:	4602      	mov	r2, r0
 8017d28:	460b      	mov	r3, r1
 8017d2a:	f7e8 fd9f 	bl	800086c <__aeabi_ddiv>
 8017d2e:	ec41 0b10 	vmov	d0, r0, r1
 8017d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d36:	45c1      	cmp	r9, r8
 8017d38:	4682      	mov	sl, r0
 8017d3a:	4607      	mov	r7, r0
 8017d3c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8017d40:	dc09      	bgt.n	8017d56 <__ieee754_fmod+0x6a>
 8017d42:	dbf4      	blt.n	8017d2e <__ieee754_fmod+0x42>
 8017d44:	4282      	cmp	r2, r0
 8017d46:	d8f2      	bhi.n	8017d2e <__ieee754_fmod+0x42>
 8017d48:	d105      	bne.n	8017d56 <__ieee754_fmod+0x6a>
 8017d4a:	4b68      	ldr	r3, [pc, #416]	@ (8017eec <__ieee754_fmod+0x200>)
 8017d4c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8017d50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017d54:	e7eb      	b.n	8017d2e <__ieee754_fmod+0x42>
 8017d56:	4964      	ldr	r1, [pc, #400]	@ (8017ee8 <__ieee754_fmod+0x1fc>)
 8017d58:	420c      	tst	r4, r1
 8017d5a:	d148      	bne.n	8017dee <__ieee754_fmod+0x102>
 8017d5c:	f1b9 0f00 	cmp.w	r9, #0
 8017d60:	d13d      	bne.n	8017dde <__ieee754_fmod+0xf2>
 8017d62:	4a63      	ldr	r2, [pc, #396]	@ (8017ef0 <__ieee754_fmod+0x204>)
 8017d64:	4653      	mov	r3, sl
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	dc36      	bgt.n	8017dd8 <__ieee754_fmod+0xec>
 8017d6a:	420e      	tst	r6, r1
 8017d6c:	d14f      	bne.n	8017e0e <__ieee754_fmod+0x122>
 8017d6e:	f1b8 0f00 	cmp.w	r8, #0
 8017d72:	d144      	bne.n	8017dfe <__ieee754_fmod+0x112>
 8017d74:	4b5e      	ldr	r3, [pc, #376]	@ (8017ef0 <__ieee754_fmod+0x204>)
 8017d76:	4671      	mov	r1, lr
 8017d78:	2900      	cmp	r1, #0
 8017d7a:	dc3d      	bgt.n	8017df8 <__ieee754_fmod+0x10c>
 8017d7c:	485d      	ldr	r0, [pc, #372]	@ (8017ef4 <__ieee754_fmod+0x208>)
 8017d7e:	4282      	cmp	r2, r0
 8017d80:	db4a      	blt.n	8017e18 <__ieee754_fmod+0x12c>
 8017d82:	f3c4 0113 	ubfx	r1, r4, #0, #20
 8017d86:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8017d8a:	485a      	ldr	r0, [pc, #360]	@ (8017ef4 <__ieee754_fmod+0x208>)
 8017d8c:	4283      	cmp	r3, r0
 8017d8e:	db57      	blt.n	8017e40 <__ieee754_fmod+0x154>
 8017d90:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8017d94:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8017d98:	1ad0      	subs	r0, r2, r3
 8017d9a:	1b8a      	subs	r2, r1, r6
 8017d9c:	eba7 040c 	sub.w	r4, r7, ip
 8017da0:	2800      	cmp	r0, #0
 8017da2:	d162      	bne.n	8017e6a <__ieee754_fmod+0x17e>
 8017da4:	4567      	cmp	r7, ip
 8017da6:	bf38      	it	cc
 8017da8:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8017dac:	2a00      	cmp	r2, #0
 8017dae:	bfbc      	itt	lt
 8017db0:	463c      	movlt	r4, r7
 8017db2:	460a      	movlt	r2, r1
 8017db4:	ea52 0104 	orrs.w	r1, r2, r4
 8017db8:	d0c7      	beq.n	8017d4a <__ieee754_fmod+0x5e>
 8017dba:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8017dbe:	db69      	blt.n	8017e94 <__ieee754_fmod+0x1a8>
 8017dc0:	494c      	ldr	r1, [pc, #304]	@ (8017ef4 <__ieee754_fmod+0x208>)
 8017dc2:	428b      	cmp	r3, r1
 8017dc4:	db6c      	blt.n	8017ea0 <__ieee754_fmod+0x1b4>
 8017dc6:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 8017dca:	432a      	orrs	r2, r5
 8017dcc:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8017dd0:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 8017dd4:	4620      	mov	r0, r4
 8017dd6:	e7aa      	b.n	8017d2e <__ieee754_fmod+0x42>
 8017dd8:	3a01      	subs	r2, #1
 8017dda:	005b      	lsls	r3, r3, #1
 8017ddc:	e7c3      	b.n	8017d66 <__ieee754_fmod+0x7a>
 8017dde:	4a45      	ldr	r2, [pc, #276]	@ (8017ef4 <__ieee754_fmod+0x208>)
 8017de0:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	ddc0      	ble.n	8017d6a <__ieee754_fmod+0x7e>
 8017de8:	3a01      	subs	r2, #1
 8017dea:	005b      	lsls	r3, r3, #1
 8017dec:	e7fa      	b.n	8017de4 <__ieee754_fmod+0xf8>
 8017dee:	ea4f 5229 	mov.w	r2, r9, asr #20
 8017df2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8017df6:	e7b8      	b.n	8017d6a <__ieee754_fmod+0x7e>
 8017df8:	3b01      	subs	r3, #1
 8017dfa:	0049      	lsls	r1, r1, #1
 8017dfc:	e7bc      	b.n	8017d78 <__ieee754_fmod+0x8c>
 8017dfe:	4b3d      	ldr	r3, [pc, #244]	@ (8017ef4 <__ieee754_fmod+0x208>)
 8017e00:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8017e04:	2900      	cmp	r1, #0
 8017e06:	ddb9      	ble.n	8017d7c <__ieee754_fmod+0x90>
 8017e08:	3b01      	subs	r3, #1
 8017e0a:	0049      	lsls	r1, r1, #1
 8017e0c:	e7fa      	b.n	8017e04 <__ieee754_fmod+0x118>
 8017e0e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8017e12:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8017e16:	e7b1      	b.n	8017d7c <__ieee754_fmod+0x90>
 8017e18:	1a80      	subs	r0, r0, r2
 8017e1a:	281f      	cmp	r0, #31
 8017e1c:	dc0a      	bgt.n	8017e34 <__ieee754_fmod+0x148>
 8017e1e:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 8017e22:	fa09 f900 	lsl.w	r9, r9, r0
 8017e26:	fa2a f101 	lsr.w	r1, sl, r1
 8017e2a:	ea41 0109 	orr.w	r1, r1, r9
 8017e2e:	fa0a f700 	lsl.w	r7, sl, r0
 8017e32:	e7aa      	b.n	8017d8a <__ieee754_fmod+0x9e>
 8017e34:	4930      	ldr	r1, [pc, #192]	@ (8017ef8 <__ieee754_fmod+0x20c>)
 8017e36:	1a89      	subs	r1, r1, r2
 8017e38:	fa0a f101 	lsl.w	r1, sl, r1
 8017e3c:	2700      	movs	r7, #0
 8017e3e:	e7a4      	b.n	8017d8a <__ieee754_fmod+0x9e>
 8017e40:	1ac0      	subs	r0, r0, r3
 8017e42:	281f      	cmp	r0, #31
 8017e44:	dc0a      	bgt.n	8017e5c <__ieee754_fmod+0x170>
 8017e46:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 8017e4a:	fa08 f800 	lsl.w	r8, r8, r0
 8017e4e:	fa2e f606 	lsr.w	r6, lr, r6
 8017e52:	ea46 0608 	orr.w	r6, r6, r8
 8017e56:	fa0e fc00 	lsl.w	ip, lr, r0
 8017e5a:	e79d      	b.n	8017d98 <__ieee754_fmod+0xac>
 8017e5c:	4e26      	ldr	r6, [pc, #152]	@ (8017ef8 <__ieee754_fmod+0x20c>)
 8017e5e:	1af6      	subs	r6, r6, r3
 8017e60:	fa0e f606 	lsl.w	r6, lr, r6
 8017e64:	f04f 0c00 	mov.w	ip, #0
 8017e68:	e796      	b.n	8017d98 <__ieee754_fmod+0xac>
 8017e6a:	4567      	cmp	r7, ip
 8017e6c:	bf38      	it	cc
 8017e6e:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8017e72:	2a00      	cmp	r2, #0
 8017e74:	da05      	bge.n	8017e82 <__ieee754_fmod+0x196>
 8017e76:	0ffa      	lsrs	r2, r7, #31
 8017e78:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8017e7c:	007f      	lsls	r7, r7, #1
 8017e7e:	3801      	subs	r0, #1
 8017e80:	e78b      	b.n	8017d9a <__ieee754_fmod+0xae>
 8017e82:	ea52 0104 	orrs.w	r1, r2, r4
 8017e86:	f43f af60 	beq.w	8017d4a <__ieee754_fmod+0x5e>
 8017e8a:	0fe1      	lsrs	r1, r4, #31
 8017e8c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8017e90:	0067      	lsls	r7, r4, #1
 8017e92:	e7f4      	b.n	8017e7e <__ieee754_fmod+0x192>
 8017e94:	0fe1      	lsrs	r1, r4, #31
 8017e96:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8017e9a:	0064      	lsls	r4, r4, #1
 8017e9c:	3b01      	subs	r3, #1
 8017e9e:	e78c      	b.n	8017dba <__ieee754_fmod+0xce>
 8017ea0:	1ac9      	subs	r1, r1, r3
 8017ea2:	2914      	cmp	r1, #20
 8017ea4:	dc0a      	bgt.n	8017ebc <__ieee754_fmod+0x1d0>
 8017ea6:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 8017eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8017eae:	40cc      	lsrs	r4, r1
 8017eb0:	4323      	orrs	r3, r4
 8017eb2:	410a      	asrs	r2, r1
 8017eb4:	ea42 0105 	orr.w	r1, r2, r5
 8017eb8:	4618      	mov	r0, r3
 8017eba:	e738      	b.n	8017d2e <__ieee754_fmod+0x42>
 8017ebc:	291f      	cmp	r1, #31
 8017ebe:	dc07      	bgt.n	8017ed0 <__ieee754_fmod+0x1e4>
 8017ec0:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 8017ec4:	40cc      	lsrs	r4, r1
 8017ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8017eca:	4323      	orrs	r3, r4
 8017ecc:	462a      	mov	r2, r5
 8017ece:	e7f1      	b.n	8017eb4 <__ieee754_fmod+0x1c8>
 8017ed0:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 8017ed4:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8017ed8:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 8017edc:	33e2      	adds	r3, #226	@ 0xe2
 8017ede:	fa42 f303 	asr.w	r3, r2, r3
 8017ee2:	e7f3      	b.n	8017ecc <__ieee754_fmod+0x1e0>
 8017ee4:	7fefffff 	.word	0x7fefffff
 8017ee8:	7ff00000 	.word	0x7ff00000
 8017eec:	0801a028 	.word	0x0801a028
 8017ef0:	fffffbed 	.word	0xfffffbed
 8017ef4:	fffffc02 	.word	0xfffffc02
 8017ef8:	fffffbe2 	.word	0xfffffbe2
 8017efc:	00000000 	.word	0x00000000

08017f00 <__ieee754_rem_pio2>:
 8017f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f04:	ec57 6b10 	vmov	r6, r7, d0
 8017f08:	4bc5      	ldr	r3, [pc, #788]	@ (8018220 <__ieee754_rem_pio2+0x320>)
 8017f0a:	b08d      	sub	sp, #52	@ 0x34
 8017f0c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8017f10:	4598      	cmp	r8, r3
 8017f12:	4604      	mov	r4, r0
 8017f14:	9704      	str	r7, [sp, #16]
 8017f16:	d807      	bhi.n	8017f28 <__ieee754_rem_pio2+0x28>
 8017f18:	2200      	movs	r2, #0
 8017f1a:	2300      	movs	r3, #0
 8017f1c:	ed80 0b00 	vstr	d0, [r0]
 8017f20:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8017f24:	2500      	movs	r5, #0
 8017f26:	e028      	b.n	8017f7a <__ieee754_rem_pio2+0x7a>
 8017f28:	4bbe      	ldr	r3, [pc, #760]	@ (8018224 <__ieee754_rem_pio2+0x324>)
 8017f2a:	4598      	cmp	r8, r3
 8017f2c:	d878      	bhi.n	8018020 <__ieee754_rem_pio2+0x120>
 8017f2e:	9b04      	ldr	r3, [sp, #16]
 8017f30:	4dbd      	ldr	r5, [pc, #756]	@ (8018228 <__ieee754_rem_pio2+0x328>)
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	4630      	mov	r0, r6
 8017f36:	a3ac      	add	r3, pc, #688	@ (adr r3, 80181e8 <__ieee754_rem_pio2+0x2e8>)
 8017f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f3c:	4639      	mov	r1, r7
 8017f3e:	dd38      	ble.n	8017fb2 <__ieee754_rem_pio2+0xb2>
 8017f40:	f7e8 f9b2 	bl	80002a8 <__aeabi_dsub>
 8017f44:	45a8      	cmp	r8, r5
 8017f46:	4606      	mov	r6, r0
 8017f48:	460f      	mov	r7, r1
 8017f4a:	d01a      	beq.n	8017f82 <__ieee754_rem_pio2+0x82>
 8017f4c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80181f0 <__ieee754_rem_pio2+0x2f0>)
 8017f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f52:	f7e8 f9a9 	bl	80002a8 <__aeabi_dsub>
 8017f56:	4602      	mov	r2, r0
 8017f58:	460b      	mov	r3, r1
 8017f5a:	4680      	mov	r8, r0
 8017f5c:	4689      	mov	r9, r1
 8017f5e:	4630      	mov	r0, r6
 8017f60:	4639      	mov	r1, r7
 8017f62:	f7e8 f9a1 	bl	80002a8 <__aeabi_dsub>
 8017f66:	a3a2      	add	r3, pc, #648	@ (adr r3, 80181f0 <__ieee754_rem_pio2+0x2f0>)
 8017f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f6c:	f7e8 f99c 	bl	80002a8 <__aeabi_dsub>
 8017f70:	e9c4 8900 	strd	r8, r9, [r4]
 8017f74:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017f78:	2501      	movs	r5, #1
 8017f7a:	4628      	mov	r0, r5
 8017f7c:	b00d      	add	sp, #52	@ 0x34
 8017f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f82:	a39d      	add	r3, pc, #628	@ (adr r3, 80181f8 <__ieee754_rem_pio2+0x2f8>)
 8017f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f88:	f7e8 f98e 	bl	80002a8 <__aeabi_dsub>
 8017f8c:	a39c      	add	r3, pc, #624	@ (adr r3, 8018200 <__ieee754_rem_pio2+0x300>)
 8017f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f92:	4606      	mov	r6, r0
 8017f94:	460f      	mov	r7, r1
 8017f96:	f7e8 f987 	bl	80002a8 <__aeabi_dsub>
 8017f9a:	4602      	mov	r2, r0
 8017f9c:	460b      	mov	r3, r1
 8017f9e:	4680      	mov	r8, r0
 8017fa0:	4689      	mov	r9, r1
 8017fa2:	4630      	mov	r0, r6
 8017fa4:	4639      	mov	r1, r7
 8017fa6:	f7e8 f97f 	bl	80002a8 <__aeabi_dsub>
 8017faa:	a395      	add	r3, pc, #596	@ (adr r3, 8018200 <__ieee754_rem_pio2+0x300>)
 8017fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fb0:	e7dc      	b.n	8017f6c <__ieee754_rem_pio2+0x6c>
 8017fb2:	f7e8 f97b 	bl	80002ac <__adddf3>
 8017fb6:	45a8      	cmp	r8, r5
 8017fb8:	4606      	mov	r6, r0
 8017fba:	460f      	mov	r7, r1
 8017fbc:	d018      	beq.n	8017ff0 <__ieee754_rem_pio2+0xf0>
 8017fbe:	a38c      	add	r3, pc, #560	@ (adr r3, 80181f0 <__ieee754_rem_pio2+0x2f0>)
 8017fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fc4:	f7e8 f972 	bl	80002ac <__adddf3>
 8017fc8:	4602      	mov	r2, r0
 8017fca:	460b      	mov	r3, r1
 8017fcc:	4680      	mov	r8, r0
 8017fce:	4689      	mov	r9, r1
 8017fd0:	4630      	mov	r0, r6
 8017fd2:	4639      	mov	r1, r7
 8017fd4:	f7e8 f968 	bl	80002a8 <__aeabi_dsub>
 8017fd8:	a385      	add	r3, pc, #532	@ (adr r3, 80181f0 <__ieee754_rem_pio2+0x2f0>)
 8017fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fde:	f7e8 f965 	bl	80002ac <__adddf3>
 8017fe2:	f04f 35ff 	mov.w	r5, #4294967295
 8017fe6:	e9c4 8900 	strd	r8, r9, [r4]
 8017fea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017fee:	e7c4      	b.n	8017f7a <__ieee754_rem_pio2+0x7a>
 8017ff0:	a381      	add	r3, pc, #516	@ (adr r3, 80181f8 <__ieee754_rem_pio2+0x2f8>)
 8017ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ff6:	f7e8 f959 	bl	80002ac <__adddf3>
 8017ffa:	a381      	add	r3, pc, #516	@ (adr r3, 8018200 <__ieee754_rem_pio2+0x300>)
 8017ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018000:	4606      	mov	r6, r0
 8018002:	460f      	mov	r7, r1
 8018004:	f7e8 f952 	bl	80002ac <__adddf3>
 8018008:	4602      	mov	r2, r0
 801800a:	460b      	mov	r3, r1
 801800c:	4680      	mov	r8, r0
 801800e:	4689      	mov	r9, r1
 8018010:	4630      	mov	r0, r6
 8018012:	4639      	mov	r1, r7
 8018014:	f7e8 f948 	bl	80002a8 <__aeabi_dsub>
 8018018:	a379      	add	r3, pc, #484	@ (adr r3, 8018200 <__ieee754_rem_pio2+0x300>)
 801801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801801e:	e7de      	b.n	8017fde <__ieee754_rem_pio2+0xde>
 8018020:	4b82      	ldr	r3, [pc, #520]	@ (801822c <__ieee754_rem_pio2+0x32c>)
 8018022:	4598      	cmp	r8, r3
 8018024:	f200 80d1 	bhi.w	80181ca <__ieee754_rem_pio2+0x2ca>
 8018028:	f000 fafe 	bl	8018628 <fabs>
 801802c:	ec57 6b10 	vmov	r6, r7, d0
 8018030:	a375      	add	r3, pc, #468	@ (adr r3, 8018208 <__ieee754_rem_pio2+0x308>)
 8018032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018036:	4630      	mov	r0, r6
 8018038:	4639      	mov	r1, r7
 801803a:	f7e8 faed 	bl	8000618 <__aeabi_dmul>
 801803e:	4b7c      	ldr	r3, [pc, #496]	@ (8018230 <__ieee754_rem_pio2+0x330>)
 8018040:	2200      	movs	r2, #0
 8018042:	f7e8 f933 	bl	80002ac <__adddf3>
 8018046:	f7e8 fd97 	bl	8000b78 <__aeabi_d2iz>
 801804a:	4605      	mov	r5, r0
 801804c:	f7e8 fa7a 	bl	8000544 <__aeabi_i2d>
 8018050:	4602      	mov	r2, r0
 8018052:	460b      	mov	r3, r1
 8018054:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018058:	a363      	add	r3, pc, #396	@ (adr r3, 80181e8 <__ieee754_rem_pio2+0x2e8>)
 801805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801805e:	f7e8 fadb 	bl	8000618 <__aeabi_dmul>
 8018062:	4602      	mov	r2, r0
 8018064:	460b      	mov	r3, r1
 8018066:	4630      	mov	r0, r6
 8018068:	4639      	mov	r1, r7
 801806a:	f7e8 f91d 	bl	80002a8 <__aeabi_dsub>
 801806e:	a360      	add	r3, pc, #384	@ (adr r3, 80181f0 <__ieee754_rem_pio2+0x2f0>)
 8018070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018074:	4682      	mov	sl, r0
 8018076:	468b      	mov	fp, r1
 8018078:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801807c:	f7e8 facc 	bl	8000618 <__aeabi_dmul>
 8018080:	2d1f      	cmp	r5, #31
 8018082:	4606      	mov	r6, r0
 8018084:	460f      	mov	r7, r1
 8018086:	dc0c      	bgt.n	80180a2 <__ieee754_rem_pio2+0x1a2>
 8018088:	4b6a      	ldr	r3, [pc, #424]	@ (8018234 <__ieee754_rem_pio2+0x334>)
 801808a:	1e6a      	subs	r2, r5, #1
 801808c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018090:	4543      	cmp	r3, r8
 8018092:	d006      	beq.n	80180a2 <__ieee754_rem_pio2+0x1a2>
 8018094:	4632      	mov	r2, r6
 8018096:	463b      	mov	r3, r7
 8018098:	4650      	mov	r0, sl
 801809a:	4659      	mov	r1, fp
 801809c:	f7e8 f904 	bl	80002a8 <__aeabi_dsub>
 80180a0:	e00e      	b.n	80180c0 <__ieee754_rem_pio2+0x1c0>
 80180a2:	463b      	mov	r3, r7
 80180a4:	4632      	mov	r2, r6
 80180a6:	4650      	mov	r0, sl
 80180a8:	4659      	mov	r1, fp
 80180aa:	f7e8 f8fd 	bl	80002a8 <__aeabi_dsub>
 80180ae:	ea4f 5328 	mov.w	r3, r8, asr #20
 80180b2:	9305      	str	r3, [sp, #20]
 80180b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80180b8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80180bc:	2b10      	cmp	r3, #16
 80180be:	dc02      	bgt.n	80180c6 <__ieee754_rem_pio2+0x1c6>
 80180c0:	e9c4 0100 	strd	r0, r1, [r4]
 80180c4:	e039      	b.n	801813a <__ieee754_rem_pio2+0x23a>
 80180c6:	a34c      	add	r3, pc, #304	@ (adr r3, 80181f8 <__ieee754_rem_pio2+0x2f8>)
 80180c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80180d0:	f7e8 faa2 	bl	8000618 <__aeabi_dmul>
 80180d4:	4606      	mov	r6, r0
 80180d6:	460f      	mov	r7, r1
 80180d8:	4602      	mov	r2, r0
 80180da:	460b      	mov	r3, r1
 80180dc:	4650      	mov	r0, sl
 80180de:	4659      	mov	r1, fp
 80180e0:	f7e8 f8e2 	bl	80002a8 <__aeabi_dsub>
 80180e4:	4602      	mov	r2, r0
 80180e6:	460b      	mov	r3, r1
 80180e8:	4680      	mov	r8, r0
 80180ea:	4689      	mov	r9, r1
 80180ec:	4650      	mov	r0, sl
 80180ee:	4659      	mov	r1, fp
 80180f0:	f7e8 f8da 	bl	80002a8 <__aeabi_dsub>
 80180f4:	4632      	mov	r2, r6
 80180f6:	463b      	mov	r3, r7
 80180f8:	f7e8 f8d6 	bl	80002a8 <__aeabi_dsub>
 80180fc:	a340      	add	r3, pc, #256	@ (adr r3, 8018200 <__ieee754_rem_pio2+0x300>)
 80180fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018102:	4606      	mov	r6, r0
 8018104:	460f      	mov	r7, r1
 8018106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801810a:	f7e8 fa85 	bl	8000618 <__aeabi_dmul>
 801810e:	4632      	mov	r2, r6
 8018110:	463b      	mov	r3, r7
 8018112:	f7e8 f8c9 	bl	80002a8 <__aeabi_dsub>
 8018116:	4602      	mov	r2, r0
 8018118:	460b      	mov	r3, r1
 801811a:	4606      	mov	r6, r0
 801811c:	460f      	mov	r7, r1
 801811e:	4640      	mov	r0, r8
 8018120:	4649      	mov	r1, r9
 8018122:	f7e8 f8c1 	bl	80002a8 <__aeabi_dsub>
 8018126:	9a05      	ldr	r2, [sp, #20]
 8018128:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801812c:	1ad3      	subs	r3, r2, r3
 801812e:	2b31      	cmp	r3, #49	@ 0x31
 8018130:	dc20      	bgt.n	8018174 <__ieee754_rem_pio2+0x274>
 8018132:	e9c4 0100 	strd	r0, r1, [r4]
 8018136:	46c2      	mov	sl, r8
 8018138:	46cb      	mov	fp, r9
 801813a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801813e:	4650      	mov	r0, sl
 8018140:	4642      	mov	r2, r8
 8018142:	464b      	mov	r3, r9
 8018144:	4659      	mov	r1, fp
 8018146:	f7e8 f8af 	bl	80002a8 <__aeabi_dsub>
 801814a:	463b      	mov	r3, r7
 801814c:	4632      	mov	r2, r6
 801814e:	f7e8 f8ab 	bl	80002a8 <__aeabi_dsub>
 8018152:	9b04      	ldr	r3, [sp, #16]
 8018154:	2b00      	cmp	r3, #0
 8018156:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801815a:	f6bf af0e 	bge.w	8017f7a <__ieee754_rem_pio2+0x7a>
 801815e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8018162:	6063      	str	r3, [r4, #4]
 8018164:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8018168:	f8c4 8000 	str.w	r8, [r4]
 801816c:	60a0      	str	r0, [r4, #8]
 801816e:	60e3      	str	r3, [r4, #12]
 8018170:	426d      	negs	r5, r5
 8018172:	e702      	b.n	8017f7a <__ieee754_rem_pio2+0x7a>
 8018174:	a326      	add	r3, pc, #152	@ (adr r3, 8018210 <__ieee754_rem_pio2+0x310>)
 8018176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801817a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801817e:	f7e8 fa4b 	bl	8000618 <__aeabi_dmul>
 8018182:	4606      	mov	r6, r0
 8018184:	460f      	mov	r7, r1
 8018186:	4602      	mov	r2, r0
 8018188:	460b      	mov	r3, r1
 801818a:	4640      	mov	r0, r8
 801818c:	4649      	mov	r1, r9
 801818e:	f7e8 f88b 	bl	80002a8 <__aeabi_dsub>
 8018192:	4602      	mov	r2, r0
 8018194:	460b      	mov	r3, r1
 8018196:	4682      	mov	sl, r0
 8018198:	468b      	mov	fp, r1
 801819a:	4640      	mov	r0, r8
 801819c:	4649      	mov	r1, r9
 801819e:	f7e8 f883 	bl	80002a8 <__aeabi_dsub>
 80181a2:	4632      	mov	r2, r6
 80181a4:	463b      	mov	r3, r7
 80181a6:	f7e8 f87f 	bl	80002a8 <__aeabi_dsub>
 80181aa:	a31b      	add	r3, pc, #108	@ (adr r3, 8018218 <__ieee754_rem_pio2+0x318>)
 80181ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181b0:	4606      	mov	r6, r0
 80181b2:	460f      	mov	r7, r1
 80181b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80181b8:	f7e8 fa2e 	bl	8000618 <__aeabi_dmul>
 80181bc:	4632      	mov	r2, r6
 80181be:	463b      	mov	r3, r7
 80181c0:	f7e8 f872 	bl	80002a8 <__aeabi_dsub>
 80181c4:	4606      	mov	r6, r0
 80181c6:	460f      	mov	r7, r1
 80181c8:	e764      	b.n	8018094 <__ieee754_rem_pio2+0x194>
 80181ca:	4b1b      	ldr	r3, [pc, #108]	@ (8018238 <__ieee754_rem_pio2+0x338>)
 80181cc:	4598      	cmp	r8, r3
 80181ce:	d935      	bls.n	801823c <__ieee754_rem_pio2+0x33c>
 80181d0:	4632      	mov	r2, r6
 80181d2:	463b      	mov	r3, r7
 80181d4:	4630      	mov	r0, r6
 80181d6:	4639      	mov	r1, r7
 80181d8:	f7e8 f866 	bl	80002a8 <__aeabi_dsub>
 80181dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80181e0:	e9c4 0100 	strd	r0, r1, [r4]
 80181e4:	e69e      	b.n	8017f24 <__ieee754_rem_pio2+0x24>
 80181e6:	bf00      	nop
 80181e8:	54400000 	.word	0x54400000
 80181ec:	3ff921fb 	.word	0x3ff921fb
 80181f0:	1a626331 	.word	0x1a626331
 80181f4:	3dd0b461 	.word	0x3dd0b461
 80181f8:	1a600000 	.word	0x1a600000
 80181fc:	3dd0b461 	.word	0x3dd0b461
 8018200:	2e037073 	.word	0x2e037073
 8018204:	3ba3198a 	.word	0x3ba3198a
 8018208:	6dc9c883 	.word	0x6dc9c883
 801820c:	3fe45f30 	.word	0x3fe45f30
 8018210:	2e000000 	.word	0x2e000000
 8018214:	3ba3198a 	.word	0x3ba3198a
 8018218:	252049c1 	.word	0x252049c1
 801821c:	397b839a 	.word	0x397b839a
 8018220:	3fe921fb 	.word	0x3fe921fb
 8018224:	4002d97b 	.word	0x4002d97b
 8018228:	3ff921fb 	.word	0x3ff921fb
 801822c:	413921fb 	.word	0x413921fb
 8018230:	3fe00000 	.word	0x3fe00000
 8018234:	0801a038 	.word	0x0801a038
 8018238:	7fefffff 	.word	0x7fefffff
 801823c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8018240:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8018244:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8018248:	4630      	mov	r0, r6
 801824a:	460f      	mov	r7, r1
 801824c:	f7e8 fc94 	bl	8000b78 <__aeabi_d2iz>
 8018250:	f7e8 f978 	bl	8000544 <__aeabi_i2d>
 8018254:	4602      	mov	r2, r0
 8018256:	460b      	mov	r3, r1
 8018258:	4630      	mov	r0, r6
 801825a:	4639      	mov	r1, r7
 801825c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018260:	f7e8 f822 	bl	80002a8 <__aeabi_dsub>
 8018264:	4b22      	ldr	r3, [pc, #136]	@ (80182f0 <__ieee754_rem_pio2+0x3f0>)
 8018266:	2200      	movs	r2, #0
 8018268:	f7e8 f9d6 	bl	8000618 <__aeabi_dmul>
 801826c:	460f      	mov	r7, r1
 801826e:	4606      	mov	r6, r0
 8018270:	f7e8 fc82 	bl	8000b78 <__aeabi_d2iz>
 8018274:	f7e8 f966 	bl	8000544 <__aeabi_i2d>
 8018278:	4602      	mov	r2, r0
 801827a:	460b      	mov	r3, r1
 801827c:	4630      	mov	r0, r6
 801827e:	4639      	mov	r1, r7
 8018280:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018284:	f7e8 f810 	bl	80002a8 <__aeabi_dsub>
 8018288:	4b19      	ldr	r3, [pc, #100]	@ (80182f0 <__ieee754_rem_pio2+0x3f0>)
 801828a:	2200      	movs	r2, #0
 801828c:	f7e8 f9c4 	bl	8000618 <__aeabi_dmul>
 8018290:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8018294:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8018298:	f04f 0803 	mov.w	r8, #3
 801829c:	2600      	movs	r6, #0
 801829e:	2700      	movs	r7, #0
 80182a0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80182a4:	4632      	mov	r2, r6
 80182a6:	463b      	mov	r3, r7
 80182a8:	46c2      	mov	sl, r8
 80182aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80182ae:	f7e8 fc1b 	bl	8000ae8 <__aeabi_dcmpeq>
 80182b2:	2800      	cmp	r0, #0
 80182b4:	d1f4      	bne.n	80182a0 <__ieee754_rem_pio2+0x3a0>
 80182b6:	4b0f      	ldr	r3, [pc, #60]	@ (80182f4 <__ieee754_rem_pio2+0x3f4>)
 80182b8:	9301      	str	r3, [sp, #4]
 80182ba:	2302      	movs	r3, #2
 80182bc:	9300      	str	r3, [sp, #0]
 80182be:	462a      	mov	r2, r5
 80182c0:	4653      	mov	r3, sl
 80182c2:	4621      	mov	r1, r4
 80182c4:	a806      	add	r0, sp, #24
 80182c6:	f000 f9b7 	bl	8018638 <__kernel_rem_pio2>
 80182ca:	9b04      	ldr	r3, [sp, #16]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	4605      	mov	r5, r0
 80182d0:	f6bf ae53 	bge.w	8017f7a <__ieee754_rem_pio2+0x7a>
 80182d4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80182d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80182dc:	e9c4 2300 	strd	r2, r3, [r4]
 80182e0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80182e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80182e8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80182ec:	e740      	b.n	8018170 <__ieee754_rem_pio2+0x270>
 80182ee:	bf00      	nop
 80182f0:	41700000 	.word	0x41700000
 80182f4:	0801a0b8 	.word	0x0801a0b8

080182f8 <atan>:
 80182f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182fc:	ec55 4b10 	vmov	r4, r5, d0
 8018300:	4bbf      	ldr	r3, [pc, #764]	@ (8018600 <atan+0x308>)
 8018302:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8018306:	429e      	cmp	r6, r3
 8018308:	46ab      	mov	fp, r5
 801830a:	d918      	bls.n	801833e <atan+0x46>
 801830c:	4bbd      	ldr	r3, [pc, #756]	@ (8018604 <atan+0x30c>)
 801830e:	429e      	cmp	r6, r3
 8018310:	d801      	bhi.n	8018316 <atan+0x1e>
 8018312:	d109      	bne.n	8018328 <atan+0x30>
 8018314:	b144      	cbz	r4, 8018328 <atan+0x30>
 8018316:	4622      	mov	r2, r4
 8018318:	462b      	mov	r3, r5
 801831a:	4620      	mov	r0, r4
 801831c:	4629      	mov	r1, r5
 801831e:	f7e7 ffc5 	bl	80002ac <__adddf3>
 8018322:	4604      	mov	r4, r0
 8018324:	460d      	mov	r5, r1
 8018326:	e006      	b.n	8018336 <atan+0x3e>
 8018328:	f1bb 0f00 	cmp.w	fp, #0
 801832c:	f340 812b 	ble.w	8018586 <atan+0x28e>
 8018330:	a597      	add	r5, pc, #604	@ (adr r5, 8018590 <atan+0x298>)
 8018332:	e9d5 4500 	ldrd	r4, r5, [r5]
 8018336:	ec45 4b10 	vmov	d0, r4, r5
 801833a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801833e:	4bb2      	ldr	r3, [pc, #712]	@ (8018608 <atan+0x310>)
 8018340:	429e      	cmp	r6, r3
 8018342:	d813      	bhi.n	801836c <atan+0x74>
 8018344:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8018348:	429e      	cmp	r6, r3
 801834a:	d80c      	bhi.n	8018366 <atan+0x6e>
 801834c:	a392      	add	r3, pc, #584	@ (adr r3, 8018598 <atan+0x2a0>)
 801834e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018352:	4620      	mov	r0, r4
 8018354:	4629      	mov	r1, r5
 8018356:	f7e7 ffa9 	bl	80002ac <__adddf3>
 801835a:	4bac      	ldr	r3, [pc, #688]	@ (801860c <atan+0x314>)
 801835c:	2200      	movs	r2, #0
 801835e:	f7e8 fbeb 	bl	8000b38 <__aeabi_dcmpgt>
 8018362:	2800      	cmp	r0, #0
 8018364:	d1e7      	bne.n	8018336 <atan+0x3e>
 8018366:	f04f 3aff 	mov.w	sl, #4294967295
 801836a:	e029      	b.n	80183c0 <atan+0xc8>
 801836c:	f000 f95c 	bl	8018628 <fabs>
 8018370:	4ba7      	ldr	r3, [pc, #668]	@ (8018610 <atan+0x318>)
 8018372:	429e      	cmp	r6, r3
 8018374:	ec55 4b10 	vmov	r4, r5, d0
 8018378:	f200 80bc 	bhi.w	80184f4 <atan+0x1fc>
 801837c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8018380:	429e      	cmp	r6, r3
 8018382:	f200 809e 	bhi.w	80184c2 <atan+0x1ca>
 8018386:	4622      	mov	r2, r4
 8018388:	462b      	mov	r3, r5
 801838a:	4620      	mov	r0, r4
 801838c:	4629      	mov	r1, r5
 801838e:	f7e7 ff8d 	bl	80002ac <__adddf3>
 8018392:	4b9e      	ldr	r3, [pc, #632]	@ (801860c <atan+0x314>)
 8018394:	2200      	movs	r2, #0
 8018396:	f7e7 ff87 	bl	80002a8 <__aeabi_dsub>
 801839a:	2200      	movs	r2, #0
 801839c:	4606      	mov	r6, r0
 801839e:	460f      	mov	r7, r1
 80183a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80183a4:	4620      	mov	r0, r4
 80183a6:	4629      	mov	r1, r5
 80183a8:	f7e7 ff80 	bl	80002ac <__adddf3>
 80183ac:	4602      	mov	r2, r0
 80183ae:	460b      	mov	r3, r1
 80183b0:	4630      	mov	r0, r6
 80183b2:	4639      	mov	r1, r7
 80183b4:	f7e8 fa5a 	bl	800086c <__aeabi_ddiv>
 80183b8:	f04f 0a00 	mov.w	sl, #0
 80183bc:	4604      	mov	r4, r0
 80183be:	460d      	mov	r5, r1
 80183c0:	4622      	mov	r2, r4
 80183c2:	462b      	mov	r3, r5
 80183c4:	4620      	mov	r0, r4
 80183c6:	4629      	mov	r1, r5
 80183c8:	f7e8 f926 	bl	8000618 <__aeabi_dmul>
 80183cc:	4602      	mov	r2, r0
 80183ce:	460b      	mov	r3, r1
 80183d0:	4680      	mov	r8, r0
 80183d2:	4689      	mov	r9, r1
 80183d4:	f7e8 f920 	bl	8000618 <__aeabi_dmul>
 80183d8:	a371      	add	r3, pc, #452	@ (adr r3, 80185a0 <atan+0x2a8>)
 80183da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183de:	4606      	mov	r6, r0
 80183e0:	460f      	mov	r7, r1
 80183e2:	f7e8 f919 	bl	8000618 <__aeabi_dmul>
 80183e6:	a370      	add	r3, pc, #448	@ (adr r3, 80185a8 <atan+0x2b0>)
 80183e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183ec:	f7e7 ff5e 	bl	80002ac <__adddf3>
 80183f0:	4632      	mov	r2, r6
 80183f2:	463b      	mov	r3, r7
 80183f4:	f7e8 f910 	bl	8000618 <__aeabi_dmul>
 80183f8:	a36d      	add	r3, pc, #436	@ (adr r3, 80185b0 <atan+0x2b8>)
 80183fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183fe:	f7e7 ff55 	bl	80002ac <__adddf3>
 8018402:	4632      	mov	r2, r6
 8018404:	463b      	mov	r3, r7
 8018406:	f7e8 f907 	bl	8000618 <__aeabi_dmul>
 801840a:	a36b      	add	r3, pc, #428	@ (adr r3, 80185b8 <atan+0x2c0>)
 801840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018410:	f7e7 ff4c 	bl	80002ac <__adddf3>
 8018414:	4632      	mov	r2, r6
 8018416:	463b      	mov	r3, r7
 8018418:	f7e8 f8fe 	bl	8000618 <__aeabi_dmul>
 801841c:	a368      	add	r3, pc, #416	@ (adr r3, 80185c0 <atan+0x2c8>)
 801841e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018422:	f7e7 ff43 	bl	80002ac <__adddf3>
 8018426:	4632      	mov	r2, r6
 8018428:	463b      	mov	r3, r7
 801842a:	f7e8 f8f5 	bl	8000618 <__aeabi_dmul>
 801842e:	a366      	add	r3, pc, #408	@ (adr r3, 80185c8 <atan+0x2d0>)
 8018430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018434:	f7e7 ff3a 	bl	80002ac <__adddf3>
 8018438:	4642      	mov	r2, r8
 801843a:	464b      	mov	r3, r9
 801843c:	f7e8 f8ec 	bl	8000618 <__aeabi_dmul>
 8018440:	a363      	add	r3, pc, #396	@ (adr r3, 80185d0 <atan+0x2d8>)
 8018442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018446:	4680      	mov	r8, r0
 8018448:	4689      	mov	r9, r1
 801844a:	4630      	mov	r0, r6
 801844c:	4639      	mov	r1, r7
 801844e:	f7e8 f8e3 	bl	8000618 <__aeabi_dmul>
 8018452:	a361      	add	r3, pc, #388	@ (adr r3, 80185d8 <atan+0x2e0>)
 8018454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018458:	f7e7 ff26 	bl	80002a8 <__aeabi_dsub>
 801845c:	4632      	mov	r2, r6
 801845e:	463b      	mov	r3, r7
 8018460:	f7e8 f8da 	bl	8000618 <__aeabi_dmul>
 8018464:	a35e      	add	r3, pc, #376	@ (adr r3, 80185e0 <atan+0x2e8>)
 8018466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801846a:	f7e7 ff1d 	bl	80002a8 <__aeabi_dsub>
 801846e:	4632      	mov	r2, r6
 8018470:	463b      	mov	r3, r7
 8018472:	f7e8 f8d1 	bl	8000618 <__aeabi_dmul>
 8018476:	a35c      	add	r3, pc, #368	@ (adr r3, 80185e8 <atan+0x2f0>)
 8018478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801847c:	f7e7 ff14 	bl	80002a8 <__aeabi_dsub>
 8018480:	4632      	mov	r2, r6
 8018482:	463b      	mov	r3, r7
 8018484:	f7e8 f8c8 	bl	8000618 <__aeabi_dmul>
 8018488:	a359      	add	r3, pc, #356	@ (adr r3, 80185f0 <atan+0x2f8>)
 801848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801848e:	f7e7 ff0b 	bl	80002a8 <__aeabi_dsub>
 8018492:	4632      	mov	r2, r6
 8018494:	463b      	mov	r3, r7
 8018496:	f7e8 f8bf 	bl	8000618 <__aeabi_dmul>
 801849a:	4602      	mov	r2, r0
 801849c:	460b      	mov	r3, r1
 801849e:	4640      	mov	r0, r8
 80184a0:	4649      	mov	r1, r9
 80184a2:	f7e7 ff03 	bl	80002ac <__adddf3>
 80184a6:	4622      	mov	r2, r4
 80184a8:	462b      	mov	r3, r5
 80184aa:	f7e8 f8b5 	bl	8000618 <__aeabi_dmul>
 80184ae:	f1ba 3fff 	cmp.w	sl, #4294967295
 80184b2:	4602      	mov	r2, r0
 80184b4:	460b      	mov	r3, r1
 80184b6:	d148      	bne.n	801854a <atan+0x252>
 80184b8:	4620      	mov	r0, r4
 80184ba:	4629      	mov	r1, r5
 80184bc:	f7e7 fef4 	bl	80002a8 <__aeabi_dsub>
 80184c0:	e72f      	b.n	8018322 <atan+0x2a>
 80184c2:	4b52      	ldr	r3, [pc, #328]	@ (801860c <atan+0x314>)
 80184c4:	2200      	movs	r2, #0
 80184c6:	4620      	mov	r0, r4
 80184c8:	4629      	mov	r1, r5
 80184ca:	f7e7 feed 	bl	80002a8 <__aeabi_dsub>
 80184ce:	4b4f      	ldr	r3, [pc, #316]	@ (801860c <atan+0x314>)
 80184d0:	4606      	mov	r6, r0
 80184d2:	460f      	mov	r7, r1
 80184d4:	2200      	movs	r2, #0
 80184d6:	4620      	mov	r0, r4
 80184d8:	4629      	mov	r1, r5
 80184da:	f7e7 fee7 	bl	80002ac <__adddf3>
 80184de:	4602      	mov	r2, r0
 80184e0:	460b      	mov	r3, r1
 80184e2:	4630      	mov	r0, r6
 80184e4:	4639      	mov	r1, r7
 80184e6:	f7e8 f9c1 	bl	800086c <__aeabi_ddiv>
 80184ea:	f04f 0a01 	mov.w	sl, #1
 80184ee:	4604      	mov	r4, r0
 80184f0:	460d      	mov	r5, r1
 80184f2:	e765      	b.n	80183c0 <atan+0xc8>
 80184f4:	4b47      	ldr	r3, [pc, #284]	@ (8018614 <atan+0x31c>)
 80184f6:	429e      	cmp	r6, r3
 80184f8:	d21c      	bcs.n	8018534 <atan+0x23c>
 80184fa:	4b47      	ldr	r3, [pc, #284]	@ (8018618 <atan+0x320>)
 80184fc:	2200      	movs	r2, #0
 80184fe:	4620      	mov	r0, r4
 8018500:	4629      	mov	r1, r5
 8018502:	f7e7 fed1 	bl	80002a8 <__aeabi_dsub>
 8018506:	4b44      	ldr	r3, [pc, #272]	@ (8018618 <atan+0x320>)
 8018508:	4606      	mov	r6, r0
 801850a:	460f      	mov	r7, r1
 801850c:	2200      	movs	r2, #0
 801850e:	4620      	mov	r0, r4
 8018510:	4629      	mov	r1, r5
 8018512:	f7e8 f881 	bl	8000618 <__aeabi_dmul>
 8018516:	4b3d      	ldr	r3, [pc, #244]	@ (801860c <atan+0x314>)
 8018518:	2200      	movs	r2, #0
 801851a:	f7e7 fec7 	bl	80002ac <__adddf3>
 801851e:	4602      	mov	r2, r0
 8018520:	460b      	mov	r3, r1
 8018522:	4630      	mov	r0, r6
 8018524:	4639      	mov	r1, r7
 8018526:	f7e8 f9a1 	bl	800086c <__aeabi_ddiv>
 801852a:	f04f 0a02 	mov.w	sl, #2
 801852e:	4604      	mov	r4, r0
 8018530:	460d      	mov	r5, r1
 8018532:	e745      	b.n	80183c0 <atan+0xc8>
 8018534:	4622      	mov	r2, r4
 8018536:	462b      	mov	r3, r5
 8018538:	4938      	ldr	r1, [pc, #224]	@ (801861c <atan+0x324>)
 801853a:	2000      	movs	r0, #0
 801853c:	f7e8 f996 	bl	800086c <__aeabi_ddiv>
 8018540:	f04f 0a03 	mov.w	sl, #3
 8018544:	4604      	mov	r4, r0
 8018546:	460d      	mov	r5, r1
 8018548:	e73a      	b.n	80183c0 <atan+0xc8>
 801854a:	4b35      	ldr	r3, [pc, #212]	@ (8018620 <atan+0x328>)
 801854c:	4e35      	ldr	r6, [pc, #212]	@ (8018624 <atan+0x32c>)
 801854e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018556:	f7e7 fea7 	bl	80002a8 <__aeabi_dsub>
 801855a:	4622      	mov	r2, r4
 801855c:	462b      	mov	r3, r5
 801855e:	f7e7 fea3 	bl	80002a8 <__aeabi_dsub>
 8018562:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8018566:	4602      	mov	r2, r0
 8018568:	460b      	mov	r3, r1
 801856a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801856e:	f7e7 fe9b 	bl	80002a8 <__aeabi_dsub>
 8018572:	f1bb 0f00 	cmp.w	fp, #0
 8018576:	4604      	mov	r4, r0
 8018578:	460d      	mov	r5, r1
 801857a:	f6bf aedc 	bge.w	8018336 <atan+0x3e>
 801857e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8018582:	461d      	mov	r5, r3
 8018584:	e6d7      	b.n	8018336 <atan+0x3e>
 8018586:	a51c      	add	r5, pc, #112	@ (adr r5, 80185f8 <atan+0x300>)
 8018588:	e9d5 4500 	ldrd	r4, r5, [r5]
 801858c:	e6d3      	b.n	8018336 <atan+0x3e>
 801858e:	bf00      	nop
 8018590:	54442d18 	.word	0x54442d18
 8018594:	3ff921fb 	.word	0x3ff921fb
 8018598:	8800759c 	.word	0x8800759c
 801859c:	7e37e43c 	.word	0x7e37e43c
 80185a0:	e322da11 	.word	0xe322da11
 80185a4:	3f90ad3a 	.word	0x3f90ad3a
 80185a8:	24760deb 	.word	0x24760deb
 80185ac:	3fa97b4b 	.word	0x3fa97b4b
 80185b0:	a0d03d51 	.word	0xa0d03d51
 80185b4:	3fb10d66 	.word	0x3fb10d66
 80185b8:	c54c206e 	.word	0xc54c206e
 80185bc:	3fb745cd 	.word	0x3fb745cd
 80185c0:	920083ff 	.word	0x920083ff
 80185c4:	3fc24924 	.word	0x3fc24924
 80185c8:	5555550d 	.word	0x5555550d
 80185cc:	3fd55555 	.word	0x3fd55555
 80185d0:	2c6a6c2f 	.word	0x2c6a6c2f
 80185d4:	bfa2b444 	.word	0xbfa2b444
 80185d8:	52defd9a 	.word	0x52defd9a
 80185dc:	3fadde2d 	.word	0x3fadde2d
 80185e0:	af749a6d 	.word	0xaf749a6d
 80185e4:	3fb3b0f2 	.word	0x3fb3b0f2
 80185e8:	fe231671 	.word	0xfe231671
 80185ec:	3fbc71c6 	.word	0x3fbc71c6
 80185f0:	9998ebc4 	.word	0x9998ebc4
 80185f4:	3fc99999 	.word	0x3fc99999
 80185f8:	54442d18 	.word	0x54442d18
 80185fc:	bff921fb 	.word	0xbff921fb
 8018600:	440fffff 	.word	0x440fffff
 8018604:	7ff00000 	.word	0x7ff00000
 8018608:	3fdbffff 	.word	0x3fdbffff
 801860c:	3ff00000 	.word	0x3ff00000
 8018610:	3ff2ffff 	.word	0x3ff2ffff
 8018614:	40038000 	.word	0x40038000
 8018618:	3ff80000 	.word	0x3ff80000
 801861c:	bff00000 	.word	0xbff00000
 8018620:	0801a1c0 	.word	0x0801a1c0
 8018624:	0801a1e0 	.word	0x0801a1e0

08018628 <fabs>:
 8018628:	ec51 0b10 	vmov	r0, r1, d0
 801862c:	4602      	mov	r2, r0
 801862e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8018632:	ec43 2b10 	vmov	d0, r2, r3
 8018636:	4770      	bx	lr

08018638 <__kernel_rem_pio2>:
 8018638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801863c:	ed2d 8b02 	vpush	{d8}
 8018640:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8018644:	f112 0f14 	cmn.w	r2, #20
 8018648:	9306      	str	r3, [sp, #24]
 801864a:	9104      	str	r1, [sp, #16]
 801864c:	4bc2      	ldr	r3, [pc, #776]	@ (8018958 <__kernel_rem_pio2+0x320>)
 801864e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8018650:	9008      	str	r0, [sp, #32]
 8018652:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018656:	9300      	str	r3, [sp, #0]
 8018658:	9b06      	ldr	r3, [sp, #24]
 801865a:	f103 33ff 	add.w	r3, r3, #4294967295
 801865e:	bfa8      	it	ge
 8018660:	1ed4      	subge	r4, r2, #3
 8018662:	9305      	str	r3, [sp, #20]
 8018664:	bfb2      	itee	lt
 8018666:	2400      	movlt	r4, #0
 8018668:	2318      	movge	r3, #24
 801866a:	fb94 f4f3 	sdivge	r4, r4, r3
 801866e:	f06f 0317 	mvn.w	r3, #23
 8018672:	fb04 3303 	mla	r3, r4, r3, r3
 8018676:	eb03 0b02 	add.w	fp, r3, r2
 801867a:	9b00      	ldr	r3, [sp, #0]
 801867c:	9a05      	ldr	r2, [sp, #20]
 801867e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8018948 <__kernel_rem_pio2+0x310>
 8018682:	eb03 0802 	add.w	r8, r3, r2
 8018686:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8018688:	1aa7      	subs	r7, r4, r2
 801868a:	ae20      	add	r6, sp, #128	@ 0x80
 801868c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8018690:	2500      	movs	r5, #0
 8018692:	4545      	cmp	r5, r8
 8018694:	dd12      	ble.n	80186bc <__kernel_rem_pio2+0x84>
 8018696:	9b06      	ldr	r3, [sp, #24]
 8018698:	aa20      	add	r2, sp, #128	@ 0x80
 801869a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801869e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80186a2:	2700      	movs	r7, #0
 80186a4:	9b00      	ldr	r3, [sp, #0]
 80186a6:	429f      	cmp	r7, r3
 80186a8:	dc2e      	bgt.n	8018708 <__kernel_rem_pio2+0xd0>
 80186aa:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8018948 <__kernel_rem_pio2+0x310>
 80186ae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80186b2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80186b6:	46a8      	mov	r8, r5
 80186b8:	2600      	movs	r6, #0
 80186ba:	e01b      	b.n	80186f4 <__kernel_rem_pio2+0xbc>
 80186bc:	42ef      	cmn	r7, r5
 80186be:	d407      	bmi.n	80186d0 <__kernel_rem_pio2+0x98>
 80186c0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80186c4:	f7e7 ff3e 	bl	8000544 <__aeabi_i2d>
 80186c8:	e8e6 0102 	strd	r0, r1, [r6], #8
 80186cc:	3501      	adds	r5, #1
 80186ce:	e7e0      	b.n	8018692 <__kernel_rem_pio2+0x5a>
 80186d0:	ec51 0b18 	vmov	r0, r1, d8
 80186d4:	e7f8      	b.n	80186c8 <__kernel_rem_pio2+0x90>
 80186d6:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80186da:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80186de:	f7e7 ff9b 	bl	8000618 <__aeabi_dmul>
 80186e2:	4602      	mov	r2, r0
 80186e4:	460b      	mov	r3, r1
 80186e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80186ea:	f7e7 fddf 	bl	80002ac <__adddf3>
 80186ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80186f2:	3601      	adds	r6, #1
 80186f4:	9b05      	ldr	r3, [sp, #20]
 80186f6:	429e      	cmp	r6, r3
 80186f8:	dded      	ble.n	80186d6 <__kernel_rem_pio2+0x9e>
 80186fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80186fe:	3701      	adds	r7, #1
 8018700:	ecaa 7b02 	vstmia	sl!, {d7}
 8018704:	3508      	adds	r5, #8
 8018706:	e7cd      	b.n	80186a4 <__kernel_rem_pio2+0x6c>
 8018708:	9b00      	ldr	r3, [sp, #0]
 801870a:	f8dd 8000 	ldr.w	r8, [sp]
 801870e:	aa0c      	add	r2, sp, #48	@ 0x30
 8018710:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018714:	930a      	str	r3, [sp, #40]	@ 0x28
 8018716:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8018718:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801871c:	9309      	str	r3, [sp, #36]	@ 0x24
 801871e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8018722:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018724:	ab98      	add	r3, sp, #608	@ 0x260
 8018726:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801872a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801872e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018732:	ac0c      	add	r4, sp, #48	@ 0x30
 8018734:	ab70      	add	r3, sp, #448	@ 0x1c0
 8018736:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801873a:	46a1      	mov	r9, r4
 801873c:	46c2      	mov	sl, r8
 801873e:	f1ba 0f00 	cmp.w	sl, #0
 8018742:	dc77      	bgt.n	8018834 <__kernel_rem_pio2+0x1fc>
 8018744:	4658      	mov	r0, fp
 8018746:	ed9d 0b02 	vldr	d0, [sp, #8]
 801874a:	f000 fac5 	bl	8018cd8 <scalbn>
 801874e:	ec57 6b10 	vmov	r6, r7, d0
 8018752:	2200      	movs	r2, #0
 8018754:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8018758:	4630      	mov	r0, r6
 801875a:	4639      	mov	r1, r7
 801875c:	f7e7 ff5c 	bl	8000618 <__aeabi_dmul>
 8018760:	ec41 0b10 	vmov	d0, r0, r1
 8018764:	f000 fb34 	bl	8018dd0 <floor>
 8018768:	4b7c      	ldr	r3, [pc, #496]	@ (801895c <__kernel_rem_pio2+0x324>)
 801876a:	ec51 0b10 	vmov	r0, r1, d0
 801876e:	2200      	movs	r2, #0
 8018770:	f7e7 ff52 	bl	8000618 <__aeabi_dmul>
 8018774:	4602      	mov	r2, r0
 8018776:	460b      	mov	r3, r1
 8018778:	4630      	mov	r0, r6
 801877a:	4639      	mov	r1, r7
 801877c:	f7e7 fd94 	bl	80002a8 <__aeabi_dsub>
 8018780:	460f      	mov	r7, r1
 8018782:	4606      	mov	r6, r0
 8018784:	f7e8 f9f8 	bl	8000b78 <__aeabi_d2iz>
 8018788:	9002      	str	r0, [sp, #8]
 801878a:	f7e7 fedb 	bl	8000544 <__aeabi_i2d>
 801878e:	4602      	mov	r2, r0
 8018790:	460b      	mov	r3, r1
 8018792:	4630      	mov	r0, r6
 8018794:	4639      	mov	r1, r7
 8018796:	f7e7 fd87 	bl	80002a8 <__aeabi_dsub>
 801879a:	f1bb 0f00 	cmp.w	fp, #0
 801879e:	4606      	mov	r6, r0
 80187a0:	460f      	mov	r7, r1
 80187a2:	dd6c      	ble.n	801887e <__kernel_rem_pio2+0x246>
 80187a4:	f108 31ff 	add.w	r1, r8, #4294967295
 80187a8:	ab0c      	add	r3, sp, #48	@ 0x30
 80187aa:	9d02      	ldr	r5, [sp, #8]
 80187ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80187b0:	f1cb 0018 	rsb	r0, fp, #24
 80187b4:	fa43 f200 	asr.w	r2, r3, r0
 80187b8:	4415      	add	r5, r2
 80187ba:	4082      	lsls	r2, r0
 80187bc:	1a9b      	subs	r3, r3, r2
 80187be:	aa0c      	add	r2, sp, #48	@ 0x30
 80187c0:	9502      	str	r5, [sp, #8]
 80187c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80187c6:	f1cb 0217 	rsb	r2, fp, #23
 80187ca:	fa43 f902 	asr.w	r9, r3, r2
 80187ce:	f1b9 0f00 	cmp.w	r9, #0
 80187d2:	dd64      	ble.n	801889e <__kernel_rem_pio2+0x266>
 80187d4:	9b02      	ldr	r3, [sp, #8]
 80187d6:	2200      	movs	r2, #0
 80187d8:	3301      	adds	r3, #1
 80187da:	9302      	str	r3, [sp, #8]
 80187dc:	4615      	mov	r5, r2
 80187de:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80187e2:	4590      	cmp	r8, r2
 80187e4:	f300 80a1 	bgt.w	801892a <__kernel_rem_pio2+0x2f2>
 80187e8:	f1bb 0f00 	cmp.w	fp, #0
 80187ec:	dd07      	ble.n	80187fe <__kernel_rem_pio2+0x1c6>
 80187ee:	f1bb 0f01 	cmp.w	fp, #1
 80187f2:	f000 80c1 	beq.w	8018978 <__kernel_rem_pio2+0x340>
 80187f6:	f1bb 0f02 	cmp.w	fp, #2
 80187fa:	f000 80c8 	beq.w	801898e <__kernel_rem_pio2+0x356>
 80187fe:	f1b9 0f02 	cmp.w	r9, #2
 8018802:	d14c      	bne.n	801889e <__kernel_rem_pio2+0x266>
 8018804:	4632      	mov	r2, r6
 8018806:	463b      	mov	r3, r7
 8018808:	4955      	ldr	r1, [pc, #340]	@ (8018960 <__kernel_rem_pio2+0x328>)
 801880a:	2000      	movs	r0, #0
 801880c:	f7e7 fd4c 	bl	80002a8 <__aeabi_dsub>
 8018810:	4606      	mov	r6, r0
 8018812:	460f      	mov	r7, r1
 8018814:	2d00      	cmp	r5, #0
 8018816:	d042      	beq.n	801889e <__kernel_rem_pio2+0x266>
 8018818:	4658      	mov	r0, fp
 801881a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8018950 <__kernel_rem_pio2+0x318>
 801881e:	f000 fa5b 	bl	8018cd8 <scalbn>
 8018822:	4630      	mov	r0, r6
 8018824:	4639      	mov	r1, r7
 8018826:	ec53 2b10 	vmov	r2, r3, d0
 801882a:	f7e7 fd3d 	bl	80002a8 <__aeabi_dsub>
 801882e:	4606      	mov	r6, r0
 8018830:	460f      	mov	r7, r1
 8018832:	e034      	b.n	801889e <__kernel_rem_pio2+0x266>
 8018834:	4b4b      	ldr	r3, [pc, #300]	@ (8018964 <__kernel_rem_pio2+0x32c>)
 8018836:	2200      	movs	r2, #0
 8018838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801883c:	f7e7 feec 	bl	8000618 <__aeabi_dmul>
 8018840:	f7e8 f99a 	bl	8000b78 <__aeabi_d2iz>
 8018844:	f7e7 fe7e 	bl	8000544 <__aeabi_i2d>
 8018848:	4b47      	ldr	r3, [pc, #284]	@ (8018968 <__kernel_rem_pio2+0x330>)
 801884a:	2200      	movs	r2, #0
 801884c:	4606      	mov	r6, r0
 801884e:	460f      	mov	r7, r1
 8018850:	f7e7 fee2 	bl	8000618 <__aeabi_dmul>
 8018854:	4602      	mov	r2, r0
 8018856:	460b      	mov	r3, r1
 8018858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801885c:	f7e7 fd24 	bl	80002a8 <__aeabi_dsub>
 8018860:	f7e8 f98a 	bl	8000b78 <__aeabi_d2iz>
 8018864:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8018868:	f849 0b04 	str.w	r0, [r9], #4
 801886c:	4639      	mov	r1, r7
 801886e:	4630      	mov	r0, r6
 8018870:	f7e7 fd1c 	bl	80002ac <__adddf3>
 8018874:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018878:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801887c:	e75f      	b.n	801873e <__kernel_rem_pio2+0x106>
 801887e:	d107      	bne.n	8018890 <__kernel_rem_pio2+0x258>
 8018880:	f108 33ff 	add.w	r3, r8, #4294967295
 8018884:	aa0c      	add	r2, sp, #48	@ 0x30
 8018886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801888a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801888e:	e79e      	b.n	80187ce <__kernel_rem_pio2+0x196>
 8018890:	4b36      	ldr	r3, [pc, #216]	@ (801896c <__kernel_rem_pio2+0x334>)
 8018892:	2200      	movs	r2, #0
 8018894:	f7e8 f946 	bl	8000b24 <__aeabi_dcmpge>
 8018898:	2800      	cmp	r0, #0
 801889a:	d143      	bne.n	8018924 <__kernel_rem_pio2+0x2ec>
 801889c:	4681      	mov	r9, r0
 801889e:	2200      	movs	r2, #0
 80188a0:	2300      	movs	r3, #0
 80188a2:	4630      	mov	r0, r6
 80188a4:	4639      	mov	r1, r7
 80188a6:	f7e8 f91f 	bl	8000ae8 <__aeabi_dcmpeq>
 80188aa:	2800      	cmp	r0, #0
 80188ac:	f000 80c1 	beq.w	8018a32 <__kernel_rem_pio2+0x3fa>
 80188b0:	f108 33ff 	add.w	r3, r8, #4294967295
 80188b4:	2200      	movs	r2, #0
 80188b6:	9900      	ldr	r1, [sp, #0]
 80188b8:	428b      	cmp	r3, r1
 80188ba:	da70      	bge.n	801899e <__kernel_rem_pio2+0x366>
 80188bc:	2a00      	cmp	r2, #0
 80188be:	f000 808b 	beq.w	80189d8 <__kernel_rem_pio2+0x3a0>
 80188c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80188c6:	ab0c      	add	r3, sp, #48	@ 0x30
 80188c8:	f1ab 0b18 	sub.w	fp, fp, #24
 80188cc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d0f6      	beq.n	80188c2 <__kernel_rem_pio2+0x28a>
 80188d4:	4658      	mov	r0, fp
 80188d6:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8018950 <__kernel_rem_pio2+0x318>
 80188da:	f000 f9fd 	bl	8018cd8 <scalbn>
 80188de:	f108 0301 	add.w	r3, r8, #1
 80188e2:	00da      	lsls	r2, r3, #3
 80188e4:	9205      	str	r2, [sp, #20]
 80188e6:	ec55 4b10 	vmov	r4, r5, d0
 80188ea:	aa70      	add	r2, sp, #448	@ 0x1c0
 80188ec:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8018964 <__kernel_rem_pio2+0x32c>
 80188f0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80188f4:	4646      	mov	r6, r8
 80188f6:	f04f 0a00 	mov.w	sl, #0
 80188fa:	2e00      	cmp	r6, #0
 80188fc:	f280 80d1 	bge.w	8018aa2 <__kernel_rem_pio2+0x46a>
 8018900:	4644      	mov	r4, r8
 8018902:	2c00      	cmp	r4, #0
 8018904:	f2c0 80ff 	blt.w	8018b06 <__kernel_rem_pio2+0x4ce>
 8018908:	4b19      	ldr	r3, [pc, #100]	@ (8018970 <__kernel_rem_pio2+0x338>)
 801890a:	461f      	mov	r7, r3
 801890c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801890e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018912:	9306      	str	r3, [sp, #24]
 8018914:	f04f 0a00 	mov.w	sl, #0
 8018918:	f04f 0b00 	mov.w	fp, #0
 801891c:	2600      	movs	r6, #0
 801891e:	eba8 0504 	sub.w	r5, r8, r4
 8018922:	e0e4      	b.n	8018aee <__kernel_rem_pio2+0x4b6>
 8018924:	f04f 0902 	mov.w	r9, #2
 8018928:	e754      	b.n	80187d4 <__kernel_rem_pio2+0x19c>
 801892a:	f854 3b04 	ldr.w	r3, [r4], #4
 801892e:	bb0d      	cbnz	r5, 8018974 <__kernel_rem_pio2+0x33c>
 8018930:	b123      	cbz	r3, 801893c <__kernel_rem_pio2+0x304>
 8018932:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8018936:	f844 3c04 	str.w	r3, [r4, #-4]
 801893a:	2301      	movs	r3, #1
 801893c:	3201      	adds	r2, #1
 801893e:	461d      	mov	r5, r3
 8018940:	e74f      	b.n	80187e2 <__kernel_rem_pio2+0x1aa>
 8018942:	bf00      	nop
 8018944:	f3af 8000 	nop.w
	...
 8018954:	3ff00000 	.word	0x3ff00000
 8018958:	0801a240 	.word	0x0801a240
 801895c:	40200000 	.word	0x40200000
 8018960:	3ff00000 	.word	0x3ff00000
 8018964:	3e700000 	.word	0x3e700000
 8018968:	41700000 	.word	0x41700000
 801896c:	3fe00000 	.word	0x3fe00000
 8018970:	0801a200 	.word	0x0801a200
 8018974:	1acb      	subs	r3, r1, r3
 8018976:	e7de      	b.n	8018936 <__kernel_rem_pio2+0x2fe>
 8018978:	f108 32ff 	add.w	r2, r8, #4294967295
 801897c:	ab0c      	add	r3, sp, #48	@ 0x30
 801897e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018982:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8018986:	a90c      	add	r1, sp, #48	@ 0x30
 8018988:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801898c:	e737      	b.n	80187fe <__kernel_rem_pio2+0x1c6>
 801898e:	f108 32ff 	add.w	r2, r8, #4294967295
 8018992:	ab0c      	add	r3, sp, #48	@ 0x30
 8018994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018998:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801899c:	e7f3      	b.n	8018986 <__kernel_rem_pio2+0x34e>
 801899e:	a90c      	add	r1, sp, #48	@ 0x30
 80189a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80189a4:	3b01      	subs	r3, #1
 80189a6:	430a      	orrs	r2, r1
 80189a8:	e785      	b.n	80188b6 <__kernel_rem_pio2+0x27e>
 80189aa:	3401      	adds	r4, #1
 80189ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80189b0:	2a00      	cmp	r2, #0
 80189b2:	d0fa      	beq.n	80189aa <__kernel_rem_pio2+0x372>
 80189b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80189b6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80189ba:	eb0d 0503 	add.w	r5, sp, r3
 80189be:	9b06      	ldr	r3, [sp, #24]
 80189c0:	aa20      	add	r2, sp, #128	@ 0x80
 80189c2:	4443      	add	r3, r8
 80189c4:	f108 0701 	add.w	r7, r8, #1
 80189c8:	3d98      	subs	r5, #152	@ 0x98
 80189ca:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80189ce:	4444      	add	r4, r8
 80189d0:	42bc      	cmp	r4, r7
 80189d2:	da04      	bge.n	80189de <__kernel_rem_pio2+0x3a6>
 80189d4:	46a0      	mov	r8, r4
 80189d6:	e6a2      	b.n	801871e <__kernel_rem_pio2+0xe6>
 80189d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80189da:	2401      	movs	r4, #1
 80189dc:	e7e6      	b.n	80189ac <__kernel_rem_pio2+0x374>
 80189de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80189e0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80189e4:	f7e7 fdae 	bl	8000544 <__aeabi_i2d>
 80189e8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8018ca8 <__kernel_rem_pio2+0x670>
 80189ec:	e8e6 0102 	strd	r0, r1, [r6], #8
 80189f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80189f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80189f8:	46b2      	mov	sl, r6
 80189fa:	f04f 0800 	mov.w	r8, #0
 80189fe:	9b05      	ldr	r3, [sp, #20]
 8018a00:	4598      	cmp	r8, r3
 8018a02:	dd05      	ble.n	8018a10 <__kernel_rem_pio2+0x3d8>
 8018a04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018a08:	3701      	adds	r7, #1
 8018a0a:	eca5 7b02 	vstmia	r5!, {d7}
 8018a0e:	e7df      	b.n	80189d0 <__kernel_rem_pio2+0x398>
 8018a10:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8018a14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8018a18:	f7e7 fdfe 	bl	8000618 <__aeabi_dmul>
 8018a1c:	4602      	mov	r2, r0
 8018a1e:	460b      	mov	r3, r1
 8018a20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018a24:	f7e7 fc42 	bl	80002ac <__adddf3>
 8018a28:	f108 0801 	add.w	r8, r8, #1
 8018a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018a30:	e7e5      	b.n	80189fe <__kernel_rem_pio2+0x3c6>
 8018a32:	f1cb 0000 	rsb	r0, fp, #0
 8018a36:	ec47 6b10 	vmov	d0, r6, r7
 8018a3a:	f000 f94d 	bl	8018cd8 <scalbn>
 8018a3e:	ec55 4b10 	vmov	r4, r5, d0
 8018a42:	4b9b      	ldr	r3, [pc, #620]	@ (8018cb0 <__kernel_rem_pio2+0x678>)
 8018a44:	2200      	movs	r2, #0
 8018a46:	4620      	mov	r0, r4
 8018a48:	4629      	mov	r1, r5
 8018a4a:	f7e8 f86b 	bl	8000b24 <__aeabi_dcmpge>
 8018a4e:	b300      	cbz	r0, 8018a92 <__kernel_rem_pio2+0x45a>
 8018a50:	4b98      	ldr	r3, [pc, #608]	@ (8018cb4 <__kernel_rem_pio2+0x67c>)
 8018a52:	2200      	movs	r2, #0
 8018a54:	4620      	mov	r0, r4
 8018a56:	4629      	mov	r1, r5
 8018a58:	f7e7 fdde 	bl	8000618 <__aeabi_dmul>
 8018a5c:	f7e8 f88c 	bl	8000b78 <__aeabi_d2iz>
 8018a60:	4606      	mov	r6, r0
 8018a62:	f7e7 fd6f 	bl	8000544 <__aeabi_i2d>
 8018a66:	4b92      	ldr	r3, [pc, #584]	@ (8018cb0 <__kernel_rem_pio2+0x678>)
 8018a68:	2200      	movs	r2, #0
 8018a6a:	f7e7 fdd5 	bl	8000618 <__aeabi_dmul>
 8018a6e:	460b      	mov	r3, r1
 8018a70:	4602      	mov	r2, r0
 8018a72:	4629      	mov	r1, r5
 8018a74:	4620      	mov	r0, r4
 8018a76:	f7e7 fc17 	bl	80002a8 <__aeabi_dsub>
 8018a7a:	f7e8 f87d 	bl	8000b78 <__aeabi_d2iz>
 8018a7e:	ab0c      	add	r3, sp, #48	@ 0x30
 8018a80:	f10b 0b18 	add.w	fp, fp, #24
 8018a84:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8018a88:	f108 0801 	add.w	r8, r8, #1
 8018a8c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8018a90:	e720      	b.n	80188d4 <__kernel_rem_pio2+0x29c>
 8018a92:	4620      	mov	r0, r4
 8018a94:	4629      	mov	r1, r5
 8018a96:	f7e8 f86f 	bl	8000b78 <__aeabi_d2iz>
 8018a9a:	ab0c      	add	r3, sp, #48	@ 0x30
 8018a9c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8018aa0:	e718      	b.n	80188d4 <__kernel_rem_pio2+0x29c>
 8018aa2:	ab0c      	add	r3, sp, #48	@ 0x30
 8018aa4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018aa8:	f7e7 fd4c 	bl	8000544 <__aeabi_i2d>
 8018aac:	4622      	mov	r2, r4
 8018aae:	462b      	mov	r3, r5
 8018ab0:	f7e7 fdb2 	bl	8000618 <__aeabi_dmul>
 8018ab4:	4652      	mov	r2, sl
 8018ab6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8018aba:	465b      	mov	r3, fp
 8018abc:	4620      	mov	r0, r4
 8018abe:	4629      	mov	r1, r5
 8018ac0:	f7e7 fdaa 	bl	8000618 <__aeabi_dmul>
 8018ac4:	3e01      	subs	r6, #1
 8018ac6:	4604      	mov	r4, r0
 8018ac8:	460d      	mov	r5, r1
 8018aca:	e716      	b.n	80188fa <__kernel_rem_pio2+0x2c2>
 8018acc:	9906      	ldr	r1, [sp, #24]
 8018ace:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8018ad2:	9106      	str	r1, [sp, #24]
 8018ad4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8018ad8:	f7e7 fd9e 	bl	8000618 <__aeabi_dmul>
 8018adc:	4602      	mov	r2, r0
 8018ade:	460b      	mov	r3, r1
 8018ae0:	4650      	mov	r0, sl
 8018ae2:	4659      	mov	r1, fp
 8018ae4:	f7e7 fbe2 	bl	80002ac <__adddf3>
 8018ae8:	3601      	adds	r6, #1
 8018aea:	4682      	mov	sl, r0
 8018aec:	468b      	mov	fp, r1
 8018aee:	9b00      	ldr	r3, [sp, #0]
 8018af0:	429e      	cmp	r6, r3
 8018af2:	dc01      	bgt.n	8018af8 <__kernel_rem_pio2+0x4c0>
 8018af4:	42ae      	cmp	r6, r5
 8018af6:	dde9      	ble.n	8018acc <__kernel_rem_pio2+0x494>
 8018af8:	ab48      	add	r3, sp, #288	@ 0x120
 8018afa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8018afe:	e9c5 ab00 	strd	sl, fp, [r5]
 8018b02:	3c01      	subs	r4, #1
 8018b04:	e6fd      	b.n	8018902 <__kernel_rem_pio2+0x2ca>
 8018b06:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8018b08:	2b02      	cmp	r3, #2
 8018b0a:	dc0b      	bgt.n	8018b24 <__kernel_rem_pio2+0x4ec>
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	dc35      	bgt.n	8018b7c <__kernel_rem_pio2+0x544>
 8018b10:	d059      	beq.n	8018bc6 <__kernel_rem_pio2+0x58e>
 8018b12:	9b02      	ldr	r3, [sp, #8]
 8018b14:	f003 0007 	and.w	r0, r3, #7
 8018b18:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8018b1c:	ecbd 8b02 	vpop	{d8}
 8018b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b24:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8018b26:	2b03      	cmp	r3, #3
 8018b28:	d1f3      	bne.n	8018b12 <__kernel_rem_pio2+0x4da>
 8018b2a:	9b05      	ldr	r3, [sp, #20]
 8018b2c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8018b30:	eb0d 0403 	add.w	r4, sp, r3
 8018b34:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8018b38:	4625      	mov	r5, r4
 8018b3a:	46c2      	mov	sl, r8
 8018b3c:	f1ba 0f00 	cmp.w	sl, #0
 8018b40:	dc69      	bgt.n	8018c16 <__kernel_rem_pio2+0x5de>
 8018b42:	4645      	mov	r5, r8
 8018b44:	2d01      	cmp	r5, #1
 8018b46:	f300 8087 	bgt.w	8018c58 <__kernel_rem_pio2+0x620>
 8018b4a:	9c05      	ldr	r4, [sp, #20]
 8018b4c:	ab48      	add	r3, sp, #288	@ 0x120
 8018b4e:	441c      	add	r4, r3
 8018b50:	2000      	movs	r0, #0
 8018b52:	2100      	movs	r1, #0
 8018b54:	f1b8 0f01 	cmp.w	r8, #1
 8018b58:	f300 809c 	bgt.w	8018c94 <__kernel_rem_pio2+0x65c>
 8018b5c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8018b60:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8018b64:	f1b9 0f00 	cmp.w	r9, #0
 8018b68:	f040 80a6 	bne.w	8018cb8 <__kernel_rem_pio2+0x680>
 8018b6c:	9b04      	ldr	r3, [sp, #16]
 8018b6e:	e9c3 5600 	strd	r5, r6, [r3]
 8018b72:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8018b76:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8018b7a:	e7ca      	b.n	8018b12 <__kernel_rem_pio2+0x4da>
 8018b7c:	9d05      	ldr	r5, [sp, #20]
 8018b7e:	ab48      	add	r3, sp, #288	@ 0x120
 8018b80:	441d      	add	r5, r3
 8018b82:	4644      	mov	r4, r8
 8018b84:	2000      	movs	r0, #0
 8018b86:	2100      	movs	r1, #0
 8018b88:	2c00      	cmp	r4, #0
 8018b8a:	da35      	bge.n	8018bf8 <__kernel_rem_pio2+0x5c0>
 8018b8c:	f1b9 0f00 	cmp.w	r9, #0
 8018b90:	d038      	beq.n	8018c04 <__kernel_rem_pio2+0x5cc>
 8018b92:	4602      	mov	r2, r0
 8018b94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8018b98:	9c04      	ldr	r4, [sp, #16]
 8018b9a:	e9c4 2300 	strd	r2, r3, [r4]
 8018b9e:	4602      	mov	r2, r0
 8018ba0:	460b      	mov	r3, r1
 8018ba2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8018ba6:	f7e7 fb7f 	bl	80002a8 <__aeabi_dsub>
 8018baa:	ad4a      	add	r5, sp, #296	@ 0x128
 8018bac:	2401      	movs	r4, #1
 8018bae:	45a0      	cmp	r8, r4
 8018bb0:	da2b      	bge.n	8018c0a <__kernel_rem_pio2+0x5d2>
 8018bb2:	f1b9 0f00 	cmp.w	r9, #0
 8018bb6:	d002      	beq.n	8018bbe <__kernel_rem_pio2+0x586>
 8018bb8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8018bbc:	4619      	mov	r1, r3
 8018bbe:	9b04      	ldr	r3, [sp, #16]
 8018bc0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8018bc4:	e7a5      	b.n	8018b12 <__kernel_rem_pio2+0x4da>
 8018bc6:	9c05      	ldr	r4, [sp, #20]
 8018bc8:	ab48      	add	r3, sp, #288	@ 0x120
 8018bca:	441c      	add	r4, r3
 8018bcc:	2000      	movs	r0, #0
 8018bce:	2100      	movs	r1, #0
 8018bd0:	f1b8 0f00 	cmp.w	r8, #0
 8018bd4:	da09      	bge.n	8018bea <__kernel_rem_pio2+0x5b2>
 8018bd6:	f1b9 0f00 	cmp.w	r9, #0
 8018bda:	d002      	beq.n	8018be2 <__kernel_rem_pio2+0x5aa>
 8018bdc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8018be0:	4619      	mov	r1, r3
 8018be2:	9b04      	ldr	r3, [sp, #16]
 8018be4:	e9c3 0100 	strd	r0, r1, [r3]
 8018be8:	e793      	b.n	8018b12 <__kernel_rem_pio2+0x4da>
 8018bea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8018bee:	f7e7 fb5d 	bl	80002ac <__adddf3>
 8018bf2:	f108 38ff 	add.w	r8, r8, #4294967295
 8018bf6:	e7eb      	b.n	8018bd0 <__kernel_rem_pio2+0x598>
 8018bf8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8018bfc:	f7e7 fb56 	bl	80002ac <__adddf3>
 8018c00:	3c01      	subs	r4, #1
 8018c02:	e7c1      	b.n	8018b88 <__kernel_rem_pio2+0x550>
 8018c04:	4602      	mov	r2, r0
 8018c06:	460b      	mov	r3, r1
 8018c08:	e7c6      	b.n	8018b98 <__kernel_rem_pio2+0x560>
 8018c0a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8018c0e:	f7e7 fb4d 	bl	80002ac <__adddf3>
 8018c12:	3401      	adds	r4, #1
 8018c14:	e7cb      	b.n	8018bae <__kernel_rem_pio2+0x576>
 8018c16:	ed35 7b02 	vldmdb	r5!, {d7}
 8018c1a:	ed8d 7b00 	vstr	d7, [sp]
 8018c1e:	ed95 7b02 	vldr	d7, [r5, #8]
 8018c22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018c26:	ec53 2b17 	vmov	r2, r3, d7
 8018c2a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018c2e:	f7e7 fb3d 	bl	80002ac <__adddf3>
 8018c32:	4602      	mov	r2, r0
 8018c34:	460b      	mov	r3, r1
 8018c36:	4606      	mov	r6, r0
 8018c38:	460f      	mov	r7, r1
 8018c3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018c3e:	f7e7 fb33 	bl	80002a8 <__aeabi_dsub>
 8018c42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018c46:	f7e7 fb31 	bl	80002ac <__adddf3>
 8018c4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018c4e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8018c52:	e9c5 6700 	strd	r6, r7, [r5]
 8018c56:	e771      	b.n	8018b3c <__kernel_rem_pio2+0x504>
 8018c58:	ed34 7b02 	vldmdb	r4!, {d7}
 8018c5c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8018c60:	ec51 0b17 	vmov	r0, r1, d7
 8018c64:	4652      	mov	r2, sl
 8018c66:	465b      	mov	r3, fp
 8018c68:	ed8d 7b00 	vstr	d7, [sp]
 8018c6c:	f7e7 fb1e 	bl	80002ac <__adddf3>
 8018c70:	4602      	mov	r2, r0
 8018c72:	460b      	mov	r3, r1
 8018c74:	4606      	mov	r6, r0
 8018c76:	460f      	mov	r7, r1
 8018c78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018c7c:	f7e7 fb14 	bl	80002a8 <__aeabi_dsub>
 8018c80:	4652      	mov	r2, sl
 8018c82:	465b      	mov	r3, fp
 8018c84:	f7e7 fb12 	bl	80002ac <__adddf3>
 8018c88:	3d01      	subs	r5, #1
 8018c8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8018c8e:	e9c4 6700 	strd	r6, r7, [r4]
 8018c92:	e757      	b.n	8018b44 <__kernel_rem_pio2+0x50c>
 8018c94:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8018c98:	f7e7 fb08 	bl	80002ac <__adddf3>
 8018c9c:	f108 38ff 	add.w	r8, r8, #4294967295
 8018ca0:	e758      	b.n	8018b54 <__kernel_rem_pio2+0x51c>
 8018ca2:	bf00      	nop
 8018ca4:	f3af 8000 	nop.w
	...
 8018cb0:	41700000 	.word	0x41700000
 8018cb4:	3e700000 	.word	0x3e700000
 8018cb8:	9b04      	ldr	r3, [sp, #16]
 8018cba:	9a04      	ldr	r2, [sp, #16]
 8018cbc:	601d      	str	r5, [r3, #0]
 8018cbe:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8018cc2:	605c      	str	r4, [r3, #4]
 8018cc4:	609f      	str	r7, [r3, #8]
 8018cc6:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8018cca:	60d3      	str	r3, [r2, #12]
 8018ccc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8018cd0:	6110      	str	r0, [r2, #16]
 8018cd2:	6153      	str	r3, [r2, #20]
 8018cd4:	e71d      	b.n	8018b12 <__kernel_rem_pio2+0x4da>
 8018cd6:	bf00      	nop

08018cd8 <scalbn>:
 8018cd8:	b570      	push	{r4, r5, r6, lr}
 8018cda:	ec55 4b10 	vmov	r4, r5, d0
 8018cde:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8018ce2:	4606      	mov	r6, r0
 8018ce4:	462b      	mov	r3, r5
 8018ce6:	b991      	cbnz	r1, 8018d0e <scalbn+0x36>
 8018ce8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8018cec:	4323      	orrs	r3, r4
 8018cee:	d03b      	beq.n	8018d68 <scalbn+0x90>
 8018cf0:	4b33      	ldr	r3, [pc, #204]	@ (8018dc0 <scalbn+0xe8>)
 8018cf2:	4620      	mov	r0, r4
 8018cf4:	4629      	mov	r1, r5
 8018cf6:	2200      	movs	r2, #0
 8018cf8:	f7e7 fc8e 	bl	8000618 <__aeabi_dmul>
 8018cfc:	4b31      	ldr	r3, [pc, #196]	@ (8018dc4 <scalbn+0xec>)
 8018cfe:	429e      	cmp	r6, r3
 8018d00:	4604      	mov	r4, r0
 8018d02:	460d      	mov	r5, r1
 8018d04:	da0f      	bge.n	8018d26 <scalbn+0x4e>
 8018d06:	a326      	add	r3, pc, #152	@ (adr r3, 8018da0 <scalbn+0xc8>)
 8018d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d0c:	e01e      	b.n	8018d4c <scalbn+0x74>
 8018d0e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8018d12:	4291      	cmp	r1, r2
 8018d14:	d10b      	bne.n	8018d2e <scalbn+0x56>
 8018d16:	4622      	mov	r2, r4
 8018d18:	4620      	mov	r0, r4
 8018d1a:	4629      	mov	r1, r5
 8018d1c:	f7e7 fac6 	bl	80002ac <__adddf3>
 8018d20:	4604      	mov	r4, r0
 8018d22:	460d      	mov	r5, r1
 8018d24:	e020      	b.n	8018d68 <scalbn+0x90>
 8018d26:	460b      	mov	r3, r1
 8018d28:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8018d2c:	3936      	subs	r1, #54	@ 0x36
 8018d2e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8018d32:	4296      	cmp	r6, r2
 8018d34:	dd0d      	ble.n	8018d52 <scalbn+0x7a>
 8018d36:	2d00      	cmp	r5, #0
 8018d38:	a11b      	add	r1, pc, #108	@ (adr r1, 8018da8 <scalbn+0xd0>)
 8018d3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d3e:	da02      	bge.n	8018d46 <scalbn+0x6e>
 8018d40:	a11b      	add	r1, pc, #108	@ (adr r1, 8018db0 <scalbn+0xd8>)
 8018d42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d46:	a318      	add	r3, pc, #96	@ (adr r3, 8018da8 <scalbn+0xd0>)
 8018d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d4c:	f7e7 fc64 	bl	8000618 <__aeabi_dmul>
 8018d50:	e7e6      	b.n	8018d20 <scalbn+0x48>
 8018d52:	1872      	adds	r2, r6, r1
 8018d54:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8018d58:	428a      	cmp	r2, r1
 8018d5a:	dcec      	bgt.n	8018d36 <scalbn+0x5e>
 8018d5c:	2a00      	cmp	r2, #0
 8018d5e:	dd06      	ble.n	8018d6e <scalbn+0x96>
 8018d60:	f36f 531e 	bfc	r3, #20, #11
 8018d64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018d68:	ec45 4b10 	vmov	d0, r4, r5
 8018d6c:	bd70      	pop	{r4, r5, r6, pc}
 8018d6e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8018d72:	da08      	bge.n	8018d86 <scalbn+0xae>
 8018d74:	2d00      	cmp	r5, #0
 8018d76:	a10a      	add	r1, pc, #40	@ (adr r1, 8018da0 <scalbn+0xc8>)
 8018d78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d7c:	dac3      	bge.n	8018d06 <scalbn+0x2e>
 8018d7e:	a10e      	add	r1, pc, #56	@ (adr r1, 8018db8 <scalbn+0xe0>)
 8018d80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d84:	e7bf      	b.n	8018d06 <scalbn+0x2e>
 8018d86:	3236      	adds	r2, #54	@ 0x36
 8018d88:	f36f 531e 	bfc	r3, #20, #11
 8018d8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018d90:	4620      	mov	r0, r4
 8018d92:	4b0d      	ldr	r3, [pc, #52]	@ (8018dc8 <scalbn+0xf0>)
 8018d94:	4629      	mov	r1, r5
 8018d96:	2200      	movs	r2, #0
 8018d98:	e7d8      	b.n	8018d4c <scalbn+0x74>
 8018d9a:	bf00      	nop
 8018d9c:	f3af 8000 	nop.w
 8018da0:	c2f8f359 	.word	0xc2f8f359
 8018da4:	01a56e1f 	.word	0x01a56e1f
 8018da8:	8800759c 	.word	0x8800759c
 8018dac:	7e37e43c 	.word	0x7e37e43c
 8018db0:	8800759c 	.word	0x8800759c
 8018db4:	fe37e43c 	.word	0xfe37e43c
 8018db8:	c2f8f359 	.word	0xc2f8f359
 8018dbc:	81a56e1f 	.word	0x81a56e1f
 8018dc0:	43500000 	.word	0x43500000
 8018dc4:	ffff3cb0 	.word	0xffff3cb0
 8018dc8:	3c900000 	.word	0x3c900000
 8018dcc:	00000000 	.word	0x00000000

08018dd0 <floor>:
 8018dd0:	ec51 0b10 	vmov	r0, r1, d0
 8018dd4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8018dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ddc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8018de0:	2e13      	cmp	r6, #19
 8018de2:	460c      	mov	r4, r1
 8018de4:	4605      	mov	r5, r0
 8018de6:	4680      	mov	r8, r0
 8018de8:	dc34      	bgt.n	8018e54 <floor+0x84>
 8018dea:	2e00      	cmp	r6, #0
 8018dec:	da17      	bge.n	8018e1e <floor+0x4e>
 8018dee:	a332      	add	r3, pc, #200	@ (adr r3, 8018eb8 <floor+0xe8>)
 8018df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018df4:	f7e7 fa5a 	bl	80002ac <__adddf3>
 8018df8:	2200      	movs	r2, #0
 8018dfa:	2300      	movs	r3, #0
 8018dfc:	f7e7 fe9c 	bl	8000b38 <__aeabi_dcmpgt>
 8018e00:	b150      	cbz	r0, 8018e18 <floor+0x48>
 8018e02:	2c00      	cmp	r4, #0
 8018e04:	da55      	bge.n	8018eb2 <floor+0xe2>
 8018e06:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8018e0a:	432c      	orrs	r4, r5
 8018e0c:	2500      	movs	r5, #0
 8018e0e:	42ac      	cmp	r4, r5
 8018e10:	4c2b      	ldr	r4, [pc, #172]	@ (8018ec0 <floor+0xf0>)
 8018e12:	bf08      	it	eq
 8018e14:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8018e18:	4621      	mov	r1, r4
 8018e1a:	4628      	mov	r0, r5
 8018e1c:	e023      	b.n	8018e66 <floor+0x96>
 8018e1e:	4f29      	ldr	r7, [pc, #164]	@ (8018ec4 <floor+0xf4>)
 8018e20:	4137      	asrs	r7, r6
 8018e22:	ea01 0307 	and.w	r3, r1, r7
 8018e26:	4303      	orrs	r3, r0
 8018e28:	d01d      	beq.n	8018e66 <floor+0x96>
 8018e2a:	a323      	add	r3, pc, #140	@ (adr r3, 8018eb8 <floor+0xe8>)
 8018e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e30:	f7e7 fa3c 	bl	80002ac <__adddf3>
 8018e34:	2200      	movs	r2, #0
 8018e36:	2300      	movs	r3, #0
 8018e38:	f7e7 fe7e 	bl	8000b38 <__aeabi_dcmpgt>
 8018e3c:	2800      	cmp	r0, #0
 8018e3e:	d0eb      	beq.n	8018e18 <floor+0x48>
 8018e40:	2c00      	cmp	r4, #0
 8018e42:	bfbe      	ittt	lt
 8018e44:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8018e48:	4133      	asrlt	r3, r6
 8018e4a:	18e4      	addlt	r4, r4, r3
 8018e4c:	ea24 0407 	bic.w	r4, r4, r7
 8018e50:	2500      	movs	r5, #0
 8018e52:	e7e1      	b.n	8018e18 <floor+0x48>
 8018e54:	2e33      	cmp	r6, #51	@ 0x33
 8018e56:	dd0a      	ble.n	8018e6e <floor+0x9e>
 8018e58:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8018e5c:	d103      	bne.n	8018e66 <floor+0x96>
 8018e5e:	4602      	mov	r2, r0
 8018e60:	460b      	mov	r3, r1
 8018e62:	f7e7 fa23 	bl	80002ac <__adddf3>
 8018e66:	ec41 0b10 	vmov	d0, r0, r1
 8018e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e6e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8018e72:	f04f 37ff 	mov.w	r7, #4294967295
 8018e76:	40df      	lsrs	r7, r3
 8018e78:	4207      	tst	r7, r0
 8018e7a:	d0f4      	beq.n	8018e66 <floor+0x96>
 8018e7c:	a30e      	add	r3, pc, #56	@ (adr r3, 8018eb8 <floor+0xe8>)
 8018e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e82:	f7e7 fa13 	bl	80002ac <__adddf3>
 8018e86:	2200      	movs	r2, #0
 8018e88:	2300      	movs	r3, #0
 8018e8a:	f7e7 fe55 	bl	8000b38 <__aeabi_dcmpgt>
 8018e8e:	2800      	cmp	r0, #0
 8018e90:	d0c2      	beq.n	8018e18 <floor+0x48>
 8018e92:	2c00      	cmp	r4, #0
 8018e94:	da0a      	bge.n	8018eac <floor+0xdc>
 8018e96:	2e14      	cmp	r6, #20
 8018e98:	d101      	bne.n	8018e9e <floor+0xce>
 8018e9a:	3401      	adds	r4, #1
 8018e9c:	e006      	b.n	8018eac <floor+0xdc>
 8018e9e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8018ea2:	2301      	movs	r3, #1
 8018ea4:	40b3      	lsls	r3, r6
 8018ea6:	441d      	add	r5, r3
 8018ea8:	4545      	cmp	r5, r8
 8018eaa:	d3f6      	bcc.n	8018e9a <floor+0xca>
 8018eac:	ea25 0507 	bic.w	r5, r5, r7
 8018eb0:	e7b2      	b.n	8018e18 <floor+0x48>
 8018eb2:	2500      	movs	r5, #0
 8018eb4:	462c      	mov	r4, r5
 8018eb6:	e7af      	b.n	8018e18 <floor+0x48>
 8018eb8:	8800759c 	.word	0x8800759c
 8018ebc:	7e37e43c 	.word	0x7e37e43c
 8018ec0:	bff00000 	.word	0xbff00000
 8018ec4:	000fffff 	.word	0x000fffff

08018ec8 <_init>:
 8018ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eca:	bf00      	nop
 8018ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ece:	bc08      	pop	{r3}
 8018ed0:	469e      	mov	lr, r3
 8018ed2:	4770      	bx	lr

08018ed4 <_fini>:
 8018ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ed6:	bf00      	nop
 8018ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018eda:	bc08      	pop	{r3}
 8018edc:	469e      	mov	lr, r3
 8018ede:	4770      	bx	lr
