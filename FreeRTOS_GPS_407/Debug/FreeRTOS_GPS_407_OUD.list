
FreeRTOS_GPS_407_OUD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017c80  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001320  08017e10  08017e10  00018e10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019130  08019130  0001b3cc  2**0
                  CONTENTS
  4 .ARM          00000008  08019130  08019130  0001a130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019138  08019138  0001b3cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019138  08019138  0001a138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801913c  0801913c  0001a13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003cc  20000000  08019140  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001d618  200003d0  0801950c  0001b3d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2001d9e8  0801950c  0001b9e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b3cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f8b4  00000000  00000000  0001b3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000077f0  00000000  00000000  0004acb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002630  00000000  00000000  000524a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d77  00000000  00000000  00054ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c700  00000000  00000000  00056847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000356d6  00000000  00000000  00082f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5eb3  00000000  00000000  000b861d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019e4d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b690  00000000  00000000  0019e514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  001a9ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003d0 	.word	0x200003d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017df8 	.word	0x08017df8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003d4 	.word	0x200003d4
 80001cc:	08017df8 	.word	0x08017df8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b9be 	b.w	8000f9c <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f83c 	bl	8000ca4 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff5b 	bl	8000afc <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fcd1 	bl	8000618 <__aeabi_dmul>
 8000c76:	f7ff ffa7 	bl	8000bc8 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc52 	bl	8000524 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fcc8 	bl	8000618 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fb0a 	bl	80002a8 <__aeabi_dsub>
 8000c94:	f7ff ff98 	bl	8000bc8 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <__udivmoddi4>:
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca8:	9d08      	ldr	r5, [sp, #32]
 8000caa:	468e      	mov	lr, r1
 8000cac:	4604      	mov	r4, r0
 8000cae:	4688      	mov	r8, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14a      	bne.n	8000d4a <__udivmoddi4+0xa6>
 8000cb4:	428a      	cmp	r2, r1
 8000cb6:	4617      	mov	r7, r2
 8000cb8:	d962      	bls.n	8000d80 <__udivmoddi4+0xdc>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	b14e      	cbz	r6, 8000cd4 <__udivmoddi4+0x30>
 8000cc0:	f1c6 0320 	rsb	r3, r6, #32
 8000cc4:	fa01 f806 	lsl.w	r8, r1, r6
 8000cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ccc:	40b7      	lsls	r7, r6
 8000cce:	ea43 0808 	orr.w	r8, r3, r8
 8000cd2:	40b4      	lsls	r4, r6
 8000cd4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ce0:	0c23      	lsrs	r3, r4, #16
 8000ce2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ce6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cea:	fb01 f20c 	mul.w	r2, r1, ip
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x62>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cf8:	f080 80ea 	bcs.w	8000ed0 <__udivmoddi4+0x22c>
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	f240 80e7 	bls.w	8000ed0 <__udivmoddi4+0x22c>
 8000d02:	3902      	subs	r1, #2
 8000d04:	443b      	add	r3, r7
 8000d06:	1a9a      	subs	r2, r3, r2
 8000d08:	b2a3      	uxth	r3, r4
 8000d0a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d0e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d16:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1a:	459c      	cmp	ip, r3
 8000d1c:	d909      	bls.n	8000d32 <__udivmoddi4+0x8e>
 8000d1e:	18fb      	adds	r3, r7, r3
 8000d20:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d24:	f080 80d6 	bcs.w	8000ed4 <__udivmoddi4+0x230>
 8000d28:	459c      	cmp	ip, r3
 8000d2a:	f240 80d3 	bls.w	8000ed4 <__udivmoddi4+0x230>
 8000d2e:	443b      	add	r3, r7
 8000d30:	3802      	subs	r0, #2
 8000d32:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d36:	eba3 030c 	sub.w	r3, r3, ip
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	b11d      	cbz	r5, 8000d46 <__udivmoddi4+0xa2>
 8000d3e:	40f3      	lsrs	r3, r6
 8000d40:	2200      	movs	r2, #0
 8000d42:	e9c5 3200 	strd	r3, r2, [r5]
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d905      	bls.n	8000d5a <__udivmoddi4+0xb6>
 8000d4e:	b10d      	cbz	r5, 8000d54 <__udivmoddi4+0xb0>
 8000d50:	e9c5 0100 	strd	r0, r1, [r5]
 8000d54:	2100      	movs	r1, #0
 8000d56:	4608      	mov	r0, r1
 8000d58:	e7f5      	b.n	8000d46 <__udivmoddi4+0xa2>
 8000d5a:	fab3 f183 	clz	r1, r3
 8000d5e:	2900      	cmp	r1, #0
 8000d60:	d146      	bne.n	8000df0 <__udivmoddi4+0x14c>
 8000d62:	4573      	cmp	r3, lr
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xc8>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 8105 	bhi.w	8000f76 <__udivmoddi4+0x2d2>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	4690      	mov	r8, r2
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e5      	beq.n	8000d46 <__udivmoddi4+0xa2>
 8000d7a:	e9c5 4800 	strd	r4, r8, [r5]
 8000d7e:	e7e2      	b.n	8000d46 <__udivmoddi4+0xa2>
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	f000 8090 	beq.w	8000ea6 <__udivmoddi4+0x202>
 8000d86:	fab2 f682 	clz	r6, r2
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	f040 80a4 	bne.w	8000ed8 <__udivmoddi4+0x234>
 8000d90:	1a8a      	subs	r2, r1, r2
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	b280      	uxth	r0, r0
 8000d9a:	b2bc      	uxth	r4, r7
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000da2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000da6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000daa:	fb04 f20c 	mul.w	r2, r4, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x11e>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000db8:	d202      	bcs.n	8000dc0 <__udivmoddi4+0x11c>
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	f200 80e0 	bhi.w	8000f80 <__udivmoddi4+0x2dc>
 8000dc0:	46c4      	mov	ip, r8
 8000dc2:	1a9b      	subs	r3, r3, r2
 8000dc4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dc8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dcc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dd0:	fb02 f404 	mul.w	r4, r2, r4
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	d907      	bls.n	8000de8 <__udivmoddi4+0x144>
 8000dd8:	18fb      	adds	r3, r7, r3
 8000dda:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dde:	d202      	bcs.n	8000de6 <__udivmoddi4+0x142>
 8000de0:	429c      	cmp	r4, r3
 8000de2:	f200 80ca 	bhi.w	8000f7a <__udivmoddi4+0x2d6>
 8000de6:	4602      	mov	r2, r0
 8000de8:	1b1b      	subs	r3, r3, r4
 8000dea:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dee:	e7a5      	b.n	8000d3c <__udivmoddi4+0x98>
 8000df0:	f1c1 0620 	rsb	r6, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 f706 	lsr.w	r7, r2, r6
 8000dfa:	431f      	orrs	r7, r3
 8000dfc:	fa0e f401 	lsl.w	r4, lr, r1
 8000e00:	fa20 f306 	lsr.w	r3, r0, r6
 8000e04:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e08:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e12:	fa1f fc87 	uxth.w	ip, r7
 8000e16:	fbbe f0f9 	udiv	r0, lr, r9
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e20:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e24:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x1a0>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e36:	f080 809c 	bcs.w	8000f72 <__udivmoddi4+0x2ce>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	f240 8099 	bls.w	8000f72 <__udivmoddi4+0x2ce>
 8000e40:	3802      	subs	r0, #2
 8000e42:	443c      	add	r4, r7
 8000e44:	eba4 040e 	sub.w	r4, r4, lr
 8000e48:	fa1f fe83 	uxth.w	lr, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e58:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e5c:	45a4      	cmp	ip, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1ce>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e66:	f080 8082 	bcs.w	8000f6e <__udivmoddi4+0x2ca>
 8000e6a:	45a4      	cmp	ip, r4
 8000e6c:	d97f      	bls.n	8000f6e <__udivmoddi4+0x2ca>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	443c      	add	r4, r7
 8000e72:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e76:	eba4 040c 	sub.w	r4, r4, ip
 8000e7a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e7e:	4564      	cmp	r4, ip
 8000e80:	4673      	mov	r3, lr
 8000e82:	46e1      	mov	r9, ip
 8000e84:	d362      	bcc.n	8000f4c <__udivmoddi4+0x2a8>
 8000e86:	d05f      	beq.n	8000f48 <__udivmoddi4+0x2a4>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x1fe>
 8000e8a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e8e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e92:	fa04 f606 	lsl.w	r6, r4, r6
 8000e96:	fa22 f301 	lsr.w	r3, r2, r1
 8000e9a:	431e      	orrs	r6, r3
 8000e9c:	40cc      	lsrs	r4, r1
 8000e9e:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e74f      	b.n	8000d46 <__udivmoddi4+0xa2>
 8000ea6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eaa:	0c01      	lsrs	r1, r0, #16
 8000eac:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000eb0:	b280      	uxth	r0, r0
 8000eb2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	4638      	mov	r0, r7
 8000eba:	463c      	mov	r4, r7
 8000ebc:	46b8      	mov	r8, r7
 8000ebe:	46be      	mov	lr, r7
 8000ec0:	2620      	movs	r6, #32
 8000ec2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ec6:	eba2 0208 	sub.w	r2, r2, r8
 8000eca:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ece:	e766      	b.n	8000d9e <__udivmoddi4+0xfa>
 8000ed0:	4601      	mov	r1, r0
 8000ed2:	e718      	b.n	8000d06 <__udivmoddi4+0x62>
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	e72c      	b.n	8000d32 <__udivmoddi4+0x8e>
 8000ed8:	f1c6 0220 	rsb	r2, r6, #32
 8000edc:	fa2e f302 	lsr.w	r3, lr, r2
 8000ee0:	40b7      	lsls	r7, r6
 8000ee2:	40b1      	lsls	r1, r6
 8000ee4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ee8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eec:	430a      	orrs	r2, r1
 8000eee:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ef2:	b2bc      	uxth	r4, r7
 8000ef4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ef8:	0c11      	lsrs	r1, r2, #16
 8000efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efe:	fb08 f904 	mul.w	r9, r8, r4
 8000f02:	40b0      	lsls	r0, r6
 8000f04:	4589      	cmp	r9, r1
 8000f06:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f0a:	b280      	uxth	r0, r0
 8000f0c:	d93e      	bls.n	8000f8c <__udivmoddi4+0x2e8>
 8000f0e:	1879      	adds	r1, r7, r1
 8000f10:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f14:	d201      	bcs.n	8000f1a <__udivmoddi4+0x276>
 8000f16:	4589      	cmp	r9, r1
 8000f18:	d81f      	bhi.n	8000f5a <__udivmoddi4+0x2b6>
 8000f1a:	eba1 0109 	sub.w	r1, r1, r9
 8000f1e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f22:	fb09 f804 	mul.w	r8, r9, r4
 8000f26:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2a:	b292      	uxth	r2, r2
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	4542      	cmp	r2, r8
 8000f32:	d229      	bcs.n	8000f88 <__udivmoddi4+0x2e4>
 8000f34:	18ba      	adds	r2, r7, r2
 8000f36:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f3a:	d2c4      	bcs.n	8000ec6 <__udivmoddi4+0x222>
 8000f3c:	4542      	cmp	r2, r8
 8000f3e:	d2c2      	bcs.n	8000ec6 <__udivmoddi4+0x222>
 8000f40:	f1a9 0102 	sub.w	r1, r9, #2
 8000f44:	443a      	add	r2, r7
 8000f46:	e7be      	b.n	8000ec6 <__udivmoddi4+0x222>
 8000f48:	45f0      	cmp	r8, lr
 8000f4a:	d29d      	bcs.n	8000e88 <__udivmoddi4+0x1e4>
 8000f4c:	ebbe 0302 	subs.w	r3, lr, r2
 8000f50:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f54:	3801      	subs	r0, #1
 8000f56:	46e1      	mov	r9, ip
 8000f58:	e796      	b.n	8000e88 <__udivmoddi4+0x1e4>
 8000f5a:	eba7 0909 	sub.w	r9, r7, r9
 8000f5e:	4449      	add	r1, r9
 8000f60:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f64:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f68:	fb09 f804 	mul.w	r8, r9, r4
 8000f6c:	e7db      	b.n	8000f26 <__udivmoddi4+0x282>
 8000f6e:	4673      	mov	r3, lr
 8000f70:	e77f      	b.n	8000e72 <__udivmoddi4+0x1ce>
 8000f72:	4650      	mov	r0, sl
 8000f74:	e766      	b.n	8000e44 <__udivmoddi4+0x1a0>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e6fd      	b.n	8000d76 <__udivmoddi4+0xd2>
 8000f7a:	443b      	add	r3, r7
 8000f7c:	3a02      	subs	r2, #2
 8000f7e:	e733      	b.n	8000de8 <__udivmoddi4+0x144>
 8000f80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f84:	443b      	add	r3, r7
 8000f86:	e71c      	b.n	8000dc2 <__udivmoddi4+0x11e>
 8000f88:	4649      	mov	r1, r9
 8000f8a:	e79c      	b.n	8000ec6 <__udivmoddi4+0x222>
 8000f8c:	eba1 0109 	sub.w	r1, r1, r9
 8000f90:	46c4      	mov	ip, r8
 8000f92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f96:	fb09 f804 	mul.w	r8, r9, r4
 8000f9a:	e7c4      	b.n	8000f26 <__udivmoddi4+0x282>

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <PrintLog>:
#include "main.h"
#include "cmsis_os.h"
#include "gps.h"

void PrintLog(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
	UART_puts("\r\n===============================================================\r\n");
 8000fa6:	4841      	ldr	r0, [pc, #260]	@ (80010ac <PrintLog+0x10c>)
 8000fa8:	f002 f982 	bl	80032b0 <UART_puts>
	for(int i = 0; i <= k; i++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	e06f      	b.n	8001092 <PrintLog+0xf2>
	{
		UART_puts("\r\n=============================================================== Log Number = "); UART_putint(i);
 8000fb2:	483f      	ldr	r0, [pc, #252]	@ (80010b0 <PrintLog+0x110>)
 8000fb4:	f002 f97c 	bl	80032b0 <UART_puts>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f002 f994 	bl	80032e8 <UART_putint>
		UART_puts("\rStatus = "); UART_putchar(Log.Route[i].status);
 8000fc0:	483c      	ldr	r0, [pc, #240]	@ (80010b4 <PrintLog+0x114>)
 8000fc2:	f002 f975 	bl	80032b0 <UART_puts>
 8000fc6:	493c      	ldr	r1, [pc, #240]	@ (80010b8 <PrintLog+0x118>)
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f503 431c 	add.w	r3, r3, #39936	@ 0x9c00
 8000fd8:	3348      	adds	r3, #72	@ 0x48
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f002 f955 	bl	800328c <UART_putchar>
		UART_puts("\rLatitude = "); UART_putint((int)Log.Route[i].latitude);
 8000fe2:	4836      	ldr	r0, [pc, #216]	@ (80010bc <PrintLog+0x11c>)
 8000fe4:	f002 f964 	bl	80032b0 <UART_puts>
 8000fe8:	4933      	ldr	r1, [pc, #204]	@ (80010b8 <PrintLog+0x118>)
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	440b      	add	r3, r1
 8000ff6:	f503 431c 	add.w	r3, r3, #39936	@ 0x9c00
 8000ffa:	3350      	adds	r3, #80	@ 0x50
 8000ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	f7ff fdb8 	bl	8000b78 <__aeabi_d2iz>
 8001008:	4603      	mov	r3, r0
 800100a:	4618      	mov	r0, r3
 800100c:	f002 f96c 	bl	80032e8 <UART_putint>
		UART_puts("\rLongitude = "); UART_putint((int)Log.Route[i].longitude);
 8001010:	482b      	ldr	r0, [pc, #172]	@ (80010c0 <PrintLog+0x120>)
 8001012:	f002 f94d 	bl	80032b0 <UART_puts>
 8001016:	4928      	ldr	r1, [pc, #160]	@ (80010b8 <PrintLog+0x118>)
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	4613      	mov	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	440b      	add	r3, r1
 8001024:	f503 431c 	add.w	r3, r3, #39936	@ 0x9c00
 8001028:	3358      	adds	r3, #88	@ 0x58
 800102a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	f7ff fda1 	bl	8000b78 <__aeabi_d2iz>
 8001036:	4603      	mov	r3, r0
 8001038:	4618      	mov	r0, r3
 800103a:	f002 f955 	bl	80032e8 <UART_putint>
		UART_puts("\rCourse = "); UART_putint((int)Log.Route[i].course);
 800103e:	4821      	ldr	r0, [pc, #132]	@ (80010c4 <PrintLog+0x124>)
 8001040:	f002 f936 	bl	80032b0 <UART_puts>
 8001044:	491c      	ldr	r1, [pc, #112]	@ (80010b8 <PrintLog+0x118>)
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	440b      	add	r3, r1
 8001052:	f503 431c 	add.w	r3, r3, #39936	@ 0x9c00
 8001056:	3368      	adds	r3, #104	@ 0x68
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	4610      	mov	r0, r2
 800105e:	4619      	mov	r1, r3
 8001060:	f7ff fd8a 	bl	8000b78 <__aeabi_d2iz>
 8001064:	4603      	mov	r3, r0
 8001066:	4618      	mov	r0, r3
 8001068:	f002 f93e 	bl	80032e8 <UART_putint>
		UART_puts("\rLeaphy Actie = "); UART_putint((int)Log.LeaphyActie[i]);
 800106c:	4816      	ldr	r0, [pc, #88]	@ (80010c8 <PrintLog+0x128>)
 800106e:	f002 f91f 	bl	80032b0 <UART_puts>
 8001072:	4a11      	ldr	r2, [pc, #68]	@ (80010b8 <PrintLog+0x118>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4413      	add	r3, r2
 8001078:	f503 433b 	add.w	r3, r3, #47872	@ 0xbb00
 800107c:	3388      	adds	r3, #136	@ 0x88
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f002 f931 	bl	80032e8 <UART_putint>
		UART_puts("\r\n===============================================================");
 8001086:	4811      	ldr	r0, [pc, #68]	@ (80010cc <PrintLog+0x12c>)
 8001088:	f002 f912 	bl	80032b0 <UART_puts>
	for(int i = 0; i <= k; i++)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3301      	adds	r3, #1
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <PrintLog+0x130>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	429a      	cmp	r2, r3
 800109a:	dd8a      	ble.n	8000fb2 <PrintLog+0x12>
	}
	k = 0;
 800109c:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <PrintLog+0x130>)
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	08017e10 	.word	0x08017e10
 80010b0:	08017e54 	.word	0x08017e54
 80010b4:	08017ea4 	.word	0x08017ea4
 80010b8:	200009f0 	.word	0x200009f0
 80010bc:	08017eb0 	.word	0x08017eb0
 80010c0:	08017ec0 	.word	0x08017ec0
 80010c4:	08017ed0 	.word	0x08017ed0
 80010c8:	08017edc 	.word	0x08017edc
 80010cc:	08017ef0 	.word	0x08017ef0
 80010d0:	20000400 	.word	0x20000400

080010d4 <ARM_keys_IRQ>:
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void.
*/

void ARM_keys_IRQ (void *argument)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b094      	sub	sp, #80	@ 0x50
 80010d8:	af02      	add	r7, sp, #8
 80010da:	6078      	str	r0, [r7, #4]
	unsigned int 	key;
	unsigned int 	j = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	647b      	str	r3, [r7, #68]	@ 0x44
	TickType_t		start = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	643b      	str	r3, [r7, #64]	@ 0x40
	TickType_t		stop;
	osThreadId_t 	hARM_keys;
	osThreadId_t 	hData_opslaanTask;
	TaskStatus_t    TaskDetails;

	UART_puts("\r\n"); UART_puts((char *)__func__); UART_puts(" started");
 80010e4:	4865      	ldr	r0, [pc, #404]	@ (800127c <ARM_keys_IRQ+0x1a8>)
 80010e6:	f002 f8e3 	bl	80032b0 <UART_puts>
 80010ea:	4865      	ldr	r0, [pc, #404]	@ (8001280 <ARM_keys_IRQ+0x1ac>)
 80010ec:	f002 f8e0 	bl	80032b0 <UART_puts>
 80010f0:	4864      	ldr	r0, [pc, #400]	@ (8001284 <ARM_keys_IRQ+0x1b0>)
 80010f2:	f002 f8dd 	bl	80032b0 <UART_puts>

	vTaskSuspend(GetTaskhandle("drive_task"));					// stopt de drivetask bij opstart
 80010f6:	4864      	ldr	r0, [pc, #400]	@ (8001288 <ARM_keys_IRQ+0x1b4>)
 80010f8:	f001 f834 	bl	8002164 <GetTaskhandle>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4618      	mov	r0, r3
 8001100:	f00e faca 	bl	800f698 <vTaskSuspend>

	if (!(hARM_keys = GetTaskhandle("ARM_keys_task")))
 8001104:	4861      	ldr	r0, [pc, #388]	@ (800128c <ARM_keys_IRQ+0x1b8>)
 8001106:	f001 f82d 	bl	8002164 <GetTaskhandle>
 800110a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800110c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800110e:	2b00      	cmp	r3, #0
 8001110:	d102      	bne.n	8001118 <ARM_keys_IRQ+0x44>
		error_HaltOS("Err:ARM_hndle");
 8001112:	485f      	ldr	r0, [pc, #380]	@ (8001290 <ARM_keys_IRQ+0x1bc>)
 8001114:	f000 ff3e 	bl	8001f94 <error_HaltOS>
	if (!(hData_opslaanTask = GetTaskhandle("data_opslaanTask")))
 8001118:	485e      	ldr	r0, [pc, #376]	@ (8001294 <ARM_keys_IRQ+0x1c0>)
 800111a:	f001 f823 	bl	8002164 <GetTaskhandle>
 800111e:	63b8      	str	r0, [r7, #56]	@ 0x38
 8001120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001122:	2b00      	cmp	r3, #0
 8001124:	d102      	bne.n	800112c <ARM_keys_IRQ+0x58>
		error_HaltOS("Err:data_opslaan handle");
 8001126:	485c      	ldr	r0, [pc, #368]	@ (8001298 <ARM_keys_IRQ+0x1c4>)
 8001128:	f000 ff34 	bl	8001f94 <error_HaltOS>

    while (1)
	{

		// wait for ISR (EXTI0_IRQHandler()) to signal that a key is pressed
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 800112c:	4b5b      	ldr	r3, [pc, #364]	@ (800129c <ARM_keys_IRQ+0x1c8>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2300      	movs	r3, #0
 8001138:	2201      	movs	r2, #1
 800113a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800113e:	f00c fdcf 	bl	800dce0 <xEventGroupWaitBits>
 8001142:	6378      	str	r0, [r7, #52]	@ 0x34

		vTaskGetInfo(GetTaskhandle("data_opslaanTask"), &TaskDetails, pdFALSE, eInvalid);
 8001144:	4853      	ldr	r0, [pc, #332]	@ (8001294 <ARM_keys_IRQ+0x1c0>)
 8001146:	f001 f80d 	bl	8002164 <GetTaskhandle>
 800114a:	f107 010c 	add.w	r1, r7, #12
 800114e:	2305      	movs	r3, #5
 8001150:	2200      	movs	r2, #0
 8001152:	f00f f94b 	bl	80103ec <vTaskGetInfo>

		if (((key == 0x0001) || (key == 0x0002)) && ((TaskDetails.eCurrentState) != eSuspended) )// verzend alleen als task niet suspended is.
 8001156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001158:	2b01      	cmp	r3, #1
 800115a:	d002      	beq.n	8001162 <ARM_keys_IRQ+0x8e>
 800115c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800115e:	2b02      	cmp	r3, #2
 8001160:	d108      	bne.n	8001174 <ARM_keys_IRQ+0xa0>
 8001162:	7e3b      	ldrb	r3, [r7, #24]
 8001164:	2b03      	cmp	r3, #3
 8001166:	d005      	beq.n	8001174 <ARM_keys_IRQ+0xa0>
			xTaskNotify(hData_opslaanTask, key, eSetValueWithOverwrite); 	// notify Data_opslaanTask with value
 8001168:	2300      	movs	r3, #0
 800116a:	2203      	movs	r2, #3
 800116c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800116e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001170:	f00f fc82 	bl	8010a78 <xTaskGenericNotify>

		if (key == 0x0004)
 8001174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001176:	2b04      	cmp	r3, #4
 8001178:	d174      	bne.n	8001264 <ARM_keys_IRQ+0x190>
		{
			j++;
 800117a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800117c:	3301      	adds	r3, #1
 800117e:	647b      	str	r3, [r7, #68]	@ 0x44

			if(j%2 == 0)
 8001180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d13c      	bne.n	8001204 <ARM_keys_IRQ+0x130>
			{
				xSemaphoreTake(hGNRMC_Struct_Sem, portMAX_DELAY);			// wacht totdat de task klaar is met de mutex
 800118a:	4b45      	ldr	r3, [pc, #276]	@ (80012a0 <ARM_keys_IRQ+0x1cc>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f04f 31ff 	mov.w	r1, #4294967295
 8001192:	4618      	mov	r0, r3
 8001194:	f00d fbf4 	bl	800e980 <xQueueSemaphoreTake>
				vTaskResume(GetTaskhandle("data_opslaanTask"));				// start de waypoints opslaan task
 8001198:	483e      	ldr	r0, [pc, #248]	@ (8001294 <ARM_keys_IRQ+0x1c0>)
 800119a:	f000 ffe3 	bl	8002164 <GetTaskhandle>
 800119e:	4603      	mov	r3, r0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f00e fb21 	bl	800f7e8 <vTaskResume>
				vTaskSuspend(GetTaskhandle("drive_task"));					// stopt de drivetask
 80011a6:	4838      	ldr	r0, [pc, #224]	@ (8001288 <ARM_keys_IRQ+0x1b4>)
 80011a8:	f000 ffdc 	bl	8002164 <GetTaskhandle>
 80011ac:	4603      	mov	r3, r0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f00e fa72 	bl	800f698 <vTaskSuspend>
				HAL_GPIO_WritePin(GPIOD, LEDRED, GPIO_PIN_SET);				// rode led is route opslaan
 80011b4:	2201      	movs	r2, #1
 80011b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011ba:	483a      	ldr	r0, [pc, #232]	@ (80012a4 <ARM_keys_IRQ+0x1d0>)
 80011bc:	f003 fc16 	bl	80049ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, LEDGREEN, GPIO_PIN_RESET);			// groene led is drive mode
 80011c0:	2200      	movs	r2, #0
 80011c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011c6:	4837      	ldr	r0, [pc, #220]	@ (80012a4 <ARM_keys_IRQ+0x1d0>)
 80011c8:	f003 fc10 	bl	80049ec <HAL_GPIO_WritePin>
				xSemaphoreGive(hGNRMC_Struct_Sem);
 80011cc:	4b34      	ldr	r3, [pc, #208]	@ (80012a0 <ARM_keys_IRQ+0x1cc>)
 80011ce:	6818      	ldr	r0, [r3, #0]
 80011d0:	2300      	movs	r3, #0
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	f00d f951 	bl	800e47c <xQueueGenericSend>

				stop = xTaskGetTickCount() - start;							// slaat de vertreken tijd op sinds drive_task is gestart. max 4294967 sec
 80011da:	f00e fc81 	bl	800fae0 <xTaskGetTickCount>
 80011de:	4602      	mov	r2, r0
 80011e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	633b      	str	r3, [r7, #48]	@ 0x30
				UART_puts("\rtijds sinds start drive mode: ");	UART_putint(stop/1000); 	UART_puts(" seconden");
 80011e6:	4830      	ldr	r0, [pc, #192]	@ (80012a8 <ARM_keys_IRQ+0x1d4>)
 80011e8:	f002 f862 	bl	80032b0 <UART_puts>
 80011ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011ee:	4a2f      	ldr	r2, [pc, #188]	@ (80012ac <ARM_keys_IRQ+0x1d8>)
 80011f0:	fba2 2303 	umull	r2, r3, r2, r3
 80011f4:	099b      	lsrs	r3, r3, #6
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 f876 	bl	80032e8 <UART_putint>
 80011fc:	482c      	ldr	r0, [pc, #176]	@ (80012b0 <ARM_keys_IRQ+0x1dc>)
 80011fe:	f002 f857 	bl	80032b0 <UART_puts>
 8001202:	e02f      	b.n	8001264 <ARM_keys_IRQ+0x190>

			}
			else if(j%2 == 1)
 8001204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d02a      	beq.n	8001264 <ARM_keys_IRQ+0x190>
			{
				xSemaphoreTake(hGNRMC_Struct_Sem, portMAX_DELAY);			// wacht totdat de task klaar is met de mutex
 800120e:	4b24      	ldr	r3, [pc, #144]	@ (80012a0 <ARM_keys_IRQ+0x1cc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f04f 31ff 	mov.w	r1, #4294967295
 8001216:	4618      	mov	r0, r3
 8001218:	f00d fbb2 	bl	800e980 <xQueueSemaphoreTake>
				vTaskSuspend(GetTaskhandle("data_opslaanTask"));			// start de waypoints opslaan task
 800121c:	481d      	ldr	r0, [pc, #116]	@ (8001294 <ARM_keys_IRQ+0x1c0>)
 800121e:	f000 ffa1 	bl	8002164 <GetTaskhandle>
 8001222:	4603      	mov	r3, r0
 8001224:	4618      	mov	r0, r3
 8001226:	f00e fa37 	bl	800f698 <vTaskSuspend>
				vTaskResume(GetTaskhandle("drive_task"));					// start de drivetask
 800122a:	4817      	ldr	r0, [pc, #92]	@ (8001288 <ARM_keys_IRQ+0x1b4>)
 800122c:	f000 ff9a 	bl	8002164 <GetTaskhandle>
 8001230:	4603      	mov	r3, r0
 8001232:	4618      	mov	r0, r3
 8001234:	f00e fad8 	bl	800f7e8 <vTaskResume>
				HAL_GPIO_WritePin(GPIOD, LEDRED, GPIO_PIN_RESET);			// rode led is route opslaan
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800123e:	4819      	ldr	r0, [pc, #100]	@ (80012a4 <ARM_keys_IRQ+0x1d0>)
 8001240:	f003 fbd4 	bl	80049ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, LEDGREEN, GPIO_PIN_SET);			// groene led is drive mode
 8001244:	2201      	movs	r2, #1
 8001246:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800124a:	4816      	ldr	r0, [pc, #88]	@ (80012a4 <ARM_keys_IRQ+0x1d0>)
 800124c:	f003 fbce 	bl	80049ec <HAL_GPIO_WritePin>
				xSemaphoreGive(hGNRMC_Struct_Sem);
 8001250:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <ARM_keys_IRQ+0x1cc>)
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	2300      	movs	r3, #0
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	f00d f90f 	bl	800e47c <xQueueGenericSend>

				start = xTaskGetTickCount();								// als de drive_task wordt gestart wordt de begintijd opgeslagen
 800125e:	f00e fc3f 	bl	800fae0 <xTaskGetTickCount>
 8001262:	6438      	str	r0, [r7, #64]	@ 0x40
			}
		}
		if(key == 0x000D)
 8001264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001266:	2b0d      	cmp	r3, #13
 8001268:	d101      	bne.n	800126e <ARM_keys_IRQ+0x19a>
			PrintLog();
 800126a:	f7ff fe99 	bl	8000fa0 <PrintLog>

		xTaskNotify(hARM_keys, key, eSetValueWithOverwrite); // notify task2 with value
 800126e:	2300      	movs	r3, #0
 8001270:	2203      	movs	r2, #3
 8001272:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001274:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001276:	f00f fbff 	bl	8010a78 <xTaskGenericNotify>
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 800127a:	e757      	b.n	800112c <ARM_keys_IRQ+0x58>
 800127c:	08017f34 	.word	0x08017f34
 8001280:	080189d8 	.word	0x080189d8
 8001284:	08017f38 	.word	0x08017f38
 8001288:	08017f44 	.word	0x08017f44
 800128c:	08017f50 	.word	0x08017f50
 8001290:	08017f60 	.word	0x08017f60
 8001294:	08017f70 	.word	0x08017f70
 8001298:	08017f84 	.word	0x08017f84
 800129c:	20000418 	.word	0x20000418
 80012a0:	20000414 	.word	0x20000414
 80012a4:	40020c00 	.word	0x40020c00
 80012a8:	08017f9c 	.word	0x08017f9c
 80012ac:	10624dd3 	.word	0x10624dd3
 80012b0:	08017fbc 	.word	0x08017fbc

080012b4 <ARM_keys_task>:
* een schwung...
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen.
* @return void.
*/
void ARM_keys_task (void *argument)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	//int			 i, led;

	while(TRUE)
	{
		// WAITING FOR users key
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 80012bc:	f107 020c 	add.w	r2, r7, #12
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295
 80012c8:	2000      	movs	r0, #0
 80012ca:	f00f fb75 	bl	80109b8 <xTaskNotifyWait>
        		 	 	 0xffffffff, 		// ULONG_MAX, reset the notification value to 0 on exit.
    	                 &key, 				// Notified value.
    	                 portMAX_DELAY);  	// Block indefinitely.

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // krijg toegang (mutex) tot leds
 80012ce:	4b16      	ldr	r3, [pc, #88]	@ (8001328 <ARM_keys_task+0x74>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f04f 31ff 	mov.w	r1, #4294967295
 80012d6:	4618      	mov	r0, r3
 80012d8:	f00d fb52 	bl	800e980 <xQueueSemaphoreTake>

    	LED_put((unsigned char)key); // set 8 leds-byte to key-value
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f001 ff99 	bl	8003218 <LED_put>
		osDelay(500);
 80012e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012ea:	f00c fb5f 	bl	800d9ac <osDelay>

		if (Uart_debug_out & ARMKEYS_DEBUG_OUT)
 80012ee:	4b0f      	ldr	r3, [pc, #60]	@ (800132c <ARM_keys_task+0x78>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d006      	beq.n	8001308 <ARM_keys_task+0x54>
		{
			UART_puts("\r\n\tARM_key pressed to leds: "); UART_putint(key);
 80012fa:	480d      	ldr	r0, [pc, #52]	@ (8001330 <ARM_keys_task+0x7c>)
 80012fc:	f001 ffd8 	bl	80032b0 <UART_puts>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4618      	mov	r0, r3
 8001304:	f001 fff0 	bl	80032e8 <UART_putint>
		}

	    xSemaphoreGive(hLED_Sem); // geef toegang (mutex) vrij
 8001308:	4b07      	ldr	r3, [pc, #28]	@ (8001328 <ARM_keys_task+0x74>)
 800130a:	6818      	ldr	r0, [r3, #0]
 800130c:	2300      	movs	r3, #0
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	f00d f8b3 	bl	800e47c <xQueueGenericSend>

     	taskYIELD(); // done, force context switch
 8001316:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <ARM_keys_task+0x80>)
 8001318:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	f3bf 8f4f 	dsb	sy
 8001322:	f3bf 8f6f 	isb	sy
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 8001326:	e7c9      	b.n	80012bc <ARM_keys_task+0x8>
 8001328:	20000410 	.word	0x20000410
 800132c:	20000404 	.word	0x20000404
 8001330:	08017fc8 	.word	0x08017fc8
 8001334:	e000ed04 	.word	0xe000ed04

08001338 <DtoR>:

int k = 0;

// Graden naar radialen
double DtoR(double Graden)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	ed87 0b00 	vstr	d0, [r7]
	return(PI * Graden / 180);
 8001342:	a30e      	add	r3, pc, #56	@ (adr r3, 800137c <DtoR+0x44>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	e9d7 0100 	ldrd	r0, r1, [r7]
 800134c:	f7ff f964 	bl	8000618 <__aeabi_dmul>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <DtoR+0x40>)
 800135e:	f7ff fa85 	bl	800086c <__aeabi_ddiv>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	ec43 2b17 	vmov	d7, r2, r3
}
 800136a:	eeb0 0a47 	vmov.f32	s0, s14
 800136e:	eef0 0a67 	vmov.f32	s1, s15
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40668000 	.word	0x40668000
 800137c:	54411744 	.word	0x54411744
 8001380:	400921fb 	.word	0x400921fb
 8001384:	00000000 	.word	0x00000000

08001388 <RtoD>:

// Radialen naar graden
double RtoD(double Radialen)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	ed87 0b00 	vstr	d0, [r7]
    return (Radialen * 180.0 / PI);
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <RtoD+0x48>)
 8001398:	e9d7 0100 	ldrd	r0, r1, [r7]
 800139c:	f7ff f93c 	bl	8000618 <__aeabi_dmul>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	a307      	add	r3, pc, #28	@ (adr r3, 80013c8 <RtoD+0x40>)
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	f7ff fa5d 	bl	800086c <__aeabi_ddiv>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	ec43 2b17 	vmov	d7, r2, r3
}
 80013ba:	eeb0 0a47 	vmov.f32	s0, s14
 80013be:	eef0 0a67 	vmov.f32	s1, s15
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	54411744 	.word	0x54411744
 80013cc:	400921fb 	.word	0x400921fb
 80013d0:	40668000 	.word	0x40668000
 80013d4:	00000000 	.word	0x00000000

080013d8 <Afstand_Course_Bepalen>:
* @brief Functie voor het bepalen van de afstand tussen huidige positie en waypoint. <BR>
* Eigelijk ben je aan het pythagorassen maar dan met de extra stap van de bolling van de aarde.
* @return void
*/
void Afstand_Course_Bepalen(void)
{
 80013d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013dc:	b090      	sub	sp, #64	@ 0x40
 80013de:	af00      	add	r7, sp, #0
	double radPosLong = DtoR(Gem.longitude);
 80013e0:	4ba1      	ldr	r3, [pc, #644]	@ (8001668 <Afstand_Course_Bepalen+0x290>)
 80013e2:	ed93 7b04 	vldr	d7, [r3, #16]
 80013e6:	eeb0 0a47 	vmov.f32	s0, s14
 80013ea:	eef0 0a67 	vmov.f32	s1, s15
 80013ee:	f7ff ffa3 	bl	8001338 <DtoR>
 80013f2:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
	double radPosLati = DtoR(Gem.latitude);
 80013f6:	4b9c      	ldr	r3, [pc, #624]	@ (8001668 <Afstand_Course_Bepalen+0x290>)
 80013f8:	ed93 7b02 	vldr	d7, [r3, #8]
 80013fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001400:	eef0 0a67 	vmov.f32	s1, s15
 8001404:	f7ff ff98 	bl	8001338 <DtoR>
 8001408:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
	double radWayLong = DtoR(waypoints[0].longitude); // 0 later vervangen met het te zoeken waypoint
 800140c:	4b97      	ldr	r3, [pc, #604]	@ (800166c <Afstand_Course_Bepalen+0x294>)
 800140e:	ed93 7b04 	vldr	d7, [r3, #16]
 8001412:	eeb0 0a47 	vmov.f32	s0, s14
 8001416:	eef0 0a67 	vmov.f32	s1, s15
 800141a:	f7ff ff8d 	bl	8001338 <DtoR>
 800141e:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	double radWayLati = DtoR(waypoints[0].latitude);
 8001422:	4b92      	ldr	r3, [pc, #584]	@ (800166c <Afstand_Course_Bepalen+0x294>)
 8001424:	ed93 7b02 	vldr	d7, [r3, #8]
 8001428:	eeb0 0a47 	vmov.f32	s0, s14
 800142c:	eef0 0a67 	vmov.f32	s1, s15
 8001430:	f7ff ff82 	bl	8001338 <DtoR>
 8001434:	ed87 0b08 	vstr	d0, [r7, #32]

	// Equirectangular approximation toepassen om de afstand tot waypoint en course te vinden naar waypoint
	// Omdat de afstanden tussen de punten relatief klein zijn zou de bolling van de aarde ook verwaarloosd worden
	double x_l = (radWayLong-radPosLong) * cos((radWayLati+radPosLati)/2);
 8001438:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800143c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001440:	f7fe ff32 	bl	80002a8 <__aeabi_dsub>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4614      	mov	r4, r2
 800144a:	461d      	mov	r5, r3
 800144c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001450:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001454:	f7fe ff2a 	bl	80002ac <__adddf3>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001468:	f7ff fa00 	bl	800086c <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	ec43 2b17 	vmov	d7, r2, r3
 8001474:	eeb0 0a47 	vmov.f32	s0, s14
 8001478:	eef0 0a67 	vmov.f32	s1, s15
 800147c:	f015 f804 	bl	8016488 <cos>
 8001480:	ec53 2b10 	vmov	r2, r3, d0
 8001484:	4620      	mov	r0, r4
 8001486:	4629      	mov	r1, r5
 8001488:	f7ff f8c6 	bl	8000618 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double y_l = radWayLati-radPosLati;
 8001494:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001498:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800149c:	f7fe ff04 	bl	80002a8 <__aeabi_dsub>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	vector.lengte = r_aarde * sqrt(x_l*x_l + y_l*y_l);
 80014a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014b0:	f7ff f8b2 	bl	8000618 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4614      	mov	r4, r2
 80014ba:	461d      	mov	r5, r3
 80014bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014c4:	f7ff f8a8 	bl	8000618 <__aeabi_dmul>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4620      	mov	r0, r4
 80014ce:	4629      	mov	r1, r5
 80014d0:	f7fe feec 	bl	80002ac <__adddf3>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	ec43 2b17 	vmov	d7, r2, r3
 80014dc:	eeb0 0a47 	vmov.f32	s0, s14
 80014e0:	eef0 0a67 	vmov.f32	s1, s15
 80014e4:	f014 ffa4 	bl	8016430 <sqrt>
 80014e8:	ec51 0b10 	vmov	r0, r1, d0
 80014ec:	a358      	add	r3, pc, #352	@ (adr r3, 8001650 <Afstand_Course_Bepalen+0x278>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7ff f891 	bl	8000618 <__aeabi_dmul>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	495d      	ldr	r1, [pc, #372]	@ (8001670 <Afstand_Course_Bepalen+0x298>)
 80014fc:	e9c1 2300 	strd	r2, r3, [r1]


	double y_c = sin(radPosLati-radWayLati) * cos(radWayLong);
 8001500:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001504:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001508:	f7fe fece 	bl	80002a8 <__aeabi_dsub>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	ec43 2b17 	vmov	d7, r2, r3
 8001514:	eeb0 0a47 	vmov.f32	s0, s14
 8001518:	eef0 0a67 	vmov.f32	s1, s15
 800151c:	f015 f808 	bl	8016530 <sin>
 8001520:	ec55 4b10 	vmov	r4, r5, d0
 8001524:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001528:	f014 ffae 	bl	8016488 <cos>
 800152c:	ec53 2b10 	vmov	r2, r3, d0
 8001530:	4620      	mov	r0, r4
 8001532:	4629      	mov	r1, r5
 8001534:	f7ff f870 	bl	8000618 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double x_c = cos(radPosLong) * sin(radWayLong) - sin(radPosLong) * cos(radWayLong) * cos(radPosLati-radWayLati);
 8001540:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001544:	f014 ffa0 	bl	8016488 <cos>
 8001548:	ec55 4b10 	vmov	r4, r5, d0
 800154c:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001550:	f014 ffee 	bl	8016530 <sin>
 8001554:	ec53 2b10 	vmov	r2, r3, d0
 8001558:	4620      	mov	r0, r4
 800155a:	4629      	mov	r1, r5
 800155c:	f7ff f85c 	bl	8000618 <__aeabi_dmul>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4614      	mov	r4, r2
 8001566:	461d      	mov	r5, r3
 8001568:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 800156c:	f014 ffe0 	bl	8016530 <sin>
 8001570:	ec59 8b10 	vmov	r8, r9, d0
 8001574:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001578:	f014 ff86 	bl	8016488 <cos>
 800157c:	ec53 2b10 	vmov	r2, r3, d0
 8001580:	4640      	mov	r0, r8
 8001582:	4649      	mov	r1, r9
 8001584:	f7ff f848 	bl	8000618 <__aeabi_dmul>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4690      	mov	r8, r2
 800158e:	4699      	mov	r9, r3
 8001590:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001594:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001598:	f7fe fe86 	bl	80002a8 <__aeabi_dsub>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	ec43 2b17 	vmov	d7, r2, r3
 80015a4:	eeb0 0a47 	vmov.f32	s0, s14
 80015a8:	eef0 0a67 	vmov.f32	s1, s15
 80015ac:	f014 ff6c 	bl	8016488 <cos>
 80015b0:	ec53 2b10 	vmov	r2, r3, d0
 80015b4:	4640      	mov	r0, r8
 80015b6:	4649      	mov	r1, r9
 80015b8:	f7ff f82e 	bl	8000618 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4620      	mov	r0, r4
 80015c2:	4629      	mov	r1, r5
 80015c4:	f7fe fe70 	bl	80002a8 <__aeabi_dsub>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	e9c7 2300 	strd	r2, r3, [r7]
	vector.course = fmod(RtoD(atan2(x_c, y_c)) + 450.0, 360.0);
 80015d0:	ed97 1b02 	vldr	d1, [r7, #8]
 80015d4:	ed97 0b00 	vldr	d0, [r7]
 80015d8:	f014 fefa 	bl	80163d0 <atan2>
 80015dc:	eeb0 7a40 	vmov.f32	s14, s0
 80015e0:	eef0 7a60 	vmov.f32	s15, s1
 80015e4:	eeb0 0a47 	vmov.f32	s0, s14
 80015e8:	eef0 0a67 	vmov.f32	s1, s15
 80015ec:	f7ff fecc 	bl	8001388 <RtoD>
 80015f0:	ec51 0b10 	vmov	r0, r1, d0
 80015f4:	a318      	add	r3, pc, #96	@ (adr r3, 8001658 <Afstand_Course_Bepalen+0x280>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7fe fe57 	bl	80002ac <__adddf3>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	ec43 2b17 	vmov	d7, r2, r3
 8001606:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8001660 <Afstand_Course_Bepalen+0x288>
 800160a:	eeb0 0a47 	vmov.f32	s0, s14
 800160e:	eef0 0a67 	vmov.f32	s1, s15
 8001612:	f014 fedf 	bl	80163d4 <fmod>
 8001616:	eeb0 7a40 	vmov.f32	s14, s0
 800161a:	eef0 7a60 	vmov.f32	s15, s1
 800161e:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <Afstand_Course_Bepalen+0x298>)
 8001620:	ed83 7b02 	vstr	d7, [r3, #8]
	vector.course = (int)vector.course;
 8001624:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <Afstand_Course_Bepalen+0x298>)
 8001626:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	f7ff faa3 	bl	8000b78 <__aeabi_d2iz>
 8001632:	4603      	mov	r3, r0
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff85 	bl	8000544 <__aeabi_i2d>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	490c      	ldr	r1, [pc, #48]	@ (8001670 <Afstand_Course_Bepalen+0x298>)
 8001640:	e9c1 2302 	strd	r2, r3, [r1, #8]

	// Print voor het testen
	//UART_puts("\r\rAfstand tussen huidige positie en waypoint = "); UART_putint((int)vector.lengte);
	//UART_puts("\rCourse Richting waypoint vanaf huidige positie = "); UART_putint((int)vector.course);
	//UART_puts("\rHuidige Course = "); UART_putint((int)GNRMC_data.course);
}
 8001644:	bf00      	nop
 8001646:	3740      	adds	r7, #64	@ 0x40
 8001648:	46bd      	mov	sp, r7
 800164a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800164e:	bf00      	nop
 8001650:	00000000 	.word	0x00000000
 8001654:	41584dae 	.word	0x41584dae
 8001658:	00000000 	.word	0x00000000
 800165c:	407c2000 	.word	0x407c2000
 8001660:	00000000 	.word	0x00000000
 8001664:	40768000 	.word	0x40768000
 8001668:	200004a0 	.word	0x200004a0
 800166c:	20000540 	.word	0x20000540
 8001670:	200003f0 	.word	0x200003f0

08001674 <Leaphy_Actie_Bepalen>:
* @brief Functie om te bepalen wat de actie van de leaphy moet zijn op basis van de eerder berekende course naar de waypoint en de huidige course.
* @param int afstand gelezen door de sensor
* @return void
*/
char Leaphy_Actie_Bepalen(int)
{
 8001674:	b5b0      	push	{r4, r5, r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	if(!(GNRMC_data.course))
 800167c:	4b43      	ldr	r3, [pc, #268]	@ (800178c <Leaphy_Actie_Bepalen+0x118>)
 800167e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	f7ff fa2d 	bl	8000ae8 <__aeabi_dcmpeq>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <Leaphy_Actie_Bepalen+0x24>
		return 0x01;
 8001694:	2301      	movs	r3, #1
 8001696:	e074      	b.n	8001782 <Leaphy_Actie_Bepalen+0x10e>

	int course = ((int)GNRMC_data.course + 360) % 360;
 8001698:	4b3c      	ldr	r3, [pc, #240]	@ (800178c <Leaphy_Actie_Bepalen+0x118>)
 800169a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f7ff fa69 	bl	8000b78 <__aeabi_d2iz>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80016ac:	4a38      	ldr	r2, [pc, #224]	@ (8001790 <Leaphy_Actie_Bepalen+0x11c>)
 80016ae:	fb82 1203 	smull	r1, r2, r2, r3
 80016b2:	441a      	add	r2, r3
 80016b4:	1211      	asrs	r1, r2, #8
 80016b6:	17da      	asrs	r2, r3, #31
 80016b8:	1a8a      	subs	r2, r1, r2
 80016ba:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80016be:	fb01 f202 	mul.w	r2, r1, r2
 80016c2:	1a9b      	subs	r3, r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
	UART_puts("\rHuidigeCourse = "); UART_putint(course);
 80016c6:	4833      	ldr	r0, [pc, #204]	@ (8001794 <Leaphy_Actie_Bepalen+0x120>)
 80016c8:	f001 fdf2 	bl	80032b0 <UART_puts>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f001 fe0a 	bl	80032e8 <UART_putint>
	UART_puts("\rVectorCourse = "); UART_putint(vector.course);
 80016d4:	4830      	ldr	r0, [pc, #192]	@ (8001798 <Leaphy_Actie_Bepalen+0x124>)
 80016d6:	f001 fdeb 	bl	80032b0 <UART_puts>
 80016da:	4b30      	ldr	r3, [pc, #192]	@ (800179c <Leaphy_Actie_Bepalen+0x128>)
 80016dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff fa70 	bl	8000bc8 <__aeabi_d2uiz>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f001 fdfc 	bl	80032e8 <UART_putint>
	int courseDiff;

	courseDiff = abs(vector.course - course);
 80016f0:	4b2a      	ldr	r3, [pc, #168]	@ (800179c <Leaphy_Actie_Bepalen+0x128>)
 80016f2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f7fe ff24 	bl	8000544 <__aeabi_i2d>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4620      	mov	r0, r4
 8001702:	4629      	mov	r1, r5
 8001704:	f7fe fdd0 	bl	80002a8 <__aeabi_dsub>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	f7ff fa32 	bl	8000b78 <__aeabi_d2iz>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	bfb8      	it	lt
 800171a:	425b      	neglt	r3, r3
 800171c:	60bb      	str	r3, [r7, #8]
	UART_puts("\rCourseDiff = "); UART_putint(courseDiff);
 800171e:	4820      	ldr	r0, [pc, #128]	@ (80017a0 <Leaphy_Actie_Bepalen+0x12c>)
 8001720:	f001 fdc6 	bl	80032b0 <UART_puts>
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	4618      	mov	r0, r3
 8001728:	f001 fdde 	bl	80032e8 <UART_putint>

	// Bepaal aan de hand van het verschil in course hoe erg er gecorrigeerd moet worden.
	if(courseDiff > 180) 		// Links
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	2bb4      	cmp	r3, #180	@ 0xb4
 8001730:	dd12      	ble.n	8001758 <Leaphy_Actie_Bepalen+0xe4>
	{
		courseDiff = abs(courseDiff - 360);
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001738:	2b00      	cmp	r3, #0
 800173a:	bfb8      	it	lt
 800173c:	425b      	neglt	r3, r3
 800173e:	60bb      	str	r3, [r7, #8]
		if(courseDiff < 30)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2b1d      	cmp	r3, #29
 8001744:	dc01      	bgt.n	800174a <Leaphy_Actie_Bepalen+0xd6>
			return 0x01;		// Rechtdoor
 8001746:	2301      	movs	r3, #1
 8001748:	e01b      	b.n	8001782 <Leaphy_Actie_Bepalen+0x10e>
		if(courseDiff < 115)
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	2b72      	cmp	r3, #114	@ 0x72
 800174e:	dc01      	bgt.n	8001754 <Leaphy_Actie_Bepalen+0xe0>
			return 0x04;		// Links
 8001750:	2304      	movs	r3, #4
 8001752:	e016      	b.n	8001782 <Leaphy_Actie_Bepalen+0x10e>
		return 0x05;			// Snel Links
 8001754:	2305      	movs	r3, #5
 8001756:	e014      	b.n	8001782 <Leaphy_Actie_Bepalen+0x10e>
	}
	else if(courseDiff < 180) 	// Rechts
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2bb3      	cmp	r3, #179	@ 0xb3
 800175c:	dc0b      	bgt.n	8001776 <Leaphy_Actie_Bepalen+0x102>
	{
		if(courseDiff < 30)
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2b1d      	cmp	r3, #29
 8001762:	dc01      	bgt.n	8001768 <Leaphy_Actie_Bepalen+0xf4>
			return 0x01;		// Rechtdoor
 8001764:	2301      	movs	r3, #1
 8001766:	e00c      	b.n	8001782 <Leaphy_Actie_Bepalen+0x10e>
		if(courseDiff < 115)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b72      	cmp	r3, #114	@ 0x72
 800176c:	dc01      	bgt.n	8001772 <Leaphy_Actie_Bepalen+0xfe>
			return 0x02;		// Rechts
 800176e:	2302      	movs	r3, #2
 8001770:	e007      	b.n	8001782 <Leaphy_Actie_Bepalen+0x10e>
		return 0x03;			// Snel Rechts
 8001772:	2303      	movs	r3, #3
 8001774:	e005      	b.n	8001782 <Leaphy_Actie_Bepalen+0x10e>
	}
	else if(courseDiff == 0)
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <Leaphy_Actie_Bepalen+0x10c>
		return 0x01;			// Rechtdoor
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <Leaphy_Actie_Bepalen+0x10e>
	return 0x00;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bdb0      	pop	{r4, r5, r7, pc}
 800178a:	bf00      	nop
 800178c:	20000478 	.word	0x20000478
 8001790:	b60b60b7 	.word	0xb60b60b7
 8001794:	08017fe8 	.word	0x08017fe8
 8001798:	08017ffc 	.word	0x08017ffc
 800179c:	200003f0 	.word	0x200003f0
 80017a0:	08018010 	.word	0x08018010

080017a4 <Leaphy_Data_Sturen>:
* @brief Functie om de pins aan te sturen die de arduino op de leaphy kan uitlezen.
* @param char data die naar de arduino gestuurd moet worden.
* @return void
*/
void Leaphy_Data_Sturen(char data)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
	Log.LeaphyActie[k] = data;
 80017ae:	4b4c      	ldr	r3, [pc, #304]	@ (80018e0 <Leaphy_Data_Sturen+0x13c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a4c      	ldr	r2, [pc, #304]	@ (80018e4 <Leaphy_Data_Sturen+0x140>)
 80017b4:	4413      	add	r3, r2
 80017b6:	f503 433b 	add.w	r3, r3, #47872	@ 0xbb00
 80017ba:	3388      	adds	r3, #136	@ 0x88
 80017bc:	79fa      	ldrb	r2, [r7, #7]
 80017be:	701a      	strb	r2, [r3, #0]
	// 4 bits data naar de Arduino sturen. Bits worden bepaald afhankelijk van de functie Leaphy_actie_Bepalen
	if(0b0001 & data)
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <Leaphy_Data_Sturen+0x34>
		HAL_GPIO_WritePin(GPIOE, Ard_Bit1_Pin, SET);
 80017cc:	2201      	movs	r2, #1
 80017ce:	2180      	movs	r1, #128	@ 0x80
 80017d0:	4845      	ldr	r0, [pc, #276]	@ (80018e8 <Leaphy_Data_Sturen+0x144>)
 80017d2:	f003 f90b 	bl	80049ec <HAL_GPIO_WritePin>
 80017d6:	e004      	b.n	80017e2 <Leaphy_Data_Sturen+0x3e>
	else
		HAL_GPIO_WritePin(GPIOE, Ard_Bit1_Pin, RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	2180      	movs	r1, #128	@ 0x80
 80017dc:	4842      	ldr	r0, [pc, #264]	@ (80018e8 <Leaphy_Data_Sturen+0x144>)
 80017de:	f003 f905 	bl	80049ec <HAL_GPIO_WritePin>
	if(0b0010 & data)
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <Leaphy_Data_Sturen+0x58>
		HAL_GPIO_WritePin(GPIOE, Ard_Bit2_Pin, SET);
 80017ee:	2201      	movs	r2, #1
 80017f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017f4:	483c      	ldr	r0, [pc, #240]	@ (80018e8 <Leaphy_Data_Sturen+0x144>)
 80017f6:	f003 f8f9 	bl	80049ec <HAL_GPIO_WritePin>
 80017fa:	e005      	b.n	8001808 <Leaphy_Data_Sturen+0x64>
	else
		HAL_GPIO_WritePin(GPIOE, Ard_Bit2_Pin, RESET);
 80017fc:	2200      	movs	r2, #0
 80017fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001802:	4839      	ldr	r0, [pc, #228]	@ (80018e8 <Leaphy_Data_Sturen+0x144>)
 8001804:	f003 f8f2 	bl	80049ec <HAL_GPIO_WritePin>
	if(0b0100 & data)
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <Leaphy_Data_Sturen+0x7e>
		HAL_GPIO_WritePin(GPIOE, Ard_Bit3_Pin, SET);
 8001814:	2201      	movs	r2, #1
 8001816:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800181a:	4833      	ldr	r0, [pc, #204]	@ (80018e8 <Leaphy_Data_Sturen+0x144>)
 800181c:	f003 f8e6 	bl	80049ec <HAL_GPIO_WritePin>
 8001820:	e005      	b.n	800182e <Leaphy_Data_Sturen+0x8a>
	else
		HAL_GPIO_WritePin(GPIOE, Ard_Bit3_Pin, RESET);
 8001822:	2200      	movs	r2, #0
 8001824:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001828:	482f      	ldr	r0, [pc, #188]	@ (80018e8 <Leaphy_Data_Sturen+0x144>)
 800182a:	f003 f8df 	bl	80049ec <HAL_GPIO_WritePin>
	if(0b1000 & data)
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d006      	beq.n	8001848 <Leaphy_Data_Sturen+0xa4>
		HAL_GPIO_WritePin(GPIOE, Ard_Bit4_Pin, SET);
 800183a:	2201      	movs	r2, #1
 800183c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001840:	4829      	ldr	r0, [pc, #164]	@ (80018e8 <Leaphy_Data_Sturen+0x144>)
 8001842:	f003 f8d3 	bl	80049ec <HAL_GPIO_WritePin>
 8001846:	e005      	b.n	8001854 <Leaphy_Data_Sturen+0xb0>
	else
		HAL_GPIO_WritePin(GPIOE, Ard_Bit4_Pin, RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800184e:	4826      	ldr	r0, [pc, #152]	@ (80018e8 <Leaphy_Data_Sturen+0x144>)
 8001850:	f003 f8cc 	bl	80049ec <HAL_GPIO_WritePin>

	// print voor het testen
	switch(data)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	3b01      	subs	r3, #1
 8001858:	2b0e      	cmp	r3, #14
 800185a:	d839      	bhi.n	80018d0 <Leaphy_Data_Sturen+0x12c>
 800185c:	a201      	add	r2, pc, #4	@ (adr r2, 8001864 <Leaphy_Data_Sturen+0xc0>)
 800185e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001862:	bf00      	nop
 8001864:	080018a1 	.word	0x080018a1
 8001868:	080018a9 	.word	0x080018a9
 800186c:	080018b1 	.word	0x080018b1
 8001870:	080018b9 	.word	0x080018b9
 8001874:	080018c1 	.word	0x080018c1
 8001878:	080018d1 	.word	0x080018d1
 800187c:	080018d1 	.word	0x080018d1
 8001880:	080018d1 	.word	0x080018d1
 8001884:	080018d1 	.word	0x080018d1
 8001888:	080018d1 	.word	0x080018d1
 800188c:	080018d1 	.word	0x080018d1
 8001890:	080018d1 	.word	0x080018d1
 8001894:	080018d1 	.word	0x080018d1
 8001898:	080018d1 	.word	0x080018d1
 800189c:	080018c9 	.word	0x080018c9
	{
	case 0x01:	UART_puts("\rRechtdoor");
 80018a0:	4812      	ldr	r0, [pc, #72]	@ (80018ec <Leaphy_Data_Sturen+0x148>)
 80018a2:	f001 fd05 	bl	80032b0 <UART_puts>
				break;
 80018a6:	e017      	b.n	80018d8 <Leaphy_Data_Sturen+0x134>
	case 0x02:	UART_puts("\rLangzaam naar rechts");
 80018a8:	4811      	ldr	r0, [pc, #68]	@ (80018f0 <Leaphy_Data_Sturen+0x14c>)
 80018aa:	f001 fd01 	bl	80032b0 <UART_puts>
				break;
 80018ae:	e013      	b.n	80018d8 <Leaphy_Data_Sturen+0x134>
	case 0x03:	UART_puts("\rSnel naar rechts");
 80018b0:	4810      	ldr	r0, [pc, #64]	@ (80018f4 <Leaphy_Data_Sturen+0x150>)
 80018b2:	f001 fcfd 	bl	80032b0 <UART_puts>
				break;
 80018b6:	e00f      	b.n	80018d8 <Leaphy_Data_Sturen+0x134>
	case 0x04:	UART_puts("\rLangzaam naar links");
 80018b8:	480f      	ldr	r0, [pc, #60]	@ (80018f8 <Leaphy_Data_Sturen+0x154>)
 80018ba:	f001 fcf9 	bl	80032b0 <UART_puts>
				break;
 80018be:	e00b      	b.n	80018d8 <Leaphy_Data_Sturen+0x134>
	case 0x05:	UART_puts("\rSnel naar links");
 80018c0:	480e      	ldr	r0, [pc, #56]	@ (80018fc <Leaphy_Data_Sturen+0x158>)
 80018c2:	f001 fcf5 	bl	80032b0 <UART_puts>
				break;
 80018c6:	e007      	b.n	80018d8 <Leaphy_Data_Sturen+0x134>
	case 0x0F:  UART_puts("\rGeen course data beschikbaar");
 80018c8:	480d      	ldr	r0, [pc, #52]	@ (8001900 <Leaphy_Data_Sturen+0x15c>)
 80018ca:	f001 fcf1 	bl	80032b0 <UART_puts>
				break;
 80018ce:	e003      	b.n	80018d8 <Leaphy_Data_Sturen+0x134>
	default:	UART_puts("\rError kan geen keuze maken");
 80018d0:	480c      	ldr	r0, [pc, #48]	@ (8001904 <Leaphy_Data_Sturen+0x160>)
 80018d2:	f001 fced 	bl	80032b0 <UART_puts>
				break;
 80018d6:	bf00      	nop
	}
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000400 	.word	0x20000400
 80018e4:	200009f0 	.word	0x200009f0
 80018e8:	40021000 	.word	0x40021000
 80018ec:	08018020 	.word	0x08018020
 80018f0:	0801802c 	.word	0x0801802c
 80018f4:	08018044 	.word	0x08018044
 80018f8:	08018058 	.word	0x08018058
 80018fc:	08018070 	.word	0x08018070
 8001900:	08018084 	.word	0x08018084
 8001904:	080180a4 	.word	0x080180a4

08001908 <Average_Bepalen_Drive>:
/**
* @brief Functie om gemiddelde van 3 datapunten op de slaan voor nauwkeurigere locatie.
* @return void
*/
void Average_Bepalen_Drive(void)
{
 8001908:	b5b0      	push	{r4, r5, r7, lr}
 800190a:	af00      	add	r7, sp, #0
	Log.Route[k] = GNRMC_data;
 800190c:	4b3a      	ldr	r3, [pc, #232]	@ (80019f8 <Average_Bepalen_Drive+0xf0>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	493a      	ldr	r1, [pc, #232]	@ (80019fc <Average_Bepalen_Drive+0xf4>)
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	440b      	add	r3, r1
 800191c:	f503 431c 	add.w	r3, r3, #39936	@ 0x9c00
 8001920:	3348      	adds	r3, #72	@ 0x48
 8001922:	4a37      	ldr	r2, [pc, #220]	@ (8001a00 <Average_Bepalen_Drive+0xf8>)
 8001924:	461c      	mov	r4, r3
 8001926:	4615      	mov	r5, r2
 8001928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800192a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800192c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800192e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001930:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001934:	e884 0003 	stmia.w	r4, {r0, r1}
	// Gemiddelde nemen van de laatste 3 ingekomen gps berichten										// neem de mutex zodat average[] thread safe blijft
	Gem.latitude = (average[0].latitude + average[1].latitude + average[2].latitude)/3; 	// gemiddelde wordt berekend en opgeslagen
 8001938:	4b32      	ldr	r3, [pc, #200]	@ (8001a04 <Average_Bepalen_Drive+0xfc>)
 800193a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800193e:	4b31      	ldr	r3, [pc, #196]	@ (8001a04 <Average_Bepalen_Drive+0xfc>)
 8001940:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001944:	f7fe fcb2 	bl	80002ac <__adddf3>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	4b2c      	ldr	r3, [pc, #176]	@ (8001a04 <Average_Bepalen_Drive+0xfc>)
 8001952:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001956:	f7fe fca9 	bl	80002ac <__adddf3>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	4b28      	ldr	r3, [pc, #160]	@ (8001a08 <Average_Bepalen_Drive+0x100>)
 8001968:	f7fe ff80 	bl	800086c <__aeabi_ddiv>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4926      	ldr	r1, [pc, #152]	@ (8001a0c <Average_Bepalen_Drive+0x104>)
 8001972:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Gem.longitude = (average[0].longitude + average[1].longitude + average[2].longitude)/3;
 8001976:	4b23      	ldr	r3, [pc, #140]	@ (8001a04 <Average_Bepalen_Drive+0xfc>)
 8001978:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800197c:	4b21      	ldr	r3, [pc, #132]	@ (8001a04 <Average_Bepalen_Drive+0xfc>)
 800197e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001982:	f7fe fc93 	bl	80002ac <__adddf3>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a04 <Average_Bepalen_Drive+0xfc>)
 8001990:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001994:	f7fe fc8a 	bl	80002ac <__adddf3>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <Average_Bepalen_Drive+0x100>)
 80019a6:	f7fe ff61 	bl	800086c <__aeabi_ddiv>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4917      	ldr	r1, [pc, #92]	@ (8001a0c <Average_Bepalen_Drive+0x104>)
 80019b0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	Gem.speed = (average[0].speed + average[1].speed + average[2].speed)/3;													// geef de mutex op average[] weer terug
 80019b4:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <Average_Bepalen_Drive+0xfc>)
 80019b6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80019ba:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <Average_Bepalen_Drive+0xfc>)
 80019bc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80019c0:	f7fe fc74 	bl	80002ac <__adddf3>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001a04 <Average_Bepalen_Drive+0xfc>)
 80019ce:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80019d2:	f7fe fc6b 	bl	80002ac <__adddf3>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <Average_Bepalen_Drive+0x100>)
 80019e4:	f7fe ff42 	bl	800086c <__aeabi_ddiv>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4907      	ldr	r1, [pc, #28]	@ (8001a0c <Average_Bepalen_Drive+0x104>)
 80019ee:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80019f2:	bf00      	nop
 80019f4:	bdb0      	pop	{r4, r5, r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000400 	.word	0x20000400
 80019fc:	200009f0 	.word	0x200009f0
 8001a00:	20000478 	.word	0x20000478
 8001a04:	200004c8 	.word	0x200004c8
 8001a08:	40080000 	.word	0x40080000
 8001a0c:	200004a0 	.word	0x200004a0

08001a10 <drive_task>:
* @brief Deze drive_task moet worden gestart als knopje hiervoor wordt ingedrukt.<BR>
* Dan moet de leaphy de waypoints volgens zonder tegen een muur aan te botsen.
* @return void
*/
void drive_task(void*)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	while(TRUE)
	{
		xSemaphoreTake(hGNRMC_Struct_Sem, portMAX_DELAY);
 8001a18:	4b1c      	ldr	r3, [pc, #112]	@ (8001a8c <drive_task+0x7c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	4618      	mov	r0, r3
 8001a22:	f00c ffad 	bl	800e980 <xQueueSemaphoreTake>
		if(!(GNRMC_data.status == 'A'))
 8001a26:	4b1a      	ldr	r3, [pc, #104]	@ (8001a90 <drive_task+0x80>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b41      	cmp	r3, #65	@ 0x41
 8001a2c:	d00a      	beq.n	8001a44 <drive_task+0x34>
		{
			xSemaphoreGive(hGNRMC_Struct_Sem);
 8001a2e:	4b17      	ldr	r3, [pc, #92]	@ (8001a8c <drive_task+0x7c>)
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	2300      	movs	r3, #0
 8001a34:	2200      	movs	r2, #0
 8001a36:	2100      	movs	r1, #0
 8001a38:	f00c fd20 	bl	800e47c <xQueueGenericSend>
			osDelay(200);
 8001a3c:	20c8      	movs	r0, #200	@ 0xc8
 8001a3e:	f00b ffb5 	bl	800d9ac <osDelay>
			continue;
 8001a42:	e022      	b.n	8001a8a <drive_task+0x7a>
		}
		Average_Bepalen_Drive();
 8001a44:	f7ff ff60 	bl	8001908 <Average_Bepalen_Drive>
		Afstand_Course_Bepalen();
 8001a48:	f7ff fcc6 	bl	80013d8 <Afstand_Course_Bepalen>
		xSemaphoreGive(hGNRMC_Struct_Sem);
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a8c <drive_task+0x7c>)
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	2300      	movs	r3, #0
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	f00c fd11 	bl	800e47c <xQueueGenericSend>
		//UART_puts("\rAfstand = "); UART_putint((int)GetDistance()); // tijdelijke print voor de HC-SR04 sensor
		char Data = Leaphy_Actie_Bepalen(1); // 1 moet vervangen worden met GetDistance() zodra deze daarvoor klaar is
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f7ff fe0a 	bl	8001674 <Leaphy_Actie_Bepalen>
 8001a60:	4603      	mov	r3, r0
 8001a62:	73fb      	strb	r3, [r7, #15]
		Leaphy_Data_Sturen(Data);
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fe9c 	bl	80017a4 <Leaphy_Data_Sturen>
		//UART_puts("\rdata = "); UART_putint((int)Data);
		if(k >= 200)
 8001a6c:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <drive_task+0x84>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2bc7      	cmp	r3, #199	@ 0xc7
 8001a72:	dd02      	ble.n	8001a7a <drive_task+0x6a>
				k = 0;
 8001a74:	4b07      	ldr	r3, [pc, #28]	@ (8001a94 <drive_task+0x84>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
		k++;
 8001a7a:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <drive_task+0x84>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	4a04      	ldr	r2, [pc, #16]	@ (8001a94 <drive_task+0x84>)
 8001a82:	6013      	str	r3, [r2, #0]
		osDelay(200);						// tijdelijke delay
 8001a84:	20c8      	movs	r0, #200	@ 0xc8
 8001a86:	f00b ff91 	bl	800d9ac <osDelay>
	{
 8001a8a:	e7c5      	b.n	8001a18 <drive_task+0x8>
 8001a8c:	20000414 	.word	0x20000414
 8001a90:	20000478 	.word	0x20000478
 8001a94:	20000400 	.word	0x20000400

08001a98 <UART_keys_IRQ>:
* 2. notifies/stuurt command-string naar andere task
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_keys_IRQ (void *argument)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08c      	sub	sp, #48	@ 0x30
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
    char  		    buffer[QSIZE_UART];
    char		    buffer_copy[QSIZE_UART];
	int 			pos = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int             finish = FALSE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
	osThreadId_t    hTask;

	UART_puts((char *)__func__); UART_puts("started, enter key on terminal...\r\n");
 8001aa8:	4847      	ldr	r0, [pc, #284]	@ (8001bc8 <UART_keys_IRQ+0x130>)
 8001aaa:	f001 fc01 	bl	80032b0 <UART_puts>
 8001aae:	4847      	ldr	r0, [pc, #284]	@ (8001bcc <UART_keys_IRQ+0x134>)
 8001ab0:	f001 fbfe 	bl	80032b0 <UART_puts>

	if (!(hTask = xTaskGetHandle("UART_menu")))
 8001ab4:	4846      	ldr	r0, [pc, #280]	@ (8001bd0 <UART_keys_IRQ+0x138>)
 8001ab6:	f00e f891 	bl	800fbdc <xTaskGetHandle>
 8001aba:	6278      	str	r0, [r7, #36]	@ 0x24
 8001abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <UART_keys_IRQ+0x30>
		error_HaltOS("Err:UART_hndl 0");
 8001ac2:	4844      	ldr	r0, [pc, #272]	@ (8001bd4 <UART_keys_IRQ+0x13c>)
 8001ac4:	f000 fa66 	bl	8001f94 <error_HaltOS>
    {
		// laat de VIC de q vullen, die per char in onze eigen string geplaatst wordt
		// tot LFEED gedrukt is of qsize-1 bereikt is.
		// nb: argument 2 is het adres waar ik het q-char in zet
		// nb: q-receive haalt gelijk de buffer leeg (q-peek niet).
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 8001ac8:	4b43      	ldr	r3, [pc, #268]	@ (8001bd8 <UART_keys_IRQ+0x140>)
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	f107 0218 	add.w	r2, r7, #24
 8001ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f00c fe6f 	bl	800e7bc <xQueueReceive>

		// negeer dit char bij geen data: -1, 255, of CR of spatie
		if (buffer[pos] == 0 || buffer[pos] == -1 || buffer[pos] == 255 || buffer[pos] == CRETURN || buffer[pos] == 32)
 8001ade:	f107 0218 	add.w	r2, r7, #24
 8001ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae4:	4413      	add	r3, r2
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d06b      	beq.n	8001bc4 <UART_keys_IRQ+0x12c>
 8001aec:	f107 0218 	add.w	r2, r7, #24
 8001af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001af2:	4413      	add	r3, r2
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2bff      	cmp	r3, #255	@ 0xff
 8001af8:	d064      	beq.n	8001bc4 <UART_keys_IRQ+0x12c>
 8001afa:	f107 0218 	add.w	r2, r7, #24
 8001afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b00:	4413      	add	r3, r2
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b0d      	cmp	r3, #13
 8001b06:	d05d      	beq.n	8001bc4 <UART_keys_IRQ+0x12c>
 8001b08:	f107 0218 	add.w	r2, r7, #24
 8001b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b0e:	4413      	add	r3, r2
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b20      	cmp	r3, #32
 8001b14:	d056      	beq.n	8001bc4 <UART_keys_IRQ+0x12c>
			continue;

		//UART_putchar(buffer[pos]);  // echo

		// check of de string gesloten was of gesloten moet worden...
		if (buffer[pos] == LFEED)     // close als LF gedrukt
 8001b16:	f107 0218 	add.w	r2, r7, #24
 8001b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b1c:	4413      	add	r3, r2
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b0a      	cmp	r3, #10
 8001b22:	d108      	bne.n	8001b36 <UART_keys_IRQ+0x9e>
		{
			buffer[pos] = '\0';
 8001b24:	f107 0218 	add.w	r2, r7, #24
 8001b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b2a:	4413      	add	r3, r2
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 8001b30:	2301      	movs	r3, #1
 8001b32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b34:	e00d      	b.n	8001b52 <UART_keys_IRQ+0xba>

		}
		else if (pos == QSIZE_UART - 2) // close if end of buf
 8001b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d10a      	bne.n	8001b52 <UART_keys_IRQ+0xba>
		{
			buffer[++pos] = '\0';       // first, skip to last position, then close string
 8001b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b3e:	3301      	adds	r3, #1
 8001b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b42:	f107 0218 	add.w	r2, r7, #24
 8001b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b48:	4413      	add	r3, r2
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		if (finish)
 8001b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d031      	beq.n	8001bbc <UART_keys_IRQ+0x124>
		{
			// de volgende taak krijgt een copy van de string
			// mijn eigen buffer kan zo gelijk weer gevuld worden door de ISR
			strcpy(buffer_copy, buffer);
 8001b58:	f107 0218 	add.w	r2, r7, #24
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	4611      	mov	r1, r2
 8001b62:	4618      	mov	r0, r3
 8001b64:	f012 f9d7 	bl	8013f16 <strcpy>
			memset(buffer, 0, QSIZE_UART); // clear original buffer
 8001b68:	f107 0318 	add.w	r3, r7, #24
 8001b6c:	220a      	movs	r2, #10
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f012 f868 	bl	8013c46 <memset>
			finish = FALSE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	62bb      	str	r3, [r7, #40]	@ 0x28
			pos = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

			xTaskNotify(hTask, buffer_copy, eSetValueWithOverwrite); // notify task2 with copy
 8001b7e:	f107 010c 	add.w	r1, r7, #12
 8001b82:	2300      	movs	r3, #0
 8001b84:	2203      	movs	r2, #3
 8001b86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b88:	f00e ff76 	bl	8010a78 <xTaskGenericNotify>

			if (Uart_debug_out & UART_DEBUG_OUT)
 8001b8c:	4b13      	ldr	r3, [pc, #76]	@ (8001bdc <UART_keys_IRQ+0x144>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d097      	beq.n	8001ac8 <UART_keys_IRQ+0x30>
			{
				UART_puts("\n\r"); UART_puts((char *)__func__);
 8001b98:	4811      	ldr	r0, [pc, #68]	@ (8001be0 <UART_keys_IRQ+0x148>)
 8001b9a:	f001 fb89 	bl	80032b0 <UART_puts>
 8001b9e:	480a      	ldr	r0, [pc, #40]	@ (8001bc8 <UART_keys_IRQ+0x130>)
 8001ba0:	f001 fb86 	bl	80032b0 <UART_puts>
				UART_puts(": UART_menu notified with "); UART_puts(buffer_copy);
 8001ba4:	480f      	ldr	r0, [pc, #60]	@ (8001be4 <UART_keys_IRQ+0x14c>)
 8001ba6:	f001 fb83 	bl	80032b0 <UART_puts>
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f001 fb7e 	bl	80032b0 <UART_puts>
				UART_puts("\r\n");
 8001bb4:	480c      	ldr	r0, [pc, #48]	@ (8001be8 <UART_keys_IRQ+0x150>)
 8001bb6:	f001 fb7b 	bl	80032b0 <UART_puts>
 8001bba:	e785      	b.n	8001ac8 <UART_keys_IRQ+0x30>
			}
		}
		else
			pos++;
 8001bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bc2:	e781      	b.n	8001ac8 <UART_keys_IRQ+0x30>
			continue;
 8001bc4:	bf00      	nop
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 8001bc6:	e77f      	b.n	8001ac8 <UART_keys_IRQ+0x30>
 8001bc8:	080189e8 	.word	0x080189e8
 8001bcc:	0801810c 	.word	0x0801810c
 8001bd0:	080180c0 	.word	0x080180c0
 8001bd4:	08018130 	.word	0x08018130
 8001bd8:	20000408 	.word	0x20000408
 8001bdc:	20000404 	.word	0x20000404
 8001be0:	080180f0 	.word	0x080180f0
 8001be4:	08018140 	.word	0x08018140
 8001be8:	08018108 	.word	0x08018108

08001bec <UART_menu>:
* geinterpreteerd.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_menu (void *argument)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	char   *s;
	char   *tok = ",";  // token if command is more than 1 char
 8001bf4:	4ba2      	ldr	r3, [pc, #648]	@ (8001e80 <UART_menu+0x294>)
 8001bf6:	61fb      	str	r3, [r7, #28]
	int     val1, val2;

	UART_puts((char *)__func__); UART_puts("started\n\r");
 8001bf8:	48a2      	ldr	r0, [pc, #648]	@ (8001e84 <UART_menu+0x298>)
 8001bfa:	f001 fb59 	bl	80032b0 <UART_puts>
 8001bfe:	48a2      	ldr	r0, [pc, #648]	@ (8001e88 <UART_menu+0x29c>)
 8001c00:	f001 fb56 	bl	80032b0 <UART_puts>

	while (TRUE)
	{
		// wacht op de string; let op de cast van (unsigned long) naar (char *)!
		// want de waarde die ik terug krijg is een pointer.
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f00e fe89 	bl	8010920 <ulTaskNotifyTake>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	61bb      	str	r3, [r7, #24]

		// check het eerste (en vaak enige) karakter van de inkomende command-string
		// toupper() zorgt ervoor dat het eerste karakter hoofdletter wordt, zo hoef ik niet op kleine
		// letters te checken.
		switch (toupper((unsigned char)s[0]))
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	75fb      	strb	r3, [r7, #23]
 8001c18:	7dfb      	ldrb	r3, [r7, #23]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	4a9b      	ldr	r2, [pc, #620]	@ (8001e8c <UART_menu+0x2a0>)
 8001c1e:	4413      	add	r3, r2
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d102      	bne.n	8001c30 <UART_menu+0x44>
 8001c2a:	7dfb      	ldrb	r3, [r7, #23]
 8001c2c:	3b20      	subs	r3, #32
 8001c2e:	e000      	b.n	8001c32 <UART_menu+0x46>
 8001c30:	7dfb      	ldrb	r3, [r7, #23]
 8001c32:	3b30      	subs	r3, #48	@ 0x30
 8001c34:	2b24      	cmp	r3, #36	@ 0x24
 8001c36:	d84d      	bhi.n	8001cd4 <UART_menu+0xe8>
 8001c38:	a201      	add	r2, pc, #4	@ (adr r2, 8001c40 <UART_menu+0x54>)
 8001c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3e:	bf00      	nop
 8001c40:	08001ce3 	.word	0x08001ce3
 8001c44:	08001d1f 	.word	0x08001d1f
 8001c48:	08001d4b 	.word	0x08001d4b
 8001c4c:	08001d77 	.word	0x08001d77
 8001c50:	08001da3 	.word	0x08001da3
 8001c54:	08001dcf 	.word	0x08001dcf
 8001c58:	08001cd5 	.word	0x08001cd5
 8001c5c:	08001cd5 	.word	0x08001cd5
 8001c60:	08001cd5 	.word	0x08001cd5
 8001c64:	08001cd5 	.word	0x08001cd5
 8001c68:	08001cd5 	.word	0x08001cd5
 8001c6c:	08001cd5 	.word	0x08001cd5
 8001c70:	08001cd5 	.word	0x08001cd5
 8001c74:	08001cd5 	.word	0x08001cd5
 8001c78:	08001cd5 	.word	0x08001cd5
 8001c7c:	08001cd5 	.word	0x08001cd5
 8001c80:	08001cd5 	.word	0x08001cd5
 8001c84:	08001cd5 	.word	0x08001cd5
 8001c88:	08001cd5 	.word	0x08001cd5
 8001c8c:	08001cd5 	.word	0x08001cd5
 8001c90:	08001cd5 	.word	0x08001cd5
 8001c94:	08001cd5 	.word	0x08001cd5
 8001c98:	08001cd5 	.word	0x08001cd5
 8001c9c:	08001cd5 	.word	0x08001cd5
 8001ca0:	08001cd5 	.word	0x08001cd5
 8001ca4:	08001cd5 	.word	0x08001cd5
 8001ca8:	08001cd5 	.word	0x08001cd5
 8001cac:	08001cd5 	.word	0x08001cd5
 8001cb0:	08001cd5 	.word	0x08001cd5
 8001cb4:	08001dfb 	.word	0x08001dfb
 8001cb8:	08001cd5 	.word	0x08001cd5
 8001cbc:	08001cd5 	.word	0x08001cd5
 8001cc0:	08001e07 	.word	0x08001e07
 8001cc4:	08001cd5 	.word	0x08001cd5
 8001cc8:	08001cd5 	.word	0x08001cd5
 8001ccc:	08001e4b 	.word	0x08001e4b
 8001cd0:	08001e01 	.word	0x08001e01
		{
		default:  UART_puts(s);
 8001cd4:	69b8      	ldr	r0, [r7, #24]
 8001cd6:	f001 faeb 	bl	80032b0 <UART_puts>
				  UART_puts(" (unkown command)\r\n");
 8001cda:	486d      	ldr	r0, [pc, #436]	@ (8001e90 <UART_menu+0x2a4>)
 8001cdc:	f001 fae8 	bl	80032b0 <UART_puts>
				  break;
 8001ce0:	e0cd      	b.n	8001e7e <UART_menu+0x292>

		/// <b>0 - 5</b>: Togglet verschillende debug-outputs naar UART
		case '0': Uart_debug_out = (Uart_debug_out ? DEBUG_OUT_NONE : DEBUG_OUT_ALL);
 8001ce2:	4b6c      	ldr	r3, [pc, #432]	@ (8001e94 <UART_menu+0x2a8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <UART_menu+0x102>
 8001cea:	2300      	movs	r3, #0
 8001cec:	e000      	b.n	8001cf0 <UART_menu+0x104>
 8001cee:	23ff      	movs	r3, #255	@ 0xff
 8001cf0:	4a68      	ldr	r2, [pc, #416]	@ (8001e94 <UART_menu+0x2a8>)
 8001cf2:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nall debug output = ");
 8001cf4:	4868      	ldr	r0, [pc, #416]	@ (8001e98 <UART_menu+0x2ac>)
 8001cf6:	f001 fadb 	bl	80032b0 <UART_puts>
		  	  	  UART_puts(Uart_debug_out == DEBUG_OUT_ALL ? "ON\r\n" : "OFF\r\n");
 8001cfa:	4b66      	ldr	r3, [pc, #408]	@ (8001e94 <UART_menu+0x2a8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2bff      	cmp	r3, #255	@ 0xff
 8001d00:	d101      	bne.n	8001d06 <UART_menu+0x11a>
 8001d02:	4b66      	ldr	r3, [pc, #408]	@ (8001e9c <UART_menu+0x2b0>)
 8001d04:	e000      	b.n	8001d08 <UART_menu+0x11c>
 8001d06:	4b66      	ldr	r3, [pc, #408]	@ (8001ea0 <UART_menu+0x2b4>)
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f001 fad1 	bl	80032b0 <UART_puts>

		  	  	  // als alle output uitgezet wordt, is het handig om gelijk het menu te laten zien.
		  	  	  if (Uart_debug_out == DEBUG_OUT_NONE)
 8001d0e:	4b61      	ldr	r3, [pc, #388]	@ (8001e94 <UART_menu+0x2a8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f040 80ae 	bne.w	8001e74 <UART_menu+0x288>
		  	  		  DisplayMenu();
 8001d18:	f000 f92e 	bl	8001f78 <DisplayMenu>
				  break;
 8001d1c:	e0aa      	b.n	8001e74 <UART_menu+0x288>

		case '1': Uart_debug_out ^= LEDS_DEBUG_OUT; // toggle output on/off
 8001d1e:	4b5d      	ldr	r3, [pc, #372]	@ (8001e94 <UART_menu+0x2a8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f083 0301 	eor.w	r3, r3, #1
 8001d26:	4a5b      	ldr	r2, [pc, #364]	@ (8001e94 <UART_menu+0x2a8>)
 8001d28:	6013      	str	r3, [r2, #0]
				  UART_puts("\r\nleds output = ");
 8001d2a:	485e      	ldr	r0, [pc, #376]	@ (8001ea4 <UART_menu+0x2b8>)
 8001d2c:	f001 fac0 	bl	80032b0 <UART_puts>
				  UART_puts(Uart_debug_out & LEDS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001d30:	4b58      	ldr	r3, [pc, #352]	@ (8001e94 <UART_menu+0x2a8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <UART_menu+0x154>
 8001d3c:	4b57      	ldr	r3, [pc, #348]	@ (8001e9c <UART_menu+0x2b0>)
 8001d3e:	e000      	b.n	8001d42 <UART_menu+0x156>
 8001d40:	4b57      	ldr	r3, [pc, #348]	@ (8001ea0 <UART_menu+0x2b4>)
 8001d42:	4618      	mov	r0, r3
 8001d44:	f001 fab4 	bl	80032b0 <UART_puts>
				  break;
 8001d48:	e099      	b.n	8001e7e <UART_menu+0x292>

		case '2': Uart_debug_out ^= ARMKEYS_DEBUG_OUT; // toggle output on/off
 8001d4a:	4b52      	ldr	r3, [pc, #328]	@ (8001e94 <UART_menu+0x2a8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f083 0302 	eor.w	r3, r3, #2
 8001d52:	4a50      	ldr	r2, [pc, #320]	@ (8001e94 <UART_menu+0x2a8>)
 8001d54:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\narmkeys output = ");
 8001d56:	4854      	ldr	r0, [pc, #336]	@ (8001ea8 <UART_menu+0x2bc>)
 8001d58:	f001 faaa 	bl	80032b0 <UART_puts>
		  	      UART_puts(Uart_debug_out & ARMKEYS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001d5c:	4b4d      	ldr	r3, [pc, #308]	@ (8001e94 <UART_menu+0x2a8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <UART_menu+0x180>
 8001d68:	4b4c      	ldr	r3, [pc, #304]	@ (8001e9c <UART_menu+0x2b0>)
 8001d6a:	e000      	b.n	8001d6e <UART_menu+0x182>
 8001d6c:	4b4c      	ldr	r3, [pc, #304]	@ (8001ea0 <UART_menu+0x2b4>)
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f001 fa9e 	bl	80032b0 <UART_puts>
				  break;
 8001d74:	e083      	b.n	8001e7e <UART_menu+0x292>

		case '3': Uart_debug_out ^= UART_DEBUG_OUT; // toggle output on/off
 8001d76:	4b47      	ldr	r3, [pc, #284]	@ (8001e94 <UART_menu+0x2a8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f083 0304 	eor.w	r3, r3, #4
 8001d7e:	4a45      	ldr	r2, [pc, #276]	@ (8001e94 <UART_menu+0x2a8>)
 8001d80:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\nuart output = ");
 8001d82:	484a      	ldr	r0, [pc, #296]	@ (8001eac <UART_menu+0x2c0>)
 8001d84:	f001 fa94 	bl	80032b0 <UART_puts>
		  	      UART_puts(Uart_debug_out & UART_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001d88:	4b42      	ldr	r3, [pc, #264]	@ (8001e94 <UART_menu+0x2a8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <UART_menu+0x1ac>
 8001d94:	4b41      	ldr	r3, [pc, #260]	@ (8001e9c <UART_menu+0x2b0>)
 8001d96:	e000      	b.n	8001d9a <UART_menu+0x1ae>
 8001d98:	4b41      	ldr	r3, [pc, #260]	@ (8001ea0 <UART_menu+0x2b4>)
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f001 fa88 	bl	80032b0 <UART_puts>
				  break;
 8001da0:	e06d      	b.n	8001e7e <UART_menu+0x292>

		case '4': Uart_debug_out ^= STUDENT_DEBUG_OUT; // toggle output on/off
 8001da2:	4b3c      	ldr	r3, [pc, #240]	@ (8001e94 <UART_menu+0x2a8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f083 0308 	eor.w	r3, r3, #8
 8001daa:	4a3a      	ldr	r2, [pc, #232]	@ (8001e94 <UART_menu+0x2a8>)
 8001dac:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nstudent output = ");
 8001dae:	4840      	ldr	r0, [pc, #256]	@ (8001eb0 <UART_menu+0x2c4>)
 8001db0:	f001 fa7e 	bl	80032b0 <UART_puts>
		  	  	  UART_puts(Uart_debug_out & STUDENT_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001db4:	4b37      	ldr	r3, [pc, #220]	@ (8001e94 <UART_menu+0x2a8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <UART_menu+0x1d8>
 8001dc0:	4b36      	ldr	r3, [pc, #216]	@ (8001e9c <UART_menu+0x2b0>)
 8001dc2:	e000      	b.n	8001dc6 <UART_menu+0x1da>
 8001dc4:	4b36      	ldr	r3, [pc, #216]	@ (8001ea0 <UART_menu+0x2b4>)
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f001 fa72 	bl	80032b0 <UART_puts>
				  break;
 8001dcc:	e057      	b.n	8001e7e <UART_menu+0x292>

		case '5': Uart_debug_out ^= GPS_DEBUG_OUT; // toggle output on/off
 8001dce:	4b31      	ldr	r3, [pc, #196]	@ (8001e94 <UART_menu+0x2a8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f083 0310 	eor.w	r3, r3, #16
 8001dd6:	4a2f      	ldr	r2, [pc, #188]	@ (8001e94 <UART_menu+0x2a8>)
 8001dd8:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nGPS output = ");
 8001dda:	4836      	ldr	r0, [pc, #216]	@ (8001eb4 <UART_menu+0x2c8>)
 8001ddc:	f001 fa68 	bl	80032b0 <UART_puts>
		  	  	  UART_puts(Uart_debug_out & GPS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001de0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e94 <UART_menu+0x2a8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <UART_menu+0x204>
 8001dec:	4b2b      	ldr	r3, [pc, #172]	@ (8001e9c <UART_menu+0x2b0>)
 8001dee:	e000      	b.n	8001df2 <UART_menu+0x206>
 8001df0:	4b2b      	ldr	r3, [pc, #172]	@ (8001ea0 <UART_menu+0x2b4>)
 8001df2:	4618      	mov	r0, r3
 8001df4:	f001 fa5c 	bl	80032b0 <UART_puts>
				  break;
 8001df8:	e041      	b.n	8001e7e <UART_menu+0x292>
//				  /// commando: <b>"d,200"</b> betekent: set delay op 200, NB: spaties worden niet afgevangen...
//				  os_delay = atoi(s+2); // skip first 2 characters
//				  UART_puts("\r\n os_delay set to: "); UART_putint(os_delay);
//				  break;

		case 'M': DisplayMenu(); /// M: Displays het menu (zie my_app.c)
 8001dfa:	f000 f8bd 	bl	8001f78 <DisplayMenu>
				  break;
 8001dfe:	e03e      	b.n	8001e7e <UART_menu+0x292>

		case 'T': DisplayTaskData(); /// T: Displays de stackdata van alle Tasks
 8001e00:	f000 fa56 	bl	80022b0 <DisplayTaskData>
				  break;
 8001e04:	e03b      	b.n	8001e7e <UART_menu+0x292>
		case 'P': /// P: Verandert de Prioriteit van een taak
				  /// commando, als: <b>"t,9,20"</b> betekent: set Task 9 op priority 20
				  //  eerst: de 2 waarden worden uit de string gehaald met strtok()
			      //  dan: de strings worden naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 't,'
 8001e06:	69f9      	ldr	r1, [r7, #28]
 8001e08:	69b8      	ldr	r0, [r7, #24]
 8001e0a:	f011 ff43 	bl	8013c94 <strtok>
 8001e0e:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 8001e10:	69f9      	ldr	r1, [r7, #28]
 8001e12:	2000      	movs	r0, #0
 8001e14:	f011 ff3e 	bl	8013c94 <strtok>
 8001e18:	61b8      	str	r0, [r7, #24]
 8001e1a:	69b8      	ldr	r0, [r7, #24]
 8001e1c:	f010 fa63 	bl	80122e6 <atoi>
 8001e20:	6138      	str	r0, [r7, #16]
				  s = strtok(NULL, tok); val2 = atoi(s); // volgende = priority
 8001e22:	69f9      	ldr	r1, [r7, #28]
 8001e24:	2000      	movs	r0, #0
 8001e26:	f011 ff35 	bl	8013c94 <strtok>
 8001e2a:	61b8      	str	r0, [r7, #24]
 8001e2c:	69b8      	ldr	r0, [r7, #24]
 8001e2e:	f010 fa5a 	bl	80122e6 <atoi>
 8001e32:	60f8      	str	r0, [r7, #12]
				  if (val1 && val2)						 // kleine validiteitscontrole
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d01e      	beq.n	8001e78 <UART_menu+0x28c>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d01b      	beq.n	8001e78 <UART_menu+0x28c>
					  SetTaskPriority(val1, val2);
 8001e40:	68f9      	ldr	r1, [r7, #12]
 8001e42:	6938      	ldr	r0, [r7, #16]
 8001e44:	f000 f9b0 	bl	80021a8 <SetTaskPriority>
				  break;
 8001e48:	e016      	b.n	8001e78 <UART_menu+0x28c>
		case 'S': /// S: Start/Stop task
				  /// commando, als: <b>"s,9"</b> betekent: start/stop Task 9
				  //  eerst: de waarde worden uit de string gehaald met strtok()
			      //  dan: de string wordt naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 's,'
 8001e4a:	69f9      	ldr	r1, [r7, #28]
 8001e4c:	69b8      	ldr	r0, [r7, #24]
 8001e4e:	f011 ff21 	bl	8013c94 <strtok>
 8001e52:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 8001e54:	69f9      	ldr	r1, [r7, #28]
 8001e56:	2000      	movs	r0, #0
 8001e58:	f011 ff1c 	bl	8013c94 <strtok>
 8001e5c:	61b8      	str	r0, [r7, #24]
 8001e5e:	69b8      	ldr	r0, [r7, #24]
 8001e60:	f010 fa41 	bl	80122e6 <atoi>
 8001e64:	6138      	str	r0, [r7, #16]
				  if (val1)						 // kleine validiteitscontrole
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d007      	beq.n	8001e7c <UART_menu+0x290>
					  StartStopTask(val1);
 8001e6c:	6938      	ldr	r0, [r7, #16]
 8001e6e:	f000 f9d7 	bl	8002220 <StartStopTask>
				  break;
 8001e72:	e003      	b.n	8001e7c <UART_menu+0x290>
				  break;
 8001e74:	bf00      	nop
 8001e76:	e6c5      	b.n	8001c04 <UART_menu+0x18>
				  break;
 8001e78:	bf00      	nop
 8001e7a:	e6c3      	b.n	8001c04 <UART_menu+0x18>
				  break;
 8001e7c:	bf00      	nop
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001e7e:	e6c1      	b.n	8001c04 <UART_menu+0x18>
 8001e80:	0801815c 	.word	0x0801815c
 8001e84:	080189f8 	.word	0x080189f8
 8001e88:	08018160 	.word	0x08018160
 8001e8c:	08018cc8 	.word	0x08018cc8
 8001e90:	0801816c 	.word	0x0801816c
 8001e94:	20000404 	.word	0x20000404
 8001e98:	08018180 	.word	0x08018180
 8001e9c:	08018198 	.word	0x08018198
 8001ea0:	080181a0 	.word	0x080181a0
 8001ea4:	080181a8 	.word	0x080181a8
 8001ea8:	080181bc 	.word	0x080181bc
 8001eac:	080181d0 	.word	0x080181d0
 8001eb0:	080181e4 	.word	0x080181e4
 8001eb4:	080181f8 	.word	0x080181f8

08001eb8 <DisplayVersion>:
* Les: je ziet hoe je handig een lange string kunt opstellen met het '\'-karakter.
* @return void
* @author MSC
*/
void DisplayVersion(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b09c      	sub	sp, #112	@ 0x70
 8001ebc:	af00      	add	r7, sp, #0
	char infobuf[100];
    osVersion_t osv;

    char *functionality =
 8001ebe:	4b24      	ldr	r3, [pc, #144]	@ (8001f50 <DisplayVersion+0x98>)
 8001ec0:	66fb      	str	r3, [r7, #108]	@ 0x6c
en hoe je makkelijk tasks aanmaakt (admin.c) en hoe je de bidirectionele omgang \r\n\
met de UART-comport gebruikt.\r\n\
Zie verder de Doxygen documentatie van de applicatie.\r\n\
Michiel Scager (update: april 2023)\r\n";

	LCD_clear();
 8001ec2:	f000 ffc5 	bl	8002e50 <LCD_clear>
	LCD_puts(app_nameLCD);
 8001ec6:	4b23      	ldr	r3, [pc, #140]	@ (8001f54 <DisplayVersion+0x9c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f001 f8b8 	bl	8003040 <LCD_puts>

	UART_puts(app_name);
 8001ed0:	4b21      	ldr	r3, [pc, #132]	@ (8001f58 <DisplayVersion+0xa0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f001 f9eb 	bl	80032b0 <UART_puts>
	UART_puts(functionality);
 8001eda:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001edc:	f001 f9e8 	bl	80032b0 <UART_puts>

 	osKernelGetInfo(&osv, infobuf, sizeof(infobuf));
 8001ee0:	f107 0108 	add.w	r1, r7, #8
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	2264      	movs	r2, #100	@ 0x64
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f00b fc69 	bl	800d7c0 <osKernelGetInfo>
	UART_puts("\t-----");
 8001eee:	481b      	ldr	r0, [pc, #108]	@ (8001f5c <DisplayVersion+0xa4>)
 8001ef0:	f001 f9de 	bl	80032b0 <UART_puts>
	UART_puts("\r\n\t");                       UART_puts(infobuf);
 8001ef4:	481a      	ldr	r0, [pc, #104]	@ (8001f60 <DisplayVersion+0xa8>)
 8001ef6:	f001 f9db 	bl	80032b0 <UART_puts>
 8001efa:	f107 0308 	add.w	r3, r7, #8
 8001efe:	4618      	mov	r0, r3
 8001f00:	f001 f9d6 	bl	80032b0 <UART_puts>
	UART_puts("\r\n\tVersion: ");              UART_putint(osv.kernel);
 8001f04:	4817      	ldr	r0, [pc, #92]	@ (8001f64 <DisplayVersion+0xac>)
 8001f06:	f001 f9d3 	bl	80032b0 <UART_puts>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f001 f9eb 	bl	80032e8 <UART_putint>
	UART_puts("\r\n\tOS Timer freq (MHz): " ); UART_putint(osKernelGetSysTimerFreq()/1000000);
 8001f12:	4815      	ldr	r0, [pc, #84]	@ (8001f68 <DisplayVersion+0xb0>)
 8001f14:	f001 f9cc 	bl	80032b0 <UART_puts>
 8001f18:	f00b fcaa 	bl	800d870 <osKernelGetSysTimerFreq>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	4a13      	ldr	r2, [pc, #76]	@ (8001f6c <DisplayVersion+0xb4>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	0c9b      	lsrs	r3, r3, #18
 8001f26:	4618      	mov	r0, r3
 8001f28:	f001 f9de 	bl	80032e8 <UART_putint>
	UART_puts("\r\n\tOS Tick freq (Hz): " );   UART_putint(osKernelGetTickFreq());
 8001f2c:	4810      	ldr	r0, [pc, #64]	@ (8001f70 <DisplayVersion+0xb8>)
 8001f2e:	f001 f9bf 	bl	80032b0 <UART_puts>
 8001f32:	f00b fc93 	bl	800d85c <osKernelGetTickFreq>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f001 f9d5 	bl	80032e8 <UART_putint>
	UART_puts("\r\n\t-----\r\n");
 8001f3e:	480d      	ldr	r0, [pc, #52]	@ (8001f74 <DisplayVersion+0xbc>)
 8001f40:	f001 f9b6 	bl	80032b0 <UART_puts>

    DisplayMenu();
 8001f44:	f000 f818 	bl	8001f78 <DisplayMenu>
}
 8001f48:	bf00      	nop
 8001f4a:	3770      	adds	r7, #112	@ 0x70
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	080182b0 	.word	0x080182b0
 8001f54:	20000004 	.word	0x20000004
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	08018420 	.word	0x08018420
 8001f60:	08018428 	.word	0x08018428
 8001f64:	0801842c 	.word	0x0801842c
 8001f68:	0801843c 	.word	0x0801843c
 8001f6c:	431bde83 	.word	0x431bde83
 8001f70:	08018458 	.word	0x08018458
 8001f74:	08018470 	.word	0x08018470

08001f78 <DisplayMenu>:
* User Interface (menu) naar UART.
* @return void
* @author MSC
*/
void DisplayMenu(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
	char *menu =
 8001f7e:	4b04      	ldr	r3, [pc, #16]	@ (8001f90 <DisplayMenu+0x18>)
 8001f80:	607b      	str	r3, [r7, #4]
 p : change TASK PRIORITY, eg. 'p,7,20' sets priority of task 7 to 20\r\n\
 t : display TASK DATA (number, priority, stack usage, status)\r\n\
 s : start/stop TASK, eg. s,7 starts or stops task 7\r\n\
=====================================================================\r\n";

    UART_puts(menu);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f001 f994 	bl	80032b0 <UART_puts>
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	0801847c 	.word	0x0801847c

08001f94 <error_HaltOS>:
* dus op UART en LCD.
* @param msg Foutmelding
* @return void
*/
void error_HaltOS(char *msg)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	LCD_puts(msg);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f001 f84f 	bl	8003040 <LCD_puts>
	UART_puts(msg); UART_puts(". Application halted\r\n");
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f001 f984 	bl	80032b0 <UART_puts>
 8001fa8:	4805      	ldr	r0, [pc, #20]	@ (8001fc0 <error_HaltOS+0x2c>)
 8001faa:	f001 f981 	bl	80032b0 <UART_puts>

	BUZZER_put(1000);
 8001fae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fb2:	f000 fe0b 	bl	8002bcc <BUZZER_put>
	vTaskSuspendAll(); // stop alle tasks
 8001fb6:	f00d fce7 	bl	800f988 <vTaskSuspendAll>

	while (TRUE)
 8001fba:	bf00      	nop
 8001fbc:	e7fd      	b.n	8001fba <error_HaltOS+0x26>
 8001fbe:	bf00      	nop
 8001fc0:	080186bc 	.word	0x080186bc

08001fc4 <CreateHandles>:
/**
* @brief Creates alle handles voor deze applicatie
* @return void
*/
void CreateHandles(void)
{
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af02      	add	r7, sp, #8
	if (!(hLED_Sem = xSemaphoreCreateMutex()))
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f00c fa3d 	bl	800e44a <xQueueCreateMutex>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4a36      	ldr	r2, [pc, #216]	@ (80020ac <CreateHandles+0xe8>)
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	4b35      	ldr	r3, [pc, #212]	@ (80020ac <CreateHandles+0xe8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d102      	bne.n	8001fe4 <CreateHandles+0x20>
		error_HaltOS("Error hLED_Sem");
 8001fde:	4834      	ldr	r0, [pc, #208]	@ (80020b0 <CreateHandles+0xec>)
 8001fe0:	f7ff ffd8 	bl	8001f94 <error_HaltOS>

	if (!(hGNRMC_Struct_Sem = xSemaphoreCreateMutex()))
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f00c fa30 	bl	800e44a <xQueueCreateMutex>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4a31      	ldr	r2, [pc, #196]	@ (80020b4 <CreateHandles+0xf0>)
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	4b30      	ldr	r3, [pc, #192]	@ (80020b4 <CreateHandles+0xf0>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d102      	bne.n	8001ffe <CreateHandles+0x3a>
		error_HaltOS("Error hGNRMC_Struct_Sem");
 8001ff8:	482f      	ldr	r0, [pc, #188]	@ (80020b8 <CreateHandles+0xf4>)
 8001ffa:	f7ff ffcb 	bl	8001f94 <error_HaltOS>

	if (!(hUART_Queue = xQueueCreate(QSIZE_UART, sizeof(unsigned int))))
 8001ffe:	2200      	movs	r2, #0
 8002000:	2104      	movs	r1, #4
 8002002:	200a      	movs	r0, #10
 8002004:	f00c f9a9 	bl	800e35a <xQueueGenericCreate>
 8002008:	4603      	mov	r3, r0
 800200a:	4a2c      	ldr	r2, [pc, #176]	@ (80020bc <CreateHandles+0xf8>)
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b2b      	ldr	r3, [pc, #172]	@ (80020bc <CreateHandles+0xf8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <CreateHandles+0x58>
		error_HaltOS("Error hUART_Q");
 8002016:	482a      	ldr	r0, [pc, #168]	@ (80020c0 <CreateHandles+0xfc>)
 8002018:	f7ff ffbc 	bl	8001f94 <error_HaltOS>

	if (!(hGPS_Queue = xQueueCreate(GPS_MAXLEN, sizeof(unsigned char))))
 800201c:	2200      	movs	r2, #0
 800201e:	2101      	movs	r1, #1
 8002020:	2053      	movs	r0, #83	@ 0x53
 8002022:	f00c f99a 	bl	800e35a <xQueueGenericCreate>
 8002026:	4603      	mov	r3, r0
 8002028:	4a26      	ldr	r2, [pc, #152]	@ (80020c4 <CreateHandles+0x100>)
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	4b25      	ldr	r3, [pc, #148]	@ (80020c4 <CreateHandles+0x100>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d102      	bne.n	800203a <CreateHandles+0x76>
		error_HaltOS("Error hGPS_Q");
 8002034:	4824      	ldr	r0, [pc, #144]	@ (80020c8 <CreateHandles+0x104>)
 8002036:	f7ff ffad 	bl	8001f94 <error_HaltOS>

	if (!(hKEY_Event = xEventGroupCreate()))
 800203a:	f00b fe37 	bl	800dcac <xEventGroupCreate>
 800203e:	4603      	mov	r3, r0
 8002040:	4a22      	ldr	r2, [pc, #136]	@ (80020cc <CreateHandles+0x108>)
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	4b21      	ldr	r3, [pc, #132]	@ (80020cc <CreateHandles+0x108>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <CreateHandles+0x8e>
		error_HaltOS("Error hLCD_Event");
 800204c:	4820      	ldr	r0, [pc, #128]	@ (80020d0 <CreateHandles+0x10c>)
 800204e:	f7ff ffa1 	bl	8001f94 <error_HaltOS>

	if (!(hTimer1 = xTimerCreate("Timer_1", pdMS_TO_TICKS(TIMER1_DELAY), pdTRUE, 0, (TimerCallbackFunction_t)Timer1_Handler)))
 8002052:	4b20      	ldr	r3, [pc, #128]	@ (80020d4 <CreateHandles+0x110>)
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	2300      	movs	r3, #0
 8002058:	2201      	movs	r2, #1
 800205a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800205e:	481e      	ldr	r0, [pc, #120]	@ (80020d8 <CreateHandles+0x114>)
 8002060:	f00e fe6a 	bl	8010d38 <xTimerCreate>
 8002064:	4603      	mov	r3, r0
 8002066:	4a1d      	ldr	r2, [pc, #116]	@ (80020dc <CreateHandles+0x118>)
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	4b1c      	ldr	r3, [pc, #112]	@ (80020dc <CreateHandles+0x118>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d102      	bne.n	8002078 <CreateHandles+0xb4>
		error_HaltOS("Error hTimer1");
 8002072:	481b      	ldr	r0, [pc, #108]	@ (80020e0 <CreateHandles+0x11c>)
 8002074:	f7ff ff8e 	bl	8001f94 <error_HaltOS>

	UART_puts("\n\rAll handles created successfully.");
 8002078:	481a      	ldr	r0, [pc, #104]	@ (80020e4 <CreateHandles+0x120>)
 800207a:	f001 f919 	bl	80032b0 <UART_puts>

	UART_puts("\n\rTimer set to: ");
 800207e:	481a      	ldr	r0, [pc, #104]	@ (80020e8 <CreateHandles+0x124>)
 8002080:	f001 f916 	bl	80032b0 <UART_puts>
	UART_putint((int)TIMER1_DELAY); // (int)-cast is nodig!
 8002084:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002088:	f001 f92e 	bl	80032e8 <UART_putint>
	xTimerStart(hTimer1, 0); // start de timer...
 800208c:	4b13      	ldr	r3, [pc, #76]	@ (80020dc <CreateHandles+0x118>)
 800208e:	681c      	ldr	r4, [r3, #0]
 8002090:	f00d fd26 	bl	800fae0 <xTaskGetTickCount>
 8002094:	4602      	mov	r2, r0
 8002096:	2300      	movs	r3, #0
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	2300      	movs	r3, #0
 800209c:	2101      	movs	r1, #1
 800209e:	4620      	mov	r0, r4
 80020a0:	f00e fea8 	bl	8010df4 <xTimerGenericCommand>
}
 80020a4:	bf00      	nop
 80020a6:	3704      	adds	r7, #4
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd90      	pop	{r4, r7, pc}
 80020ac:	20000410 	.word	0x20000410
 80020b0:	080186d4 	.word	0x080186d4
 80020b4:	20000414 	.word	0x20000414
 80020b8:	080186e4 	.word	0x080186e4
 80020bc:	20000408 	.word	0x20000408
 80020c0:	080186fc 	.word	0x080186fc
 80020c4:	2000040c 	.word	0x2000040c
 80020c8:	0801870c 	.word	0x0801870c
 80020cc:	20000418 	.word	0x20000418
 80020d0:	0801871c 	.word	0x0801871c
 80020d4:	080020ed 	.word	0x080020ed
 80020d8:	08018730 	.word	0x08018730
 80020dc:	2000041c 	.word	0x2000041c
 80020e0:	08018738 	.word	0x08018738
 80020e4:	08018748 	.word	0x08018748
 80020e8:	0801876c 	.word	0x0801876c

080020ec <Timer1_Handler>:
* @brief Vangt de FreeRTOS software-interrupt op en toggelt een ledje
* @param hTimer1 De handle van de timer
* @return void
*/
void Timer1_Handler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, LEDBLUE);   // turns led on/off
 80020f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020f4:	4802      	ldr	r0, [pc, #8]	@ (8002100 <Timer1_Handler+0x14>)
 80020f6:	f002 fc92 	bl	8004a1e <HAL_GPIO_TogglePin>
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40020c00 	.word	0x40020c00

08002104 <CreateTasks>:
* Let op. Eerst wordt de scheduler gestopt, dan de taken gecreëerd, dan de scheduler gestopt.
* Waarom? Anders gaan taken gelijk beginnen en wachten op taken die nog niet bestaan, dat geeft een rommeltje.
* @return void
*/
void CreateTasks(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
	PTASKDATA ptd = tasks; // tasks == &tasks[0]: both are addresses of first struct
 800210a:	4b14      	ldr	r3, [pc, #80]	@ (800215c <CreateTasks+0x58>)
 800210c:	607b      	str	r3, [r7, #4]
	vTaskSuspendAll(); // zet de scheduler stil en dwing FreeRTOS om eerst alle taken te starten
 800210e:	f00d fc3b 	bl	800f988 <vTaskSuspendAll>

	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 8002112:	e016      	b.n	8002142 <CreateTasks+0x3e>
	{
		UART_puts("\r\nCreated: ");
 8002114:	4812      	ldr	r0, [pc, #72]	@ (8002160 <CreateTasks+0x5c>)
 8002116:	f001 f8cb 	bl	80032b0 <UART_puts>
		UART_puts((char *)ptd->attr.name);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	4618      	mov	r0, r3
 8002120:	f001 f8c6 	bl	80032b0 <UART_puts>

		// nb. kijk naar de haakjes van argument 3: het gaat om het adres van (structure attr).
		ptd->hTask = osThreadNew(ptd->func, ptd->argument, &(ptd->attr));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6859      	ldr	r1, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3308      	adds	r3, #8
 8002130:	461a      	mov	r2, r3
 8002132:	f00b fba9 	bl	800d888 <osThreadNew>
 8002136:	4602      	mov	r2, r0
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3330      	adds	r3, #48	@ 0x30
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1e4      	bne.n	8002114 <CreateTasks+0x10>
	}

	xTaskResumeAll();   // start nu de scheduler: play ball
 800214a:	f00d fc2b 	bl	800f9a4 <xTaskResumeAll>
	DisplayTaskData();  // display alle taskdata op UART
 800214e:	f000 f8af 	bl	80022b0 <DisplayTaskData>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000008 	.word	0x20000008
 8002160:	08018780 	.word	0x08018780

08002164 <GetTaskhandle>:
* de OS-functie xTaskGetHandle() gebruikt worden. Alleen is 'mijn' functie sneller.
* @param *taskname De tasknaam
* @return osThreadId_t De taskhandle
*/
osThreadId_t GetTaskhandle(char *taskname)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	PTASKDATA ptd = tasks;
 800216c:	4b0d      	ldr	r3, [pc, #52]	@ (80021a4 <GetTaskhandle+0x40>)
 800216e:	60fb      	str	r3, [r7, #12]

	for (; ptd->func != NULL; ptd++)
 8002170:	e00e      	b.n	8002190 <GetTaskhandle+0x2c>
		if (!strcmp(taskname, ptd->attr.name))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	4619      	mov	r1, r3
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7fe f829 	bl	80001d0 <strcmp>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d102      	bne.n	800218a <GetTaskhandle+0x26>
			return (ptd->hTask);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002188:	e007      	b.n	800219a <GetTaskhandle+0x36>
	for (; ptd->func != NULL; ptd++)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3330      	adds	r3, #48	@ 0x30
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1ec      	bne.n	8002172 <GetTaskhandle+0xe>

	return (NULL); // if task was not found...
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000008 	.word	0x20000008

080021a8 <SetTaskPriority>:
* @param task_id Task identifier
* @param new_priority Nieuwe prioriteit
* @return void
*/
void SetTaskPriority(int task_id, int new_priority)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
	PTASKDATA ptd = tasks;
 80021b2:	4b18      	ldr	r3, [pc, #96]	@ (8002214 <SetTaskPriority+0x6c>)
 80021b4:	60fb      	str	r3, [r7, #12]
	unsigned int 	task_nr;


	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 80021b6:	2301      	movs	r3, #1
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	e023      	b.n	8002204 <SetTaskPriority+0x5c>
		if (task_nr == task_id) // hebbes
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d119      	bne.n	80021f8 <SetTaskPriority+0x50>
		{
			ptd->attr.priority = new_priority;			// struct-member
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	621a      	str	r2, [r3, #32]
			vTaskPrioritySet(ptd->hTask, new_priority); // taskpriority
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	4611      	mov	r1, r2
 80021d2:	4618      	mov	r0, r3
 80021d4:	f00d f9c2 	bl	800f55c <vTaskPrioritySet>
			// of
			// osThreadSetPriority(ptd->hTask, new_priority);

			UART_puts("\r\nSet task "); UART_puts(ptd->attr.name);
 80021d8:	480f      	ldr	r0, [pc, #60]	@ (8002218 <SetTaskPriority+0x70>)
 80021da:	f001 f869 	bl	80032b0 <UART_puts>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f001 f864 	bl	80032b0 <UART_puts>
			UART_puts("'s priority to: "); UART_putint(new_priority);
 80021e8:	480c      	ldr	r0, [pc, #48]	@ (800221c <SetTaskPriority+0x74>)
 80021ea:	f001 f861 	bl	80032b0 <UART_puts>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f001 f879 	bl	80032e8 <UART_putint>
			return;
 80021f6:	e009      	b.n	800220c <SetTaskPriority+0x64>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	3330      	adds	r3, #48	@ 0x30
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	3301      	adds	r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1d7      	bne.n	80021bc <SetTaskPriority+0x14>
		}
}
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000008 	.word	0x20000008
 8002218:	0801878c 	.word	0x0801878c
 800221c:	08018798 	.word	0x08018798

08002220 <StartStopTask>:
* je alle tasks die op die mutex wachten. En als je de task stopt die de UART leest,
* schiet je jezelf ook in de voet.
* @return void
*/
void StartStopTask(int task_id)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08e      	sub	sp, #56	@ 0x38
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
	PTASKDATA ptd = tasks;
 8002228:	4b1d      	ldr	r3, [pc, #116]	@ (80022a0 <StartStopTask+0x80>)
 800222a:	637b      	str	r3, [r7, #52]	@ 0x34
	unsigned int 	task_nr;
	TaskStatus_t    xTaskDetails;

	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 800222c:	2301      	movs	r3, #1
 800222e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002230:	e02e      	b.n	8002290 <StartStopTask+0x70>
		if (task_nr == task_id) // hebbes
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002236:	429a      	cmp	r2, r3
 8002238:	d124      	bne.n	8002284 <StartStopTask+0x64>
		{
			vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid);
 800223a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800223c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800223e:	f107 010c 	add.w	r1, r7, #12
 8002242:	2305      	movs	r3, #5
 8002244:	2201      	movs	r2, #1
 8002246:	f00e f8d1 	bl	80103ec <vTaskGetInfo>
			UART_puts("\r\n");
 800224a:	4816      	ldr	r0, [pc, #88]	@ (80022a4 <StartStopTask+0x84>)
 800224c:	f001 f830 	bl	80032b0 <UART_puts>
			UART_puts(ptd->attr.name);
 8002250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	4618      	mov	r0, r3
 8002256:	f001 f82b 	bl	80032b0 <UART_puts>

			// een task kan meerdere statussen hebben; het wordt simpeler
			// als je alleen de eSuspended checkt.
			if (xTaskDetails.eCurrentState == eSuspended)
 800225a:	7e3b      	ldrb	r3, [r7, #24]
 800225c:	2b03      	cmp	r3, #3
 800225e:	d108      	bne.n	8002272 <StartStopTask+0x52>
			{
				vTaskResume(ptd->hTask);
 8002260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002264:	4618      	mov	r0, r3
 8002266:	f00d fabf 	bl	800f7e8 <vTaskResume>
				UART_puts(" resumed.");
 800226a:	480f      	ldr	r0, [pc, #60]	@ (80022a8 <StartStopTask+0x88>)
 800226c:	f001 f820 	bl	80032b0 <UART_puts>
			else // bv. eBlocked, eRunning, eInvalid etc.
			{
				vTaskSuspend(ptd->hTask);
				UART_puts(" suspended.");
			}
			return;
 8002270:	e012      	b.n	8002298 <StartStopTask+0x78>
				vTaskSuspend(ptd->hTask);
 8002272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002276:	4618      	mov	r0, r3
 8002278:	f00d fa0e 	bl	800f698 <vTaskSuspend>
				UART_puts(" suspended.");
 800227c:	480b      	ldr	r0, [pc, #44]	@ (80022ac <StartStopTask+0x8c>)
 800227e:	f001 f817 	bl	80032b0 <UART_puts>
 8002282:	e009      	b.n	8002298 <StartStopTask+0x78>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8002284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002286:	3330      	adds	r3, #48	@ 0x30
 8002288:	637b      	str	r3, [r7, #52]	@ 0x34
 800228a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800228c:	3301      	adds	r3, #1
 800228e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1cc      	bne.n	8002232 <StartStopTask+0x12>
		}
}
 8002298:	3738      	adds	r7, #56	@ 0x38
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000008 	.word	0x20000008
 80022a4:	080187ac 	.word	0x080187ac
 80022a8:	080187b0 	.word	0x080187b0
 80022ac:	080187bc 	.word	0x080187bc

080022b0 <DisplayTaskData>:
/**
* @brief Displays de stack-gegevens van alle taken op de UART
* @return void
*/
void DisplayTaskData(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08e      	sub	sp, #56	@ 0x38
 80022b4:	af00      	add	r7, sp, #0
	PTASKDATA    ptd = tasks;
 80022b6:	4b47      	ldr	r3, [pc, #284]	@ (80023d4 <DisplayTaskData+0x124>)
 80022b8:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t  highwatermark;
	TaskStatus_t xTaskDetails;
	unsigned int free, totalalloc = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	633b      	str	r3, [r7, #48]	@ 0x30

	unsigned int task_nr; // tasknr for changing priority

	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 80022be:	2301      	movs	r3, #1
 80022c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022c2:	e062      	b.n	800238a <DisplayTaskData+0xda>
	{
		highwatermark = uxTaskGetStackHighWaterMark(ptd->hTask); 	// amount of free bytes
 80022c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c8:	4618      	mov	r0, r3
 80022ca:	f00e f911 	bl	80104f0 <uxTaskGetStackHighWaterMark>
 80022ce:	62b8      	str	r0, [r7, #40]	@ 0x28
		free = (highwatermark * 100) / ptd->attr.stack_size; 		// in percentage
 80022d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d2:	2264      	movs	r2, #100	@ 0x64
 80022d4:	fb03 f202 	mul.w	r2, r3, r2
 80022d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e0:	627b      	str	r3, [r7, #36]	@ 0x24
		totalalloc += ptd->attr.stack_size;
 80022e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022e8:	4413      	add	r3, r2
 80022ea:	633b      	str	r3, [r7, #48]	@ 0x30

		vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid); // get task status
 80022ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ee:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80022f0:	4639      	mov	r1, r7
 80022f2:	2305      	movs	r3, #5
 80022f4:	2201      	movs	r2, #1
 80022f6:	f00e f879 	bl	80103ec <vTaskGetInfo>

		UART_puts("\r\n\t[");        UART_putint(task_nr); UART_puts("] ");
 80022fa:	4837      	ldr	r0, [pc, #220]	@ (80023d8 <DisplayTaskData+0x128>)
 80022fc:	f000 ffd8 	bl	80032b0 <UART_puts>
 8002300:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002302:	f000 fff1 	bl	80032e8 <UART_putint>
 8002306:	4835      	ldr	r0, [pc, #212]	@ (80023dc <DisplayTaskData+0x12c>)
 8002308:	f000 ffd2 	bl	80032b0 <UART_puts>
		UART_puts(ptd->attr.name);
 800230c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4618      	mov	r0, r3
 8002312:	f000 ffcd 	bl	80032b0 <UART_puts>
		UART_puts("\t priority: ");  UART_putint(ptd->attr.priority);
 8002316:	4832      	ldr	r0, [pc, #200]	@ (80023e0 <DisplayTaskData+0x130>)
 8002318:	f000 ffca 	bl	80032b0 <UART_puts>
 800231c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4618      	mov	r0, r3
 8002322:	f000 ffe1 	bl	80032e8 <UART_putint>
		UART_puts("\t stacksize: "); UART_putint(ptd->attr.stack_size * 4);
 8002326:	482f      	ldr	r0, [pc, #188]	@ (80023e4 <DisplayTaskData+0x134>)
 8002328:	f000 ffc2 	bl	80032b0 <UART_puts>
 800232c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4618      	mov	r0, r3
 8002334:	f000 ffd8 	bl	80032e8 <UART_putint>
		UART_puts("\t free: ");  UART_putint((ptd->attr.stack_size- highwatermark) * 4);
 8002338:	482b      	ldr	r0, [pc, #172]	@ (80023e8 <DisplayTaskData+0x138>)
 800233a:	f000 ffb9 	bl	80032b0 <UART_puts>
 800233e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002340:	69da      	ldr	r2, [r3, #28]
 8002342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4618      	mov	r0, r3
 800234a:	f000 ffcd 	bl	80032e8 <UART_putint>
		UART_puts("\t used: ");      UART_putint(100 - free); UART_puts("%");
 800234e:	4827      	ldr	r0, [pc, #156]	@ (80023ec <DisplayTaskData+0x13c>)
 8002350:	f000 ffae 	bl	80032b0 <UART_puts>
 8002354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002356:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800235a:	4618      	mov	r0, r3
 800235c:	f000 ffc4 	bl	80032e8 <UART_putint>
 8002360:	4823      	ldr	r0, [pc, #140]	@ (80023f0 <DisplayTaskData+0x140>)
 8002362:	f000 ffa5 	bl	80032b0 <UART_puts>
		UART_puts("\t status: ");    UART_puts(xTaskDetails.eCurrentState == eSuspended ? "suspended": "running");
 8002366:	4823      	ldr	r0, [pc, #140]	@ (80023f4 <DisplayTaskData+0x144>)
 8002368:	f000 ffa2 	bl	80032b0 <UART_puts>
 800236c:	7b3b      	ldrb	r3, [r7, #12]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d101      	bne.n	8002376 <DisplayTaskData+0xc6>
 8002372:	4b21      	ldr	r3, [pc, #132]	@ (80023f8 <DisplayTaskData+0x148>)
 8002374:	e000      	b.n	8002378 <DisplayTaskData+0xc8>
 8002376:	4b21      	ldr	r3, [pc, #132]	@ (80023fc <DisplayTaskData+0x14c>)
 8002378:	4618      	mov	r0, r3
 800237a:	f000 ff99 	bl	80032b0 <UART_puts>
	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 800237e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002380:	3330      	adds	r3, #48	@ 0x30
 8002382:	637b      	str	r3, [r7, #52]	@ 0x34
 8002384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002386:	3301      	adds	r3, #1
 8002388:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800238a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d198      	bne.n	80022c4 <DisplayTaskData+0x14>
	}
	UART_puts("\r\n\tTotal heap: "); UART_putint(configTOTAL_HEAP_SIZE);
 8002392:	481b      	ldr	r0, [pc, #108]	@ (8002400 <DisplayTaskData+0x150>)
 8002394:	f000 ff8c 	bl	80032b0 <UART_puts>
 8002398:	f44f 407a 	mov.w	r0, #64000	@ 0xfa00
 800239c:	f000 ffa4 	bl	80032e8 <UART_putint>
	UART_puts("    Allocated task stack: "); UART_putint(totalalloc * 4);
 80023a0:	4818      	ldr	r0, [pc, #96]	@ (8002404 <DisplayTaskData+0x154>)
 80023a2:	f000 ff85 	bl	80032b0 <UART_puts>
 80023a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 ff9c 	bl	80032e8 <UART_putint>
	UART_puts("    Free heap space: "); UART_putint(configTOTAL_HEAP_SIZE - (totalalloc * 4));
 80023b0:	4815      	ldr	r0, [pc, #84]	@ (8002408 <DisplayTaskData+0x158>)
 80023b2:	f000 ff7d 	bl	80032b0 <UART_puts>
 80023b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b8:	f5c3 537a 	rsb	r3, r3, #16000	@ 0x3e80
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 ff92 	bl	80032e8 <UART_putint>
	UART_puts("\r\n");
 80023c4:	4811      	ldr	r0, [pc, #68]	@ (800240c <DisplayTaskData+0x15c>)
 80023c6:	f000 ff73 	bl	80032b0 <UART_puts>
}
 80023ca:	bf00      	nop
 80023cc:	3738      	adds	r7, #56	@ 0x38
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000008 	.word	0x20000008
 80023d8:	080187c8 	.word	0x080187c8
 80023dc:	080187d0 	.word	0x080187d0
 80023e0:	080187d4 	.word	0x080187d4
 80023e4:	080187e4 	.word	0x080187e4
 80023e8:	080187f4 	.word	0x080187f4
 80023ec:	08018800 	.word	0x08018800
 80023f0:	0801880c 	.word	0x0801880c
 80023f4:	08018810 	.word	0x08018810
 80023f8:	0801881c 	.word	0x0801881c
 80023fc:	08018828 	.word	0x08018828
 8002400:	08018830 	.word	0x08018830
 8002404:	08018840 	.word	0x08018840
 8002408:	0801885c 	.word	0x0801885c
 800240c:	080187ac 	.word	0x080187ac

08002410 <split_nmea_fields>:
* Door te kijken naar de komma in de string en deze te vervangen met een \0 knip je de grote string in kleine strings.
* @param char pointer op de boodschap, char pointer op de fields array, int max aantal fields
* @return void
*/
void split_nmea_fields(char *message, char *fields[], int max_fields)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
    int i = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]
    char *start = message; 					// pointer naar begin msgbuffer
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	61bb      	str	r3, [r7, #24]
    while (i < max_fields)					// Blijf herhalen tot max_fields
 8002424:	e015      	b.n	8002452 <split_nmea_fields+0x42>
    {
        fields[i++] = start;				// Pointer naar begin van elke string opslaan
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	61fa      	str	r2, [r7, #28]
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	4413      	add	r3, r2
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	601a      	str	r2, [r3, #0]
        char *comma = strchr(start, ',');	// pointer naar ',' wijzen
 8002436:	212c      	movs	r1, #44	@ 0x2c
 8002438:	69b8      	ldr	r0, [r7, #24]
 800243a:	f011 fc0c 	bl	8013c56 <strchr>
 800243e:	6178      	str	r0, [r7, #20]
        if (!comma)							// als er geen ',' zijn break
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <split_nmea_fields+0x4c>
			break;
        *comma = '\0';						// ',' vervangen met '\0' zodat het tot strings gemaakt wordt
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
        start = comma + 1;					// nieuwe start aangeven string terminator + 1
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	3301      	adds	r3, #1
 8002450:	61bb      	str	r3, [r7, #24]
    while (i < max_fields)					// Blijf herhalen tot max_fields
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	429a      	cmp	r2, r3
 8002458:	dbe5      	blt.n	8002426 <split_nmea_fields+0x16>
    }
}
 800245a:	e000      	b.n	800245e <split_nmea_fields+0x4e>
			break;
 800245c:	bf00      	nop
}
 800245e:	bf00      	nop
 8002460:	3720      	adds	r7, #32
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <fill_GNRMC>:
* GNRMC-struct, mbv strcpy(); en split_nmea_fields(); <BR>
* De struct bevat nu alleen chars vervolgens worden die omgezet met atof();.
* @return void
*/
void fill_GNRMC(char *message)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b096      	sub	sp, #88	@ 0x58
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	// example: $GNRMC,164435.000,A,5205.9505,N,00507.0873,E,0.49,21.70,140423,,,A
	//          id    , time     ,s,

	char *fields[20];						// array van pointers
	split_nmea_fields(message, fields, 20);
 8002470:	f107 0308 	add.w	r3, r7, #8
 8002474:	2214      	movs	r2, #20
 8002476:	4619      	mov	r1, r3
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff ffc9 	bl	8002410 <split_nmea_fields>

	// een field komt overeen met een string dus string 1 bevindt zich op positie 0 en is in dit geval de header
	strcpy(gnrmc.head, fields[0]);
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	4619      	mov	r1, r3
 8002482:	4829      	ldr	r0, [pc, #164]	@ (8002528 <fill_GNRMC+0xc0>)
 8002484:	f011 fd47 	bl	8013f16 <strcpy>
	gnrmc.status = fields[2][0];
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	781a      	ldrb	r2, [r3, #0]
 800248c:	4b26      	ldr	r3, [pc, #152]	@ (8002528 <fill_GNRMC+0xc0>)
 800248e:	749a      	strb	r2, [r3, #18]
	strcpy(gnrmc.latitude, fields[3]);
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	4619      	mov	r1, r3
 8002494:	4825      	ldr	r0, [pc, #148]	@ (800252c <fill_GNRMC+0xc4>)
 8002496:	f011 fd3e 	bl	8013f16 <strcpy>
	strcpy(gnrmc.longitude, fields[5]);
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	4619      	mov	r1, r3
 800249e:	4824      	ldr	r0, [pc, #144]	@ (8002530 <fill_GNRMC+0xc8>)
 80024a0:	f011 fd39 	bl	8013f16 <strcpy>
	strcpy(gnrmc.speed, fields[7]);
 80024a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a6:	4619      	mov	r1, r3
 80024a8:	4822      	ldr	r0, [pc, #136]	@ (8002534 <fill_GNRMC+0xcc>)
 80024aa:	f011 fd34 	bl	8013f16 <strcpy>
	strcpy(gnrmc.course, fields[8]);
 80024ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b0:	4619      	mov	r1, r3
 80024b2:	4821      	ldr	r0, [pc, #132]	@ (8002538 <fill_GNRMC+0xd0>)
 80024b4:	f011 fd2f 	bl	8013f16 <strcpy>

	if (Uart_debug_out & GPS_DEBUG_OUT)
 80024b8:	4b20      	ldr	r3, [pc, #128]	@ (800253c <fill_GNRMC+0xd4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d025      	beq.n	8002510 <fill_GNRMC+0xa8>
	{
		UART_puts("\r\n\t GPS type: \t");  UART_puts(gnrmc.head);
 80024c4:	481e      	ldr	r0, [pc, #120]	@ (8002540 <fill_GNRMC+0xd8>)
 80024c6:	f000 fef3 	bl	80032b0 <UART_puts>
 80024ca:	4817      	ldr	r0, [pc, #92]	@ (8002528 <fill_GNRMC+0xc0>)
 80024cc:	f000 fef0 	bl	80032b0 <UART_puts>
		UART_puts("\r\n\t status: \t\t");  UART_putchar(gnrmc.status);
 80024d0:	481c      	ldr	r0, [pc, #112]	@ (8002544 <fill_GNRMC+0xdc>)
 80024d2:	f000 feed 	bl	80032b0 <UART_puts>
 80024d6:	4b14      	ldr	r3, [pc, #80]	@ (8002528 <fill_GNRMC+0xc0>)
 80024d8:	7c9b      	ldrb	r3, [r3, #18]
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 fed6 	bl	800328c <UART_putchar>
		UART_puts("\r\n\t latitude:\t\t"); UART_puts(gnrmc.latitude);
 80024e0:	4819      	ldr	r0, [pc, #100]	@ (8002548 <fill_GNRMC+0xe0>)
 80024e2:	f000 fee5 	bl	80032b0 <UART_puts>
 80024e6:	4811      	ldr	r0, [pc, #68]	@ (800252c <fill_GNRMC+0xc4>)
 80024e8:	f000 fee2 	bl	80032b0 <UART_puts>
		UART_puts("\r\n\t longitude:\t");  UART_puts(gnrmc.longitude);
 80024ec:	4817      	ldr	r0, [pc, #92]	@ (800254c <fill_GNRMC+0xe4>)
 80024ee:	f000 fedf 	bl	80032b0 <UART_puts>
 80024f2:	480f      	ldr	r0, [pc, #60]	@ (8002530 <fill_GNRMC+0xc8>)
 80024f4:	f000 fedc 	bl	80032b0 <UART_puts>
		UART_puts("\r\n\t speed:    \t");  UART_puts(gnrmc.speed);
 80024f8:	4815      	ldr	r0, [pc, #84]	@ (8002550 <fill_GNRMC+0xe8>)
 80024fa:	f000 fed9 	bl	80032b0 <UART_puts>
 80024fe:	480d      	ldr	r0, [pc, #52]	@ (8002534 <fill_GNRMC+0xcc>)
 8002500:	f000 fed6 	bl	80032b0 <UART_puts>
		UART_puts("\r\n\t course:   \t");  UART_puts(gnrmc.course);
 8002504:	4813      	ldr	r0, [pc, #76]	@ (8002554 <fill_GNRMC+0xec>)
 8002506:	f000 fed3 	bl	80032b0 <UART_puts>
 800250a:	480b      	ldr	r0, [pc, #44]	@ (8002538 <fill_GNRMC+0xd0>)
 800250c:	f000 fed0 	bl	80032b0 <UART_puts>
	}
	xTaskNotify(GetTaskhandle("GNRMC_Parser"), 0, eNoAction);
 8002510:	4811      	ldr	r0, [pc, #68]	@ (8002558 <fill_GNRMC+0xf0>)
 8002512:	f7ff fe27 	bl	8002164 <GetTaskhandle>
 8002516:	2300      	movs	r3, #0
 8002518:	2200      	movs	r2, #0
 800251a:	2100      	movs	r1, #0
 800251c:	f00e faac 	bl	8010a78 <xTaskGenericNotify>
}
 8002520:	bf00      	nop
 8002522:	3758      	adds	r7, #88	@ 0x58
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000420 	.word	0x20000420
 800252c:	20000433 	.word	0x20000433
 8002530:	20000441 	.word	0x20000441
 8002534:	2000044f 	.word	0x2000044f
 8002538:	20000458 	.word	0x20000458
 800253c:	20000404 	.word	0x20000404
 8002540:	08018874 	.word	0x08018874
 8002544:	08018884 	.word	0x08018884
 8002548:	08018894 	.word	0x08018894
 800254c:	080188a4 	.word	0x080188a4
 8002550:	080188b4 	.word	0x080188b4
 8002554:	080188c4 	.word	0x080188c4
 8002558:	080188d4 	.word	0x080188d4

0800255c <GPS_getNMEA>:
* binnenkomen. * De handler zet elk inkomende character gelijk op een queue, die hier uitgelezen wordt.
* Vervolgens wordt hiervan een GPS-message opgebouwd en verwerkt.
* @return void
*/
void GPS_getNMEA (void *argument)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b09c      	sub	sp, #112	@ 0x70
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
    char  Q_char;   			// char to receive from queue
	char  MSG_buff[GPS_MAXLEN]; // buffer for GPS-string
	int   pos = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	66fb      	str	r3, [r7, #108]	@ 0x6c
	int   cs;                   // checksum-flag
	int   new_msg = FALSE;      // do we encounter a '$'-char?
 8002568:	2300      	movs	r3, #0
 800256a:	66bb      	str	r3, [r7, #104]	@ 0x68
	int   msg_type = 0;         // do we want this message to be interpreted?
 800256c:	2300      	movs	r3, #0
 800256e:	667b      	str	r3, [r7, #100]	@ 0x64

	UART_puts((char *)__func__); UART_puts("started\n\r");
 8002570:	4855      	ldr	r0, [pc, #340]	@ (80026c8 <GPS_getNMEA+0x16c>)
 8002572:	f000 fe9d 	bl	80032b0 <UART_puts>
 8002576:	4855      	ldr	r0, [pc, #340]	@ (80026cc <GPS_getNMEA+0x170>)
 8002578:	f000 fe9a 	bl	80032b0 <UART_puts>

	while (TRUE)
	{
		xQueueReceive(hGPS_Queue, &Q_char, portMAX_DELAY); // get one char from the q
 800257c:	4b54      	ldr	r3, [pc, #336]	@ (80026d0 <GPS_getNMEA+0x174>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f107 015f 	add.w	r1, r7, #95	@ 0x5f
 8002584:	f04f 32ff 	mov.w	r2, #4294967295
 8002588:	4618      	mov	r0, r3
 800258a:	f00c f917 	bl	800e7bc <xQueueReceive>

		//UART_putchar(Q_buff);  // echo, for testing

		if (Q_char == '$') // gotcha, new datastring started
 800258e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002592:	2b24      	cmp	r3, #36	@ 0x24
 8002594:	d10a      	bne.n	80025ac <GPS_getNMEA+0x50>
		{
			memset(MSG_buff, 0, sizeof(MSG_buff)); // clear buff
 8002596:	f107 030c 	add.w	r3, r7, #12
 800259a:	2253      	movs	r2, #83	@ 0x53
 800259c:	2100      	movs	r1, #0
 800259e:	4618      	mov	r0, r3
 80025a0:	f011 fb51 	bl	8013c46 <memset>
			pos = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
			new_msg = TRUE; // from now on, chars are valid to receive
 80025a8:	2301      	movs	r3, #1
 80025aa:	66bb      	str	r3, [r7, #104]	@ 0x68
		}

		if (new_msg == FALSE) // char only valid if started by $
 80025ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8088 	beq.w	80026c4 <GPS_getNMEA+0x168>
			continue;

		MSG_buff[pos] = Q_char; // copy char read from Q into the msg-buf
 80025b4:	f897 105f 	ldrb.w	r1, [r7, #95]	@ 0x5f
 80025b8:	f107 020c 	add.w	r2, r7, #12
 80025bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025be:	4413      	add	r3, r2
 80025c0:	460a      	mov	r2, r1
 80025c2:	701a      	strb	r2, [r3, #0]

		// if pos==5, the message type (f.i. "$GPGSA) is complete, so we now we can determine
		// if we want the rest of the message... else we skip the rest characters
		if (pos == 5)
 80025c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025c6:	2b05      	cmp	r3, #5
 80025c8:	d130      	bne.n	800262c <GPS_getNMEA+0xd0>
		{
			msg_type = 0; // reset
 80025ca:	2300      	movs	r3, #0
 80025cc:	667b      	str	r3, [r7, #100]	@ 0x64

			// next, we decide which message types we want to interpret
			// and we set the message-type for later use...
			if      (!strncmp(&MSG_buff[1], "GNRMC", 5)) msg_type = eGNRMC;
 80025ce:	f107 030c 	add.w	r3, r7, #12
 80025d2:	3301      	adds	r3, #1
 80025d4:	2205      	movs	r2, #5
 80025d6:	493f      	ldr	r1, [pc, #252]	@ (80026d4 <GPS_getNMEA+0x178>)
 80025d8:	4618      	mov	r0, r3
 80025da:	f011 fb49 	bl	8013c70 <strncmp>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d102      	bne.n	80025ea <GPS_getNMEA+0x8e>
 80025e4:	2301      	movs	r3, #1
 80025e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80025e8:	e01a      	b.n	8002620 <GPS_getNMEA+0xc4>
			else if (!strncmp(&MSG_buff[1], "GPGSA", 5)) msg_type = eGPGSA;
 80025ea:	f107 030c 	add.w	r3, r7, #12
 80025ee:	3301      	adds	r3, #1
 80025f0:	2205      	movs	r2, #5
 80025f2:	4939      	ldr	r1, [pc, #228]	@ (80026d8 <GPS_getNMEA+0x17c>)
 80025f4:	4618      	mov	r0, r3
 80025f6:	f011 fb3b 	bl	8013c70 <strncmp>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d102      	bne.n	8002606 <GPS_getNMEA+0xaa>
 8002600:	2302      	movs	r3, #2
 8002602:	667b      	str	r3, [r7, #100]	@ 0x64
 8002604:	e00c      	b.n	8002620 <GPS_getNMEA+0xc4>
			else if (!strncmp(&MSG_buff[1], "GNGGA", 5)) msg_type = eGNGGA;
 8002606:	f107 030c 	add.w	r3, r7, #12
 800260a:	3301      	adds	r3, #1
 800260c:	2205      	movs	r2, #5
 800260e:	4933      	ldr	r1, [pc, #204]	@ (80026dc <GPS_getNMEA+0x180>)
 8002610:	4618      	mov	r0, r3
 8002612:	f011 fb2d 	bl	8013c70 <strncmp>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <GPS_getNMEA+0xc4>
 800261c:	2303      	movs	r3, #3
 800261e:	667b      	str	r3, [r7, #100]	@ 0x64

			if (!msg_type) // not an interesting message type
 8002620:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002622:	2b00      	cmp	r3, #0
 8002624:	d102      	bne.n	800262c <GPS_getNMEA+0xd0>
			{
				new_msg = FALSE;
 8002626:	2300      	movs	r3, #0
 8002628:	66bb      	str	r3, [r7, #104]	@ 0x68
				continue;
 800262a:	e04c      	b.n	80026c6 <GPS_getNMEA+0x16a>
			}
		}

		// if we are here, we are reading the rest of the message into the msg_buff
		////////////////////////////////////////////////////////////////////////////
		if (pos >= GPS_MAXLEN - 1) // avoid overflow (should not happen, but still...)
 800262c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800262e:	2b51      	cmp	r3, #81	@ 0x51
 8002630:	dd02      	ble.n	8002638 <GPS_getNMEA+0xdc>
		{
			new_msg = FALSE; // ignore it
 8002632:	2300      	movs	r3, #0
 8002634:	66bb      	str	r3, [r7, #104]	@ 0x68
			continue;
 8002636:	e046      	b.n	80026c6 <GPS_getNMEA+0x16a>
		}

		if (MSG_buff[pos] == '\r') // end of message encountered - all messages end with <CR-13><LF-10>
 8002638:	f107 020c 	add.w	r2, r7, #12
 800263c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800263e:	4413      	add	r3, r2
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b0d      	cmp	r3, #13
 8002644:	d13a      	bne.n	80026bc <GPS_getNMEA+0x160>
		{
			MSG_buff[pos] = '\0';          // close string
 8002646:	f107 020c 	add.w	r2, r7, #12
 800264a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800264c:	4413      	add	r3, r2
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
			cs = checksum_valid(MSG_buff); // note, checksumchars (eg "*43") are removed from string
 8002652:	f107 030c 	add.w	r3, r7, #12
 8002656:	4618      	mov	r0, r3
 8002658:	f000 f88e 	bl	8002778 <checksum_valid>
 800265c:	6638      	str	r0, [r7, #96]	@ 0x60

			if (Uart_debug_out & GPS_DEBUG_OUT) // output to uart if wanted
 800265e:	4b20      	ldr	r3, [pc, #128]	@ (80026e0 <GPS_getNMEA+0x184>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	2b00      	cmp	r3, #0
 8002668:	d010      	beq.n	800268c <GPS_getNMEA+0x130>
			{
				UART_puts("\r\nGPS (UART4): "); UART_puts(MSG_buff);
 800266a:	481e      	ldr	r0, [pc, #120]	@ (80026e4 <GPS_getNMEA+0x188>)
 800266c:	f000 fe20 	bl	80032b0 <UART_puts>
 8002670:	f107 030c 	add.w	r3, r7, #12
 8002674:	4618      	mov	r0, r3
 8002676:	f000 fe1b 	bl	80032b0 <UART_puts>
				UART_puts( cs ? " [cs:OK]\r\n" : " [cs:ERR]\r\n");
 800267a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <GPS_getNMEA+0x128>
 8002680:	4b19      	ldr	r3, [pc, #100]	@ (80026e8 <GPS_getNMEA+0x18c>)
 8002682:	e000      	b.n	8002686 <GPS_getNMEA+0x12a>
 8002684:	4b19      	ldr	r3, [pc, #100]	@ (80026ec <GPS_getNMEA+0x190>)
 8002686:	4618      	mov	r0, r3
 8002688:	f000 fe12 	bl	80032b0 <UART_puts>
			}

			if (cs) // checksum okay, so interpret the message
 800268c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800268e:	2b00      	cmp	r3, #0
 8002690:	d011      	beq.n	80026b6 <GPS_getNMEA+0x15a>
			{
				switch(msg_type) // extract data from msg into right struct
 8002692:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002694:	2b01      	cmp	r3, #1
 8002696:	d007      	beq.n	80026a8 <GPS_getNMEA+0x14c>
 8002698:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800269a:	2b00      	cmp	r3, #0
 800269c:	dd0a      	ble.n	80026b4 <GPS_getNMEA+0x158>
 800269e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026a0:	3b02      	subs	r3, #2
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d806      	bhi.n	80026b4 <GPS_getNMEA+0x158>
				{
				case eGNRMC: fill_GNRMC(MSG_buff);
						     // use the data...
						     break;
				case eGPGSA:
				case eGNGGA: break;
 80026a6:	e006      	b.n	80026b6 <GPS_getNMEA+0x15a>
				case eGNRMC: fill_GNRMC(MSG_buff);
 80026a8:	f107 030c 	add.w	r3, r7, #12
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff fedb 	bl	8002468 <fill_GNRMC>
						     break;
 80026b2:	e000      	b.n	80026b6 <GPS_getNMEA+0x15a>
				default:     break;
 80026b4:	bf00      	nop
				}
			}

			new_msg = FALSE; // new message possible
 80026b6:	2300      	movs	r3, #0
 80026b8:	66bb      	str	r3, [r7, #104]	@ 0x68
			continue;
 80026ba:	e004      	b.n	80026c6 <GPS_getNMEA+0x16a>
		}
		pos++; // proceed reading next char from the queue
 80026bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026be:	3301      	adds	r3, #1
 80026c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80026c2:	e75b      	b.n	800257c <GPS_getNMEA+0x20>
			continue;
 80026c4:	bf00      	nop
		xQueueReceive(hGPS_Queue, &Q_char, portMAX_DELAY); // get one char from the q
 80026c6:	e759      	b.n	800257c <GPS_getNMEA+0x20>
 80026c8:	08018a04 	.word	0x08018a04
 80026cc:	080188e4 	.word	0x080188e4
 80026d0:	2000040c 	.word	0x2000040c
 80026d4:	080188f0 	.word	0x080188f0
 80026d8:	080188f8 	.word	0x080188f8
 80026dc:	08018900 	.word	0x08018900
 80026e0:	20000404 	.word	0x20000404
 80026e4:	08018908 	.word	0x08018908
 80026e8:	08018918 	.word	0x08018918
 80026ec:	08018924 	.word	0x08018924

080026f0 <hex2int>:
}


// source: file:///C:/craigpeacock/NMEA-GPS
int hex2int(char *c)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
	int value;

	value = hexchar2int(c[0]);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 f813 	bl	8002728 <hexchar2int>
 8002702:	60f8      	str	r0, [r7, #12]
	value = value << 4;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	60fb      	str	r3, [r7, #12]
	value += hexchar2int(c[1]);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3301      	adds	r3, #1
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f000 f809 	bl	8002728 <hexchar2int>
 8002716:	4602      	mov	r2, r0
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4413      	add	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]

	return value;
 800271e:	68fb      	ldr	r3, [r7, #12]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <hexchar2int>:


int hexchar2int(char c)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9')
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	2b2f      	cmp	r3, #47	@ 0x2f
 8002736:	d905      	bls.n	8002744 <hexchar2int+0x1c>
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	2b39      	cmp	r3, #57	@ 0x39
 800273c:	d802      	bhi.n	8002744 <hexchar2int+0x1c>
        return (c - '0');
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	3b30      	subs	r3, #48	@ 0x30
 8002742:	e013      	b.n	800276c <hexchar2int+0x44>
    if (c >= 'A' && c <= 'F')
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	2b40      	cmp	r3, #64	@ 0x40
 8002748:	d905      	bls.n	8002756 <hexchar2int+0x2e>
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	2b46      	cmp	r3, #70	@ 0x46
 800274e:	d802      	bhi.n	8002756 <hexchar2int+0x2e>
        return (c - 'A' + 10);
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	3b37      	subs	r3, #55	@ 0x37
 8002754:	e00a      	b.n	800276c <hexchar2int+0x44>
    if (c >= 'a' && c <= 'f')
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	2b60      	cmp	r3, #96	@ 0x60
 800275a:	d905      	bls.n	8002768 <hexchar2int+0x40>
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	2b66      	cmp	r3, #102	@ 0x66
 8002760:	d802      	bhi.n	8002768 <hexchar2int+0x40>
        return (c - 'a' + 10);
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	3b57      	subs	r3, #87	@ 0x57
 8002766:	e001      	b.n	800276c <hexchar2int+0x44>
    return (-1);
 8002768:	f04f 33ff 	mov.w	r3, #4294967295
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <checksum_valid>:


// source: file:///C:/craigpeacock/NMEA-GPS
int checksum_valid(char *string)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
	char *checksum_str;
	int checksum, i;
	unsigned char calculated_checksum = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	74fb      	strb	r3, [r7, #19]

	// Checksum is postcede by *
	if ((checksum_str = strchr(string, '*')))
 8002784:	212a      	movs	r1, #42	@ 0x2a
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f011 fa65 	bl	8013c56 <strchr>
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d022      	beq.n	80027da <checksum_valid+0x62>
	{
		*checksum_str = '\0'; // Remove checksum from string
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	701a      	strb	r2, [r3, #0]
		// Calculate checksum, starting after $ (i = 1)
		for (i = 1; i < strlen(string); i++)
 800279a:	2301      	movs	r3, #1
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	e009      	b.n	80027b4 <checksum_valid+0x3c>
			calculated_checksum = calculated_checksum ^ string[i];
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	781a      	ldrb	r2, [r3, #0]
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	4053      	eors	r3, r2
 80027ac:	74fb      	strb	r3, [r7, #19]
		for (i = 1; i < strlen(string); i++)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	3301      	adds	r3, #1
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7fd fd6b 	bl	8000290 <strlen>
 80027ba:	4602      	mov	r2, r0
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d8ee      	bhi.n	80027a0 <checksum_valid+0x28>

		checksum = hex2int((char *)checksum_str+1);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	3301      	adds	r3, #1
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff ff92 	bl	80026f0 <hex2int>
 80027cc:	60b8      	str	r0, [r7, #8]
		//printf("Checksum Str [%s], Checksum %02X, Calculated Checksum %02X\r\n",(char *)checksum_str+1, checksum, calculated_checksum);
		if (checksum == calculated_checksum)
 80027ce:	7cfb      	ldrb	r3, [r7, #19]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d101      	bne.n	80027da <checksum_valid+0x62>
			return (1);
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <checksum_valid+0x64>
	}

	return (0);
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <Average_Bepalen_Waypoints>:
* @brief functie om gemiddelde van 3 datapunten op de slaan voor nauwkeurigere locatie.
* @param int i
* @return void
*/
void Average_Bepalen_Waypoints(int i)
{
 80027e4:	b590      	push	{r4, r7, lr}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
	waypoints[i].latitude = (average[0].latitude + average[1].latitude + average[2].latitude)/3; 	//gemiddelde wordt berekend en opgeslagen
 80027ec:	4b3d      	ldr	r3, [pc, #244]	@ (80028e4 <Average_Bepalen_Waypoints+0x100>)
 80027ee:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80027f2:	4b3c      	ldr	r3, [pc, #240]	@ (80028e4 <Average_Bepalen_Waypoints+0x100>)
 80027f4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80027f8:	f7fd fd58 	bl	80002ac <__adddf3>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	4b37      	ldr	r3, [pc, #220]	@ (80028e4 <Average_Bepalen_Waypoints+0x100>)
 8002806:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800280a:	f7fd fd4f 	bl	80002ac <__adddf3>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	4b33      	ldr	r3, [pc, #204]	@ (80028e8 <Average_Bepalen_Waypoints+0x104>)
 800281c:	f7fe f826 	bl	800086c <__aeabi_ddiv>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
 8002828:	4c30      	ldr	r4, [pc, #192]	@ (80028ec <Average_Bepalen_Waypoints+0x108>)
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4423      	add	r3, r4
 8002836:	3308      	adds	r3, #8
 8002838:	e9c3 0100 	strd	r0, r1, [r3]
	waypoints[i].longitude = (average[0].longitude + average[1].longitude + average[2].longitude)/3;
 800283c:	4b29      	ldr	r3, [pc, #164]	@ (80028e4 <Average_Bepalen_Waypoints+0x100>)
 800283e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002842:	4b28      	ldr	r3, [pc, #160]	@ (80028e4 <Average_Bepalen_Waypoints+0x100>)
 8002844:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002848:	f7fd fd30 	bl	80002ac <__adddf3>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	4b23      	ldr	r3, [pc, #140]	@ (80028e4 <Average_Bepalen_Waypoints+0x100>)
 8002856:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800285a:	f7fd fd27 	bl	80002ac <__adddf3>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	4b1f      	ldr	r3, [pc, #124]	@ (80028e8 <Average_Bepalen_Waypoints+0x104>)
 800286c:	f7fd fffe 	bl	800086c <__aeabi_ddiv>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4610      	mov	r0, r2
 8002876:	4619      	mov	r1, r3
 8002878:	4c1c      	ldr	r4, [pc, #112]	@ (80028ec <Average_Bepalen_Waypoints+0x108>)
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4423      	add	r3, r4
 8002886:	3310      	adds	r3, #16
 8002888:	e9c3 0100 	strd	r0, r1, [r3]
	waypoints[i].speed = (average[0].speed + average[1].speed + average[2].speed)/3;
 800288c:	4b15      	ldr	r3, [pc, #84]	@ (80028e4 <Average_Bepalen_Waypoints+0x100>)
 800288e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002892:	4b14      	ldr	r3, [pc, #80]	@ (80028e4 <Average_Bepalen_Waypoints+0x100>)
 8002894:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002898:	f7fd fd08 	bl	80002ac <__adddf3>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4610      	mov	r0, r2
 80028a2:	4619      	mov	r1, r3
 80028a4:	4b0f      	ldr	r3, [pc, #60]	@ (80028e4 <Average_Bepalen_Waypoints+0x100>)
 80028a6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80028aa:	f7fd fcff 	bl	80002ac <__adddf3>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4610      	mov	r0, r2
 80028b4:	4619      	mov	r1, r3
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	4b0b      	ldr	r3, [pc, #44]	@ (80028e8 <Average_Bepalen_Waypoints+0x104>)
 80028bc:	f7fd ffd6 	bl	800086c <__aeabi_ddiv>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	4c08      	ldr	r4, [pc, #32]	@ (80028ec <Average_Bepalen_Waypoints+0x108>)
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	4423      	add	r3, r4
 80028d6:	3318      	adds	r3, #24
 80028d8:	e9c3 0100 	strd	r0, r1, [r3]
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd90      	pop	{r4, r7, pc}
 80028e4:	200004c8 	.word	0x200004c8
 80028e8:	40080000 	.word	0x40080000
 80028ec:	20000540 	.word	0x20000540

080028f0 <GNRMC_Parser>:
* Vervolgens wordt deze data in een Data_Parser struct gestopt.
* Deze struct wordt door een teller in een nieuwe array gezet om hiervan het gemiddelde uit te rekenen.
* @return void
*/
void GNRMC_Parser(void* argument)
{
 80028f0:	b5b0      	push	{r4, r5, r7, lr}
 80028f2:	b08a      	sub	sp, #40	@ 0x28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
	int i = 0; 												// teller voor schrijven naar average array voor nauwkeurigere waypoint opslaan
 80028f8:	2300      	movs	r3, #0
 80028fa:	627b      	str	r3, [r7, #36]	@ 0x24
	char val1[10];
	char val2[10];

	while(TRUE)
	{
		xTaskNotifyWait(0,0, NULL, portMAX_DELAY);			// wacht op notify van fill_GNRMC in gps.c
 80028fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002900:	2200      	movs	r2, #0
 8002902:	2100      	movs	r1, #0
 8002904:	2000      	movs	r0, #0
 8002906:	f00e f857 	bl	80109b8 <xTaskNotifyWait>

		xSemaphoreTake(hGNRMC_Struct_Sem, portMAX_DELAY); 	// wacht op toegang tot de mutex;
 800290a:	4b69      	ldr	r3, [pc, #420]	@ (8002ab0 <GNRMC_Parser+0x1c0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f04f 31ff 	mov.w	r1, #4294967295
 8002912:	4618      	mov	r0, r3
 8002914:	f00c f834 	bl	800e980 <xQueueSemaphoreTake>

		if(!(gnrmc.status == 'A'))							// status check
 8002918:	4b66      	ldr	r3, [pc, #408]	@ (8002ab4 <GNRMC_Parser+0x1c4>)
 800291a:	7c9b      	ldrb	r3, [r3, #18]
 800291c:	2b41      	cmp	r3, #65	@ 0x41
 800291e:	d00a      	beq.n	8002936 <GNRMC_Parser+0x46>
		{
			GNRMC_data.status = 'V';
 8002920:	4b65      	ldr	r3, [pc, #404]	@ (8002ab8 <GNRMC_Parser+0x1c8>)
 8002922:	2256      	movs	r2, #86	@ 0x56
 8002924:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(hGNRMC_Struct_Sem);
 8002926:	4b62      	ldr	r3, [pc, #392]	@ (8002ab0 <GNRMC_Parser+0x1c0>)
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	2300      	movs	r3, #0
 800292c:	2200      	movs	r2, #0
 800292e:	2100      	movs	r1, #0
 8002930:	f00b fda4 	bl	800e47c <xQueueGenericSend>
			continue;
 8002934:	e0b4      	b.n	8002aa0 <GNRMC_Parser+0x1b0>
		}

		memset(&GNRMC_data, 0, sizeof(Data_Parser)); 		// clear the struct
 8002936:	2228      	movs	r2, #40	@ 0x28
 8002938:	2100      	movs	r1, #0
 800293a:	485f      	ldr	r0, [pc, #380]	@ (8002ab8 <GNRMC_Parser+0x1c8>)
 800293c:	f011 f983 	bl	8013c46 <memset>
		memset(val1, 0, sizeof(val1));						// val1 en val2 clearen
 8002940:	f107 0318 	add.w	r3, r7, #24
 8002944:	220a      	movs	r2, #10
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f011 f97c 	bl	8013c46 <memset>
		memset(val2, 0, sizeof(val2));
 800294e:	f107 030c 	add.w	r3, r7, #12
 8002952:	220a      	movs	r2, #10
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f011 f975 	bl	8013c46 <memset>

		memcpy(val1, gnrmc.latitude, 2);					// val1 en val2 vullen val1 krijgt eerste 2 karakters en val2 krijgt 3 t/m 8
 800295c:	4b55      	ldr	r3, [pc, #340]	@ (8002ab4 <GNRMC_Parser+0x1c4>)
 800295e:	f8b3 3013 	ldrh.w	r3, [r3, #19]
 8002962:	b29b      	uxth	r3, r3
 8002964:	833b      	strh	r3, [r7, #24]
		memcpy(val2, gnrmc.latitude+2, 8);
 8002966:	4955      	ldr	r1, [pc, #340]	@ (8002abc <GNRMC_Parser+0x1cc>)
 8002968:	f107 030c 	add.w	r3, r7, #12
 800296c:	2208      	movs	r2, #8
 800296e:	4618      	mov	r0, r3
 8002970:	f011 fad9 	bl	8013f26 <memcpy>
		GNRMC_data.latitude = (atof(val1))+(atof(val2)/60);	// atof conversie bij val1 en val2, val2 nog delen door 60 om tot juiste conversie te komen
 8002974:	f107 0318 	add.w	r3, r7, #24
 8002978:	4618      	mov	r0, r3
 800297a:	f00f fcb1 	bl	80122e0 <atof>
 800297e:	ec55 4b10 	vmov	r4, r5, d0
 8002982:	f107 030c 	add.w	r3, r7, #12
 8002986:	4618      	mov	r0, r3
 8002988:	f00f fcaa 	bl	80122e0 <atof>
 800298c:	ec51 0b10 	vmov	r0, r1, d0
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	4b4a      	ldr	r3, [pc, #296]	@ (8002ac0 <GNRMC_Parser+0x1d0>)
 8002996:	f7fd ff69 	bl	800086c <__aeabi_ddiv>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4620      	mov	r0, r4
 80029a0:	4629      	mov	r1, r5
 80029a2:	f7fd fc83 	bl	80002ac <__adddf3>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4943      	ldr	r1, [pc, #268]	@ (8002ab8 <GNRMC_Parser+0x1c8>)
 80029ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
		memset(val1, 0, sizeof(val1));						// val1 en val2 clearen
 80029b0:	f107 0318 	add.w	r3, r7, #24
 80029b4:	220a      	movs	r2, #10
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f011 f944 	bl	8013c46 <memset>
		memset(val2, 0, sizeof(val2));
 80029be:	f107 030c 	add.w	r3, r7, #12
 80029c2:	220a      	movs	r2, #10
 80029c4:	2100      	movs	r1, #0
 80029c6:	4618      	mov	r0, r3
 80029c8:	f011 f93d 	bl	8013c46 <memset>
		memcpy(val1, gnrmc.longitude, 3);					// val1 en val2 vullen val1 krijgt eerste 3 karakters en val2 krijgt 4 t/m 8
 80029cc:	f107 0318 	add.w	r3, r7, #24
 80029d0:	2203      	movs	r2, #3
 80029d2:	493c      	ldr	r1, [pc, #240]	@ (8002ac4 <GNRMC_Parser+0x1d4>)
 80029d4:	4618      	mov	r0, r3
 80029d6:	f011 faa6 	bl	8013f26 <memcpy>
		memcpy(val2, gnrmc.longitude+3, 8);
 80029da:	493b      	ldr	r1, [pc, #236]	@ (8002ac8 <GNRMC_Parser+0x1d8>)
 80029dc:	f107 030c 	add.w	r3, r7, #12
 80029e0:	2208      	movs	r2, #8
 80029e2:	4618      	mov	r0, r3
 80029e4:	f011 fa9f 	bl	8013f26 <memcpy>
		GNRMC_data.longitude = (atof(val1))+(atof(val2)/60);// atof conversie bij val1 en val2, val2 nog delen door 60 om tot juiste conversie te komen
 80029e8:	f107 0318 	add.w	r3, r7, #24
 80029ec:	4618      	mov	r0, r3
 80029ee:	f00f fc77 	bl	80122e0 <atof>
 80029f2:	ec55 4b10 	vmov	r4, r5, d0
 80029f6:	f107 030c 	add.w	r3, r7, #12
 80029fa:	4618      	mov	r0, r3
 80029fc:	f00f fc70 	bl	80122e0 <atof>
 8002a00:	ec51 0b10 	vmov	r0, r1, d0
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	4b2d      	ldr	r3, [pc, #180]	@ (8002ac0 <GNRMC_Parser+0x1d0>)
 8002a0a:	f7fd ff2f 	bl	800086c <__aeabi_ddiv>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4620      	mov	r0, r4
 8002a14:	4629      	mov	r1, r5
 8002a16:	f7fd fc49 	bl	80002ac <__adddf3>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4926      	ldr	r1, [pc, #152]	@ (8002ab8 <GNRMC_Parser+0x1c8>)
 8002a20:	e9c1 2304 	strd	r2, r3, [r1, #16]
		GNRMC_data.speed = atof(gnrmc.speed)*0.514444;		// speed omzetten van knopen naar m/s
 8002a24:	4829      	ldr	r0, [pc, #164]	@ (8002acc <GNRMC_Parser+0x1dc>)
 8002a26:	f00f fc5b 	bl	80122e0 <atof>
 8002a2a:	ec51 0b10 	vmov	r0, r1, d0
 8002a2e:	a31e      	add	r3, pc, #120	@ (adr r3, 8002aa8 <GNRMC_Parser+0x1b8>)
 8002a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a34:	f7fd fdf0 	bl	8000618 <__aeabi_dmul>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	491e      	ldr	r1, [pc, #120]	@ (8002ab8 <GNRMC_Parser+0x1c8>)
 8002a3e:	e9c1 2306 	strd	r2, r3, [r1, #24]
		GNRMC_data.course = atof(gnrmc.course);
 8002a42:	4823      	ldr	r0, [pc, #140]	@ (8002ad0 <GNRMC_Parser+0x1e0>)
 8002a44:	f00f fc4c 	bl	80122e0 <atof>
 8002a48:	eeb0 7a40 	vmov.f32	s14, s0
 8002a4c:	eef0 7a60 	vmov.f32	s15, s1
 8002a50:	4b19      	ldr	r3, [pc, #100]	@ (8002ab8 <GNRMC_Parser+0x1c8>)
 8002a52:	ed83 7b08 	vstr	d7, [r3, #32]
		GNRMC_data.status = 'A';							// Valid status meegeven voor later gebruik
 8002a56:	4b18      	ldr	r3, [pc, #96]	@ (8002ab8 <GNRMC_Parser+0x1c8>)
 8002a58:	2241      	movs	r2, #65	@ 0x41
 8002a5a:	701a      	strb	r2, [r3, #0]

		average[i] = GNRMC_data;							// zet data round robin in average[].
 8002a5c:	491d      	ldr	r1, [pc, #116]	@ (8002ad4 <GNRMC_Parser+0x1e4>)
 8002a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	440b      	add	r3, r1
 8002a6a:	4a13      	ldr	r2, [pc, #76]	@ (8002ab8 <GNRMC_Parser+0x1c8>)
 8002a6c:	461c      	mov	r4, r3
 8002a6e:	4615      	mov	r5, r2
 8002a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a7c:	e884 0003 	stmia.w	r4, {r0, r1}

		xSemaphoreGive(hGNRMC_Struct_Sem); 					// geef de mutex weer vrij voor een ander
 8002a80:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab0 <GNRMC_Parser+0x1c0>)
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	2300      	movs	r3, #0
 8002a86:	2200      	movs	r2, #0
 8002a88:	2100      	movs	r1, #0
 8002a8a:	f00b fcf7 	bl	800e47c <xQueueGenericSend>

		i++;
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	3301      	adds	r3, #1
 8002a92:	627b      	str	r3, [r7, #36]	@ 0x24
		if(i >= 3)											// als average[] vol is, dan opnieuw beginnen met vullen
 8002a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	f77f af30 	ble.w	80028fc <GNRMC_Parser+0xc>
			i = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	627b      	str	r3, [r7, #36]	@ 0x24
		xTaskNotifyWait(0,0, NULL, portMAX_DELAY);			// wacht op notify van fill_GNRMC in gps.c
 8002aa0:	e72c      	b.n	80028fc <GNRMC_Parser+0xc>
 8002aa2:	bf00      	nop
 8002aa4:	f3af 8000 	nop.w
 8002aa8:	4373f317 	.word	0x4373f317
 8002aac:	3fe07653 	.word	0x3fe07653
 8002ab0:	20000414 	.word	0x20000414
 8002ab4:	20000420 	.word	0x20000420
 8002ab8:	20000478 	.word	0x20000478
 8002abc:	20000435 	.word	0x20000435
 8002ac0:	404e0000 	.word	0x404e0000
 8002ac4:	20000441 	.word	0x20000441
 8002ac8:	20000444 	.word	0x20000444
 8002acc:	2000044f 	.word	0x2000044f
 8002ad0:	20000458 	.word	0x20000458
 8002ad4:	200004c8 	.word	0x200004c8

08002ad8 <data_opslaanTask>:
* @brief het gemiddelde van wat er in average[] staat wordt opgeslagen met een knop op het ARM-bordje voor meer nauwkeurigheid.<BR>
* Ook kan deze opgeslagen waypoints gerest kunnen worden met een andere knop. Deze knop krijgt de task door van ARM_keys_IRQ
* @return void
*/
void data_opslaanTask(void *argument)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	uint32_t key;
	int i = 0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]
	while(TRUE)
	{
		xTaskNotifyWait (0x00, 0xffffffff, &key, portMAX_DELAY);		// wacht op ARM_keys_IRQ
 8002ae4:	f107 0208 	add.w	r2, r7, #8
 8002ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8002aec:	f04f 31ff 	mov.w	r1, #4294967295
 8002af0:	2000      	movs	r0, #0
 8002af2:	f00d ff61 	bl	80109b8 <xTaskNotifyWait>

		if(key == 0x0002) 												// als resetknop is ingedrukt dan moet de arrat geleegd worden en de teller moet op 0
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d111      	bne.n	8002b20 <data_opslaanTask+0x48>
		{
			memset(&waypoints, 0, sizeof(waypoints));
 8002afc:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8002b00:	2100      	movs	r1, #0
 8002b02:	482c      	ldr	r0, [pc, #176]	@ (8002bb4 <data_opslaanTask+0xdc>)
 8002b04:	f011 f89f 	bl	8013c46 <memset>
			i = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60fb      	str	r3, [r7, #12]
			LCD_clear(); 												// LCD legen
 8002b0c:	f000 f9a0 	bl	8002e50 <LCD_clear>
			LCD_putint(i); 												// waypoint nummer op LCD
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 faa0 	bl	8003058 <LCD_putint>
			LCD_put("/30 waypoints");
 8002b18:	4827      	ldr	r0, [pc, #156]	@ (8002bb8 <data_opslaanTask+0xe0>)
 8002b1a:	f000 fa63 	bl	8002fe4 <LCD_put>
			continue;													// begin boven aan en wacht weer op een arm-key
 8002b1e:	e047      	b.n	8002bb0 <data_opslaanTask+0xd8>
		}

		if (i<MAX_WAYPOINTS && key == 0x0001)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b1d      	cmp	r3, #29
 8002b24:	dc38      	bgt.n	8002b98 <data_opslaanTask+0xc0>
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d135      	bne.n	8002b98 <data_opslaanTask+0xc0>
		{
		    xSemaphoreTake(hGNRMC_Struct_Sem, portMAX_DELAY);			// wacht op toegang tot de mutex;
 8002b2c:	4b23      	ldr	r3, [pc, #140]	@ (8002bbc <data_opslaanTask+0xe4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f04f 31ff 	mov.w	r1, #4294967295
 8002b34:	4618      	mov	r0, r3
 8002b36:	f00b ff23 	bl	800e980 <xQueueSemaphoreTake>

		    if(!(GNRMC_data.status == 'A'))								// status check
 8002b3a:	4b21      	ldr	r3, [pc, #132]	@ (8002bc0 <data_opslaanTask+0xe8>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b41      	cmp	r3, #65	@ 0x41
 8002b40:	d010      	beq.n	8002b64 <data_opslaanTask+0x8c>
		    {
		    	LCD_clear(); 											// LCD legen
 8002b42:	f000 f985 	bl	8002e50 <LCD_clear>
		    	LCD_putint(i); 											// waypoint nummer op LCD
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 fa85 	bl	8003058 <LCD_putint>
		    	LCD_put("/30 waypoints Geen Data");
 8002b4e:	481d      	ldr	r0, [pc, #116]	@ (8002bc4 <data_opslaanTask+0xec>)
 8002b50:	f000 fa48 	bl	8002fe4 <LCD_put>
		    	xSemaphoreGive(hGNRMC_Struct_Sem);
 8002b54:	4b19      	ldr	r3, [pc, #100]	@ (8002bbc <data_opslaanTask+0xe4>)
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	2300      	movs	r3, #0
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	f00b fc8d 	bl	800e47c <xQueueGenericSend>
		    	continue;
 8002b62:	e025      	b.n	8002bb0 <data_opslaanTask+0xd8>
		    }
		    Average_Bepalen_Waypoints(i);
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f7ff fe3d 	bl	80027e4 <Average_Bepalen_Waypoints>
		    xSemaphoreGive(hGNRMC_Struct_Sem); 							// wacht op toegang tot de mutex;
 8002b6a:	4b14      	ldr	r3, [pc, #80]	@ (8002bbc <data_opslaanTask+0xe4>)
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	2200      	movs	r2, #0
 8002b72:	2100      	movs	r1, #0
 8002b74:	f00b fc82 	bl	800e47c <xQueueGenericSend>

			i++;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	60fb      	str	r3, [r7, #12]

		    LCD_clear(); 												// LCD legen
 8002b7e:	f000 f967 	bl	8002e50 <LCD_clear>
		    LCD_putint(i); 												// waypoint nummer op LCD
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 fa67 	bl	8003058 <LCD_putint>
		    LCD_put("/30 waypoints");
 8002b8a:	480b      	ldr	r0, [pc, #44]	@ (8002bb8 <data_opslaanTask+0xe0>)
 8002b8c:	f000 fa2a 	bl	8002fe4 <LCD_put>
		    osDelay(100);												// spam beveiliging
 8002b90:	2064      	movs	r0, #100	@ 0x64
 8002b92:	f00a ff0b 	bl	800d9ac <osDelay>
 8002b96:	e00b      	b.n	8002bb0 <data_opslaanTask+0xd8>
		}
		else if (i == MAX_WAYPOINTS)									// het maximaal aantal waypoints is bereikt
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b1e      	cmp	r3, #30
 8002b9c:	d1a2      	bne.n	8002ae4 <data_opslaanTask+0xc>
		{
			 LCD_put("Limit reached!");
 8002b9e:	480a      	ldr	r0, [pc, #40]	@ (8002bc8 <data_opslaanTask+0xf0>)
 8002ba0:	f000 fa20 	bl	8002fe4 <LCD_put>
			 osDelay(100);												// zonder dit loopt de lcd vast
 8002ba4:	2064      	movs	r0, #100	@ 0x64
 8002ba6:	f00a ff01 	bl	800d9ac <osDelay>
			 i++;														// ga hierna uit de if statement zodat niet heel de lcd vol komt te staan
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3301      	adds	r3, #1
 8002bae:	60fb      	str	r3, [r7, #12]
		xTaskNotifyWait (0x00, 0xffffffff, &key, portMAX_DELAY);		// wacht op ARM_keys_IRQ
 8002bb0:	e798      	b.n	8002ae4 <data_opslaanTask+0xc>
 8002bb2:	bf00      	nop
 8002bb4:	20000540 	.word	0x20000540
 8002bb8:	08018930 	.word	0x08018930
 8002bbc:	20000414 	.word	0x20000414
 8002bc0:	20000478 	.word	0x20000478
 8002bc4:	08018940 	.word	0x08018940
 8002bc8:	08018958 	.word	0x08018958

08002bcc <BUZZER_put>:
}

// Maak een piepje met meegegeven lengte
// toevoeging om compatibel te blijven met ARM v4.2
void BUZZER_put(unsigned int time)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
    volatile unsigned int i;
    volatile unsigned int k=0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60bb      	str	r3, [r7, #8]

	while (k++<100)
 8002bd8:	e023      	b.n	8002c22 <BUZZER_put+0x56>
    {
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002be0:	4815      	ldr	r0, [pc, #84]	@ (8002c38 <BUZZER_put+0x6c>)
 8002be2:	f001 ff03 	bl	80049ec <HAL_GPIO_WritePin>
		for (i=0;i<(time+k);i++);
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	e002      	b.n	8002bf2 <BUZZER_put+0x26>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	441a      	add	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d8f6      	bhi.n	8002bec <BUZZER_put+0x20>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c04:	480c      	ldr	r0, [pc, #48]	@ (8002c38 <BUZZER_put+0x6c>)
 8002c06:	f001 fef1 	bl	80049ec <HAL_GPIO_WritePin>
		for (i=0;(i<time+k);i++);
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	e002      	b.n	8002c16 <BUZZER_put+0x4a>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	3301      	adds	r3, #1
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	441a      	add	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d8f6      	bhi.n	8002c10 <BUZZER_put+0x44>
	while (k++<100)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	60ba      	str	r2, [r7, #8]
 8002c28:	2b63      	cmp	r3, #99	@ 0x63
 8002c2a:	d9d6      	bls.n	8002bda <BUZZER_put+0xe>
	}
}
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40020800 	.word	0x40020800

08002c3c <KEYS_init>:
void KEYS_init(void)
/* Keys initialize
 * In this function the ports are set for the keyboard.
 * The rows are outputs and the columns are input.
 */
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	4b18      	ldr	r3, [pc, #96]	@ (8002ca8 <KEYS_init+0x6c>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4a:	4a17      	ldr	r2, [pc, #92]	@ (8002ca8 <KEYS_init+0x6c>)
 8002c4c:	f043 0308 	orr.w	r3, r3, #8
 8002c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c52:	4b15      	ldr	r3, [pc, #84]	@ (8002ca8 <KEYS_init+0x6c>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpio;
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c66:	2303      	movs	r3, #3
 8002c68:	613b      	str	r3, [r7, #16]

	gpio.Pin = KEY_ROW;
 8002c6a:	f640 030e 	movw	r3, #2062	@ 0x80e
 8002c6e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(PKEY_ROW, &gpio);
 8002c70:	1d3b      	adds	r3, r7, #4
 8002c72:	4619      	mov	r1, r3
 8002c74:	480d      	ldr	r0, [pc, #52]	@ (8002cac <KEYS_init+0x70>)
 8002c76:	f001 fd05 	bl	8004684 <HAL_GPIO_Init>

	gpio.Pin = KEY_COL;
 8002c7a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002c7e:	607b      	str	r3, [r7, #4]
	gpio.Mode = GPIO_MODE_INPUT;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_PULLDOWN;
 8002c84:	2302      	movs	r3, #2
 8002c86:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PKEY_COL, &gpio);
 8002c88:	1d3b      	adds	r3, r7, #4
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4807      	ldr	r0, [pc, #28]	@ (8002cac <KEYS_init+0x70>)
 8002c8e:	f001 fcf9 	bl	8004684 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_ROW, 0);
 8002c92:	2200      	movs	r2, #0
 8002c94:	f640 010e 	movw	r1, #2062	@ 0x80e
 8002c98:	4804      	ldr	r0, [pc, #16]	@ (8002cac <KEYS_init+0x70>)
 8002c9a:	f001 fea7 	bl	80049ec <HAL_GPIO_WritePin>
}
 8002c9e:	bf00      	nop
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40020c00 	.word	0x40020c00

08002cb0 <KEYS_initISR>:

void KEYS_initISR(int hilo)
/* Keys initialize for ISR
 * Set all lines high
 * */
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, hilo);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002cc2:	480e      	ldr	r0, [pc, #56]	@ (8002cfc <KEYS_initISR+0x4c>)
 8002cc4:	f001 fe92 	bl	80049ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, hilo);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	461a      	mov	r2, r3
 8002cce:	2102      	movs	r1, #2
 8002cd0:	480a      	ldr	r0, [pc, #40]	@ (8002cfc <KEYS_initISR+0x4c>)
 8002cd2:	f001 fe8b 	bl	80049ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, hilo);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2108      	movs	r1, #8
 8002cde:	4807      	ldr	r0, [pc, #28]	@ (8002cfc <KEYS_initISR+0x4c>)
 8002ce0:	f001 fe84 	bl	80049ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, hilo);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2104      	movs	r1, #4
 8002cec:	4803      	ldr	r0, [pc, #12]	@ (8002cfc <KEYS_initISR+0x4c>)
 8002cee:	f001 fe7d 	bl	80049ec <HAL_GPIO_WritePin>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40020c00 	.word	0x40020c00

08002d00 <KEYS_read>:
/* Keys read
 * This function reads which key is pressed.
 * It does so by making a row high and check if there is a connection with a column.
 * If there is a connection the value is returned.
 */
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	603b      	str	r3, [r7, #0]
	unsigned out = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 0);
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002d14:	4827      	ldr	r0, [pc, #156]	@ (8002db4 <KEYS_read+0xb4>)
 8002d16:	f001 fe69 	bl	80049ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 1);
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	2108      	movs	r1, #8
 8002d1e:	4825      	ldr	r0, [pc, #148]	@ (8002db4 <KEYS_read+0xb4>)
 8002d20:	f001 fe64 	bl	80049ec <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 8002d24:	f000 f848 	bl	8002db8 <KEYS_kolom>
 8002d28:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out= 12+key;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <KEYS_read+0x36>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	330c      	adds	r3, #12
 8002d34:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 0);
 8002d36:	2200      	movs	r2, #0
 8002d38:	2108      	movs	r1, #8
 8002d3a:	481e      	ldr	r0, [pc, #120]	@ (8002db4 <KEYS_read+0xb4>)
 8002d3c:	f001 fe56 	bl	80049ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 1);
 8002d40:	2201      	movs	r2, #1
 8002d42:	2104      	movs	r1, #4
 8002d44:	481b      	ldr	r0, [pc, #108]	@ (8002db4 <KEYS_read+0xb4>)
 8002d46:	f001 fe51 	bl	80049ec <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 8002d4a:	f000 f835 	bl	8002db8 <KEYS_kolom>
 8002d4e:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 8+key;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <KEYS_read+0x5c>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	3308      	adds	r3, #8
 8002d5a:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 0);
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2104      	movs	r1, #4
 8002d60:	4814      	ldr	r0, [pc, #80]	@ (8002db4 <KEYS_read+0xb4>)
 8002d62:	f001 fe43 	bl	80049ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 1);
 8002d66:	2201      	movs	r2, #1
 8002d68:	2102      	movs	r1, #2
 8002d6a:	4812      	ldr	r0, [pc, #72]	@ (8002db4 <KEYS_read+0xb4>)
 8002d6c:	f001 fe3e 	bl	80049ec <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 8002d70:	f000 f822 	bl	8002db8 <KEYS_kolom>
 8002d74:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 4+key;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <KEYS_read+0x82>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	3304      	adds	r3, #4
 8002d80:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 0);
 8002d82:	2200      	movs	r2, #0
 8002d84:	2102      	movs	r1, #2
 8002d86:	480b      	ldr	r0, [pc, #44]	@ (8002db4 <KEYS_read+0xb4>)
 8002d88:	f001 fe30 	bl	80049ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 1);
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002d92:	4808      	ldr	r0, [pc, #32]	@ (8002db4 <KEYS_read+0xb4>)
 8002d94:	f001 fe2a 	bl	80049ec <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 8002d98:	f000 f80e 	bl	8002db8 <KEYS_kolom>
 8002d9c:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = key;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <KEYS_read+0xa8>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	607b      	str	r3, [r7, #4]

	return out;
 8002da8:	687b      	ldr	r3, [r7, #4]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40020c00 	.word	0x40020c00

08002db8 <KEYS_kolom>:
unsigned int KEYS_kolom(void)
/* Keys Column
 * In this function the columns are checked if there is a connection.
 * If a column has a connection the return value is the column number.
 */
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K1) == 1) key = 1;
 8002dc2:	2140      	movs	r1, #64	@ 0x40
 8002dc4:	4814      	ldr	r0, [pc, #80]	@ (8002e18 <KEYS_kolom+0x60>)
 8002dc6:	f001 fdf9 	bl	80049bc <HAL_GPIO_ReadPin>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <KEYS_kolom+0x1c>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K2) == 1) key = 2;
 8002dd4:	2180      	movs	r1, #128	@ 0x80
 8002dd6:	4810      	ldr	r0, [pc, #64]	@ (8002e18 <KEYS_kolom+0x60>)
 8002dd8:	f001 fdf0 	bl	80049bc <HAL_GPIO_ReadPin>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <KEYS_kolom+0x2e>
 8002de2:	2302      	movs	r3, #2
 8002de4:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K3) == 1) key = 3;
 8002de6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002dea:	480b      	ldr	r0, [pc, #44]	@ (8002e18 <KEYS_kolom+0x60>)
 8002dec:	f001 fde6 	bl	80049bc <HAL_GPIO_ReadPin>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <KEYS_kolom+0x42>
 8002df6:	2303      	movs	r3, #3
 8002df8:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K4) == 1) key = 4;
 8002dfa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002dfe:	4806      	ldr	r0, [pc, #24]	@ (8002e18 <KEYS_kolom+0x60>)
 8002e00:	f001 fddc 	bl	80049bc <HAL_GPIO_ReadPin>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <KEYS_kolom+0x56>
 8002e0a:	2304      	movs	r3, #4
 8002e0c:	607b      	str	r3, [r7, #4]
	return key;
 8002e0e:	687b      	ldr	r3, [r7, #4]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40020c00 	.word	0x40020c00

08002e1c <ClearBits>:
static void LCD_writebyte(unsigned char data);

unsigned char curpos = 0; // remember cursorposition

void ClearBits(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_RESET);
 8002e20:	2200      	movs	r2, #0
 8002e22:	2108      	movs	r1, #8
 8002e24:	4809      	ldr	r0, [pc, #36]	@ (8002e4c <ClearBits+0x30>)
 8002e26:	f001 fde1 	bl	80049ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_RESET);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2110      	movs	r1, #16
 8002e2e:	4807      	ldr	r0, [pc, #28]	@ (8002e4c <ClearBits+0x30>)
 8002e30:	f001 fddc 	bl	80049ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_RESET);
 8002e34:	2200      	movs	r2, #0
 8002e36:	2120      	movs	r1, #32
 8002e38:	4804      	ldr	r0, [pc, #16]	@ (8002e4c <ClearBits+0x30>)
 8002e3a:	f001 fdd7 	bl	80049ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_RESET);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2140      	movs	r1, #64	@ 0x40
 8002e42:	4802      	ldr	r0, [pc, #8]	@ (8002e4c <ClearBits+0x30>)
 8002e44:	f001 fdd2 	bl	80049ec <HAL_GPIO_WritePin>
}
 8002e48:	bf00      	nop
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40021000 	.word	0x40021000

08002e50 <LCD_clear>:
   LCD_writecontrol(0x02); // cursur home
   curpos=0;               // reset position
}

void LCD_clear(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
   LCD_writecontrol(0x01); // clearscreen
 8002e54:	2001      	movs	r0, #1
 8002e56:	f000 f9ad 	bl	80031b4 <LCD_writecontrol>
   curpos=0;               // reset position
 8002e5a:	4b04      	ldr	r3, [pc, #16]	@ (8002e6c <LCD_clear+0x1c>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
   HAL_Delay(5);
 8002e60:	2005      	movs	r0, #5
 8002e62:	f001 fa77 	bl	8004354 <HAL_Delay>
//   busyflag();

}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	2000c640 	.word	0x2000c640

08002e70 <LCD_init>:


// init LCD
// Display wordt gebruikt in 4bits modus,2 regels, 5x7 dots font.
void LCD_init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;	// GPIO init structure.
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	4b44      	ldr	r3, [pc, #272]	@ (8002f8c <LCD_init+0x11c>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7e:	4a43      	ldr	r2, [pc, #268]	@ (8002f8c <LCD_init+0x11c>)
 8002e80:	f043 0310 	orr.w	r3, r3, #16
 8002e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e86:	4b41      	ldr	r3, [pc, #260]	@ (8002f8c <LCD_init+0x11c>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	f003 0310 	and.w	r3, r3, #16
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	607b      	str	r3, [r7, #4]
 8002e96:	4b3d      	ldr	r3, [pc, #244]	@ (8002f8c <LCD_init+0x11c>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	4a3c      	ldr	r2, [pc, #240]	@ (8002f8c <LCD_init+0x11c>)
 8002e9c:	f043 0304 	orr.w	r3, r3, #4
 8002ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea2:	4b3a      	ldr	r3, [pc, #232]	@ (8002f8c <LCD_init+0x11c>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	607b      	str	r3, [r7, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	603b      	str	r3, [r7, #0]
 8002eb2:	4b36      	ldr	r3, [pc, #216]	@ (8002f8c <LCD_init+0x11c>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	4a35      	ldr	r2, [pc, #212]	@ (8002f8c <LCD_init+0x11c>)
 8002eb8:	f043 0308 	orr.w	r3, r3, #8
 8002ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ebe:	4b33      	ldr	r3, [pc, #204]	@ (8002f8c <LCD_init+0x11c>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	683b      	ldr	r3, [r7, #0]

	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	613b      	str	r3, [r7, #16]
	gpio.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	61bb      	str	r3, [r7, #24]
	gpio.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8002ed6:	2378      	movs	r3, #120	@ 0x78
 8002ed8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &gpio);
 8002eda:	f107 030c 	add.w	r3, r7, #12
 8002ede:	4619      	mov	r1, r3
 8002ee0:	482b      	ldr	r0, [pc, #172]	@ (8002f90 <LCD_init+0x120>)
 8002ee2:	f001 fbcf 	bl	8004684 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 8002ee6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002eea:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &gpio);
 8002eec:	f107 030c 	add.w	r3, r7, #12
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4828      	ldr	r0, [pc, #160]	@ (8002f94 <LCD_init+0x124>)
 8002ef4:	f001 fbc6 	bl	8004684 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_0;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &gpio);
 8002efc:	f107 030c 	add.w	r3, r7, #12
 8002f00:	4619      	mov	r1, r3
 8002f02:	4825      	ldr	r0, [pc, #148]	@ (8002f98 <LCD_init+0x128>)
 8002f04:	f001 fbbe 	bl	8004684 <HAL_GPIO_Init>
//	GPIOE -> MODER |= ( 1 << 12 );
//	GPIOC -> MODER |= ( 1 << 26 );
//	GPIOC -> MODER |= ( 1 << 30 );
//	GPIOC -> MODER |= ( 1 << 28 );

	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f0e:	4821      	ldr	r0, [pc, #132]	@ (8002f94 <LCD_init+0x124>)
 8002f10:	f001 fd6c 	bl	80049ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8002f14:	2200      	movs	r2, #0
 8002f16:	2101      	movs	r1, #1
 8002f18:	481f      	ldr	r0, [pc, #124]	@ (8002f98 <LCD_init+0x128>)
 8002f1a:	f001 fd67 	bl	80049ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW, GPIO_PIN_RESET);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002f24:	481b      	ldr	r0, [pc, #108]	@ (8002f94 <LCD_init+0x124>)
 8002f26:	f001 fd61 	bl	80049ec <HAL_GPIO_WritePin>

	HAL_Delay(15);//15
 8002f2a:	200f      	movs	r0, #15
 8002f2c:	f001 fa12 	bl	8004354 <HAL_Delay>

    LCD_writebyte(0x30); // function-set boot
 8002f30:	2030      	movs	r0, #48	@ 0x30
 8002f32:	f000 f90d 	bl	8003150 <LCD_writebyte>
    HAL_Delay(70);
 8002f36:	2046      	movs	r0, #70	@ 0x46
 8002f38:	f001 fa0c 	bl	8004354 <HAL_Delay>
    LCD_writebyte(0x30);
 8002f3c:	2030      	movs	r0, #48	@ 0x30
 8002f3e:	f000 f907 	bl	8003150 <LCD_writebyte>
    LCD_writebyte(0x30);
 8002f42:	2030      	movs	r0, #48	@ 0x30
 8002f44:	f000 f904 	bl	8003150 <LCD_writebyte>

     // interface op 4 bits
    LCD_writebyte(0x02);
 8002f48:	2002      	movs	r0, #2
 8002f4a:	f000 f901 	bl	8003150 <LCD_writebyte>
    HAL_Delay(5);
 8002f4e:	2005      	movs	r0, #5
 8002f50:	f001 fa00 	bl	8004354 <HAL_Delay>

    LCD_writebyte(0x2C);  // function set
 8002f54:	202c      	movs	r0, #44	@ 0x2c
 8002f56:	f000 f8fb 	bl	8003150 <LCD_writebyte>
    HAL_Delay(15);
 8002f5a:	200f      	movs	r0, #15
 8002f5c:	f001 f9fa 	bl	8004354 <HAL_Delay>
    LCD_writebyte(0x0C);  // lcd aan
 8002f60:	200c      	movs	r0, #12
 8002f62:	f000 f8f5 	bl	8003150 <LCD_writebyte>
    HAL_Delay(15);
 8002f66:	200f      	movs	r0, #15
 8002f68:	f001 f9f4 	bl	8004354 <HAL_Delay>
    LCD_writebyte(0x01);  // clear screen
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	f000 f8ef 	bl	8003150 <LCD_writebyte>
    HAL_Delay(15);
 8002f72:	200f      	movs	r0, #15
 8002f74:	f001 f9ee 	bl	8004354 <HAL_Delay>
    LCD_writebyte(0x06);  // entry mode set
 8002f78:	2006      	movs	r0, #6
 8002f7a:	f000 f8e9 	bl	8003150 <LCD_writebyte>
    HAL_Delay(15);
 8002f7e:	200f      	movs	r0, #15
 8002f80:	f001 f9e8 	bl	8004354 <HAL_Delay>
}
 8002f84:	bf00      	nop
 8002f86:	3720      	adds	r7, #32
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40020800 	.word	0x40020800
 8002f98:	40020c00 	.word	0x40020c00

08002f9c <LCD_putchar>:

// Zet meegegeven karakter op het scherm
void LCD_putchar(char c)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET);
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002fac:	480b      	ldr	r0, [pc, #44]	@ (8002fdc <LCD_putchar+0x40>)
 8002fae:	f001 fd1d 	bl	80049ec <HAL_GPIO_WritePin>
    LCD_writebyte(c);
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 f8cb 	bl	8003150 <LCD_writebyte>
    if (++curpos==32) // remember cursorpos
 8002fba:	4b09      	ldr	r3, [pc, #36]	@ (8002fe0 <LCD_putchar+0x44>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	4b07      	ldr	r3, [pc, #28]	@ (8002fe0 <LCD_putchar+0x44>)
 8002fc4:	701a      	strb	r2, [r3, #0]
 8002fc6:	4b06      	ldr	r3, [pc, #24]	@ (8002fe0 <LCD_putchar+0x44>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b20      	cmp	r3, #32
 8002fcc:	d102      	bne.n	8002fd4 <LCD_putchar+0x38>
    	curpos=0;
 8002fce:	4b04      	ldr	r3, [pc, #16]	@ (8002fe0 <LCD_putchar+0x44>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40020800 	.word	0x40020800
 8002fe0:	2000c640 	.word	0x2000c640

08002fe4 <LCD_put>:

// Zet meegegeven string op het scherm
void LCD_put(char *string)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
#ifdef eenregel
   	unsigned char j;
#endif
    unsigned char k;
	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    for (k=0; string[k]; k++)
 8002fec:	2300      	movs	r3, #0
 8002fee:	73bb      	strb	r3, [r7, #14]
 8002ff0:	e019      	b.n	8003026 <LCD_put+0x42>
	{

#ifdef eenregel
    	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    	if(curpos==15) // at 15, goto next valid lcd-position
 8002ff2:	4b12      	ldr	r3, [pc, #72]	@ (800303c <LCD_put+0x58>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b0f      	cmp	r3, #15
 8002ff8:	d10b      	bne.n	8003012 <LCD_put+0x2e>
        for (j=0; j<25; j++) LCD_cursor_right();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	73fb      	strb	r3, [r7, #15]
 8002ffe:	e005      	b.n	800300c <LCD_put+0x28>
 8003000:	2014      	movs	r0, #20
 8003002:	f000 f8d7 	bl	80031b4 <LCD_writecontrol>
 8003006:	7bfb      	ldrb	r3, [r7, #15]
 8003008:	3301      	adds	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	2b18      	cmp	r3, #24
 8003010:	d9f6      	bls.n	8003000 <LCD_put+0x1c>
#endif
        LCD_putchar(string[k]);
 8003012:	7bbb      	ldrb	r3, [r7, #14]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	4413      	add	r3, r2
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff ffbe 	bl	8002f9c <LCD_putchar>
    for (k=0; string[k]; k++)
 8003020:	7bbb      	ldrb	r3, [r7, #14]
 8003022:	3301      	adds	r3, #1
 8003024:	73bb      	strb	r3, [r7, #14]
 8003026:	7bbb      	ldrb	r3, [r7, #14]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	4413      	add	r3, r2
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1df      	bne.n	8002ff2 <LCD_put+0xe>
    }
}
 8003032:	bf00      	nop
 8003034:	bf00      	nop
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	2000c640 	.word	0x2000c640

08003040 <LCD_puts>:

void LCD_puts(char *c)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
    LCD_put(c);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff ffcb 	bl	8002fe4 <LCD_put>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <LCD_putint>:

// Zet het meegegeven positief getal op het scherm
void LCD_putint(unsigned int num)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08a      	sub	sp, #40	@ 0x28
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
    unsigned int rest;
    static unsigned char chars[10] = "0123456789"; // possible chars
    char s[17]; // display has 16 chars [0..15] + 1 closing null
	s[16]='\0'; // closing null set
 8003060:	2300      	movs	r3, #0
 8003062:	773b      	strb	r3, [r7, #28]
    int i=15;   // startposition at last display char
 8003064:	230f      	movs	r3, #15
 8003066:	627b      	str	r3, [r7, #36]	@ 0x24

    // kinda function itoa, integer to ascii
    if(num==0)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d124      	bne.n	80030b8 <LCD_putint+0x60>
        s[i--]='0'; // '0' at 14
 800306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003070:	1e5a      	subs	r2, r3, #1
 8003072:	627a      	str	r2, [r7, #36]	@ 0x24
 8003074:	3328      	adds	r3, #40	@ 0x28
 8003076:	443b      	add	r3, r7
 8003078:	2230      	movs	r2, #48	@ 0x30
 800307a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800307e:	e021      	b.n	80030c4 <LCD_putint+0x6c>
    else
	{
        while(num>0 && i)
		{
            rest = num%10;
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	4b16      	ldr	r3, [pc, #88]	@ (80030dc <LCD_putint+0x84>)
 8003084:	fba3 1302 	umull	r1, r3, r3, r2
 8003088:	08d9      	lsrs	r1, r3, #3
 800308a:	460b      	mov	r3, r1
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	623b      	str	r3, [r7, #32]
            num /= 10;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a10      	ldr	r2, [pc, #64]	@ (80030dc <LCD_putint+0x84>)
 800309a:	fba2 2303 	umull	r2, r3, r2, r3
 800309e:	08db      	lsrs	r3, r3, #3
 80030a0:	607b      	str	r3, [r7, #4]
            s[i--]=chars[rest];
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	1e5a      	subs	r2, r3, #1
 80030a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80030a8:	490d      	ldr	r1, [pc, #52]	@ (80030e0 <LCD_putint+0x88>)
 80030aa:	6a3a      	ldr	r2, [r7, #32]
 80030ac:	440a      	add	r2, r1
 80030ae:	7812      	ldrb	r2, [r2, #0]
 80030b0:	3328      	adds	r3, #40	@ 0x28
 80030b2:	443b      	add	r3, r7
 80030b4:	f803 2c1c 	strb.w	r2, [r3, #-28]
        while(num>0 && i)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <LCD_putint+0x6c>
 80030be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1dd      	bne.n	8003080 <LCD_putint+0x28>
        }
    }
	LCD_put(&s[i+1]); // first, set i to starting pos, undo one i-- too much
 80030c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c6:	3301      	adds	r3, #1
 80030c8:	f107 020c 	add.w	r2, r7, #12
 80030cc:	4413      	add	r3, r2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff ff88 	bl	8002fe4 <LCD_put>
}
 80030d4:	bf00      	nop
 80030d6:	3728      	adds	r7, #40	@ 0x28
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	cccccccd 	.word	0xcccccccd
 80030e0:	200001b8 	.word	0x200001b8

080030e4 <LCD_writenibble>:

// Stuurt een 4-bits commando naar het display
static void LCD_writenibble(unsigned char data)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	71fb      	strb	r3, [r7, #7]
    ClearBits();
 80030ee:	f7ff fe95 	bl	8002e1c <ClearBits>

    if (data & 0x01)
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d004      	beq.n	8003106 <LCD_writenibble+0x22>
		HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_SET);
 80030fc:	2201      	movs	r2, #1
 80030fe:	2140      	movs	r1, #64	@ 0x40
 8003100:	4812      	ldr	r0, [pc, #72]	@ (800314c <LCD_writenibble+0x68>)
 8003102:	f001 fc73 	bl	80049ec <HAL_GPIO_WritePin>

	if (data & 0x02)
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d004      	beq.n	800311a <LCD_writenibble+0x36>
		HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_SET);
 8003110:	2201      	movs	r2, #1
 8003112:	2120      	movs	r1, #32
 8003114:	480d      	ldr	r0, [pc, #52]	@ (800314c <LCD_writenibble+0x68>)
 8003116:	f001 fc69 	bl	80049ec <HAL_GPIO_WritePin>

	if (data & 0x04)
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d004      	beq.n	800312e <LCD_writenibble+0x4a>
		HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_SET);
 8003124:	2201      	movs	r2, #1
 8003126:	2110      	movs	r1, #16
 8003128:	4808      	ldr	r0, [pc, #32]	@ (800314c <LCD_writenibble+0x68>)
 800312a:	f001 fc5f 	bl	80049ec <HAL_GPIO_WritePin>

	if (data & 0x08)
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b00      	cmp	r3, #0
 8003136:	d004      	beq.n	8003142 <LCD_writenibble+0x5e>
		HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_SET);
 8003138:	2201      	movs	r2, #1
 800313a:	2108      	movs	r1, #8
 800313c:	4803      	ldr	r0, [pc, #12]	@ (800314c <LCD_writenibble+0x68>)
 800313e:	f001 fc55 	bl	80049ec <HAL_GPIO_WritePin>

}
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40021000 	.word	0x40021000

08003150 <LCD_writebyte>:


// Stuurt een 8-bits commando naar het display
static void LCD_writebyte(unsigned char data)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	71fb      	strb	r3, [r7, #7]
    /* hoogste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 800315a:	2201      	movs	r2, #1
 800315c:	2101      	movs	r1, #1
 800315e:	4814      	ldr	r0, [pc, #80]	@ (80031b0 <LCD_writebyte+0x60>)
 8003160:	f001 fc44 	bl	80049ec <HAL_GPIO_WritePin>
    LCD_writenibble((data>>4)&0x0F);
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	091b      	lsrs	r3, r3, #4
 8003168:	b2db      	uxtb	r3, r3
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff ffba 	bl	80030e4 <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8003170:	2200      	movs	r2, #0
 8003172:	2101      	movs	r1, #1
 8003174:	480e      	ldr	r0, [pc, #56]	@ (80031b0 <LCD_writebyte+0x60>)
 8003176:	f001 fc39 	bl	80049ec <HAL_GPIO_WritePin>

    HAL_Delay(2);
 800317a:	2002      	movs	r0, #2
 800317c:	f001 f8ea 	bl	8004354 <HAL_Delay>

    /* laagste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 8003180:	2201      	movs	r2, #1
 8003182:	2101      	movs	r1, #1
 8003184:	480a      	ldr	r0, [pc, #40]	@ (80031b0 <LCD_writebyte+0x60>)
 8003186:	f001 fc31 	bl	80049ec <HAL_GPIO_WritePin>
    LCD_writenibble(data&0x0F);
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	f003 030f 	and.w	r3, r3, #15
 8003190:	b2db      	uxtb	r3, r3
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff ffa6 	bl	80030e4 <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8003198:	2200      	movs	r2, #0
 800319a:	2101      	movs	r1, #1
 800319c:	4804      	ldr	r0, [pc, #16]	@ (80031b0 <LCD_writebyte+0x60>)
 800319e:	f001 fc25 	bl	80049ec <HAL_GPIO_WritePin>

    HAL_Delay(2);
 80031a2:	2002      	movs	r0, #2
 80031a4:	f001 f8d6 	bl	8004354 <HAL_Delay>
}
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40020c00 	.word	0x40020c00

080031b4 <LCD_writecontrol>:

// Stuurt een commando naar het display
void LCD_writecontrol(unsigned char data)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 80031be:	2200      	movs	r2, #0
 80031c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80031c4:	4805      	ldr	r0, [pc, #20]	@ (80031dc <LCD_writecontrol+0x28>)
 80031c6:	f001 fc11 	bl	80049ec <HAL_GPIO_WritePin>
    LCD_writebyte(data);
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff ffbf 	bl	8003150 <LCD_writebyte>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40020800 	.word	0x40020800

080031e0 <LED_init>:

/* LED Initialize
 * This function initializes the pins reset state
 */
void LED_init(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, GPIO_PIN_RESET);
 80031e4:	2200      	movs	r2, #0
 80031e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80031ea:	4809      	ldr	r0, [pc, #36]	@ (8003210 <LED_init+0x30>)
 80031ec:	f001 fbfe 	bl	80049ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 80031f0:	2200      	movs	r2, #0
 80031f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80031f6:	4807      	ldr	r0, [pc, #28]	@ (8003214 <LED_init+0x34>)
 80031f8:	f001 fbf8 	bl	80049ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 80031fc:	2201      	movs	r2, #1
 80031fe:	2102      	movs	r1, #2
 8003200:	4804      	ldr	r0, [pc, #16]	@ (8003214 <LED_init+0x34>)
 8003202:	f001 fbf3 	bl	80049ec <HAL_GPIO_WritePin>
    LED_put(0);
 8003206:	2000      	movs	r0, #0
 8003208:	f000 f806 	bl	8003218 <LED_put>
}
 800320c:	bf00      	nop
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40020000 	.word	0x40020000
 8003214:	40020400 	.word	0x40020400

08003218 <LED_put>:

/* LED put
 * This function puts an 8 bit value to the LEDs, where left is the LSB
 */
void LED_put(unsigned short led_byte)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	80fb      	strh	r3, [r7, #6]
     unsigned int i;

     for(i=128; i>=1; i>>=1)
 8003222:	2380      	movs	r3, #128	@ 0x80
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	e01c      	b.n	8003262 <LED_put+0x4a>
     {
       	  HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, (led_byte & i) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003228:	88fa      	ldrh	r2, [r7, #6]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4013      	ands	r3, r2
 800322e:	2b00      	cmp	r3, #0
 8003230:	bf14      	ite	ne
 8003232:	2301      	movne	r3, #1
 8003234:	2300      	moveq	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	461a      	mov	r2, r3
 800323a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800323e:	4811      	ldr	r0, [pc, #68]	@ (8003284 <LED_put+0x6c>)
 8003240:	f001 fbd4 	bl	80049ec <HAL_GPIO_WritePin>

          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_SET);
 8003244:	2201      	movs	r2, #1
 8003246:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800324a:	480f      	ldr	r0, [pc, #60]	@ (8003288 <LED_put+0x70>)
 800324c:	f001 fbce 	bl	80049ec <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 8003250:	2200      	movs	r2, #0
 8003252:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003256:	480c      	ldr	r0, [pc, #48]	@ (8003288 <LED_put+0x70>)
 8003258:	f001 fbc8 	bl	80049ec <HAL_GPIO_WritePin>
     for(i=128; i>=1; i>>=1)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	085b      	lsrs	r3, r3, #1
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1df      	bne.n	8003228 <LED_put+0x10>
     }

     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 8003268:	2201      	movs	r2, #1
 800326a:	2102      	movs	r1, #2
 800326c:	4806      	ldr	r0, [pc, #24]	@ (8003288 <LED_put+0x70>)
 800326e:	f001 fbbd 	bl	80049ec <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_RESET);
 8003272:	2200      	movs	r2, #0
 8003274:	2102      	movs	r1, #2
 8003276:	4804      	ldr	r0, [pc, #16]	@ (8003288 <LED_put+0x70>)
 8003278:	f001 fbb8 	bl	80049ec <HAL_GPIO_WritePin>
}
 800327c:	bf00      	nop
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40020000 	.word	0x40020000
 8003288:	40020400 	.word	0x40020400

0800328c <UART_putchar>:
 // done in CUBE

}

void UART_putchar(unsigned char c)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	71fb      	strb	r3, [r7, #7]
	 HAL_UART_Transmit(&huart2, &c, 1, 100);
 8003296:	1df9      	adds	r1, r7, #7
 8003298:	2364      	movs	r3, #100	@ 0x64
 800329a:	2201      	movs	r2, #1
 800329c:	4803      	ldr	r0, [pc, #12]	@ (80032ac <UART_putchar+0x20>)
 800329e:	f005 fdd9 	bl	8008e54 <HAL_UART_Transmit>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	2000c810 	.word	0x2000c810

080032b0 <UART_puts>:

void UART_puts(const char *s)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
	volatile unsigned int i;

	for (i=0; s[i]; i++)
 80032b8:	2300      	movs	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	e009      	b.n	80032d2 <UART_puts+0x22>
		UART_putchar(s[i]);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	4413      	add	r3, r2
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff ffe0 	bl	800328c <UART_putchar>
	for (i=0; s[i]; i++)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3301      	adds	r3, #1
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	4413      	add	r3, r2
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1ef      	bne.n	80032be <UART_puts+0xe>
}
 80032de:	bf00      	nop
 80032e0:	bf00      	nop
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <UART_putint>:
    return rc;
}

// Stuurt meegegeven getal uit op de UART
void UART_putint(unsigned int num)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
    UART_putnum(num, 10);
 80032f0:	210a      	movs	r1, #10
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f804 	bl	8003300 <UART_putnum>
}
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <UART_putnum>:

// Stuurt meegegeven getal uit op de UART in het aangegeven getallenstelsel
void UART_putnum(unsigned int num, unsigned char deel)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	70fb      	strb	r3, [r7, #3]
    static unsigned char chars[16] = "0123456789ABCDEF";
    unsigned int rest;
    signed char c[16];
    signed int i=15;
 800330c:	230f      	movs	r3, #15
 800330e:	61fb      	str	r3, [r7, #28]

    // Zet de integer om naar een string
    if(num==0)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d129      	bne.n	800336a <UART_putnum+0x6a>
    {
        c[i]='0';
 8003316:	f107 0208 	add.w	r2, r7, #8
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	4413      	add	r3, r2
 800331e:	2230      	movs	r2, #48	@ 0x30
 8003320:	701a      	strb	r2, [r3, #0]
        i--;
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3b01      	subs	r3, #1
 8003326:	61fb      	str	r3, [r7, #28]
 8003328:	e030      	b.n	800338c <UART_putnum+0x8c>
    }
    else
    {
        while(num>0)
        {
            rest=num%deel;
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003332:	fb01 f202 	mul.w	r2, r1, r2
 8003336:	1a9b      	subs	r3, r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
            num/=deel;
 800333a:	78fb      	ldrb	r3, [r7, #3]
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003342:	607b      	str	r3, [r7, #4]
            c[i]=chars[rest];
 8003344:	4a15      	ldr	r2, [pc, #84]	@ (800339c <UART_putnum+0x9c>)
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	4413      	add	r3, r2
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	b259      	sxtb	r1, r3
 800334e:	f107 0208 	add.w	r2, r7, #8
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	4413      	add	r3, r2
 8003356:	460a      	mov	r2, r1
 8003358:	701a      	strb	r2, [r3, #0]
            i--;
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3b01      	subs	r3, #1
 800335e:	61fb      	str	r3, [r7, #28]

            if(i==0) // it ends here
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <UART_putnum+0x6a>
                num=0;
 8003366:	2300      	movs	r3, #0
 8003368:	607b      	str	r3, [r7, #4]
        while(num>0)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1dc      	bne.n	800332a <UART_putnum+0x2a>
        }
    }

    // Stuur de string uit
    while(i<15)
 8003370:	e00c      	b.n	800338c <UART_putnum+0x8c>
    {
        i++;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	3301      	adds	r3, #1
 8003376:	61fb      	str	r3, [r7, #28]
        UART_putchar(c[i]);
 8003378:	f107 0208 	add.w	r2, r7, #8
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	4413      	add	r3, r2
 8003380:	f993 3000 	ldrsb.w	r3, [r3]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff ff80 	bl	800328c <UART_putchar>
    while(i<15)
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	2b0e      	cmp	r3, #14
 8003390:	ddef      	ble.n	8003372 <UART_putnum+0x72>
    }
}
 8003392:	bf00      	nop
 8003394:	bf00      	nop
 8003396:	3720      	adds	r7, #32
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	200001c4 	.word	0x200001c4

080033a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033a4:	f000 ff94 	bl	80042d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033a8:	f000 f834 	bl	8003414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033ac:	f000 f9e2 	bl	8003774 <MX_GPIO_Init>
  MX_I2C1_Init();
 80033b0:	f000 f89a 	bl	80034e8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80033b4:	f000 f8c6 	bl	8003544 <MX_I2S3_Init>
  MX_SPI1_Init();
 80033b8:	f000 f8f4 	bl	80035a4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80033bc:	f000 f9b0 	bl	8003720 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80033c0:	f000 f984 	bl	80036cc <MX_UART4_Init>
  MX_TIM12_Init();
 80033c4:	f000 f948 	bl	8003658 <MX_TIM12_Init>
  MX_TIM11_Init();
 80033c8:	f000 f922 	bl	8003610 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  LCD_init();
 80033cc:	f7ff fd50 	bl	8002e70 <LCD_init>
  KEYS_init();
 80033d0:	f7ff fc34 	bl	8002c3c <KEYS_init>
  KEYS_initISR(1); // set all lines high once
 80033d4:	2001      	movs	r0, #1
 80033d6:	f7ff fc6b 	bl	8002cb0 <KEYS_initISR>
  LED_init();
 80033da:	f7ff ff01 	bl	80031e0 <LED_init>

  DisplayVersion();
 80033de:	f7fe fd6b 	bl	8001eb8 <DisplayVersion>
  osDelay(500); // time to read version
 80033e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80033e6:	f00a fae1 	bl	800d9ac <osDelay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80033ea:	f00a f9c5 	bl	800d778 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80033ee:	4a06      	ldr	r2, [pc, #24]	@ (8003408 <main+0x68>)
 80033f0:	2100      	movs	r1, #0
 80033f2:	4806      	ldr	r0, [pc, #24]	@ (800340c <main+0x6c>)
 80033f4:	f00a fa48 	bl	800d888 <osThreadNew>
 80033f8:	4603      	mov	r3, r0
 80033fa:	4a05      	ldr	r2, [pc, #20]	@ (8003410 <main+0x70>)
 80033fc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80033fe:	f00a fa07 	bl	800d810 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003402:	bf00      	nop
 8003404:	e7fd      	b.n	8003402 <main+0x62>
 8003406:	bf00      	nop
 8003408:	08018a10 	.word	0x08018a10
 800340c:	08003a61 	.word	0x08003a61
 8003410:	2000c858 	.word	0x2000c858

08003414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b094      	sub	sp, #80	@ 0x50
 8003418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800341a:	f107 0320 	add.w	r3, r7, #32
 800341e:	2230      	movs	r2, #48	@ 0x30
 8003420:	2100      	movs	r1, #0
 8003422:	4618      	mov	r0, r3
 8003424:	f010 fc0f 	bl	8013c46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003428:	f107 030c 	add.w	r3, r7, #12
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	60da      	str	r2, [r3, #12]
 8003436:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003438:	2300      	movs	r3, #0
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	4b28      	ldr	r3, [pc, #160]	@ (80034e0 <SystemClock_Config+0xcc>)
 800343e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003440:	4a27      	ldr	r2, [pc, #156]	@ (80034e0 <SystemClock_Config+0xcc>)
 8003442:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003446:	6413      	str	r3, [r2, #64]	@ 0x40
 8003448:	4b25      	ldr	r3, [pc, #148]	@ (80034e0 <SystemClock_Config+0xcc>)
 800344a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003454:	2300      	movs	r3, #0
 8003456:	607b      	str	r3, [r7, #4]
 8003458:	4b22      	ldr	r3, [pc, #136]	@ (80034e4 <SystemClock_Config+0xd0>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a21      	ldr	r2, [pc, #132]	@ (80034e4 <SystemClock_Config+0xd0>)
 800345e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	4b1f      	ldr	r3, [pc, #124]	@ (80034e4 <SystemClock_Config+0xd0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800346c:	607b      	str	r3, [r7, #4]
 800346e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003470:	2301      	movs	r3, #1
 8003472:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003474:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003478:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800347a:	2302      	movs	r3, #2
 800347c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800347e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003482:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003484:	2308      	movs	r3, #8
 8003486:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003488:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800348c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800348e:	2302      	movs	r3, #2
 8003490:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003492:	2307      	movs	r3, #7
 8003494:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003496:	f107 0320 	add.w	r3, r7, #32
 800349a:	4618      	mov	r0, r3
 800349c:	f004 f9fc 	bl	8007898 <HAL_RCC_OscConfig>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80034a6:	f000 fb13 	bl	8003ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034aa:	230f      	movs	r3, #15
 80034ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034ae:	2302      	movs	r3, #2
 80034b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80034b6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80034ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80034bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80034c2:	f107 030c 	add.w	r3, r7, #12
 80034c6:	2105      	movs	r1, #5
 80034c8:	4618      	mov	r0, r3
 80034ca:	f004 fc5d 	bl	8007d88 <HAL_RCC_ClockConfig>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80034d4:	f000 fafc 	bl	8003ad0 <Error_Handler>
  }
}
 80034d8:	bf00      	nop
 80034da:	3750      	adds	r7, #80	@ 0x50
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40007000 	.word	0x40007000

080034e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80034ec:	4b12      	ldr	r3, [pc, #72]	@ (8003538 <MX_I2C1_Init+0x50>)
 80034ee:	4a13      	ldr	r2, [pc, #76]	@ (800353c <MX_I2C1_Init+0x54>)
 80034f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80034f2:	4b11      	ldr	r3, [pc, #68]	@ (8003538 <MX_I2C1_Init+0x50>)
 80034f4:	4a12      	ldr	r2, [pc, #72]	@ (8003540 <MX_I2C1_Init+0x58>)
 80034f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80034f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003538 <MX_I2C1_Init+0x50>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80034fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003538 <MX_I2C1_Init+0x50>)
 8003500:	2200      	movs	r2, #0
 8003502:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003504:	4b0c      	ldr	r3, [pc, #48]	@ (8003538 <MX_I2C1_Init+0x50>)
 8003506:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800350a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800350c:	4b0a      	ldr	r3, [pc, #40]	@ (8003538 <MX_I2C1_Init+0x50>)
 800350e:	2200      	movs	r2, #0
 8003510:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003512:	4b09      	ldr	r3, [pc, #36]	@ (8003538 <MX_I2C1_Init+0x50>)
 8003514:	2200      	movs	r2, #0
 8003516:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003518:	4b07      	ldr	r3, [pc, #28]	@ (8003538 <MX_I2C1_Init+0x50>)
 800351a:	2200      	movs	r2, #0
 800351c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800351e:	4b06      	ldr	r3, [pc, #24]	@ (8003538 <MX_I2C1_Init+0x50>)
 8003520:	2200      	movs	r2, #0
 8003522:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003524:	4804      	ldr	r0, [pc, #16]	@ (8003538 <MX_I2C1_Init+0x50>)
 8003526:	f003 fbd3 	bl	8006cd0 <HAL_I2C_Init>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003530:	f000 face 	bl	8003ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003534:	bf00      	nop
 8003536:	bd80      	pop	{r7, pc}
 8003538:	2000c644 	.word	0x2000c644
 800353c:	40005400 	.word	0x40005400
 8003540:	000186a0 	.word	0x000186a0

08003544 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8003548:	4b13      	ldr	r3, [pc, #76]	@ (8003598 <MX_I2S3_Init+0x54>)
 800354a:	4a14      	ldr	r2, [pc, #80]	@ (800359c <MX_I2S3_Init+0x58>)
 800354c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800354e:	4b12      	ldr	r3, [pc, #72]	@ (8003598 <MX_I2S3_Init+0x54>)
 8003550:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003554:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8003556:	4b10      	ldr	r3, [pc, #64]	@ (8003598 <MX_I2S3_Init+0x54>)
 8003558:	2200      	movs	r2, #0
 800355a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800355c:	4b0e      	ldr	r3, [pc, #56]	@ (8003598 <MX_I2S3_Init+0x54>)
 800355e:	2200      	movs	r2, #0
 8003560:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8003562:	4b0d      	ldr	r3, [pc, #52]	@ (8003598 <MX_I2S3_Init+0x54>)
 8003564:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003568:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800356a:	4b0b      	ldr	r3, [pc, #44]	@ (8003598 <MX_I2S3_Init+0x54>)
 800356c:	4a0c      	ldr	r2, [pc, #48]	@ (80035a0 <MX_I2S3_Init+0x5c>)
 800356e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8003570:	4b09      	ldr	r3, [pc, #36]	@ (8003598 <MX_I2S3_Init+0x54>)
 8003572:	2200      	movs	r2, #0
 8003574:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8003576:	4b08      	ldr	r3, [pc, #32]	@ (8003598 <MX_I2S3_Init+0x54>)
 8003578:	2200      	movs	r2, #0
 800357a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800357c:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <MX_I2S3_Init+0x54>)
 800357e:	2200      	movs	r2, #0
 8003580:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8003582:	4805      	ldr	r0, [pc, #20]	@ (8003598 <MX_I2S3_Init+0x54>)
 8003584:	f003 fce8 	bl	8006f58 <HAL_I2S_Init>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800358e:	f000 fa9f 	bl	8003ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	2000c698 	.word	0x2000c698
 800359c:	40003c00 	.word	0x40003c00
 80035a0:	00017700 	.word	0x00017700

080035a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80035a8:	4b17      	ldr	r3, [pc, #92]	@ (8003608 <MX_SPI1_Init+0x64>)
 80035aa:	4a18      	ldr	r2, [pc, #96]	@ (800360c <MX_SPI1_Init+0x68>)
 80035ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80035ae:	4b16      	ldr	r3, [pc, #88]	@ (8003608 <MX_SPI1_Init+0x64>)
 80035b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80035b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80035b6:	4b14      	ldr	r3, [pc, #80]	@ (8003608 <MX_SPI1_Init+0x64>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80035bc:	4b12      	ldr	r3, [pc, #72]	@ (8003608 <MX_SPI1_Init+0x64>)
 80035be:	2200      	movs	r2, #0
 80035c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035c2:	4b11      	ldr	r3, [pc, #68]	@ (8003608 <MX_SPI1_Init+0x64>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003608 <MX_SPI1_Init+0x64>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80035ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003608 <MX_SPI1_Init+0x64>)
 80035d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003608 <MX_SPI1_Init+0x64>)
 80035d8:	2200      	movs	r2, #0
 80035da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003608 <MX_SPI1_Init+0x64>)
 80035de:	2200      	movs	r2, #0
 80035e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80035e2:	4b09      	ldr	r3, [pc, #36]	@ (8003608 <MX_SPI1_Init+0x64>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035e8:	4b07      	ldr	r3, [pc, #28]	@ (8003608 <MX_SPI1_Init+0x64>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80035ee:	4b06      	ldr	r3, [pc, #24]	@ (8003608 <MX_SPI1_Init+0x64>)
 80035f0:	220a      	movs	r2, #10
 80035f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80035f4:	4804      	ldr	r0, [pc, #16]	@ (8003608 <MX_SPI1_Init+0x64>)
 80035f6:	f004 ff5b 	bl	80084b0 <HAL_SPI_Init>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003600:	f000 fa66 	bl	8003ad0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003604:	bf00      	nop
 8003606:	bd80      	pop	{r7, pc}
 8003608:	2000c6e0 	.word	0x2000c6e0
 800360c:	40013000 	.word	0x40013000

08003610 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003614:	4b0e      	ldr	r3, [pc, #56]	@ (8003650 <MX_TIM11_Init+0x40>)
 8003616:	4a0f      	ldr	r2, [pc, #60]	@ (8003654 <MX_TIM11_Init+0x44>)
 8003618:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 167;
 800361a:	4b0d      	ldr	r3, [pc, #52]	@ (8003650 <MX_TIM11_Init+0x40>)
 800361c:	22a7      	movs	r2, #167	@ 0xa7
 800361e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003620:	4b0b      	ldr	r3, [pc, #44]	@ (8003650 <MX_TIM11_Init+0x40>)
 8003622:	2200      	movs	r2, #0
 8003624:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8003626:	4b0a      	ldr	r3, [pc, #40]	@ (8003650 <MX_TIM11_Init+0x40>)
 8003628:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800362c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800362e:	4b08      	ldr	r3, [pc, #32]	@ (8003650 <MX_TIM11_Init+0x40>)
 8003630:	2200      	movs	r2, #0
 8003632:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003634:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <MX_TIM11_Init+0x40>)
 8003636:	2200      	movs	r2, #0
 8003638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800363a:	4805      	ldr	r0, [pc, #20]	@ (8003650 <MX_TIM11_Init+0x40>)
 800363c:	f004 ffc1 	bl	80085c2 <HAL_TIM_Base_Init>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8003646:	f000 fa43 	bl	8003ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800364a:	bf00      	nop
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	2000c738 	.word	0x2000c738
 8003654:	40014800 	.word	0x40014800

08003658 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800365e:	463b      	mov	r3, r7
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800366a:	4b16      	ldr	r3, [pc, #88]	@ (80036c4 <MX_TIM12_Init+0x6c>)
 800366c:	4a16      	ldr	r2, [pc, #88]	@ (80036c8 <MX_TIM12_Init+0x70>)
 800366e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8003670:	4b14      	ldr	r3, [pc, #80]	@ (80036c4 <MX_TIM12_Init+0x6c>)
 8003672:	2200      	movs	r2, #0
 8003674:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003676:	4b13      	ldr	r3, [pc, #76]	@ (80036c4 <MX_TIM12_Init+0x6c>)
 8003678:	2200      	movs	r2, #0
 800367a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800367c:	4b11      	ldr	r3, [pc, #68]	@ (80036c4 <MX_TIM12_Init+0x6c>)
 800367e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003682:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003684:	4b0f      	ldr	r3, [pc, #60]	@ (80036c4 <MX_TIM12_Init+0x6c>)
 8003686:	2200      	movs	r2, #0
 8003688:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800368a:	4b0e      	ldr	r3, [pc, #56]	@ (80036c4 <MX_TIM12_Init+0x6c>)
 800368c:	2200      	movs	r2, #0
 800368e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003690:	480c      	ldr	r0, [pc, #48]	@ (80036c4 <MX_TIM12_Init+0x6c>)
 8003692:	f004 ff96 	bl	80085c2 <HAL_TIM_Base_Init>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 800369c:	f000 fa18 	bl	8003ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036a4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80036a6:	463b      	mov	r3, r7
 80036a8:	4619      	mov	r1, r3
 80036aa:	4806      	ldr	r0, [pc, #24]	@ (80036c4 <MX_TIM12_Init+0x6c>)
 80036ac:	f005 f938 	bl	8008920 <HAL_TIM_ConfigClockSource>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80036b6:	f000 fa0b 	bl	8003ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	2000c780 	.word	0x2000c780
 80036c8:	40001800 	.word	0x40001800

080036cc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80036d0:	4b11      	ldr	r3, [pc, #68]	@ (8003718 <MX_UART4_Init+0x4c>)
 80036d2:	4a12      	ldr	r2, [pc, #72]	@ (800371c <MX_UART4_Init+0x50>)
 80036d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80036d6:	4b10      	ldr	r3, [pc, #64]	@ (8003718 <MX_UART4_Init+0x4c>)
 80036d8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80036dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80036de:	4b0e      	ldr	r3, [pc, #56]	@ (8003718 <MX_UART4_Init+0x4c>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80036e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003718 <MX_UART4_Init+0x4c>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80036ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003718 <MX_UART4_Init+0x4c>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80036f0:	4b09      	ldr	r3, [pc, #36]	@ (8003718 <MX_UART4_Init+0x4c>)
 80036f2:	220c      	movs	r2, #12
 80036f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036f6:	4b08      	ldr	r3, [pc, #32]	@ (8003718 <MX_UART4_Init+0x4c>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80036fc:	4b06      	ldr	r3, [pc, #24]	@ (8003718 <MX_UART4_Init+0x4c>)
 80036fe:	2200      	movs	r2, #0
 8003700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003702:	4805      	ldr	r0, [pc, #20]	@ (8003718 <MX_UART4_Init+0x4c>)
 8003704:	f005 fb56 	bl	8008db4 <HAL_UART_Init>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800370e:	f000 f9df 	bl	8003ad0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	2000c7c8 	.word	0x2000c7c8
 800371c:	40004c00 	.word	0x40004c00

08003720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003724:	4b11      	ldr	r3, [pc, #68]	@ (800376c <MX_USART2_UART_Init+0x4c>)
 8003726:	4a12      	ldr	r2, [pc, #72]	@ (8003770 <MX_USART2_UART_Init+0x50>)
 8003728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800372a:	4b10      	ldr	r3, [pc, #64]	@ (800376c <MX_USART2_UART_Init+0x4c>)
 800372c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003732:	4b0e      	ldr	r3, [pc, #56]	@ (800376c <MX_USART2_UART_Init+0x4c>)
 8003734:	2200      	movs	r2, #0
 8003736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003738:	4b0c      	ldr	r3, [pc, #48]	@ (800376c <MX_USART2_UART_Init+0x4c>)
 800373a:	2200      	movs	r2, #0
 800373c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800373e:	4b0b      	ldr	r3, [pc, #44]	@ (800376c <MX_USART2_UART_Init+0x4c>)
 8003740:	2200      	movs	r2, #0
 8003742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003744:	4b09      	ldr	r3, [pc, #36]	@ (800376c <MX_USART2_UART_Init+0x4c>)
 8003746:	220c      	movs	r2, #12
 8003748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800374a:	4b08      	ldr	r3, [pc, #32]	@ (800376c <MX_USART2_UART_Init+0x4c>)
 800374c:	2200      	movs	r2, #0
 800374e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003750:	4b06      	ldr	r3, [pc, #24]	@ (800376c <MX_USART2_UART_Init+0x4c>)
 8003752:	2200      	movs	r2, #0
 8003754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003756:	4805      	ldr	r0, [pc, #20]	@ (800376c <MX_USART2_UART_Init+0x4c>)
 8003758:	f005 fb2c 	bl	8008db4 <HAL_UART_Init>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003762:	f000 f9b5 	bl	8003ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	2000c810 	.word	0x2000c810
 8003770:	40004400 	.word	0x40004400

08003774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08c      	sub	sp, #48	@ 0x30
 8003778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800377a:	f107 031c 	add.w	r3, r7, #28
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	605a      	str	r2, [r3, #4]
 8003784:	609a      	str	r2, [r3, #8]
 8003786:	60da      	str	r2, [r3, #12]
 8003788:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	4b90      	ldr	r3, [pc, #576]	@ (80039d0 <MX_GPIO_Init+0x25c>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003792:	4a8f      	ldr	r2, [pc, #572]	@ (80039d0 <MX_GPIO_Init+0x25c>)
 8003794:	f043 0310 	orr.w	r3, r3, #16
 8003798:	6313      	str	r3, [r2, #48]	@ 0x30
 800379a:	4b8d      	ldr	r3, [pc, #564]	@ (80039d0 <MX_GPIO_Init+0x25c>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	61bb      	str	r3, [r7, #24]
 80037a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	4b89      	ldr	r3, [pc, #548]	@ (80039d0 <MX_GPIO_Init+0x25c>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ae:	4a88      	ldr	r2, [pc, #544]	@ (80039d0 <MX_GPIO_Init+0x25c>)
 80037b0:	f043 0304 	orr.w	r3, r3, #4
 80037b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037b6:	4b86      	ldr	r3, [pc, #536]	@ (80039d0 <MX_GPIO_Init+0x25c>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	613b      	str	r3, [r7, #16]
 80037c6:	4b82      	ldr	r3, [pc, #520]	@ (80039d0 <MX_GPIO_Init+0x25c>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	4a81      	ldr	r2, [pc, #516]	@ (80039d0 <MX_GPIO_Init+0x25c>)
 80037cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037d2:	4b7f      	ldr	r3, [pc, #508]	@ (80039d0 <MX_GPIO_Init+0x25c>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	4b7b      	ldr	r3, [pc, #492]	@ (80039d0 <MX_GPIO_Init+0x25c>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e6:	4a7a      	ldr	r2, [pc, #488]	@ (80039d0 <MX_GPIO_Init+0x25c>)
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ee:	4b78      	ldr	r3, [pc, #480]	@ (80039d0 <MX_GPIO_Init+0x25c>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	60bb      	str	r3, [r7, #8]
 80037fe:	4b74      	ldr	r3, [pc, #464]	@ (80039d0 <MX_GPIO_Init+0x25c>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003802:	4a73      	ldr	r2, [pc, #460]	@ (80039d0 <MX_GPIO_Init+0x25c>)
 8003804:	f043 0302 	orr.w	r3, r3, #2
 8003808:	6313      	str	r3, [r2, #48]	@ 0x30
 800380a:	4b71      	ldr	r3, [pc, #452]	@ (80039d0 <MX_GPIO_Init+0x25c>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	4b6d      	ldr	r3, [pc, #436]	@ (80039d0 <MX_GPIO_Init+0x25c>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381e:	4a6c      	ldr	r2, [pc, #432]	@ (80039d0 <MX_GPIO_Init+0x25c>)
 8003820:	f043 0308 	orr.w	r3, r3, #8
 8003824:	6313      	str	r3, [r2, #48]	@ 0x30
 8003826:	4b6a      	ldr	r3, [pc, #424]	@ (80039d0 <MX_GPIO_Init+0x25c>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	607b      	str	r3, [r7, #4]
 8003830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|Ard_Bit1_Pin|Ard_Bit2_Pin|Ard_Bit3_Pin
 8003832:	2200      	movs	r2, #0
 8003834:	f44f 61f1 	mov.w	r1, #1928	@ 0x788
 8003838:	4866      	ldr	r0, [pc, #408]	@ (80039d4 <MX_GPIO_Init+0x260>)
 800383a:	f001 f8d7 	bl	80049ec <HAL_GPIO_WritePin>
                          |Ard_Bit4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800383e:	2201      	movs	r2, #1
 8003840:	2101      	movs	r1, #1
 8003842:	4865      	ldr	r0, [pc, #404]	@ (80039d8 <MX_GPIO_Init+0x264>)
 8003844:	f001 f8d2 	bl	80049ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RCK_Pin|Trig_Pin|LED_SCK_Pin, GPIO_PIN_RESET);
 8003848:	2200      	movs	r2, #0
 800384a:	f242 1102 	movw	r1, #8450	@ 0x2102
 800384e:	4863      	ldr	r0, [pc, #396]	@ (80039dc <MX_GPIO_Init+0x268>)
 8003850:	f001 f8cc 	bl	80049ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003854:	2200      	movs	r2, #0
 8003856:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800385a:	4861      	ldr	r0, [pc, #388]	@ (80039e0 <MX_GPIO_Init+0x26c>)
 800385c:	f001 f8c6 	bl	80049ec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8003860:	2200      	movs	r2, #0
 8003862:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003866:	485c      	ldr	r0, [pc, #368]	@ (80039d8 <MX_GPIO_Init+0x264>)
 8003868:	f001 f8c0 	bl	80049ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SER_GPIO_Port, LED_SER_Pin, GPIO_PIN_RESET);
 800386c:	2200      	movs	r2, #0
 800386e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003872:	485c      	ldr	r0, [pc, #368]	@ (80039e4 <MX_GPIO_Init+0x270>)
 8003874:	f001 f8ba 	bl	80049ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin Ard_Bit1_Pin Ard_Bit2_Pin Ard_Bit3_Pin
                           Ard_Bit4_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|Ard_Bit1_Pin|Ard_Bit2_Pin|Ard_Bit3_Pin
 8003878:	f44f 63f1 	mov.w	r3, #1928	@ 0x788
 800387c:	61fb      	str	r3, [r7, #28]
                          |Ard_Bit4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800387e:	2301      	movs	r3, #1
 8003880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003882:	2300      	movs	r3, #0
 8003884:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003886:	2300      	movs	r3, #0
 8003888:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800388a:	f107 031c 	add.w	r3, r7, #28
 800388e:	4619      	mov	r1, r3
 8003890:	4850      	ldr	r0, [pc, #320]	@ (80039d4 <MX_GPIO_Init+0x260>)
 8003892:	f000 fef7 	bl	8004684 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Buzzer_Pin;
 8003896:	f240 1301 	movw	r3, #257	@ 0x101
 800389a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800389c:	2301      	movs	r3, #1
 800389e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a4:	2300      	movs	r3, #0
 80038a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038a8:	f107 031c 	add.w	r3, r7, #28
 80038ac:	4619      	mov	r1, r3
 80038ae:	484a      	ldr	r0, [pc, #296]	@ (80039d8 <MX_GPIO_Init+0x264>)
 80038b0:	f000 fee8 	bl	8004684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80038b4:	2308      	movs	r3, #8
 80038b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b8:	2302      	movs	r3, #2
 80038ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038bc:	2300      	movs	r3, #0
 80038be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c0:	2300      	movs	r3, #0
 80038c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80038c4:	2305      	movs	r3, #5
 80038c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80038c8:	f107 031c 	add.w	r3, r7, #28
 80038cc:	4619      	mov	r1, r3
 80038ce:	4842      	ldr	r0, [pc, #264]	@ (80039d8 <MX_GPIO_Init+0x264>)
 80038d0:	f000 fed8 	bl	8004684 <HAL_GPIO_Init>

  /*Configure GPIO pin : Key_int_Pin */
  GPIO_InitStruct.Pin = Key_int_Pin;
 80038d4:	2301      	movs	r3, #1
 80038d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80038d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80038dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Key_int_GPIO_Port, &GPIO_InitStruct);
 80038e2:	f107 031c 	add.w	r3, r7, #28
 80038e6:	4619      	mov	r1, r3
 80038e8:	483c      	ldr	r0, [pc, #240]	@ (80039dc <MX_GPIO_Init+0x268>)
 80038ea:	f000 fecb 	bl	8004684 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RCK_Pin Trig_Pin LED_SCK_Pin */
  GPIO_InitStruct.Pin = LED_RCK_Pin|Trig_Pin|LED_SCK_Pin;
 80038ee:	f242 1302 	movw	r3, #8450	@ 0x2102
 80038f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038f4:	2301      	movs	r3, #1
 80038f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fc:	2300      	movs	r3, #0
 80038fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003900:	f107 031c 	add.w	r3, r7, #28
 8003904:	4619      	mov	r1, r3
 8003906:	4835      	ldr	r0, [pc, #212]	@ (80039dc <MX_GPIO_Init+0x268>)
 8003908:	f000 febc 	bl	8004684 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin Echo_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin|Echo_Pin;
 800390c:	f244 0304 	movw	r3, #16388	@ 0x4004
 8003910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003912:	2300      	movs	r3, #0
 8003914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003916:	2300      	movs	r3, #0
 8003918:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800391a:	f107 031c 	add.w	r3, r7, #28
 800391e:	4619      	mov	r1, r3
 8003920:	482e      	ldr	r0, [pc, #184]	@ (80039dc <MX_GPIO_Init+0x268>)
 8003922:	f000 feaf 	bl	8004684 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003926:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800392a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392c:	2302      	movs	r3, #2
 800392e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003930:	2300      	movs	r3, #0
 8003932:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003934:	2300      	movs	r3, #0
 8003936:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003938:	2305      	movs	r3, #5
 800393a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800393c:	f107 031c 	add.w	r3, r7, #28
 8003940:	4619      	mov	r1, r3
 8003942:	4826      	ldr	r0, [pc, #152]	@ (80039dc <MX_GPIO_Init+0x268>)
 8003944:	f000 fe9e 	bl	8004684 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003948:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800394c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800394e:	2301      	movs	r3, #1
 8003950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003952:	2300      	movs	r3, #0
 8003954:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003956:	2300      	movs	r3, #0
 8003958:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800395a:	f107 031c 	add.w	r3, r7, #28
 800395e:	4619      	mov	r1, r3
 8003960:	481f      	ldr	r0, [pc, #124]	@ (80039e0 <MX_GPIO_Init+0x26c>)
 8003962:	f000 fe8f 	bl	8004684 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_SER_Pin */
  GPIO_InitStruct.Pin = LED_SER_Pin;
 8003966:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800396a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800396c:	2301      	movs	r3, #1
 800396e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003970:	2300      	movs	r3, #0
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003974:	2300      	movs	r3, #0
 8003976:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_SER_GPIO_Port, &GPIO_InitStruct);
 8003978:	f107 031c 	add.w	r3, r7, #28
 800397c:	4619      	mov	r1, r3
 800397e:	4819      	ldr	r0, [pc, #100]	@ (80039e4 <MX_GPIO_Init+0x270>)
 8003980:	f000 fe80 	bl	8004684 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003984:	2320      	movs	r3, #32
 8003986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003988:	2300      	movs	r3, #0
 800398a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398c:	2300      	movs	r3, #0
 800398e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003990:	f107 031c 	add.w	r3, r7, #28
 8003994:	4619      	mov	r1, r3
 8003996:	4812      	ldr	r0, [pc, #72]	@ (80039e0 <MX_GPIO_Init+0x26c>)
 8003998:	f000 fe74 	bl	8004684 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800399c:	2302      	movs	r3, #2
 800399e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80039a0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80039a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80039aa:	f107 031c 	add.w	r3, r7, #28
 80039ae:	4619      	mov	r1, r3
 80039b0:	4808      	ldr	r0, [pc, #32]	@ (80039d4 <MX_GPIO_Init+0x260>)
 80039b2:	f000 fe67 	bl	8004684 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80039b6:	2200      	movs	r2, #0
 80039b8:	2105      	movs	r1, #5
 80039ba:	2006      	movs	r0, #6
 80039bc:	f000 fda6 	bl	800450c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80039c0:	2006      	movs	r0, #6
 80039c2:	f000 fdbf 	bl	8004544 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80039c6:	bf00      	nop
 80039c8:	3730      	adds	r7, #48	@ 0x30
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40023800 	.word	0x40023800
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40020800 	.word	0x40020800
 80039dc:	40020400 	.word	0x40020400
 80039e0:	40020c00 	.word	0x40020c00
 80039e4:	40020000 	.word	0x40020000

080039e8 <HAL_UART_RxCpltCallback>:
  * <p>Demonstreert: xQueueSendFromISR(); portYIELD_FROM_ISR();</p>
  * @param huart
  * @return void.
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	// receive terminal user commands
	if (huart->Instance == USART2)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a12      	ldr	r2, [pc, #72]	@ (8003a40 <HAL_UART_RxCpltCallback+0x58>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d10c      	bne.n	8003a14 <HAL_UART_RxCpltCallback+0x2c>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart2, &uart2_char, 1);
 80039fa:	2201      	movs	r2, #1
 80039fc:	4911      	ldr	r1, [pc, #68]	@ (8003a44 <HAL_UART_RxCpltCallback+0x5c>)
 80039fe:	4812      	ldr	r0, [pc, #72]	@ (8003a48 <HAL_UART_RxCpltCallback+0x60>)
 8003a00:	f005 fab3 	bl	8008f6a <HAL_UART_Receive_IT>

		/// Zet de byte op de UART_queue
		xQueueSendFromISR(hUART_Queue, &uart2_char, NULL);
 8003a04:	4b11      	ldr	r3, [pc, #68]	@ (8003a4c <HAL_UART_RxCpltCallback+0x64>)
 8003a06:	6818      	ldr	r0, [r3, #0]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	490d      	ldr	r1, [pc, #52]	@ (8003a44 <HAL_UART_RxCpltCallback+0x5c>)
 8003a0e:	f00a fe37 	bl	800e680 <xQueueGenericSendFromISR>

		/// Zet de byte op de GPS_queue
		xQueueSendFromISR(hGPS_Queue, &uart4_char, NULL);
	}

}
 8003a12:	e010      	b.n	8003a36 <HAL_UART_RxCpltCallback+0x4e>
	else if (huart->Instance == UART4)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a0d      	ldr	r2, [pc, #52]	@ (8003a50 <HAL_UART_RxCpltCallback+0x68>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d10b      	bne.n	8003a36 <HAL_UART_RxCpltCallback+0x4e>
		HAL_UART_Receive_IT(&huart4, &uart4_char, 1);
 8003a1e:	2201      	movs	r2, #1
 8003a20:	490c      	ldr	r1, [pc, #48]	@ (8003a54 <HAL_UART_RxCpltCallback+0x6c>)
 8003a22:	480d      	ldr	r0, [pc, #52]	@ (8003a58 <HAL_UART_RxCpltCallback+0x70>)
 8003a24:	f005 faa1 	bl	8008f6a <HAL_UART_Receive_IT>
		xQueueSendFromISR(hGPS_Queue, &uart4_char, NULL);
 8003a28:	4b0c      	ldr	r3, [pc, #48]	@ (8003a5c <HAL_UART_RxCpltCallback+0x74>)
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	2200      	movs	r2, #0
 8003a30:	4908      	ldr	r1, [pc, #32]	@ (8003a54 <HAL_UART_RxCpltCallback+0x6c>)
 8003a32:	f00a fe25 	bl	800e680 <xQueueGenericSendFromISR>
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40004400 	.word	0x40004400
 8003a44:	2000c85c 	.word	0x2000c85c
 8003a48:	2000c810 	.word	0x2000c810
 8003a4c:	20000408 	.word	0x20000408
 8003a50:	40004c00 	.word	0x40004c00
 8003a54:	2000c85d 	.word	0x2000c85d
 8003a58:	2000c7c8 	.word	0x2000c7c8
 8003a5c:	2000040c 	.word	0x2000040c

08003a60 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8003a68:	f00e f936 	bl	8011cd8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  //unsigned char byte1, byte2;

  CreateHandles();
 8003a6c:	f7fe faaa 	bl	8001fc4 <CreateHandles>
  CreateTasks();
 8003a70:	f7fe fb48 	bl	8002104 <CreateTasks>

  // start the interrupt handlers after all handles are created
  HAL_UART_Receive_IT(&huart2, &uart2_char, 1); //start the UART2 interrupt engine for reading
 8003a74:	2201      	movs	r2, #1
 8003a76:	4909      	ldr	r1, [pc, #36]	@ (8003a9c <StartDefaultTask+0x3c>)
 8003a78:	4809      	ldr	r0, [pc, #36]	@ (8003aa0 <StartDefaultTask+0x40>)
 8003a7a:	f005 fa76 	bl	8008f6a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &uart2_char, 1); //start the UART4 interrupt engine GPS
 8003a7e:	2201      	movs	r2, #1
 8003a80:	4906      	ldr	r1, [pc, #24]	@ (8003a9c <StartDefaultTask+0x3c>)
 8003a82:	4808      	ldr	r0, [pc, #32]	@ (8003aa4 <StartDefaultTask+0x44>)
 8003a84:	f005 fa71 	bl	8008f6a <HAL_UART_Receive_IT>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003a88:	2001      	movs	r0, #1
 8003a8a:	f009 ff8f 	bl	800d9ac <osDelay>
    vTaskDelete(defaultTaskHandle); // remove this default task
 8003a8e:	4b06      	ldr	r3, [pc, #24]	@ (8003aa8 <StartDefaultTask+0x48>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f00b fc50 	bl	800f338 <vTaskDelete>
    osDelay(1);
 8003a98:	bf00      	nop
 8003a9a:	e7f5      	b.n	8003a88 <StartDefaultTask+0x28>
 8003a9c:	2000c85c 	.word	0x2000c85c
 8003aa0:	2000c810 	.word	0x2000c810
 8003aa4:	2000c7c8 	.word	0x2000c7c8
 8003aa8:	2000c858 	.word	0x2000c858

08003aac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a04      	ldr	r2, [pc, #16]	@ (8003acc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d101      	bne.n	8003ac2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003abe:	f000 fc29 	bl	8004314 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40010000 	.word	0x40010000

08003ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ad4:	b672      	cpsid	i
}
 8003ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ad8:	bf00      	nop
 8003ada:	e7fd      	b.n	8003ad8 <Error_Handler+0x8>

08003adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	607b      	str	r3, [r7, #4]
 8003ae6:	4b12      	ldr	r3, [pc, #72]	@ (8003b30 <HAL_MspInit+0x54>)
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aea:	4a11      	ldr	r2, [pc, #68]	@ (8003b30 <HAL_MspInit+0x54>)
 8003aec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003af0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003af2:	4b0f      	ldr	r3, [pc, #60]	@ (8003b30 <HAL_MspInit+0x54>)
 8003af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003afa:	607b      	str	r3, [r7, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	603b      	str	r3, [r7, #0]
 8003b02:	4b0b      	ldr	r3, [pc, #44]	@ (8003b30 <HAL_MspInit+0x54>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	4a0a      	ldr	r2, [pc, #40]	@ (8003b30 <HAL_MspInit+0x54>)
 8003b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b0e:	4b08      	ldr	r3, [pc, #32]	@ (8003b30 <HAL_MspInit+0x54>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	210f      	movs	r1, #15
 8003b1e:	f06f 0001 	mvn.w	r0, #1
 8003b22:	f000 fcf3 	bl	800450c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b26:	bf00      	nop
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40023800 	.word	0x40023800

08003b34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08a      	sub	sp, #40	@ 0x28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b3c:	f107 0314 	add.w	r3, r7, #20
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	605a      	str	r2, [r3, #4]
 8003b46:	609a      	str	r2, [r3, #8]
 8003b48:	60da      	str	r2, [r3, #12]
 8003b4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a19      	ldr	r2, [pc, #100]	@ (8003bb8 <HAL_I2C_MspInit+0x84>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d12c      	bne.n	8003bb0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	4b18      	ldr	r3, [pc, #96]	@ (8003bbc <HAL_I2C_MspInit+0x88>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5e:	4a17      	ldr	r2, [pc, #92]	@ (8003bbc <HAL_I2C_MspInit+0x88>)
 8003b60:	f043 0302 	orr.w	r3, r3, #2
 8003b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b66:	4b15      	ldr	r3, [pc, #84]	@ (8003bbc <HAL_I2C_MspInit+0x88>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003b72:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8003b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b78:	2312      	movs	r3, #18
 8003b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b80:	2300      	movs	r3, #0
 8003b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b84:	2304      	movs	r3, #4
 8003b86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b88:	f107 0314 	add.w	r3, r7, #20
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	480c      	ldr	r0, [pc, #48]	@ (8003bc0 <HAL_I2C_MspInit+0x8c>)
 8003b90:	f000 fd78 	bl	8004684 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	4b08      	ldr	r3, [pc, #32]	@ (8003bbc <HAL_I2C_MspInit+0x88>)
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9c:	4a07      	ldr	r2, [pc, #28]	@ (8003bbc <HAL_I2C_MspInit+0x88>)
 8003b9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003ba2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ba4:	4b05      	ldr	r3, [pc, #20]	@ (8003bbc <HAL_I2C_MspInit+0x88>)
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003bb0:	bf00      	nop
 8003bb2:	3728      	adds	r7, #40	@ 0x28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40005400 	.word	0x40005400
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	40020400 	.word	0x40020400

08003bc4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08e      	sub	sp, #56	@ 0x38
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	605a      	str	r2, [r3, #4]
 8003bd6:	609a      	str	r2, [r3, #8]
 8003bd8:	60da      	str	r2, [r3, #12]
 8003bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bdc:	f107 0314 	add.w	r3, r7, #20
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	605a      	str	r2, [r3, #4]
 8003be6:	609a      	str	r2, [r3, #8]
 8003be8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a31      	ldr	r2, [pc, #196]	@ (8003cb4 <HAL_I2S_MspInit+0xf0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d15a      	bne.n	8003caa <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8003bf8:	23c0      	movs	r3, #192	@ 0xc0
 8003bfa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c00:	f107 0314 	add.w	r3, r7, #20
 8003c04:	4618      	mov	r0, r3
 8003c06:	f004 fb11 	bl	800822c <HAL_RCCEx_PeriphCLKConfig>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8003c10:	f7ff ff5e 	bl	8003ad0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003c14:	2300      	movs	r3, #0
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	4b27      	ldr	r3, [pc, #156]	@ (8003cb8 <HAL_I2S_MspInit+0xf4>)
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1c:	4a26      	ldr	r2, [pc, #152]	@ (8003cb8 <HAL_I2S_MspInit+0xf4>)
 8003c1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c22:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c24:	4b24      	ldr	r3, [pc, #144]	@ (8003cb8 <HAL_I2S_MspInit+0xf4>)
 8003c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	4b20      	ldr	r3, [pc, #128]	@ (8003cb8 <HAL_I2S_MspInit+0xf4>)
 8003c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c38:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb8 <HAL_I2S_MspInit+0xf4>)
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c40:	4b1d      	ldr	r3, [pc, #116]	@ (8003cb8 <HAL_I2S_MspInit+0xf4>)
 8003c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60bb      	str	r3, [r7, #8]
 8003c50:	4b19      	ldr	r3, [pc, #100]	@ (8003cb8 <HAL_I2S_MspInit+0xf4>)
 8003c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c54:	4a18      	ldr	r2, [pc, #96]	@ (8003cb8 <HAL_I2S_MspInit+0xf4>)
 8003c56:	f043 0304 	orr.w	r3, r3, #4
 8003c5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c5c:	4b16      	ldr	r3, [pc, #88]	@ (8003cb8 <HAL_I2S_MspInit+0xf4>)
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003c68:	2310      	movs	r3, #16
 8003c6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c74:	2300      	movs	r3, #0
 8003c76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003c78:	2306      	movs	r3, #6
 8003c7a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003c7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c80:	4619      	mov	r1, r3
 8003c82:	480e      	ldr	r0, [pc, #56]	@ (8003cbc <HAL_I2S_MspInit+0xf8>)
 8003c84:	f000 fcfe 	bl	8004684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003c88:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8003c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8e:	2302      	movs	r3, #2
 8003c90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c96:	2300      	movs	r3, #0
 8003c98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003c9a:	2306      	movs	r3, #6
 8003c9c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4806      	ldr	r0, [pc, #24]	@ (8003cc0 <HAL_I2S_MspInit+0xfc>)
 8003ca6:	f000 fced 	bl	8004684 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8003caa:	bf00      	nop
 8003cac:	3738      	adds	r7, #56	@ 0x38
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40003c00 	.word	0x40003c00
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	40020000 	.word	0x40020000
 8003cc0:	40020800 	.word	0x40020800

08003cc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08a      	sub	sp, #40	@ 0x28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ccc:	f107 0314 	add.w	r3, r7, #20
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	605a      	str	r2, [r3, #4]
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	60da      	str	r2, [r3, #12]
 8003cda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a19      	ldr	r2, [pc, #100]	@ (8003d48 <HAL_SPI_MspInit+0x84>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d12b      	bne.n	8003d3e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	4b18      	ldr	r3, [pc, #96]	@ (8003d4c <HAL_SPI_MspInit+0x88>)
 8003cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cee:	4a17      	ldr	r2, [pc, #92]	@ (8003d4c <HAL_SPI_MspInit+0x88>)
 8003cf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cf6:	4b15      	ldr	r3, [pc, #84]	@ (8003d4c <HAL_SPI_MspInit+0x88>)
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	4b11      	ldr	r3, [pc, #68]	@ (8003d4c <HAL_SPI_MspInit+0x88>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0a:	4a10      	ldr	r2, [pc, #64]	@ (8003d4c <HAL_SPI_MspInit+0x88>)
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d12:	4b0e      	ldr	r3, [pc, #56]	@ (8003d4c <HAL_SPI_MspInit+0x88>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003d1e:	23e0      	movs	r3, #224	@ 0xe0
 8003d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d22:	2302      	movs	r3, #2
 8003d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d2e:	2305      	movs	r3, #5
 8003d30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d32:	f107 0314 	add.w	r3, r7, #20
 8003d36:	4619      	mov	r1, r3
 8003d38:	4805      	ldr	r0, [pc, #20]	@ (8003d50 <HAL_SPI_MspInit+0x8c>)
 8003d3a:	f000 fca3 	bl	8004684 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003d3e:	bf00      	nop
 8003d40:	3728      	adds	r7, #40	@ 0x28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40013000 	.word	0x40013000
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	40020000 	.word	0x40020000

08003d54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a18      	ldr	r2, [pc, #96]	@ (8003dc4 <HAL_TIM_Base_MspInit+0x70>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d10e      	bne.n	8003d84 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	4b17      	ldr	r3, [pc, #92]	@ (8003dc8 <HAL_TIM_Base_MspInit+0x74>)
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6e:	4a16      	ldr	r2, [pc, #88]	@ (8003dc8 <HAL_TIM_Base_MspInit+0x74>)
 8003d70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d76:	4b14      	ldr	r3, [pc, #80]	@ (8003dc8 <HAL_TIM_Base_MspInit+0x74>)
 8003d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003d82:	e01a      	b.n	8003dba <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM12)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a10      	ldr	r2, [pc, #64]	@ (8003dcc <HAL_TIM_Base_MspInit+0x78>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d115      	bne.n	8003dba <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc8 <HAL_TIM_Base_MspInit+0x74>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d96:	4a0c      	ldr	r2, [pc, #48]	@ (8003dc8 <HAL_TIM_Base_MspInit+0x74>)
 8003d98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc8 <HAL_TIM_Base_MspInit+0x74>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da6:	60bb      	str	r3, [r7, #8]
 8003da8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8003daa:	2200      	movs	r2, #0
 8003dac:	2105      	movs	r1, #5
 8003dae:	202b      	movs	r0, #43	@ 0x2b
 8003db0:	f000 fbac 	bl	800450c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003db4:	202b      	movs	r0, #43	@ 0x2b
 8003db6:	f000 fbc5 	bl	8004544 <HAL_NVIC_EnableIRQ>
}
 8003dba:	bf00      	nop
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40014800 	.word	0x40014800
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	40001800 	.word	0x40001800

08003dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08c      	sub	sp, #48	@ 0x30
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd8:	f107 031c 	add.w	r3, r7, #28
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	605a      	str	r2, [r3, #4]
 8003de2:	609a      	str	r2, [r3, #8]
 8003de4:	60da      	str	r2, [r3, #12]
 8003de6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a3a      	ldr	r2, [pc, #232]	@ (8003ed8 <HAL_UART_MspInit+0x108>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d134      	bne.n	8003e5c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003df2:	2300      	movs	r3, #0
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	4b39      	ldr	r3, [pc, #228]	@ (8003edc <HAL_UART_MspInit+0x10c>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	4a38      	ldr	r2, [pc, #224]	@ (8003edc <HAL_UART_MspInit+0x10c>)
 8003dfc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e02:	4b36      	ldr	r3, [pc, #216]	@ (8003edc <HAL_UART_MspInit+0x10c>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e0a:	61bb      	str	r3, [r7, #24]
 8003e0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	4b32      	ldr	r3, [pc, #200]	@ (8003edc <HAL_UART_MspInit+0x10c>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e16:	4a31      	ldr	r2, [pc, #196]	@ (8003edc <HAL_UART_MspInit+0x10c>)
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8003edc <HAL_UART_MspInit+0x10c>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2e:	2302      	movs	r3, #2
 8003e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e36:	2303      	movs	r3, #3
 8003e38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003e3a:	2308      	movs	r3, #8
 8003e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e3e:	f107 031c 	add.w	r3, r7, #28
 8003e42:	4619      	mov	r1, r3
 8003e44:	4826      	ldr	r0, [pc, #152]	@ (8003ee0 <HAL_UART_MspInit+0x110>)
 8003e46:	f000 fc1d 	bl	8004684 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2105      	movs	r1, #5
 8003e4e:	2034      	movs	r0, #52	@ 0x34
 8003e50:	f000 fb5c 	bl	800450c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003e54:	2034      	movs	r0, #52	@ 0x34
 8003e56:	f000 fb75 	bl	8004544 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e5a:	e038      	b.n	8003ece <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a20      	ldr	r2, [pc, #128]	@ (8003ee4 <HAL_UART_MspInit+0x114>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d133      	bne.n	8003ece <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e66:	2300      	movs	r3, #0
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003edc <HAL_UART_MspInit+0x10c>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8003edc <HAL_UART_MspInit+0x10c>)
 8003e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e76:	4b19      	ldr	r3, [pc, #100]	@ (8003edc <HAL_UART_MspInit+0x10c>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	4b15      	ldr	r3, [pc, #84]	@ (8003edc <HAL_UART_MspInit+0x10c>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8a:	4a14      	ldr	r2, [pc, #80]	@ (8003edc <HAL_UART_MspInit+0x10c>)
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e92:	4b12      	ldr	r3, [pc, #72]	@ (8003edc <HAL_UART_MspInit+0x10c>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003e9e:	230c      	movs	r3, #12
 8003ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003eae:	2307      	movs	r3, #7
 8003eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb2:	f107 031c 	add.w	r3, r7, #28
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4809      	ldr	r0, [pc, #36]	@ (8003ee0 <HAL_UART_MspInit+0x110>)
 8003eba:	f000 fbe3 	bl	8004684 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2105      	movs	r1, #5
 8003ec2:	2026      	movs	r0, #38	@ 0x26
 8003ec4:	f000 fb22 	bl	800450c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ec8:	2026      	movs	r0, #38	@ 0x26
 8003eca:	f000 fb3b 	bl	8004544 <HAL_NVIC_EnableIRQ>
}
 8003ece:	bf00      	nop
 8003ed0:	3730      	adds	r7, #48	@ 0x30
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40004c00 	.word	0x40004c00
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	40020000 	.word	0x40020000
 8003ee4:	40004400 	.word	0x40004400

08003ee8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08c      	sub	sp, #48	@ 0x30
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60bb      	str	r3, [r7, #8]
 8003efc:	4b2f      	ldr	r3, [pc, #188]	@ (8003fbc <HAL_InitTick+0xd4>)
 8003efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f00:	4a2e      	ldr	r2, [pc, #184]	@ (8003fbc <HAL_InitTick+0xd4>)
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f08:	4b2c      	ldr	r3, [pc, #176]	@ (8003fbc <HAL_InitTick+0xd4>)
 8003f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f14:	f107 020c 	add.w	r2, r7, #12
 8003f18:	f107 0310 	add.w	r3, r7, #16
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f004 f952 	bl	80081c8 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003f24:	f004 f93c 	bl	80081a0 <HAL_RCC_GetPCLK2Freq>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f30:	4a23      	ldr	r2, [pc, #140]	@ (8003fc0 <HAL_InitTick+0xd8>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	0c9b      	lsrs	r3, r3, #18
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003f3c:	4b21      	ldr	r3, [pc, #132]	@ (8003fc4 <HAL_InitTick+0xdc>)
 8003f3e:	4a22      	ldr	r2, [pc, #136]	@ (8003fc8 <HAL_InitTick+0xe0>)
 8003f40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003f42:	4b20      	ldr	r3, [pc, #128]	@ (8003fc4 <HAL_InitTick+0xdc>)
 8003f44:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003f48:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003f4a:	4a1e      	ldr	r2, [pc, #120]	@ (8003fc4 <HAL_InitTick+0xdc>)
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003f50:	4b1c      	ldr	r3, [pc, #112]	@ (8003fc4 <HAL_InitTick+0xdc>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f56:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc4 <HAL_InitTick+0xdc>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f5c:	4b19      	ldr	r3, [pc, #100]	@ (8003fc4 <HAL_InitTick+0xdc>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003f62:	4818      	ldr	r0, [pc, #96]	@ (8003fc4 <HAL_InitTick+0xdc>)
 8003f64:	f004 fb2d 	bl	80085c2 <HAL_TIM_Base_Init>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d11b      	bne.n	8003fae <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003f76:	4813      	ldr	r0, [pc, #76]	@ (8003fc4 <HAL_InitTick+0xdc>)
 8003f78:	f004 fb72 	bl	8008660 <HAL_TIM_Base_Start_IT>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003f82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d111      	bne.n	8003fae <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003f8a:	2019      	movs	r0, #25
 8003f8c:	f000 fada 	bl	8004544 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b0f      	cmp	r3, #15
 8003f94:	d808      	bhi.n	8003fa8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003f96:	2200      	movs	r2, #0
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	2019      	movs	r0, #25
 8003f9c:	f000 fab6 	bl	800450c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8003fcc <HAL_InitTick+0xe4>)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	e002      	b.n	8003fae <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003fae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3730      	adds	r7, #48	@ 0x30
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	431bde83 	.word	0x431bde83
 8003fc4:	2000c860 	.word	0x2000c860
 8003fc8:	40010000 	.word	0x40010000
 8003fcc:	200001d8 	.word	0x200001d8

08003fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fd4:	bf00      	nop
 8003fd6:	e7fd      	b.n	8003fd4 <NMI_Handler+0x4>

08003fd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fdc:	bf00      	nop
 8003fde:	e7fd      	b.n	8003fdc <HardFault_Handler+0x4>

08003fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fe4:	bf00      	nop
 8003fe6:	e7fd      	b.n	8003fe4 <MemManage_Handler+0x4>

08003fe8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fec:	bf00      	nop
 8003fee:	e7fd      	b.n	8003fec <BusFault_Handler+0x4>

08003ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ff4:	bf00      	nop
 8003ff6:	e7fd      	b.n	8003ff4 <UsageFault_Handler+0x4>

08003ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ffc:	bf00      	nop
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
   * Vervolgens wordt de key meegestuurd met een FreeRTOS event, die opgevangen wordt
   * door de task ARM_keys_IRQ(). Daarna wordt, indien nodig, een context switch
   * afgedwongen door portYIELD_FROM_ISR().
   *
   */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800400e:	2300      	movs	r3, #0
 8004010:	603b      	str	r3, [r7, #0]
  int        key;

  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 8004012:	2001      	movs	r0, #1
 8004014:	f000 fd1e 	bl	8004a54 <HAL_GPIO_EXTI_IRQHandler>

  key = KEYS_read(); // determine which key is pressed...
 8004018:	f7fe fe72 	bl	8002d00 <KEYS_read>
 800401c:	4603      	mov	r3, r0
 800401e:	607b      	str	r3, [r7, #4]
  xEventGroupSetBitsFromISR (hKEY_Event, key, &xHigherPriorityTaskWoken);
 8004020:	4b0f      	ldr	r3, [pc, #60]	@ (8004060 <EXTI0_IRQHandler+0x58>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	463a      	mov	r2, r7
 8004028:	4618      	mov	r0, r3
 800402a:	f009 ffe7 	bl	800dffc <xEventGroupSetBitsFromISR>

  // KEYS_initISR(0); // set all lines lo if you want repeating keys
  KEYS_initISR(1);    // set all lines hi for reading all 16 keys
 800402e:	2001      	movs	r0, #1
 8004030:	f7fe fe3e 	bl	8002cb0 <KEYS_initISR>
  if (xHigherPriorityTaskWoken != pdFALSE)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <EXTI0_IRQHandler+0x48>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d007      	beq.n	8004050 <EXTI0_IRQHandler+0x48>
 8004040:	4b08      	ldr	r3, [pc, #32]	@ (8004064 <EXTI0_IRQHandler+0x5c>)
 8004042:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 8004050:	2001      	movs	r0, #1
 8004052:	f000 fcff 	bl	8004a54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004056:	bf00      	nop
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20000418 	.word	0x20000418
 8004064:	e000ed04 	.word	0xe000ed04

08004068 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800406c:	4802      	ldr	r0, [pc, #8]	@ (8004078 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800406e:	f004 fb67 	bl	8008740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004072:	bf00      	nop
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	2000c860 	.word	0x2000c860

0800407c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004080:	4802      	ldr	r0, [pc, #8]	@ (800408c <USART2_IRQHandler+0x10>)
 8004082:	f004 ff97 	bl	8008fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004086:	bf00      	nop
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	2000c810 	.word	0x2000c810

08004090 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8004094:	4802      	ldr	r0, [pc, #8]	@ (80040a0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8004096:	f004 fb53 	bl	8008740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800409a:	bf00      	nop
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	2000c780 	.word	0x2000c780

080040a4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80040a8:	4802      	ldr	r0, [pc, #8]	@ (80040b4 <UART4_IRQHandler+0x10>)
 80040aa:	f004 ff83 	bl	8008fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80040ae:	bf00      	nop
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	2000c7c8 	.word	0x2000c7c8

080040b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80040bc:	4802      	ldr	r0, [pc, #8]	@ (80040c8 <OTG_FS_IRQHandler+0x10>)
 80040be:	f000 ffcd 	bl	800505c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80040c2:	bf00      	nop
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	2001d4bc 	.word	0x2001d4bc

080040cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
	return 1;
 80040d0:	2301      	movs	r3, #1
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <_kill>:

int _kill(int pid, int sig)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80040e6:	f00f fee9 	bl	8013ebc <__errno>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2216      	movs	r2, #22
 80040ee:	601a      	str	r2, [r3, #0]
	return -1;
 80040f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <_exit>:

void _exit (int status)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004104:	f04f 31ff 	mov.w	r1, #4294967295
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff ffe7 	bl	80040dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800410e:	bf00      	nop
 8004110:	e7fd      	b.n	800410e <_exit+0x12>

08004112 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b086      	sub	sp, #24
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	e00a      	b.n	800413a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004124:	f3af 8000 	nop.w
 8004128:	4601      	mov	r1, r0
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	60ba      	str	r2, [r7, #8]
 8004130:	b2ca      	uxtb	r2, r1
 8004132:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	3301      	adds	r3, #1
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	429a      	cmp	r2, r3
 8004140:	dbf0      	blt.n	8004124 <_read+0x12>
	}

return len;
 8004142:	687b      	ldr	r3, [r7, #4]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	e009      	b.n	8004172 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	60ba      	str	r2, [r7, #8]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	3301      	adds	r3, #1
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	429a      	cmp	r2, r3
 8004178:	dbf1      	blt.n	800415e <_write+0x12>
	}
	return len;
 800417a:	687b      	ldr	r3, [r7, #4]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <_close>:

int _close(int file)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
	return -1;
 800418c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004190:	4618      	mov	r0, r3
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80041ac:	605a      	str	r2, [r3, #4]
	return 0;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <_isatty>:

int _isatty(int file)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
	return 1;
 80041c4:	2301      	movs	r3, #1
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b085      	sub	sp, #20
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]
	return 0;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041f4:	4a14      	ldr	r2, [pc, #80]	@ (8004248 <_sbrk+0x5c>)
 80041f6:	4b15      	ldr	r3, [pc, #84]	@ (800424c <_sbrk+0x60>)
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004200:	4b13      	ldr	r3, [pc, #76]	@ (8004250 <_sbrk+0x64>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d102      	bne.n	800420e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004208:	4b11      	ldr	r3, [pc, #68]	@ (8004250 <_sbrk+0x64>)
 800420a:	4a12      	ldr	r2, [pc, #72]	@ (8004254 <_sbrk+0x68>)
 800420c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800420e:	4b10      	ldr	r3, [pc, #64]	@ (8004250 <_sbrk+0x64>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4413      	add	r3, r2
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	429a      	cmp	r2, r3
 800421a:	d207      	bcs.n	800422c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800421c:	f00f fe4e 	bl	8013ebc <__errno>
 8004220:	4603      	mov	r3, r0
 8004222:	220c      	movs	r2, #12
 8004224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004226:	f04f 33ff 	mov.w	r3, #4294967295
 800422a:	e009      	b.n	8004240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800422c:	4b08      	ldr	r3, [pc, #32]	@ (8004250 <_sbrk+0x64>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004232:	4b07      	ldr	r3, [pc, #28]	@ (8004250 <_sbrk+0x64>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4413      	add	r3, r2
 800423a:	4a05      	ldr	r2, [pc, #20]	@ (8004250 <_sbrk+0x64>)
 800423c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800423e:	68fb      	ldr	r3, [r7, #12]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20020000 	.word	0x20020000
 800424c:	00000400 	.word	0x00000400
 8004250:	2000c8a8 	.word	0x2000c8a8
 8004254:	2001d9e8 	.word	0x2001d9e8

08004258 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800425c:	4b06      	ldr	r3, [pc, #24]	@ (8004278 <SystemInit+0x20>)
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004262:	4a05      	ldr	r2, [pc, #20]	@ (8004278 <SystemInit+0x20>)
 8004264:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004268:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800426c:	bf00      	nop
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	e000ed00 	.word	0xe000ed00

0800427c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800427c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80042b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004280:	480d      	ldr	r0, [pc, #52]	@ (80042b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004282:	490e      	ldr	r1, [pc, #56]	@ (80042bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004284:	4a0e      	ldr	r2, [pc, #56]	@ (80042c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004288:	e002      	b.n	8004290 <LoopCopyDataInit>

0800428a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800428a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800428c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800428e:	3304      	adds	r3, #4

08004290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004294:	d3f9      	bcc.n	800428a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004296:	4a0b      	ldr	r2, [pc, #44]	@ (80042c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004298:	4c0b      	ldr	r4, [pc, #44]	@ (80042c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800429a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800429c:	e001      	b.n	80042a2 <LoopFillZerobss>

0800429e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800429e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042a0:	3204      	adds	r2, #4

080042a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042a4:	d3fb      	bcc.n	800429e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80042a6:	f7ff ffd7 	bl	8004258 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042aa:	f00f fe0d 	bl	8013ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042ae:	f7ff f877 	bl	80033a0 <main>
  bx  lr    
 80042b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80042b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042bc:	200003cc 	.word	0x200003cc
  ldr r2, =_sidata
 80042c0:	08019140 	.word	0x08019140
  ldr r2, =_sbss
 80042c4:	200003d0 	.word	0x200003d0
  ldr r4, =_ebss
 80042c8:	2001d9e8 	.word	0x2001d9e8

080042cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042cc:	e7fe      	b.n	80042cc <ADC_IRQHandler>
	...

080042d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004310 <HAL_Init+0x40>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004310 <HAL_Init+0x40>)
 80042da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004310 <HAL_Init+0x40>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a0a      	ldr	r2, [pc, #40]	@ (8004310 <HAL_Init+0x40>)
 80042e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042ec:	4b08      	ldr	r3, [pc, #32]	@ (8004310 <HAL_Init+0x40>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a07      	ldr	r2, [pc, #28]	@ (8004310 <HAL_Init+0x40>)
 80042f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042f8:	2003      	movs	r0, #3
 80042fa:	f000 f8fc 	bl	80044f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042fe:	2000      	movs	r0, #0
 8004300:	f7ff fdf2 	bl	8003ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004304:	f7ff fbea 	bl	8003adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40023c00 	.word	0x40023c00

08004314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004318:	4b06      	ldr	r3, [pc, #24]	@ (8004334 <HAL_IncTick+0x20>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	461a      	mov	r2, r3
 800431e:	4b06      	ldr	r3, [pc, #24]	@ (8004338 <HAL_IncTick+0x24>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4413      	add	r3, r2
 8004324:	4a04      	ldr	r2, [pc, #16]	@ (8004338 <HAL_IncTick+0x24>)
 8004326:	6013      	str	r3, [r2, #0]
}
 8004328:	bf00      	nop
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	200001dc 	.word	0x200001dc
 8004338:	2000c8ac 	.word	0x2000c8ac

0800433c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  return uwTick;
 8004340:	4b03      	ldr	r3, [pc, #12]	@ (8004350 <HAL_GetTick+0x14>)
 8004342:	681b      	ldr	r3, [r3, #0]
}
 8004344:	4618      	mov	r0, r3
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	2000c8ac 	.word	0x2000c8ac

08004354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800435c:	f7ff ffee 	bl	800433c <HAL_GetTick>
 8004360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436c:	d005      	beq.n	800437a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800436e:	4b0a      	ldr	r3, [pc, #40]	@ (8004398 <HAL_Delay+0x44>)
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4413      	add	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800437a:	bf00      	nop
 800437c:	f7ff ffde 	bl	800433c <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	429a      	cmp	r2, r3
 800438a:	d8f7      	bhi.n	800437c <HAL_Delay+0x28>
  {
  }
}
 800438c:	bf00      	nop
 800438e:	bf00      	nop
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	200001dc 	.word	0x200001dc

0800439c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043ac:	4b0c      	ldr	r3, [pc, #48]	@ (80043e0 <__NVIC_SetPriorityGrouping+0x44>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80043b8:	4013      	ands	r3, r2
 80043ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80043c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043ce:	4a04      	ldr	r2, [pc, #16]	@ (80043e0 <__NVIC_SetPriorityGrouping+0x44>)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	60d3      	str	r3, [r2, #12]
}
 80043d4:	bf00      	nop
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	e000ed00 	.word	0xe000ed00

080043e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043e8:	4b04      	ldr	r3, [pc, #16]	@ (80043fc <__NVIC_GetPriorityGrouping+0x18>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	0a1b      	lsrs	r3, r3, #8
 80043ee:	f003 0307 	and.w	r3, r3, #7
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	e000ed00 	.word	0xe000ed00

08004400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	4603      	mov	r3, r0
 8004408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800440a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440e:	2b00      	cmp	r3, #0
 8004410:	db0b      	blt.n	800442a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004412:	79fb      	ldrb	r3, [r7, #7]
 8004414:	f003 021f 	and.w	r2, r3, #31
 8004418:	4907      	ldr	r1, [pc, #28]	@ (8004438 <__NVIC_EnableIRQ+0x38>)
 800441a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	2001      	movs	r0, #1
 8004422:	fa00 f202 	lsl.w	r2, r0, r2
 8004426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	e000e100 	.word	0xe000e100

0800443c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	6039      	str	r1, [r7, #0]
 8004446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444c:	2b00      	cmp	r3, #0
 800444e:	db0a      	blt.n	8004466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	b2da      	uxtb	r2, r3
 8004454:	490c      	ldr	r1, [pc, #48]	@ (8004488 <__NVIC_SetPriority+0x4c>)
 8004456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445a:	0112      	lsls	r2, r2, #4
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	440b      	add	r3, r1
 8004460:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004464:	e00a      	b.n	800447c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	b2da      	uxtb	r2, r3
 800446a:	4908      	ldr	r1, [pc, #32]	@ (800448c <__NVIC_SetPriority+0x50>)
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	3b04      	subs	r3, #4
 8004474:	0112      	lsls	r2, r2, #4
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	440b      	add	r3, r1
 800447a:	761a      	strb	r2, [r3, #24]
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	e000e100 	.word	0xe000e100
 800448c:	e000ed00 	.word	0xe000ed00

08004490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004490:	b480      	push	{r7}
 8004492:	b089      	sub	sp, #36	@ 0x24
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f1c3 0307 	rsb	r3, r3, #7
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	bf28      	it	cs
 80044ae:	2304      	movcs	r3, #4
 80044b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	3304      	adds	r3, #4
 80044b6:	2b06      	cmp	r3, #6
 80044b8:	d902      	bls.n	80044c0 <NVIC_EncodePriority+0x30>
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	3b03      	subs	r3, #3
 80044be:	e000      	b.n	80044c2 <NVIC_EncodePriority+0x32>
 80044c0:	2300      	movs	r3, #0
 80044c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044c4:	f04f 32ff 	mov.w	r2, #4294967295
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	43da      	mvns	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	401a      	ands	r2, r3
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044d8:	f04f 31ff 	mov.w	r1, #4294967295
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	fa01 f303 	lsl.w	r3, r1, r3
 80044e2:	43d9      	mvns	r1, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044e8:	4313      	orrs	r3, r2
         );
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3724      	adds	r7, #36	@ 0x24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b082      	sub	sp, #8
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7ff ff4c 	bl	800439c <__NVIC_SetPriorityGrouping>
}
 8004504:	bf00      	nop
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
 8004518:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800451a:	2300      	movs	r3, #0
 800451c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800451e:	f7ff ff61 	bl	80043e4 <__NVIC_GetPriorityGrouping>
 8004522:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	6978      	ldr	r0, [r7, #20]
 800452a:	f7ff ffb1 	bl	8004490 <NVIC_EncodePriority>
 800452e:	4602      	mov	r2, r0
 8004530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004534:	4611      	mov	r1, r2
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff ff80 	bl	800443c <__NVIC_SetPriority>
}
 800453c:	bf00      	nop
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800454e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff ff54 	bl	8004400 <__NVIC_EnableIRQ>
}
 8004558:	bf00      	nop
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800456e:	f7ff fee5 	bl	800433c <HAL_GetTick>
 8004572:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d008      	beq.n	8004592 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2280      	movs	r2, #128	@ 0x80
 8004584:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e052      	b.n	8004638 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0216 	bic.w	r2, r2, #22
 80045a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	695a      	ldr	r2, [r3, #20]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d103      	bne.n	80045c2 <HAL_DMA_Abort+0x62>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d007      	beq.n	80045d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0208 	bic.w	r2, r2, #8
 80045d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0201 	bic.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045e2:	e013      	b.n	800460c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045e4:	f7ff feaa 	bl	800433c <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b05      	cmp	r3, #5
 80045f0:	d90c      	bls.n	800460c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2220      	movs	r2, #32
 80045f6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2203      	movs	r2, #3
 80045fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e015      	b.n	8004638 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1e4      	bne.n	80045e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800461e:	223f      	movs	r2, #63	@ 0x3f
 8004620:	409a      	lsls	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d004      	beq.n	800465e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2280      	movs	r2, #128	@ 0x80
 8004658:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e00c      	b.n	8004678 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2205      	movs	r2, #5
 8004662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0201 	bic.w	r2, r2, #1
 8004674:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004684:	b480      	push	{r7}
 8004686:	b089      	sub	sp, #36	@ 0x24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004692:	2300      	movs	r3, #0
 8004694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004696:	2300      	movs	r3, #0
 8004698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800469a:	2300      	movs	r3, #0
 800469c:	61fb      	str	r3, [r7, #28]
 800469e:	e16b      	b.n	8004978 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046a0:	2201      	movs	r2, #1
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4013      	ands	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	f040 815a 	bne.w	8004972 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d005      	beq.n	80046d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d130      	bne.n	8004738 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	2203      	movs	r2, #3
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	43db      	mvns	r3, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4013      	ands	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800470c:	2201      	movs	r2, #1
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	43db      	mvns	r3, r3
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	4013      	ands	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	091b      	lsrs	r3, r3, #4
 8004722:	f003 0201 	and.w	r2, r3, #1
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 0303 	and.w	r3, r3, #3
 8004740:	2b03      	cmp	r3, #3
 8004742:	d017      	beq.n	8004774 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	2203      	movs	r2, #3
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4013      	ands	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	4313      	orrs	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d123      	bne.n	80047c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	08da      	lsrs	r2, r3, #3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3208      	adds	r2, #8
 8004788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800478c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	220f      	movs	r2, #15
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	43db      	mvns	r3, r3
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4013      	ands	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	08da      	lsrs	r2, r3, #3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3208      	adds	r2, #8
 80047c2:	69b9      	ldr	r1, [r7, #24]
 80047c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	2203      	movs	r2, #3
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	43db      	mvns	r3, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4013      	ands	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f003 0203 	and.w	r2, r3, #3
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 80b4 	beq.w	8004972 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800480a:	2300      	movs	r3, #0
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	4b60      	ldr	r3, [pc, #384]	@ (8004990 <HAL_GPIO_Init+0x30c>)
 8004810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004812:	4a5f      	ldr	r2, [pc, #380]	@ (8004990 <HAL_GPIO_Init+0x30c>)
 8004814:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004818:	6453      	str	r3, [r2, #68]	@ 0x44
 800481a:	4b5d      	ldr	r3, [pc, #372]	@ (8004990 <HAL_GPIO_Init+0x30c>)
 800481c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004826:	4a5b      	ldr	r2, [pc, #364]	@ (8004994 <HAL_GPIO_Init+0x310>)
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	089b      	lsrs	r3, r3, #2
 800482c:	3302      	adds	r3, #2
 800482e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	220f      	movs	r2, #15
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	43db      	mvns	r3, r3
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4013      	ands	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a52      	ldr	r2, [pc, #328]	@ (8004998 <HAL_GPIO_Init+0x314>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d02b      	beq.n	80048aa <HAL_GPIO_Init+0x226>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a51      	ldr	r2, [pc, #324]	@ (800499c <HAL_GPIO_Init+0x318>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d025      	beq.n	80048a6 <HAL_GPIO_Init+0x222>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a50      	ldr	r2, [pc, #320]	@ (80049a0 <HAL_GPIO_Init+0x31c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d01f      	beq.n	80048a2 <HAL_GPIO_Init+0x21e>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a4f      	ldr	r2, [pc, #316]	@ (80049a4 <HAL_GPIO_Init+0x320>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d019      	beq.n	800489e <HAL_GPIO_Init+0x21a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a4e      	ldr	r2, [pc, #312]	@ (80049a8 <HAL_GPIO_Init+0x324>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d013      	beq.n	800489a <HAL_GPIO_Init+0x216>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a4d      	ldr	r2, [pc, #308]	@ (80049ac <HAL_GPIO_Init+0x328>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00d      	beq.n	8004896 <HAL_GPIO_Init+0x212>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a4c      	ldr	r2, [pc, #304]	@ (80049b0 <HAL_GPIO_Init+0x32c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d007      	beq.n	8004892 <HAL_GPIO_Init+0x20e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a4b      	ldr	r2, [pc, #300]	@ (80049b4 <HAL_GPIO_Init+0x330>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d101      	bne.n	800488e <HAL_GPIO_Init+0x20a>
 800488a:	2307      	movs	r3, #7
 800488c:	e00e      	b.n	80048ac <HAL_GPIO_Init+0x228>
 800488e:	2308      	movs	r3, #8
 8004890:	e00c      	b.n	80048ac <HAL_GPIO_Init+0x228>
 8004892:	2306      	movs	r3, #6
 8004894:	e00a      	b.n	80048ac <HAL_GPIO_Init+0x228>
 8004896:	2305      	movs	r3, #5
 8004898:	e008      	b.n	80048ac <HAL_GPIO_Init+0x228>
 800489a:	2304      	movs	r3, #4
 800489c:	e006      	b.n	80048ac <HAL_GPIO_Init+0x228>
 800489e:	2303      	movs	r3, #3
 80048a0:	e004      	b.n	80048ac <HAL_GPIO_Init+0x228>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e002      	b.n	80048ac <HAL_GPIO_Init+0x228>
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <HAL_GPIO_Init+0x228>
 80048aa:	2300      	movs	r3, #0
 80048ac:	69fa      	ldr	r2, [r7, #28]
 80048ae:	f002 0203 	and.w	r2, r2, #3
 80048b2:	0092      	lsls	r2, r2, #2
 80048b4:	4093      	lsls	r3, r2
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048bc:	4935      	ldr	r1, [pc, #212]	@ (8004994 <HAL_GPIO_Init+0x310>)
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	089b      	lsrs	r3, r3, #2
 80048c2:	3302      	adds	r3, #2
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048ca:	4b3b      	ldr	r3, [pc, #236]	@ (80049b8 <HAL_GPIO_Init+0x334>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	43db      	mvns	r3, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4013      	ands	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048ee:	4a32      	ldr	r2, [pc, #200]	@ (80049b8 <HAL_GPIO_Init+0x334>)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048f4:	4b30      	ldr	r3, [pc, #192]	@ (80049b8 <HAL_GPIO_Init+0x334>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	43db      	mvns	r3, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4013      	ands	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004918:	4a27      	ldr	r2, [pc, #156]	@ (80049b8 <HAL_GPIO_Init+0x334>)
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800491e:	4b26      	ldr	r3, [pc, #152]	@ (80049b8 <HAL_GPIO_Init+0x334>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	43db      	mvns	r3, r3
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	4013      	ands	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	4313      	orrs	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004942:	4a1d      	ldr	r2, [pc, #116]	@ (80049b8 <HAL_GPIO_Init+0x334>)
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004948:	4b1b      	ldr	r3, [pc, #108]	@ (80049b8 <HAL_GPIO_Init+0x334>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	43db      	mvns	r3, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	4013      	ands	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800496c:	4a12      	ldr	r2, [pc, #72]	@ (80049b8 <HAL_GPIO_Init+0x334>)
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	3301      	adds	r3, #1
 8004976:	61fb      	str	r3, [r7, #28]
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	2b0f      	cmp	r3, #15
 800497c:	f67f ae90 	bls.w	80046a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004980:	bf00      	nop
 8004982:	bf00      	nop
 8004984:	3724      	adds	r7, #36	@ 0x24
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40023800 	.word	0x40023800
 8004994:	40013800 	.word	0x40013800
 8004998:	40020000 	.word	0x40020000
 800499c:	40020400 	.word	0x40020400
 80049a0:	40020800 	.word	0x40020800
 80049a4:	40020c00 	.word	0x40020c00
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40021400 	.word	0x40021400
 80049b0:	40021800 	.word	0x40021800
 80049b4:	40021c00 	.word	0x40021c00
 80049b8:	40013c00 	.word	0x40013c00

080049bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	460b      	mov	r3, r1
 80049c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691a      	ldr	r2, [r3, #16]
 80049cc:	887b      	ldrh	r3, [r7, #2]
 80049ce:	4013      	ands	r3, r2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049d4:	2301      	movs	r3, #1
 80049d6:	73fb      	strb	r3, [r7, #15]
 80049d8:	e001      	b.n	80049de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049da:	2300      	movs	r3, #0
 80049dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049de:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	807b      	strh	r3, [r7, #2]
 80049f8:	4613      	mov	r3, r2
 80049fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049fc:	787b      	ldrb	r3, [r7, #1]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a02:	887a      	ldrh	r2, [r7, #2]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a08:	e003      	b.n	8004a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a0a:	887b      	ldrh	r3, [r7, #2]
 8004a0c:	041a      	lsls	r2, r3, #16
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	619a      	str	r2, [r3, #24]
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b085      	sub	sp, #20
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	460b      	mov	r3, r1
 8004a28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a30:	887a      	ldrh	r2, [r7, #2]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4013      	ands	r3, r2
 8004a36:	041a      	lsls	r2, r3, #16
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	43d9      	mvns	r1, r3
 8004a3c:	887b      	ldrh	r3, [r7, #2]
 8004a3e:	400b      	ands	r3, r1
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	619a      	str	r2, [r3, #24]
}
 8004a46:	bf00      	nop
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
	...

08004a54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a5e:	4b08      	ldr	r3, [pc, #32]	@ (8004a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a60:	695a      	ldr	r2, [r3, #20]
 8004a62:	88fb      	ldrh	r3, [r7, #6]
 8004a64:	4013      	ands	r3, r2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d006      	beq.n	8004a78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a6a:	4a05      	ldr	r2, [pc, #20]	@ (8004a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a6c:	88fb      	ldrh	r3, [r7, #6]
 8004a6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a70:	88fb      	ldrh	r3, [r7, #6]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 f806 	bl	8004a84 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a78:	bf00      	nop
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40013c00 	.word	0x40013c00

08004a84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b086      	sub	sp, #24
 8004a9e:	af02      	add	r7, sp, #8
 8004aa0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e059      	b.n	8004b60 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f00d f95a 	bl	8011d80 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2203      	movs	r2, #3
 8004ad0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ada:	d102      	bne.n	8004ae2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f005 fa2f 	bl	8009f4a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6818      	ldr	r0, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	7c1a      	ldrb	r2, [r3, #16]
 8004af4:	f88d 2000 	strb.w	r2, [sp]
 8004af8:	3304      	adds	r3, #4
 8004afa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004afc:	f005 f9b0 	bl	8009e60 <USB_CoreInit>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d005      	beq.n	8004b12 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2202      	movs	r2, #2
 8004b0a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e026      	b.n	8004b60 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2101      	movs	r1, #1
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f005 fa27 	bl	8009f6c <USB_SetCurrentMode>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e017      	b.n	8004b60 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6818      	ldr	r0, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	7c1a      	ldrb	r2, [r3, #16]
 8004b38:	f88d 2000 	strb.w	r2, [sp]
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b40:	f005 fbca 	bl	800a2d8 <USB_HostInit>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e004      	b.n	8004b60 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004b68:	b590      	push	{r4, r7, lr}
 8004b6a:	b08b      	sub	sp, #44	@ 0x2c
 8004b6c:	af04      	add	r7, sp, #16
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	4608      	mov	r0, r1
 8004b72:	4611      	mov	r1, r2
 8004b74:	461a      	mov	r2, r3
 8004b76:	4603      	mov	r3, r0
 8004b78:	70fb      	strb	r3, [r7, #3]
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	70bb      	strb	r3, [r7, #2]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8004b82:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004b84:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <HAL_HCD_HC_Init+0x2c>
 8004b90:	2302      	movs	r3, #2
 8004b92:	e09d      	b.n	8004cd0 <HAL_HCD_HC_Init+0x168>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8004b9c:	78fa      	ldrb	r2, [r7, #3]
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	1a9b      	subs	r3, r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	3319      	adds	r3, #25
 8004bac:	2200      	movs	r2, #0
 8004bae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004bb0:	78fa      	ldrb	r2, [r7, #3]
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	3314      	adds	r3, #20
 8004bc0:	787a      	ldrb	r2, [r7, #1]
 8004bc2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004bc4:	78fa      	ldrb	r2, [r7, #3]
 8004bc6:	6879      	ldr	r1, [r7, #4]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	1a9b      	subs	r3, r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	3315      	adds	r3, #21
 8004bd4:	78fa      	ldrb	r2, [r7, #3]
 8004bd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004bd8:	78fa      	ldrb	r2, [r7, #3]
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	1a9b      	subs	r3, r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	3326      	adds	r3, #38	@ 0x26
 8004be8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004bec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004bee:	78fa      	ldrb	r2, [r7, #3]
 8004bf0:	78bb      	ldrb	r3, [r7, #2]
 8004bf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bf6:	b2d8      	uxtb	r0, r3
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	011b      	lsls	r3, r3, #4
 8004bfe:	1a9b      	subs	r3, r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	440b      	add	r3, r1
 8004c04:	3316      	adds	r3, #22
 8004c06:	4602      	mov	r2, r0
 8004c08:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fbc8 	bl	80053a4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8004c14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	da0a      	bge.n	8004c32 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004c1c:	78fa      	ldrb	r2, [r7, #3]
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	4613      	mov	r3, r2
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	1a9b      	subs	r3, r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	3317      	adds	r3, #23
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	701a      	strb	r2, [r3, #0]
 8004c30:	e009      	b.n	8004c46 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004c32:	78fa      	ldrb	r2, [r7, #3]
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	4613      	mov	r3, r2
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	1a9b      	subs	r3, r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	440b      	add	r3, r1
 8004c40:	3317      	adds	r3, #23
 8004c42:	2200      	movs	r2, #0
 8004c44:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f005 fca8 	bl	800a5a0 <USB_GetHostSpeed>
 8004c50:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8004c52:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d10b      	bne.n	8004c72 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8004c5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d107      	bne.n	8004c72 <HAL_HCD_HC_Init+0x10a>
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d104      	bne.n	8004c72 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2bbc      	cmp	r3, #188	@ 0xbc
 8004c6c:	d901      	bls.n	8004c72 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8004c6e:	23bc      	movs	r3, #188	@ 0xbc
 8004c70:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8004c72:	78fa      	ldrb	r2, [r7, #3]
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	4613      	mov	r3, r2
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	1a9b      	subs	r3, r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	440b      	add	r3, r1
 8004c80:	3318      	adds	r3, #24
 8004c82:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004c86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8004c88:	78fa      	ldrb	r2, [r7, #3]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	b298      	uxth	r0, r3
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	4613      	mov	r3, r2
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	1a9b      	subs	r3, r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	3328      	adds	r3, #40	@ 0x28
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6818      	ldr	r0, [r3, #0]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	787c      	ldrb	r4, [r7, #1]
 8004caa:	78ba      	ldrb	r2, [r7, #2]
 8004cac:	78f9      	ldrb	r1, [r7, #3]
 8004cae:	9302      	str	r3, [sp, #8]
 8004cb0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004cb4:	9301      	str	r3, [sp, #4]
 8004cb6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	4623      	mov	r3, r4
 8004cbe:	f005 fc97 	bl	800a5f0 <USB_HC_Init>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	371c      	adds	r7, #28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd90      	pop	{r4, r7, pc}

08004cd8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d101      	bne.n	8004cf6 <HAL_HCD_HC_Halt+0x1e>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	e00f      	b.n	8004d16 <HAL_HCD_HC_Halt+0x3e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	78fa      	ldrb	r2, [r7, #3]
 8004d04:	4611      	mov	r1, r2
 8004d06:	4618      	mov	r0, r3
 8004d08:	f006 f829 	bl	800ad5e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
	...

08004d20 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	4608      	mov	r0, r1
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	4603      	mov	r3, r0
 8004d30:	70fb      	strb	r3, [r7, #3]
 8004d32:	460b      	mov	r3, r1
 8004d34:	70bb      	strb	r3, [r7, #2]
 8004d36:	4613      	mov	r3, r2
 8004d38:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004d3a:	78fa      	ldrb	r2, [r7, #3]
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	1a9b      	subs	r3, r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	3317      	adds	r3, #23
 8004d4a:	78ba      	ldrb	r2, [r7, #2]
 8004d4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004d4e:	78fa      	ldrb	r2, [r7, #3]
 8004d50:	6879      	ldr	r1, [r7, #4]
 8004d52:	4613      	mov	r3, r2
 8004d54:	011b      	lsls	r3, r3, #4
 8004d56:	1a9b      	subs	r3, r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	440b      	add	r3, r1
 8004d5c:	3326      	adds	r3, #38	@ 0x26
 8004d5e:	787a      	ldrb	r2, [r7, #1]
 8004d60:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004d62:	7c3b      	ldrb	r3, [r7, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d114      	bne.n	8004d92 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004d68:	78fa      	ldrb	r2, [r7, #3]
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	332a      	adds	r3, #42	@ 0x2a
 8004d78:	2203      	movs	r2, #3
 8004d7a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004d7c:	78fa      	ldrb	r2, [r7, #3]
 8004d7e:	6879      	ldr	r1, [r7, #4]
 8004d80:	4613      	mov	r3, r2
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	1a9b      	subs	r3, r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	440b      	add	r3, r1
 8004d8a:	3319      	adds	r3, #25
 8004d8c:	7f3a      	ldrb	r2, [r7, #28]
 8004d8e:	701a      	strb	r2, [r3, #0]
 8004d90:	e009      	b.n	8004da6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d92:	78fa      	ldrb	r2, [r7, #3]
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	4613      	mov	r3, r2
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	1a9b      	subs	r3, r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	440b      	add	r3, r1
 8004da0:	332a      	adds	r3, #42	@ 0x2a
 8004da2:	2202      	movs	r2, #2
 8004da4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004da6:	787b      	ldrb	r3, [r7, #1]
 8004da8:	2b03      	cmp	r3, #3
 8004daa:	f200 8102 	bhi.w	8004fb2 <HAL_HCD_HC_SubmitRequest+0x292>
 8004dae:	a201      	add	r2, pc, #4	@ (adr r2, 8004db4 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db4:	08004dc5 	.word	0x08004dc5
 8004db8:	08004f9d 	.word	0x08004f9d
 8004dbc:	08004e89 	.word	0x08004e89
 8004dc0:	08004f13 	.word	0x08004f13
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004dc4:	7c3b      	ldrb	r3, [r7, #16]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	f040 80f5 	bne.w	8004fb6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004dcc:	78bb      	ldrb	r3, [r7, #2]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d12d      	bne.n	8004e2e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8004dd2:	8b3b      	ldrh	r3, [r7, #24]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d109      	bne.n	8004dec <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8004dd8:	78fa      	ldrb	r2, [r7, #3]
 8004dda:	6879      	ldr	r1, [r7, #4]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	1a9b      	subs	r3, r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	440b      	add	r3, r1
 8004de6:	333d      	adds	r3, #61	@ 0x3d
 8004de8:	2201      	movs	r2, #1
 8004dea:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004dec:	78fa      	ldrb	r2, [r7, #3]
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	4613      	mov	r3, r2
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	1a9b      	subs	r3, r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	333d      	adds	r3, #61	@ 0x3d
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10a      	bne.n	8004e18 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e02:	78fa      	ldrb	r2, [r7, #3]
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	4613      	mov	r3, r2
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	1a9b      	subs	r3, r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	440b      	add	r3, r1
 8004e10:	332a      	adds	r3, #42	@ 0x2a
 8004e12:	2200      	movs	r2, #0
 8004e14:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8004e16:	e0ce      	b.n	8004fb6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e18:	78fa      	ldrb	r2, [r7, #3]
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	1a9b      	subs	r3, r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	332a      	adds	r3, #42	@ 0x2a
 8004e28:	2202      	movs	r2, #2
 8004e2a:	701a      	strb	r2, [r3, #0]
      break;
 8004e2c:	e0c3      	b.n	8004fb6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8004e2e:	78fa      	ldrb	r2, [r7, #3]
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	4613      	mov	r3, r2
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	1a9b      	subs	r3, r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	440b      	add	r3, r1
 8004e3c:	331a      	adds	r3, #26
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	f040 80b8 	bne.w	8004fb6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8004e46:	78fa      	ldrb	r2, [r7, #3]
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	440b      	add	r3, r1
 8004e54:	333c      	adds	r3, #60	@ 0x3c
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10a      	bne.n	8004e72 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e5c:	78fa      	ldrb	r2, [r7, #3]
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	1a9b      	subs	r3, r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	332a      	adds	r3, #42	@ 0x2a
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	701a      	strb	r2, [r3, #0]
      break;
 8004e70:	e0a1      	b.n	8004fb6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e72:	78fa      	ldrb	r2, [r7, #3]
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	1a9b      	subs	r3, r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	332a      	adds	r3, #42	@ 0x2a
 8004e82:	2202      	movs	r2, #2
 8004e84:	701a      	strb	r2, [r3, #0]
      break;
 8004e86:	e096      	b.n	8004fb6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004e88:	78bb      	ldrb	r3, [r7, #2]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d120      	bne.n	8004ed0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e8e:	78fa      	ldrb	r2, [r7, #3]
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	4613      	mov	r3, r2
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	1a9b      	subs	r3, r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	333d      	adds	r3, #61	@ 0x3d
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10a      	bne.n	8004eba <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ea4:	78fa      	ldrb	r2, [r7, #3]
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	1a9b      	subs	r3, r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	332a      	adds	r3, #42	@ 0x2a
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004eb8:	e07e      	b.n	8004fb8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004eba:	78fa      	ldrb	r2, [r7, #3]
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	440b      	add	r3, r1
 8004ec8:	332a      	adds	r3, #42	@ 0x2a
 8004eca:	2202      	movs	r2, #2
 8004ecc:	701a      	strb	r2, [r3, #0]
      break;
 8004ece:	e073      	b.n	8004fb8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004ed0:	78fa      	ldrb	r2, [r7, #3]
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	011b      	lsls	r3, r3, #4
 8004ed8:	1a9b      	subs	r3, r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	333c      	adds	r3, #60	@ 0x3c
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10a      	bne.n	8004efc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ee6:	78fa      	ldrb	r2, [r7, #3]
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	4613      	mov	r3, r2
 8004eec:	011b      	lsls	r3, r3, #4
 8004eee:	1a9b      	subs	r3, r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	332a      	adds	r3, #42	@ 0x2a
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	701a      	strb	r2, [r3, #0]
      break;
 8004efa:	e05d      	b.n	8004fb8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004efc:	78fa      	ldrb	r2, [r7, #3]
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	4613      	mov	r3, r2
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	1a9b      	subs	r3, r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	332a      	adds	r3, #42	@ 0x2a
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	701a      	strb	r2, [r3, #0]
      break;
 8004f10:	e052      	b.n	8004fb8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004f12:	78bb      	ldrb	r3, [r7, #2]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d120      	bne.n	8004f5a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004f18:	78fa      	ldrb	r2, [r7, #3]
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	011b      	lsls	r3, r3, #4
 8004f20:	1a9b      	subs	r3, r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	333d      	adds	r3, #61	@ 0x3d
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10a      	bne.n	8004f44 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f2e:	78fa      	ldrb	r2, [r7, #3]
 8004f30:	6879      	ldr	r1, [r7, #4]
 8004f32:	4613      	mov	r3, r2
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	1a9b      	subs	r3, r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	440b      	add	r3, r1
 8004f3c:	332a      	adds	r3, #42	@ 0x2a
 8004f3e:	2200      	movs	r2, #0
 8004f40:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004f42:	e039      	b.n	8004fb8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f44:	78fa      	ldrb	r2, [r7, #3]
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	011b      	lsls	r3, r3, #4
 8004f4c:	1a9b      	subs	r3, r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	332a      	adds	r3, #42	@ 0x2a
 8004f54:	2202      	movs	r2, #2
 8004f56:	701a      	strb	r2, [r3, #0]
      break;
 8004f58:	e02e      	b.n	8004fb8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004f5a:	78fa      	ldrb	r2, [r7, #3]
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	011b      	lsls	r3, r3, #4
 8004f62:	1a9b      	subs	r3, r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	440b      	add	r3, r1
 8004f68:	333c      	adds	r3, #60	@ 0x3c
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10a      	bne.n	8004f86 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f70:	78fa      	ldrb	r2, [r7, #3]
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	4613      	mov	r3, r2
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	1a9b      	subs	r3, r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	332a      	adds	r3, #42	@ 0x2a
 8004f80:	2200      	movs	r2, #0
 8004f82:	701a      	strb	r2, [r3, #0]
      break;
 8004f84:	e018      	b.n	8004fb8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f86:	78fa      	ldrb	r2, [r7, #3]
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	011b      	lsls	r3, r3, #4
 8004f8e:	1a9b      	subs	r3, r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	440b      	add	r3, r1
 8004f94:	332a      	adds	r3, #42	@ 0x2a
 8004f96:	2202      	movs	r2, #2
 8004f98:	701a      	strb	r2, [r3, #0]
      break;
 8004f9a:	e00d      	b.n	8004fb8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f9c:	78fa      	ldrb	r2, [r7, #3]
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	1a9b      	subs	r3, r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	332a      	adds	r3, #42	@ 0x2a
 8004fac:	2200      	movs	r2, #0
 8004fae:	701a      	strb	r2, [r3, #0]
      break;
 8004fb0:	e002      	b.n	8004fb8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8004fb2:	bf00      	nop
 8004fb4:	e000      	b.n	8004fb8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8004fb6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004fb8:	78fa      	ldrb	r2, [r7, #3]
 8004fba:	6879      	ldr	r1, [r7, #4]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	011b      	lsls	r3, r3, #4
 8004fc0:	1a9b      	subs	r3, r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	440b      	add	r3, r1
 8004fc6:	332c      	adds	r3, #44	@ 0x2c
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004fcc:	78fa      	ldrb	r2, [r7, #3]
 8004fce:	8b39      	ldrh	r1, [r7, #24]
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	011b      	lsls	r3, r3, #4
 8004fd6:	1a9b      	subs	r3, r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4403      	add	r3, r0
 8004fdc:	3334      	adds	r3, #52	@ 0x34
 8004fde:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004fe0:	78fa      	ldrb	r2, [r7, #3]
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	1a9b      	subs	r3, r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	440b      	add	r3, r1
 8004fee:	334c      	adds	r3, #76	@ 0x4c
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004ff4:	78fa      	ldrb	r2, [r7, #3]
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	011b      	lsls	r3, r3, #4
 8004ffc:	1a9b      	subs	r3, r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	3338      	adds	r3, #56	@ 0x38
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005008:	78fa      	ldrb	r2, [r7, #3]
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	4613      	mov	r3, r2
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	1a9b      	subs	r3, r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	3315      	adds	r3, #21
 8005018:	78fa      	ldrb	r2, [r7, #3]
 800501a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800501c:	78fa      	ldrb	r2, [r7, #3]
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	4613      	mov	r3, r2
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	1a9b      	subs	r3, r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	334d      	adds	r3, #77	@ 0x4d
 800502c:	2200      	movs	r2, #0
 800502e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6818      	ldr	r0, [r3, #0]
 8005034:	78fa      	ldrb	r2, [r7, #3]
 8005036:	4613      	mov	r3, r2
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	1a9b      	subs	r3, r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	3310      	adds	r3, #16
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	4413      	add	r3, r2
 8005044:	1d19      	adds	r1, r3, #4
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	799b      	ldrb	r3, [r3, #6]
 800504a:	461a      	mov	r2, r3
 800504c:	f005 fbfc 	bl	800a848 <USB_HC_StartXfer>
 8005050:	4603      	mov	r3, r0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop

0800505c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f005 f8f0 	bl	800a258 <USB_GetMode>
 8005078:	4603      	mov	r3, r0
 800507a:	2b01      	cmp	r3, #1
 800507c:	f040 80fb 	bne.w	8005276 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4618      	mov	r0, r3
 8005086:	f005 f8b3 	bl	800a1f0 <USB_ReadInterrupts>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 80f1 	beq.w	8005274 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f005 f8aa 	bl	800a1f0 <USB_ReadInterrupts>
 800509c:	4603      	mov	r3, r0
 800509e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050a6:	d104      	bne.n	80050b2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80050b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f005 f89a 	bl	800a1f0 <USB_ReadInterrupts>
 80050bc:	4603      	mov	r3, r0
 80050be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050c6:	d104      	bne.n	80050d2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80050d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f005 f88a 	bl	800a1f0 <USB_ReadInterrupts>
 80050dc:	4603      	mov	r3, r0
 80050de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80050e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050e6:	d104      	bne.n	80050f2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80050f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f005 f87a 	bl	800a1f0 <USB_ReadInterrupts>
 80050fc:	4603      	mov	r3, r0
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b02      	cmp	r3, #2
 8005104:	d103      	bne.n	800510e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2202      	movs	r2, #2
 800510c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f005 f86c 	bl	800a1f0 <USB_ReadInterrupts>
 8005118:	4603      	mov	r3, r0
 800511a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800511e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005122:	d120      	bne.n	8005166 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800512c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d113      	bne.n	8005166 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800513e:	2110      	movs	r1, #16
 8005140:	6938      	ldr	r0, [r7, #16]
 8005142:	f004 ff5f 	bl	800a004 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005146:	6938      	ldr	r0, [r7, #16]
 8005148:	f004 ff8e 	bl	800a068 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	7a5b      	ldrb	r3, [r3, #9]
 8005150:	2b02      	cmp	r3, #2
 8005152:	d105      	bne.n	8005160 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2101      	movs	r1, #1
 800515a:	4618      	mov	r0, r3
 800515c:	f005 f980 	bl	800a460 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f00c fe8b 	bl	8011e7c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f005 f840 	bl	800a1f0 <USB_ReadInterrupts>
 8005170:	4603      	mov	r3, r0
 8005172:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005176:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800517a:	d102      	bne.n	8005182 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f001 fd33 	bl	8006be8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4618      	mov	r0, r3
 8005188:	f005 f832 	bl	800a1f0 <USB_ReadInterrupts>
 800518c:	4603      	mov	r3, r0
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b08      	cmp	r3, #8
 8005194:	d106      	bne.n	80051a4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f00c fe54 	bl	8011e44 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2208      	movs	r2, #8
 80051a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f005 f821 	bl	800a1f0 <USB_ReadInterrupts>
 80051ae:	4603      	mov	r3, r0
 80051b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051b8:	d139      	bne.n	800522e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f005 fdbc 	bl	800ad3c <USB_HC_ReadInterrupt>
 80051c4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80051c6:	2300      	movs	r3, #0
 80051c8:	617b      	str	r3, [r7, #20]
 80051ca:	e025      	b.n	8005218 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	fa22 f303 	lsr.w	r3, r2, r3
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d018      	beq.n	8005212 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051f6:	d106      	bne.n	8005206 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	4619      	mov	r1, r3
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f905 	bl	800540e <HCD_HC_IN_IRQHandler>
 8005204:	e005      	b.n	8005212 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	4619      	mov	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 ff67 	bl	80060e0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	3301      	adds	r3, #1
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	795b      	ldrb	r3, [r3, #5]
 800521c:	461a      	mov	r2, r3
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	4293      	cmp	r3, r2
 8005222:	d3d3      	bcc.n	80051cc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800522c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f004 ffdc 	bl	800a1f0 <USB_ReadInterrupts>
 8005238:	4603      	mov	r3, r0
 800523a:	f003 0310 	and.w	r3, r3, #16
 800523e:	2b10      	cmp	r3, #16
 8005240:	d101      	bne.n	8005246 <HAL_HCD_IRQHandler+0x1ea>
 8005242:	2301      	movs	r3, #1
 8005244:	e000      	b.n	8005248 <HAL_HCD_IRQHandler+0x1ec>
 8005246:	2300      	movs	r3, #0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d014      	beq.n	8005276 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0210 	bic.w	r2, r2, #16
 800525a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f001 fbe4 	bl	8006a2a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	699a      	ldr	r2, [r3, #24]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0210 	orr.w	r2, r2, #16
 8005270:	619a      	str	r2, [r3, #24]
 8005272:	e000      	b.n	8005276 <HAL_HCD_IRQHandler+0x21a>
      return;
 8005274:	bf00      	nop
    }
  }
}
 8005276:	3718      	adds	r7, #24
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <HAL_HCD_Start+0x16>
 800528e:	2302      	movs	r3, #2
 8005290:	e013      	b.n	80052ba <HAL_HCD_Start+0x3e>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2101      	movs	r1, #1
 80052a0:	4618      	mov	r0, r3
 80052a2:	f005 f944 	bl	800a52e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f004 fe3c 	bl	8009f28 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b082      	sub	sp, #8
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_HCD_Stop+0x16>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e00d      	b.n	80052f4 <HAL_HCD_Stop+0x32>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f005 fe97 	bl	800b018 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4618      	mov	r0, r3
 800530a:	f005 f8e6 	bl	800a4da <USB_ResetPort>
 800530e:	4603      	mov	r3, r0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	460b      	mov	r3, r1
 8005322:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005324:	78fa      	ldrb	r2, [r7, #3]
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	4613      	mov	r3, r2
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	1a9b      	subs	r3, r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	334c      	adds	r3, #76	@ 0x4c
 8005334:	781b      	ldrb	r3, [r3, #0]
}
 8005336:	4618      	mov	r0, r3
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	460b      	mov	r3, r1
 800534c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800534e:	78fa      	ldrb	r2, [r7, #3]
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	4613      	mov	r3, r2
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	1a9b      	subs	r3, r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	440b      	add	r3, r1
 800535c:	3338      	adds	r3, #56	@ 0x38
 800535e:	681b      	ldr	r3, [r3, #0]
}
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4618      	mov	r0, r3
 800537a:	f005 f928 	bl	800a5ce <USB_GetCurrentFrame>
 800537e:	4603      	mov	r3, r0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4618      	mov	r0, r3
 8005396:	f005 f903 	bl	800a5a0 <USB_GetHostSpeed>
 800539a:	4603      	mov	r3, r0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	460b      	mov	r3, r1
 80053ae:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80053b0:	78fa      	ldrb	r2, [r7, #3]
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	4613      	mov	r3, r2
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	1a9b      	subs	r3, r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	331a      	adds	r3, #26
 80053c0:	2200      	movs	r2, #0
 80053c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80053c4:	78fa      	ldrb	r2, [r7, #3]
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	4613      	mov	r3, r2
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	331b      	adds	r3, #27
 80053d4:	2200      	movs	r2, #0
 80053d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80053d8:	78fa      	ldrb	r2, [r7, #3]
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	4613      	mov	r3, r2
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	3325      	adds	r3, #37	@ 0x25
 80053e8:	2200      	movs	r2, #0
 80053ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80053ec:	78fa      	ldrb	r2, [r7, #3]
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	4613      	mov	r3, r2
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	440b      	add	r3, r1
 80053fa:	3324      	adds	r3, #36	@ 0x24
 80053fc:	2200      	movs	r2, #0
 80053fe:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b086      	sub	sp, #24
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	460b      	mov	r3, r1
 8005418:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	78fa      	ldrb	r2, [r7, #3]
 800542a:	4611      	mov	r1, r2
 800542c:	4618      	mov	r0, r3
 800542e:	f004 fef2 	bl	800a216 <USB_ReadChInterrupts>
 8005432:	4603      	mov	r3, r0
 8005434:	f003 0304 	and.w	r3, r3, #4
 8005438:	2b04      	cmp	r3, #4
 800543a:	d11a      	bne.n	8005472 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	4413      	add	r3, r2
 8005444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005448:	461a      	mov	r2, r3
 800544a:	2304      	movs	r3, #4
 800544c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800544e:	78fa      	ldrb	r2, [r7, #3]
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	4613      	mov	r3, r2
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	1a9b      	subs	r3, r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	440b      	add	r3, r1
 800545c:	334d      	adds	r3, #77	@ 0x4d
 800545e:	2207      	movs	r2, #7
 8005460:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	78fa      	ldrb	r2, [r7, #3]
 8005468:	4611      	mov	r1, r2
 800546a:	4618      	mov	r0, r3
 800546c:	f005 fc77 	bl	800ad5e <USB_HC_Halt>
 8005470:	e09e      	b.n	80055b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	78fa      	ldrb	r2, [r7, #3]
 8005478:	4611      	mov	r1, r2
 800547a:	4618      	mov	r0, r3
 800547c:	f004 fecb 	bl	800a216 <USB_ReadChInterrupts>
 8005480:	4603      	mov	r3, r0
 8005482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005486:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800548a:	d11b      	bne.n	80054c4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800548c:	78fb      	ldrb	r3, [r7, #3]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	4413      	add	r3, r2
 8005494:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005498:	461a      	mov	r2, r3
 800549a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800549e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80054a0:	78fa      	ldrb	r2, [r7, #3]
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	4613      	mov	r3, r2
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	1a9b      	subs	r3, r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	440b      	add	r3, r1
 80054ae:	334d      	adds	r3, #77	@ 0x4d
 80054b0:	2208      	movs	r2, #8
 80054b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	78fa      	ldrb	r2, [r7, #3]
 80054ba:	4611      	mov	r1, r2
 80054bc:	4618      	mov	r0, r3
 80054be:	f005 fc4e 	bl	800ad5e <USB_HC_Halt>
 80054c2:	e075      	b.n	80055b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	78fa      	ldrb	r2, [r7, #3]
 80054ca:	4611      	mov	r1, r2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f004 fea2 	bl	800a216 <USB_ReadChInterrupts>
 80054d2:	4603      	mov	r3, r0
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d11a      	bne.n	8005512 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80054dc:	78fb      	ldrb	r3, [r7, #3]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054e8:	461a      	mov	r2, r3
 80054ea:	2308      	movs	r3, #8
 80054ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80054ee:	78fa      	ldrb	r2, [r7, #3]
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	4613      	mov	r3, r2
 80054f4:	011b      	lsls	r3, r3, #4
 80054f6:	1a9b      	subs	r3, r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	440b      	add	r3, r1
 80054fc:	334d      	adds	r3, #77	@ 0x4d
 80054fe:	2206      	movs	r2, #6
 8005500:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	78fa      	ldrb	r2, [r7, #3]
 8005508:	4611      	mov	r1, r2
 800550a:	4618      	mov	r0, r3
 800550c:	f005 fc27 	bl	800ad5e <USB_HC_Halt>
 8005510:	e04e      	b.n	80055b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	78fa      	ldrb	r2, [r7, #3]
 8005518:	4611      	mov	r1, r2
 800551a:	4618      	mov	r0, r3
 800551c:	f004 fe7b 	bl	800a216 <USB_ReadChInterrupts>
 8005520:	4603      	mov	r3, r0
 8005522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800552a:	d11b      	bne.n	8005564 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	4413      	add	r3, r2
 8005534:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005538:	461a      	mov	r2, r3
 800553a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800553e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005540:	78fa      	ldrb	r2, [r7, #3]
 8005542:	6879      	ldr	r1, [r7, #4]
 8005544:	4613      	mov	r3, r2
 8005546:	011b      	lsls	r3, r3, #4
 8005548:	1a9b      	subs	r3, r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	440b      	add	r3, r1
 800554e:	334d      	adds	r3, #77	@ 0x4d
 8005550:	2209      	movs	r2, #9
 8005552:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	78fa      	ldrb	r2, [r7, #3]
 800555a:	4611      	mov	r1, r2
 800555c:	4618      	mov	r0, r3
 800555e:	f005 fbfe 	bl	800ad5e <USB_HC_Halt>
 8005562:	e025      	b.n	80055b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	78fa      	ldrb	r2, [r7, #3]
 800556a:	4611      	mov	r1, r2
 800556c:	4618      	mov	r0, r3
 800556e:	f004 fe52 	bl	800a216 <USB_ReadChInterrupts>
 8005572:	4603      	mov	r3, r0
 8005574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005578:	2b80      	cmp	r3, #128	@ 0x80
 800557a:	d119      	bne.n	80055b0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800557c:	78fb      	ldrb	r3, [r7, #3]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	4413      	add	r3, r2
 8005584:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005588:	461a      	mov	r2, r3
 800558a:	2380      	movs	r3, #128	@ 0x80
 800558c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800558e:	78fa      	ldrb	r2, [r7, #3]
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	4613      	mov	r3, r2
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	1a9b      	subs	r3, r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	334d      	adds	r3, #77	@ 0x4d
 800559e:	2207      	movs	r2, #7
 80055a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	78fa      	ldrb	r2, [r7, #3]
 80055a8:	4611      	mov	r1, r2
 80055aa:	4618      	mov	r0, r3
 80055ac:	f005 fbd7 	bl	800ad5e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	78fa      	ldrb	r2, [r7, #3]
 80055b6:	4611      	mov	r1, r2
 80055b8:	4618      	mov	r0, r3
 80055ba:	f004 fe2c 	bl	800a216 <USB_ReadChInterrupts>
 80055be:	4603      	mov	r3, r0
 80055c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055c8:	d112      	bne.n	80055f0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	78fa      	ldrb	r2, [r7, #3]
 80055d0:	4611      	mov	r1, r2
 80055d2:	4618      	mov	r0, r3
 80055d4:	f005 fbc3 	bl	800ad5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80055d8:	78fb      	ldrb	r3, [r7, #3]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055e4:	461a      	mov	r2, r3
 80055e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80055ea:	6093      	str	r3, [r2, #8]
 80055ec:	f000 bd75 	b.w	80060da <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	78fa      	ldrb	r2, [r7, #3]
 80055f6:	4611      	mov	r1, r2
 80055f8:	4618      	mov	r0, r3
 80055fa:	f004 fe0c 	bl	800a216 <USB_ReadChInterrupts>
 80055fe:	4603      	mov	r3, r0
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b01      	cmp	r3, #1
 8005606:	f040 8128 	bne.w	800585a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800560a:	78fb      	ldrb	r3, [r7, #3]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	4413      	add	r3, r2
 8005612:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005616:	461a      	mov	r2, r3
 8005618:	2320      	movs	r3, #32
 800561a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800561c:	78fa      	ldrb	r2, [r7, #3]
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	4613      	mov	r3, r2
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	1a9b      	subs	r3, r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	440b      	add	r3, r1
 800562a:	331b      	adds	r3, #27
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d119      	bne.n	8005666 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005632:	78fa      	ldrb	r2, [r7, #3]
 8005634:	6879      	ldr	r1, [r7, #4]
 8005636:	4613      	mov	r3, r2
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	1a9b      	subs	r3, r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	440b      	add	r3, r1
 8005640:	331b      	adds	r3, #27
 8005642:	2200      	movs	r2, #0
 8005644:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005646:	78fb      	ldrb	r3, [r7, #3]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	4413      	add	r3, r2
 800564e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	78fa      	ldrb	r2, [r7, #3]
 8005656:	0151      	lsls	r1, r2, #5
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	440a      	add	r2, r1
 800565c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005660:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005664:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	799b      	ldrb	r3, [r3, #6]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d01b      	beq.n	80056a6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800566e:	78fa      	ldrb	r2, [r7, #3]
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	4613      	mov	r3, r2
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	1a9b      	subs	r3, r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	440b      	add	r3, r1
 800567c:	3330      	adds	r3, #48	@ 0x30
 800567e:	6819      	ldr	r1, [r3, #0]
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4413      	add	r3, r2
 8005688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005692:	78fa      	ldrb	r2, [r7, #3]
 8005694:	1ac9      	subs	r1, r1, r3
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	4613      	mov	r3, r2
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	1a9b      	subs	r3, r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4403      	add	r3, r0
 80056a2:	3338      	adds	r3, #56	@ 0x38
 80056a4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80056a6:	78fa      	ldrb	r2, [r7, #3]
 80056a8:	6879      	ldr	r1, [r7, #4]
 80056aa:	4613      	mov	r3, r2
 80056ac:	011b      	lsls	r3, r3, #4
 80056ae:	1a9b      	subs	r3, r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	440b      	add	r3, r1
 80056b4:	334d      	adds	r3, #77	@ 0x4d
 80056b6:	2201      	movs	r2, #1
 80056b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80056ba:	78fa      	ldrb	r2, [r7, #3]
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	4613      	mov	r3, r2
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	1a9b      	subs	r3, r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	440b      	add	r3, r1
 80056c8:	3344      	adds	r3, #68	@ 0x44
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80056ce:	78fb      	ldrb	r3, [r7, #3]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056da:	461a      	mov	r2, r3
 80056dc:	2301      	movs	r3, #1
 80056de:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80056e0:	78fa      	ldrb	r2, [r7, #3]
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	4613      	mov	r3, r2
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	1a9b      	subs	r3, r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	440b      	add	r3, r1
 80056ee:	3326      	adds	r3, #38	@ 0x26
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00a      	beq.n	800570c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80056f6:	78fa      	ldrb	r2, [r7, #3]
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	4613      	mov	r3, r2
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	1a9b      	subs	r3, r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	440b      	add	r3, r1
 8005704:	3326      	adds	r3, #38	@ 0x26
 8005706:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005708:	2b02      	cmp	r3, #2
 800570a:	d110      	bne.n	800572e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	78fa      	ldrb	r2, [r7, #3]
 8005712:	4611      	mov	r1, r2
 8005714:	4618      	mov	r0, r3
 8005716:	f005 fb22 	bl	800ad5e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800571a:	78fb      	ldrb	r3, [r7, #3]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	4413      	add	r3, r2
 8005722:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005726:	461a      	mov	r2, r3
 8005728:	2310      	movs	r3, #16
 800572a:	6093      	str	r3, [r2, #8]
 800572c:	e03d      	b.n	80057aa <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800572e:	78fa      	ldrb	r2, [r7, #3]
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	4613      	mov	r3, r2
 8005734:	011b      	lsls	r3, r3, #4
 8005736:	1a9b      	subs	r3, r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	440b      	add	r3, r1
 800573c:	3326      	adds	r3, #38	@ 0x26
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b03      	cmp	r3, #3
 8005742:	d00a      	beq.n	800575a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005744:	78fa      	ldrb	r2, [r7, #3]
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	4613      	mov	r3, r2
 800574a:	011b      	lsls	r3, r3, #4
 800574c:	1a9b      	subs	r3, r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	440b      	add	r3, r1
 8005752:	3326      	adds	r3, #38	@ 0x26
 8005754:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005756:	2b01      	cmp	r3, #1
 8005758:	d127      	bne.n	80057aa <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800575a:	78fb      	ldrb	r3, [r7, #3]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	4413      	add	r3, r2
 8005762:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	78fa      	ldrb	r2, [r7, #3]
 800576a:	0151      	lsls	r1, r2, #5
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	440a      	add	r2, r1
 8005770:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005774:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005778:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800577a:	78fa      	ldrb	r2, [r7, #3]
 800577c:	6879      	ldr	r1, [r7, #4]
 800577e:	4613      	mov	r3, r2
 8005780:	011b      	lsls	r3, r3, #4
 8005782:	1a9b      	subs	r3, r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	440b      	add	r3, r1
 8005788:	334c      	adds	r3, #76	@ 0x4c
 800578a:	2201      	movs	r2, #1
 800578c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800578e:	78fa      	ldrb	r2, [r7, #3]
 8005790:	6879      	ldr	r1, [r7, #4]
 8005792:	4613      	mov	r3, r2
 8005794:	011b      	lsls	r3, r3, #4
 8005796:	1a9b      	subs	r3, r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	440b      	add	r3, r1
 800579c:	334c      	adds	r3, #76	@ 0x4c
 800579e:	781a      	ldrb	r2, [r3, #0]
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	4619      	mov	r1, r3
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f00c fb77 	bl	8011e98 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	799b      	ldrb	r3, [r3, #6]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d13b      	bne.n	800582a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80057b2:	78fa      	ldrb	r2, [r7, #3]
 80057b4:	6879      	ldr	r1, [r7, #4]
 80057b6:	4613      	mov	r3, r2
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	440b      	add	r3, r1
 80057c0:	3338      	adds	r3, #56	@ 0x38
 80057c2:	6819      	ldr	r1, [r3, #0]
 80057c4:	78fa      	ldrb	r2, [r7, #3]
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	4613      	mov	r3, r2
 80057ca:	011b      	lsls	r3, r3, #4
 80057cc:	1a9b      	subs	r3, r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4403      	add	r3, r0
 80057d2:	3328      	adds	r3, #40	@ 0x28
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	440b      	add	r3, r1
 80057d8:	1e59      	subs	r1, r3, #1
 80057da:	78fa      	ldrb	r2, [r7, #3]
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	4613      	mov	r3, r2
 80057e0:	011b      	lsls	r3, r3, #4
 80057e2:	1a9b      	subs	r3, r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4403      	add	r3, r0
 80057e8:	3328      	adds	r3, #40	@ 0x28
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 8470 	beq.w	80060da <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80057fa:	78fa      	ldrb	r2, [r7, #3]
 80057fc:	6879      	ldr	r1, [r7, #4]
 80057fe:	4613      	mov	r3, r2
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	1a9b      	subs	r3, r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	440b      	add	r3, r1
 8005808:	333c      	adds	r3, #60	@ 0x3c
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	78fa      	ldrb	r2, [r7, #3]
 800580e:	f083 0301 	eor.w	r3, r3, #1
 8005812:	b2d8      	uxtb	r0, r3
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	1a9b      	subs	r3, r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	333c      	adds	r3, #60	@ 0x3c
 8005822:	4602      	mov	r2, r0
 8005824:	701a      	strb	r2, [r3, #0]
 8005826:	f000 bc58 	b.w	80060da <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800582a:	78fa      	ldrb	r2, [r7, #3]
 800582c:	6879      	ldr	r1, [r7, #4]
 800582e:	4613      	mov	r3, r2
 8005830:	011b      	lsls	r3, r3, #4
 8005832:	1a9b      	subs	r3, r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	440b      	add	r3, r1
 8005838:	333c      	adds	r3, #60	@ 0x3c
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	78fa      	ldrb	r2, [r7, #3]
 800583e:	f083 0301 	eor.w	r3, r3, #1
 8005842:	b2d8      	uxtb	r0, r3
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	4613      	mov	r3, r2
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	1a9b      	subs	r3, r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	440b      	add	r3, r1
 8005850:	333c      	adds	r3, #60	@ 0x3c
 8005852:	4602      	mov	r2, r0
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	f000 bc40 	b.w	80060da <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	78fa      	ldrb	r2, [r7, #3]
 8005860:	4611      	mov	r1, r2
 8005862:	4618      	mov	r0, r3
 8005864:	f004 fcd7 	bl	800a216 <USB_ReadChInterrupts>
 8005868:	4603      	mov	r3, r0
 800586a:	f003 0320 	and.w	r3, r3, #32
 800586e:	2b20      	cmp	r3, #32
 8005870:	d131      	bne.n	80058d6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005872:	78fb      	ldrb	r3, [r7, #3]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	4413      	add	r3, r2
 800587a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800587e:	461a      	mov	r2, r3
 8005880:	2320      	movs	r3, #32
 8005882:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005884:	78fa      	ldrb	r2, [r7, #3]
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	4613      	mov	r3, r2
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	1a9b      	subs	r3, r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	440b      	add	r3, r1
 8005892:	331a      	adds	r3, #26
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b01      	cmp	r3, #1
 8005898:	f040 841f 	bne.w	80060da <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800589c:	78fa      	ldrb	r2, [r7, #3]
 800589e:	6879      	ldr	r1, [r7, #4]
 80058a0:	4613      	mov	r3, r2
 80058a2:	011b      	lsls	r3, r3, #4
 80058a4:	1a9b      	subs	r3, r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	440b      	add	r3, r1
 80058aa:	331b      	adds	r3, #27
 80058ac:	2201      	movs	r2, #1
 80058ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80058b0:	78fa      	ldrb	r2, [r7, #3]
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	4613      	mov	r3, r2
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	1a9b      	subs	r3, r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	440b      	add	r3, r1
 80058be:	334d      	adds	r3, #77	@ 0x4d
 80058c0:	2203      	movs	r2, #3
 80058c2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	78fa      	ldrb	r2, [r7, #3]
 80058ca:	4611      	mov	r1, r2
 80058cc:	4618      	mov	r0, r3
 80058ce:	f005 fa46 	bl	800ad5e <USB_HC_Halt>
 80058d2:	f000 bc02 	b.w	80060da <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	78fa      	ldrb	r2, [r7, #3]
 80058dc:	4611      	mov	r1, r2
 80058de:	4618      	mov	r0, r3
 80058e0:	f004 fc99 	bl	800a216 <USB_ReadChInterrupts>
 80058e4:	4603      	mov	r3, r0
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	f040 8305 	bne.w	8005efa <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80058f0:	78fb      	ldrb	r3, [r7, #3]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058fc:	461a      	mov	r2, r3
 80058fe:	2302      	movs	r3, #2
 8005900:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005902:	78fa      	ldrb	r2, [r7, #3]
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	4613      	mov	r3, r2
 8005908:	011b      	lsls	r3, r3, #4
 800590a:	1a9b      	subs	r3, r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	440b      	add	r3, r1
 8005910:	334d      	adds	r3, #77	@ 0x4d
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d114      	bne.n	8005942 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005918:	78fa      	ldrb	r2, [r7, #3]
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	4613      	mov	r3, r2
 800591e:	011b      	lsls	r3, r3, #4
 8005920:	1a9b      	subs	r3, r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	440b      	add	r3, r1
 8005926:	334d      	adds	r3, #77	@ 0x4d
 8005928:	2202      	movs	r2, #2
 800592a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800592c:	78fa      	ldrb	r2, [r7, #3]
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	4613      	mov	r3, r2
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	1a9b      	subs	r3, r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	440b      	add	r3, r1
 800593a:	334c      	adds	r3, #76	@ 0x4c
 800593c:	2201      	movs	r2, #1
 800593e:	701a      	strb	r2, [r3, #0]
 8005940:	e2cc      	b.n	8005edc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005942:	78fa      	ldrb	r2, [r7, #3]
 8005944:	6879      	ldr	r1, [r7, #4]
 8005946:	4613      	mov	r3, r2
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	440b      	add	r3, r1
 8005950:	334d      	adds	r3, #77	@ 0x4d
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	2b06      	cmp	r3, #6
 8005956:	d114      	bne.n	8005982 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005958:	78fa      	ldrb	r2, [r7, #3]
 800595a:	6879      	ldr	r1, [r7, #4]
 800595c:	4613      	mov	r3, r2
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	1a9b      	subs	r3, r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	440b      	add	r3, r1
 8005966:	334d      	adds	r3, #77	@ 0x4d
 8005968:	2202      	movs	r2, #2
 800596a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800596c:	78fa      	ldrb	r2, [r7, #3]
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	4613      	mov	r3, r2
 8005972:	011b      	lsls	r3, r3, #4
 8005974:	1a9b      	subs	r3, r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	440b      	add	r3, r1
 800597a:	334c      	adds	r3, #76	@ 0x4c
 800597c:	2205      	movs	r2, #5
 800597e:	701a      	strb	r2, [r3, #0]
 8005980:	e2ac      	b.n	8005edc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005982:	78fa      	ldrb	r2, [r7, #3]
 8005984:	6879      	ldr	r1, [r7, #4]
 8005986:	4613      	mov	r3, r2
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	1a9b      	subs	r3, r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	440b      	add	r3, r1
 8005990:	334d      	adds	r3, #77	@ 0x4d
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b07      	cmp	r3, #7
 8005996:	d00b      	beq.n	80059b0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005998:	78fa      	ldrb	r2, [r7, #3]
 800599a:	6879      	ldr	r1, [r7, #4]
 800599c:	4613      	mov	r3, r2
 800599e:	011b      	lsls	r3, r3, #4
 80059a0:	1a9b      	subs	r3, r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	440b      	add	r3, r1
 80059a6:	334d      	adds	r3, #77	@ 0x4d
 80059a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80059aa:	2b09      	cmp	r3, #9
 80059ac:	f040 80a6 	bne.w	8005afc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80059b0:	78fa      	ldrb	r2, [r7, #3]
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	4613      	mov	r3, r2
 80059b6:	011b      	lsls	r3, r3, #4
 80059b8:	1a9b      	subs	r3, r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	440b      	add	r3, r1
 80059be:	334d      	adds	r3, #77	@ 0x4d
 80059c0:	2202      	movs	r2, #2
 80059c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80059c4:	78fa      	ldrb	r2, [r7, #3]
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	4613      	mov	r3, r2
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	1a9b      	subs	r3, r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	440b      	add	r3, r1
 80059d2:	3344      	adds	r3, #68	@ 0x44
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	1c59      	adds	r1, r3, #1
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	4613      	mov	r3, r2
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	1a9b      	subs	r3, r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4403      	add	r3, r0
 80059e4:	3344      	adds	r3, #68	@ 0x44
 80059e6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80059e8:	78fa      	ldrb	r2, [r7, #3]
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	4613      	mov	r3, r2
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	1a9b      	subs	r3, r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	3344      	adds	r3, #68	@ 0x44
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d943      	bls.n	8005a86 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80059fe:	78fa      	ldrb	r2, [r7, #3]
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	4613      	mov	r3, r2
 8005a04:	011b      	lsls	r3, r3, #4
 8005a06:	1a9b      	subs	r3, r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	3344      	adds	r3, #68	@ 0x44
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8005a12:	78fa      	ldrb	r2, [r7, #3]
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	011b      	lsls	r3, r3, #4
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	331a      	adds	r3, #26
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d123      	bne.n	8005a70 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005a28:	78fa      	ldrb	r2, [r7, #3]
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	1a9b      	subs	r3, r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	440b      	add	r3, r1
 8005a36:	331b      	adds	r3, #27
 8005a38:	2200      	movs	r2, #0
 8005a3a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8005a3c:	78fa      	ldrb	r2, [r7, #3]
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	4613      	mov	r3, r2
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	1a9b      	subs	r3, r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	331c      	adds	r3, #28
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005a50:	78fb      	ldrb	r3, [r7, #3]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	78fa      	ldrb	r2, [r7, #3]
 8005a60:	0151      	lsls	r1, r2, #5
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	440a      	add	r2, r1
 8005a66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a6e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005a70:	78fa      	ldrb	r2, [r7, #3]
 8005a72:	6879      	ldr	r1, [r7, #4]
 8005a74:	4613      	mov	r3, r2
 8005a76:	011b      	lsls	r3, r3, #4
 8005a78:	1a9b      	subs	r3, r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	334c      	adds	r3, #76	@ 0x4c
 8005a80:	2204      	movs	r2, #4
 8005a82:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005a84:	e229      	b.n	8005eda <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005a86:	78fa      	ldrb	r2, [r7, #3]
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	1a9b      	subs	r3, r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	440b      	add	r3, r1
 8005a94:	334c      	adds	r3, #76	@ 0x4c
 8005a96:	2202      	movs	r2, #2
 8005a98:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005a9a:	78fa      	ldrb	r2, [r7, #3]
 8005a9c:	6879      	ldr	r1, [r7, #4]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	1a9b      	subs	r3, r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	440b      	add	r3, r1
 8005aa8:	3326      	adds	r3, #38	@ 0x26
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00b      	beq.n	8005ac8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005ab0:	78fa      	ldrb	r2, [r7, #3]
 8005ab2:	6879      	ldr	r1, [r7, #4]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	011b      	lsls	r3, r3, #4
 8005ab8:	1a9b      	subs	r3, r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	440b      	add	r3, r1
 8005abe:	3326      	adds	r3, #38	@ 0x26
 8005ac0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	f040 8209 	bne.w	8005eda <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005ac8:	78fb      	ldrb	r3, [r7, #3]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ade:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ae6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005ae8:	78fb      	ldrb	r3, [r7, #3]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005af4:	461a      	mov	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005afa:	e1ee      	b.n	8005eda <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005afc:	78fa      	ldrb	r2, [r7, #3]
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	4613      	mov	r3, r2
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	1a9b      	subs	r3, r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	440b      	add	r3, r1
 8005b0a:	334d      	adds	r3, #77	@ 0x4d
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b05      	cmp	r3, #5
 8005b10:	f040 80c8 	bne.w	8005ca4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005b14:	78fa      	ldrb	r2, [r7, #3]
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	011b      	lsls	r3, r3, #4
 8005b1c:	1a9b      	subs	r3, r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	334d      	adds	r3, #77	@ 0x4d
 8005b24:	2202      	movs	r2, #2
 8005b26:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005b28:	78fa      	ldrb	r2, [r7, #3]
 8005b2a:	6879      	ldr	r1, [r7, #4]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	011b      	lsls	r3, r3, #4
 8005b30:	1a9b      	subs	r3, r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	440b      	add	r3, r1
 8005b36:	331b      	adds	r3, #27
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	f040 81ce 	bne.w	8005edc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005b40:	78fa      	ldrb	r2, [r7, #3]
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	4613      	mov	r3, r2
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	1a9b      	subs	r3, r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	440b      	add	r3, r1
 8005b4e:	3326      	adds	r3, #38	@ 0x26
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d16b      	bne.n	8005c2e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8005b56:	78fa      	ldrb	r2, [r7, #3]
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	011b      	lsls	r3, r3, #4
 8005b5e:	1a9b      	subs	r3, r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	3348      	adds	r3, #72	@ 0x48
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	1c59      	adds	r1, r3, #1
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	1a9b      	subs	r3, r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4403      	add	r3, r0
 8005b76:	3348      	adds	r3, #72	@ 0x48
 8005b78:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8005b7a:	78fa      	ldrb	r2, [r7, #3]
 8005b7c:	6879      	ldr	r1, [r7, #4]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	011b      	lsls	r3, r3, #4
 8005b82:	1a9b      	subs	r3, r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	440b      	add	r3, r1
 8005b88:	3348      	adds	r3, #72	@ 0x48
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d943      	bls.n	8005c18 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8005b90:	78fa      	ldrb	r2, [r7, #3]
 8005b92:	6879      	ldr	r1, [r7, #4]
 8005b94:	4613      	mov	r3, r2
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	1a9b      	subs	r3, r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	440b      	add	r3, r1
 8005b9e:	3348      	adds	r3, #72	@ 0x48
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8005ba4:	78fa      	ldrb	r2, [r7, #3]
 8005ba6:	6879      	ldr	r1, [r7, #4]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	1a9b      	subs	r3, r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	440b      	add	r3, r1
 8005bb2:	331b      	adds	r3, #27
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8005bb8:	78fa      	ldrb	r2, [r7, #3]
 8005bba:	6879      	ldr	r1, [r7, #4]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	1a9b      	subs	r3, r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	3344      	adds	r3, #68	@ 0x44
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d809      	bhi.n	8005be2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8005bce:	78fa      	ldrb	r2, [r7, #3]
 8005bd0:	6879      	ldr	r1, [r7, #4]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	011b      	lsls	r3, r3, #4
 8005bd6:	1a9b      	subs	r3, r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	440b      	add	r3, r1
 8005bdc:	331c      	adds	r3, #28
 8005bde:	2201      	movs	r2, #1
 8005be0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005be2:	78fb      	ldrb	r3, [r7, #3]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	78fa      	ldrb	r2, [r7, #3]
 8005bf2:	0151      	lsls	r1, r2, #5
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	440a      	add	r2, r1
 8005bf8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c00:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8005c02:	78fa      	ldrb	r2, [r7, #3]
 8005c04:	6879      	ldr	r1, [r7, #4]
 8005c06:	4613      	mov	r3, r2
 8005c08:	011b      	lsls	r3, r3, #4
 8005c0a:	1a9b      	subs	r3, r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	440b      	add	r3, r1
 8005c10:	334c      	adds	r3, #76	@ 0x4c
 8005c12:	2204      	movs	r2, #4
 8005c14:	701a      	strb	r2, [r3, #0]
 8005c16:	e014      	b.n	8005c42 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005c18:	78fa      	ldrb	r2, [r7, #3]
 8005c1a:	6879      	ldr	r1, [r7, #4]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	1a9b      	subs	r3, r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	440b      	add	r3, r1
 8005c26:	334c      	adds	r3, #76	@ 0x4c
 8005c28:	2202      	movs	r2, #2
 8005c2a:	701a      	strb	r2, [r3, #0]
 8005c2c:	e009      	b.n	8005c42 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005c2e:	78fa      	ldrb	r2, [r7, #3]
 8005c30:	6879      	ldr	r1, [r7, #4]
 8005c32:	4613      	mov	r3, r2
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	1a9b      	subs	r3, r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	440b      	add	r3, r1
 8005c3c:	334c      	adds	r3, #76	@ 0x4c
 8005c3e:	2202      	movs	r2, #2
 8005c40:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005c42:	78fa      	ldrb	r2, [r7, #3]
 8005c44:	6879      	ldr	r1, [r7, #4]
 8005c46:	4613      	mov	r3, r2
 8005c48:	011b      	lsls	r3, r3, #4
 8005c4a:	1a9b      	subs	r3, r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	440b      	add	r3, r1
 8005c50:	3326      	adds	r3, #38	@ 0x26
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00b      	beq.n	8005c70 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005c58:	78fa      	ldrb	r2, [r7, #3]
 8005c5a:	6879      	ldr	r1, [r7, #4]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	1a9b      	subs	r3, r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	440b      	add	r3, r1
 8005c66:	3326      	adds	r3, #38	@ 0x26
 8005c68:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	f040 8136 	bne.w	8005edc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005c70:	78fb      	ldrb	r3, [r7, #3]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c86:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c8e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	e11b      	b.n	8005edc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005ca4:	78fa      	ldrb	r2, [r7, #3]
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	011b      	lsls	r3, r3, #4
 8005cac:	1a9b      	subs	r3, r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	440b      	add	r3, r1
 8005cb2:	334d      	adds	r3, #77	@ 0x4d
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	2b03      	cmp	r3, #3
 8005cb8:	f040 8081 	bne.w	8005dbe <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005cbc:	78fa      	ldrb	r2, [r7, #3]
 8005cbe:	6879      	ldr	r1, [r7, #4]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	1a9b      	subs	r3, r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	440b      	add	r3, r1
 8005cca:	334d      	adds	r3, #77	@ 0x4d
 8005ccc:	2202      	movs	r2, #2
 8005cce:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005cd0:	78fa      	ldrb	r2, [r7, #3]
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	1a9b      	subs	r3, r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	440b      	add	r3, r1
 8005cde:	331b      	adds	r3, #27
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	f040 80fa 	bne.w	8005edc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005ce8:	78fa      	ldrb	r2, [r7, #3]
 8005cea:	6879      	ldr	r1, [r7, #4]
 8005cec:	4613      	mov	r3, r2
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	1a9b      	subs	r3, r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	440b      	add	r3, r1
 8005cf6:	334c      	adds	r3, #76	@ 0x4c
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	78fa      	ldrb	r2, [r7, #3]
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d1a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005d1c:	78fb      	ldrb	r3, [r7, #3]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	78fa      	ldrb	r2, [r7, #3]
 8005d2c:	0151      	lsls	r1, r2, #5
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	440a      	add	r2, r1
 8005d32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d3a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005d3c:	78fb      	ldrb	r3, [r7, #3]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	78fa      	ldrb	r2, [r7, #3]
 8005d4c:	0151      	lsls	r1, r2, #5
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	440a      	add	r2, r1
 8005d52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d56:	f023 0320 	bic.w	r3, r3, #32
 8005d5a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d5c:	78fa      	ldrb	r2, [r7, #3]
 8005d5e:	6879      	ldr	r1, [r7, #4]
 8005d60:	4613      	mov	r3, r2
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	1a9b      	subs	r3, r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	440b      	add	r3, r1
 8005d6a:	3326      	adds	r3, #38	@ 0x26
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00b      	beq.n	8005d8a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005d72:	78fa      	ldrb	r2, [r7, #3]
 8005d74:	6879      	ldr	r1, [r7, #4]
 8005d76:	4613      	mov	r3, r2
 8005d78:	011b      	lsls	r3, r3, #4
 8005d7a:	1a9b      	subs	r3, r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	440b      	add	r3, r1
 8005d80:	3326      	adds	r3, #38	@ 0x26
 8005d82:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	f040 80a9 	bne.w	8005edc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005d8a:	78fb      	ldrb	r3, [r7, #3]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005da0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005da8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005daa:	78fb      	ldrb	r3, [r7, #3]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005db6:	461a      	mov	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	e08e      	b.n	8005edc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005dbe:	78fa      	ldrb	r2, [r7, #3]
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	011b      	lsls	r3, r3, #4
 8005dc6:	1a9b      	subs	r3, r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	440b      	add	r3, r1
 8005dcc:	334d      	adds	r3, #77	@ 0x4d
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b04      	cmp	r3, #4
 8005dd2:	d143      	bne.n	8005e5c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005dd4:	78fa      	ldrb	r2, [r7, #3]
 8005dd6:	6879      	ldr	r1, [r7, #4]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	011b      	lsls	r3, r3, #4
 8005ddc:	1a9b      	subs	r3, r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	440b      	add	r3, r1
 8005de2:	334d      	adds	r3, #77	@ 0x4d
 8005de4:	2202      	movs	r2, #2
 8005de6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005de8:	78fa      	ldrb	r2, [r7, #3]
 8005dea:	6879      	ldr	r1, [r7, #4]
 8005dec:	4613      	mov	r3, r2
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	1a9b      	subs	r3, r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	440b      	add	r3, r1
 8005df6:	334c      	adds	r3, #76	@ 0x4c
 8005df8:	2202      	movs	r2, #2
 8005dfa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005dfc:	78fa      	ldrb	r2, [r7, #3]
 8005dfe:	6879      	ldr	r1, [r7, #4]
 8005e00:	4613      	mov	r3, r2
 8005e02:	011b      	lsls	r3, r3, #4
 8005e04:	1a9b      	subs	r3, r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	440b      	add	r3, r1
 8005e0a:	3326      	adds	r3, #38	@ 0x26
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005e12:	78fa      	ldrb	r2, [r7, #3]
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	4613      	mov	r3, r2
 8005e18:	011b      	lsls	r3, r3, #4
 8005e1a:	1a9b      	subs	r3, r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	440b      	add	r3, r1
 8005e20:	3326      	adds	r3, #38	@ 0x26
 8005e22:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d159      	bne.n	8005edc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e3e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e46:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e48:	78fb      	ldrb	r3, [r7, #3]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e54:	461a      	mov	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	e03f      	b.n	8005edc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005e5c:	78fa      	ldrb	r2, [r7, #3]
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	4613      	mov	r3, r2
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	1a9b      	subs	r3, r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	440b      	add	r3, r1
 8005e6a:	334d      	adds	r3, #77	@ 0x4d
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	2b08      	cmp	r3, #8
 8005e70:	d126      	bne.n	8005ec0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005e72:	78fa      	ldrb	r2, [r7, #3]
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	4613      	mov	r3, r2
 8005e78:	011b      	lsls	r3, r3, #4
 8005e7a:	1a9b      	subs	r3, r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	440b      	add	r3, r1
 8005e80:	334d      	adds	r3, #77	@ 0x4d
 8005e82:	2202      	movs	r2, #2
 8005e84:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005e86:	78fa      	ldrb	r2, [r7, #3]
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	1a9b      	subs	r3, r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	440b      	add	r3, r1
 8005e94:	3344      	adds	r3, #68	@ 0x44
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	1c59      	adds	r1, r3, #1
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	1a9b      	subs	r3, r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4403      	add	r3, r0
 8005ea6:	3344      	adds	r3, #68	@ 0x44
 8005ea8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8005eaa:	78fa      	ldrb	r2, [r7, #3]
 8005eac:	6879      	ldr	r1, [r7, #4]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	011b      	lsls	r3, r3, #4
 8005eb2:	1a9b      	subs	r3, r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	440b      	add	r3, r1
 8005eb8:	334c      	adds	r3, #76	@ 0x4c
 8005eba:	2204      	movs	r2, #4
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	e00d      	b.n	8005edc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005ec0:	78fa      	ldrb	r2, [r7, #3]
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	334d      	adds	r3, #77	@ 0x4d
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	f000 8100 	beq.w	80060d8 <HCD_HC_IN_IRQHandler+0xcca>
 8005ed8:	e000      	b.n	8005edc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005eda:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005edc:	78fa      	ldrb	r2, [r7, #3]
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	1a9b      	subs	r3, r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	440b      	add	r3, r1
 8005eea:	334c      	adds	r3, #76	@ 0x4c
 8005eec:	781a      	ldrb	r2, [r3, #0]
 8005eee:	78fb      	ldrb	r3, [r7, #3]
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f00b ffd0 	bl	8011e98 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005ef8:	e0ef      	b.n	80060da <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	78fa      	ldrb	r2, [r7, #3]
 8005f00:	4611      	mov	r1, r2
 8005f02:	4618      	mov	r0, r3
 8005f04:	f004 f987 	bl	800a216 <USB_ReadChInterrupts>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f0e:	2b40      	cmp	r3, #64	@ 0x40
 8005f10:	d12f      	bne.n	8005f72 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005f12:	78fb      	ldrb	r3, [r7, #3]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f1e:	461a      	mov	r2, r3
 8005f20:	2340      	movs	r3, #64	@ 0x40
 8005f22:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005f24:	78fa      	ldrb	r2, [r7, #3]
 8005f26:	6879      	ldr	r1, [r7, #4]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	1a9b      	subs	r3, r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	440b      	add	r3, r1
 8005f32:	334d      	adds	r3, #77	@ 0x4d
 8005f34:	2205      	movs	r2, #5
 8005f36:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005f38:	78fa      	ldrb	r2, [r7, #3]
 8005f3a:	6879      	ldr	r1, [r7, #4]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	1a9b      	subs	r3, r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	440b      	add	r3, r1
 8005f46:	331a      	adds	r3, #26
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d109      	bne.n	8005f62 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005f4e:	78fa      	ldrb	r2, [r7, #3]
 8005f50:	6879      	ldr	r1, [r7, #4]
 8005f52:	4613      	mov	r3, r2
 8005f54:	011b      	lsls	r3, r3, #4
 8005f56:	1a9b      	subs	r3, r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	440b      	add	r3, r1
 8005f5c:	3344      	adds	r3, #68	@ 0x44
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	78fa      	ldrb	r2, [r7, #3]
 8005f68:	4611      	mov	r1, r2
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f004 fef7 	bl	800ad5e <USB_HC_Halt>
 8005f70:	e0b3      	b.n	80060da <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	78fa      	ldrb	r2, [r7, #3]
 8005f78:	4611      	mov	r1, r2
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f004 f94b 	bl	800a216 <USB_ReadChInterrupts>
 8005f80:	4603      	mov	r3, r0
 8005f82:	f003 0310 	and.w	r3, r3, #16
 8005f86:	2b10      	cmp	r3, #16
 8005f88:	f040 80a7 	bne.w	80060da <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005f8c:	78fa      	ldrb	r2, [r7, #3]
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	4613      	mov	r3, r2
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	1a9b      	subs	r3, r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	440b      	add	r3, r1
 8005f9a:	3326      	adds	r3, #38	@ 0x26
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b03      	cmp	r3, #3
 8005fa0:	d11b      	bne.n	8005fda <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005fa2:	78fa      	ldrb	r2, [r7, #3]
 8005fa4:	6879      	ldr	r1, [r7, #4]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	1a9b      	subs	r3, r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	440b      	add	r3, r1
 8005fb0:	3344      	adds	r3, #68	@ 0x44
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8005fb6:	78fa      	ldrb	r2, [r7, #3]
 8005fb8:	6879      	ldr	r1, [r7, #4]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	1a9b      	subs	r3, r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	440b      	add	r3, r1
 8005fc4:	334d      	adds	r3, #77	@ 0x4d
 8005fc6:	2204      	movs	r2, #4
 8005fc8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	78fa      	ldrb	r2, [r7, #3]
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f004 fec3 	bl	800ad5e <USB_HC_Halt>
 8005fd8:	e03f      	b.n	800605a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005fda:	78fa      	ldrb	r2, [r7, #3]
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	011b      	lsls	r3, r3, #4
 8005fe2:	1a9b      	subs	r3, r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	440b      	add	r3, r1
 8005fe8:	3326      	adds	r3, #38	@ 0x26
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00a      	beq.n	8006006 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005ff0:	78fa      	ldrb	r2, [r7, #3]
 8005ff2:	6879      	ldr	r1, [r7, #4]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	1a9b      	subs	r3, r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	440b      	add	r3, r1
 8005ffe:	3326      	adds	r3, #38	@ 0x26
 8006000:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006002:	2b02      	cmp	r3, #2
 8006004:	d129      	bne.n	800605a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006006:	78fa      	ldrb	r2, [r7, #3]
 8006008:	6879      	ldr	r1, [r7, #4]
 800600a:	4613      	mov	r3, r2
 800600c:	011b      	lsls	r3, r3, #4
 800600e:	1a9b      	subs	r3, r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	440b      	add	r3, r1
 8006014:	3344      	adds	r3, #68	@ 0x44
 8006016:	2200      	movs	r2, #0
 8006018:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	799b      	ldrb	r3, [r3, #6]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00a      	beq.n	8006038 <HCD_HC_IN_IRQHandler+0xc2a>
 8006022:	78fa      	ldrb	r2, [r7, #3]
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	4613      	mov	r3, r2
 8006028:	011b      	lsls	r3, r3, #4
 800602a:	1a9b      	subs	r3, r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	440b      	add	r3, r1
 8006030:	331b      	adds	r3, #27
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d110      	bne.n	800605a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8006038:	78fa      	ldrb	r2, [r7, #3]
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	4613      	mov	r3, r2
 800603e:	011b      	lsls	r3, r3, #4
 8006040:	1a9b      	subs	r3, r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	440b      	add	r3, r1
 8006046:	334d      	adds	r3, #77	@ 0x4d
 8006048:	2204      	movs	r2, #4
 800604a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	78fa      	ldrb	r2, [r7, #3]
 8006052:	4611      	mov	r1, r2
 8006054:	4618      	mov	r0, r3
 8006056:	f004 fe82 	bl	800ad5e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800605a:	78fa      	ldrb	r2, [r7, #3]
 800605c:	6879      	ldr	r1, [r7, #4]
 800605e:	4613      	mov	r3, r2
 8006060:	011b      	lsls	r3, r3, #4
 8006062:	1a9b      	subs	r3, r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	440b      	add	r3, r1
 8006068:	331b      	adds	r3, #27
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d129      	bne.n	80060c4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006070:	78fa      	ldrb	r2, [r7, #3]
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	4613      	mov	r3, r2
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	1a9b      	subs	r3, r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	440b      	add	r3, r1
 800607e:	331b      	adds	r3, #27
 8006080:	2200      	movs	r2, #0
 8006082:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006084:	78fb      	ldrb	r3, [r7, #3]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	4413      	add	r3, r2
 800608c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	78fa      	ldrb	r2, [r7, #3]
 8006094:	0151      	lsls	r1, r2, #5
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	440a      	add	r2, r1
 800609a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800609e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060a2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80060a4:	78fb      	ldrb	r3, [r7, #3]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	78fa      	ldrb	r2, [r7, #3]
 80060b4:	0151      	lsls	r1, r2, #5
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	440a      	add	r2, r1
 80060ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060be:	f043 0320 	orr.w	r3, r3, #32
 80060c2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060d0:	461a      	mov	r2, r3
 80060d2:	2310      	movs	r3, #16
 80060d4:	6093      	str	r3, [r2, #8]
 80060d6:	e000      	b.n	80060da <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80060d8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	78fa      	ldrb	r2, [r7, #3]
 80060fc:	4611      	mov	r1, r2
 80060fe:	4618      	mov	r0, r3
 8006100:	f004 f889 	bl	800a216 <USB_ReadChInterrupts>
 8006104:	4603      	mov	r3, r0
 8006106:	f003 0304 	and.w	r3, r3, #4
 800610a:	2b04      	cmp	r3, #4
 800610c:	d11b      	bne.n	8006146 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	4413      	add	r3, r2
 8006116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800611a:	461a      	mov	r2, r3
 800611c:	2304      	movs	r3, #4
 800611e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006120:	78fa      	ldrb	r2, [r7, #3]
 8006122:	6879      	ldr	r1, [r7, #4]
 8006124:	4613      	mov	r3, r2
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	1a9b      	subs	r3, r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	440b      	add	r3, r1
 800612e:	334d      	adds	r3, #77	@ 0x4d
 8006130:	2207      	movs	r2, #7
 8006132:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	78fa      	ldrb	r2, [r7, #3]
 800613a:	4611      	mov	r1, r2
 800613c:	4618      	mov	r0, r3
 800613e:	f004 fe0e 	bl	800ad5e <USB_HC_Halt>
 8006142:	f000 bc6f 	b.w	8006a24 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	78fa      	ldrb	r2, [r7, #3]
 800614c:	4611      	mov	r1, r2
 800614e:	4618      	mov	r0, r3
 8006150:	f004 f861 	bl	800a216 <USB_ReadChInterrupts>
 8006154:	4603      	mov	r3, r0
 8006156:	f003 0320 	and.w	r3, r3, #32
 800615a:	2b20      	cmp	r3, #32
 800615c:	f040 8082 	bne.w	8006264 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006160:	78fb      	ldrb	r3, [r7, #3]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	4413      	add	r3, r2
 8006168:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800616c:	461a      	mov	r2, r3
 800616e:	2320      	movs	r3, #32
 8006170:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8006172:	78fa      	ldrb	r2, [r7, #3]
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	4613      	mov	r3, r2
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	1a9b      	subs	r3, r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	440b      	add	r3, r1
 8006180:	3319      	adds	r3, #25
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d124      	bne.n	80061d2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8006188:	78fa      	ldrb	r2, [r7, #3]
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	4613      	mov	r3, r2
 800618e:	011b      	lsls	r3, r3, #4
 8006190:	1a9b      	subs	r3, r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	440b      	add	r3, r1
 8006196:	3319      	adds	r3, #25
 8006198:	2200      	movs	r2, #0
 800619a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800619c:	78fa      	ldrb	r2, [r7, #3]
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	4613      	mov	r3, r2
 80061a2:	011b      	lsls	r3, r3, #4
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	440b      	add	r3, r1
 80061aa:	334c      	adds	r3, #76	@ 0x4c
 80061ac:	2202      	movs	r2, #2
 80061ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80061b0:	78fa      	ldrb	r2, [r7, #3]
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	4613      	mov	r3, r2
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	1a9b      	subs	r3, r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	440b      	add	r3, r1
 80061be:	334d      	adds	r3, #77	@ 0x4d
 80061c0:	2203      	movs	r2, #3
 80061c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	78fa      	ldrb	r2, [r7, #3]
 80061ca:	4611      	mov	r1, r2
 80061cc:	4618      	mov	r0, r3
 80061ce:	f004 fdc6 	bl	800ad5e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80061d2:	78fa      	ldrb	r2, [r7, #3]
 80061d4:	6879      	ldr	r1, [r7, #4]
 80061d6:	4613      	mov	r3, r2
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	1a9b      	subs	r3, r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	440b      	add	r3, r1
 80061e0:	331a      	adds	r3, #26
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	f040 841d 	bne.w	8006a24 <HCD_HC_OUT_IRQHandler+0x944>
 80061ea:	78fa      	ldrb	r2, [r7, #3]
 80061ec:	6879      	ldr	r1, [r7, #4]
 80061ee:	4613      	mov	r3, r2
 80061f0:	011b      	lsls	r3, r3, #4
 80061f2:	1a9b      	subs	r3, r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	440b      	add	r3, r1
 80061f8:	331b      	adds	r3, #27
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f040 8411 	bne.w	8006a24 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8006202:	78fa      	ldrb	r2, [r7, #3]
 8006204:	6879      	ldr	r1, [r7, #4]
 8006206:	4613      	mov	r3, r2
 8006208:	011b      	lsls	r3, r3, #4
 800620a:	1a9b      	subs	r3, r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	440b      	add	r3, r1
 8006210:	3326      	adds	r3, #38	@ 0x26
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d009      	beq.n	800622c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8006218:	78fa      	ldrb	r2, [r7, #3]
 800621a:	6879      	ldr	r1, [r7, #4]
 800621c:	4613      	mov	r3, r2
 800621e:	011b      	lsls	r3, r3, #4
 8006220:	1a9b      	subs	r3, r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	440b      	add	r3, r1
 8006226:	331b      	adds	r3, #27
 8006228:	2201      	movs	r2, #1
 800622a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800622c:	78fa      	ldrb	r2, [r7, #3]
 800622e:	6879      	ldr	r1, [r7, #4]
 8006230:	4613      	mov	r3, r2
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	1a9b      	subs	r3, r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	440b      	add	r3, r1
 800623a:	334d      	adds	r3, #77	@ 0x4d
 800623c:	2203      	movs	r2, #3
 800623e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	78fa      	ldrb	r2, [r7, #3]
 8006246:	4611      	mov	r1, r2
 8006248:	4618      	mov	r0, r3
 800624a:	f004 fd88 	bl	800ad5e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800624e:	78fa      	ldrb	r2, [r7, #3]
 8006250:	6879      	ldr	r1, [r7, #4]
 8006252:	4613      	mov	r3, r2
 8006254:	011b      	lsls	r3, r3, #4
 8006256:	1a9b      	subs	r3, r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	440b      	add	r3, r1
 800625c:	3344      	adds	r3, #68	@ 0x44
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	e3df      	b.n	8006a24 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	78fa      	ldrb	r2, [r7, #3]
 800626a:	4611      	mov	r1, r2
 800626c:	4618      	mov	r0, r3
 800626e:	f003 ffd2 	bl	800a216 <USB_ReadChInterrupts>
 8006272:	4603      	mov	r3, r0
 8006274:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800627c:	d111      	bne.n	80062a2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	4413      	add	r3, r2
 8006286:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800628a:	461a      	mov	r2, r3
 800628c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006290:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	78fa      	ldrb	r2, [r7, #3]
 8006298:	4611      	mov	r1, r2
 800629a:	4618      	mov	r0, r3
 800629c:	f004 fd5f 	bl	800ad5e <USB_HC_Halt>
 80062a0:	e3c0      	b.n	8006a24 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	78fa      	ldrb	r2, [r7, #3]
 80062a8:	4611      	mov	r1, r2
 80062aa:	4618      	mov	r0, r3
 80062ac:	f003 ffb3 	bl	800a216 <USB_ReadChInterrupts>
 80062b0:	4603      	mov	r3, r0
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d168      	bne.n	800638c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80062ba:	78fa      	ldrb	r2, [r7, #3]
 80062bc:	6879      	ldr	r1, [r7, #4]
 80062be:	4613      	mov	r3, r2
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	1a9b      	subs	r3, r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	440b      	add	r3, r1
 80062c8:	3344      	adds	r3, #68	@ 0x44
 80062ca:	2200      	movs	r2, #0
 80062cc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	78fa      	ldrb	r2, [r7, #3]
 80062d4:	4611      	mov	r1, r2
 80062d6:	4618      	mov	r0, r3
 80062d8:	f003 ff9d 	bl	800a216 <USB_ReadChInterrupts>
 80062dc:	4603      	mov	r3, r0
 80062de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e2:	2b40      	cmp	r3, #64	@ 0x40
 80062e4:	d112      	bne.n	800630c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80062e6:	78fa      	ldrb	r2, [r7, #3]
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	4613      	mov	r3, r2
 80062ec:	011b      	lsls	r3, r3, #4
 80062ee:	1a9b      	subs	r3, r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	440b      	add	r3, r1
 80062f4:	3319      	adds	r3, #25
 80062f6:	2201      	movs	r2, #1
 80062f8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80062fa:	78fb      	ldrb	r3, [r7, #3]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	4413      	add	r3, r2
 8006302:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006306:	461a      	mov	r2, r3
 8006308:	2340      	movs	r3, #64	@ 0x40
 800630a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800630c:	78fa      	ldrb	r2, [r7, #3]
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	4613      	mov	r3, r2
 8006312:	011b      	lsls	r3, r3, #4
 8006314:	1a9b      	subs	r3, r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	440b      	add	r3, r1
 800631a:	331b      	adds	r3, #27
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d019      	beq.n	8006356 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006322:	78fa      	ldrb	r2, [r7, #3]
 8006324:	6879      	ldr	r1, [r7, #4]
 8006326:	4613      	mov	r3, r2
 8006328:	011b      	lsls	r3, r3, #4
 800632a:	1a9b      	subs	r3, r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	440b      	add	r3, r1
 8006330:	331b      	adds	r3, #27
 8006332:	2200      	movs	r2, #0
 8006334:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006336:	78fb      	ldrb	r3, [r7, #3]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	4413      	add	r3, r2
 800633e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	78fa      	ldrb	r2, [r7, #3]
 8006346:	0151      	lsls	r1, r2, #5
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	440a      	add	r2, r1
 800634c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006350:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006354:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8006356:	78fb      	ldrb	r3, [r7, #3]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	4413      	add	r3, r2
 800635e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006362:	461a      	mov	r2, r3
 8006364:	2301      	movs	r3, #1
 8006366:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8006368:	78fa      	ldrb	r2, [r7, #3]
 800636a:	6879      	ldr	r1, [r7, #4]
 800636c:	4613      	mov	r3, r2
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	1a9b      	subs	r3, r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	440b      	add	r3, r1
 8006376:	334d      	adds	r3, #77	@ 0x4d
 8006378:	2201      	movs	r2, #1
 800637a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	78fa      	ldrb	r2, [r7, #3]
 8006382:	4611      	mov	r1, r2
 8006384:	4618      	mov	r0, r3
 8006386:	f004 fcea 	bl	800ad5e <USB_HC_Halt>
 800638a:	e34b      	b.n	8006a24 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	78fa      	ldrb	r2, [r7, #3]
 8006392:	4611      	mov	r1, r2
 8006394:	4618      	mov	r0, r3
 8006396:	f003 ff3e 	bl	800a216 <USB_ReadChInterrupts>
 800639a:	4603      	mov	r3, r0
 800639c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a0:	2b40      	cmp	r3, #64	@ 0x40
 80063a2:	d139      	bne.n	8006418 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80063a4:	78fa      	ldrb	r2, [r7, #3]
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	4613      	mov	r3, r2
 80063aa:	011b      	lsls	r3, r3, #4
 80063ac:	1a9b      	subs	r3, r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	440b      	add	r3, r1
 80063b2:	334d      	adds	r3, #77	@ 0x4d
 80063b4:	2205      	movs	r2, #5
 80063b6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80063b8:	78fa      	ldrb	r2, [r7, #3]
 80063ba:	6879      	ldr	r1, [r7, #4]
 80063bc:	4613      	mov	r3, r2
 80063be:	011b      	lsls	r3, r3, #4
 80063c0:	1a9b      	subs	r3, r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	440b      	add	r3, r1
 80063c6:	331a      	adds	r3, #26
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d109      	bne.n	80063e2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80063ce:	78fa      	ldrb	r2, [r7, #3]
 80063d0:	6879      	ldr	r1, [r7, #4]
 80063d2:	4613      	mov	r3, r2
 80063d4:	011b      	lsls	r3, r3, #4
 80063d6:	1a9b      	subs	r3, r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	440b      	add	r3, r1
 80063dc:	3319      	adds	r3, #25
 80063de:	2201      	movs	r2, #1
 80063e0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80063e2:	78fa      	ldrb	r2, [r7, #3]
 80063e4:	6879      	ldr	r1, [r7, #4]
 80063e6:	4613      	mov	r3, r2
 80063e8:	011b      	lsls	r3, r3, #4
 80063ea:	1a9b      	subs	r3, r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	440b      	add	r3, r1
 80063f0:	3344      	adds	r3, #68	@ 0x44
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	78fa      	ldrb	r2, [r7, #3]
 80063fc:	4611      	mov	r1, r2
 80063fe:	4618      	mov	r0, r3
 8006400:	f004 fcad 	bl	800ad5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	4413      	add	r3, r2
 800640c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006410:	461a      	mov	r2, r3
 8006412:	2340      	movs	r3, #64	@ 0x40
 8006414:	6093      	str	r3, [r2, #8]
 8006416:	e305      	b.n	8006a24 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	78fa      	ldrb	r2, [r7, #3]
 800641e:	4611      	mov	r1, r2
 8006420:	4618      	mov	r0, r3
 8006422:	f003 fef8 	bl	800a216 <USB_ReadChInterrupts>
 8006426:	4603      	mov	r3, r0
 8006428:	f003 0308 	and.w	r3, r3, #8
 800642c:	2b08      	cmp	r3, #8
 800642e:	d11a      	bne.n	8006466 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	4413      	add	r3, r2
 8006438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800643c:	461a      	mov	r2, r3
 800643e:	2308      	movs	r3, #8
 8006440:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006442:	78fa      	ldrb	r2, [r7, #3]
 8006444:	6879      	ldr	r1, [r7, #4]
 8006446:	4613      	mov	r3, r2
 8006448:	011b      	lsls	r3, r3, #4
 800644a:	1a9b      	subs	r3, r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	440b      	add	r3, r1
 8006450:	334d      	adds	r3, #77	@ 0x4d
 8006452:	2206      	movs	r2, #6
 8006454:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	78fa      	ldrb	r2, [r7, #3]
 800645c:	4611      	mov	r1, r2
 800645e:	4618      	mov	r0, r3
 8006460:	f004 fc7d 	bl	800ad5e <USB_HC_Halt>
 8006464:	e2de      	b.n	8006a24 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	78fa      	ldrb	r2, [r7, #3]
 800646c:	4611      	mov	r1, r2
 800646e:	4618      	mov	r0, r3
 8006470:	f003 fed1 	bl	800a216 <USB_ReadChInterrupts>
 8006474:	4603      	mov	r3, r0
 8006476:	f003 0310 	and.w	r3, r3, #16
 800647a:	2b10      	cmp	r3, #16
 800647c:	d144      	bne.n	8006508 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800647e:	78fa      	ldrb	r2, [r7, #3]
 8006480:	6879      	ldr	r1, [r7, #4]
 8006482:	4613      	mov	r3, r2
 8006484:	011b      	lsls	r3, r3, #4
 8006486:	1a9b      	subs	r3, r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	440b      	add	r3, r1
 800648c:	3344      	adds	r3, #68	@ 0x44
 800648e:	2200      	movs	r2, #0
 8006490:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8006492:	78fa      	ldrb	r2, [r7, #3]
 8006494:	6879      	ldr	r1, [r7, #4]
 8006496:	4613      	mov	r3, r2
 8006498:	011b      	lsls	r3, r3, #4
 800649a:	1a9b      	subs	r3, r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	440b      	add	r3, r1
 80064a0:	334d      	adds	r3, #77	@ 0x4d
 80064a2:	2204      	movs	r2, #4
 80064a4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80064a6:	78fa      	ldrb	r2, [r7, #3]
 80064a8:	6879      	ldr	r1, [r7, #4]
 80064aa:	4613      	mov	r3, r2
 80064ac:	011b      	lsls	r3, r3, #4
 80064ae:	1a9b      	subs	r3, r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	440b      	add	r3, r1
 80064b4:	3319      	adds	r3, #25
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d114      	bne.n	80064e6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80064bc:	78fa      	ldrb	r2, [r7, #3]
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	4613      	mov	r3, r2
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	1a9b      	subs	r3, r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	440b      	add	r3, r1
 80064ca:	3318      	adds	r3, #24
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d109      	bne.n	80064e6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80064d2:	78fa      	ldrb	r2, [r7, #3]
 80064d4:	6879      	ldr	r1, [r7, #4]
 80064d6:	4613      	mov	r3, r2
 80064d8:	011b      	lsls	r3, r3, #4
 80064da:	1a9b      	subs	r3, r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	440b      	add	r3, r1
 80064e0:	3319      	adds	r3, #25
 80064e2:	2201      	movs	r2, #1
 80064e4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	78fa      	ldrb	r2, [r7, #3]
 80064ec:	4611      	mov	r1, r2
 80064ee:	4618      	mov	r0, r3
 80064f0:	f004 fc35 	bl	800ad5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80064f4:	78fb      	ldrb	r3, [r7, #3]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006500:	461a      	mov	r2, r3
 8006502:	2310      	movs	r3, #16
 8006504:	6093      	str	r3, [r2, #8]
 8006506:	e28d      	b.n	8006a24 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	78fa      	ldrb	r2, [r7, #3]
 800650e:	4611      	mov	r1, r2
 8006510:	4618      	mov	r0, r3
 8006512:	f003 fe80 	bl	800a216 <USB_ReadChInterrupts>
 8006516:	4603      	mov	r3, r0
 8006518:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800651c:	2b80      	cmp	r3, #128	@ 0x80
 800651e:	d169      	bne.n	80065f4 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	799b      	ldrb	r3, [r3, #6]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d111      	bne.n	800654c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8006528:	78fa      	ldrb	r2, [r7, #3]
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	4613      	mov	r3, r2
 800652e:	011b      	lsls	r3, r3, #4
 8006530:	1a9b      	subs	r3, r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	440b      	add	r3, r1
 8006536:	334d      	adds	r3, #77	@ 0x4d
 8006538:	2207      	movs	r2, #7
 800653a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	78fa      	ldrb	r2, [r7, #3]
 8006542:	4611      	mov	r1, r2
 8006544:	4618      	mov	r0, r3
 8006546:	f004 fc0a 	bl	800ad5e <USB_HC_Halt>
 800654a:	e049      	b.n	80065e0 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800654c:	78fa      	ldrb	r2, [r7, #3]
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	4613      	mov	r3, r2
 8006552:	011b      	lsls	r3, r3, #4
 8006554:	1a9b      	subs	r3, r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	440b      	add	r3, r1
 800655a:	3344      	adds	r3, #68	@ 0x44
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	1c59      	adds	r1, r3, #1
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	4613      	mov	r3, r2
 8006564:	011b      	lsls	r3, r3, #4
 8006566:	1a9b      	subs	r3, r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4403      	add	r3, r0
 800656c:	3344      	adds	r3, #68	@ 0x44
 800656e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006570:	78fa      	ldrb	r2, [r7, #3]
 8006572:	6879      	ldr	r1, [r7, #4]
 8006574:	4613      	mov	r3, r2
 8006576:	011b      	lsls	r3, r3, #4
 8006578:	1a9b      	subs	r3, r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	440b      	add	r3, r1
 800657e:	3344      	adds	r3, #68	@ 0x44
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d922      	bls.n	80065cc <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006586:	78fa      	ldrb	r2, [r7, #3]
 8006588:	6879      	ldr	r1, [r7, #4]
 800658a:	4613      	mov	r3, r2
 800658c:	011b      	lsls	r3, r3, #4
 800658e:	1a9b      	subs	r3, r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	440b      	add	r3, r1
 8006594:	3344      	adds	r3, #68	@ 0x44
 8006596:	2200      	movs	r2, #0
 8006598:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800659a:	78fa      	ldrb	r2, [r7, #3]
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	4613      	mov	r3, r2
 80065a0:	011b      	lsls	r3, r3, #4
 80065a2:	1a9b      	subs	r3, r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	440b      	add	r3, r1
 80065a8:	334c      	adds	r3, #76	@ 0x4c
 80065aa:	2204      	movs	r2, #4
 80065ac:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80065ae:	78fa      	ldrb	r2, [r7, #3]
 80065b0:	6879      	ldr	r1, [r7, #4]
 80065b2:	4613      	mov	r3, r2
 80065b4:	011b      	lsls	r3, r3, #4
 80065b6:	1a9b      	subs	r3, r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	440b      	add	r3, r1
 80065bc:	334c      	adds	r3, #76	@ 0x4c
 80065be:	781a      	ldrb	r2, [r3, #0]
 80065c0:	78fb      	ldrb	r3, [r7, #3]
 80065c2:	4619      	mov	r1, r3
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f00b fc67 	bl	8011e98 <HAL_HCD_HC_NotifyURBChange_Callback>
 80065ca:	e009      	b.n	80065e0 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80065cc:	78fa      	ldrb	r2, [r7, #3]
 80065ce:	6879      	ldr	r1, [r7, #4]
 80065d0:	4613      	mov	r3, r2
 80065d2:	011b      	lsls	r3, r3, #4
 80065d4:	1a9b      	subs	r3, r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	440b      	add	r3, r1
 80065da:	334c      	adds	r3, #76	@ 0x4c
 80065dc:	2202      	movs	r2, #2
 80065de:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065ec:	461a      	mov	r2, r3
 80065ee:	2380      	movs	r3, #128	@ 0x80
 80065f0:	6093      	str	r3, [r2, #8]
 80065f2:	e217      	b.n	8006a24 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	78fa      	ldrb	r2, [r7, #3]
 80065fa:	4611      	mov	r1, r2
 80065fc:	4618      	mov	r0, r3
 80065fe:	f003 fe0a 	bl	800a216 <USB_ReadChInterrupts>
 8006602:	4603      	mov	r3, r0
 8006604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800660c:	d11b      	bne.n	8006646 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800660e:	78fa      	ldrb	r2, [r7, #3]
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	4613      	mov	r3, r2
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	1a9b      	subs	r3, r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	440b      	add	r3, r1
 800661c:	334d      	adds	r3, #77	@ 0x4d
 800661e:	2209      	movs	r2, #9
 8006620:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	78fa      	ldrb	r2, [r7, #3]
 8006628:	4611      	mov	r1, r2
 800662a:	4618      	mov	r0, r3
 800662c:	f004 fb97 	bl	800ad5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	4413      	add	r3, r2
 8006638:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800663c:	461a      	mov	r2, r3
 800663e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006642:	6093      	str	r3, [r2, #8]
 8006644:	e1ee      	b.n	8006a24 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	78fa      	ldrb	r2, [r7, #3]
 800664c:	4611      	mov	r1, r2
 800664e:	4618      	mov	r0, r3
 8006650:	f003 fde1 	bl	800a216 <USB_ReadChInterrupts>
 8006654:	4603      	mov	r3, r0
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b02      	cmp	r3, #2
 800665c:	f040 81df 	bne.w	8006a1e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006660:	78fb      	ldrb	r3, [r7, #3]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	4413      	add	r3, r2
 8006668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800666c:	461a      	mov	r2, r3
 800666e:	2302      	movs	r3, #2
 8006670:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006672:	78fa      	ldrb	r2, [r7, #3]
 8006674:	6879      	ldr	r1, [r7, #4]
 8006676:	4613      	mov	r3, r2
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	1a9b      	subs	r3, r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	440b      	add	r3, r1
 8006680:	334d      	adds	r3, #77	@ 0x4d
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b01      	cmp	r3, #1
 8006686:	f040 8093 	bne.w	80067b0 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800668a:	78fa      	ldrb	r2, [r7, #3]
 800668c:	6879      	ldr	r1, [r7, #4]
 800668e:	4613      	mov	r3, r2
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	1a9b      	subs	r3, r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	440b      	add	r3, r1
 8006698:	334d      	adds	r3, #77	@ 0x4d
 800669a:	2202      	movs	r2, #2
 800669c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800669e:	78fa      	ldrb	r2, [r7, #3]
 80066a0:	6879      	ldr	r1, [r7, #4]
 80066a2:	4613      	mov	r3, r2
 80066a4:	011b      	lsls	r3, r3, #4
 80066a6:	1a9b      	subs	r3, r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	440b      	add	r3, r1
 80066ac:	334c      	adds	r3, #76	@ 0x4c
 80066ae:	2201      	movs	r2, #1
 80066b0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80066b2:	78fa      	ldrb	r2, [r7, #3]
 80066b4:	6879      	ldr	r1, [r7, #4]
 80066b6:	4613      	mov	r3, r2
 80066b8:	011b      	lsls	r3, r3, #4
 80066ba:	1a9b      	subs	r3, r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	440b      	add	r3, r1
 80066c0:	3326      	adds	r3, #38	@ 0x26
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d00b      	beq.n	80066e0 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80066c8:	78fa      	ldrb	r2, [r7, #3]
 80066ca:	6879      	ldr	r1, [r7, #4]
 80066cc:	4613      	mov	r3, r2
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	1a9b      	subs	r3, r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	440b      	add	r3, r1
 80066d6:	3326      	adds	r3, #38	@ 0x26
 80066d8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80066da:	2b03      	cmp	r3, #3
 80066dc:	f040 8190 	bne.w	8006a00 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	799b      	ldrb	r3, [r3, #6]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d115      	bne.n	8006714 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80066e8:	78fa      	ldrb	r2, [r7, #3]
 80066ea:	6879      	ldr	r1, [r7, #4]
 80066ec:	4613      	mov	r3, r2
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	1a9b      	subs	r3, r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	440b      	add	r3, r1
 80066f6:	333d      	adds	r3, #61	@ 0x3d
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	78fa      	ldrb	r2, [r7, #3]
 80066fc:	f083 0301 	eor.w	r3, r3, #1
 8006700:	b2d8      	uxtb	r0, r3
 8006702:	6879      	ldr	r1, [r7, #4]
 8006704:	4613      	mov	r3, r2
 8006706:	011b      	lsls	r3, r3, #4
 8006708:	1a9b      	subs	r3, r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	440b      	add	r3, r1
 800670e:	333d      	adds	r3, #61	@ 0x3d
 8006710:	4602      	mov	r2, r0
 8006712:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	799b      	ldrb	r3, [r3, #6]
 8006718:	2b01      	cmp	r3, #1
 800671a:	f040 8171 	bne.w	8006a00 <HCD_HC_OUT_IRQHandler+0x920>
 800671e:	78fa      	ldrb	r2, [r7, #3]
 8006720:	6879      	ldr	r1, [r7, #4]
 8006722:	4613      	mov	r3, r2
 8006724:	011b      	lsls	r3, r3, #4
 8006726:	1a9b      	subs	r3, r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	440b      	add	r3, r1
 800672c:	3334      	adds	r3, #52	@ 0x34
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 8165 	beq.w	8006a00 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8006736:	78fa      	ldrb	r2, [r7, #3]
 8006738:	6879      	ldr	r1, [r7, #4]
 800673a:	4613      	mov	r3, r2
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	1a9b      	subs	r3, r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	440b      	add	r3, r1
 8006744:	3334      	adds	r3, #52	@ 0x34
 8006746:	6819      	ldr	r1, [r3, #0]
 8006748:	78fa      	ldrb	r2, [r7, #3]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	4613      	mov	r3, r2
 800674e:	011b      	lsls	r3, r3, #4
 8006750:	1a9b      	subs	r3, r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4403      	add	r3, r0
 8006756:	3328      	adds	r3, #40	@ 0x28
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	440b      	add	r3, r1
 800675c:	1e59      	subs	r1, r3, #1
 800675e:	78fa      	ldrb	r2, [r7, #3]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	4613      	mov	r3, r2
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	1a9b      	subs	r3, r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4403      	add	r3, r0
 800676c:	3328      	adds	r3, #40	@ 0x28
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	fbb1 f3f3 	udiv	r3, r1, r3
 8006774:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 813f 	beq.w	8006a00 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006782:	78fa      	ldrb	r2, [r7, #3]
 8006784:	6879      	ldr	r1, [r7, #4]
 8006786:	4613      	mov	r3, r2
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	1a9b      	subs	r3, r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	440b      	add	r3, r1
 8006790:	333d      	adds	r3, #61	@ 0x3d
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	78fa      	ldrb	r2, [r7, #3]
 8006796:	f083 0301 	eor.w	r3, r3, #1
 800679a:	b2d8      	uxtb	r0, r3
 800679c:	6879      	ldr	r1, [r7, #4]
 800679e:	4613      	mov	r3, r2
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	1a9b      	subs	r3, r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	440b      	add	r3, r1
 80067a8:	333d      	adds	r3, #61	@ 0x3d
 80067aa:	4602      	mov	r2, r0
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	e127      	b.n	8006a00 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80067b0:	78fa      	ldrb	r2, [r7, #3]
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	4613      	mov	r3, r2
 80067b6:	011b      	lsls	r3, r3, #4
 80067b8:	1a9b      	subs	r3, r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	440b      	add	r3, r1
 80067be:	334d      	adds	r3, #77	@ 0x4d
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	2b03      	cmp	r3, #3
 80067c4:	d120      	bne.n	8006808 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80067c6:	78fa      	ldrb	r2, [r7, #3]
 80067c8:	6879      	ldr	r1, [r7, #4]
 80067ca:	4613      	mov	r3, r2
 80067cc:	011b      	lsls	r3, r3, #4
 80067ce:	1a9b      	subs	r3, r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	440b      	add	r3, r1
 80067d4:	334d      	adds	r3, #77	@ 0x4d
 80067d6:	2202      	movs	r2, #2
 80067d8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80067da:	78fa      	ldrb	r2, [r7, #3]
 80067dc:	6879      	ldr	r1, [r7, #4]
 80067de:	4613      	mov	r3, r2
 80067e0:	011b      	lsls	r3, r3, #4
 80067e2:	1a9b      	subs	r3, r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	440b      	add	r3, r1
 80067e8:	331b      	adds	r3, #27
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	f040 8107 	bne.w	8006a00 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80067f2:	78fa      	ldrb	r2, [r7, #3]
 80067f4:	6879      	ldr	r1, [r7, #4]
 80067f6:	4613      	mov	r3, r2
 80067f8:	011b      	lsls	r3, r3, #4
 80067fa:	1a9b      	subs	r3, r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	440b      	add	r3, r1
 8006800:	334c      	adds	r3, #76	@ 0x4c
 8006802:	2202      	movs	r2, #2
 8006804:	701a      	strb	r2, [r3, #0]
 8006806:	e0fb      	b.n	8006a00 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006808:	78fa      	ldrb	r2, [r7, #3]
 800680a:	6879      	ldr	r1, [r7, #4]
 800680c:	4613      	mov	r3, r2
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	1a9b      	subs	r3, r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	440b      	add	r3, r1
 8006816:	334d      	adds	r3, #77	@ 0x4d
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	2b04      	cmp	r3, #4
 800681c:	d13a      	bne.n	8006894 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800681e:	78fa      	ldrb	r2, [r7, #3]
 8006820:	6879      	ldr	r1, [r7, #4]
 8006822:	4613      	mov	r3, r2
 8006824:	011b      	lsls	r3, r3, #4
 8006826:	1a9b      	subs	r3, r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	440b      	add	r3, r1
 800682c:	334d      	adds	r3, #77	@ 0x4d
 800682e:	2202      	movs	r2, #2
 8006830:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006832:	78fa      	ldrb	r2, [r7, #3]
 8006834:	6879      	ldr	r1, [r7, #4]
 8006836:	4613      	mov	r3, r2
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	1a9b      	subs	r3, r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	440b      	add	r3, r1
 8006840:	334c      	adds	r3, #76	@ 0x4c
 8006842:	2202      	movs	r2, #2
 8006844:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006846:	78fa      	ldrb	r2, [r7, #3]
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	4613      	mov	r3, r2
 800684c:	011b      	lsls	r3, r3, #4
 800684e:	1a9b      	subs	r3, r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	440b      	add	r3, r1
 8006854:	331b      	adds	r3, #27
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	2b01      	cmp	r3, #1
 800685a:	f040 80d1 	bne.w	8006a00 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800685e:	78fa      	ldrb	r2, [r7, #3]
 8006860:	6879      	ldr	r1, [r7, #4]
 8006862:	4613      	mov	r3, r2
 8006864:	011b      	lsls	r3, r3, #4
 8006866:	1a9b      	subs	r3, r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	440b      	add	r3, r1
 800686c:	331b      	adds	r3, #27
 800686e:	2200      	movs	r2, #0
 8006870:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006872:	78fb      	ldrb	r3, [r7, #3]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	4413      	add	r3, r2
 800687a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	78fa      	ldrb	r2, [r7, #3]
 8006882:	0151      	lsls	r1, r2, #5
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	440a      	add	r2, r1
 8006888:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800688c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006890:	6053      	str	r3, [r2, #4]
 8006892:	e0b5      	b.n	8006a00 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006894:	78fa      	ldrb	r2, [r7, #3]
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	4613      	mov	r3, r2
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	1a9b      	subs	r3, r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	440b      	add	r3, r1
 80068a2:	334d      	adds	r3, #77	@ 0x4d
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	2b05      	cmp	r3, #5
 80068a8:	d114      	bne.n	80068d4 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80068aa:	78fa      	ldrb	r2, [r7, #3]
 80068ac:	6879      	ldr	r1, [r7, #4]
 80068ae:	4613      	mov	r3, r2
 80068b0:	011b      	lsls	r3, r3, #4
 80068b2:	1a9b      	subs	r3, r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	440b      	add	r3, r1
 80068b8:	334d      	adds	r3, #77	@ 0x4d
 80068ba:	2202      	movs	r2, #2
 80068bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80068be:	78fa      	ldrb	r2, [r7, #3]
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	4613      	mov	r3, r2
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	1a9b      	subs	r3, r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	440b      	add	r3, r1
 80068cc:	334c      	adds	r3, #76	@ 0x4c
 80068ce:	2202      	movs	r2, #2
 80068d0:	701a      	strb	r2, [r3, #0]
 80068d2:	e095      	b.n	8006a00 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80068d4:	78fa      	ldrb	r2, [r7, #3]
 80068d6:	6879      	ldr	r1, [r7, #4]
 80068d8:	4613      	mov	r3, r2
 80068da:	011b      	lsls	r3, r3, #4
 80068dc:	1a9b      	subs	r3, r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	440b      	add	r3, r1
 80068e2:	334d      	adds	r3, #77	@ 0x4d
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	2b06      	cmp	r3, #6
 80068e8:	d114      	bne.n	8006914 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80068ea:	78fa      	ldrb	r2, [r7, #3]
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	4613      	mov	r3, r2
 80068f0:	011b      	lsls	r3, r3, #4
 80068f2:	1a9b      	subs	r3, r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	440b      	add	r3, r1
 80068f8:	334d      	adds	r3, #77	@ 0x4d
 80068fa:	2202      	movs	r2, #2
 80068fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80068fe:	78fa      	ldrb	r2, [r7, #3]
 8006900:	6879      	ldr	r1, [r7, #4]
 8006902:	4613      	mov	r3, r2
 8006904:	011b      	lsls	r3, r3, #4
 8006906:	1a9b      	subs	r3, r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	440b      	add	r3, r1
 800690c:	334c      	adds	r3, #76	@ 0x4c
 800690e:	2205      	movs	r2, #5
 8006910:	701a      	strb	r2, [r3, #0]
 8006912:	e075      	b.n	8006a00 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006914:	78fa      	ldrb	r2, [r7, #3]
 8006916:	6879      	ldr	r1, [r7, #4]
 8006918:	4613      	mov	r3, r2
 800691a:	011b      	lsls	r3, r3, #4
 800691c:	1a9b      	subs	r3, r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	440b      	add	r3, r1
 8006922:	334d      	adds	r3, #77	@ 0x4d
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	2b07      	cmp	r3, #7
 8006928:	d00a      	beq.n	8006940 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800692a:	78fa      	ldrb	r2, [r7, #3]
 800692c:	6879      	ldr	r1, [r7, #4]
 800692e:	4613      	mov	r3, r2
 8006930:	011b      	lsls	r3, r3, #4
 8006932:	1a9b      	subs	r3, r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	440b      	add	r3, r1
 8006938:	334d      	adds	r3, #77	@ 0x4d
 800693a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800693c:	2b09      	cmp	r3, #9
 800693e:	d170      	bne.n	8006a22 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006940:	78fa      	ldrb	r2, [r7, #3]
 8006942:	6879      	ldr	r1, [r7, #4]
 8006944:	4613      	mov	r3, r2
 8006946:	011b      	lsls	r3, r3, #4
 8006948:	1a9b      	subs	r3, r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	440b      	add	r3, r1
 800694e:	334d      	adds	r3, #77	@ 0x4d
 8006950:	2202      	movs	r2, #2
 8006952:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006954:	78fa      	ldrb	r2, [r7, #3]
 8006956:	6879      	ldr	r1, [r7, #4]
 8006958:	4613      	mov	r3, r2
 800695a:	011b      	lsls	r3, r3, #4
 800695c:	1a9b      	subs	r3, r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	440b      	add	r3, r1
 8006962:	3344      	adds	r3, #68	@ 0x44
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	1c59      	adds	r1, r3, #1
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	4613      	mov	r3, r2
 800696c:	011b      	lsls	r3, r3, #4
 800696e:	1a9b      	subs	r3, r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4403      	add	r3, r0
 8006974:	3344      	adds	r3, #68	@ 0x44
 8006976:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006978:	78fa      	ldrb	r2, [r7, #3]
 800697a:	6879      	ldr	r1, [r7, #4]
 800697c:	4613      	mov	r3, r2
 800697e:	011b      	lsls	r3, r3, #4
 8006980:	1a9b      	subs	r3, r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	440b      	add	r3, r1
 8006986:	3344      	adds	r3, #68	@ 0x44
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b02      	cmp	r3, #2
 800698c:	d914      	bls.n	80069b8 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800698e:	78fa      	ldrb	r2, [r7, #3]
 8006990:	6879      	ldr	r1, [r7, #4]
 8006992:	4613      	mov	r3, r2
 8006994:	011b      	lsls	r3, r3, #4
 8006996:	1a9b      	subs	r3, r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	440b      	add	r3, r1
 800699c:	3344      	adds	r3, #68	@ 0x44
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80069a2:	78fa      	ldrb	r2, [r7, #3]
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	4613      	mov	r3, r2
 80069a8:	011b      	lsls	r3, r3, #4
 80069aa:	1a9b      	subs	r3, r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	440b      	add	r3, r1
 80069b0:	334c      	adds	r3, #76	@ 0x4c
 80069b2:	2204      	movs	r2, #4
 80069b4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80069b6:	e022      	b.n	80069fe <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80069b8:	78fa      	ldrb	r2, [r7, #3]
 80069ba:	6879      	ldr	r1, [r7, #4]
 80069bc:	4613      	mov	r3, r2
 80069be:	011b      	lsls	r3, r3, #4
 80069c0:	1a9b      	subs	r3, r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	440b      	add	r3, r1
 80069c6:	334c      	adds	r3, #76	@ 0x4c
 80069c8:	2202      	movs	r2, #2
 80069ca:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80069cc:	78fb      	ldrb	r3, [r7, #3]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80069e2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069ea:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80069ec:	78fb      	ldrb	r3, [r7, #3]
 80069ee:	015a      	lsls	r2, r3, #5
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	4413      	add	r3, r2
 80069f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069f8:	461a      	mov	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80069fe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006a00:	78fa      	ldrb	r2, [r7, #3]
 8006a02:	6879      	ldr	r1, [r7, #4]
 8006a04:	4613      	mov	r3, r2
 8006a06:	011b      	lsls	r3, r3, #4
 8006a08:	1a9b      	subs	r3, r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	440b      	add	r3, r1
 8006a0e:	334c      	adds	r3, #76	@ 0x4c
 8006a10:	781a      	ldrb	r2, [r3, #0]
 8006a12:	78fb      	ldrb	r3, [r7, #3]
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f00b fa3e 	bl	8011e98 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006a1c:	e002      	b.n	8006a24 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8006a1e:	bf00      	nop
 8006a20:	e000      	b.n	8006a24 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8006a22:	bf00      	nop
  }
}
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b08a      	sub	sp, #40	@ 0x28
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	f003 030f 	and.w	r3, r3, #15
 8006a4a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	0c5b      	lsrs	r3, r3, #17
 8006a50:	f003 030f 	and.w	r3, r3, #15
 8006a54:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	091b      	lsrs	r3, r3, #4
 8006a5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a5e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d004      	beq.n	8006a70 <HCD_RXQLVL_IRQHandler+0x46>
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	2b05      	cmp	r3, #5
 8006a6a:	f000 80b6 	beq.w	8006bda <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006a6e:	e0b7      	b.n	8006be0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 80b3 	beq.w	8006bde <HCD_RXQLVL_IRQHandler+0x1b4>
 8006a78:	6879      	ldr	r1, [r7, #4]
 8006a7a:	69ba      	ldr	r2, [r7, #24]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	011b      	lsls	r3, r3, #4
 8006a80:	1a9b      	subs	r3, r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	440b      	add	r3, r1
 8006a86:	332c      	adds	r3, #44	@ 0x2c
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 80a7 	beq.w	8006bde <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006a90:	6879      	ldr	r1, [r7, #4]
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	4613      	mov	r3, r2
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	1a9b      	subs	r3, r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	440b      	add	r3, r1
 8006a9e:	3338      	adds	r3, #56	@ 0x38
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	18d1      	adds	r1, r2, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	011b      	lsls	r3, r3, #4
 8006aae:	1a9b      	subs	r3, r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4403      	add	r3, r0
 8006ab4:	3334      	adds	r3, #52	@ 0x34
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4299      	cmp	r1, r3
 8006aba:	f200 8083 	bhi.w	8006bc4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6818      	ldr	r0, [r3, #0]
 8006ac2:	6879      	ldr	r1, [r7, #4]
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	011b      	lsls	r3, r3, #4
 8006aca:	1a9b      	subs	r3, r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	440b      	add	r3, r1
 8006ad0:	332c      	adds	r3, #44	@ 0x2c
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	b292      	uxth	r2, r2
 8006ad8:	4619      	mov	r1, r3
 8006ada:	f003 fb31 	bl	800a140 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	011b      	lsls	r3, r3, #4
 8006ae6:	1a9b      	subs	r3, r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	440b      	add	r3, r1
 8006aec:	332c      	adds	r3, #44	@ 0x2c
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	18d1      	adds	r1, r2, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	69ba      	ldr	r2, [r7, #24]
 8006af8:	4613      	mov	r3, r2
 8006afa:	011b      	lsls	r3, r3, #4
 8006afc:	1a9b      	subs	r3, r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4403      	add	r3, r0
 8006b02:	332c      	adds	r3, #44	@ 0x2c
 8006b04:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8006b06:	6879      	ldr	r1, [r7, #4]
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	011b      	lsls	r3, r3, #4
 8006b0e:	1a9b      	subs	r3, r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	440b      	add	r3, r1
 8006b14:	3338      	adds	r3, #56	@ 0x38
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	18d1      	adds	r1, r2, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	4613      	mov	r3, r2
 8006b22:	011b      	lsls	r3, r3, #4
 8006b24:	1a9b      	subs	r3, r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4403      	add	r3, r0
 8006b2a:	3338      	adds	r3, #56	@ 0x38
 8006b2c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	6a3b      	ldr	r3, [r7, #32]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	0cdb      	lsrs	r3, r3, #19
 8006b3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b42:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006b44:	6879      	ldr	r1, [r7, #4]
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	011b      	lsls	r3, r3, #4
 8006b4c:	1a9b      	subs	r3, r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	440b      	add	r3, r1
 8006b52:	3328      	adds	r3, #40	@ 0x28
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	461a      	mov	r2, r3
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d13f      	bne.n	8006bde <HCD_RXQLVL_IRQHandler+0x1b4>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d03c      	beq.n	8006bde <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006b7a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b82:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b90:	461a      	mov	r2, r3
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	69ba      	ldr	r2, [r7, #24]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	011b      	lsls	r3, r3, #4
 8006b9e:	1a9b      	subs	r3, r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	440b      	add	r3, r1
 8006ba4:	333c      	adds	r3, #60	@ 0x3c
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	f083 0301 	eor.w	r3, r3, #1
 8006bac:	b2d8      	uxtb	r0, r3
 8006bae:	6879      	ldr	r1, [r7, #4]
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	011b      	lsls	r3, r3, #4
 8006bb6:	1a9b      	subs	r3, r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	440b      	add	r3, r1
 8006bbc:	333c      	adds	r3, #60	@ 0x3c
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	701a      	strb	r2, [r3, #0]
      break;
 8006bc2:	e00c      	b.n	8006bde <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8006bc4:	6879      	ldr	r1, [r7, #4]
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	011b      	lsls	r3, r3, #4
 8006bcc:	1a9b      	subs	r3, r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	440b      	add	r3, r1
 8006bd2:	334c      	adds	r3, #76	@ 0x4c
 8006bd4:	2204      	movs	r2, #4
 8006bd6:	701a      	strb	r2, [r3, #0]
      break;
 8006bd8:	e001      	b.n	8006bde <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8006bda:	bf00      	nop
 8006bdc:	e000      	b.n	8006be0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8006bde:	bf00      	nop
  }
}
 8006be0:	bf00      	nop
 8006be2:	3728      	adds	r7, #40	@ 0x28
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006c14:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d10b      	bne.n	8006c38 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d102      	bne.n	8006c30 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f00b f918 	bl	8011e60 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f043 0302 	orr.w	r3, r3, #2
 8006c36:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f003 0308 	and.w	r3, r3, #8
 8006c3e:	2b08      	cmp	r3, #8
 8006c40:	d132      	bne.n	8006ca8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	f043 0308 	orr.w	r3, r3, #8
 8006c48:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	d126      	bne.n	8006ca2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	7a5b      	ldrb	r3, [r3, #9]
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d113      	bne.n	8006c84 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8006c62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c66:	d106      	bne.n	8006c76 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2102      	movs	r1, #2
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f003 fbf6 	bl	800a460 <USB_InitFSLSPClkSel>
 8006c74:	e011      	b.n	8006c9a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2101      	movs	r1, #1
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f003 fbef 	bl	800a460 <USB_InitFSLSPClkSel>
 8006c82:	e00a      	b.n	8006c9a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	79db      	ldrb	r3, [r3, #7]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d106      	bne.n	8006c9a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c92:	461a      	mov	r2, r3
 8006c94:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8006c98:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f00b f90e 	bl	8011ebc <HAL_HCD_PortEnabled_Callback>
 8006ca0:	e002      	b.n	8006ca8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f00b f918 	bl	8011ed8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f003 0320 	and.w	r3, r3, #32
 8006cae:	2b20      	cmp	r3, #32
 8006cb0:	d103      	bne.n	8006cba <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	f043 0320 	orr.w	r3, r3, #32
 8006cb8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	6013      	str	r3, [r2, #0]
}
 8006cc6:	bf00      	nop
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e12b      	b.n	8006f3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d106      	bne.n	8006cfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7fc ff1c 	bl	8003b34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2224      	movs	r2, #36	@ 0x24
 8006d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 0201 	bic.w	r2, r2, #1
 8006d12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006d34:	f001 fa20 	bl	8008178 <HAL_RCC_GetPCLK1Freq>
 8006d38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	4a81      	ldr	r2, [pc, #516]	@ (8006f44 <HAL_I2C_Init+0x274>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d807      	bhi.n	8006d54 <HAL_I2C_Init+0x84>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4a80      	ldr	r2, [pc, #512]	@ (8006f48 <HAL_I2C_Init+0x278>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	bf94      	ite	ls
 8006d4c:	2301      	movls	r3, #1
 8006d4e:	2300      	movhi	r3, #0
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	e006      	b.n	8006d62 <HAL_I2C_Init+0x92>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4a7d      	ldr	r2, [pc, #500]	@ (8006f4c <HAL_I2C_Init+0x27c>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	bf94      	ite	ls
 8006d5c:	2301      	movls	r3, #1
 8006d5e:	2300      	movhi	r3, #0
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e0e7      	b.n	8006f3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	4a78      	ldr	r2, [pc, #480]	@ (8006f50 <HAL_I2C_Init+0x280>)
 8006d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d72:	0c9b      	lsrs	r3, r3, #18
 8006d74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	4a6a      	ldr	r2, [pc, #424]	@ (8006f44 <HAL_I2C_Init+0x274>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d802      	bhi.n	8006da4 <HAL_I2C_Init+0xd4>
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	3301      	adds	r3, #1
 8006da2:	e009      	b.n	8006db8 <HAL_I2C_Init+0xe8>
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006daa:	fb02 f303 	mul.w	r3, r2, r3
 8006dae:	4a69      	ldr	r2, [pc, #420]	@ (8006f54 <HAL_I2C_Init+0x284>)
 8006db0:	fba2 2303 	umull	r2, r3, r2, r3
 8006db4:	099b      	lsrs	r3, r3, #6
 8006db6:	3301      	adds	r3, #1
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	6812      	ldr	r2, [r2, #0]
 8006dbc:	430b      	orrs	r3, r1
 8006dbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006dca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	495c      	ldr	r1, [pc, #368]	@ (8006f44 <HAL_I2C_Init+0x274>)
 8006dd4:	428b      	cmp	r3, r1
 8006dd6:	d819      	bhi.n	8006e0c <HAL_I2C_Init+0x13c>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	1e59      	subs	r1, r3, #1
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006de6:	1c59      	adds	r1, r3, #1
 8006de8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006dec:	400b      	ands	r3, r1
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <HAL_I2C_Init+0x138>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	1e59      	subs	r1, r3, #1
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	005b      	lsls	r3, r3, #1
 8006dfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e00:	3301      	adds	r3, #1
 8006e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e06:	e051      	b.n	8006eac <HAL_I2C_Init+0x1dc>
 8006e08:	2304      	movs	r3, #4
 8006e0a:	e04f      	b.n	8006eac <HAL_I2C_Init+0x1dc>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d111      	bne.n	8006e38 <HAL_I2C_Init+0x168>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	1e58      	subs	r0, r3, #1
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6859      	ldr	r1, [r3, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	440b      	add	r3, r1
 8006e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e26:	3301      	adds	r3, #1
 8006e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	bf0c      	ite	eq
 8006e30:	2301      	moveq	r3, #1
 8006e32:	2300      	movne	r3, #0
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	e012      	b.n	8006e5e <HAL_I2C_Init+0x18e>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	1e58      	subs	r0, r3, #1
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6859      	ldr	r1, [r3, #4]
 8006e40:	460b      	mov	r3, r1
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	440b      	add	r3, r1
 8006e46:	0099      	lsls	r1, r3, #2
 8006e48:	440b      	add	r3, r1
 8006e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e4e:	3301      	adds	r3, #1
 8006e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	bf0c      	ite	eq
 8006e58:	2301      	moveq	r3, #1
 8006e5a:	2300      	movne	r3, #0
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d001      	beq.n	8006e66 <HAL_I2C_Init+0x196>
 8006e62:	2301      	movs	r3, #1
 8006e64:	e022      	b.n	8006eac <HAL_I2C_Init+0x1dc>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10e      	bne.n	8006e8c <HAL_I2C_Init+0x1bc>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	1e58      	subs	r0, r3, #1
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6859      	ldr	r1, [r3, #4]
 8006e76:	460b      	mov	r3, r1
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	440b      	add	r3, r1
 8006e7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e80:	3301      	adds	r3, #1
 8006e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e8a:	e00f      	b.n	8006eac <HAL_I2C_Init+0x1dc>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	1e58      	subs	r0, r3, #1
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6859      	ldr	r1, [r3, #4]
 8006e94:	460b      	mov	r3, r1
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	440b      	add	r3, r1
 8006e9a:	0099      	lsls	r1, r3, #2
 8006e9c:	440b      	add	r3, r1
 8006e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ea8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006eac:	6879      	ldr	r1, [r7, #4]
 8006eae:	6809      	ldr	r1, [r1, #0]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	69da      	ldr	r2, [r3, #28]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006eda:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	6911      	ldr	r1, [r2, #16]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	68d2      	ldr	r2, [r2, #12]
 8006ee6:	4311      	orrs	r1, r2
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	6812      	ldr	r2, [r2, #0]
 8006eec:	430b      	orrs	r3, r1
 8006eee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	695a      	ldr	r2, [r3, #20]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	431a      	orrs	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f042 0201 	orr.w	r2, r2, #1
 8006f1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2220      	movs	r2, #32
 8006f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	000186a0 	.word	0x000186a0
 8006f48:	001e847f 	.word	0x001e847f
 8006f4c:	003d08ff 	.word	0x003d08ff
 8006f50:	431bde83 	.word	0x431bde83
 8006f54:	10624dd3 	.word	0x10624dd3

08006f58 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b088      	sub	sp, #32
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e128      	b.n	80071bc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d109      	bne.n	8006f8a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a90      	ldr	r2, [pc, #576]	@ (80071c4 <HAL_I2S_Init+0x26c>)
 8006f82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7fc fe1d 	bl	8003bc4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	6812      	ldr	r2, [r2, #0]
 8006f9c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006fa0:	f023 030f 	bic.w	r3, r3, #15
 8006fa4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2202      	movs	r2, #2
 8006fac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d060      	beq.n	8007078 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d102      	bne.n	8006fc4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006fbe:	2310      	movs	r3, #16
 8006fc0:	617b      	str	r3, [r7, #20]
 8006fc2:	e001      	b.n	8006fc8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006fc4:	2320      	movs	r3, #32
 8006fc6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	2b20      	cmp	r3, #32
 8006fce:	d802      	bhi.n	8006fd6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006fd6:	2001      	movs	r0, #1
 8006fd8:	f001 fa0a 	bl	80083f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006fdc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fe6:	d125      	bne.n	8007034 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d010      	beq.n	8007012 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	461a      	mov	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	fbb2 f3f3 	udiv	r3, r2, r3
 800700c:	3305      	adds	r3, #5
 800700e:	613b      	str	r3, [r7, #16]
 8007010:	e01f      	b.n	8007052 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	00db      	lsls	r3, r3, #3
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	fbb2 f2f3 	udiv	r2, r2, r3
 800701c:	4613      	mov	r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4413      	add	r3, r2
 8007022:	005b      	lsls	r3, r3, #1
 8007024:	461a      	mov	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	fbb2 f3f3 	udiv	r3, r2, r3
 800702e:	3305      	adds	r3, #5
 8007030:	613b      	str	r3, [r7, #16]
 8007032:	e00e      	b.n	8007052 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	fbb2 f2f3 	udiv	r2, r2, r3
 800703c:	4613      	mov	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	005b      	lsls	r3, r3, #1
 8007044:	461a      	mov	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	fbb2 f3f3 	udiv	r3, r2, r3
 800704e:	3305      	adds	r3, #5
 8007050:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	4a5c      	ldr	r2, [pc, #368]	@ (80071c8 <HAL_I2S_Init+0x270>)
 8007056:	fba2 2303 	umull	r2, r3, r2, r3
 800705a:	08db      	lsrs	r3, r3, #3
 800705c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	085b      	lsrs	r3, r3, #1
 800706e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	021b      	lsls	r3, r3, #8
 8007074:	61bb      	str	r3, [r7, #24]
 8007076:	e003      	b.n	8007080 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8007078:	2302      	movs	r3, #2
 800707a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d902      	bls.n	800708c <HAL_I2S_Init+0x134>
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	2bff      	cmp	r3, #255	@ 0xff
 800708a:	d907      	bls.n	800709c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007090:	f043 0210 	orr.w	r2, r3, #16
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e08f      	b.n	80071bc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	691a      	ldr	r2, [r3, #16]
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	ea42 0103 	orr.w	r1, r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	69fa      	ldr	r2, [r7, #28]
 80070ac:	430a      	orrs	r2, r1
 80070ae:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80070ba:	f023 030f 	bic.w	r3, r3, #15
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	6851      	ldr	r1, [r2, #4]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6892      	ldr	r2, [r2, #8]
 80070c6:	4311      	orrs	r1, r2
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	68d2      	ldr	r2, [r2, #12]
 80070cc:	4311      	orrs	r1, r2
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	6992      	ldr	r2, [r2, #24]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	431a      	orrs	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070de:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d161      	bne.n	80071ac <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a38      	ldr	r2, [pc, #224]	@ (80071cc <HAL_I2S_Init+0x274>)
 80070ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a37      	ldr	r2, [pc, #220]	@ (80071d0 <HAL_I2S_Init+0x278>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d101      	bne.n	80070fc <HAL_I2S_Init+0x1a4>
 80070f8:	4b36      	ldr	r3, [pc, #216]	@ (80071d4 <HAL_I2S_Init+0x27c>)
 80070fa:	e001      	b.n	8007100 <HAL_I2S_Init+0x1a8>
 80070fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	6812      	ldr	r2, [r2, #0]
 8007106:	4932      	ldr	r1, [pc, #200]	@ (80071d0 <HAL_I2S_Init+0x278>)
 8007108:	428a      	cmp	r2, r1
 800710a:	d101      	bne.n	8007110 <HAL_I2S_Init+0x1b8>
 800710c:	4a31      	ldr	r2, [pc, #196]	@ (80071d4 <HAL_I2S_Init+0x27c>)
 800710e:	e001      	b.n	8007114 <HAL_I2S_Init+0x1bc>
 8007110:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8007114:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8007118:	f023 030f 	bic.w	r3, r3, #15
 800711c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a2b      	ldr	r2, [pc, #172]	@ (80071d0 <HAL_I2S_Init+0x278>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d101      	bne.n	800712c <HAL_I2S_Init+0x1d4>
 8007128:	4b2a      	ldr	r3, [pc, #168]	@ (80071d4 <HAL_I2S_Init+0x27c>)
 800712a:	e001      	b.n	8007130 <HAL_I2S_Init+0x1d8>
 800712c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007130:	2202      	movs	r2, #2
 8007132:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a25      	ldr	r2, [pc, #148]	@ (80071d0 <HAL_I2S_Init+0x278>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d101      	bne.n	8007142 <HAL_I2S_Init+0x1ea>
 800713e:	4b25      	ldr	r3, [pc, #148]	@ (80071d4 <HAL_I2S_Init+0x27c>)
 8007140:	e001      	b.n	8007146 <HAL_I2S_Init+0x1ee>
 8007142:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007146:	69db      	ldr	r3, [r3, #28]
 8007148:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007152:	d003      	beq.n	800715c <HAL_I2S_Init+0x204>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d103      	bne.n	8007164 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800715c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007160:	613b      	str	r3, [r7, #16]
 8007162:	e001      	b.n	8007168 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8007164:	2300      	movs	r3, #0
 8007166:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007172:	4313      	orrs	r3, r2
 8007174:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800717c:	4313      	orrs	r3, r2
 800717e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007186:	4313      	orrs	r3, r2
 8007188:	b29a      	uxth	r2, r3
 800718a:	897b      	ldrh	r3, [r7, #10]
 800718c:	4313      	orrs	r3, r2
 800718e:	b29b      	uxth	r3, r3
 8007190:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007194:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a0d      	ldr	r2, [pc, #52]	@ (80071d0 <HAL_I2S_Init+0x278>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d101      	bne.n	80071a4 <HAL_I2S_Init+0x24c>
 80071a0:	4b0c      	ldr	r3, [pc, #48]	@ (80071d4 <HAL_I2S_Init+0x27c>)
 80071a2:	e001      	b.n	80071a8 <HAL_I2S_Init+0x250>
 80071a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80071a8:	897a      	ldrh	r2, [r7, #10]
 80071aa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3720      	adds	r7, #32
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	080072cf 	.word	0x080072cf
 80071c8:	cccccccd 	.word	0xcccccccd
 80071cc:	080073e5 	.word	0x080073e5
 80071d0:	40003800 	.word	0x40003800
 80071d4:	40003400 	.word	0x40003400

080071d8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007220:	881a      	ldrh	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800722c:	1c9a      	adds	r2, r3, #2
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007236:	b29b      	uxth	r3, r3
 8007238:	3b01      	subs	r3, #1
 800723a:	b29a      	uxth	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007244:	b29b      	uxth	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10e      	bne.n	8007268 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007258:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7ff ffb8 	bl	80071d8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007268:	bf00      	nop
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007282:	b292      	uxth	r2, r2
 8007284:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728a:	1c9a      	adds	r2, r3, #2
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007294:	b29b      	uxth	r3, r3
 8007296:	3b01      	subs	r3, #1
 8007298:	b29a      	uxth	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10e      	bne.n	80072c6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80072b6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7ff ff93 	bl	80071ec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80072c6:	bf00      	nop
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b086      	sub	sp, #24
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b04      	cmp	r3, #4
 80072e8:	d13a      	bne.n	8007360 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d109      	bne.n	8007308 <I2S_IRQHandler+0x3a>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072fe:	2b40      	cmp	r3, #64	@ 0x40
 8007300:	d102      	bne.n	8007308 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7ff ffb4 	bl	8007270 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800730e:	2b40      	cmp	r3, #64	@ 0x40
 8007310:	d126      	bne.n	8007360 <I2S_IRQHandler+0x92>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f003 0320 	and.w	r3, r3, #32
 800731c:	2b20      	cmp	r3, #32
 800731e:	d11f      	bne.n	8007360 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685a      	ldr	r2, [r3, #4]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800732e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007330:	2300      	movs	r3, #0
 8007332:	613b      	str	r3, [r7, #16]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	613b      	str	r3, [r7, #16]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	613b      	str	r3, [r7, #16]
 8007344:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007352:	f043 0202 	orr.w	r2, r3, #2
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff ff50 	bl	8007200 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b03      	cmp	r3, #3
 800736a:	d136      	bne.n	80073da <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	2b02      	cmp	r3, #2
 8007374:	d109      	bne.n	800738a <I2S_IRQHandler+0xbc>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007380:	2b80      	cmp	r3, #128	@ 0x80
 8007382:	d102      	bne.n	800738a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7ff ff45 	bl	8007214 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f003 0308 	and.w	r3, r3, #8
 8007390:	2b08      	cmp	r3, #8
 8007392:	d122      	bne.n	80073da <I2S_IRQHandler+0x10c>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f003 0320 	and.w	r3, r3, #32
 800739e:	2b20      	cmp	r3, #32
 80073a0:	d11b      	bne.n	80073da <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80073b0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80073b2:	2300      	movs	r3, #0
 80073b4:	60fb      	str	r3, [r7, #12]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073cc:	f043 0204 	orr.w	r2, r3, #4
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7ff ff13 	bl	8007200 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80073da:	bf00      	nop
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
	...

080073e4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a92      	ldr	r2, [pc, #584]	@ (8007644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d101      	bne.n	8007402 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80073fe:	4b92      	ldr	r3, [pc, #584]	@ (8007648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007400:	e001      	b.n	8007406 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8007402:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a8b      	ldr	r2, [pc, #556]	@ (8007644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d101      	bne.n	8007420 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800741c:	4b8a      	ldr	r3, [pc, #552]	@ (8007648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800741e:	e001      	b.n	8007424 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007420:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007430:	d004      	beq.n	800743c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	f040 8099 	bne.w	800756e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	f003 0302 	and.w	r3, r3, #2
 8007442:	2b02      	cmp	r3, #2
 8007444:	d107      	bne.n	8007456 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f925 	bl	80076a0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b01      	cmp	r3, #1
 800745e:	d107      	bne.n	8007470 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007466:	2b00      	cmp	r3, #0
 8007468:	d002      	beq.n	8007470 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f9c8 	bl	8007800 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007476:	2b40      	cmp	r3, #64	@ 0x40
 8007478:	d13a      	bne.n	80074f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	f003 0320 	and.w	r3, r3, #32
 8007480:	2b00      	cmp	r3, #0
 8007482:	d035      	beq.n	80074f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a6e      	ldr	r2, [pc, #440]	@ (8007644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d101      	bne.n	8007492 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800748e:	4b6e      	ldr	r3, [pc, #440]	@ (8007648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007490:	e001      	b.n	8007496 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8007492:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4969      	ldr	r1, [pc, #420]	@ (8007644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800749e:	428b      	cmp	r3, r1
 80074a0:	d101      	bne.n	80074a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80074a2:	4b69      	ldr	r3, [pc, #420]	@ (8007648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80074a4:	e001      	b.n	80074aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80074a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80074aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80074ae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80074be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80074c0:	2300      	movs	r3, #0
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074e2:	f043 0202 	orr.w	r2, r3, #2
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f7ff fe88 	bl	8007200 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	f003 0308 	and.w	r3, r3, #8
 80074f6:	2b08      	cmp	r3, #8
 80074f8:	f040 80c3 	bne.w	8007682 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	f003 0320 	and.w	r3, r3, #32
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 80bd 	beq.w	8007682 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007516:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a49      	ldr	r2, [pc, #292]	@ (8007644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d101      	bne.n	8007526 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8007522:	4b49      	ldr	r3, [pc, #292]	@ (8007648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007524:	e001      	b.n	800752a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007526:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4944      	ldr	r1, [pc, #272]	@ (8007644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007532:	428b      	cmp	r3, r1
 8007534:	d101      	bne.n	800753a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007536:	4b44      	ldr	r3, [pc, #272]	@ (8007648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007538:	e001      	b.n	800753e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800753a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800753e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007542:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007544:	2300      	movs	r3, #0
 8007546:	60bb      	str	r3, [r7, #8]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	60bb      	str	r3, [r7, #8]
 8007550:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800755e:	f043 0204 	orr.w	r2, r3, #4
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7ff fe4a 	bl	8007200 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800756c:	e089      	b.n	8007682 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	f003 0302 	and.w	r3, r3, #2
 8007574:	2b02      	cmp	r3, #2
 8007576:	d107      	bne.n	8007588 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800757e:	2b00      	cmp	r3, #0
 8007580:	d002      	beq.n	8007588 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f8be 	bl	8007704 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	2b01      	cmp	r3, #1
 8007590:	d107      	bne.n	80075a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007598:	2b00      	cmp	r3, #0
 800759a:	d002      	beq.n	80075a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f8fd 	bl	800779c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075a8:	2b40      	cmp	r3, #64	@ 0x40
 80075aa:	d12f      	bne.n	800760c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	f003 0320 	and.w	r3, r3, #32
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d02a      	beq.n	800760c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80075c4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d101      	bne.n	80075d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80075d0:	4b1d      	ldr	r3, [pc, #116]	@ (8007648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80075d2:	e001      	b.n	80075d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80075d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80075d8:	685a      	ldr	r2, [r3, #4]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4919      	ldr	r1, [pc, #100]	@ (8007644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80075e0:	428b      	cmp	r3, r1
 80075e2:	d101      	bne.n	80075e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80075e4:	4b18      	ldr	r3, [pc, #96]	@ (8007648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80075e6:	e001      	b.n	80075ec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80075e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80075ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80075f0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075fe:	f043 0202 	orr.w	r2, r3, #2
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7ff fdfa 	bl	8007200 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	f003 0308 	and.w	r3, r3, #8
 8007612:	2b08      	cmp	r3, #8
 8007614:	d136      	bne.n	8007684 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	f003 0320 	and.w	r3, r3, #32
 800761c:	2b00      	cmp	r3, #0
 800761e:	d031      	beq.n	8007684 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a07      	ldr	r2, [pc, #28]	@ (8007644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d101      	bne.n	800762e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800762a:	4b07      	ldr	r3, [pc, #28]	@ (8007648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800762c:	e001      	b.n	8007632 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800762e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4902      	ldr	r1, [pc, #8]	@ (8007644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800763a:	428b      	cmp	r3, r1
 800763c:	d106      	bne.n	800764c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800763e:	4b02      	ldr	r3, [pc, #8]	@ (8007648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007640:	e006      	b.n	8007650 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8007642:	bf00      	nop
 8007644:	40003800 	.word	0x40003800
 8007648:	40003400 	.word	0x40003400
 800764c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007650:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007654:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007664:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007672:	f043 0204 	orr.w	r2, r3, #4
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7ff fdc0 	bl	8007200 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007680:	e000      	b.n	8007684 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007682:	bf00      	nop
}
 8007684:	bf00      	nop
 8007686:	3720      	adds	r7, #32
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ac:	1c99      	adds	r1, r3, #2
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	6251      	str	r1, [r2, #36]	@ 0x24
 80076b2:	881a      	ldrh	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076be:	b29b      	uxth	r3, r3
 80076c0:	3b01      	subs	r3, #1
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d113      	bne.n	80076fa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	685a      	ldr	r2, [r3, #4]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80076e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d106      	bne.n	80076fa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f7ff ffc9 	bl	800768c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80076fa:	bf00      	nop
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
	...

08007704 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007710:	1c99      	adds	r1, r3, #2
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	6251      	str	r1, [r2, #36]	@ 0x24
 8007716:	8819      	ldrh	r1, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a1d      	ldr	r2, [pc, #116]	@ (8007794 <I2SEx_TxISR_I2SExt+0x90>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d101      	bne.n	8007726 <I2SEx_TxISR_I2SExt+0x22>
 8007722:	4b1d      	ldr	r3, [pc, #116]	@ (8007798 <I2SEx_TxISR_I2SExt+0x94>)
 8007724:	e001      	b.n	800772a <I2SEx_TxISR_I2SExt+0x26>
 8007726:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800772a:	460a      	mov	r2, r1
 800772c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007732:	b29b      	uxth	r3, r3
 8007734:	3b01      	subs	r3, #1
 8007736:	b29a      	uxth	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007740:	b29b      	uxth	r3, r3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d121      	bne.n	800778a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a12      	ldr	r2, [pc, #72]	@ (8007794 <I2SEx_TxISR_I2SExt+0x90>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d101      	bne.n	8007754 <I2SEx_TxISR_I2SExt+0x50>
 8007750:	4b11      	ldr	r3, [pc, #68]	@ (8007798 <I2SEx_TxISR_I2SExt+0x94>)
 8007752:	e001      	b.n	8007758 <I2SEx_TxISR_I2SExt+0x54>
 8007754:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007758:	685a      	ldr	r2, [r3, #4]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	490d      	ldr	r1, [pc, #52]	@ (8007794 <I2SEx_TxISR_I2SExt+0x90>)
 8007760:	428b      	cmp	r3, r1
 8007762:	d101      	bne.n	8007768 <I2SEx_TxISR_I2SExt+0x64>
 8007764:	4b0c      	ldr	r3, [pc, #48]	@ (8007798 <I2SEx_TxISR_I2SExt+0x94>)
 8007766:	e001      	b.n	800776c <I2SEx_TxISR_I2SExt+0x68>
 8007768:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800776c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007770:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007776:	b29b      	uxth	r3, r3
 8007778:	2b00      	cmp	r3, #0
 800777a:	d106      	bne.n	800778a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7ff ff81 	bl	800768c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800778a:	bf00      	nop
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	40003800 	.word	0x40003800
 8007798:	40003400 	.word	0x40003400

0800779c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68d8      	ldr	r0, [r3, #12]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ae:	1c99      	adds	r1, r3, #2
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80077b4:	b282      	uxth	r2, r0
 80077b6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80077bc:	b29b      	uxth	r3, r3
 80077be:	3b01      	subs	r3, #1
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d113      	bne.n	80077f8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	685a      	ldr	r2, [r3, #4]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80077de:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d106      	bne.n	80077f8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7ff ff4a 	bl	800768c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80077f8:	bf00      	nop
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a20      	ldr	r2, [pc, #128]	@ (8007890 <I2SEx_RxISR_I2SExt+0x90>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d101      	bne.n	8007816 <I2SEx_RxISR_I2SExt+0x16>
 8007812:	4b20      	ldr	r3, [pc, #128]	@ (8007894 <I2SEx_RxISR_I2SExt+0x94>)
 8007814:	e001      	b.n	800781a <I2SEx_RxISR_I2SExt+0x1a>
 8007816:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800781a:	68d8      	ldr	r0, [r3, #12]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007820:	1c99      	adds	r1, r3, #2
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007826:	b282      	uxth	r2, r0
 8007828:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800782e:	b29b      	uxth	r3, r3
 8007830:	3b01      	subs	r3, #1
 8007832:	b29a      	uxth	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800783c:	b29b      	uxth	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d121      	bne.n	8007886 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a12      	ldr	r2, [pc, #72]	@ (8007890 <I2SEx_RxISR_I2SExt+0x90>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d101      	bne.n	8007850 <I2SEx_RxISR_I2SExt+0x50>
 800784c:	4b11      	ldr	r3, [pc, #68]	@ (8007894 <I2SEx_RxISR_I2SExt+0x94>)
 800784e:	e001      	b.n	8007854 <I2SEx_RxISR_I2SExt+0x54>
 8007850:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	490d      	ldr	r1, [pc, #52]	@ (8007890 <I2SEx_RxISR_I2SExt+0x90>)
 800785c:	428b      	cmp	r3, r1
 800785e:	d101      	bne.n	8007864 <I2SEx_RxISR_I2SExt+0x64>
 8007860:	4b0c      	ldr	r3, [pc, #48]	@ (8007894 <I2SEx_RxISR_I2SExt+0x94>)
 8007862:	e001      	b.n	8007868 <I2SEx_RxISR_I2SExt+0x68>
 8007864:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007868:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800786c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007872:	b29b      	uxth	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	d106      	bne.n	8007886 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7ff ff03 	bl	800768c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007886:	bf00      	nop
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	40003800 	.word	0x40003800
 8007894:	40003400 	.word	0x40003400

08007898 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d101      	bne.n	80078aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e267      	b.n	8007d7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d075      	beq.n	80079a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80078b6:	4b88      	ldr	r3, [pc, #544]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f003 030c 	and.w	r3, r3, #12
 80078be:	2b04      	cmp	r3, #4
 80078c0:	d00c      	beq.n	80078dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078c2:	4b85      	ldr	r3, [pc, #532]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80078ca:	2b08      	cmp	r3, #8
 80078cc:	d112      	bne.n	80078f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078ce:	4b82      	ldr	r3, [pc, #520]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078da:	d10b      	bne.n	80078f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078dc:	4b7e      	ldr	r3, [pc, #504]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d05b      	beq.n	80079a0 <HAL_RCC_OscConfig+0x108>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d157      	bne.n	80079a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e242      	b.n	8007d7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078fc:	d106      	bne.n	800790c <HAL_RCC_OscConfig+0x74>
 80078fe:	4b76      	ldr	r3, [pc, #472]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a75      	ldr	r2, [pc, #468]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 8007904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007908:	6013      	str	r3, [r2, #0]
 800790a:	e01d      	b.n	8007948 <HAL_RCC_OscConfig+0xb0>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007914:	d10c      	bne.n	8007930 <HAL_RCC_OscConfig+0x98>
 8007916:	4b70      	ldr	r3, [pc, #448]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a6f      	ldr	r2, [pc, #444]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 800791c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007920:	6013      	str	r3, [r2, #0]
 8007922:	4b6d      	ldr	r3, [pc, #436]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a6c      	ldr	r2, [pc, #432]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 8007928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800792c:	6013      	str	r3, [r2, #0]
 800792e:	e00b      	b.n	8007948 <HAL_RCC_OscConfig+0xb0>
 8007930:	4b69      	ldr	r3, [pc, #420]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a68      	ldr	r2, [pc, #416]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 8007936:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800793a:	6013      	str	r3, [r2, #0]
 800793c:	4b66      	ldr	r3, [pc, #408]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a65      	ldr	r2, [pc, #404]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 8007942:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d013      	beq.n	8007978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007950:	f7fc fcf4 	bl	800433c <HAL_GetTick>
 8007954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007956:	e008      	b.n	800796a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007958:	f7fc fcf0 	bl	800433c <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	2b64      	cmp	r3, #100	@ 0x64
 8007964:	d901      	bls.n	800796a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e207      	b.n	8007d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800796a:	4b5b      	ldr	r3, [pc, #364]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d0f0      	beq.n	8007958 <HAL_RCC_OscConfig+0xc0>
 8007976:	e014      	b.n	80079a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007978:	f7fc fce0 	bl	800433c <HAL_GetTick>
 800797c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800797e:	e008      	b.n	8007992 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007980:	f7fc fcdc 	bl	800433c <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b64      	cmp	r3, #100	@ 0x64
 800798c:	d901      	bls.n	8007992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e1f3      	b.n	8007d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007992:	4b51      	ldr	r3, [pc, #324]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1f0      	bne.n	8007980 <HAL_RCC_OscConfig+0xe8>
 800799e:	e000      	b.n	80079a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0302 	and.w	r3, r3, #2
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d063      	beq.n	8007a76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80079ae:	4b4a      	ldr	r3, [pc, #296]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f003 030c 	and.w	r3, r3, #12
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00b      	beq.n	80079d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079ba:	4b47      	ldr	r3, [pc, #284]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80079c2:	2b08      	cmp	r3, #8
 80079c4:	d11c      	bne.n	8007a00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079c6:	4b44      	ldr	r3, [pc, #272]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d116      	bne.n	8007a00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079d2:	4b41      	ldr	r3, [pc, #260]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0302 	and.w	r3, r3, #2
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d005      	beq.n	80079ea <HAL_RCC_OscConfig+0x152>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d001      	beq.n	80079ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e1c7      	b.n	8007d7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079ea:	4b3b      	ldr	r3, [pc, #236]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	4937      	ldr	r1, [pc, #220]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079fe:	e03a      	b.n	8007a76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d020      	beq.n	8007a4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a08:	4b34      	ldr	r3, [pc, #208]	@ (8007adc <HAL_RCC_OscConfig+0x244>)
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a0e:	f7fc fc95 	bl	800433c <HAL_GetTick>
 8007a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a14:	e008      	b.n	8007a28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a16:	f7fc fc91 	bl	800433c <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d901      	bls.n	8007a28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e1a8      	b.n	8007d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a28:	4b2b      	ldr	r3, [pc, #172]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d0f0      	beq.n	8007a16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a34:	4b28      	ldr	r3, [pc, #160]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	00db      	lsls	r3, r3, #3
 8007a42:	4925      	ldr	r1, [pc, #148]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	600b      	str	r3, [r1, #0]
 8007a48:	e015      	b.n	8007a76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a4a:	4b24      	ldr	r3, [pc, #144]	@ (8007adc <HAL_RCC_OscConfig+0x244>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a50:	f7fc fc74 	bl	800433c <HAL_GetTick>
 8007a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a56:	e008      	b.n	8007a6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a58:	f7fc fc70 	bl	800433c <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d901      	bls.n	8007a6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e187      	b.n	8007d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0302 	and.w	r3, r3, #2
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1f0      	bne.n	8007a58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0308 	and.w	r3, r3, #8
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d036      	beq.n	8007af0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d016      	beq.n	8007ab8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a8a:	4b15      	ldr	r3, [pc, #84]	@ (8007ae0 <HAL_RCC_OscConfig+0x248>)
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a90:	f7fc fc54 	bl	800433c <HAL_GetTick>
 8007a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a96:	e008      	b.n	8007aaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a98:	f7fc fc50 	bl	800433c <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d901      	bls.n	8007aaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e167      	b.n	8007d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8007ad8 <HAL_RCC_OscConfig+0x240>)
 8007aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007aae:	f003 0302 	and.w	r3, r3, #2
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0f0      	beq.n	8007a98 <HAL_RCC_OscConfig+0x200>
 8007ab6:	e01b      	b.n	8007af0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ab8:	4b09      	ldr	r3, [pc, #36]	@ (8007ae0 <HAL_RCC_OscConfig+0x248>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007abe:	f7fc fc3d 	bl	800433c <HAL_GetTick>
 8007ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ac4:	e00e      	b.n	8007ae4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ac6:	f7fc fc39 	bl	800433c <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d907      	bls.n	8007ae4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e150      	b.n	8007d7a <HAL_RCC_OscConfig+0x4e2>
 8007ad8:	40023800 	.word	0x40023800
 8007adc:	42470000 	.word	0x42470000
 8007ae0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ae4:	4b88      	ldr	r3, [pc, #544]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007ae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ae8:	f003 0302 	and.w	r3, r3, #2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1ea      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0304 	and.w	r3, r3, #4
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 8097 	beq.w	8007c2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007afe:	2300      	movs	r3, #0
 8007b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b02:	4b81      	ldr	r3, [pc, #516]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10f      	bne.n	8007b2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60bb      	str	r3, [r7, #8]
 8007b12:	4b7d      	ldr	r3, [pc, #500]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b16:	4a7c      	ldr	r2, [pc, #496]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b1e:	4b7a      	ldr	r3, [pc, #488]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b26:	60bb      	str	r3, [r7, #8]
 8007b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b2e:	4b77      	ldr	r3, [pc, #476]	@ (8007d0c <HAL_RCC_OscConfig+0x474>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d118      	bne.n	8007b6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b3a:	4b74      	ldr	r3, [pc, #464]	@ (8007d0c <HAL_RCC_OscConfig+0x474>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a73      	ldr	r2, [pc, #460]	@ (8007d0c <HAL_RCC_OscConfig+0x474>)
 8007b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b46:	f7fc fbf9 	bl	800433c <HAL_GetTick>
 8007b4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b4c:	e008      	b.n	8007b60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b4e:	f7fc fbf5 	bl	800433c <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d901      	bls.n	8007b60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e10c      	b.n	8007d7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b60:	4b6a      	ldr	r3, [pc, #424]	@ (8007d0c <HAL_RCC_OscConfig+0x474>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d0f0      	beq.n	8007b4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d106      	bne.n	8007b82 <HAL_RCC_OscConfig+0x2ea>
 8007b74:	4b64      	ldr	r3, [pc, #400]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b78:	4a63      	ldr	r2, [pc, #396]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007b7a:	f043 0301 	orr.w	r3, r3, #1
 8007b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b80:	e01c      	b.n	8007bbc <HAL_RCC_OscConfig+0x324>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	2b05      	cmp	r3, #5
 8007b88:	d10c      	bne.n	8007ba4 <HAL_RCC_OscConfig+0x30c>
 8007b8a:	4b5f      	ldr	r3, [pc, #380]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b8e:	4a5e      	ldr	r2, [pc, #376]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007b90:	f043 0304 	orr.w	r3, r3, #4
 8007b94:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b96:	4b5c      	ldr	r3, [pc, #368]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b9a:	4a5b      	ldr	r2, [pc, #364]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007b9c:	f043 0301 	orr.w	r3, r3, #1
 8007ba0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ba2:	e00b      	b.n	8007bbc <HAL_RCC_OscConfig+0x324>
 8007ba4:	4b58      	ldr	r3, [pc, #352]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ba8:	4a57      	ldr	r2, [pc, #348]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007baa:	f023 0301 	bic.w	r3, r3, #1
 8007bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bb0:	4b55      	ldr	r3, [pc, #340]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bb4:	4a54      	ldr	r2, [pc, #336]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007bb6:	f023 0304 	bic.w	r3, r3, #4
 8007bba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d015      	beq.n	8007bf0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bc4:	f7fc fbba 	bl	800433c <HAL_GetTick>
 8007bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bca:	e00a      	b.n	8007be2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bcc:	f7fc fbb6 	bl	800433c <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d901      	bls.n	8007be2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e0cb      	b.n	8007d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007be2:	4b49      	ldr	r3, [pc, #292]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007be6:	f003 0302 	and.w	r3, r3, #2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d0ee      	beq.n	8007bcc <HAL_RCC_OscConfig+0x334>
 8007bee:	e014      	b.n	8007c1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bf0:	f7fc fba4 	bl	800433c <HAL_GetTick>
 8007bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bf6:	e00a      	b.n	8007c0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bf8:	f7fc fba0 	bl	800433c <HAL_GetTick>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d901      	bls.n	8007c0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e0b5      	b.n	8007d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c0e:	4b3e      	ldr	r3, [pc, #248]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1ee      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d105      	bne.n	8007c2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c20:	4b39      	ldr	r3, [pc, #228]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c24:	4a38      	ldr	r2, [pc, #224]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007c26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 80a1 	beq.w	8007d78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007c36:	4b34      	ldr	r3, [pc, #208]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f003 030c 	and.w	r3, r3, #12
 8007c3e:	2b08      	cmp	r3, #8
 8007c40:	d05c      	beq.n	8007cfc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d141      	bne.n	8007cce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c4a:	4b31      	ldr	r3, [pc, #196]	@ (8007d10 <HAL_RCC_OscConfig+0x478>)
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c50:	f7fc fb74 	bl	800433c <HAL_GetTick>
 8007c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c56:	e008      	b.n	8007c6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c58:	f7fc fb70 	bl	800433c <HAL_GetTick>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d901      	bls.n	8007c6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007c66:	2303      	movs	r3, #3
 8007c68:	e087      	b.n	8007d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c6a:	4b27      	ldr	r3, [pc, #156]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1f0      	bne.n	8007c58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	69da      	ldr	r2, [r3, #28]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c84:	019b      	lsls	r3, r3, #6
 8007c86:	431a      	orrs	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c8c:	085b      	lsrs	r3, r3, #1
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	041b      	lsls	r3, r3, #16
 8007c92:	431a      	orrs	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c98:	061b      	lsls	r3, r3, #24
 8007c9a:	491b      	ldr	r1, [pc, #108]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8007d10 <HAL_RCC_OscConfig+0x478>)
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ca6:	f7fc fb49 	bl	800433c <HAL_GetTick>
 8007caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cac:	e008      	b.n	8007cc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cae:	f7fc fb45 	bl	800433c <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d901      	bls.n	8007cc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e05c      	b.n	8007d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cc0:	4b11      	ldr	r3, [pc, #68]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d0f0      	beq.n	8007cae <HAL_RCC_OscConfig+0x416>
 8007ccc:	e054      	b.n	8007d78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cce:	4b10      	ldr	r3, [pc, #64]	@ (8007d10 <HAL_RCC_OscConfig+0x478>)
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cd4:	f7fc fb32 	bl	800433c <HAL_GetTick>
 8007cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cda:	e008      	b.n	8007cee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cdc:	f7fc fb2e 	bl	800433c <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d901      	bls.n	8007cee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e045      	b.n	8007d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cee:	4b06      	ldr	r3, [pc, #24]	@ (8007d08 <HAL_RCC_OscConfig+0x470>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1f0      	bne.n	8007cdc <HAL_RCC_OscConfig+0x444>
 8007cfa:	e03d      	b.n	8007d78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d107      	bne.n	8007d14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e038      	b.n	8007d7a <HAL_RCC_OscConfig+0x4e2>
 8007d08:	40023800 	.word	0x40023800
 8007d0c:	40007000 	.word	0x40007000
 8007d10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007d14:	4b1b      	ldr	r3, [pc, #108]	@ (8007d84 <HAL_RCC_OscConfig+0x4ec>)
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d028      	beq.n	8007d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d121      	bne.n	8007d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d11a      	bne.n	8007d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007d44:	4013      	ands	r3, r2
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007d4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d111      	bne.n	8007d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d5a:	085b      	lsrs	r3, r3, #1
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d107      	bne.n	8007d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d001      	beq.n	8007d78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e000      	b.n	8007d7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	40023800 	.word	0x40023800

08007d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d101      	bne.n	8007d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e0cc      	b.n	8007f36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d9c:	4b68      	ldr	r3, [pc, #416]	@ (8007f40 <HAL_RCC_ClockConfig+0x1b8>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0307 	and.w	r3, r3, #7
 8007da4:	683a      	ldr	r2, [r7, #0]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d90c      	bls.n	8007dc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007daa:	4b65      	ldr	r3, [pc, #404]	@ (8007f40 <HAL_RCC_ClockConfig+0x1b8>)
 8007dac:	683a      	ldr	r2, [r7, #0]
 8007dae:	b2d2      	uxtb	r2, r2
 8007db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007db2:	4b63      	ldr	r3, [pc, #396]	@ (8007f40 <HAL_RCC_ClockConfig+0x1b8>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0307 	and.w	r3, r3, #7
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d001      	beq.n	8007dc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e0b8      	b.n	8007f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0302 	and.w	r3, r3, #2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d020      	beq.n	8007e12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0304 	and.w	r3, r3, #4
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d005      	beq.n	8007de8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ddc:	4b59      	ldr	r3, [pc, #356]	@ (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	4a58      	ldr	r2, [pc, #352]	@ (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007de2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007de6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0308 	and.w	r3, r3, #8
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d005      	beq.n	8007e00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007df4:	4b53      	ldr	r3, [pc, #332]	@ (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	4a52      	ldr	r2, [pc, #328]	@ (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007dfa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007dfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e00:	4b50      	ldr	r3, [pc, #320]	@ (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	494d      	ldr	r1, [pc, #308]	@ (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d044      	beq.n	8007ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d107      	bne.n	8007e36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e26:	4b47      	ldr	r3, [pc, #284]	@ (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d119      	bne.n	8007e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e07f      	b.n	8007f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d003      	beq.n	8007e46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	d107      	bne.n	8007e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e46:	4b3f      	ldr	r3, [pc, #252]	@ (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d109      	bne.n	8007e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e06f      	b.n	8007f36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e56:	4b3b      	ldr	r3, [pc, #236]	@ (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0302 	and.w	r3, r3, #2
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d101      	bne.n	8007e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e067      	b.n	8007f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e66:	4b37      	ldr	r3, [pc, #220]	@ (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	f023 0203 	bic.w	r2, r3, #3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	4934      	ldr	r1, [pc, #208]	@ (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e74:	4313      	orrs	r3, r2
 8007e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e78:	f7fc fa60 	bl	800433c <HAL_GetTick>
 8007e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e7e:	e00a      	b.n	8007e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e80:	f7fc fa5c 	bl	800433c <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d901      	bls.n	8007e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e04f      	b.n	8007f36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e96:	4b2b      	ldr	r3, [pc, #172]	@ (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f003 020c 	and.w	r2, r3, #12
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d1eb      	bne.n	8007e80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ea8:	4b25      	ldr	r3, [pc, #148]	@ (8007f40 <HAL_RCC_ClockConfig+0x1b8>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0307 	and.w	r3, r3, #7
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d20c      	bcs.n	8007ed0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eb6:	4b22      	ldr	r3, [pc, #136]	@ (8007f40 <HAL_RCC_ClockConfig+0x1b8>)
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	b2d2      	uxtb	r2, r2
 8007ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ebe:	4b20      	ldr	r3, [pc, #128]	@ (8007f40 <HAL_RCC_ClockConfig+0x1b8>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0307 	and.w	r3, r3, #7
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d001      	beq.n	8007ed0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e032      	b.n	8007f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0304 	and.w	r3, r3, #4
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d008      	beq.n	8007eee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007edc:	4b19      	ldr	r3, [pc, #100]	@ (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	4916      	ldr	r1, [pc, #88]	@ (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0308 	and.w	r3, r3, #8
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d009      	beq.n	8007f0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007efa:	4b12      	ldr	r3, [pc, #72]	@ (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	00db      	lsls	r3, r3, #3
 8007f08:	490e      	ldr	r1, [pc, #56]	@ (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f0e:	f000 f821 	bl	8007f54 <HAL_RCC_GetSysClockFreq>
 8007f12:	4602      	mov	r2, r0
 8007f14:	4b0b      	ldr	r3, [pc, #44]	@ (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	091b      	lsrs	r3, r3, #4
 8007f1a:	f003 030f 	and.w	r3, r3, #15
 8007f1e:	490a      	ldr	r1, [pc, #40]	@ (8007f48 <HAL_RCC_ClockConfig+0x1c0>)
 8007f20:	5ccb      	ldrb	r3, [r1, r3]
 8007f22:	fa22 f303 	lsr.w	r3, r2, r3
 8007f26:	4a09      	ldr	r2, [pc, #36]	@ (8007f4c <HAL_RCC_ClockConfig+0x1c4>)
 8007f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007f2a:	4b09      	ldr	r3, [pc, #36]	@ (8007f50 <HAL_RCC_ClockConfig+0x1c8>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fb ffda 	bl	8003ee8 <HAL_InitTick>

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	40023c00 	.word	0x40023c00
 8007f44:	40023800 	.word	0x40023800
 8007f48:	08018a34 	.word	0x08018a34
 8007f4c:	200001d4 	.word	0x200001d4
 8007f50:	200001d8 	.word	0x200001d8

08007f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f58:	b094      	sub	sp, #80	@ 0x50
 8007f5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f60:	2300      	movs	r3, #0
 8007f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f64:	2300      	movs	r3, #0
 8007f66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f6c:	4b79      	ldr	r3, [pc, #484]	@ (8008154 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f003 030c 	and.w	r3, r3, #12
 8007f74:	2b08      	cmp	r3, #8
 8007f76:	d00d      	beq.n	8007f94 <HAL_RCC_GetSysClockFreq+0x40>
 8007f78:	2b08      	cmp	r3, #8
 8007f7a:	f200 80e1 	bhi.w	8008140 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d002      	beq.n	8007f88 <HAL_RCC_GetSysClockFreq+0x34>
 8007f82:	2b04      	cmp	r3, #4
 8007f84:	d003      	beq.n	8007f8e <HAL_RCC_GetSysClockFreq+0x3a>
 8007f86:	e0db      	b.n	8008140 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f88:	4b73      	ldr	r3, [pc, #460]	@ (8008158 <HAL_RCC_GetSysClockFreq+0x204>)
 8007f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8007f8c:	e0db      	b.n	8008146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f8e:	4b73      	ldr	r3, [pc, #460]	@ (800815c <HAL_RCC_GetSysClockFreq+0x208>)
 8007f90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007f92:	e0d8      	b.n	8008146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f94:	4b6f      	ldr	r3, [pc, #444]	@ (8008154 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f9c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f9e:	4b6d      	ldr	r3, [pc, #436]	@ (8008154 <HAL_RCC_GetSysClockFreq+0x200>)
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d063      	beq.n	8008072 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007faa:	4b6a      	ldr	r3, [pc, #424]	@ (8008154 <HAL_RCC_GetSysClockFreq+0x200>)
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	099b      	lsrs	r3, r3, #6
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007fb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007fc6:	4622      	mov	r2, r4
 8007fc8:	462b      	mov	r3, r5
 8007fca:	f04f 0000 	mov.w	r0, #0
 8007fce:	f04f 0100 	mov.w	r1, #0
 8007fd2:	0159      	lsls	r1, r3, #5
 8007fd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fd8:	0150      	lsls	r0, r2, #5
 8007fda:	4602      	mov	r2, r0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4621      	mov	r1, r4
 8007fe0:	1a51      	subs	r1, r2, r1
 8007fe2:	6139      	str	r1, [r7, #16]
 8007fe4:	4629      	mov	r1, r5
 8007fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8007fea:	617b      	str	r3, [r7, #20]
 8007fec:	f04f 0200 	mov.w	r2, #0
 8007ff0:	f04f 0300 	mov.w	r3, #0
 8007ff4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ff8:	4659      	mov	r1, fp
 8007ffa:	018b      	lsls	r3, r1, #6
 8007ffc:	4651      	mov	r1, sl
 8007ffe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008002:	4651      	mov	r1, sl
 8008004:	018a      	lsls	r2, r1, #6
 8008006:	4651      	mov	r1, sl
 8008008:	ebb2 0801 	subs.w	r8, r2, r1
 800800c:	4659      	mov	r1, fp
 800800e:	eb63 0901 	sbc.w	r9, r3, r1
 8008012:	f04f 0200 	mov.w	r2, #0
 8008016:	f04f 0300 	mov.w	r3, #0
 800801a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800801e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008022:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008026:	4690      	mov	r8, r2
 8008028:	4699      	mov	r9, r3
 800802a:	4623      	mov	r3, r4
 800802c:	eb18 0303 	adds.w	r3, r8, r3
 8008030:	60bb      	str	r3, [r7, #8]
 8008032:	462b      	mov	r3, r5
 8008034:	eb49 0303 	adc.w	r3, r9, r3
 8008038:	60fb      	str	r3, [r7, #12]
 800803a:	f04f 0200 	mov.w	r2, #0
 800803e:	f04f 0300 	mov.w	r3, #0
 8008042:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008046:	4629      	mov	r1, r5
 8008048:	024b      	lsls	r3, r1, #9
 800804a:	4621      	mov	r1, r4
 800804c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008050:	4621      	mov	r1, r4
 8008052:	024a      	lsls	r2, r1, #9
 8008054:	4610      	mov	r0, r2
 8008056:	4619      	mov	r1, r3
 8008058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800805a:	2200      	movs	r2, #0
 800805c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800805e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008060:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008064:	f7f8 fdd0 	bl	8000c08 <__aeabi_uldivmod>
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	4613      	mov	r3, r2
 800806e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008070:	e058      	b.n	8008124 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008072:	4b38      	ldr	r3, [pc, #224]	@ (8008154 <HAL_RCC_GetSysClockFreq+0x200>)
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	099b      	lsrs	r3, r3, #6
 8008078:	2200      	movs	r2, #0
 800807a:	4618      	mov	r0, r3
 800807c:	4611      	mov	r1, r2
 800807e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008082:	623b      	str	r3, [r7, #32]
 8008084:	2300      	movs	r3, #0
 8008086:	627b      	str	r3, [r7, #36]	@ 0x24
 8008088:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800808c:	4642      	mov	r2, r8
 800808e:	464b      	mov	r3, r9
 8008090:	f04f 0000 	mov.w	r0, #0
 8008094:	f04f 0100 	mov.w	r1, #0
 8008098:	0159      	lsls	r1, r3, #5
 800809a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800809e:	0150      	lsls	r0, r2, #5
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4641      	mov	r1, r8
 80080a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80080aa:	4649      	mov	r1, r9
 80080ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80080b0:	f04f 0200 	mov.w	r2, #0
 80080b4:	f04f 0300 	mov.w	r3, #0
 80080b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80080bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80080c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80080c4:	ebb2 040a 	subs.w	r4, r2, sl
 80080c8:	eb63 050b 	sbc.w	r5, r3, fp
 80080cc:	f04f 0200 	mov.w	r2, #0
 80080d0:	f04f 0300 	mov.w	r3, #0
 80080d4:	00eb      	lsls	r3, r5, #3
 80080d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080da:	00e2      	lsls	r2, r4, #3
 80080dc:	4614      	mov	r4, r2
 80080de:	461d      	mov	r5, r3
 80080e0:	4643      	mov	r3, r8
 80080e2:	18e3      	adds	r3, r4, r3
 80080e4:	603b      	str	r3, [r7, #0]
 80080e6:	464b      	mov	r3, r9
 80080e8:	eb45 0303 	adc.w	r3, r5, r3
 80080ec:	607b      	str	r3, [r7, #4]
 80080ee:	f04f 0200 	mov.w	r2, #0
 80080f2:	f04f 0300 	mov.w	r3, #0
 80080f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80080fa:	4629      	mov	r1, r5
 80080fc:	028b      	lsls	r3, r1, #10
 80080fe:	4621      	mov	r1, r4
 8008100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008104:	4621      	mov	r1, r4
 8008106:	028a      	lsls	r2, r1, #10
 8008108:	4610      	mov	r0, r2
 800810a:	4619      	mov	r1, r3
 800810c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800810e:	2200      	movs	r2, #0
 8008110:	61bb      	str	r3, [r7, #24]
 8008112:	61fa      	str	r2, [r7, #28]
 8008114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008118:	f7f8 fd76 	bl	8000c08 <__aeabi_uldivmod>
 800811c:	4602      	mov	r2, r0
 800811e:	460b      	mov	r3, r1
 8008120:	4613      	mov	r3, r2
 8008122:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008124:	4b0b      	ldr	r3, [pc, #44]	@ (8008154 <HAL_RCC_GetSysClockFreq+0x200>)
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	0c1b      	lsrs	r3, r3, #16
 800812a:	f003 0303 	and.w	r3, r3, #3
 800812e:	3301      	adds	r3, #1
 8008130:	005b      	lsls	r3, r3, #1
 8008132:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8008134:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008138:	fbb2 f3f3 	udiv	r3, r2, r3
 800813c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800813e:	e002      	b.n	8008146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008140:	4b05      	ldr	r3, [pc, #20]	@ (8008158 <HAL_RCC_GetSysClockFreq+0x204>)
 8008142:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008148:	4618      	mov	r0, r3
 800814a:	3750      	adds	r7, #80	@ 0x50
 800814c:	46bd      	mov	sp, r7
 800814e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008152:	bf00      	nop
 8008154:	40023800 	.word	0x40023800
 8008158:	00f42400 	.word	0x00f42400
 800815c:	007a1200 	.word	0x007a1200

08008160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008160:	b480      	push	{r7}
 8008162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008164:	4b03      	ldr	r3, [pc, #12]	@ (8008174 <HAL_RCC_GetHCLKFreq+0x14>)
 8008166:	681b      	ldr	r3, [r3, #0]
}
 8008168:	4618      	mov	r0, r3
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	200001d4 	.word	0x200001d4

08008178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800817c:	f7ff fff0 	bl	8008160 <HAL_RCC_GetHCLKFreq>
 8008180:	4602      	mov	r2, r0
 8008182:	4b05      	ldr	r3, [pc, #20]	@ (8008198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	0a9b      	lsrs	r3, r3, #10
 8008188:	f003 0307 	and.w	r3, r3, #7
 800818c:	4903      	ldr	r1, [pc, #12]	@ (800819c <HAL_RCC_GetPCLK1Freq+0x24>)
 800818e:	5ccb      	ldrb	r3, [r1, r3]
 8008190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008194:	4618      	mov	r0, r3
 8008196:	bd80      	pop	{r7, pc}
 8008198:	40023800 	.word	0x40023800
 800819c:	08018a44 	.word	0x08018a44

080081a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80081a4:	f7ff ffdc 	bl	8008160 <HAL_RCC_GetHCLKFreq>
 80081a8:	4602      	mov	r2, r0
 80081aa:	4b05      	ldr	r3, [pc, #20]	@ (80081c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	0b5b      	lsrs	r3, r3, #13
 80081b0:	f003 0307 	and.w	r3, r3, #7
 80081b4:	4903      	ldr	r1, [pc, #12]	@ (80081c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081b6:	5ccb      	ldrb	r3, [r1, r3]
 80081b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081bc:	4618      	mov	r0, r3
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	40023800 	.word	0x40023800
 80081c4:	08018a44 	.word	0x08018a44

080081c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	220f      	movs	r2, #15
 80081d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80081d8:	4b12      	ldr	r3, [pc, #72]	@ (8008224 <HAL_RCC_GetClockConfig+0x5c>)
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f003 0203 	and.w	r2, r3, #3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80081e4:	4b0f      	ldr	r3, [pc, #60]	@ (8008224 <HAL_RCC_GetClockConfig+0x5c>)
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80081f0:	4b0c      	ldr	r3, [pc, #48]	@ (8008224 <HAL_RCC_GetClockConfig+0x5c>)
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80081fc:	4b09      	ldr	r3, [pc, #36]	@ (8008224 <HAL_RCC_GetClockConfig+0x5c>)
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	08db      	lsrs	r3, r3, #3
 8008202:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800820a:	4b07      	ldr	r3, [pc, #28]	@ (8008228 <HAL_RCC_GetClockConfig+0x60>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0207 	and.w	r2, r3, #7
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	601a      	str	r2, [r3, #0]
}
 8008216:	bf00      	nop
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	40023800 	.word	0x40023800
 8008228:	40023c00 	.word	0x40023c00

0800822c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008234:	2300      	movs	r3, #0
 8008236:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008238:	2300      	movs	r3, #0
 800823a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	2b00      	cmp	r3, #0
 8008246:	d105      	bne.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008250:	2b00      	cmp	r3, #0
 8008252:	d035      	beq.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008254:	4b62      	ldr	r3, [pc, #392]	@ (80083e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008256:	2200      	movs	r2, #0
 8008258:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800825a:	f7fc f86f 	bl	800433c <HAL_GetTick>
 800825e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008260:	e008      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008262:	f7fc f86b 	bl	800433c <HAL_GetTick>
 8008266:	4602      	mov	r2, r0
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	2b02      	cmp	r3, #2
 800826e:	d901      	bls.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	e0b0      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008274:	4b5b      	ldr	r3, [pc, #364]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1f0      	bne.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	019a      	lsls	r2, r3, #6
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	071b      	lsls	r3, r3, #28
 800828c:	4955      	ldr	r1, [pc, #340]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800828e:	4313      	orrs	r3, r2
 8008290:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008294:	4b52      	ldr	r3, [pc, #328]	@ (80083e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008296:	2201      	movs	r2, #1
 8008298:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800829a:	f7fc f84f 	bl	800433c <HAL_GetTick>
 800829e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80082a0:	e008      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80082a2:	f7fc f84b 	bl	800433c <HAL_GetTick>
 80082a6:	4602      	mov	r2, r0
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d901      	bls.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e090      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80082b4:	4b4b      	ldr	r3, [pc, #300]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d0f0      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0302 	and.w	r3, r3, #2
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f000 8083 	beq.w	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80082ce:	2300      	movs	r3, #0
 80082d0:	60fb      	str	r3, [r7, #12]
 80082d2:	4b44      	ldr	r3, [pc, #272]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80082d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082d6:	4a43      	ldr	r2, [pc, #268]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80082d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80082de:	4b41      	ldr	r3, [pc, #260]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80082e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082e6:	60fb      	str	r3, [r7, #12]
 80082e8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80082ea:	4b3f      	ldr	r3, [pc, #252]	@ (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a3e      	ldr	r2, [pc, #248]	@ (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80082f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80082f6:	f7fc f821 	bl	800433c <HAL_GetTick>
 80082fa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80082fc:	e008      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80082fe:	f7fc f81d 	bl	800433c <HAL_GetTick>
 8008302:	4602      	mov	r2, r0
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	2b02      	cmp	r3, #2
 800830a:	d901      	bls.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800830c:	2303      	movs	r3, #3
 800830e:	e062      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008310:	4b35      	ldr	r3, [pc, #212]	@ (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008318:	2b00      	cmp	r3, #0
 800831a:	d0f0      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800831c:	4b31      	ldr	r3, [pc, #196]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800831e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008320:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008324:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d02f      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	429a      	cmp	r2, r3
 8008338:	d028      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800833a:	4b2a      	ldr	r3, [pc, #168]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800833c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800833e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008342:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008344:	4b29      	ldr	r3, [pc, #164]	@ (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008346:	2201      	movs	r2, #1
 8008348:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800834a:	4b28      	ldr	r3, [pc, #160]	@ (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800834c:	2200      	movs	r2, #0
 800834e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008350:	4a24      	ldr	r2, [pc, #144]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008356:	4b23      	ldr	r3, [pc, #140]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	2b01      	cmp	r3, #1
 8008360:	d114      	bne.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008362:	f7fb ffeb 	bl	800433c <HAL_GetTick>
 8008366:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008368:	e00a      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800836a:	f7fb ffe7 	bl	800433c <HAL_GetTick>
 800836e:	4602      	mov	r2, r0
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008378:	4293      	cmp	r3, r2
 800837a:	d901      	bls.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	e02a      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008380:	4b18      	ldr	r3, [pc, #96]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d0ee      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008394:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008398:	d10d      	bne.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800839a:	4b12      	ldr	r3, [pc, #72]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80083aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083ae:	490d      	ldr	r1, [pc, #52]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083b0:	4313      	orrs	r3, r2
 80083b2:	608b      	str	r3, [r1, #8]
 80083b4:	e005      	b.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80083b6:	4b0b      	ldr	r3, [pc, #44]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	4a0a      	ldr	r2, [pc, #40]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083bc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80083c0:	6093      	str	r3, [r2, #8]
 80083c2:	4b08      	ldr	r3, [pc, #32]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083c4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083ce:	4905      	ldr	r1, [pc, #20]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083d0:	4313      	orrs	r3, r2
 80083d2:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3718      	adds	r7, #24
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	42470068 	.word	0x42470068
 80083e4:	40023800 	.word	0x40023800
 80083e8:	40007000 	.word	0x40007000
 80083ec:	42470e40 	.word	0x42470e40

080083f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b087      	sub	sp, #28
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80083f8:	2300      	movs	r3, #0
 80083fa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80083fc:	2300      	movs	r3, #0
 80083fe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008400:	2300      	movs	r3, #0
 8008402:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008404:	2300      	movs	r3, #0
 8008406:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b01      	cmp	r3, #1
 800840c:	d13f      	bne.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800840e:	4b24      	ldr	r3, [pc, #144]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008416:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d006      	beq.n	800842c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008424:	d12f      	bne.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008426:	4b1f      	ldr	r3, [pc, #124]	@ (80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008428:	617b      	str	r3, [r7, #20]
          break;
 800842a:	e02f      	b.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800842c:	4b1c      	ldr	r3, [pc, #112]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008434:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008438:	d108      	bne.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800843a:	4b19      	ldr	r3, [pc, #100]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008442:	4a19      	ldr	r2, [pc, #100]	@ (80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008444:	fbb2 f3f3 	udiv	r3, r2, r3
 8008448:	613b      	str	r3, [r7, #16]
 800844a:	e007      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800844c:	4b14      	ldr	r3, [pc, #80]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008454:	4a15      	ldr	r2, [pc, #84]	@ (80084ac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8008456:	fbb2 f3f3 	udiv	r3, r2, r3
 800845a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800845c:	4b10      	ldr	r3, [pc, #64]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800845e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008462:	099b      	lsrs	r3, r3, #6
 8008464:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	fb02 f303 	mul.w	r3, r2, r3
 800846e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008470:	4b0b      	ldr	r3, [pc, #44]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008472:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008476:	0f1b      	lsrs	r3, r3, #28
 8008478:	f003 0307 	and.w	r3, r3, #7
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008482:	617b      	str	r3, [r7, #20]
          break;
 8008484:	e002      	b.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008486:	2300      	movs	r3, #0
 8008488:	617b      	str	r3, [r7, #20]
          break;
 800848a:	bf00      	nop
        }
      }
      break;
 800848c:	e000      	b.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 800848e:	bf00      	nop
    }
  }
  return frequency;
 8008490:	697b      	ldr	r3, [r7, #20]
}
 8008492:	4618      	mov	r0, r3
 8008494:	371c      	adds	r7, #28
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	40023800 	.word	0x40023800
 80084a4:	00bb8000 	.word	0x00bb8000
 80084a8:	007a1200 	.word	0x007a1200
 80084ac:	00f42400 	.word	0x00f42400

080084b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d101      	bne.n	80084c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e07b      	b.n	80085ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d108      	bne.n	80084dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084d2:	d009      	beq.n	80084e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	61da      	str	r2, [r3, #28]
 80084da:	e005      	b.n	80084e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d106      	bne.n	8008508 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7fb fbde 	bl	8003cc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2202      	movs	r2, #2
 800850c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800851e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008530:	431a      	orrs	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800853a:	431a      	orrs	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	f003 0302 	and.w	r3, r3, #2
 8008544:	431a      	orrs	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	f003 0301 	and.w	r3, r3, #1
 800854e:	431a      	orrs	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008558:	431a      	orrs	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008562:	431a      	orrs	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a1b      	ldr	r3, [r3, #32]
 8008568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800856c:	ea42 0103 	orr.w	r1, r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008574:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	430a      	orrs	r2, r1
 800857e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	0c1b      	lsrs	r3, r3, #16
 8008586:	f003 0104 	and.w	r1, r3, #4
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800858e:	f003 0210 	and.w	r2, r3, #16
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	430a      	orrs	r2, r1
 8008598:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	69da      	ldr	r2, [r3, #28]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80085a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b082      	sub	sp, #8
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d101      	bne.n	80085d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e041      	b.n	8008658 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d106      	bne.n	80085ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7fb fbb3 	bl	8003d54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2202      	movs	r2, #2
 80085f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	3304      	adds	r3, #4
 80085fe:	4619      	mov	r1, r3
 8008600:	4610      	mov	r0, r2
 8008602:	f000 fa7d 	bl	8008b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2201      	movs	r2, #1
 8008632:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2201      	movs	r2, #1
 800864a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800866e:	b2db      	uxtb	r3, r3
 8008670:	2b01      	cmp	r3, #1
 8008672:	d001      	beq.n	8008678 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	e04e      	b.n	8008716 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2202      	movs	r2, #2
 800867c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68da      	ldr	r2, [r3, #12]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f042 0201 	orr.w	r2, r2, #1
 800868e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a23      	ldr	r2, [pc, #140]	@ (8008724 <HAL_TIM_Base_Start_IT+0xc4>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d022      	beq.n	80086e0 <HAL_TIM_Base_Start_IT+0x80>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086a2:	d01d      	beq.n	80086e0 <HAL_TIM_Base_Start_IT+0x80>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a1f      	ldr	r2, [pc, #124]	@ (8008728 <HAL_TIM_Base_Start_IT+0xc8>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d018      	beq.n	80086e0 <HAL_TIM_Base_Start_IT+0x80>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a1e      	ldr	r2, [pc, #120]	@ (800872c <HAL_TIM_Base_Start_IT+0xcc>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d013      	beq.n	80086e0 <HAL_TIM_Base_Start_IT+0x80>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a1c      	ldr	r2, [pc, #112]	@ (8008730 <HAL_TIM_Base_Start_IT+0xd0>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d00e      	beq.n	80086e0 <HAL_TIM_Base_Start_IT+0x80>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a1b      	ldr	r2, [pc, #108]	@ (8008734 <HAL_TIM_Base_Start_IT+0xd4>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d009      	beq.n	80086e0 <HAL_TIM_Base_Start_IT+0x80>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a19      	ldr	r2, [pc, #100]	@ (8008738 <HAL_TIM_Base_Start_IT+0xd8>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d004      	beq.n	80086e0 <HAL_TIM_Base_Start_IT+0x80>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a18      	ldr	r2, [pc, #96]	@ (800873c <HAL_TIM_Base_Start_IT+0xdc>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d111      	bne.n	8008704 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	f003 0307 	and.w	r3, r3, #7
 80086ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2b06      	cmp	r3, #6
 80086f0:	d010      	beq.n	8008714 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f042 0201 	orr.w	r2, r2, #1
 8008700:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008702:	e007      	b.n	8008714 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f042 0201 	orr.w	r2, r2, #1
 8008712:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	40010000 	.word	0x40010000
 8008728:	40000400 	.word	0x40000400
 800872c:	40000800 	.word	0x40000800
 8008730:	40000c00 	.word	0x40000c00
 8008734:	40010400 	.word	0x40010400
 8008738:	40014000 	.word	0x40014000
 800873c:	40001800 	.word	0x40001800

08008740 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	f003 0302 	and.w	r3, r3, #2
 800875e:	2b00      	cmp	r3, #0
 8008760:	d020      	beq.n	80087a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f003 0302 	and.w	r3, r3, #2
 8008768:	2b00      	cmp	r3, #0
 800876a:	d01b      	beq.n	80087a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f06f 0202 	mvn.w	r2, #2
 8008774:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	f003 0303 	and.w	r3, r3, #3
 8008786:	2b00      	cmp	r3, #0
 8008788:	d003      	beq.n	8008792 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f999 	bl	8008ac2 <HAL_TIM_IC_CaptureCallback>
 8008790:	e005      	b.n	800879e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f98b 	bl	8008aae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f99c 	bl	8008ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	f003 0304 	and.w	r3, r3, #4
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d020      	beq.n	80087f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f003 0304 	and.w	r3, r3, #4
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d01b      	beq.n	80087f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f06f 0204 	mvn.w	r2, #4
 80087c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2202      	movs	r2, #2
 80087c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d003      	beq.n	80087de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f973 	bl	8008ac2 <HAL_TIM_IC_CaptureCallback>
 80087dc:	e005      	b.n	80087ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f965 	bl	8008aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 f976 	bl	8008ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	f003 0308 	and.w	r3, r3, #8
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d020      	beq.n	800883c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f003 0308 	and.w	r3, r3, #8
 8008800:	2b00      	cmp	r3, #0
 8008802:	d01b      	beq.n	800883c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f06f 0208 	mvn.w	r2, #8
 800880c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2204      	movs	r2, #4
 8008812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	69db      	ldr	r3, [r3, #28]
 800881a:	f003 0303 	and.w	r3, r3, #3
 800881e:	2b00      	cmp	r3, #0
 8008820:	d003      	beq.n	800882a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f94d 	bl	8008ac2 <HAL_TIM_IC_CaptureCallback>
 8008828:	e005      	b.n	8008836 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f93f 	bl	8008aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 f950 	bl	8008ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	f003 0310 	and.w	r3, r3, #16
 8008842:	2b00      	cmp	r3, #0
 8008844:	d020      	beq.n	8008888 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f003 0310 	and.w	r3, r3, #16
 800884c:	2b00      	cmp	r3, #0
 800884e:	d01b      	beq.n	8008888 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f06f 0210 	mvn.w	r2, #16
 8008858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2208      	movs	r2, #8
 800885e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	69db      	ldr	r3, [r3, #28]
 8008866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f927 	bl	8008ac2 <HAL_TIM_IC_CaptureCallback>
 8008874:	e005      	b.n	8008882 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f919 	bl	8008aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f92a 	bl	8008ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00c      	beq.n	80088ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f003 0301 	and.w	r3, r3, #1
 8008898:	2b00      	cmp	r3, #0
 800889a:	d007      	beq.n	80088ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f06f 0201 	mvn.w	r2, #1
 80088a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7fb f900 	bl	8003aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00c      	beq.n	80088d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d007      	beq.n	80088d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80088c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fa68 	bl	8008da0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00c      	beq.n	80088f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d007      	beq.n	80088f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80088ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f8fb 	bl	8008aea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	f003 0320 	and.w	r3, r3, #32
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00c      	beq.n	8008918 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f003 0320 	and.w	r3, r3, #32
 8008904:	2b00      	cmp	r3, #0
 8008906:	d007      	beq.n	8008918 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f06f 0220 	mvn.w	r2, #32
 8008910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fa3a 	bl	8008d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008918:	bf00      	nop
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800892a:	2300      	movs	r3, #0
 800892c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008934:	2b01      	cmp	r3, #1
 8008936:	d101      	bne.n	800893c <HAL_TIM_ConfigClockSource+0x1c>
 8008938:	2302      	movs	r3, #2
 800893a:	e0b4      	b.n	8008aa6 <HAL_TIM_ConfigClockSource+0x186>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2202      	movs	r2, #2
 8008948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800895a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68ba      	ldr	r2, [r7, #8]
 800896a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008974:	d03e      	beq.n	80089f4 <HAL_TIM_ConfigClockSource+0xd4>
 8008976:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800897a:	f200 8087 	bhi.w	8008a8c <HAL_TIM_ConfigClockSource+0x16c>
 800897e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008982:	f000 8086 	beq.w	8008a92 <HAL_TIM_ConfigClockSource+0x172>
 8008986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800898a:	d87f      	bhi.n	8008a8c <HAL_TIM_ConfigClockSource+0x16c>
 800898c:	2b70      	cmp	r3, #112	@ 0x70
 800898e:	d01a      	beq.n	80089c6 <HAL_TIM_ConfigClockSource+0xa6>
 8008990:	2b70      	cmp	r3, #112	@ 0x70
 8008992:	d87b      	bhi.n	8008a8c <HAL_TIM_ConfigClockSource+0x16c>
 8008994:	2b60      	cmp	r3, #96	@ 0x60
 8008996:	d050      	beq.n	8008a3a <HAL_TIM_ConfigClockSource+0x11a>
 8008998:	2b60      	cmp	r3, #96	@ 0x60
 800899a:	d877      	bhi.n	8008a8c <HAL_TIM_ConfigClockSource+0x16c>
 800899c:	2b50      	cmp	r3, #80	@ 0x50
 800899e:	d03c      	beq.n	8008a1a <HAL_TIM_ConfigClockSource+0xfa>
 80089a0:	2b50      	cmp	r3, #80	@ 0x50
 80089a2:	d873      	bhi.n	8008a8c <HAL_TIM_ConfigClockSource+0x16c>
 80089a4:	2b40      	cmp	r3, #64	@ 0x40
 80089a6:	d058      	beq.n	8008a5a <HAL_TIM_ConfigClockSource+0x13a>
 80089a8:	2b40      	cmp	r3, #64	@ 0x40
 80089aa:	d86f      	bhi.n	8008a8c <HAL_TIM_ConfigClockSource+0x16c>
 80089ac:	2b30      	cmp	r3, #48	@ 0x30
 80089ae:	d064      	beq.n	8008a7a <HAL_TIM_ConfigClockSource+0x15a>
 80089b0:	2b30      	cmp	r3, #48	@ 0x30
 80089b2:	d86b      	bhi.n	8008a8c <HAL_TIM_ConfigClockSource+0x16c>
 80089b4:	2b20      	cmp	r3, #32
 80089b6:	d060      	beq.n	8008a7a <HAL_TIM_ConfigClockSource+0x15a>
 80089b8:	2b20      	cmp	r3, #32
 80089ba:	d867      	bhi.n	8008a8c <HAL_TIM_ConfigClockSource+0x16c>
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d05c      	beq.n	8008a7a <HAL_TIM_ConfigClockSource+0x15a>
 80089c0:	2b10      	cmp	r3, #16
 80089c2:	d05a      	beq.n	8008a7a <HAL_TIM_ConfigClockSource+0x15a>
 80089c4:	e062      	b.n	8008a8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80089d6:	f000 f9b9 	bl	8008d4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80089e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	609a      	str	r2, [r3, #8]
      break;
 80089f2:	e04f      	b.n	8008a94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a04:	f000 f9a2 	bl	8008d4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689a      	ldr	r2, [r3, #8]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a16:	609a      	str	r2, [r3, #8]
      break;
 8008a18:	e03c      	b.n	8008a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a26:	461a      	mov	r2, r3
 8008a28:	f000 f916 	bl	8008c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2150      	movs	r1, #80	@ 0x50
 8008a32:	4618      	mov	r0, r3
 8008a34:	f000 f96f 	bl	8008d16 <TIM_ITRx_SetConfig>
      break;
 8008a38:	e02c      	b.n	8008a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a46:	461a      	mov	r2, r3
 8008a48:	f000 f935 	bl	8008cb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2160      	movs	r1, #96	@ 0x60
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 f95f 	bl	8008d16 <TIM_ITRx_SetConfig>
      break;
 8008a58:	e01c      	b.n	8008a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a66:	461a      	mov	r2, r3
 8008a68:	f000 f8f6 	bl	8008c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2140      	movs	r1, #64	@ 0x40
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 f94f 	bl	8008d16 <TIM_ITRx_SetConfig>
      break;
 8008a78:	e00c      	b.n	8008a94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4619      	mov	r1, r3
 8008a84:	4610      	mov	r0, r2
 8008a86:	f000 f946 	bl	8008d16 <TIM_ITRx_SetConfig>
      break;
 8008a8a:	e003      	b.n	8008a94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a90:	e000      	b.n	8008a94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008a92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b083      	sub	sp, #12
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ab6:	bf00      	nop
 8008ab8:	370c      	adds	r7, #12
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr

08008ac2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	b083      	sub	sp, #12
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008aca:	bf00      	nop
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b083      	sub	sp, #12
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ade:	bf00      	nop
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr

08008aea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b083      	sub	sp, #12
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008af2:	bf00      	nop
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
	...

08008b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a46      	ldr	r2, [pc, #280]	@ (8008c2c <TIM_Base_SetConfig+0x12c>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d013      	beq.n	8008b40 <TIM_Base_SetConfig+0x40>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b1e:	d00f      	beq.n	8008b40 <TIM_Base_SetConfig+0x40>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a43      	ldr	r2, [pc, #268]	@ (8008c30 <TIM_Base_SetConfig+0x130>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d00b      	beq.n	8008b40 <TIM_Base_SetConfig+0x40>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a42      	ldr	r2, [pc, #264]	@ (8008c34 <TIM_Base_SetConfig+0x134>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d007      	beq.n	8008b40 <TIM_Base_SetConfig+0x40>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a41      	ldr	r2, [pc, #260]	@ (8008c38 <TIM_Base_SetConfig+0x138>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d003      	beq.n	8008b40 <TIM_Base_SetConfig+0x40>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a40      	ldr	r2, [pc, #256]	@ (8008c3c <TIM_Base_SetConfig+0x13c>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d108      	bne.n	8008b52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a35      	ldr	r2, [pc, #212]	@ (8008c2c <TIM_Base_SetConfig+0x12c>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d02b      	beq.n	8008bb2 <TIM_Base_SetConfig+0xb2>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b60:	d027      	beq.n	8008bb2 <TIM_Base_SetConfig+0xb2>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a32      	ldr	r2, [pc, #200]	@ (8008c30 <TIM_Base_SetConfig+0x130>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d023      	beq.n	8008bb2 <TIM_Base_SetConfig+0xb2>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a31      	ldr	r2, [pc, #196]	@ (8008c34 <TIM_Base_SetConfig+0x134>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d01f      	beq.n	8008bb2 <TIM_Base_SetConfig+0xb2>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a30      	ldr	r2, [pc, #192]	@ (8008c38 <TIM_Base_SetConfig+0x138>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d01b      	beq.n	8008bb2 <TIM_Base_SetConfig+0xb2>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a2f      	ldr	r2, [pc, #188]	@ (8008c3c <TIM_Base_SetConfig+0x13c>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d017      	beq.n	8008bb2 <TIM_Base_SetConfig+0xb2>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a2e      	ldr	r2, [pc, #184]	@ (8008c40 <TIM_Base_SetConfig+0x140>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d013      	beq.n	8008bb2 <TIM_Base_SetConfig+0xb2>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a2d      	ldr	r2, [pc, #180]	@ (8008c44 <TIM_Base_SetConfig+0x144>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d00f      	beq.n	8008bb2 <TIM_Base_SetConfig+0xb2>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a2c      	ldr	r2, [pc, #176]	@ (8008c48 <TIM_Base_SetConfig+0x148>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d00b      	beq.n	8008bb2 <TIM_Base_SetConfig+0xb2>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a2b      	ldr	r2, [pc, #172]	@ (8008c4c <TIM_Base_SetConfig+0x14c>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d007      	beq.n	8008bb2 <TIM_Base_SetConfig+0xb2>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a2a      	ldr	r2, [pc, #168]	@ (8008c50 <TIM_Base_SetConfig+0x150>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d003      	beq.n	8008bb2 <TIM_Base_SetConfig+0xb2>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a29      	ldr	r2, [pc, #164]	@ (8008c54 <TIM_Base_SetConfig+0x154>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d108      	bne.n	8008bc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	695b      	ldr	r3, [r3, #20]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	689a      	ldr	r2, [r3, #8]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a10      	ldr	r2, [pc, #64]	@ (8008c2c <TIM_Base_SetConfig+0x12c>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d003      	beq.n	8008bf8 <TIM_Base_SetConfig+0xf8>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a12      	ldr	r2, [pc, #72]	@ (8008c3c <TIM_Base_SetConfig+0x13c>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d103      	bne.n	8008c00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	691a      	ldr	r2, [r3, #16]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d105      	bne.n	8008c1e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	f023 0201 	bic.w	r2, r3, #1
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	611a      	str	r2, [r3, #16]
  }
}
 8008c1e:	bf00      	nop
 8008c20:	3714      	adds	r7, #20
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	40010000 	.word	0x40010000
 8008c30:	40000400 	.word	0x40000400
 8008c34:	40000800 	.word	0x40000800
 8008c38:	40000c00 	.word	0x40000c00
 8008c3c:	40010400 	.word	0x40010400
 8008c40:	40014000 	.word	0x40014000
 8008c44:	40014400 	.word	0x40014400
 8008c48:	40014800 	.word	0x40014800
 8008c4c:	40001800 	.word	0x40001800
 8008c50:	40001c00 	.word	0x40001c00
 8008c54:	40002000 	.word	0x40002000

08008c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b087      	sub	sp, #28
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6a1b      	ldr	r3, [r3, #32]
 8008c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	f023 0201 	bic.w	r2, r3, #1
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	011b      	lsls	r3, r3, #4
 8008c88:	693a      	ldr	r2, [r7, #16]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f023 030a 	bic.w	r3, r3, #10
 8008c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	621a      	str	r2, [r3, #32]
}
 8008caa:	bf00      	nop
 8008cac:	371c      	adds	r7, #28
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b087      	sub	sp, #28
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	60f8      	str	r0, [r7, #12]
 8008cbe:	60b9      	str	r1, [r7, #8]
 8008cc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6a1b      	ldr	r3, [r3, #32]
 8008ccc:	f023 0210 	bic.w	r2, r3, #16
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008ce0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	031b      	lsls	r3, r3, #12
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008cf2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	011b      	lsls	r3, r3, #4
 8008cf8:	697a      	ldr	r2, [r7, #20]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	693a      	ldr	r2, [r7, #16]
 8008d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	621a      	str	r2, [r3, #32]
}
 8008d0a:	bf00      	nop
 8008d0c:	371c      	adds	r7, #28
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b085      	sub	sp, #20
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	f043 0307 	orr.w	r3, r3, #7
 8008d38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	609a      	str	r2, [r3, #8]
}
 8008d40:	bf00      	nop
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b087      	sub	sp, #28
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
 8008d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	021a      	lsls	r2, r3, #8
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	431a      	orrs	r2, r3
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	697a      	ldr	r2, [r7, #20]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	697a      	ldr	r2, [r7, #20]
 8008d7e:	609a      	str	r2, [r3, #8]
}
 8008d80:	bf00      	nop
 8008d82:	371c      	adds	r7, #28
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d101      	bne.n	8008dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e042      	b.n	8008e4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d106      	bne.n	8008de0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f7fa fff8 	bl	8003dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2224      	movs	r2, #36	@ 0x24
 8008de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	68da      	ldr	r2, [r3, #12]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008df6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fdbd 	bl	8009978 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	691a      	ldr	r2, [r3, #16]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008e0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	695a      	ldr	r2, [r3, #20]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008e1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68da      	ldr	r2, [r3, #12]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008e2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2220      	movs	r2, #32
 8008e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2220      	movs	r2, #32
 8008e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b08a      	sub	sp, #40	@ 0x28
 8008e58:	af02      	add	r7, sp, #8
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	603b      	str	r3, [r7, #0]
 8008e60:	4613      	mov	r3, r2
 8008e62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008e64:	2300      	movs	r3, #0
 8008e66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b20      	cmp	r3, #32
 8008e72:	d175      	bne.n	8008f60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d002      	beq.n	8008e80 <HAL_UART_Transmit+0x2c>
 8008e7a:	88fb      	ldrh	r3, [r7, #6]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d101      	bne.n	8008e84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e06e      	b.n	8008f62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2200      	movs	r2, #0
 8008e88:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2221      	movs	r2, #33	@ 0x21
 8008e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e92:	f7fb fa53 	bl	800433c <HAL_GetTick>
 8008e96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	88fa      	ldrh	r2, [r7, #6]
 8008e9c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	88fa      	ldrh	r2, [r7, #6]
 8008ea2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008eac:	d108      	bne.n	8008ec0 <HAL_UART_Transmit+0x6c>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d104      	bne.n	8008ec0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	61bb      	str	r3, [r7, #24]
 8008ebe:	e003      	b.n	8008ec8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ec8:	e02e      	b.n	8008f28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	9300      	str	r3, [sp, #0]
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	2180      	movs	r1, #128	@ 0x80
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f000 fb1f 	bl	8009518 <UART_WaitOnFlagUntilTimeout>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d005      	beq.n	8008eec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2220      	movs	r2, #32
 8008ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	e03a      	b.n	8008f62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10b      	bne.n	8008f0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	881b      	ldrh	r3, [r3, #0]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	3302      	adds	r3, #2
 8008f06:	61bb      	str	r3, [r7, #24]
 8008f08:	e007      	b.n	8008f1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	781a      	ldrb	r2, [r3, #0]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	3301      	adds	r3, #1
 8008f18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	3b01      	subs	r3, #1
 8008f22:	b29a      	uxth	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1cb      	bne.n	8008eca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	2140      	movs	r1, #64	@ 0x40
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f000 faeb 	bl	8009518 <UART_WaitOnFlagUntilTimeout>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d005      	beq.n	8008f54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2220      	movs	r2, #32
 8008f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e006      	b.n	8008f62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2220      	movs	r2, #32
 8008f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	e000      	b.n	8008f62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008f60:	2302      	movs	r3, #2
  }
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3720      	adds	r7, #32
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b084      	sub	sp, #16
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	60f8      	str	r0, [r7, #12]
 8008f72:	60b9      	str	r1, [r7, #8]
 8008f74:	4613      	mov	r3, r2
 8008f76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2b20      	cmp	r3, #32
 8008f82:	d112      	bne.n	8008faa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d002      	beq.n	8008f90 <HAL_UART_Receive_IT+0x26>
 8008f8a:	88fb      	ldrh	r3, [r7, #6]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d101      	bne.n	8008f94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e00b      	b.n	8008fac <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008f9a:	88fb      	ldrh	r3, [r7, #6]
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	68b9      	ldr	r1, [r7, #8]
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f000 fb12 	bl	80095ca <UART_Start_Receive_IT>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	e000      	b.n	8008fac <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008faa:	2302      	movs	r3, #2
  }
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b0ba      	sub	sp, #232	@ 0xe8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fea:	f003 030f 	and.w	r3, r3, #15
 8008fee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008ff2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d10f      	bne.n	800901a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ffe:	f003 0320 	and.w	r3, r3, #32
 8009002:	2b00      	cmp	r3, #0
 8009004:	d009      	beq.n	800901a <HAL_UART_IRQHandler+0x66>
 8009006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800900a:	f003 0320 	and.w	r3, r3, #32
 800900e:	2b00      	cmp	r3, #0
 8009010:	d003      	beq.n	800901a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 fbf2 	bl	80097fc <UART_Receive_IT>
      return;
 8009018:	e25b      	b.n	80094d2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800901a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800901e:	2b00      	cmp	r3, #0
 8009020:	f000 80de 	beq.w	80091e0 <HAL_UART_IRQHandler+0x22c>
 8009024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009028:	f003 0301 	and.w	r3, r3, #1
 800902c:	2b00      	cmp	r3, #0
 800902e:	d106      	bne.n	800903e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009034:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009038:	2b00      	cmp	r3, #0
 800903a:	f000 80d1 	beq.w	80091e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800903e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00b      	beq.n	8009062 <HAL_UART_IRQHandler+0xae>
 800904a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800904e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009052:	2b00      	cmp	r3, #0
 8009054:	d005      	beq.n	8009062 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800905a:	f043 0201 	orr.w	r2, r3, #1
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009066:	f003 0304 	and.w	r3, r3, #4
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00b      	beq.n	8009086 <HAL_UART_IRQHandler+0xd2>
 800906e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	2b00      	cmp	r3, #0
 8009078:	d005      	beq.n	8009086 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800907e:	f043 0202 	orr.w	r2, r3, #2
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800908a:	f003 0302 	and.w	r3, r3, #2
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00b      	beq.n	80090aa <HAL_UART_IRQHandler+0xf6>
 8009092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009096:	f003 0301 	and.w	r3, r3, #1
 800909a:	2b00      	cmp	r3, #0
 800909c:	d005      	beq.n	80090aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090a2:	f043 0204 	orr.w	r2, r3, #4
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80090aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090ae:	f003 0308 	and.w	r3, r3, #8
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d011      	beq.n	80090da <HAL_UART_IRQHandler+0x126>
 80090b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090ba:	f003 0320 	and.w	r3, r3, #32
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d105      	bne.n	80090ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80090c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090c6:	f003 0301 	and.w	r3, r3, #1
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d005      	beq.n	80090da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090d2:	f043 0208 	orr.w	r2, r3, #8
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f000 81f2 	beq.w	80094c8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80090e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090e8:	f003 0320 	and.w	r3, r3, #32
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d008      	beq.n	8009102 <HAL_UART_IRQHandler+0x14e>
 80090f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090f4:	f003 0320 	and.w	r3, r3, #32
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d002      	beq.n	8009102 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fb7d 	bl	80097fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	695b      	ldr	r3, [r3, #20]
 8009108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800910c:	2b40      	cmp	r3, #64	@ 0x40
 800910e:	bf0c      	ite	eq
 8009110:	2301      	moveq	r3, #1
 8009112:	2300      	movne	r3, #0
 8009114:	b2db      	uxtb	r3, r3
 8009116:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800911e:	f003 0308 	and.w	r3, r3, #8
 8009122:	2b00      	cmp	r3, #0
 8009124:	d103      	bne.n	800912e <HAL_UART_IRQHandler+0x17a>
 8009126:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800912a:	2b00      	cmp	r3, #0
 800912c:	d04f      	beq.n	80091ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fa85 	bl	800963e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800913e:	2b40      	cmp	r3, #64	@ 0x40
 8009140:	d141      	bne.n	80091c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3314      	adds	r3, #20
 8009148:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009150:	e853 3f00 	ldrex	r3, [r3]
 8009154:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009158:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800915c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009160:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	3314      	adds	r3, #20
 800916a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800916e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009172:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009176:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800917a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800917e:	e841 2300 	strex	r3, r2, [r1]
 8009182:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009186:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1d9      	bne.n	8009142 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009192:	2b00      	cmp	r3, #0
 8009194:	d013      	beq.n	80091be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800919a:	4a7e      	ldr	r2, [pc, #504]	@ (8009394 <HAL_UART_IRQHandler+0x3e0>)
 800919c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7fb fa4c 	bl	8004640 <HAL_DMA_Abort_IT>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d016      	beq.n	80091dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80091b8:	4610      	mov	r0, r2
 80091ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091bc:	e00e      	b.n	80091dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f994 	bl	80094ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091c4:	e00a      	b.n	80091dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f990 	bl	80094ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091cc:	e006      	b.n	80091dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f98c 	bl	80094ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80091da:	e175      	b.n	80094c8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091dc:	bf00      	nop
    return;
 80091de:	e173      	b.n	80094c8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	f040 814f 	bne.w	8009488 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80091ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091ee:	f003 0310 	and.w	r3, r3, #16
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f000 8148 	beq.w	8009488 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80091f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091fc:	f003 0310 	and.w	r3, r3, #16
 8009200:	2b00      	cmp	r3, #0
 8009202:	f000 8141 	beq.w	8009488 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009206:	2300      	movs	r3, #0
 8009208:	60bb      	str	r3, [r7, #8]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	60bb      	str	r3, [r7, #8]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	60bb      	str	r3, [r7, #8]
 800921a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009226:	2b40      	cmp	r3, #64	@ 0x40
 8009228:	f040 80b6 	bne.w	8009398 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009238:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800923c:	2b00      	cmp	r3, #0
 800923e:	f000 8145 	beq.w	80094cc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009246:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800924a:	429a      	cmp	r2, r3
 800924c:	f080 813e 	bcs.w	80094cc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009256:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800925c:	69db      	ldr	r3, [r3, #28]
 800925e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009262:	f000 8088 	beq.w	8009376 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	330c      	adds	r3, #12
 800926c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009270:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009274:	e853 3f00 	ldrex	r3, [r3]
 8009278:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800927c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009284:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	330c      	adds	r3, #12
 800928e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009292:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009296:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800929e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80092a2:	e841 2300 	strex	r3, r2, [r1]
 80092a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80092aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1d9      	bne.n	8009266 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	3314      	adds	r3, #20
 80092b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80092bc:	e853 3f00 	ldrex	r3, [r3]
 80092c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80092c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80092c4:	f023 0301 	bic.w	r3, r3, #1
 80092c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3314      	adds	r3, #20
 80092d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80092d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80092da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80092de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80092e2:	e841 2300 	strex	r3, r2, [r1]
 80092e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80092e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1e1      	bne.n	80092b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	3314      	adds	r3, #20
 80092f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80092f8:	e853 3f00 	ldrex	r3, [r3]
 80092fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80092fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009300:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009304:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3314      	adds	r3, #20
 800930e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009312:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009314:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009316:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009318:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800931a:	e841 2300 	strex	r3, r2, [r1]
 800931e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009320:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1e3      	bne.n	80092ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2220      	movs	r2, #32
 800932a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	330c      	adds	r3, #12
 800933a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800933e:	e853 3f00 	ldrex	r3, [r3]
 8009342:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009344:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009346:	f023 0310 	bic.w	r3, r3, #16
 800934a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	330c      	adds	r3, #12
 8009354:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009358:	65ba      	str	r2, [r7, #88]	@ 0x58
 800935a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800935e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009360:	e841 2300 	strex	r3, r2, [r1]
 8009364:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1e3      	bne.n	8009334 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009370:	4618      	mov	r0, r3
 8009372:	f7fb f8f5 	bl	8004560 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2202      	movs	r2, #2
 800937a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009384:	b29b      	uxth	r3, r3
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	b29b      	uxth	r3, r3
 800938a:	4619      	mov	r1, r3
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f8b7 	bl	8009500 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009392:	e09b      	b.n	80094cc <HAL_UART_IRQHandler+0x518>
 8009394:	08009705 	.word	0x08009705
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	1ad3      	subs	r3, r2, r3
 80093a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	f000 808e 	beq.w	80094d0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80093b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 8089 	beq.w	80094d0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	330c      	adds	r3, #12
 80093c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c8:	e853 3f00 	ldrex	r3, [r3]
 80093cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	330c      	adds	r3, #12
 80093de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80093e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80093e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093ea:	e841 2300 	strex	r3, r2, [r1]
 80093ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1e3      	bne.n	80093be <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3314      	adds	r3, #20
 80093fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009400:	e853 3f00 	ldrex	r3, [r3]
 8009404:	623b      	str	r3, [r7, #32]
   return(result);
 8009406:	6a3b      	ldr	r3, [r7, #32]
 8009408:	f023 0301 	bic.w	r3, r3, #1
 800940c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	3314      	adds	r3, #20
 8009416:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800941a:	633a      	str	r2, [r7, #48]	@ 0x30
 800941c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009420:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009422:	e841 2300 	strex	r3, r2, [r1]
 8009426:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1e3      	bne.n	80093f6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2220      	movs	r2, #32
 8009432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	330c      	adds	r3, #12
 8009442:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	e853 3f00 	ldrex	r3, [r3]
 800944a:	60fb      	str	r3, [r7, #12]
   return(result);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f023 0310 	bic.w	r3, r3, #16
 8009452:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	330c      	adds	r3, #12
 800945c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009460:	61fa      	str	r2, [r7, #28]
 8009462:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009464:	69b9      	ldr	r1, [r7, #24]
 8009466:	69fa      	ldr	r2, [r7, #28]
 8009468:	e841 2300 	strex	r3, r2, [r1]
 800946c:	617b      	str	r3, [r7, #20]
   return(result);
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1e3      	bne.n	800943c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2202      	movs	r2, #2
 8009478:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800947a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800947e:	4619      	mov	r1, r3
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f83d 	bl	8009500 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009486:	e023      	b.n	80094d0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800948c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009490:	2b00      	cmp	r3, #0
 8009492:	d009      	beq.n	80094a8 <HAL_UART_IRQHandler+0x4f4>
 8009494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800949c:	2b00      	cmp	r3, #0
 800949e:	d003      	beq.n	80094a8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f943 	bl	800972c <UART_Transmit_IT>
    return;
 80094a6:	e014      	b.n	80094d2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80094a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00e      	beq.n	80094d2 <HAL_UART_IRQHandler+0x51e>
 80094b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d008      	beq.n	80094d2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 f983 	bl	80097cc <UART_EndTransmit_IT>
    return;
 80094c6:	e004      	b.n	80094d2 <HAL_UART_IRQHandler+0x51e>
    return;
 80094c8:	bf00      	nop
 80094ca:	e002      	b.n	80094d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80094cc:	bf00      	nop
 80094ce:	e000      	b.n	80094d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80094d0:	bf00      	nop
  }
}
 80094d2:	37e8      	adds	r7, #232	@ 0xe8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	460b      	mov	r3, r1
 800950a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800950c:	bf00      	nop
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b086      	sub	sp, #24
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	603b      	str	r3, [r7, #0]
 8009524:	4613      	mov	r3, r2
 8009526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009528:	e03b      	b.n	80095a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009530:	d037      	beq.n	80095a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009532:	f7fa ff03 	bl	800433c <HAL_GetTick>
 8009536:	4602      	mov	r2, r0
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	1ad3      	subs	r3, r2, r3
 800953c:	6a3a      	ldr	r2, [r7, #32]
 800953e:	429a      	cmp	r2, r3
 8009540:	d302      	bcc.n	8009548 <UART_WaitOnFlagUntilTimeout+0x30>
 8009542:	6a3b      	ldr	r3, [r7, #32]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d101      	bne.n	800954c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009548:	2303      	movs	r3, #3
 800954a:	e03a      	b.n	80095c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	f003 0304 	and.w	r3, r3, #4
 8009556:	2b00      	cmp	r3, #0
 8009558:	d023      	beq.n	80095a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	2b80      	cmp	r3, #128	@ 0x80
 800955e:	d020      	beq.n	80095a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	2b40      	cmp	r3, #64	@ 0x40
 8009564:	d01d      	beq.n	80095a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 0308 	and.w	r3, r3, #8
 8009570:	2b08      	cmp	r3, #8
 8009572:	d116      	bne.n	80095a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009574:	2300      	movs	r3, #0
 8009576:	617b      	str	r3, [r7, #20]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	617b      	str	r3, [r7, #20]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	617b      	str	r3, [r7, #20]
 8009588:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f000 f857 	bl	800963e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2208      	movs	r2, #8
 8009594:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	e00f      	b.n	80095c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	4013      	ands	r3, r2
 80095ac:	68ba      	ldr	r2, [r7, #8]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	bf0c      	ite	eq
 80095b2:	2301      	moveq	r3, #1
 80095b4:	2300      	movne	r3, #0
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	461a      	mov	r2, r3
 80095ba:	79fb      	ldrb	r3, [r7, #7]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d0b4      	beq.n	800952a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3718      	adds	r7, #24
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095ca:	b480      	push	{r7}
 80095cc:	b085      	sub	sp, #20
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	60f8      	str	r0, [r7, #12]
 80095d2:	60b9      	str	r1, [r7, #8]
 80095d4:	4613      	mov	r3, r2
 80095d6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	88fa      	ldrh	r2, [r7, #6]
 80095e2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	88fa      	ldrh	r2, [r7, #6]
 80095e8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2222      	movs	r2, #34	@ 0x22
 80095f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d007      	beq.n	8009610 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	68da      	ldr	r2, [r3, #12]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800960e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	695a      	ldr	r2, [r3, #20]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f042 0201 	orr.w	r2, r2, #1
 800961e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	68da      	ldr	r2, [r3, #12]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f042 0220 	orr.w	r2, r2, #32
 800962e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3714      	adds	r7, #20
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr

0800963e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800963e:	b480      	push	{r7}
 8009640:	b095      	sub	sp, #84	@ 0x54
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	330c      	adds	r3, #12
 800964c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009650:	e853 3f00 	ldrex	r3, [r3]
 8009654:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009658:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800965c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	330c      	adds	r3, #12
 8009664:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009666:	643a      	str	r2, [r7, #64]	@ 0x40
 8009668:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800966c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800966e:	e841 2300 	strex	r3, r2, [r1]
 8009672:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1e5      	bne.n	8009646 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	3314      	adds	r3, #20
 8009680:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009682:	6a3b      	ldr	r3, [r7, #32]
 8009684:	e853 3f00 	ldrex	r3, [r3]
 8009688:	61fb      	str	r3, [r7, #28]
   return(result);
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	f023 0301 	bic.w	r3, r3, #1
 8009690:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	3314      	adds	r3, #20
 8009698:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800969a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800969c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096a2:	e841 2300 	strex	r3, r2, [r1]
 80096a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1e5      	bne.n	800967a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d119      	bne.n	80096ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	330c      	adds	r3, #12
 80096bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	e853 3f00 	ldrex	r3, [r3]
 80096c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	f023 0310 	bic.w	r3, r3, #16
 80096cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	330c      	adds	r3, #12
 80096d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096d6:	61ba      	str	r2, [r7, #24]
 80096d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096da:	6979      	ldr	r1, [r7, #20]
 80096dc:	69ba      	ldr	r2, [r7, #24]
 80096de:	e841 2300 	strex	r3, r2, [r1]
 80096e2:	613b      	str	r3, [r7, #16]
   return(result);
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1e5      	bne.n	80096b6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2220      	movs	r2, #32
 80096ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80096f8:	bf00      	nop
 80096fa:	3754      	adds	r7, #84	@ 0x54
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009710:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2200      	movs	r2, #0
 8009716:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2200      	movs	r2, #0
 800971c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f7ff fee4 	bl	80094ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009724:	bf00      	nop
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800973a:	b2db      	uxtb	r3, r3
 800973c:	2b21      	cmp	r3, #33	@ 0x21
 800973e:	d13e      	bne.n	80097be <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009748:	d114      	bne.n	8009774 <UART_Transmit_IT+0x48>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d110      	bne.n	8009774 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	881b      	ldrh	r3, [r3, #0]
 800975c:	461a      	mov	r2, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009766:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a1b      	ldr	r3, [r3, #32]
 800976c:	1c9a      	adds	r2, r3, #2
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	621a      	str	r2, [r3, #32]
 8009772:	e008      	b.n	8009786 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6a1b      	ldr	r3, [r3, #32]
 8009778:	1c59      	adds	r1, r3, #1
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	6211      	str	r1, [r2, #32]
 800977e:	781a      	ldrb	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800978a:	b29b      	uxth	r3, r3
 800978c:	3b01      	subs	r3, #1
 800978e:	b29b      	uxth	r3, r3
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	4619      	mov	r1, r3
 8009794:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009796:	2b00      	cmp	r3, #0
 8009798:	d10f      	bne.n	80097ba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68da      	ldr	r2, [r3, #12]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80097a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	68da      	ldr	r2, [r3, #12]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80097b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80097ba:	2300      	movs	r3, #0
 80097bc:	e000      	b.n	80097c0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80097be:	2302      	movs	r3, #2
  }
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3714      	adds	r7, #20
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	68da      	ldr	r2, [r3, #12]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2220      	movs	r2, #32
 80097e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f7ff fe73 	bl	80094d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b08c      	sub	sp, #48	@ 0x30
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800980a:	b2db      	uxtb	r3, r3
 800980c:	2b22      	cmp	r3, #34	@ 0x22
 800980e:	f040 80ae 	bne.w	800996e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800981a:	d117      	bne.n	800984c <UART_Receive_IT+0x50>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d113      	bne.n	800984c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009824:	2300      	movs	r3, #0
 8009826:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800982c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	b29b      	uxth	r3, r3
 8009836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800983a:	b29a      	uxth	r2, r3
 800983c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800983e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009844:	1c9a      	adds	r2, r3, #2
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	629a      	str	r2, [r3, #40]	@ 0x28
 800984a:	e026      	b.n	800989a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009850:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009852:	2300      	movs	r3, #0
 8009854:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800985e:	d007      	beq.n	8009870 <UART_Receive_IT+0x74>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10a      	bne.n	800987e <UART_Receive_IT+0x82>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d106      	bne.n	800987e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	b2da      	uxtb	r2, r3
 8009878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800987a:	701a      	strb	r2, [r3, #0]
 800987c:	e008      	b.n	8009890 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	b2db      	uxtb	r3, r3
 8009886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800988a:	b2da      	uxtb	r2, r3
 800988c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800988e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009894:	1c5a      	adds	r2, r3, #1
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800989e:	b29b      	uxth	r3, r3
 80098a0:	3b01      	subs	r3, #1
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	4619      	mov	r1, r3
 80098a8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d15d      	bne.n	800996a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68da      	ldr	r2, [r3, #12]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f022 0220 	bic.w	r2, r2, #32
 80098bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	68da      	ldr	r2, [r3, #12]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80098cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	695a      	ldr	r2, [r3, #20]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f022 0201 	bic.w	r2, r2, #1
 80098dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2220      	movs	r2, #32
 80098e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d135      	bne.n	8009960 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	330c      	adds	r3, #12
 8009900:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	e853 3f00 	ldrex	r3, [r3]
 8009908:	613b      	str	r3, [r7, #16]
   return(result);
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	f023 0310 	bic.w	r3, r3, #16
 8009910:	627b      	str	r3, [r7, #36]	@ 0x24
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	330c      	adds	r3, #12
 8009918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800991a:	623a      	str	r2, [r7, #32]
 800991c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991e:	69f9      	ldr	r1, [r7, #28]
 8009920:	6a3a      	ldr	r2, [r7, #32]
 8009922:	e841 2300 	strex	r3, r2, [r1]
 8009926:	61bb      	str	r3, [r7, #24]
   return(result);
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1e5      	bne.n	80098fa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f003 0310 	and.w	r3, r3, #16
 8009938:	2b10      	cmp	r3, #16
 800993a:	d10a      	bne.n	8009952 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800993c:	2300      	movs	r3, #0
 800993e:	60fb      	str	r3, [r7, #12]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	60fb      	str	r3, [r7, #12]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	60fb      	str	r3, [r7, #12]
 8009950:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009956:	4619      	mov	r1, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f7ff fdd1 	bl	8009500 <HAL_UARTEx_RxEventCallback>
 800995e:	e002      	b.n	8009966 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7fa f841 	bl	80039e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009966:	2300      	movs	r3, #0
 8009968:	e002      	b.n	8009970 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800996a:	2300      	movs	r3, #0
 800996c:	e000      	b.n	8009970 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800996e:	2302      	movs	r3, #2
  }
}
 8009970:	4618      	mov	r0, r3
 8009972:	3730      	adds	r7, #48	@ 0x30
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800997c:	b0c0      	sub	sp, #256	@ 0x100
 800997e:	af00      	add	r7, sp, #0
 8009980:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009994:	68d9      	ldr	r1, [r3, #12]
 8009996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	ea40 0301 	orr.w	r3, r0, r1
 80099a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80099a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099a6:	689a      	ldr	r2, [r3, #8]
 80099a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	431a      	orrs	r2, r3
 80099b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099b4:	695b      	ldr	r3, [r3, #20]
 80099b6:	431a      	orrs	r2, r3
 80099b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099bc:	69db      	ldr	r3, [r3, #28]
 80099be:	4313      	orrs	r3, r2
 80099c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80099c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80099d0:	f021 010c 	bic.w	r1, r1, #12
 80099d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80099de:	430b      	orrs	r3, r1
 80099e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80099e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80099ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099f2:	6999      	ldr	r1, [r3, #24]
 80099f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	ea40 0301 	orr.w	r3, r0, r1
 80099fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	4b8f      	ldr	r3, [pc, #572]	@ (8009c44 <UART_SetConfig+0x2cc>)
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d005      	beq.n	8009a18 <UART_SetConfig+0xa0>
 8009a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	4b8d      	ldr	r3, [pc, #564]	@ (8009c48 <UART_SetConfig+0x2d0>)
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d104      	bne.n	8009a22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a18:	f7fe fbc2 	bl	80081a0 <HAL_RCC_GetPCLK2Freq>
 8009a1c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009a20:	e003      	b.n	8009a2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a22:	f7fe fba9 	bl	8008178 <HAL_RCC_GetPCLK1Freq>
 8009a26:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a2e:	69db      	ldr	r3, [r3, #28]
 8009a30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a34:	f040 810c 	bne.w	8009c50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009a38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009a42:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009a46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009a4a:	4622      	mov	r2, r4
 8009a4c:	462b      	mov	r3, r5
 8009a4e:	1891      	adds	r1, r2, r2
 8009a50:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009a52:	415b      	adcs	r3, r3
 8009a54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009a5a:	4621      	mov	r1, r4
 8009a5c:	eb12 0801 	adds.w	r8, r2, r1
 8009a60:	4629      	mov	r1, r5
 8009a62:	eb43 0901 	adc.w	r9, r3, r1
 8009a66:	f04f 0200 	mov.w	r2, #0
 8009a6a:	f04f 0300 	mov.w	r3, #0
 8009a6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009a72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009a76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009a7a:	4690      	mov	r8, r2
 8009a7c:	4699      	mov	r9, r3
 8009a7e:	4623      	mov	r3, r4
 8009a80:	eb18 0303 	adds.w	r3, r8, r3
 8009a84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009a88:	462b      	mov	r3, r5
 8009a8a:	eb49 0303 	adc.w	r3, r9, r3
 8009a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009a9e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009aa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	18db      	adds	r3, r3, r3
 8009aaa:	653b      	str	r3, [r7, #80]	@ 0x50
 8009aac:	4613      	mov	r3, r2
 8009aae:	eb42 0303 	adc.w	r3, r2, r3
 8009ab2:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ab4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009ab8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009abc:	f7f7 f8a4 	bl	8000c08 <__aeabi_uldivmod>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	4b61      	ldr	r3, [pc, #388]	@ (8009c4c <UART_SetConfig+0x2d4>)
 8009ac6:	fba3 2302 	umull	r2, r3, r3, r2
 8009aca:	095b      	lsrs	r3, r3, #5
 8009acc:	011c      	lsls	r4, r3, #4
 8009ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009ad8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009adc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009ae0:	4642      	mov	r2, r8
 8009ae2:	464b      	mov	r3, r9
 8009ae4:	1891      	adds	r1, r2, r2
 8009ae6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009ae8:	415b      	adcs	r3, r3
 8009aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009aec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009af0:	4641      	mov	r1, r8
 8009af2:	eb12 0a01 	adds.w	sl, r2, r1
 8009af6:	4649      	mov	r1, r9
 8009af8:	eb43 0b01 	adc.w	fp, r3, r1
 8009afc:	f04f 0200 	mov.w	r2, #0
 8009b00:	f04f 0300 	mov.w	r3, #0
 8009b04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009b08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009b0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b10:	4692      	mov	sl, r2
 8009b12:	469b      	mov	fp, r3
 8009b14:	4643      	mov	r3, r8
 8009b16:	eb1a 0303 	adds.w	r3, sl, r3
 8009b1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b1e:	464b      	mov	r3, r9
 8009b20:	eb4b 0303 	adc.w	r3, fp, r3
 8009b24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b34:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009b38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	18db      	adds	r3, r3, r3
 8009b40:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b42:	4613      	mov	r3, r2
 8009b44:	eb42 0303 	adc.w	r3, r2, r3
 8009b48:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009b4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009b52:	f7f7 f859 	bl	8000c08 <__aeabi_uldivmod>
 8009b56:	4602      	mov	r2, r0
 8009b58:	460b      	mov	r3, r1
 8009b5a:	4611      	mov	r1, r2
 8009b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8009c4c <UART_SetConfig+0x2d4>)
 8009b5e:	fba3 2301 	umull	r2, r3, r3, r1
 8009b62:	095b      	lsrs	r3, r3, #5
 8009b64:	2264      	movs	r2, #100	@ 0x64
 8009b66:	fb02 f303 	mul.w	r3, r2, r3
 8009b6a:	1acb      	subs	r3, r1, r3
 8009b6c:	00db      	lsls	r3, r3, #3
 8009b6e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009b72:	4b36      	ldr	r3, [pc, #216]	@ (8009c4c <UART_SetConfig+0x2d4>)
 8009b74:	fba3 2302 	umull	r2, r3, r3, r2
 8009b78:	095b      	lsrs	r3, r3, #5
 8009b7a:	005b      	lsls	r3, r3, #1
 8009b7c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009b80:	441c      	add	r4, r3
 8009b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b86:	2200      	movs	r2, #0
 8009b88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b8c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009b90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009b94:	4642      	mov	r2, r8
 8009b96:	464b      	mov	r3, r9
 8009b98:	1891      	adds	r1, r2, r2
 8009b9a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009b9c:	415b      	adcs	r3, r3
 8009b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ba0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009ba4:	4641      	mov	r1, r8
 8009ba6:	1851      	adds	r1, r2, r1
 8009ba8:	6339      	str	r1, [r7, #48]	@ 0x30
 8009baa:	4649      	mov	r1, r9
 8009bac:	414b      	adcs	r3, r1
 8009bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bb0:	f04f 0200 	mov.w	r2, #0
 8009bb4:	f04f 0300 	mov.w	r3, #0
 8009bb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009bbc:	4659      	mov	r1, fp
 8009bbe:	00cb      	lsls	r3, r1, #3
 8009bc0:	4651      	mov	r1, sl
 8009bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bc6:	4651      	mov	r1, sl
 8009bc8:	00ca      	lsls	r2, r1, #3
 8009bca:	4610      	mov	r0, r2
 8009bcc:	4619      	mov	r1, r3
 8009bce:	4603      	mov	r3, r0
 8009bd0:	4642      	mov	r2, r8
 8009bd2:	189b      	adds	r3, r3, r2
 8009bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009bd8:	464b      	mov	r3, r9
 8009bda:	460a      	mov	r2, r1
 8009bdc:	eb42 0303 	adc.w	r3, r2, r3
 8009be0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009bf0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009bf4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	18db      	adds	r3, r3, r3
 8009bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009bfe:	4613      	mov	r3, r2
 8009c00:	eb42 0303 	adc.w	r3, r2, r3
 8009c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009c0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009c0e:	f7f6 fffb 	bl	8000c08 <__aeabi_uldivmod>
 8009c12:	4602      	mov	r2, r0
 8009c14:	460b      	mov	r3, r1
 8009c16:	4b0d      	ldr	r3, [pc, #52]	@ (8009c4c <UART_SetConfig+0x2d4>)
 8009c18:	fba3 1302 	umull	r1, r3, r3, r2
 8009c1c:	095b      	lsrs	r3, r3, #5
 8009c1e:	2164      	movs	r1, #100	@ 0x64
 8009c20:	fb01 f303 	mul.w	r3, r1, r3
 8009c24:	1ad3      	subs	r3, r2, r3
 8009c26:	00db      	lsls	r3, r3, #3
 8009c28:	3332      	adds	r3, #50	@ 0x32
 8009c2a:	4a08      	ldr	r2, [pc, #32]	@ (8009c4c <UART_SetConfig+0x2d4>)
 8009c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c30:	095b      	lsrs	r3, r3, #5
 8009c32:	f003 0207 	and.w	r2, r3, #7
 8009c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4422      	add	r2, r4
 8009c3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009c40:	e106      	b.n	8009e50 <UART_SetConfig+0x4d8>
 8009c42:	bf00      	nop
 8009c44:	40011000 	.word	0x40011000
 8009c48:	40011400 	.word	0x40011400
 8009c4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c54:	2200      	movs	r2, #0
 8009c56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009c5a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009c5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009c62:	4642      	mov	r2, r8
 8009c64:	464b      	mov	r3, r9
 8009c66:	1891      	adds	r1, r2, r2
 8009c68:	6239      	str	r1, [r7, #32]
 8009c6a:	415b      	adcs	r3, r3
 8009c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009c72:	4641      	mov	r1, r8
 8009c74:	1854      	adds	r4, r2, r1
 8009c76:	4649      	mov	r1, r9
 8009c78:	eb43 0501 	adc.w	r5, r3, r1
 8009c7c:	f04f 0200 	mov.w	r2, #0
 8009c80:	f04f 0300 	mov.w	r3, #0
 8009c84:	00eb      	lsls	r3, r5, #3
 8009c86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009c8a:	00e2      	lsls	r2, r4, #3
 8009c8c:	4614      	mov	r4, r2
 8009c8e:	461d      	mov	r5, r3
 8009c90:	4643      	mov	r3, r8
 8009c92:	18e3      	adds	r3, r4, r3
 8009c94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009c98:	464b      	mov	r3, r9
 8009c9a:	eb45 0303 	adc.w	r3, r5, r3
 8009c9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009cae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009cb2:	f04f 0200 	mov.w	r2, #0
 8009cb6:	f04f 0300 	mov.w	r3, #0
 8009cba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	008b      	lsls	r3, r1, #2
 8009cc2:	4621      	mov	r1, r4
 8009cc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cc8:	4621      	mov	r1, r4
 8009cca:	008a      	lsls	r2, r1, #2
 8009ccc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009cd0:	f7f6 ff9a 	bl	8000c08 <__aeabi_uldivmod>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	4b60      	ldr	r3, [pc, #384]	@ (8009e5c <UART_SetConfig+0x4e4>)
 8009cda:	fba3 2302 	umull	r2, r3, r3, r2
 8009cde:	095b      	lsrs	r3, r3, #5
 8009ce0:	011c      	lsls	r4, r3, #4
 8009ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009cec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009cf0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009cf4:	4642      	mov	r2, r8
 8009cf6:	464b      	mov	r3, r9
 8009cf8:	1891      	adds	r1, r2, r2
 8009cfa:	61b9      	str	r1, [r7, #24]
 8009cfc:	415b      	adcs	r3, r3
 8009cfe:	61fb      	str	r3, [r7, #28]
 8009d00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d04:	4641      	mov	r1, r8
 8009d06:	1851      	adds	r1, r2, r1
 8009d08:	6139      	str	r1, [r7, #16]
 8009d0a:	4649      	mov	r1, r9
 8009d0c:	414b      	adcs	r3, r1
 8009d0e:	617b      	str	r3, [r7, #20]
 8009d10:	f04f 0200 	mov.w	r2, #0
 8009d14:	f04f 0300 	mov.w	r3, #0
 8009d18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009d1c:	4659      	mov	r1, fp
 8009d1e:	00cb      	lsls	r3, r1, #3
 8009d20:	4651      	mov	r1, sl
 8009d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d26:	4651      	mov	r1, sl
 8009d28:	00ca      	lsls	r2, r1, #3
 8009d2a:	4610      	mov	r0, r2
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	4603      	mov	r3, r0
 8009d30:	4642      	mov	r2, r8
 8009d32:	189b      	adds	r3, r3, r2
 8009d34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d38:	464b      	mov	r3, r9
 8009d3a:	460a      	mov	r2, r1
 8009d3c:	eb42 0303 	adc.w	r3, r2, r3
 8009d40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009d4e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009d50:	f04f 0200 	mov.w	r2, #0
 8009d54:	f04f 0300 	mov.w	r3, #0
 8009d58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009d5c:	4649      	mov	r1, r9
 8009d5e:	008b      	lsls	r3, r1, #2
 8009d60:	4641      	mov	r1, r8
 8009d62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d66:	4641      	mov	r1, r8
 8009d68:	008a      	lsls	r2, r1, #2
 8009d6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009d6e:	f7f6 ff4b 	bl	8000c08 <__aeabi_uldivmod>
 8009d72:	4602      	mov	r2, r0
 8009d74:	460b      	mov	r3, r1
 8009d76:	4611      	mov	r1, r2
 8009d78:	4b38      	ldr	r3, [pc, #224]	@ (8009e5c <UART_SetConfig+0x4e4>)
 8009d7a:	fba3 2301 	umull	r2, r3, r3, r1
 8009d7e:	095b      	lsrs	r3, r3, #5
 8009d80:	2264      	movs	r2, #100	@ 0x64
 8009d82:	fb02 f303 	mul.w	r3, r2, r3
 8009d86:	1acb      	subs	r3, r1, r3
 8009d88:	011b      	lsls	r3, r3, #4
 8009d8a:	3332      	adds	r3, #50	@ 0x32
 8009d8c:	4a33      	ldr	r2, [pc, #204]	@ (8009e5c <UART_SetConfig+0x4e4>)
 8009d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d92:	095b      	lsrs	r3, r3, #5
 8009d94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009d98:	441c      	add	r4, r3
 8009d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d9e:	2200      	movs	r2, #0
 8009da0:	673b      	str	r3, [r7, #112]	@ 0x70
 8009da2:	677a      	str	r2, [r7, #116]	@ 0x74
 8009da4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009da8:	4642      	mov	r2, r8
 8009daa:	464b      	mov	r3, r9
 8009dac:	1891      	adds	r1, r2, r2
 8009dae:	60b9      	str	r1, [r7, #8]
 8009db0:	415b      	adcs	r3, r3
 8009db2:	60fb      	str	r3, [r7, #12]
 8009db4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009db8:	4641      	mov	r1, r8
 8009dba:	1851      	adds	r1, r2, r1
 8009dbc:	6039      	str	r1, [r7, #0]
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	414b      	adcs	r3, r1
 8009dc2:	607b      	str	r3, [r7, #4]
 8009dc4:	f04f 0200 	mov.w	r2, #0
 8009dc8:	f04f 0300 	mov.w	r3, #0
 8009dcc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009dd0:	4659      	mov	r1, fp
 8009dd2:	00cb      	lsls	r3, r1, #3
 8009dd4:	4651      	mov	r1, sl
 8009dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009dda:	4651      	mov	r1, sl
 8009ddc:	00ca      	lsls	r2, r1, #3
 8009dde:	4610      	mov	r0, r2
 8009de0:	4619      	mov	r1, r3
 8009de2:	4603      	mov	r3, r0
 8009de4:	4642      	mov	r2, r8
 8009de6:	189b      	adds	r3, r3, r2
 8009de8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009dea:	464b      	mov	r3, r9
 8009dec:	460a      	mov	r2, r1
 8009dee:	eb42 0303 	adc.w	r3, r2, r3
 8009df2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	663b      	str	r3, [r7, #96]	@ 0x60
 8009dfe:	667a      	str	r2, [r7, #100]	@ 0x64
 8009e00:	f04f 0200 	mov.w	r2, #0
 8009e04:	f04f 0300 	mov.w	r3, #0
 8009e08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	008b      	lsls	r3, r1, #2
 8009e10:	4641      	mov	r1, r8
 8009e12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e16:	4641      	mov	r1, r8
 8009e18:	008a      	lsls	r2, r1, #2
 8009e1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009e1e:	f7f6 fef3 	bl	8000c08 <__aeabi_uldivmod>
 8009e22:	4602      	mov	r2, r0
 8009e24:	460b      	mov	r3, r1
 8009e26:	4b0d      	ldr	r3, [pc, #52]	@ (8009e5c <UART_SetConfig+0x4e4>)
 8009e28:	fba3 1302 	umull	r1, r3, r3, r2
 8009e2c:	095b      	lsrs	r3, r3, #5
 8009e2e:	2164      	movs	r1, #100	@ 0x64
 8009e30:	fb01 f303 	mul.w	r3, r1, r3
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	011b      	lsls	r3, r3, #4
 8009e38:	3332      	adds	r3, #50	@ 0x32
 8009e3a:	4a08      	ldr	r2, [pc, #32]	@ (8009e5c <UART_SetConfig+0x4e4>)
 8009e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e40:	095b      	lsrs	r3, r3, #5
 8009e42:	f003 020f 	and.w	r2, r3, #15
 8009e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4422      	add	r2, r4
 8009e4e:	609a      	str	r2, [r3, #8]
}
 8009e50:	bf00      	nop
 8009e52:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009e56:	46bd      	mov	sp, r7
 8009e58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e5c:	51eb851f 	.word	0x51eb851f

08009e60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e60:	b084      	sub	sp, #16
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b084      	sub	sp, #16
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	f107 001c 	add.w	r0, r7, #28
 8009e6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009e72:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	d123      	bne.n	8009ec2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e7e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009e8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009ea2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d105      	bne.n	8009eb6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 f9dc 	bl	800a274 <USB_CoreReset>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	73fb      	strb	r3, [r7, #15]
 8009ec0:	e01b      	b.n	8009efa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 f9d0 	bl	800a274 <USB_CoreReset>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009ed8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d106      	bne.n	8009eee <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ee4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	639a      	str	r2, [r3, #56]	@ 0x38
 8009eec:	e005      	b.n	8009efa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ef2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009efa:	7fbb      	ldrb	r3, [r7, #30]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d10b      	bne.n	8009f18 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	f043 0206 	orr.w	r2, r3, #6
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	f043 0220 	orr.w	r2, r3, #32
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f24:	b004      	add	sp, #16
 8009f26:	4770      	bx	lr

08009f28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	f043 0201 	orr.w	r2, r3, #1
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	370c      	adds	r7, #12
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr

08009f4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f4a:	b480      	push	{r7}
 8009f4c:	b083      	sub	sp, #12
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	f023 0201 	bic.w	r2, r3, #1
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009f5e:	2300      	movs	r3, #0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	460b      	mov	r3, r1
 8009f76:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009f88:	78fb      	ldrb	r3, [r7, #3]
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d115      	bne.n	8009fba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009f9a:	200a      	movs	r0, #10
 8009f9c:	f7fa f9da 	bl	8004354 <HAL_Delay>
      ms += 10U;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	330a      	adds	r3, #10
 8009fa4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f956 	bl	800a258 <USB_GetMode>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d01e      	beq.n	8009ff0 <USB_SetCurrentMode+0x84>
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2bc7      	cmp	r3, #199	@ 0xc7
 8009fb6:	d9f0      	bls.n	8009f9a <USB_SetCurrentMode+0x2e>
 8009fb8:	e01a      	b.n	8009ff0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009fba:	78fb      	ldrb	r3, [r7, #3]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d115      	bne.n	8009fec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009fcc:	200a      	movs	r0, #10
 8009fce:	f7fa f9c1 	bl	8004354 <HAL_Delay>
      ms += 10U;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	330a      	adds	r3, #10
 8009fd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 f93d 	bl	800a258 <USB_GetMode>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d005      	beq.n	8009ff0 <USB_SetCurrentMode+0x84>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2bc7      	cmp	r3, #199	@ 0xc7
 8009fe8:	d9f0      	bls.n	8009fcc <USB_SetCurrentMode+0x60>
 8009fea:	e001      	b.n	8009ff0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	e005      	b.n	8009ffc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2bc8      	cmp	r3, #200	@ 0xc8
 8009ff4:	d101      	bne.n	8009ffa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e000      	b.n	8009ffc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a00e:	2300      	movs	r3, #0
 800a010:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	3301      	adds	r3, #1
 800a016:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a01e:	d901      	bls.n	800a024 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a020:	2303      	movs	r3, #3
 800a022:	e01b      	b.n	800a05c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	daf2      	bge.n	800a012 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a02c:	2300      	movs	r3, #0
 800a02e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	019b      	lsls	r3, r3, #6
 800a034:	f043 0220 	orr.w	r2, r3, #32
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	3301      	adds	r3, #1
 800a040:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a048:	d901      	bls.n	800a04e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a04a:	2303      	movs	r3, #3
 800a04c:	e006      	b.n	800a05c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	f003 0320 	and.w	r3, r3, #32
 800a056:	2b20      	cmp	r3, #32
 800a058:	d0f0      	beq.n	800a03c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3714      	adds	r7, #20
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a070:	2300      	movs	r3, #0
 800a072:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	3301      	adds	r3, #1
 800a078:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a080:	d901      	bls.n	800a086 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a082:	2303      	movs	r3, #3
 800a084:	e018      	b.n	800a0b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	daf2      	bge.n	800a074 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a08e:	2300      	movs	r3, #0
 800a090:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2210      	movs	r2, #16
 800a096:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	3301      	adds	r3, #1
 800a09c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a0a4:	d901      	bls.n	800a0aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a0a6:	2303      	movs	r3, #3
 800a0a8:	e006      	b.n	800a0b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	f003 0310 	and.w	r3, r3, #16
 800a0b2:	2b10      	cmp	r3, #16
 800a0b4:	d0f0      	beq.n	800a098 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3714      	adds	r7, #20
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b089      	sub	sp, #36	@ 0x24
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	71fb      	strb	r3, [r7, #7]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a0e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d123      	bne.n	800a132 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a0ea:	88bb      	ldrh	r3, [r7, #4]
 800a0ec:	3303      	adds	r3, #3
 800a0ee:	089b      	lsrs	r3, r3, #2
 800a0f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	61bb      	str	r3, [r7, #24]
 800a0f6:	e018      	b.n	800a12a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a0f8:	79fb      	ldrb	r3, [r7, #7]
 800a0fa:	031a      	lsls	r2, r3, #12
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	4413      	add	r3, r2
 800a100:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a104:	461a      	mov	r2, r3
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	3301      	adds	r3, #1
 800a110:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	3301      	adds	r3, #1
 800a116:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	3301      	adds	r3, #1
 800a11c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	3301      	adds	r3, #1
 800a122:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	3301      	adds	r3, #1
 800a128:	61bb      	str	r3, [r7, #24]
 800a12a:	69ba      	ldr	r2, [r7, #24]
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d3e2      	bcc.n	800a0f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a132:	2300      	movs	r3, #0
}
 800a134:	4618      	mov	r0, r3
 800a136:	3724      	adds	r7, #36	@ 0x24
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a140:	b480      	push	{r7}
 800a142:	b08b      	sub	sp, #44	@ 0x2c
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	4613      	mov	r3, r2
 800a14c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a156:	88fb      	ldrh	r3, [r7, #6]
 800a158:	089b      	lsrs	r3, r3, #2
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a15e:	88fb      	ldrh	r3, [r7, #6]
 800a160:	f003 0303 	and.w	r3, r3, #3
 800a164:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a166:	2300      	movs	r3, #0
 800a168:	623b      	str	r3, [r7, #32]
 800a16a:	e014      	b.n	800a196 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a176:	601a      	str	r2, [r3, #0]
    pDest++;
 800a178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a17a:	3301      	adds	r3, #1
 800a17c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a180:	3301      	adds	r3, #1
 800a182:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a186:	3301      	adds	r3, #1
 800a188:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a18c:	3301      	adds	r3, #1
 800a18e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a190:	6a3b      	ldr	r3, [r7, #32]
 800a192:	3301      	adds	r3, #1
 800a194:	623b      	str	r3, [r7, #32]
 800a196:	6a3a      	ldr	r2, [r7, #32]
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d3e6      	bcc.n	800a16c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a19e:	8bfb      	ldrh	r3, [r7, #30]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d01e      	beq.n	800a1e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	f107 0310 	add.w	r3, r7, #16
 800a1b4:	6812      	ldr	r2, [r2, #0]
 800a1b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a1b8:	693a      	ldr	r2, [r7, #16]
 800a1ba:	6a3b      	ldr	r3, [r7, #32]
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	00db      	lsls	r3, r3, #3
 800a1c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a1c4:	b2da      	uxtb	r2, r3
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c8:	701a      	strb	r2, [r3, #0]
      i++;
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	623b      	str	r3, [r7, #32]
      pDest++;
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a1d6:	8bfb      	ldrh	r3, [r7, #30]
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a1dc:	8bfb      	ldrh	r3, [r7, #30]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1ea      	bne.n	800a1b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	372c      	adds	r7, #44	@ 0x2c
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b085      	sub	sp, #20
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	695b      	ldr	r3, [r3, #20]
 800a1fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	699b      	ldr	r3, [r3, #24]
 800a202:	68fa      	ldr	r2, [r7, #12]
 800a204:	4013      	ands	r3, r2
 800a206:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a208:	68fb      	ldr	r3, [r7, #12]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3714      	adds	r7, #20
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800a216:	b480      	push	{r7}
 800a218:	b085      	sub	sp, #20
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
 800a21e:	460b      	mov	r3, r1
 800a220:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800a226:	78fb      	ldrb	r3, [r7, #3]
 800a228:	015a      	lsls	r2, r3, #5
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	4413      	add	r3, r2
 800a22e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800a236:	78fb      	ldrb	r3, [r7, #3]
 800a238:	015a      	lsls	r2, r3, #5
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	4413      	add	r3, r2
 800a23e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	68ba      	ldr	r2, [r7, #8]
 800a246:	4013      	ands	r3, r2
 800a248:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a24a:	68bb      	ldr	r3, [r7, #8]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3714      	adds	r7, #20
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	695b      	ldr	r3, [r3, #20]
 800a264:	f003 0301 	and.w	r3, r3, #1
}
 800a268:	4618      	mov	r0, r3
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a27c:	2300      	movs	r3, #0
 800a27e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	3301      	adds	r3, #1
 800a284:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a28c:	d901      	bls.n	800a292 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a28e:	2303      	movs	r3, #3
 800a290:	e01b      	b.n	800a2ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	2b00      	cmp	r3, #0
 800a298:	daf2      	bge.n	800a280 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a29a:	2300      	movs	r3, #0
 800a29c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	691b      	ldr	r3, [r3, #16]
 800a2a2:	f043 0201 	orr.w	r2, r3, #1
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a2b6:	d901      	bls.n	800a2bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a2b8:	2303      	movs	r3, #3
 800a2ba:	e006      	b.n	800a2ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	f003 0301 	and.w	r3, r3, #1
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d0f0      	beq.n	800a2aa <USB_CoreReset+0x36>

  return HAL_OK;
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3714      	adds	r7, #20
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
	...

0800a2d8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a2d8:	b084      	sub	sp, #16
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b086      	sub	sp, #24
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
 800a2e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a2e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a302:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a30e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a31a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d119      	bne.n	800a362 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a32e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a332:	2b01      	cmp	r3, #1
 800a334:	d10a      	bne.n	800a34c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a344:	f043 0304 	orr.w	r3, r3, #4
 800a348:	6013      	str	r3, [r2, #0]
 800a34a:	e014      	b.n	800a376 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a35a:	f023 0304 	bic.w	r3, r3, #4
 800a35e:	6013      	str	r3, [r2, #0]
 800a360:	e009      	b.n	800a376 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	68fa      	ldr	r2, [r7, #12]
 800a36c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a370:	f023 0304 	bic.w	r3, r3, #4
 800a374:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a376:	2110      	movs	r1, #16
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f7ff fe43 	bl	800a004 <USB_FlushTxFifo>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d001      	beq.n	800a388 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f7ff fe6d 	bl	800a068 <USB_FlushRxFifo>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d001      	beq.n	800a398 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a398:	2300      	movs	r3, #0
 800a39a:	613b      	str	r3, [r7, #16]
 800a39c:	e015      	b.n	800a3ca <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	015a      	lsls	r2, r3, #5
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	015a      	lsls	r2, r3, #5
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	4413      	add	r3, r2
 800a3ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a3be:	461a      	mov	r2, r3
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	613b      	str	r3, [r7, #16]
 800a3ca:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d3e3      	bcc.n	800a39e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4a18      	ldr	r2, [pc, #96]	@ (800a448 <USB_HostInit+0x170>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d10b      	bne.n	800a404 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3f2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4a15      	ldr	r2, [pc, #84]	@ (800a44c <USB_HostInit+0x174>)
 800a3f8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4a14      	ldr	r2, [pc, #80]	@ (800a450 <USB_HostInit+0x178>)
 800a3fe:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800a402:	e009      	b.n	800a418 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2280      	movs	r2, #128	@ 0x80
 800a408:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	4a11      	ldr	r2, [pc, #68]	@ (800a454 <USB_HostInit+0x17c>)
 800a40e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a11      	ldr	r2, [pc, #68]	@ (800a458 <USB_HostInit+0x180>)
 800a414:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a418:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d105      	bne.n	800a42c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	699b      	ldr	r3, [r3, #24]
 800a424:	f043 0210 	orr.w	r2, r3, #16
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	699a      	ldr	r2, [r3, #24]
 800a430:	4b0a      	ldr	r3, [pc, #40]	@ (800a45c <USB_HostInit+0x184>)
 800a432:	4313      	orrs	r3, r2
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a438:	7dfb      	ldrb	r3, [r7, #23]
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3718      	adds	r7, #24
 800a43e:	46bd      	mov	sp, r7
 800a440:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a444:	b004      	add	sp, #16
 800a446:	4770      	bx	lr
 800a448:	40040000 	.word	0x40040000
 800a44c:	01000200 	.word	0x01000200
 800a450:	00e00300 	.word	0x00e00300
 800a454:	00600080 	.word	0x00600080
 800a458:	004000e0 	.word	0x004000e0
 800a45c:	a3200008 	.word	0xa3200008

0800a460 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	460b      	mov	r3, r1
 800a46a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a47e:	f023 0303 	bic.w	r3, r3, #3
 800a482:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	78fb      	ldrb	r3, [r7, #3]
 800a48e:	f003 0303 	and.w	r3, r3, #3
 800a492:	68f9      	ldr	r1, [r7, #12]
 800a494:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800a498:	4313      	orrs	r3, r2
 800a49a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a49c:	78fb      	ldrb	r3, [r7, #3]
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d107      	bne.n	800a4b2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a4ae:	6053      	str	r3, [r2, #4]
 800a4b0:	e00c      	b.n	800a4cc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800a4b2:	78fb      	ldrb	r3, [r7, #3]
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d107      	bne.n	800a4c8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4be:	461a      	mov	r2, r3
 800a4c0:	f241 7370 	movw	r3, #6000	@ 0x1770
 800a4c4:	6053      	str	r3, [r2, #4]
 800a4c6:	e001      	b.n	800a4cc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e000      	b.n	800a4ce <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3714      	adds	r7, #20
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr

0800a4da <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b084      	sub	sp, #16
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a4fa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a508:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a50a:	2064      	movs	r0, #100	@ 0x64
 800a50c:	f7f9 ff22 	bl	8004354 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	68fa      	ldr	r2, [r7, #12]
 800a514:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a51c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a51e:	200a      	movs	r0, #10
 800a520:	f7f9 ff18 	bl	8004354 <HAL_Delay>

  return HAL_OK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a52e:	b480      	push	{r7}
 800a530:	b085      	sub	sp, #20
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	460b      	mov	r3, r1
 800a538:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a53e:	2300      	movs	r3, #0
 800a540:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a552:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d109      	bne.n	800a572 <USB_DriveVbus+0x44>
 800a55e:	78fb      	ldrb	r3, [r7, #3]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d106      	bne.n	800a572 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a56c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a570:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a57c:	d109      	bne.n	800a592 <USB_DriveVbus+0x64>
 800a57e:	78fb      	ldrb	r3, [r7, #3]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d106      	bne.n	800a592 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	68fa      	ldr	r2, [r7, #12]
 800a588:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a58c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a590:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a592:	2300      	movs	r3, #0
}
 800a594:	4618      	mov	r0, r3
 800a596:	3714      	adds	r7, #20
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b085      	sub	sp, #20
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	0c5b      	lsrs	r3, r3, #17
 800a5be:	f003 0303 	and.w	r3, r3, #3
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3714      	adds	r7, #20
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800a5ce:	b480      	push	{r7}
 800a5d0:	b085      	sub	sp, #20
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	b29b      	uxth	r3, r3
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b088      	sub	sp, #32
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	4608      	mov	r0, r1
 800a5fa:	4611      	mov	r1, r2
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	4603      	mov	r3, r0
 800a600:	70fb      	strb	r3, [r7, #3]
 800a602:	460b      	mov	r3, r1
 800a604:	70bb      	strb	r3, [r7, #2]
 800a606:	4613      	mov	r3, r2
 800a608:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800a612:	78fb      	ldrb	r3, [r7, #3]
 800a614:	015a      	lsls	r2, r3, #5
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	4413      	add	r3, r2
 800a61a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a61e:	461a      	mov	r2, r3
 800a620:	f04f 33ff 	mov.w	r3, #4294967295
 800a624:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a626:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a62a:	2b03      	cmp	r3, #3
 800a62c:	d87c      	bhi.n	800a728 <USB_HC_Init+0x138>
 800a62e:	a201      	add	r2, pc, #4	@ (adr r2, 800a634 <USB_HC_Init+0x44>)
 800a630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a634:	0800a645 	.word	0x0800a645
 800a638:	0800a6eb 	.word	0x0800a6eb
 800a63c:	0800a645 	.word	0x0800a645
 800a640:	0800a6ad 	.word	0x0800a6ad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a644:	78fb      	ldrb	r3, [r7, #3]
 800a646:	015a      	lsls	r2, r3, #5
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	4413      	add	r3, r2
 800a64c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a650:	461a      	mov	r2, r3
 800a652:	f240 439d 	movw	r3, #1181	@ 0x49d
 800a656:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a658:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	da10      	bge.n	800a682 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a660:	78fb      	ldrb	r3, [r7, #3]
 800a662:	015a      	lsls	r2, r3, #5
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	4413      	add	r3, r2
 800a668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	78fa      	ldrb	r2, [r7, #3]
 800a670:	0151      	lsls	r1, r2, #5
 800a672:	693a      	ldr	r2, [r7, #16]
 800a674:	440a      	add	r2, r1
 800a676:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a67a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a67e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800a680:	e055      	b.n	800a72e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4a6f      	ldr	r2, [pc, #444]	@ (800a844 <USB_HC_Init+0x254>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d151      	bne.n	800a72e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a68a:	78fb      	ldrb	r3, [r7, #3]
 800a68c:	015a      	lsls	r2, r3, #5
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	4413      	add	r3, r2
 800a692:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	78fa      	ldrb	r2, [r7, #3]
 800a69a:	0151      	lsls	r1, r2, #5
 800a69c:	693a      	ldr	r2, [r7, #16]
 800a69e:	440a      	add	r2, r1
 800a6a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a6a4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a6a8:	60d3      	str	r3, [r2, #12]
      break;
 800a6aa:	e040      	b.n	800a72e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a6ac:	78fb      	ldrb	r3, [r7, #3]
 800a6ae:	015a      	lsls	r2, r3, #5
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	f240 639d 	movw	r3, #1693	@ 0x69d
 800a6be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a6c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	da34      	bge.n	800a732 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a6c8:	78fb      	ldrb	r3, [r7, #3]
 800a6ca:	015a      	lsls	r2, r3, #5
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	78fa      	ldrb	r2, [r7, #3]
 800a6d8:	0151      	lsls	r1, r2, #5
 800a6da:	693a      	ldr	r2, [r7, #16]
 800a6dc:	440a      	add	r2, r1
 800a6de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a6e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a6e6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a6e8:	e023      	b.n	800a732 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a6ea:	78fb      	ldrb	r3, [r7, #3]
 800a6ec:	015a      	lsls	r2, r3, #5
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	f240 2325 	movw	r3, #549	@ 0x225
 800a6fc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a6fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a702:	2b00      	cmp	r3, #0
 800a704:	da17      	bge.n	800a736 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a706:	78fb      	ldrb	r3, [r7, #3]
 800a708:	015a      	lsls	r2, r3, #5
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	4413      	add	r3, r2
 800a70e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	78fa      	ldrb	r2, [r7, #3]
 800a716:	0151      	lsls	r1, r2, #5
 800a718:	693a      	ldr	r2, [r7, #16]
 800a71a:	440a      	add	r2, r1
 800a71c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a720:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800a724:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a726:	e006      	b.n	800a736 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	77fb      	strb	r3, [r7, #31]
      break;
 800a72c:	e004      	b.n	800a738 <USB_HC_Init+0x148>
      break;
 800a72e:	bf00      	nop
 800a730:	e002      	b.n	800a738 <USB_HC_Init+0x148>
      break;
 800a732:	bf00      	nop
 800a734:	e000      	b.n	800a738 <USB_HC_Init+0x148>
      break;
 800a736:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a738:	78fb      	ldrb	r3, [r7, #3]
 800a73a:	015a      	lsls	r2, r3, #5
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	4413      	add	r3, r2
 800a740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a744:	461a      	mov	r2, r3
 800a746:	2300      	movs	r3, #0
 800a748:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a74a:	78fb      	ldrb	r3, [r7, #3]
 800a74c:	015a      	lsls	r2, r3, #5
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	4413      	add	r3, r2
 800a752:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	78fa      	ldrb	r2, [r7, #3]
 800a75a:	0151      	lsls	r1, r2, #5
 800a75c:	693a      	ldr	r2, [r7, #16]
 800a75e:	440a      	add	r2, r1
 800a760:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a764:	f043 0302 	orr.w	r3, r3, #2
 800a768:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a770:	699a      	ldr	r2, [r3, #24]
 800a772:	78fb      	ldrb	r3, [r7, #3]
 800a774:	f003 030f 	and.w	r3, r3, #15
 800a778:	2101      	movs	r1, #1
 800a77a:	fa01 f303 	lsl.w	r3, r1, r3
 800a77e:	6939      	ldr	r1, [r7, #16]
 800a780:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800a784:	4313      	orrs	r3, r2
 800a786:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	699b      	ldr	r3, [r3, #24]
 800a78c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a794:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	da03      	bge.n	800a7a4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a79c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a7a0:	61bb      	str	r3, [r7, #24]
 800a7a2:	e001      	b.n	800a7a8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f7ff fef9 	bl	800a5a0 <USB_GetHostSpeed>
 800a7ae:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a7b0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	d106      	bne.n	800a7c6 <USB_HC_Init+0x1d6>
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	d003      	beq.n	800a7c6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a7be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a7c2:	617b      	str	r3, [r7, #20]
 800a7c4:	e001      	b.n	800a7ca <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a7ca:	787b      	ldrb	r3, [r7, #1]
 800a7cc:	059b      	lsls	r3, r3, #22
 800a7ce:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a7d2:	78bb      	ldrb	r3, [r7, #2]
 800a7d4:	02db      	lsls	r3, r3, #11
 800a7d6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a7da:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a7dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a7e0:	049b      	lsls	r3, r3, #18
 800a7e2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a7e6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800a7e8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a7ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a7ee:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	431a      	orrs	r2, r3
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a7f8:	78fa      	ldrb	r2, [r7, #3]
 800a7fa:	0151      	lsls	r1, r2, #5
 800a7fc:	693a      	ldr	r2, [r7, #16]
 800a7fe:	440a      	add	r2, r1
 800a800:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a804:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a808:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a80a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a80e:	2b03      	cmp	r3, #3
 800a810:	d003      	beq.n	800a81a <USB_HC_Init+0x22a>
 800a812:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a816:	2b01      	cmp	r3, #1
 800a818:	d10f      	bne.n	800a83a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a81a:	78fb      	ldrb	r3, [r7, #3]
 800a81c:	015a      	lsls	r2, r3, #5
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	4413      	add	r3, r2
 800a822:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	78fa      	ldrb	r2, [r7, #3]
 800a82a:	0151      	lsls	r1, r2, #5
 800a82c:	693a      	ldr	r2, [r7, #16]
 800a82e:	440a      	add	r2, r1
 800a830:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a834:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a838:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a83a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3720      	adds	r7, #32
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}
 800a844:	40040000 	.word	0x40040000

0800a848 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b08c      	sub	sp, #48	@ 0x30
 800a84c:	af02      	add	r7, sp, #8
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	4613      	mov	r3, r2
 800a854:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	785b      	ldrb	r3, [r3, #1]
 800a85e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800a860:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a864:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	4a5d      	ldr	r2, [pc, #372]	@ (800a9e0 <USB_HC_StartXfer+0x198>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d12f      	bne.n	800a8ce <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800a86e:	79fb      	ldrb	r3, [r7, #7]
 800a870:	2b01      	cmp	r3, #1
 800a872:	d11c      	bne.n	800a8ae <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	7c9b      	ldrb	r3, [r3, #18]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d003      	beq.n	800a884 <USB_HC_StartXfer+0x3c>
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	7c9b      	ldrb	r3, [r3, #18]
 800a880:	2b02      	cmp	r3, #2
 800a882:	d124      	bne.n	800a8ce <USB_HC_StartXfer+0x86>
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	799b      	ldrb	r3, [r3, #6]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d120      	bne.n	800a8ce <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	015a      	lsls	r2, r3, #5
 800a890:	6a3b      	ldr	r3, [r7, #32]
 800a892:	4413      	add	r3, r2
 800a894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	69fa      	ldr	r2, [r7, #28]
 800a89c:	0151      	lsls	r1, r2, #5
 800a89e:	6a3a      	ldr	r2, [r7, #32]
 800a8a0:	440a      	add	r2, r1
 800a8a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a8a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8aa:	60d3      	str	r3, [r2, #12]
 800a8ac:	e00f      	b.n	800a8ce <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	791b      	ldrb	r3, [r3, #4]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d10b      	bne.n	800a8ce <USB_HC_StartXfer+0x86>
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	795b      	ldrb	r3, [r3, #5]
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d107      	bne.n	800a8ce <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	785b      	ldrb	r3, [r3, #1]
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f000 fb6b 	bl	800afa0 <USB_DoPing>
        return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	e232      	b.n	800ad34 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	799b      	ldrb	r3, [r3, #6]
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d158      	bne.n	800a988 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	78db      	ldrb	r3, [r3, #3]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d007      	beq.n	800a8f2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a8e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a8e4:	68ba      	ldr	r2, [r7, #8]
 800a8e6:	8a92      	ldrh	r2, [r2, #20]
 800a8e8:	fb03 f202 	mul.w	r2, r3, r2
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	61da      	str	r2, [r3, #28]
 800a8f0:	e07c      	b.n	800a9ec <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	7c9b      	ldrb	r3, [r3, #18]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d130      	bne.n	800a95c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	6a1b      	ldr	r3, [r3, #32]
 800a8fe:	2bbc      	cmp	r3, #188	@ 0xbc
 800a900:	d918      	bls.n	800a934 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	8a9b      	ldrh	r3, [r3, #20]
 800a906:	461a      	mov	r2, r3
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	69da      	ldr	r2, [r3, #28]
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d003      	beq.n	800a924 <USB_HC_StartXfer+0xdc>
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	2b02      	cmp	r3, #2
 800a922:	d103      	bne.n	800a92c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	2202      	movs	r2, #2
 800a928:	60da      	str	r2, [r3, #12]
 800a92a:	e05f      	b.n	800a9ec <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	2201      	movs	r2, #1
 800a930:	60da      	str	r2, [r3, #12]
 800a932:	e05b      	b.n	800a9ec <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	6a1a      	ldr	r2, [r3, #32]
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	2b01      	cmp	r3, #1
 800a942:	d007      	beq.n	800a954 <USB_HC_StartXfer+0x10c>
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	2b02      	cmp	r3, #2
 800a94a:	d003      	beq.n	800a954 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	2204      	movs	r2, #4
 800a950:	60da      	str	r2, [r3, #12]
 800a952:	e04b      	b.n	800a9ec <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	2203      	movs	r2, #3
 800a958:	60da      	str	r2, [r3, #12]
 800a95a:	e047      	b.n	800a9ec <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800a95c:	79fb      	ldrb	r3, [r7, #7]
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d10d      	bne.n	800a97e <USB_HC_StartXfer+0x136>
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	6a1b      	ldr	r3, [r3, #32]
 800a966:	68ba      	ldr	r2, [r7, #8]
 800a968:	8a92      	ldrh	r2, [r2, #20]
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d907      	bls.n	800a97e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a96e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a970:	68ba      	ldr	r2, [r7, #8]
 800a972:	8a92      	ldrh	r2, [r2, #20]
 800a974:	fb03 f202 	mul.w	r2, r3, r2
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	61da      	str	r2, [r3, #28]
 800a97c:	e036      	b.n	800a9ec <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	6a1a      	ldr	r2, [r3, #32]
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	61da      	str	r2, [r3, #28]
 800a986:	e031      	b.n	800a9ec <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	6a1b      	ldr	r3, [r3, #32]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d018      	beq.n	800a9c2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	6a1b      	ldr	r3, [r3, #32]
 800a994:	68ba      	ldr	r2, [r7, #8]
 800a996:	8a92      	ldrh	r2, [r2, #20]
 800a998:	4413      	add	r3, r2
 800a99a:	3b01      	subs	r3, #1
 800a99c:	68ba      	ldr	r2, [r7, #8]
 800a99e:	8a92      	ldrh	r2, [r2, #20]
 800a9a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9a4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800a9a6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a9a8:	8b7b      	ldrh	r3, [r7, #26]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d90b      	bls.n	800a9c6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800a9ae:	8b7b      	ldrh	r3, [r7, #26]
 800a9b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a9b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a9b4:	68ba      	ldr	r2, [r7, #8]
 800a9b6:	8a92      	ldrh	r2, [r2, #20]
 800a9b8:	fb03 f202 	mul.w	r2, r3, r2
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	61da      	str	r2, [r3, #28]
 800a9c0:	e001      	b.n	800a9c6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	78db      	ldrb	r3, [r3, #3]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00a      	beq.n	800a9e4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a9ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	8a92      	ldrh	r2, [r2, #20]
 800a9d4:	fb03 f202 	mul.w	r2, r3, r2
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	61da      	str	r2, [r3, #28]
 800a9dc:	e006      	b.n	800a9ec <USB_HC_StartXfer+0x1a4>
 800a9de:	bf00      	nop
 800a9e0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	6a1a      	ldr	r2, [r3, #32]
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	69db      	ldr	r3, [r3, #28]
 800a9f0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a9f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a9f6:	04d9      	lsls	r1, r3, #19
 800a9f8:	4ba3      	ldr	r3, [pc, #652]	@ (800ac88 <USB_HC_StartXfer+0x440>)
 800a9fa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a9fc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	7d9b      	ldrb	r3, [r3, #22]
 800aa02:	075b      	lsls	r3, r3, #29
 800aa04:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800aa08:	69f9      	ldr	r1, [r7, #28]
 800aa0a:	0148      	lsls	r0, r1, #5
 800aa0c:	6a39      	ldr	r1, [r7, #32]
 800aa0e:	4401      	add	r1, r0
 800aa10:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800aa14:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800aa16:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800aa18:	79fb      	ldrb	r3, [r7, #7]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d009      	beq.n	800aa32 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	6999      	ldr	r1, [r3, #24]
 800aa22:	69fb      	ldr	r3, [r7, #28]
 800aa24:	015a      	lsls	r2, r3, #5
 800aa26:	6a3b      	ldr	r3, [r7, #32]
 800aa28:	4413      	add	r3, r2
 800aa2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa2e:	460a      	mov	r2, r1
 800aa30:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800aa32:	6a3b      	ldr	r3, [r7, #32]
 800aa34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	f003 0301 	and.w	r3, r3, #1
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	bf0c      	ite	eq
 800aa42:	2301      	moveq	r3, #1
 800aa44:	2300      	movne	r3, #0
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	015a      	lsls	r2, r3, #5
 800aa4e:	6a3b      	ldr	r3, [r7, #32]
 800aa50:	4413      	add	r3, r2
 800aa52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	69fa      	ldr	r2, [r7, #28]
 800aa5a:	0151      	lsls	r1, r2, #5
 800aa5c:	6a3a      	ldr	r2, [r7, #32]
 800aa5e:	440a      	add	r2, r1
 800aa60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aa64:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aa68:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	015a      	lsls	r2, r3, #5
 800aa6e:	6a3b      	ldr	r3, [r7, #32]
 800aa70:	4413      	add	r3, r2
 800aa72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	7e7b      	ldrb	r3, [r7, #25]
 800aa7a:	075b      	lsls	r3, r3, #29
 800aa7c:	69f9      	ldr	r1, [r7, #28]
 800aa7e:	0148      	lsls	r0, r1, #5
 800aa80:	6a39      	ldr	r1, [r7, #32]
 800aa82:	4401      	add	r1, r0
 800aa84:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	799b      	ldrb	r3, [r3, #6]
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	f040 80c3 	bne.w	800ac1c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	7c5b      	ldrb	r3, [r3, #17]
 800aa9a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800aa9c:	68ba      	ldr	r2, [r7, #8]
 800aa9e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	69fa      	ldr	r2, [r7, #28]
 800aaa4:	0151      	lsls	r1, r2, #5
 800aaa6:	6a3a      	ldr	r2, [r7, #32]
 800aaa8:	440a      	add	r2, r1
 800aaaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800aaae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800aab2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800aab4:	69fb      	ldr	r3, [r7, #28]
 800aab6:	015a      	lsls	r2, r3, #5
 800aab8:	6a3b      	ldr	r3, [r7, #32]
 800aaba:	4413      	add	r3, r2
 800aabc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	69fa      	ldr	r2, [r7, #28]
 800aac4:	0151      	lsls	r1, r2, #5
 800aac6:	6a3a      	ldr	r2, [r7, #32]
 800aac8:	440a      	add	r2, r1
 800aaca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aace:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800aad2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	79db      	ldrb	r3, [r3, #7]
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d123      	bne.n	800ab24 <USB_HC_StartXfer+0x2dc>
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	78db      	ldrb	r3, [r3, #3]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d11f      	bne.n	800ab24 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	015a      	lsls	r2, r3, #5
 800aae8:	6a3b      	ldr	r3, [r7, #32]
 800aaea:	4413      	add	r3, r2
 800aaec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	69fa      	ldr	r2, [r7, #28]
 800aaf4:	0151      	lsls	r1, r2, #5
 800aaf6:	6a3a      	ldr	r2, [r7, #32]
 800aaf8:	440a      	add	r2, r1
 800aafa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aafe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab02:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800ab04:	69fb      	ldr	r3, [r7, #28]
 800ab06:	015a      	lsls	r2, r3, #5
 800ab08:	6a3b      	ldr	r3, [r7, #32]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	69fa      	ldr	r2, [r7, #28]
 800ab14:	0151      	lsls	r1, r2, #5
 800ab16:	6a3a      	ldr	r2, [r7, #32]
 800ab18:	440a      	add	r2, r1
 800ab1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ab1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab22:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	7c9b      	ldrb	r3, [r3, #18]
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d003      	beq.n	800ab34 <USB_HC_StartXfer+0x2ec>
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	7c9b      	ldrb	r3, [r3, #18]
 800ab30:	2b03      	cmp	r3, #3
 800ab32:	d117      	bne.n	800ab64 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d113      	bne.n	800ab64 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	78db      	ldrb	r3, [r3, #3]
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d10f      	bne.n	800ab64 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	015a      	lsls	r2, r3, #5
 800ab48:	6a3b      	ldr	r3, [r7, #32]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	69fa      	ldr	r2, [r7, #28]
 800ab54:	0151      	lsls	r1, r2, #5
 800ab56:	6a3a      	ldr	r2, [r7, #32]
 800ab58:	440a      	add	r2, r1
 800ab5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ab5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab62:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	7c9b      	ldrb	r3, [r3, #18]
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d162      	bne.n	800ac32 <USB_HC_StartXfer+0x3ea>
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	78db      	ldrb	r3, [r3, #3]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d15e      	bne.n	800ac32 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	2b03      	cmp	r3, #3
 800ab7c:	d858      	bhi.n	800ac30 <USB_HC_StartXfer+0x3e8>
 800ab7e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab84 <USB_HC_StartXfer+0x33c>)
 800ab80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab84:	0800ab95 	.word	0x0800ab95
 800ab88:	0800abb7 	.word	0x0800abb7
 800ab8c:	0800abd9 	.word	0x0800abd9
 800ab90:	0800abfb 	.word	0x0800abfb
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	015a      	lsls	r2, r3, #5
 800ab98:	6a3b      	ldr	r3, [r7, #32]
 800ab9a:	4413      	add	r3, r2
 800ab9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	69fa      	ldr	r2, [r7, #28]
 800aba4:	0151      	lsls	r1, r2, #5
 800aba6:	6a3a      	ldr	r2, [r7, #32]
 800aba8:	440a      	add	r2, r1
 800abaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800abae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abb2:	6053      	str	r3, [r2, #4]
          break;
 800abb4:	e03d      	b.n	800ac32 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	015a      	lsls	r2, r3, #5
 800abba:	6a3b      	ldr	r3, [r7, #32]
 800abbc:	4413      	add	r3, r2
 800abbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	69fa      	ldr	r2, [r7, #28]
 800abc6:	0151      	lsls	r1, r2, #5
 800abc8:	6a3a      	ldr	r2, [r7, #32]
 800abca:	440a      	add	r2, r1
 800abcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800abd0:	f043 030e 	orr.w	r3, r3, #14
 800abd4:	6053      	str	r3, [r2, #4]
          break;
 800abd6:	e02c      	b.n	800ac32 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	015a      	lsls	r2, r3, #5
 800abdc:	6a3b      	ldr	r3, [r7, #32]
 800abde:	4413      	add	r3, r2
 800abe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	69fa      	ldr	r2, [r7, #28]
 800abe8:	0151      	lsls	r1, r2, #5
 800abea:	6a3a      	ldr	r2, [r7, #32]
 800abec:	440a      	add	r2, r1
 800abee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800abf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800abf6:	6053      	str	r3, [r2, #4]
          break;
 800abf8:	e01b      	b.n	800ac32 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	015a      	lsls	r2, r3, #5
 800abfe:	6a3b      	ldr	r3, [r7, #32]
 800ac00:	4413      	add	r3, r2
 800ac02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	69fa      	ldr	r2, [r7, #28]
 800ac0a:	0151      	lsls	r1, r2, #5
 800ac0c:	6a3a      	ldr	r2, [r7, #32]
 800ac0e:	440a      	add	r2, r1
 800ac10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ac14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ac18:	6053      	str	r3, [r2, #4]
          break;
 800ac1a:	e00a      	b.n	800ac32 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	015a      	lsls	r2, r3, #5
 800ac20:	6a3b      	ldr	r3, [r7, #32]
 800ac22:	4413      	add	r3, r2
 800ac24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac28:	461a      	mov	r2, r3
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	6053      	str	r3, [r2, #4]
 800ac2e:	e000      	b.n	800ac32 <USB_HC_StartXfer+0x3ea>
          break;
 800ac30:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ac32:	69fb      	ldr	r3, [r7, #28]
 800ac34:	015a      	lsls	r2, r3, #5
 800ac36:	6a3b      	ldr	r3, [r7, #32]
 800ac38:	4413      	add	r3, r2
 800ac3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ac48:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	78db      	ldrb	r3, [r3, #3]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d004      	beq.n	800ac5c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac58:	613b      	str	r3, [r7, #16]
 800ac5a:	e003      	b.n	800ac64 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ac62:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ac6a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	015a      	lsls	r2, r3, #5
 800ac70:	6a3b      	ldr	r3, [r7, #32]
 800ac72:	4413      	add	r3, r2
 800ac74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac78:	461a      	mov	r2, r3
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ac7e:	79fb      	ldrb	r3, [r7, #7]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d003      	beq.n	800ac8c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800ac84:	2300      	movs	r3, #0
 800ac86:	e055      	b.n	800ad34 <USB_HC_StartXfer+0x4ec>
 800ac88:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	78db      	ldrb	r3, [r3, #3]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d14e      	bne.n	800ad32 <USB_HC_StartXfer+0x4ea>
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	6a1b      	ldr	r3, [r3, #32]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d04a      	beq.n	800ad32 <USB_HC_StartXfer+0x4ea>
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	79db      	ldrb	r3, [r3, #7]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d146      	bne.n	800ad32 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	7c9b      	ldrb	r3, [r3, #18]
 800aca8:	2b03      	cmp	r3, #3
 800acaa:	d831      	bhi.n	800ad10 <USB_HC_StartXfer+0x4c8>
 800acac:	a201      	add	r2, pc, #4	@ (adr r2, 800acb4 <USB_HC_StartXfer+0x46c>)
 800acae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb2:	bf00      	nop
 800acb4:	0800acc5 	.word	0x0800acc5
 800acb8:	0800ace9 	.word	0x0800ace9
 800acbc:	0800acc5 	.word	0x0800acc5
 800acc0:	0800ace9 	.word	0x0800ace9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	6a1b      	ldr	r3, [r3, #32]
 800acc8:	3303      	adds	r3, #3
 800acca:	089b      	lsrs	r3, r3, #2
 800accc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800acce:	8afa      	ldrh	r2, [r7, #22]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d91c      	bls.n	800ad14 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	699b      	ldr	r3, [r3, #24]
 800acde:	f043 0220 	orr.w	r2, r3, #32
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	619a      	str	r2, [r3, #24]
        }
        break;
 800ace6:	e015      	b.n	800ad14 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	6a1b      	ldr	r3, [r3, #32]
 800acec:	3303      	adds	r3, #3
 800acee:	089b      	lsrs	r3, r3, #2
 800acf0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800acf2:	8afa      	ldrh	r2, [r7, #22]
 800acf4:	6a3b      	ldr	r3, [r7, #32]
 800acf6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d90a      	bls.n	800ad18 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	699b      	ldr	r3, [r3, #24]
 800ad06:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	619a      	str	r2, [r3, #24]
        }
        break;
 800ad0e:	e003      	b.n	800ad18 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800ad10:	bf00      	nop
 800ad12:	e002      	b.n	800ad1a <USB_HC_StartXfer+0x4d2>
        break;
 800ad14:	bf00      	nop
 800ad16:	e000      	b.n	800ad1a <USB_HC_StartXfer+0x4d2>
        break;
 800ad18:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	6999      	ldr	r1, [r3, #24]
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	785a      	ldrb	r2, [r3, #1]
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	6a1b      	ldr	r3, [r3, #32]
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	2000      	movs	r0, #0
 800ad2a:	9000      	str	r0, [sp, #0]
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	f7ff f9c9 	bl	800a0c4 <USB_WritePacket>
  }

  return HAL_OK;
 800ad32:	2300      	movs	r3, #0
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3728      	adds	r7, #40	@ 0x28
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad4e:	695b      	ldr	r3, [r3, #20]
 800ad50:	b29b      	uxth	r3, r3
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3714      	adds	r7, #20
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr

0800ad5e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ad5e:	b480      	push	{r7}
 800ad60:	b089      	sub	sp, #36	@ 0x24
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
 800ad66:	460b      	mov	r3, r1
 800ad68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800ad6e:	78fb      	ldrb	r3, [r7, #3]
 800ad70:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800ad72:	2300      	movs	r3, #0
 800ad74:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	015a      	lsls	r2, r3, #5
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	0c9b      	lsrs	r3, r3, #18
 800ad86:	f003 0303 	and.w	r3, r3, #3
 800ad8a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	015a      	lsls	r2, r3, #5
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	4413      	add	r3, r2
 800ad94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	0fdb      	lsrs	r3, r3, #31
 800ad9c:	f003 0301 	and.w	r3, r3, #1
 800ada0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800ada2:	69bb      	ldr	r3, [r7, #24]
 800ada4:	015a      	lsls	r2, r3, #5
 800ada6:	69fb      	ldr	r3, [r7, #28]
 800ada8:	4413      	add	r3, r2
 800adaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	0fdb      	lsrs	r3, r3, #31
 800adb2:	f003 0301 	and.w	r3, r3, #1
 800adb6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	f003 0320 	and.w	r3, r3, #32
 800adc0:	2b20      	cmp	r3, #32
 800adc2:	d10d      	bne.n	800ade0 <USB_HC_Halt+0x82>
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d10a      	bne.n	800ade0 <USB_HC_Halt+0x82>
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d005      	beq.n	800addc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	2b01      	cmp	r3, #1
 800add4:	d002      	beq.n	800addc <USB_HC_Halt+0x7e>
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	2b03      	cmp	r3, #3
 800adda:	d101      	bne.n	800ade0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800addc:	2300      	movs	r3, #0
 800adde:	e0d8      	b.n	800af92 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d002      	beq.n	800adec <USB_HC_Halt+0x8e>
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	2b02      	cmp	r3, #2
 800adea:	d173      	bne.n	800aed4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800adec:	69bb      	ldr	r3, [r7, #24]
 800adee:	015a      	lsls	r2, r3, #5
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	4413      	add	r3, r2
 800adf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	69ba      	ldr	r2, [r7, #24]
 800adfc:	0151      	lsls	r1, r2, #5
 800adfe:	69fa      	ldr	r2, [r7, #28]
 800ae00:	440a      	add	r2, r1
 800ae02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ae0a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	f003 0320 	and.w	r3, r3, #32
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d14a      	bne.n	800aeae <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d133      	bne.n	800ae8c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	015a      	lsls	r2, r3, #5
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	69ba      	ldr	r2, [r7, #24]
 800ae34:	0151      	lsls	r1, r2, #5
 800ae36:	69fa      	ldr	r2, [r7, #28]
 800ae38:	440a      	add	r2, r1
 800ae3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ae42:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ae44:	69bb      	ldr	r3, [r7, #24]
 800ae46:	015a      	lsls	r2, r3, #5
 800ae48:	69fb      	ldr	r3, [r7, #28]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	69ba      	ldr	r2, [r7, #24]
 800ae54:	0151      	lsls	r1, r2, #5
 800ae56:	69fa      	ldr	r2, [r7, #28]
 800ae58:	440a      	add	r2, r1
 800ae5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ae62:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	3301      	adds	r3, #1
 800ae68:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ae70:	d82e      	bhi.n	800aed0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	015a      	lsls	r2, r3, #5
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	4413      	add	r3, r2
 800ae7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae88:	d0ec      	beq.n	800ae64 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae8a:	e081      	b.n	800af90 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	015a      	lsls	r2, r3, #5
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	4413      	add	r3, r2
 800ae94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	69ba      	ldr	r2, [r7, #24]
 800ae9c:	0151      	lsls	r1, r2, #5
 800ae9e:	69fa      	ldr	r2, [r7, #28]
 800aea0:	440a      	add	r2, r1
 800aea2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aea6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aeaa:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aeac:	e070      	b.n	800af90 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	015a      	lsls	r2, r3, #5
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	69ba      	ldr	r2, [r7, #24]
 800aebe:	0151      	lsls	r1, r2, #5
 800aec0:	69fa      	ldr	r2, [r7, #28]
 800aec2:	440a      	add	r2, r1
 800aec4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aec8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aecc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aece:	e05f      	b.n	800af90 <USB_HC_Halt+0x232>
            break;
 800aed0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aed2:	e05d      	b.n	800af90 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	015a      	lsls	r2, r3, #5
 800aed8:	69fb      	ldr	r3, [r7, #28]
 800aeda:	4413      	add	r3, r2
 800aedc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	69ba      	ldr	r2, [r7, #24]
 800aee4:	0151      	lsls	r1, r2, #5
 800aee6:	69fa      	ldr	r2, [r7, #28]
 800aee8:	440a      	add	r2, r1
 800aeea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aeee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aef2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aefa:	691b      	ldr	r3, [r3, #16]
 800aefc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800af00:	2b00      	cmp	r3, #0
 800af02:	d133      	bne.n	800af6c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800af04:	69bb      	ldr	r3, [r7, #24]
 800af06:	015a      	lsls	r2, r3, #5
 800af08:	69fb      	ldr	r3, [r7, #28]
 800af0a:	4413      	add	r3, r2
 800af0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	69ba      	ldr	r2, [r7, #24]
 800af14:	0151      	lsls	r1, r2, #5
 800af16:	69fa      	ldr	r2, [r7, #28]
 800af18:	440a      	add	r2, r1
 800af1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800af1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800af22:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	015a      	lsls	r2, r3, #5
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	4413      	add	r3, r2
 800af2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	69ba      	ldr	r2, [r7, #24]
 800af34:	0151      	lsls	r1, r2, #5
 800af36:	69fa      	ldr	r2, [r7, #28]
 800af38:	440a      	add	r2, r1
 800af3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800af3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800af42:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	3301      	adds	r3, #1
 800af48:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800af50:	d81d      	bhi.n	800af8e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	015a      	lsls	r2, r3, #5
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	4413      	add	r3, r2
 800af5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af68:	d0ec      	beq.n	800af44 <USB_HC_Halt+0x1e6>
 800af6a:	e011      	b.n	800af90 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	015a      	lsls	r2, r3, #5
 800af70:	69fb      	ldr	r3, [r7, #28]
 800af72:	4413      	add	r3, r2
 800af74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	69ba      	ldr	r2, [r7, #24]
 800af7c:	0151      	lsls	r1, r2, #5
 800af7e:	69fa      	ldr	r2, [r7, #28]
 800af80:	440a      	add	r2, r1
 800af82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800af86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800af8a:	6013      	str	r3, [r2, #0]
 800af8c:	e000      	b.n	800af90 <USB_HC_Halt+0x232>
          break;
 800af8e:	bf00      	nop
    }
  }

  return HAL_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3724      	adds	r7, #36	@ 0x24
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr
	...

0800afa0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b087      	sub	sp, #28
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	460b      	mov	r3, r1
 800afaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800afb0:	78fb      	ldrb	r3, [r7, #3]
 800afb2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800afb4:	2301      	movs	r3, #1
 800afb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	04da      	lsls	r2, r3, #19
 800afbc:	4b15      	ldr	r3, [pc, #84]	@ (800b014 <USB_DoPing+0x74>)
 800afbe:	4013      	ands	r3, r2
 800afc0:	693a      	ldr	r2, [r7, #16]
 800afc2:	0151      	lsls	r1, r2, #5
 800afc4:	697a      	ldr	r2, [r7, #20]
 800afc6:	440a      	add	r2, r1
 800afc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800afcc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800afd0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	015a      	lsls	r2, r3, #5
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	4413      	add	r3, r2
 800afda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800afe8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aff0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	015a      	lsls	r2, r3, #5
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	4413      	add	r3, r2
 800affa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800affe:	461a      	mov	r2, r3
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	371c      	adds	r7, #28
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr
 800b012:	bf00      	nop
 800b014:	1ff80000 	.word	0x1ff80000

0800b018 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b088      	sub	sp, #32
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b020:	2300      	movs	r3, #0
 800b022:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800b028:	2300      	movs	r3, #0
 800b02a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f7fe ff8c 	bl	8009f4a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b032:	2110      	movs	r1, #16
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f7fe ffe5 	bl	800a004 <USB_FlushTxFifo>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d001      	beq.n	800b044 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800b040:	2301      	movs	r3, #1
 800b042:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f7ff f80f 	bl	800a068 <USB_FlushRxFifo>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d001      	beq.n	800b054 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800b050:	2301      	movs	r3, #1
 800b052:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b054:	2300      	movs	r3, #0
 800b056:	61bb      	str	r3, [r7, #24]
 800b058:	e01f      	b.n	800b09a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800b05a:	69bb      	ldr	r3, [r7, #24]
 800b05c:	015a      	lsls	r2, r3, #5
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	4413      	add	r3, r2
 800b062:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b070:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b078:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b080:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	015a      	lsls	r2, r3, #5
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	4413      	add	r3, r2
 800b08a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b08e:	461a      	mov	r2, r3
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	3301      	adds	r3, #1
 800b098:	61bb      	str	r3, [r7, #24]
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	2b0f      	cmp	r3, #15
 800b09e:	d9dc      	bls.n	800b05a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	61bb      	str	r3, [r7, #24]
 800b0a4:	e034      	b.n	800b110 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	015a      	lsls	r2, r3, #5
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b0bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b0c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b0cc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	015a      	lsls	r2, r3, #5
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0da:	461a      	mov	r2, r3
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b0ec:	d80c      	bhi.n	800b108 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	015a      	lsls	r2, r3, #5
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	4413      	add	r3, r2
 800b0f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b100:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b104:	d0ec      	beq.n	800b0e0 <USB_StopHost+0xc8>
 800b106:	e000      	b.n	800b10a <USB_StopHost+0xf2>
        break;
 800b108:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	3301      	adds	r3, #1
 800b10e:	61bb      	str	r3, [r7, #24]
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	2b0f      	cmp	r3, #15
 800b114:	d9c7      	bls.n	800b0a6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b11c:	461a      	mov	r2, r3
 800b11e:	f04f 33ff 	mov.w	r3, #4294967295
 800b122:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f04f 32ff 	mov.w	r2, #4294967295
 800b12a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f7fe fefb 	bl	8009f28 <USB_EnableGlobalInt>

  return ret;
 800b132:	7ffb      	ldrb	r3, [r7, #31]
}
 800b134:	4618      	mov	r0, r3
 800b136:	3720      	adds	r7, #32
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b13c:	b590      	push	{r4, r7, lr}
 800b13e:	b089      	sub	sp, #36	@ 0x24
 800b140:	af04      	add	r7, sp, #16
 800b142:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800b144:	2301      	movs	r3, #1
 800b146:	2202      	movs	r2, #2
 800b148:	2102      	movs	r1, #2
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 fcd1 	bl	800baf2 <USBH_FindInterface>
 800b150:	4603      	mov	r3, r0
 800b152:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b154:	7bfb      	ldrb	r3, [r7, #15]
 800b156:	2bff      	cmp	r3, #255	@ 0xff
 800b158:	d002      	beq.n	800b160 <USBH_CDC_InterfaceInit+0x24>
 800b15a:	7bfb      	ldrb	r3, [r7, #15]
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d901      	bls.n	800b164 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b160:	2302      	movs	r3, #2
 800b162:	e13d      	b.n	800b3e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800b164:	7bfb      	ldrb	r3, [r7, #15]
 800b166:	4619      	mov	r1, r3
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 fca6 	bl	800baba <USBH_SelectInterface>
 800b16e:	4603      	mov	r3, r0
 800b170:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b172:	7bbb      	ldrb	r3, [r7, #14]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d001      	beq.n	800b17c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800b178:	2302      	movs	r3, #2
 800b17a:	e131      	b.n	800b3e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800b182:	2050      	movs	r0, #80	@ 0x50
 800b184:	f007 f8b4 	bl	80122f0 <malloc>
 800b188:	4603      	mov	r3, r0
 800b18a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b192:	69db      	ldr	r3, [r3, #28]
 800b194:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d101      	bne.n	800b1a0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800b19c:	2302      	movs	r3, #2
 800b19e:	e11f      	b.n	800b3e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800b1a0:	2250      	movs	r2, #80	@ 0x50
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	68b8      	ldr	r0, [r7, #8]
 800b1a6:	f008 fd4e 	bl	8013c46 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b1aa:	7bfb      	ldrb	r3, [r7, #15]
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	211a      	movs	r1, #26
 800b1b0:	fb01 f303 	mul.w	r3, r1, r3
 800b1b4:	4413      	add	r3, r2
 800b1b6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	b25b      	sxtb	r3, r3
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	da15      	bge.n	800b1ee <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b1c2:	7bfb      	ldrb	r3, [r7, #15]
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	211a      	movs	r1, #26
 800b1c8:	fb01 f303 	mul.w	r3, r1, r3
 800b1cc:	4413      	add	r3, r2
 800b1ce:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b1d2:	781a      	ldrb	r2, [r3, #0]
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b1d8:	7bfb      	ldrb	r3, [r7, #15]
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	211a      	movs	r1, #26
 800b1de:	fb01 f303 	mul.w	r3, r1, r3
 800b1e2:	4413      	add	r3, r2
 800b1e4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b1e8:	881a      	ldrh	r2, [r3, #0]
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	785b      	ldrb	r3, [r3, #1]
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f002 fa18 	bl	800d62a <USBH_AllocPipe>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	7819      	ldrb	r1, [r3, #0]
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	7858      	ldrb	r0, [r3, #1]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b216:	68ba      	ldr	r2, [r7, #8]
 800b218:	8952      	ldrh	r2, [r2, #10]
 800b21a:	9202      	str	r2, [sp, #8]
 800b21c:	2203      	movs	r2, #3
 800b21e:	9201      	str	r2, [sp, #4]
 800b220:	9300      	str	r3, [sp, #0]
 800b222:	4623      	mov	r3, r4
 800b224:	4602      	mov	r2, r0
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f002 f9d0 	bl	800d5cc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	2200      	movs	r2, #0
 800b232:	4619      	mov	r1, r3
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f006 ffcd 	bl	80121d4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800b23a:	2300      	movs	r3, #0
 800b23c:	2200      	movs	r2, #0
 800b23e:	210a      	movs	r1, #10
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 fc56 	bl	800baf2 <USBH_FindInterface>
 800b246:	4603      	mov	r3, r0
 800b248:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b24a:	7bfb      	ldrb	r3, [r7, #15]
 800b24c:	2bff      	cmp	r3, #255	@ 0xff
 800b24e:	d002      	beq.n	800b256 <USBH_CDC_InterfaceInit+0x11a>
 800b250:	7bfb      	ldrb	r3, [r7, #15]
 800b252:	2b01      	cmp	r3, #1
 800b254:	d901      	bls.n	800b25a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b256:	2302      	movs	r3, #2
 800b258:	e0c2      	b.n	800b3e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b25a:	7bfb      	ldrb	r3, [r7, #15]
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	211a      	movs	r1, #26
 800b260:	fb01 f303 	mul.w	r3, r1, r3
 800b264:	4413      	add	r3, r2
 800b266:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	b25b      	sxtb	r3, r3
 800b26e:	2b00      	cmp	r3, #0
 800b270:	da16      	bge.n	800b2a0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b272:	7bfb      	ldrb	r3, [r7, #15]
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	211a      	movs	r1, #26
 800b278:	fb01 f303 	mul.w	r3, r1, r3
 800b27c:	4413      	add	r3, r2
 800b27e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b282:	781a      	ldrb	r2, [r3, #0]
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b288:	7bfb      	ldrb	r3, [r7, #15]
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	211a      	movs	r1, #26
 800b28e:	fb01 f303 	mul.w	r3, r1, r3
 800b292:	4413      	add	r3, r2
 800b294:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b298:	881a      	ldrh	r2, [r3, #0]
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	835a      	strh	r2, [r3, #26]
 800b29e:	e015      	b.n	800b2cc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b2a0:	7bfb      	ldrb	r3, [r7, #15]
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	211a      	movs	r1, #26
 800b2a6:	fb01 f303 	mul.w	r3, r1, r3
 800b2aa:	4413      	add	r3, r2
 800b2ac:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b2b0:	781a      	ldrb	r2, [r3, #0]
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b2b6:	7bfb      	ldrb	r3, [r7, #15]
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	211a      	movs	r1, #26
 800b2bc:	fb01 f303 	mul.w	r3, r1, r3
 800b2c0:	4413      	add	r3, r2
 800b2c2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b2c6:	881a      	ldrh	r2, [r3, #0]
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800b2cc:	7bfb      	ldrb	r3, [r7, #15]
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	211a      	movs	r1, #26
 800b2d2:	fb01 f303 	mul.w	r3, r1, r3
 800b2d6:	4413      	add	r3, r2
 800b2d8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	b25b      	sxtb	r3, r3
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	da16      	bge.n	800b312 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b2e4:	7bfb      	ldrb	r3, [r7, #15]
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	211a      	movs	r1, #26
 800b2ea:	fb01 f303 	mul.w	r3, r1, r3
 800b2ee:	4413      	add	r3, r2
 800b2f0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800b2f4:	781a      	ldrb	r2, [r3, #0]
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b2fa:	7bfb      	ldrb	r3, [r7, #15]
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	211a      	movs	r1, #26
 800b300:	fb01 f303 	mul.w	r3, r1, r3
 800b304:	4413      	add	r3, r2
 800b306:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800b30a:	881a      	ldrh	r2, [r3, #0]
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	835a      	strh	r2, [r3, #26]
 800b310:	e015      	b.n	800b33e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b312:	7bfb      	ldrb	r3, [r7, #15]
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	211a      	movs	r1, #26
 800b318:	fb01 f303 	mul.w	r3, r1, r3
 800b31c:	4413      	add	r3, r2
 800b31e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800b322:	781a      	ldrb	r2, [r3, #0]
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b328:	7bfb      	ldrb	r3, [r7, #15]
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	211a      	movs	r1, #26
 800b32e:	fb01 f303 	mul.w	r3, r1, r3
 800b332:	4413      	add	r3, r2
 800b334:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800b338:	881a      	ldrh	r2, [r3, #0]
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	7b9b      	ldrb	r3, [r3, #14]
 800b342:	4619      	mov	r1, r3
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f002 f970 	bl	800d62a <USBH_AllocPipe>
 800b34a:	4603      	mov	r3, r0
 800b34c:	461a      	mov	r2, r3
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	7bdb      	ldrb	r3, [r3, #15]
 800b356:	4619      	mov	r1, r3
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f002 f966 	bl	800d62a <USBH_AllocPipe>
 800b35e:	4603      	mov	r3, r0
 800b360:	461a      	mov	r2, r3
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	7b59      	ldrb	r1, [r3, #13]
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	7b98      	ldrb	r0, [r3, #14]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b37a:	68ba      	ldr	r2, [r7, #8]
 800b37c:	8b12      	ldrh	r2, [r2, #24]
 800b37e:	9202      	str	r2, [sp, #8]
 800b380:	2202      	movs	r2, #2
 800b382:	9201      	str	r2, [sp, #4]
 800b384:	9300      	str	r3, [sp, #0]
 800b386:	4623      	mov	r3, r4
 800b388:	4602      	mov	r2, r0
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f002 f91e 	bl	800d5cc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	7b19      	ldrb	r1, [r3, #12]
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	7bd8      	ldrb	r0, [r3, #15]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b3a4:	68ba      	ldr	r2, [r7, #8]
 800b3a6:	8b52      	ldrh	r2, [r2, #26]
 800b3a8:	9202      	str	r2, [sp, #8]
 800b3aa:	2202      	movs	r2, #2
 800b3ac:	9201      	str	r2, [sp, #4]
 800b3ae:	9300      	str	r3, [sp, #0]
 800b3b0:	4623      	mov	r3, r4
 800b3b2:	4602      	mov	r2, r0
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f002 f909 	bl	800d5cc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	7b5b      	ldrb	r3, [r3, #13]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f006 ff02 	bl	80121d4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	7b1b      	ldrb	r3, [r3, #12]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f006 fefb 	bl	80121d4 <USBH_LL_SetToggle>

  return USBH_OK;
 800b3de:	2300      	movs	r3, #0
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3714      	adds	r7, #20
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd90      	pop	{r4, r7, pc}

0800b3e8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b3f6:	69db      	ldr	r3, [r3, #28]
 800b3f8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d00e      	beq.n	800b420 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	4619      	mov	r1, r3
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f002 f8fe 	bl	800d60a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	4619      	mov	r1, r3
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f002 f929 	bl	800d66c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2200      	movs	r2, #0
 800b41e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	7b1b      	ldrb	r3, [r3, #12]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d00e      	beq.n	800b446 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	7b1b      	ldrb	r3, [r3, #12]
 800b42c:	4619      	mov	r1, r3
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f002 f8eb 	bl	800d60a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	7b1b      	ldrb	r3, [r3, #12]
 800b438:	4619      	mov	r1, r3
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f002 f916 	bl	800d66c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2200      	movs	r2, #0
 800b444:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	7b5b      	ldrb	r3, [r3, #13]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d00e      	beq.n	800b46c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	7b5b      	ldrb	r3, [r3, #13]
 800b452:	4619      	mov	r1, r3
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f002 f8d8 	bl	800d60a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	7b5b      	ldrb	r3, [r3, #13]
 800b45e:	4619      	mov	r1, r3
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f002 f903 	bl	800d66c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2200      	movs	r2, #0
 800b46a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b472:	69db      	ldr	r3, [r3, #28]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d00b      	beq.n	800b490 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b47e:	69db      	ldr	r3, [r3, #28]
 800b480:	4618      	mov	r0, r3
 800b482:	f006 ff3d 	bl	8012300 <free>
    phost->pActiveClass->pData = 0U;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b48c:	2200      	movs	r2, #0
 800b48e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b490:	2300      	movs	r3, #0
}
 800b492:	4618      	mov	r0, r3
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b084      	sub	sp, #16
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b4a8:	69db      	ldr	r3, [r3, #28]
 800b4aa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	3340      	adds	r3, #64	@ 0x40
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 f8b1 	bl	800b61a <GetLineCoding>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b4bc:	7afb      	ldrb	r3, [r7, #11]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d105      	bne.n	800b4ce <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b4c8:	2102      	movs	r1, #2
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b4ce:	7afb      	ldrb	r3, [r7, #11]
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3710      	adds	r7, #16
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b4ee:	69db      	ldr	r3, [r3, #28]
 800b4f0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800b4f8:	2b04      	cmp	r3, #4
 800b4fa:	d877      	bhi.n	800b5ec <USBH_CDC_Process+0x114>
 800b4fc:	a201      	add	r2, pc, #4	@ (adr r2, 800b504 <USBH_CDC_Process+0x2c>)
 800b4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b502:	bf00      	nop
 800b504:	0800b519 	.word	0x0800b519
 800b508:	0800b51f 	.word	0x0800b51f
 800b50c:	0800b54f 	.word	0x0800b54f
 800b510:	0800b5c3 	.word	0x0800b5c3
 800b514:	0800b5d1 	.word	0x0800b5d1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b518:	2300      	movs	r3, #0
 800b51a:	73fb      	strb	r3, [r7, #15]
      break;
 800b51c:	e06d      	b.n	800b5fa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b522:	4619      	mov	r1, r3
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f000 f897 	bl	800b658 <SetLineCoding>
 800b52a:	4603      	mov	r3, r0
 800b52c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b52e:	7bbb      	ldrb	r3, [r7, #14]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d104      	bne.n	800b53e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	2202      	movs	r2, #2
 800b538:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b53c:	e058      	b.n	800b5f0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b53e:	7bbb      	ldrb	r3, [r7, #14]
 800b540:	2b01      	cmp	r3, #1
 800b542:	d055      	beq.n	800b5f0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	2204      	movs	r2, #4
 800b548:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800b54c:	e050      	b.n	800b5f0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	3340      	adds	r3, #64	@ 0x40
 800b552:	4619      	mov	r1, r3
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 f860 	bl	800b61a <GetLineCoding>
 800b55a:	4603      	mov	r3, r0
 800b55c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b55e:	7bbb      	ldrb	r3, [r7, #14]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d126      	bne.n	800b5b2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	2200      	movs	r2, #0
 800b568:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b576:	791b      	ldrb	r3, [r3, #4]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d13b      	bne.n	800b5f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b586:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b588:	429a      	cmp	r2, r3
 800b58a:	d133      	bne.n	800b5f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b596:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b598:	429a      	cmp	r2, r3
 800b59a:	d12b      	bne.n	800b5f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b5a4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d124      	bne.n	800b5f4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 f982 	bl	800b8b4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b5b0:	e020      	b.n	800b5f4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800b5b2:	7bbb      	ldrb	r3, [r7, #14]
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d01d      	beq.n	800b5f4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	2204      	movs	r2, #4
 800b5bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800b5c0:	e018      	b.n	800b5f4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 f867 	bl	800b696 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 f8f6 	bl	800b7ba <CDC_ProcessReception>
      break;
 800b5ce:	e014      	b.n	800b5fa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f001 f984 	bl	800c8e0 <USBH_ClrFeature>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b5dc:	7bbb      	ldrb	r3, [r7, #14]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d10a      	bne.n	800b5f8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800b5ea:	e005      	b.n	800b5f8 <USBH_CDC_Process+0x120>

    default:
      break;
 800b5ec:	bf00      	nop
 800b5ee:	e004      	b.n	800b5fa <USBH_CDC_Process+0x122>
      break;
 800b5f0:	bf00      	nop
 800b5f2:	e002      	b.n	800b5fa <USBH_CDC_Process+0x122>
      break;
 800b5f4:	bf00      	nop
 800b5f6:	e000      	b.n	800b5fa <USBH_CDC_Process+0x122>
      break;
 800b5f8:	bf00      	nop

  }

  return status;
 800b5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3710      	adds	r7, #16
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b60c:	2300      	movs	r3, #0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	370c      	adds	r7, #12
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr

0800b61a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b082      	sub	sp, #8
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
 800b622:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	22a1      	movs	r2, #161	@ 0xa1
 800b628:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2221      	movs	r2, #33	@ 0x21
 800b62e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2207      	movs	r2, #7
 800b640:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	2207      	movs	r2, #7
 800b646:	4619      	mov	r1, r3
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f001 fc7e 	bl	800cf4a <USBH_CtlReq>
 800b64e:	4603      	mov	r3, r0
}
 800b650:	4618      	mov	r0, r3
 800b652:	3708      	adds	r7, #8
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2221      	movs	r2, #33	@ 0x21
 800b666:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2220      	movs	r2, #32
 800b66c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2207      	movs	r2, #7
 800b67e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	2207      	movs	r2, #7
 800b684:	4619      	mov	r1, r3
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f001 fc5f 	bl	800cf4a <USBH_CtlReq>
 800b68c:	4603      	mov	r3, r0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3708      	adds	r7, #8
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b696:	b580      	push	{r7, lr}
 800b698:	b086      	sub	sp, #24
 800b69a:	af02      	add	r7, sp, #8
 800b69c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b6a4:	69db      	ldr	r3, [r3, #28]
 800b6a6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d002      	beq.n	800b6bc <CDC_ProcessTransmission+0x26>
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d023      	beq.n	800b702 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800b6ba:	e07a      	b.n	800b7b2 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	8b12      	ldrh	r2, [r2, #24]
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d90b      	bls.n	800b6e0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	69d9      	ldr	r1, [r3, #28]
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	8b1a      	ldrh	r2, [r3, #24]
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	7b5b      	ldrb	r3, [r3, #13]
 800b6d4:	2001      	movs	r0, #1
 800b6d6:	9000      	str	r0, [sp, #0]
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f001 ff34 	bl	800d546 <USBH_BulkSendData>
 800b6de:	e00b      	b.n	800b6f8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800b6e8:	b29a      	uxth	r2, r3
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	7b5b      	ldrb	r3, [r3, #13]
 800b6ee:	2001      	movs	r0, #1
 800b6f0:	9000      	str	r0, [sp, #0]
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f001 ff27 	bl	800d546 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2202      	movs	r2, #2
 800b6fc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800b700:	e057      	b.n	800b7b2 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	7b5b      	ldrb	r3, [r3, #13]
 800b706:	4619      	mov	r1, r3
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f006 fd39 	bl	8012180 <USBH_LL_GetURBState>
 800b70e:	4603      	mov	r3, r0
 800b710:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800b712:	7afb      	ldrb	r3, [r7, #11]
 800b714:	2b01      	cmp	r3, #1
 800b716:	d136      	bne.n	800b786 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b71c:	68fa      	ldr	r2, [r7, #12]
 800b71e:	8b12      	ldrh	r2, [r2, #24]
 800b720:	4293      	cmp	r3, r2
 800b722:	d90e      	bls.n	800b742 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	8b12      	ldrh	r2, [r2, #24]
 800b72c:	1a9a      	subs	r2, r3, r2
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	69db      	ldr	r3, [r3, #28]
 800b736:	68fa      	ldr	r2, [r7, #12]
 800b738:	8b12      	ldrh	r2, [r2, #24]
 800b73a:	441a      	add	r2, r3
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	61da      	str	r2, [r3, #28]
 800b740:	e002      	b.n	800b748 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2200      	movs	r2, #0
 800b746:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d004      	beq.n	800b75a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2201      	movs	r2, #1
 800b754:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800b758:	e006      	b.n	800b768 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 f892 	bl	800b88c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2204      	movs	r2, #4
 800b76c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b77c:	2300      	movs	r3, #0
 800b77e:	2200      	movs	r2, #0
 800b780:	f002 f9a2 	bl	800dac8 <osMessageQueuePut>
      break;
 800b784:	e014      	b.n	800b7b0 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800b786:	7afb      	ldrb	r3, [r7, #11]
 800b788:	2b02      	cmp	r3, #2
 800b78a:	d111      	bne.n	800b7b0 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2201      	movs	r2, #1
 800b790:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2204      	movs	r2, #4
 800b798:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f002 f98c 	bl	800dac8 <osMessageQueuePut>
      break;
 800b7b0:	bf00      	nop
  }
}
 800b7b2:	bf00      	nop
 800b7b4:	3710      	adds	r7, #16
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b086      	sub	sp, #24
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b7c8:	69db      	ldr	r3, [r3, #28]
 800b7ca:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800b7d6:	2b03      	cmp	r3, #3
 800b7d8:	d002      	beq.n	800b7e0 <CDC_ProcessReception+0x26>
 800b7da:	2b04      	cmp	r3, #4
 800b7dc:	d00e      	beq.n	800b7fc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800b7de:	e051      	b.n	800b884 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	6a19      	ldr	r1, [r3, #32]
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	8b5a      	ldrh	r2, [r3, #26]
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	7b1b      	ldrb	r3, [r3, #12]
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f001 fecf 	bl	800d590 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	2204      	movs	r2, #4
 800b7f6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800b7fa:	e043      	b.n	800b884 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	7b1b      	ldrb	r3, [r3, #12]
 800b800:	4619      	mov	r1, r3
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f006 fcbc 	bl	8012180 <USBH_LL_GetURBState>
 800b808:	4603      	mov	r3, r0
 800b80a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800b80c:	7cfb      	ldrb	r3, [r7, #19]
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d137      	bne.n	800b882 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	7b1b      	ldrb	r3, [r3, #12]
 800b816:	4619      	mov	r1, r3
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f006 fc1f 	bl	801205c <USBH_LL_GetLastXferSize>
 800b81e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	429a      	cmp	r2, r3
 800b828:	d016      	beq.n	800b858 <CDC_ProcessReception+0x9e>
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	8b5b      	ldrh	r3, [r3, #26]
 800b82e:	461a      	mov	r2, r3
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	4293      	cmp	r3, r2
 800b834:	d910      	bls.n	800b858 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	1ad2      	subs	r2, r2, r3
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	6a1a      	ldr	r2, [r3, #32]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	441a      	add	r2, r3
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	2203      	movs	r2, #3
 800b852:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800b856:	e006      	b.n	800b866 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	2200      	movs	r2, #0
 800b85c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f000 f81d 	bl	800b8a0 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2204      	movs	r2, #4
 800b86a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b87a:	2300      	movs	r3, #0
 800b87c:	2200      	movs	r2, #0
 800b87e:	f002 f923 	bl	800dac8 <osMessageQueuePut>
      break;
 800b882:	bf00      	nop
  }
}
 800b884:	bf00      	nop
 800b886:	3718      	adds	r7, #24
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b894:	bf00      	nop
 800b896:	370c      	adds	r7, #12
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b8a8:	bf00      	nop
 800b8aa:	370c      	adds	r7, #12
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b8bc:	bf00      	nop
 800b8be:	370c      	adds	r7, #12
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	60f8      	str	r0, [r7, #12]
 800b8d0:	60b9      	str	r1, [r7, #8]
 800b8d2:	4613      	mov	r3, r2
 800b8d4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d101      	bne.n	800b8e0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b8dc:	2302      	movs	r3, #2
 800b8de:	e044      	b.n	800b96a <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	79fa      	ldrb	r2, [r7, #7]
 800b8e4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b8f8:	68f8      	ldr	r0, [r7, #12]
 800b8fa:	f000 f841 	bl	800b980 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2200      	movs	r2, #0
 800b902:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2200      	movs	r2, #0
 800b90a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2200      	movs	r2, #0
 800b912:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2200      	movs	r2, #0
 800b91a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d003      	beq.n	800b92c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	68ba      	ldr	r2, [r7, #8]
 800b928:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800b92c:	2200      	movs	r2, #0
 800b92e:	2104      	movs	r1, #4
 800b930:	2010      	movs	r0, #16
 800b932:	f002 f856 	bl	800d9e2 <osMessageQueueNew>
 800b936:	4602      	mov	r2, r0
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800b93e:	4b0d      	ldr	r3, [pc, #52]	@ (800b974 <USBH_Init+0xac>)
 800b940:	4a0d      	ldr	r2, [pc, #52]	@ (800b978 <USBH_Init+0xb0>)
 800b942:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800b944:	4b0b      	ldr	r3, [pc, #44]	@ (800b974 <USBH_Init+0xac>)
 800b946:	2280      	movs	r2, #128	@ 0x80
 800b948:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800b94a:	4b0a      	ldr	r3, [pc, #40]	@ (800b974 <USBH_Init+0xac>)
 800b94c:	2218      	movs	r2, #24
 800b94e:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800b950:	4a08      	ldr	r2, [pc, #32]	@ (800b974 <USBH_Init+0xac>)
 800b952:	68f9      	ldr	r1, [r7, #12]
 800b954:	4809      	ldr	r0, [pc, #36]	@ (800b97c <USBH_Init+0xb4>)
 800b956:	f001 ff97 	bl	800d888 <osThreadNew>
 800b95a:	4602      	mov	r2, r0
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b962:	68f8      	ldr	r0, [r7, #12]
 800b964:	f006 fac6 	bl	8011ef4 <USBH_LL_Init>

  return USBH_OK;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	2000c8b0 	.word	0x2000c8b0
 800b978:	08018978 	.word	0x08018978
 800b97c:	0800c631 	.word	0x0800c631

0800b980 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b988:	2300      	movs	r3, #0
 800b98a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b98c:	2300      	movs	r3, #0
 800b98e:	60fb      	str	r3, [r7, #12]
 800b990:	e009      	b.n	800b9a6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	33e0      	adds	r3, #224	@ 0xe0
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	4413      	add	r3, r2
 800b99c:	2200      	movs	r2, #0
 800b99e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	60fb      	str	r3, [r7, #12]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2b0f      	cmp	r3, #15
 800b9aa:	d9f2      	bls.n	800b992 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	60fb      	str	r3, [r7, #12]
 800b9b0:	e009      	b.n	800b9c6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	4413      	add	r3, r2
 800b9b8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b9bc:	2200      	movs	r2, #0
 800b9be:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	60fb      	str	r3, [r7, #12]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9cc:	d3f1      	bcc.n	800b9b2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2240      	movs	r2, #64	@ 0x40
 800b9f2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2201      	movs	r2, #1
 800ba06:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2200      	movs	r2, #0
 800ba16:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	331c      	adds	r3, #28
 800ba1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ba22:	2100      	movs	r1, #0
 800ba24:	4618      	mov	r0, r3
 800ba26:	f008 f90e 	bl	8013c46 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ba30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ba34:	2100      	movs	r1, #0
 800ba36:	4618      	mov	r0, r3
 800ba38:	f008 f905 	bl	8013c46 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800ba42:	2212      	movs	r2, #18
 800ba44:	2100      	movs	r1, #0
 800ba46:	4618      	mov	r0, r3
 800ba48:	f008 f8fd 	bl	8013c46 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800ba52:	223e      	movs	r2, #62	@ 0x3e
 800ba54:	2100      	movs	r1, #0
 800ba56:	4618      	mov	r0, r3
 800ba58:	f008 f8f5 	bl	8013c46 <memset>

  return USBH_OK;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3710      	adds	r7, #16
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}

0800ba66 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ba66:	b480      	push	{r7}
 800ba68:	b085      	sub	sp, #20
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
 800ba6e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ba70:	2300      	movs	r3, #0
 800ba72:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d016      	beq.n	800baa8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d10e      	bne.n	800baa2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ba8a:	1c59      	adds	r1, r3, #1
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	33de      	adds	r3, #222	@ 0xde
 800ba96:	6839      	ldr	r1, [r7, #0]
 800ba98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	73fb      	strb	r3, [r7, #15]
 800baa0:	e004      	b.n	800baac <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800baa2:	2302      	movs	r3, #2
 800baa4:	73fb      	strb	r3, [r7, #15]
 800baa6:	e001      	b.n	800baac <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800baa8:	2302      	movs	r3, #2
 800baaa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800baac:	7bfb      	ldrb	r3, [r7, #15]
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3714      	adds	r7, #20
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr

0800baba <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800baba:	b480      	push	{r7}
 800babc:	b085      	sub	sp, #20
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
 800bac2:	460b      	mov	r3, r1
 800bac4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800bac6:	2300      	movs	r3, #0
 800bac8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800bad0:	78fa      	ldrb	r2, [r7, #3]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d204      	bcs.n	800bae0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	78fa      	ldrb	r2, [r7, #3]
 800bada:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800bade:	e001      	b.n	800bae4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800bae0:	2302      	movs	r3, #2
 800bae2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3714      	adds	r7, #20
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr

0800baf2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800baf2:	b480      	push	{r7}
 800baf4:	b087      	sub	sp, #28
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
 800bafa:	4608      	mov	r0, r1
 800bafc:	4611      	mov	r1, r2
 800bafe:	461a      	mov	r2, r3
 800bb00:	4603      	mov	r3, r0
 800bb02:	70fb      	strb	r3, [r7, #3]
 800bb04:	460b      	mov	r3, r1
 800bb06:	70bb      	strb	r3, [r7, #2]
 800bb08:	4613      	mov	r3, r2
 800bb0a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bb10:	2300      	movs	r3, #0
 800bb12:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800bb1a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bb1c:	e025      	b.n	800bb6a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800bb1e:	7dfb      	ldrb	r3, [r7, #23]
 800bb20:	221a      	movs	r2, #26
 800bb22:	fb02 f303 	mul.w	r3, r2, r3
 800bb26:	3308      	adds	r3, #8
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	4413      	add	r3, r2
 800bb2c:	3302      	adds	r3, #2
 800bb2e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	795b      	ldrb	r3, [r3, #5]
 800bb34:	78fa      	ldrb	r2, [r7, #3]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d002      	beq.n	800bb40 <USBH_FindInterface+0x4e>
 800bb3a:	78fb      	ldrb	r3, [r7, #3]
 800bb3c:	2bff      	cmp	r3, #255	@ 0xff
 800bb3e:	d111      	bne.n	800bb64 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bb44:	78ba      	ldrb	r2, [r7, #2]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d002      	beq.n	800bb50 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bb4a:	78bb      	ldrb	r3, [r7, #2]
 800bb4c:	2bff      	cmp	r3, #255	@ 0xff
 800bb4e:	d109      	bne.n	800bb64 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bb54:	787a      	ldrb	r2, [r7, #1]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d002      	beq.n	800bb60 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bb5a:	787b      	ldrb	r3, [r7, #1]
 800bb5c:	2bff      	cmp	r3, #255	@ 0xff
 800bb5e:	d101      	bne.n	800bb64 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800bb60:	7dfb      	ldrb	r3, [r7, #23]
 800bb62:	e006      	b.n	800bb72 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bb64:	7dfb      	ldrb	r3, [r7, #23]
 800bb66:	3301      	adds	r3, #1
 800bb68:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bb6a:	7dfb      	ldrb	r3, [r7, #23]
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	d9d6      	bls.n	800bb1e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bb70:	23ff      	movs	r3, #255	@ 0xff
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	371c      	adds	r7, #28
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr

0800bb7e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b082      	sub	sp, #8
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f006 f9f0 	bl	8011f6c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800bb8c:	2101      	movs	r1, #1
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f006 fb09 	bl	80121a6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800bb94:	2300      	movs	r3, #0
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3708      	adds	r7, #8
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
	...

0800bba0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b088      	sub	sp, #32
 800bba4:	af04      	add	r7, sp, #16
 800bba6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800bba8:	2302      	movs	r3, #2
 800bbaa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800bbac:	2300      	movs	r3, #0
 800bbae:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d102      	bne.n	800bbc2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2203      	movs	r2, #3
 800bbc0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	2b0b      	cmp	r3, #11
 800bbca:	f200 8244 	bhi.w	800c056 <USBH_Process+0x4b6>
 800bbce:	a201      	add	r2, pc, #4	@ (adr r2, 800bbd4 <USBH_Process+0x34>)
 800bbd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd4:	0800bc05 	.word	0x0800bc05
 800bbd8:	0800bc53 	.word	0x0800bc53
 800bbdc:	0800bcd7 	.word	0x0800bcd7
 800bbe0:	0800bfd5 	.word	0x0800bfd5
 800bbe4:	0800c057 	.word	0x0800c057
 800bbe8:	0800bd93 	.word	0x0800bd93
 800bbec:	0800bf5f 	.word	0x0800bf5f
 800bbf0:	0800bde5 	.word	0x0800bde5
 800bbf4:	0800be21 	.word	0x0800be21
 800bbf8:	0800be59 	.word	0x0800be59
 800bbfc:	0800beb7 	.word	0x0800beb7
 800bc00:	0800bfbd 	.word	0x0800bfbd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f000 8224 	beq.w	800c05a <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2201      	movs	r2, #1
 800bc16:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800bc18:	20c8      	movs	r0, #200	@ 0xc8
 800bc1a:	f006 fb0e 	bl	801223a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f006 fa01 	bl	8012026 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2200      	movs	r2, #0
 800bc28:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2201      	movs	r2, #1
 800bc38:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bc48:	2300      	movs	r3, #0
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f001 ff3c 	bl	800dac8 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800bc50:	e203      	b.n	800c05a <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d107      	bne.n	800bc6c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2202      	movs	r2, #2
 800bc68:	701a      	strb	r2, [r3, #0]
 800bc6a:	e025      	b.n	800bcb8 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800bc72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bc76:	d914      	bls.n	800bca2 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800bc7e:	3301      	adds	r3, #1
 800bc80:	b2da      	uxtb	r2, r3
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800bc8e:	2b03      	cmp	r3, #3
 800bc90:	d903      	bls.n	800bc9a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	220d      	movs	r2, #13
 800bc96:	701a      	strb	r2, [r3, #0]
 800bc98:	e00e      	b.n	800bcb8 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	701a      	strb	r2, [r3, #0]
 800bca0:	e00a      	b.n	800bcb8 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800bca8:	f103 020a 	add.w	r2, r3, #10
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800bcb2:	200a      	movs	r0, #10
 800bcb4:	f006 fac1 	bl	801223a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bccc:	2300      	movs	r3, #0
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f001 fefa 	bl	800dac8 <osMessageQueuePut>
#endif
#endif
      break;
 800bcd4:	e1c8      	b.n	800c068 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d005      	beq.n	800bcec <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bce6:	2104      	movs	r1, #4
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800bcec:	2064      	movs	r0, #100	@ 0x64
 800bcee:	f006 faa4 	bl	801223a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f006 f970 	bl	8011fd8 <USBH_LL_GetSpeed>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2205      	movs	r2, #5
 800bd06:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800bd08:	2100      	movs	r1, #0
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f001 fc8d 	bl	800d62a <USBH_AllocPipe>
 800bd10:	4603      	mov	r3, r0
 800bd12:	461a      	mov	r2, r3
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800bd18:	2180      	movs	r1, #128	@ 0x80
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f001 fc85 	bl	800d62a <USBH_AllocPipe>
 800bd20:	4603      	mov	r3, r0
 800bd22:	461a      	mov	r2, r3
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	7919      	ldrb	r1, [r3, #4]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bd3c:	9202      	str	r2, [sp, #8]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	9201      	str	r2, [sp, #4]
 800bd42:	9300      	str	r3, [sp, #0]
 800bd44:	4603      	mov	r3, r0
 800bd46:	2280      	movs	r2, #128	@ 0x80
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f001 fc3f 	bl	800d5cc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	7959      	ldrb	r1, [r3, #5]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bd62:	9202      	str	r2, [sp, #8]
 800bd64:	2200      	movs	r2, #0
 800bd66:	9201      	str	r2, [sp, #4]
 800bd68:	9300      	str	r3, [sp, #0]
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f001 fc2c 	bl	800d5cc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2201      	movs	r2, #1
 800bd78:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bd88:	2300      	movs	r3, #0
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f001 fe9c 	bl	800dac8 <osMessageQueuePut>
#endif
#endif
      break;
 800bd90:	e16a      	b.n	800c068 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 f96e 	bl	800c074 <USBH_HandleEnum>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800bd9c:	7bbb      	ldrb	r3, [r7, #14]
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f040 815c 	bne.w	800c05e <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d103      	bne.n	800bdc0 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2208      	movs	r2, #8
 800bdbc:	701a      	strb	r2, [r3, #0]
 800bdbe:	e002      	b.n	800bdc6 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2207      	movs	r2, #7
 800bdc4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2205      	movs	r2, #5
 800bdca:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bdda:	2300      	movs	r3, #0
 800bddc:	2200      	movs	r2, #0
 800bdde:	f001 fe73 	bl	800dac8 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800bde2:	e13c      	b.n	800c05e <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	f000 8139 	beq.w	800c062 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bdf6:	2101      	movs	r1, #1
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2208      	movs	r2, #8
 800be00:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2205      	movs	r2, #5
 800be06:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800be16:	2300      	movs	r3, #0
 800be18:	2200      	movs	r2, #0
 800be1a:	f001 fe55 	bl	800dac8 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800be1e:	e120      	b.n	800c062 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800be26:	4619      	mov	r1, r3
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fd12 	bl	800c852 <USBH_SetCfg>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d102      	bne.n	800be3a <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2209      	movs	r2, #9
 800be38:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2201      	movs	r2, #1
 800be3e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800be4e:	2300      	movs	r3, #0
 800be50:	2200      	movs	r2, #0
 800be52:	f001 fe39 	bl	800dac8 <osMessageQueuePut>
#endif
#endif
      break;
 800be56:	e107      	b.n	800c068 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800be5e:	f003 0320 	and.w	r3, r3, #32
 800be62:	2b00      	cmp	r3, #0
 800be64:	d015      	beq.n	800be92 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800be66:	2101      	movs	r1, #1
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 fd15 	bl	800c898 <USBH_SetFeature>
 800be6e:	4603      	mov	r3, r0
 800be70:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800be72:	7bbb      	ldrb	r3, [r7, #14]
 800be74:	b2db      	uxtb	r3, r3
 800be76:	2b00      	cmp	r3, #0
 800be78:	d103      	bne.n	800be82 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	220a      	movs	r2, #10
 800be7e:	701a      	strb	r2, [r3, #0]
 800be80:	e00a      	b.n	800be98 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800be82:	7bbb      	ldrb	r3, [r7, #14]
 800be84:	b2db      	uxtb	r3, r3
 800be86:	2b03      	cmp	r3, #3
 800be88:	d106      	bne.n	800be98 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	220a      	movs	r2, #10
 800be8e:	701a      	strb	r2, [r3, #0]
 800be90:	e002      	b.n	800be98 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	220a      	movs	r2, #10
 800be96:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2201      	movs	r2, #1
 800be9c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800beac:	2300      	movs	r3, #0
 800beae:	2200      	movs	r2, #0
 800beb0:	f001 fe0a 	bl	800dac8 <osMessageQueuePut>
#endif
#endif
      break;
 800beb4:	e0d8      	b.n	800c068 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d03f      	beq.n	800bf40 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bec8:	2300      	movs	r3, #0
 800beca:	73fb      	strb	r3, [r7, #15]
 800becc:	e016      	b.n	800befc <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800bece:	7bfa      	ldrb	r2, [r7, #15]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	32de      	adds	r2, #222	@ 0xde
 800bed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bed8:	791a      	ldrb	r2, [r3, #4]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d108      	bne.n	800bef6 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800bee4:	7bfa      	ldrb	r2, [r7, #15]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	32de      	adds	r2, #222	@ 0xde
 800beea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800bef4:	e005      	b.n	800bf02 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bef6:	7bfb      	ldrb	r3, [r7, #15]
 800bef8:	3301      	adds	r3, #1
 800befa:	73fb      	strb	r3, [r7, #15]
 800befc:	7bfb      	ldrb	r3, [r7, #15]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d0e5      	beq.n	800bece <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d016      	beq.n	800bf3a <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	4798      	blx	r3
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d109      	bne.n	800bf32 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2206      	movs	r2, #6
 800bf22:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bf2a:	2103      	movs	r1, #3
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	4798      	blx	r3
 800bf30:	e006      	b.n	800bf40 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	220d      	movs	r2, #13
 800bf36:	701a      	strb	r2, [r3, #0]
 800bf38:	e002      	b.n	800bf40 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	220d      	movs	r2, #13
 800bf3e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2205      	movs	r2, #5
 800bf44:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bf54:	2300      	movs	r3, #0
 800bf56:	2200      	movs	r2, #0
 800bf58:	f001 fdb6 	bl	800dac8 <osMessageQueuePut>
#endif
#endif
      break;
 800bf5c:	e084      	b.n	800c068 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d017      	beq.n	800bf98 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf6e:	691b      	ldr	r3, [r3, #16]
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	4798      	blx	r3
 800bf74:	4603      	mov	r3, r0
 800bf76:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bf78:	7bbb      	ldrb	r3, [r7, #14]
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d103      	bne.n	800bf88 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	220b      	movs	r2, #11
 800bf84:	701a      	strb	r2, [r3, #0]
 800bf86:	e00a      	b.n	800bf9e <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800bf88:	7bbb      	ldrb	r3, [r7, #14]
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	2b02      	cmp	r3, #2
 800bf8e:	d106      	bne.n	800bf9e <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	220d      	movs	r2, #13
 800bf94:	701a      	strb	r2, [r3, #0]
 800bf96:	e002      	b.n	800bf9e <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	220d      	movs	r2, #13
 800bf9c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2205      	movs	r2, #5
 800bfa2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	f001 fd87 	bl	800dac8 <osMessageQueuePut>
#endif
#endif
      break;
 800bfba:	e055      	b.n	800c068 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d04f      	beq.n	800c066 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bfcc:	695b      	ldr	r3, [r3, #20]
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	4798      	blx	r3
      }
      break;
 800bfd2:	e048      	b.n	800c066 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f7ff fccf 	bl	800b980 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d009      	beq.n	800c000 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2200      	movs	r2, #0
 800bffc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c006:	2b00      	cmp	r3, #0
 800c008:	d005      	beq.n	800c016 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c010:	2105      	movs	r1, #5
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	2b01      	cmp	r3, #1
 800c020:	d107      	bne.n	800c032 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f7ff fda7 	bl	800bb7e <USBH_Start>
 800c030:	e002      	b.n	800c038 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f005 ff9a 	bl	8011f6c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c04c:	2300      	movs	r3, #0
 800c04e:	2200      	movs	r2, #0
 800c050:	f001 fd3a 	bl	800dac8 <osMessageQueuePut>
#endif
#endif
      break;
 800c054:	e008      	b.n	800c068 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800c056:	bf00      	nop
 800c058:	e006      	b.n	800c068 <USBH_Process+0x4c8>
      break;
 800c05a:	bf00      	nop
 800c05c:	e004      	b.n	800c068 <USBH_Process+0x4c8>
      break;
 800c05e:	bf00      	nop
 800c060:	e002      	b.n	800c068 <USBH_Process+0x4c8>
    break;
 800c062:	bf00      	nop
 800c064:	e000      	b.n	800c068 <USBH_Process+0x4c8>
      break;
 800c066:	bf00      	nop
  }
  return USBH_OK;
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop

0800c074 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b088      	sub	sp, #32
 800c078:	af04      	add	r7, sp, #16
 800c07a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c07c:	2301      	movs	r3, #1
 800c07e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c080:	2301      	movs	r3, #1
 800c082:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	785b      	ldrb	r3, [r3, #1]
 800c088:	2b07      	cmp	r3, #7
 800c08a:	f200 8204 	bhi.w	800c496 <USBH_HandleEnum+0x422>
 800c08e:	a201      	add	r2, pc, #4	@ (adr r2, 800c094 <USBH_HandleEnum+0x20>)
 800c090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c094:	0800c0b5 	.word	0x0800c0b5
 800c098:	0800c16f 	.word	0x0800c16f
 800c09c:	0800c1d9 	.word	0x0800c1d9
 800c0a0:	0800c263 	.word	0x0800c263
 800c0a4:	0800c2cd 	.word	0x0800c2cd
 800c0a8:	0800c33d 	.word	0x0800c33d
 800c0ac:	0800c3d9 	.word	0x0800c3d9
 800c0b0:	0800c457 	.word	0x0800c457
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c0b4:	2108      	movs	r1, #8
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 fae8 	bl	800c68c <USBH_Get_DevDesc>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c0c0:	7bbb      	ldrb	r3, [r7, #14]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d12e      	bne.n	800c124 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	7919      	ldrb	r1, [r3, #4]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c0ea:	9202      	str	r2, [sp, #8]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	9201      	str	r2, [sp, #4]
 800c0f0:	9300      	str	r3, [sp, #0]
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	2280      	movs	r2, #128	@ 0x80
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f001 fa68 	bl	800d5cc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	7959      	ldrb	r1, [r3, #5]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c110:	9202      	str	r2, [sp, #8]
 800c112:	2200      	movs	r2, #0
 800c114:	9201      	str	r2, [sp, #4]
 800c116:	9300      	str	r3, [sp, #0]
 800c118:	4603      	mov	r3, r0
 800c11a:	2200      	movs	r2, #0
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f001 fa55 	bl	800d5cc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c122:	e1ba      	b.n	800c49a <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c124:	7bbb      	ldrb	r3, [r7, #14]
 800c126:	2b03      	cmp	r3, #3
 800c128:	f040 81b7 	bne.w	800c49a <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c132:	3301      	adds	r3, #1
 800c134:	b2da      	uxtb	r2, r3
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c142:	2b03      	cmp	r3, #3
 800c144:	d903      	bls.n	800c14e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	220d      	movs	r2, #13
 800c14a:	701a      	strb	r2, [r3, #0]
      break;
 800c14c:	e1a5      	b.n	800c49a <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	795b      	ldrb	r3, [r3, #5]
 800c152:	4619      	mov	r1, r3
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f001 fa89 	bl	800d66c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	791b      	ldrb	r3, [r3, #4]
 800c15e:	4619      	mov	r1, r3
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f001 fa83 	bl	800d66c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2200      	movs	r2, #0
 800c16a:	701a      	strb	r2, [r3, #0]
      break;
 800c16c:	e195      	b.n	800c49a <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c16e:	2112      	movs	r1, #18
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 fa8b 	bl	800c68c <USBH_Get_DevDesc>
 800c176:	4603      	mov	r3, r0
 800c178:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c17a:	7bbb      	ldrb	r3, [r7, #14]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d103      	bne.n	800c188 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2202      	movs	r2, #2
 800c184:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c186:	e18a      	b.n	800c49e <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c188:	7bbb      	ldrb	r3, [r7, #14]
 800c18a:	2b03      	cmp	r3, #3
 800c18c:	f040 8187 	bne.w	800c49e <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c196:	3301      	adds	r3, #1
 800c198:	b2da      	uxtb	r2, r3
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c1a6:	2b03      	cmp	r3, #3
 800c1a8:	d903      	bls.n	800c1b2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	220d      	movs	r2, #13
 800c1ae:	701a      	strb	r2, [r3, #0]
      break;
 800c1b0:	e175      	b.n	800c49e <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	795b      	ldrb	r3, [r3, #5]
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f001 fa57 	bl	800d66c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	791b      	ldrb	r3, [r3, #4]
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f001 fa51 	bl	800d66c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	701a      	strb	r2, [r3, #0]
      break;
 800c1d6:	e162      	b.n	800c49e <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c1d8:	2101      	movs	r1, #1
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 fb15 	bl	800c80a <USBH_SetAddress>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c1e4:	7bbb      	ldrb	r3, [r7, #14]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d130      	bne.n	800c24c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800c1ea:	2002      	movs	r0, #2
 800c1ec:	f006 f825 	bl	801223a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2203      	movs	r2, #3
 800c1fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	7919      	ldrb	r1, [r3, #4]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c212:	9202      	str	r2, [sp, #8]
 800c214:	2200      	movs	r2, #0
 800c216:	9201      	str	r2, [sp, #4]
 800c218:	9300      	str	r3, [sp, #0]
 800c21a:	4603      	mov	r3, r0
 800c21c:	2280      	movs	r2, #128	@ 0x80
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f001 f9d4 	bl	800d5cc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	7959      	ldrb	r1, [r3, #5]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c238:	9202      	str	r2, [sp, #8]
 800c23a:	2200      	movs	r2, #0
 800c23c:	9201      	str	r2, [sp, #4]
 800c23e:	9300      	str	r3, [sp, #0]
 800c240:	4603      	mov	r3, r0
 800c242:	2200      	movs	r2, #0
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f001 f9c1 	bl	800d5cc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c24a:	e12a      	b.n	800c4a2 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c24c:	7bbb      	ldrb	r3, [r7, #14]
 800c24e:	2b03      	cmp	r3, #3
 800c250:	f040 8127 	bne.w	800c4a2 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	220d      	movs	r2, #13
 800c258:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	705a      	strb	r2, [r3, #1]
      break;
 800c260:	e11f      	b.n	800c4a2 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c262:	2109      	movs	r1, #9
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f000 fa3d 	bl	800c6e4 <USBH_Get_CfgDesc>
 800c26a:	4603      	mov	r3, r0
 800c26c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c26e:	7bbb      	ldrb	r3, [r7, #14]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d103      	bne.n	800c27c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2204      	movs	r2, #4
 800c278:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c27a:	e114      	b.n	800c4a6 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c27c:	7bbb      	ldrb	r3, [r7, #14]
 800c27e:	2b03      	cmp	r3, #3
 800c280:	f040 8111 	bne.w	800c4a6 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c28a:	3301      	adds	r3, #1
 800c28c:	b2da      	uxtb	r2, r3
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c29a:	2b03      	cmp	r3, #3
 800c29c:	d903      	bls.n	800c2a6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	220d      	movs	r2, #13
 800c2a2:	701a      	strb	r2, [r3, #0]
      break;
 800c2a4:	e0ff      	b.n	800c4a6 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	795b      	ldrb	r3, [r3, #5]
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f001 f9dd 	bl	800d66c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	791b      	ldrb	r3, [r3, #4]
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f001 f9d7 	bl	800d66c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	701a      	strb	r2, [r3, #0]
      break;
 800c2ca:	e0ec      	b.n	800c4a6 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 fa05 	bl	800c6e4 <USBH_Get_CfgDesc>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c2de:	7bbb      	ldrb	r3, [r7, #14]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d103      	bne.n	800c2ec <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2205      	movs	r2, #5
 800c2e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c2ea:	e0de      	b.n	800c4aa <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c2ec:	7bbb      	ldrb	r3, [r7, #14]
 800c2ee:	2b03      	cmp	r3, #3
 800c2f0:	f040 80db 	bne.w	800c4aa <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	b2da      	uxtb	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c30a:	2b03      	cmp	r3, #3
 800c30c:	d903      	bls.n	800c316 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	220d      	movs	r2, #13
 800c312:	701a      	strb	r2, [r3, #0]
      break;
 800c314:	e0c9      	b.n	800c4aa <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	795b      	ldrb	r3, [r3, #5]
 800c31a:	4619      	mov	r1, r3
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f001 f9a5 	bl	800d66c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	791b      	ldrb	r3, [r3, #4]
 800c326:	4619      	mov	r1, r3
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f001 f99f 	bl	800d66c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2200      	movs	r2, #0
 800c332:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2200      	movs	r2, #0
 800c338:	701a      	strb	r2, [r3, #0]
      break;
 800c33a:	e0b6      	b.n	800c4aa <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800c342:	2b00      	cmp	r3, #0
 800c344:	d036      	beq.n	800c3b4 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c352:	23ff      	movs	r3, #255	@ 0xff
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 f9ef 	bl	800c738 <USBH_Get_StringDesc>
 800c35a:	4603      	mov	r3, r0
 800c35c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c35e:	7bbb      	ldrb	r3, [r7, #14]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d111      	bne.n	800c388 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2206      	movs	r2, #6
 800c368:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2205      	movs	r2, #5
 800c36e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c37e:	2300      	movs	r3, #0
 800c380:	2200      	movs	r2, #0
 800c382:	f001 fba1 	bl	800dac8 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c386:	e092      	b.n	800c4ae <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c388:	7bbb      	ldrb	r3, [r7, #14]
 800c38a:	2b03      	cmp	r3, #3
 800c38c:	f040 808f 	bne.w	800c4ae <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2206      	movs	r2, #6
 800c394:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2205      	movs	r2, #5
 800c39a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	f001 fb8b 	bl	800dac8 <osMessageQueuePut>
      break;
 800c3b2:	e07c      	b.n	800c4ae <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2206      	movs	r2, #6
 800c3b8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2205      	movs	r2, #5
 800c3be:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	f001 fb79 	bl	800dac8 <osMessageQueuePut>
      break;
 800c3d6:	e06a      	b.n	800c4ae <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d027      	beq.n	800c432 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c3ee:	23ff      	movs	r3, #255	@ 0xff
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 f9a1 	bl	800c738 <USBH_Get_StringDesc>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c3fa:	7bbb      	ldrb	r3, [r7, #14]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d103      	bne.n	800c408 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2207      	movs	r2, #7
 800c404:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c406:	e054      	b.n	800c4b2 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c408:	7bbb      	ldrb	r3, [r7, #14]
 800c40a:	2b03      	cmp	r3, #3
 800c40c:	d151      	bne.n	800c4b2 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2207      	movs	r2, #7
 800c412:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2205      	movs	r2, #5
 800c418:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c428:	2300      	movs	r3, #0
 800c42a:	2200      	movs	r2, #0
 800c42c:	f001 fb4c 	bl	800dac8 <osMessageQueuePut>
      break;
 800c430:	e03f      	b.n	800c4b2 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2207      	movs	r2, #7
 800c436:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2205      	movs	r2, #5
 800c43c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c44c:	2300      	movs	r3, #0
 800c44e:	2200      	movs	r2, #0
 800c450:	f001 fb3a 	bl	800dac8 <osMessageQueuePut>
      break;
 800c454:	e02d      	b.n	800c4b2 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d017      	beq.n	800c490 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c46c:	23ff      	movs	r3, #255	@ 0xff
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 f962 	bl	800c738 <USBH_Get_StringDesc>
 800c474:	4603      	mov	r3, r0
 800c476:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c478:	7bbb      	ldrb	r3, [r7, #14]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d102      	bne.n	800c484 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c47e:	2300      	movs	r3, #0
 800c480:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c482:	e018      	b.n	800c4b6 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c484:	7bbb      	ldrb	r3, [r7, #14]
 800c486:	2b03      	cmp	r3, #3
 800c488:	d115      	bne.n	800c4b6 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800c48a:	2300      	movs	r3, #0
 800c48c:	73fb      	strb	r3, [r7, #15]
      break;
 800c48e:	e012      	b.n	800c4b6 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 800c490:	2300      	movs	r3, #0
 800c492:	73fb      	strb	r3, [r7, #15]
      break;
 800c494:	e00f      	b.n	800c4b6 <USBH_HandleEnum+0x442>

    default:
      break;
 800c496:	bf00      	nop
 800c498:	e00e      	b.n	800c4b8 <USBH_HandleEnum+0x444>
      break;
 800c49a:	bf00      	nop
 800c49c:	e00c      	b.n	800c4b8 <USBH_HandleEnum+0x444>
      break;
 800c49e:	bf00      	nop
 800c4a0:	e00a      	b.n	800c4b8 <USBH_HandleEnum+0x444>
      break;
 800c4a2:	bf00      	nop
 800c4a4:	e008      	b.n	800c4b8 <USBH_HandleEnum+0x444>
      break;
 800c4a6:	bf00      	nop
 800c4a8:	e006      	b.n	800c4b8 <USBH_HandleEnum+0x444>
      break;
 800c4aa:	bf00      	nop
 800c4ac:	e004      	b.n	800c4b8 <USBH_HandleEnum+0x444>
      break;
 800c4ae:	bf00      	nop
 800c4b0:	e002      	b.n	800c4b8 <USBH_HandleEnum+0x444>
      break;
 800c4b2:	bf00      	nop
 800c4b4:	e000      	b.n	800c4b8 <USBH_HandleEnum+0x444>
      break;
 800c4b6:	bf00      	nop
  }
  return Status;
 800c4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3710      	adds	r7, #16
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop

0800c4c4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b083      	sub	sp, #12
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	683a      	ldr	r2, [r7, #0]
 800c4d2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800c4d6:	bf00      	nop
 800c4d8:	370c      	adds	r7, #12
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr

0800c4e2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b082      	sub	sp, #8
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c4f0:	1c5a      	adds	r2, r3, #1
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 f804 	bl	800c506 <USBH_HandleSof>
}
 800c4fe:	bf00      	nop
 800c500:	3708      	adds	r7, #8
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c506:	b580      	push	{r7, lr}
 800c508:	b082      	sub	sp, #8
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	b2db      	uxtb	r3, r3
 800c514:	2b0b      	cmp	r3, #11
 800c516:	d10a      	bne.n	800c52e <USBH_HandleSof+0x28>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d005      	beq.n	800c52e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c528:	699b      	ldr	r3, [r3, #24]
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	4798      	blx	r3
  }
}
 800c52e:	bf00      	nop
 800c530:	3708      	adds	r7, #8
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c536:	b580      	push	{r7, lr}
 800c538:	b082      	sub	sp, #8
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2201      	movs	r2, #1
 800c542:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2201      	movs	r2, #1
 800c54a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c55a:	2300      	movs	r3, #0
 800c55c:	2200      	movs	r2, #0
 800c55e:	f001 fab3 	bl	800dac8 <osMessageQueuePut>
#endif
#endif

  return;
 800c562:	bf00      	nop
}
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c56a:	b480      	push	{r7}
 800c56c:	b083      	sub	sp, #12
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800c57a:	bf00      	nop
}
 800c57c:	370c      	adds	r7, #12
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr

0800c586 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c586:	b580      	push	{r7, lr}
 800c588:	b082      	sub	sp, #8
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2201      	movs	r2, #1
 800c592:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2200      	movs	r2, #0
 800c59a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	2200      	movs	r2, #0
 800c5be:	f001 fa83 	bl	800dac8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800c5c2:	2300      	movs	r3, #0
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3708      	adds	r7, #8
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f005 fcd8 	bl	8011fa2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	791b      	ldrb	r3, [r3, #4]
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f001 f837 	bl	800d66c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	795b      	ldrb	r3, [r3, #5]
 800c602:	4619      	mov	r1, r3
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f001 f831 	bl	800d66c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2201      	movs	r2, #1
 800c60e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c61e:	2300      	movs	r3, #0
 800c620:	2200      	movs	r2, #0
 800c622:	f001 fa51 	bl	800dac8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800c626:	2300      	movs	r3, #0
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3708      	adds	r7, #8
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b084      	sub	sp, #16
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c644:	f04f 33ff 	mov.w	r3, #4294967295
 800c648:	2200      	movs	r2, #0
 800c64a:	f001 fa9d 	bl	800db88 <osMessageQueueGet>
 800c64e:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d1f0      	bne.n	800c638 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f7ff faa2 	bl	800bba0 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c65c:	e7ec      	b.n	800c638 <USBH_Process_OS+0x8>

0800c65e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800c65e:	b580      	push	{r7, lr}
 800c660:	b082      	sub	sp, #8
 800c662:	af00      	add	r7, sp, #0
 800c664:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2201      	movs	r2, #1
 800c66a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c67a:	2300      	movs	r3, #0
 800c67c:	2200      	movs	r2, #0
 800c67e:	f001 fa23 	bl	800dac8 <osMessageQueuePut>
#endif

  return USBH_OK;
 800c682:	2300      	movs	r3, #0
}
 800c684:	4618      	mov	r0, r3
 800c686:	3708      	adds	r7, #8
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b086      	sub	sp, #24
 800c690:	af02      	add	r7, sp, #8
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	460b      	mov	r3, r1
 800c696:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800c698:	887b      	ldrh	r3, [r7, #2]
 800c69a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c69e:	d901      	bls.n	800c6a4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	e01b      	b.n	800c6dc <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800c6aa:	887b      	ldrh	r3, [r7, #2]
 800c6ac:	9300      	str	r3, [sp, #0]
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c6b4:	2100      	movs	r1, #0
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 f872 	bl	800c7a0 <USBH_GetDescriptor>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800c6c0:	7bfb      	ldrb	r3, [r7, #15]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d109      	bne.n	800c6da <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c6cc:	887a      	ldrh	r2, [r7, #2]
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f000 f929 	bl	800c928 <USBH_ParseDevDesc>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c6da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3710      	adds	r7, #16
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b086      	sub	sp, #24
 800c6e8:	af02      	add	r7, sp, #8
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	460b      	mov	r3, r1
 800c6ee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	331c      	adds	r3, #28
 800c6f4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800c6f6:	887b      	ldrh	r3, [r7, #2]
 800c6f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6fc:	d901      	bls.n	800c702 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c6fe:	2303      	movs	r3, #3
 800c700:	e016      	b.n	800c730 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c702:	887b      	ldrh	r3, [r7, #2]
 800c704:	9300      	str	r3, [sp, #0]
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c70c:	2100      	movs	r1, #0
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 f846 	bl	800c7a0 <USBH_GetDescriptor>
 800c714:	4603      	mov	r3, r0
 800c716:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c718:	7bfb      	ldrb	r3, [r7, #15]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d107      	bne.n	800c72e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c71e:	887b      	ldrh	r3, [r7, #2]
 800c720:	461a      	mov	r2, r3
 800c722:	68b9      	ldr	r1, [r7, #8]
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 f9af 	bl	800ca88 <USBH_ParseCfgDesc>
 800c72a:	4603      	mov	r3, r0
 800c72c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c72e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c730:	4618      	mov	r0, r3
 800c732:	3710      	adds	r7, #16
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}

0800c738 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b088      	sub	sp, #32
 800c73c:	af02      	add	r7, sp, #8
 800c73e:	60f8      	str	r0, [r7, #12]
 800c740:	607a      	str	r2, [r7, #4]
 800c742:	461a      	mov	r2, r3
 800c744:	460b      	mov	r3, r1
 800c746:	72fb      	strb	r3, [r7, #11]
 800c748:	4613      	mov	r3, r2
 800c74a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800c74c:	893b      	ldrh	r3, [r7, #8]
 800c74e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c752:	d802      	bhi.n	800c75a <USBH_Get_StringDesc+0x22>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d101      	bne.n	800c75e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c75a:	2303      	movs	r3, #3
 800c75c:	e01c      	b.n	800c798 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800c75e:	7afb      	ldrb	r3, [r7, #11]
 800c760:	b29b      	uxth	r3, r3
 800c762:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800c766:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800c76e:	893b      	ldrh	r3, [r7, #8]
 800c770:	9300      	str	r3, [sp, #0]
 800c772:	460b      	mov	r3, r1
 800c774:	2100      	movs	r1, #0
 800c776:	68f8      	ldr	r0, [r7, #12]
 800c778:	f000 f812 	bl	800c7a0 <USBH_GetDescriptor>
 800c77c:	4603      	mov	r3, r0
 800c77e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c780:	7dfb      	ldrb	r3, [r7, #23]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d107      	bne.n	800c796 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c78c:	893a      	ldrh	r2, [r7, #8]
 800c78e:	6879      	ldr	r1, [r7, #4]
 800c790:	4618      	mov	r0, r3
 800c792:	f000 fb8d 	bl	800ceb0 <USBH_ParseStringDesc>
  }

  return status;
 800c796:	7dfb      	ldrb	r3, [r7, #23]
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3718      	adds	r7, #24
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b084      	sub	sp, #16
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	607b      	str	r3, [r7, #4]
 800c7aa:	460b      	mov	r3, r1
 800c7ac:	72fb      	strb	r3, [r7, #11]
 800c7ae:	4613      	mov	r3, r2
 800c7b0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	789b      	ldrb	r3, [r3, #2]
 800c7b6:	2b01      	cmp	r3, #1
 800c7b8:	d11c      	bne.n	800c7f4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c7ba:	7afb      	ldrb	r3, [r7, #11]
 800c7bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c7c0:	b2da      	uxtb	r2, r3
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2206      	movs	r2, #6
 800c7ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	893a      	ldrh	r2, [r7, #8]
 800c7d0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c7d2:	893b      	ldrh	r3, [r7, #8]
 800c7d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c7d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c7dc:	d104      	bne.n	800c7e8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	f240 4209 	movw	r2, #1033	@ 0x409
 800c7e4:	829a      	strh	r2, [r3, #20]
 800c7e6:	e002      	b.n	800c7ee <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	8b3a      	ldrh	r2, [r7, #24]
 800c7f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c7f4:	8b3b      	ldrh	r3, [r7, #24]
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	6879      	ldr	r1, [r7, #4]
 800c7fa:	68f8      	ldr	r0, [r7, #12]
 800c7fc:	f000 fba5 	bl	800cf4a <USBH_CtlReq>
 800c800:	4603      	mov	r3, r0
}
 800c802:	4618      	mov	r0, r3
 800c804:	3710      	adds	r7, #16
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}

0800c80a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c80a:	b580      	push	{r7, lr}
 800c80c:	b082      	sub	sp, #8
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
 800c812:	460b      	mov	r3, r1
 800c814:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	789b      	ldrb	r3, [r3, #2]
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d10f      	bne.n	800c83e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2200      	movs	r2, #0
 800c822:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2205      	movs	r2, #5
 800c828:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c82a:	78fb      	ldrb	r3, [r7, #3]
 800c82c:	b29a      	uxth	r2, r3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2200      	movs	r2, #0
 800c836:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2200      	movs	r2, #0
 800c83c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c83e:	2200      	movs	r2, #0
 800c840:	2100      	movs	r1, #0
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 fb81 	bl	800cf4a <USBH_CtlReq>
 800c848:	4603      	mov	r3, r0
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3708      	adds	r7, #8
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}

0800c852 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c852:	b580      	push	{r7, lr}
 800c854:	b082      	sub	sp, #8
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
 800c85a:	460b      	mov	r3, r1
 800c85c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	789b      	ldrb	r3, [r3, #2]
 800c862:	2b01      	cmp	r3, #1
 800c864:	d10e      	bne.n	800c884 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2200      	movs	r2, #0
 800c86a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2209      	movs	r2, #9
 800c870:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	887a      	ldrh	r2, [r7, #2]
 800c876:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2200      	movs	r2, #0
 800c882:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c884:	2200      	movs	r2, #0
 800c886:	2100      	movs	r1, #0
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 fb5e 	bl	800cf4a <USBH_CtlReq>
 800c88e:	4603      	mov	r3, r0
}
 800c890:	4618      	mov	r0, r3
 800c892:	3708      	adds	r7, #8
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b082      	sub	sp, #8
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	789b      	ldrb	r3, [r3, #2]
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d10f      	bne.n	800c8cc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2203      	movs	r2, #3
 800c8b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c8b8:	78fb      	ldrb	r3, [r7, #3]
 800c8ba:	b29a      	uxth	r2, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	2100      	movs	r1, #0
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f000 fb3a 	bl	800cf4a <USBH_CtlReq>
 800c8d6:	4603      	mov	r3, r0
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3708      	adds	r7, #8
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	789b      	ldrb	r3, [r3, #2]
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	d10f      	bne.n	800c914 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2202      	movs	r2, #2
 800c8f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2200      	movs	r2, #0
 800c904:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c906:	78fb      	ldrb	r3, [r7, #3]
 800c908:	b29a      	uxth	r2, r3
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2200      	movs	r2, #0
 800c912:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c914:	2200      	movs	r2, #0
 800c916:	2100      	movs	r1, #0
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 fb16 	bl	800cf4a <USBH_CtlReq>
 800c91e:	4603      	mov	r3, r0
}
 800c920:	4618      	mov	r0, r3
 800c922:	3708      	adds	r7, #8
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c928:	b480      	push	{r7}
 800c92a:	b087      	sub	sp, #28
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	4613      	mov	r3, r2
 800c934:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800c93c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800c93e:	2300      	movs	r3, #0
 800c940:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d101      	bne.n	800c94c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800c948:	2302      	movs	r3, #2
 800c94a:	e094      	b.n	800ca76 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	781a      	ldrb	r2, [r3, #0]
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	785a      	ldrb	r2, [r3, #1]
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	3302      	adds	r3, #2
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	461a      	mov	r2, r3
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	3303      	adds	r3, #3
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	021b      	lsls	r3, r3, #8
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	4313      	orrs	r3, r2
 800c970:	b29a      	uxth	r2, r3
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	791a      	ldrb	r2, [r3, #4]
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	795a      	ldrb	r2, [r3, #5]
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	799a      	ldrb	r2, [r3, #6]
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	79da      	ldrb	r2, [r3, #7]
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d004      	beq.n	800c9aa <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c9a6:	2b01      	cmp	r3, #1
 800c9a8:	d11b      	bne.n	800c9e2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	79db      	ldrb	r3, [r3, #7]
 800c9ae:	2b20      	cmp	r3, #32
 800c9b0:	dc0f      	bgt.n	800c9d2 <USBH_ParseDevDesc+0xaa>
 800c9b2:	2b08      	cmp	r3, #8
 800c9b4:	db0f      	blt.n	800c9d6 <USBH_ParseDevDesc+0xae>
 800c9b6:	3b08      	subs	r3, #8
 800c9b8:	4a32      	ldr	r2, [pc, #200]	@ (800ca84 <USBH_ParseDevDesc+0x15c>)
 800c9ba:	fa22 f303 	lsr.w	r3, r2, r3
 800c9be:	f003 0301 	and.w	r3, r3, #1
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	bf14      	ite	ne
 800c9c6:	2301      	movne	r3, #1
 800c9c8:	2300      	moveq	r3, #0
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d106      	bne.n	800c9de <USBH_ParseDevDesc+0xb6>
 800c9d0:	e001      	b.n	800c9d6 <USBH_ParseDevDesc+0xae>
 800c9d2:	2b40      	cmp	r3, #64	@ 0x40
 800c9d4:	d003      	beq.n	800c9de <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	2208      	movs	r2, #8
 800c9da:	71da      	strb	r2, [r3, #7]
        break;
 800c9dc:	e000      	b.n	800c9e0 <USBH_ParseDevDesc+0xb8>
        break;
 800c9de:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800c9e0:	e00e      	b.n	800ca00 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c9e8:	2b02      	cmp	r3, #2
 800c9ea:	d107      	bne.n	800c9fc <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	79db      	ldrb	r3, [r3, #7]
 800c9f0:	2b08      	cmp	r3, #8
 800c9f2:	d005      	beq.n	800ca00 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	2208      	movs	r2, #8
 800c9f8:	71da      	strb	r2, [r3, #7]
 800c9fa:	e001      	b.n	800ca00 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c9fc:	2303      	movs	r3, #3
 800c9fe:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800ca00:	88fb      	ldrh	r3, [r7, #6]
 800ca02:	2b08      	cmp	r3, #8
 800ca04:	d936      	bls.n	800ca74 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	3308      	adds	r3, #8
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	3309      	adds	r3, #9
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	021b      	lsls	r3, r3, #8
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	b29a      	uxth	r2, r3
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	330a      	adds	r3, #10
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	461a      	mov	r2, r3
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	330b      	adds	r3, #11
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	021b      	lsls	r3, r3, #8
 800ca30:	b29b      	uxth	r3, r3
 800ca32:	4313      	orrs	r3, r2
 800ca34:	b29a      	uxth	r2, r3
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	330c      	adds	r3, #12
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	461a      	mov	r2, r3
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	330d      	adds	r3, #13
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	021b      	lsls	r3, r3, #8
 800ca4a:	b29b      	uxth	r3, r3
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	b29a      	uxth	r2, r3
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	7b9a      	ldrb	r2, [r3, #14]
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	7bda      	ldrb	r2, [r3, #15]
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	7c1a      	ldrb	r2, [r3, #16]
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	7c5a      	ldrb	r2, [r3, #17]
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800ca74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	371c      	adds	r7, #28
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr
 800ca82:	bf00      	nop
 800ca84:	01000101 	.word	0x01000101

0800ca88 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b08c      	sub	sp, #48	@ 0x30
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	4613      	mov	r3, r2
 800ca94:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800ca9c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800caa4:	2300      	movs	r3, #0
 800caa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800caaa:	2300      	movs	r3, #0
 800caac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d101      	bne.n	800caba <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800cab6:	2302      	movs	r3, #2
 800cab8:	e0da      	b.n	800cc70 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	781a      	ldrb	r2, [r3, #0]
 800cac2:	6a3b      	ldr	r3, [r7, #32]
 800cac4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	785a      	ldrb	r2, [r3, #1]
 800caca:	6a3b      	ldr	r3, [r7, #32]
 800cacc:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	3302      	adds	r3, #2
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	461a      	mov	r2, r3
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	3303      	adds	r3, #3
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	021b      	lsls	r3, r3, #8
 800cade:	b29b      	uxth	r3, r3
 800cae0:	4313      	orrs	r3, r2
 800cae2:	b29b      	uxth	r3, r3
 800cae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cae8:	bf28      	it	cs
 800caea:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800caee:	b29a      	uxth	r2, r3
 800caf0:	6a3b      	ldr	r3, [r7, #32]
 800caf2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	791a      	ldrb	r2, [r3, #4]
 800caf8:	6a3b      	ldr	r3, [r7, #32]
 800cafa:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	795a      	ldrb	r2, [r3, #5]
 800cb00:	6a3b      	ldr	r3, [r7, #32]
 800cb02:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	799a      	ldrb	r2, [r3, #6]
 800cb08:	6a3b      	ldr	r3, [r7, #32]
 800cb0a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	79da      	ldrb	r2, [r3, #7]
 800cb10:	6a3b      	ldr	r3, [r7, #32]
 800cb12:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	7a1a      	ldrb	r2, [r3, #8]
 800cb18:	6a3b      	ldr	r3, [r7, #32]
 800cb1a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800cb1c:	6a3b      	ldr	r3, [r7, #32]
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	2b09      	cmp	r3, #9
 800cb22:	d002      	beq.n	800cb2a <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800cb24:	6a3b      	ldr	r3, [r7, #32]
 800cb26:	2209      	movs	r2, #9
 800cb28:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800cb2a:	88fb      	ldrh	r3, [r7, #6]
 800cb2c:	2b09      	cmp	r3, #9
 800cb2e:	f240 809d 	bls.w	800cc6c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800cb32:	2309      	movs	r3, #9
 800cb34:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800cb36:	2300      	movs	r3, #0
 800cb38:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cb3a:	e081      	b.n	800cc40 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cb3c:	f107 0316 	add.w	r3, r7, #22
 800cb40:	4619      	mov	r1, r3
 800cb42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb44:	f000 f9e7 	bl	800cf16 <USBH_GetNextDesc>
 800cb48:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800cb4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb4c:	785b      	ldrb	r3, [r3, #1]
 800cb4e:	2b04      	cmp	r3, #4
 800cb50:	d176      	bne.n	800cc40 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800cb52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	2b09      	cmp	r3, #9
 800cb58:	d002      	beq.n	800cb60 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800cb5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb5c:	2209      	movs	r2, #9
 800cb5e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800cb60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb64:	221a      	movs	r2, #26
 800cb66:	fb02 f303 	mul.w	r3, r2, r3
 800cb6a:	3308      	adds	r3, #8
 800cb6c:	6a3a      	ldr	r2, [r7, #32]
 800cb6e:	4413      	add	r3, r2
 800cb70:	3302      	adds	r3, #2
 800cb72:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800cb74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb76:	69f8      	ldr	r0, [r7, #28]
 800cb78:	f000 f87e 	bl	800cc78 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800cb82:	2300      	movs	r3, #0
 800cb84:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cb86:	e043      	b.n	800cc10 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cb88:	f107 0316 	add.w	r3, r7, #22
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb90:	f000 f9c1 	bl	800cf16 <USBH_GetNextDesc>
 800cb94:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cb96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb98:	785b      	ldrb	r3, [r3, #1]
 800cb9a:	2b05      	cmp	r3, #5
 800cb9c:	d138      	bne.n	800cc10 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800cb9e:	69fb      	ldr	r3, [r7, #28]
 800cba0:	795b      	ldrb	r3, [r3, #5]
 800cba2:	2b01      	cmp	r3, #1
 800cba4:	d113      	bne.n	800cbce <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800cba6:	69fb      	ldr	r3, [r7, #28]
 800cba8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800cbaa:	2b02      	cmp	r3, #2
 800cbac:	d003      	beq.n	800cbb6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	799b      	ldrb	r3, [r3, #6]
 800cbb2:	2b03      	cmp	r3, #3
 800cbb4:	d10b      	bne.n	800cbce <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cbb6:	69fb      	ldr	r3, [r7, #28]
 800cbb8:	79db      	ldrb	r3, [r3, #7]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d10b      	bne.n	800cbd6 <USBH_ParseCfgDesc+0x14e>
 800cbbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	2b09      	cmp	r3, #9
 800cbc4:	d007      	beq.n	800cbd6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800cbc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc8:	2209      	movs	r2, #9
 800cbca:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cbcc:	e003      	b.n	800cbd6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800cbce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd0:	2207      	movs	r2, #7
 800cbd2:	701a      	strb	r2, [r3, #0]
 800cbd4:	e000      	b.n	800cbd8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cbd6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800cbd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbdc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800cbe0:	3201      	adds	r2, #1
 800cbe2:	00d2      	lsls	r2, r2, #3
 800cbe4:	211a      	movs	r1, #26
 800cbe6:	fb01 f303 	mul.w	r3, r1, r3
 800cbea:	4413      	add	r3, r2
 800cbec:	3308      	adds	r3, #8
 800cbee:	6a3a      	ldr	r2, [r7, #32]
 800cbf0:	4413      	add	r3, r2
 800cbf2:	3304      	adds	r3, #4
 800cbf4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800cbf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbf8:	69b9      	ldr	r1, [r7, #24]
 800cbfa:	68f8      	ldr	r0, [r7, #12]
 800cbfc:	f000 f870 	bl	800cce0 <USBH_ParseEPDesc>
 800cc00:	4603      	mov	r3, r0
 800cc02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800cc06:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	791b      	ldrb	r3, [r3, #4]
 800cc14:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d204      	bcs.n	800cc26 <USBH_ParseCfgDesc+0x19e>
 800cc1c:	6a3b      	ldr	r3, [r7, #32]
 800cc1e:	885a      	ldrh	r2, [r3, #2]
 800cc20:	8afb      	ldrh	r3, [r7, #22]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d8b0      	bhi.n	800cb88 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800cc26:	69fb      	ldr	r3, [r7, #28]
 800cc28:	791b      	ldrb	r3, [r3, #4]
 800cc2a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d201      	bcs.n	800cc36 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800cc32:	2303      	movs	r3, #3
 800cc34:	e01c      	b.n	800cc70 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800cc36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cc40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d805      	bhi.n	800cc54 <USBH_ParseCfgDesc+0x1cc>
 800cc48:	6a3b      	ldr	r3, [r7, #32]
 800cc4a:	885a      	ldrh	r2, [r3, #2]
 800cc4c:	8afb      	ldrh	r3, [r7, #22]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	f63f af74 	bhi.w	800cb3c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800cc54:	6a3b      	ldr	r3, [r7, #32]
 800cc56:	791b      	ldrb	r3, [r3, #4]
 800cc58:	2b02      	cmp	r3, #2
 800cc5a:	bf28      	it	cs
 800cc5c:	2302      	movcs	r3, #2
 800cc5e:	b2db      	uxtb	r3, r3
 800cc60:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d201      	bcs.n	800cc6c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800cc68:	2303      	movs	r3, #3
 800cc6a:	e001      	b.n	800cc70 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800cc6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3730      	adds	r7, #48	@ 0x30
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b083      	sub	sp, #12
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	781a      	ldrb	r2, [r3, #0]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	785a      	ldrb	r2, [r3, #1]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	789a      	ldrb	r2, [r3, #2]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	78da      	ldrb	r2, [r3, #3]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	3304      	adds	r3, #4
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	2b02      	cmp	r3, #2
 800ccaa:	bf28      	it	cs
 800ccac:	2302      	movcs	r3, #2
 800ccae:	b2da      	uxtb	r2, r3
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	795a      	ldrb	r2, [r3, #5]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	799a      	ldrb	r2, [r3, #6]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	79da      	ldrb	r2, [r3, #7]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	7a1a      	ldrb	r2, [r3, #8]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	721a      	strb	r2, [r3, #8]
}
 800ccd4:	bf00      	nop
 800ccd6:	370c      	adds	r7, #12
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b087      	sub	sp, #28
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800ccec:	2300      	movs	r3, #0
 800ccee:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	781a      	ldrb	r2, [r3, #0]
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	785a      	ldrb	r2, [r3, #1]
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	789a      	ldrb	r2, [r3, #2]
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	78da      	ldrb	r2, [r3, #3]
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	3304      	adds	r3, #4
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	461a      	mov	r2, r3
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	3305      	adds	r3, #5
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	021b      	lsls	r3, r3, #8
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	4313      	orrs	r3, r2
 800cd24:	b29a      	uxth	r2, r3
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	799a      	ldrb	r2, [r3, #6]
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	889b      	ldrh	r3, [r3, #4]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d009      	beq.n	800cd4e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800cd3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd42:	d804      	bhi.n	800cd4e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800cd48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd4c:	d901      	bls.n	800cd52 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800cd4e:	2303      	movs	r3, #3
 800cd50:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d136      	bne.n	800cdca <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	78db      	ldrb	r3, [r3, #3]
 800cd60:	f003 0303 	and.w	r3, r3, #3
 800cd64:	2b02      	cmp	r3, #2
 800cd66:	d108      	bne.n	800cd7a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	889b      	ldrh	r3, [r3, #4]
 800cd6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd70:	f240 8097 	bls.w	800cea2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800cd74:	2303      	movs	r3, #3
 800cd76:	75fb      	strb	r3, [r7, #23]
 800cd78:	e093      	b.n	800cea2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	78db      	ldrb	r3, [r3, #3]
 800cd7e:	f003 0303 	and.w	r3, r3, #3
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d107      	bne.n	800cd96 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	889b      	ldrh	r3, [r3, #4]
 800cd8a:	2b40      	cmp	r3, #64	@ 0x40
 800cd8c:	f240 8089 	bls.w	800cea2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800cd90:	2303      	movs	r3, #3
 800cd92:	75fb      	strb	r3, [r7, #23]
 800cd94:	e085      	b.n	800cea2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	78db      	ldrb	r3, [r3, #3]
 800cd9a:	f003 0303 	and.w	r3, r3, #3
 800cd9e:	2b01      	cmp	r3, #1
 800cda0:	d005      	beq.n	800cdae <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	78db      	ldrb	r3, [r3, #3]
 800cda6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800cdaa:	2b03      	cmp	r3, #3
 800cdac:	d10a      	bne.n	800cdc4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	799b      	ldrb	r3, [r3, #6]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d003      	beq.n	800cdbe <USBH_ParseEPDesc+0xde>
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	799b      	ldrb	r3, [r3, #6]
 800cdba:	2b10      	cmp	r3, #16
 800cdbc:	d970      	bls.n	800cea0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800cdbe:	2303      	movs	r3, #3
 800cdc0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800cdc2:	e06d      	b.n	800cea0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800cdc4:	2303      	movs	r3, #3
 800cdc6:	75fb      	strb	r3, [r7, #23]
 800cdc8:	e06b      	b.n	800cea2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d13c      	bne.n	800ce4e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	78db      	ldrb	r3, [r3, #3]
 800cdd8:	f003 0303 	and.w	r3, r3, #3
 800cddc:	2b02      	cmp	r3, #2
 800cdde:	d005      	beq.n	800cdec <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	78db      	ldrb	r3, [r3, #3]
 800cde4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d106      	bne.n	800cdfa <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	889b      	ldrh	r3, [r3, #4]
 800cdf0:	2b40      	cmp	r3, #64	@ 0x40
 800cdf2:	d956      	bls.n	800cea2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800cdf4:	2303      	movs	r3, #3
 800cdf6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800cdf8:	e053      	b.n	800cea2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	78db      	ldrb	r3, [r3, #3]
 800cdfe:	f003 0303 	and.w	r3, r3, #3
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d10e      	bne.n	800ce24 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	799b      	ldrb	r3, [r3, #6]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d007      	beq.n	800ce1e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800ce12:	2b10      	cmp	r3, #16
 800ce14:	d803      	bhi.n	800ce1e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800ce1a:	2b40      	cmp	r3, #64	@ 0x40
 800ce1c:	d941      	bls.n	800cea2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ce1e:	2303      	movs	r3, #3
 800ce20:	75fb      	strb	r3, [r7, #23]
 800ce22:	e03e      	b.n	800cea2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	78db      	ldrb	r3, [r3, #3]
 800ce28:	f003 0303 	and.w	r3, r3, #3
 800ce2c:	2b03      	cmp	r3, #3
 800ce2e:	d10b      	bne.n	800ce48 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	799b      	ldrb	r3, [r3, #6]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d004      	beq.n	800ce42 <USBH_ParseEPDesc+0x162>
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	889b      	ldrh	r3, [r3, #4]
 800ce3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce40:	d32f      	bcc.n	800cea2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ce42:	2303      	movs	r3, #3
 800ce44:	75fb      	strb	r3, [r7, #23]
 800ce46:	e02c      	b.n	800cea2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ce48:	2303      	movs	r3, #3
 800ce4a:	75fb      	strb	r3, [r7, #23]
 800ce4c:	e029      	b.n	800cea2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ce54:	2b02      	cmp	r3, #2
 800ce56:	d120      	bne.n	800ce9a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	78db      	ldrb	r3, [r3, #3]
 800ce5c:	f003 0303 	and.w	r3, r3, #3
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d106      	bne.n	800ce72 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	889b      	ldrh	r3, [r3, #4]
 800ce68:	2b08      	cmp	r3, #8
 800ce6a:	d01a      	beq.n	800cea2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ce6c:	2303      	movs	r3, #3
 800ce6e:	75fb      	strb	r3, [r7, #23]
 800ce70:	e017      	b.n	800cea2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	78db      	ldrb	r3, [r3, #3]
 800ce76:	f003 0303 	and.w	r3, r3, #3
 800ce7a:	2b03      	cmp	r3, #3
 800ce7c:	d10a      	bne.n	800ce94 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	799b      	ldrb	r3, [r3, #6]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d003      	beq.n	800ce8e <USBH_ParseEPDesc+0x1ae>
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	889b      	ldrh	r3, [r3, #4]
 800ce8a:	2b08      	cmp	r3, #8
 800ce8c:	d909      	bls.n	800cea2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ce8e:	2303      	movs	r3, #3
 800ce90:	75fb      	strb	r3, [r7, #23]
 800ce92:	e006      	b.n	800cea2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ce94:	2303      	movs	r3, #3
 800ce96:	75fb      	strb	r3, [r7, #23]
 800ce98:	e003      	b.n	800cea2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ce9a:	2303      	movs	r3, #3
 800ce9c:	75fb      	strb	r3, [r7, #23]
 800ce9e:	e000      	b.n	800cea2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800cea0:	bf00      	nop
  }

  return status;
 800cea2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	371c      	adds	r7, #28
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr

0800ceb0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b087      	sub	sp, #28
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	60b9      	str	r1, [r7, #8]
 800ceba:	4613      	mov	r3, r2
 800cebc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	3301      	adds	r3, #1
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	2b03      	cmp	r3, #3
 800cec6:	d120      	bne.n	800cf0a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	1e9a      	subs	r2, r3, #2
 800cece:	88fb      	ldrh	r3, [r7, #6]
 800ced0:	4293      	cmp	r3, r2
 800ced2:	bf28      	it	cs
 800ced4:	4613      	movcs	r3, r2
 800ced6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	3302      	adds	r3, #2
 800cedc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cede:	2300      	movs	r3, #0
 800cee0:	82fb      	strh	r3, [r7, #22]
 800cee2:	e00b      	b.n	800cefc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cee4:	8afb      	ldrh	r3, [r7, #22]
 800cee6:	68fa      	ldr	r2, [r7, #12]
 800cee8:	4413      	add	r3, r2
 800ceea:	781a      	ldrb	r2, [r3, #0]
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	3301      	adds	r3, #1
 800cef4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cef6:	8afb      	ldrh	r3, [r7, #22]
 800cef8:	3302      	adds	r3, #2
 800cefa:	82fb      	strh	r3, [r7, #22]
 800cefc:	8afa      	ldrh	r2, [r7, #22]
 800cefe:	8abb      	ldrh	r3, [r7, #20]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d3ef      	bcc.n	800cee4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	2200      	movs	r2, #0
 800cf08:	701a      	strb	r2, [r3, #0]
  }
}
 800cf0a:	bf00      	nop
 800cf0c:	371c      	adds	r7, #28
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr

0800cf16 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cf16:	b480      	push	{r7}
 800cf18:	b085      	sub	sp, #20
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
 800cf1e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	881b      	ldrh	r3, [r3, #0]
 800cf24:	687a      	ldr	r2, [r7, #4]
 800cf26:	7812      	ldrb	r2, [r2, #0]
 800cf28:	4413      	add	r3, r2
 800cf2a:	b29a      	uxth	r2, r3
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	4413      	add	r3, r2
 800cf3a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cf3c:	68fb      	ldr	r3, [r7, #12]
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3714      	adds	r7, #20
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr

0800cf4a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b086      	sub	sp, #24
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	60f8      	str	r0, [r7, #12]
 800cf52:	60b9      	str	r1, [r7, #8]
 800cf54:	4613      	mov	r3, r2
 800cf56:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800cf58:	2301      	movs	r3, #1
 800cf5a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	789b      	ldrb	r3, [r3, #2]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d002      	beq.n	800cf6a <USBH_CtlReq+0x20>
 800cf64:	2b02      	cmp	r3, #2
 800cf66:	d01d      	beq.n	800cfa4 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800cf68:	e043      	b.n	800cff2 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	68ba      	ldr	r2, [r7, #8]
 800cf6e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	88fa      	ldrh	r2, [r7, #6]
 800cf74:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	2202      	movs	r2, #2
 800cf80:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800cf82:	2301      	movs	r3, #1
 800cf84:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2203      	movs	r2, #3
 800cf8a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	f000 fd93 	bl	800dac8 <osMessageQueuePut>
      break;
 800cfa2:	e026      	b.n	800cff2 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800cfa4:	68f8      	ldr	r0, [r7, #12]
 800cfa6:	f000 f829 	bl	800cffc <USBH_HandleControl>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800cfae:	7dfb      	ldrb	r3, [r7, #23]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d002      	beq.n	800cfba <USBH_CtlReq+0x70>
 800cfb4:	7dfb      	ldrb	r3, [r7, #23]
 800cfb6:	2b03      	cmp	r3, #3
 800cfb8:	d106      	bne.n	800cfc8 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	761a      	strb	r2, [r3, #24]
 800cfc6:	e005      	b.n	800cfd4 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800cfc8:	7dfb      	ldrb	r3, [r7, #23]
 800cfca:	2b02      	cmp	r3, #2
 800cfcc:	d102      	bne.n	800cfd4 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2201      	movs	r2, #1
 800cfd2:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2203      	movs	r2, #3
 800cfd8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800cfe8:	2300      	movs	r3, #0
 800cfea:	2200      	movs	r2, #0
 800cfec:	f000 fd6c 	bl	800dac8 <osMessageQueuePut>
      break;
 800cff0:	bf00      	nop
  }
  return status;
 800cff2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3718      	adds	r7, #24
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b086      	sub	sp, #24
 800d000:	af02      	add	r7, sp, #8
 800d002:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d004:	2301      	movs	r3, #1
 800d006:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d008:	2300      	movs	r3, #0
 800d00a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	7e1b      	ldrb	r3, [r3, #24]
 800d010:	3b01      	subs	r3, #1
 800d012:	2b0a      	cmp	r3, #10
 800d014:	f200 8229 	bhi.w	800d46a <USBH_HandleControl+0x46e>
 800d018:	a201      	add	r2, pc, #4	@ (adr r2, 800d020 <USBH_HandleControl+0x24>)
 800d01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d01e:	bf00      	nop
 800d020:	0800d04d 	.word	0x0800d04d
 800d024:	0800d067 	.word	0x0800d067
 800d028:	0800d109 	.word	0x0800d109
 800d02c:	0800d12f 	.word	0x0800d12f
 800d030:	0800d1bb 	.word	0x0800d1bb
 800d034:	0800d1e5 	.word	0x0800d1e5
 800d038:	0800d2a7 	.word	0x0800d2a7
 800d03c:	0800d2c9 	.word	0x0800d2c9
 800d040:	0800d35b 	.word	0x0800d35b
 800d044:	0800d381 	.word	0x0800d381
 800d048:	0800d413 	.word	0x0800d413
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f103 0110 	add.w	r1, r3, #16
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	795b      	ldrb	r3, [r3, #5]
 800d056:	461a      	mov	r2, r3
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f000 fa17 	bl	800d48c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2202      	movs	r2, #2
 800d062:	761a      	strb	r2, [r3, #24]
      break;
 800d064:	e20c      	b.n	800d480 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	795b      	ldrb	r3, [r3, #5]
 800d06a:	4619      	mov	r1, r3
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f005 f887 	bl	8012180 <USBH_LL_GetURBState>
 800d072:	4603      	mov	r3, r0
 800d074:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d076:	7bbb      	ldrb	r3, [r7, #14]
 800d078:	2b01      	cmp	r3, #1
 800d07a:	d12c      	bne.n	800d0d6 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	7c1b      	ldrb	r3, [r3, #16]
 800d080:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d084:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	8adb      	ldrh	r3, [r3, #22]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d00a      	beq.n	800d0a4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d08e:	7b7b      	ldrb	r3, [r7, #13]
 800d090:	2b80      	cmp	r3, #128	@ 0x80
 800d092:	d103      	bne.n	800d09c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2203      	movs	r2, #3
 800d098:	761a      	strb	r2, [r3, #24]
 800d09a:	e00d      	b.n	800d0b8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2205      	movs	r2, #5
 800d0a0:	761a      	strb	r2, [r3, #24]
 800d0a2:	e009      	b.n	800d0b8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800d0a4:	7b7b      	ldrb	r3, [r7, #13]
 800d0a6:	2b80      	cmp	r3, #128	@ 0x80
 800d0a8:	d103      	bne.n	800d0b2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2209      	movs	r2, #9
 800d0ae:	761a      	strb	r2, [r3, #24]
 800d0b0:	e002      	b.n	800d0b8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2207      	movs	r2, #7
 800d0b6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2203      	movs	r2, #3
 800d0bc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	f000 fcfa 	bl	800dac8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d0d4:	e1cb      	b.n	800d46e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d0d6:	7bbb      	ldrb	r3, [r7, #14]
 800d0d8:	2b04      	cmp	r3, #4
 800d0da:	d003      	beq.n	800d0e4 <USBH_HandleControl+0xe8>
 800d0dc:	7bbb      	ldrb	r3, [r7, #14]
 800d0de:	2b02      	cmp	r3, #2
 800d0e0:	f040 81c5 	bne.w	800d46e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	220b      	movs	r2, #11
 800d0e8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2203      	movs	r2, #3
 800d0ee:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d0fe:	2300      	movs	r3, #0
 800d100:	2200      	movs	r2, #0
 800d102:	f000 fce1 	bl	800dac8 <osMessageQueuePut>
      break;
 800d106:	e1b2      	b.n	800d46e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d10e:	b29a      	uxth	r2, r3
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6899      	ldr	r1, [r3, #8]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	899a      	ldrh	r2, [r3, #12]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	791b      	ldrb	r3, [r3, #4]
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f000 f9f2 	bl	800d50a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2204      	movs	r2, #4
 800d12a:	761a      	strb	r2, [r3, #24]
      break;
 800d12c:	e1a8      	b.n	800d480 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	791b      	ldrb	r3, [r3, #4]
 800d132:	4619      	mov	r1, r3
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f005 f823 	bl	8012180 <USBH_LL_GetURBState>
 800d13a:	4603      	mov	r3, r0
 800d13c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d13e:	7bbb      	ldrb	r3, [r7, #14]
 800d140:	2b01      	cmp	r3, #1
 800d142:	d110      	bne.n	800d166 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2209      	movs	r2, #9
 800d148:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2203      	movs	r2, #3
 800d14e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d15e:	2300      	movs	r3, #0
 800d160:	2200      	movs	r2, #0
 800d162:	f000 fcb1 	bl	800dac8 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d166:	7bbb      	ldrb	r3, [r7, #14]
 800d168:	2b05      	cmp	r3, #5
 800d16a:	d110      	bne.n	800d18e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d16c:	2303      	movs	r3, #3
 800d16e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2203      	movs	r2, #3
 800d174:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d184:	2300      	movs	r3, #0
 800d186:	2200      	movs	r2, #0
 800d188:	f000 fc9e 	bl	800dac8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d18c:	e171      	b.n	800d472 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800d18e:	7bbb      	ldrb	r3, [r7, #14]
 800d190:	2b04      	cmp	r3, #4
 800d192:	f040 816e 	bne.w	800d472 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	220b      	movs	r2, #11
 800d19a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2203      	movs	r2, #3
 800d1a0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f000 fc88 	bl	800dac8 <osMessageQueuePut>
      break;
 800d1b8:	e15b      	b.n	800d472 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6899      	ldr	r1, [r3, #8]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	899a      	ldrh	r2, [r3, #12]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	795b      	ldrb	r3, [r3, #5]
 800d1c6:	2001      	movs	r0, #1
 800d1c8:	9000      	str	r0, [sp, #0]
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f000 f978 	bl	800d4c0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d1d6:	b29a      	uxth	r2, r3
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2206      	movs	r2, #6
 800d1e0:	761a      	strb	r2, [r3, #24]
      break;
 800d1e2:	e14d      	b.n	800d480 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	795b      	ldrb	r3, [r3, #5]
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f004 ffc8 	bl	8012180 <USBH_LL_GetURBState>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d1f4:	7bbb      	ldrb	r3, [r7, #14]
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d111      	bne.n	800d21e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2207      	movs	r2, #7
 800d1fe:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2203      	movs	r2, #3
 800d204:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d214:	2300      	movs	r3, #0
 800d216:	2200      	movs	r2, #0
 800d218:	f000 fc56 	bl	800dac8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d21c:	e12b      	b.n	800d476 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800d21e:	7bbb      	ldrb	r3, [r7, #14]
 800d220:	2b05      	cmp	r3, #5
 800d222:	d113      	bne.n	800d24c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	220c      	movs	r2, #12
 800d228:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d22a:	2303      	movs	r3, #3
 800d22c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2203      	movs	r2, #3
 800d232:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d242:	2300      	movs	r3, #0
 800d244:	2200      	movs	r2, #0
 800d246:	f000 fc3f 	bl	800dac8 <osMessageQueuePut>
      break;
 800d24a:	e114      	b.n	800d476 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d24c:	7bbb      	ldrb	r3, [r7, #14]
 800d24e:	2b02      	cmp	r3, #2
 800d250:	d111      	bne.n	800d276 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2205      	movs	r2, #5
 800d256:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2203      	movs	r2, #3
 800d25c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d26c:	2300      	movs	r3, #0
 800d26e:	2200      	movs	r2, #0
 800d270:	f000 fc2a 	bl	800dac8 <osMessageQueuePut>
      break;
 800d274:	e0ff      	b.n	800d476 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800d276:	7bbb      	ldrb	r3, [r7, #14]
 800d278:	2b04      	cmp	r3, #4
 800d27a:	f040 80fc 	bne.w	800d476 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	220b      	movs	r2, #11
 800d282:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d284:	2302      	movs	r3, #2
 800d286:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2203      	movs	r2, #3
 800d28c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d29c:	2300      	movs	r3, #0
 800d29e:	2200      	movs	r2, #0
 800d2a0:	f000 fc12 	bl	800dac8 <osMessageQueuePut>
      break;
 800d2a4:	e0e7      	b.n	800d476 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	791b      	ldrb	r3, [r3, #4]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	2100      	movs	r1, #0
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f000 f92b 	bl	800d50a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d2ba:	b29a      	uxth	r2, r3
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2208      	movs	r2, #8
 800d2c4:	761a      	strb	r2, [r3, #24]

      break;
 800d2c6:	e0db      	b.n	800d480 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	791b      	ldrb	r3, [r3, #4]
 800d2cc:	4619      	mov	r1, r3
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f004 ff56 	bl	8012180 <USBH_LL_GetURBState>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d2d8:	7bbb      	ldrb	r3, [r7, #14]
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d113      	bne.n	800d306 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	220d      	movs	r2, #13
 800d2e2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2203      	movs	r2, #3
 800d2ec:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	2200      	movs	r2, #0
 800d300:	f000 fbe2 	bl	800dac8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d304:	e0b9      	b.n	800d47a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800d306:	7bbb      	ldrb	r3, [r7, #14]
 800d308:	2b04      	cmp	r3, #4
 800d30a:	d111      	bne.n	800d330 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	220b      	movs	r2, #11
 800d310:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2203      	movs	r2, #3
 800d316:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d326:	2300      	movs	r3, #0
 800d328:	2200      	movs	r2, #0
 800d32a:	f000 fbcd 	bl	800dac8 <osMessageQueuePut>
      break;
 800d32e:	e0a4      	b.n	800d47a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800d330:	7bbb      	ldrb	r3, [r7, #14]
 800d332:	2b05      	cmp	r3, #5
 800d334:	f040 80a1 	bne.w	800d47a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800d338:	2303      	movs	r3, #3
 800d33a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2203      	movs	r2, #3
 800d340:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d350:	2300      	movs	r3, #0
 800d352:	2200      	movs	r2, #0
 800d354:	f000 fbb8 	bl	800dac8 <osMessageQueuePut>
      break;
 800d358:	e08f      	b.n	800d47a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	795b      	ldrb	r3, [r3, #5]
 800d35e:	2201      	movs	r2, #1
 800d360:	9200      	str	r2, [sp, #0]
 800d362:	2200      	movs	r2, #0
 800d364:	2100      	movs	r1, #0
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f000 f8aa 	bl	800d4c0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d372:	b29a      	uxth	r2, r3
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	220a      	movs	r2, #10
 800d37c:	761a      	strb	r2, [r3, #24]
      break;
 800d37e:	e07f      	b.n	800d480 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	795b      	ldrb	r3, [r3, #5]
 800d384:	4619      	mov	r1, r3
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f004 fefa 	bl	8012180 <USBH_LL_GetURBState>
 800d38c:	4603      	mov	r3, r0
 800d38e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d390:	7bbb      	ldrb	r3, [r7, #14]
 800d392:	2b01      	cmp	r3, #1
 800d394:	d113      	bne.n	800d3be <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800d396:	2300      	movs	r3, #0
 800d398:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	220d      	movs	r2, #13
 800d39e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2203      	movs	r2, #3
 800d3a4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	f000 fb86 	bl	800dac8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d3bc:	e05f      	b.n	800d47e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d3be:	7bbb      	ldrb	r3, [r7, #14]
 800d3c0:	2b02      	cmp	r3, #2
 800d3c2:	d111      	bne.n	800d3e8 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2209      	movs	r2, #9
 800d3c8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2203      	movs	r2, #3
 800d3ce:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d3de:	2300      	movs	r3, #0
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	f000 fb71 	bl	800dac8 <osMessageQueuePut>
      break;
 800d3e6:	e04a      	b.n	800d47e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800d3e8:	7bbb      	ldrb	r3, [r7, #14]
 800d3ea:	2b04      	cmp	r3, #4
 800d3ec:	d147      	bne.n	800d47e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	220b      	movs	r2, #11
 800d3f2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2203      	movs	r2, #3
 800d3f8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d408:	2300      	movs	r3, #0
 800d40a:	2200      	movs	r2, #0
 800d40c:	f000 fb5c 	bl	800dac8 <osMessageQueuePut>
      break;
 800d410:	e035      	b.n	800d47e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	7e5b      	ldrb	r3, [r3, #25]
 800d416:	3301      	adds	r3, #1
 800d418:	b2da      	uxtb	r2, r3
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	765a      	strb	r2, [r3, #25]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	7e5b      	ldrb	r3, [r3, #25]
 800d422:	2b02      	cmp	r3, #2
 800d424:	d806      	bhi.n	800d434 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2201      	movs	r2, #1
 800d42a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2201      	movs	r2, #1
 800d430:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d432:	e025      	b.n	800d480 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d43a:	2106      	movs	r1, #6
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2200      	movs	r2, #0
 800d444:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	795b      	ldrb	r3, [r3, #5]
 800d44a:	4619      	mov	r1, r3
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f000 f90d 	bl	800d66c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	791b      	ldrb	r3, [r3, #4]
 800d456:	4619      	mov	r1, r3
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 f907 	bl	800d66c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2200      	movs	r2, #0
 800d462:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d464:	2302      	movs	r3, #2
 800d466:	73fb      	strb	r3, [r7, #15]
      break;
 800d468:	e00a      	b.n	800d480 <USBH_HandleControl+0x484>

    default:
      break;
 800d46a:	bf00      	nop
 800d46c:	e008      	b.n	800d480 <USBH_HandleControl+0x484>
      break;
 800d46e:	bf00      	nop
 800d470:	e006      	b.n	800d480 <USBH_HandleControl+0x484>
      break;
 800d472:	bf00      	nop
 800d474:	e004      	b.n	800d480 <USBH_HandleControl+0x484>
      break;
 800d476:	bf00      	nop
 800d478:	e002      	b.n	800d480 <USBH_HandleControl+0x484>
      break;
 800d47a:	bf00      	nop
 800d47c:	e000      	b.n	800d480 <USBH_HandleControl+0x484>
      break;
 800d47e:	bf00      	nop
  }

  return status;
 800d480:	7bfb      	ldrb	r3, [r7, #15]
}
 800d482:	4618      	mov	r0, r3
 800d484:	3710      	adds	r7, #16
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop

0800d48c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b088      	sub	sp, #32
 800d490:	af04      	add	r7, sp, #16
 800d492:	60f8      	str	r0, [r7, #12]
 800d494:	60b9      	str	r1, [r7, #8]
 800d496:	4613      	mov	r3, r2
 800d498:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d49a:	79f9      	ldrb	r1, [r7, #7]
 800d49c:	2300      	movs	r3, #0
 800d49e:	9303      	str	r3, [sp, #12]
 800d4a0:	2308      	movs	r3, #8
 800d4a2:	9302      	str	r3, [sp, #8]
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	9301      	str	r3, [sp, #4]
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	9300      	str	r3, [sp, #0]
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	68f8      	ldr	r0, [r7, #12]
 800d4b2:	f004 fe34 	bl	801211e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d4b6:	2300      	movs	r3, #0
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3710      	adds	r7, #16
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b088      	sub	sp, #32
 800d4c4:	af04      	add	r7, sp, #16
 800d4c6:	60f8      	str	r0, [r7, #12]
 800d4c8:	60b9      	str	r1, [r7, #8]
 800d4ca:	4611      	mov	r1, r2
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	460b      	mov	r3, r1
 800d4d0:	80fb      	strh	r3, [r7, #6]
 800d4d2:	4613      	mov	r3, r2
 800d4d4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d001      	beq.n	800d4e4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d4e4:	7979      	ldrb	r1, [r7, #5]
 800d4e6:	7e3b      	ldrb	r3, [r7, #24]
 800d4e8:	9303      	str	r3, [sp, #12]
 800d4ea:	88fb      	ldrh	r3, [r7, #6]
 800d4ec:	9302      	str	r3, [sp, #8]
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	9301      	str	r3, [sp, #4]
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	9300      	str	r3, [sp, #0]
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	68f8      	ldr	r0, [r7, #12]
 800d4fc:	f004 fe0f 	bl	801211e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d500:	2300      	movs	r3, #0
}
 800d502:	4618      	mov	r0, r3
 800d504:	3710      	adds	r7, #16
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b088      	sub	sp, #32
 800d50e:	af04      	add	r7, sp, #16
 800d510:	60f8      	str	r0, [r7, #12]
 800d512:	60b9      	str	r1, [r7, #8]
 800d514:	4611      	mov	r1, r2
 800d516:	461a      	mov	r2, r3
 800d518:	460b      	mov	r3, r1
 800d51a:	80fb      	strh	r3, [r7, #6]
 800d51c:	4613      	mov	r3, r2
 800d51e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d520:	7979      	ldrb	r1, [r7, #5]
 800d522:	2300      	movs	r3, #0
 800d524:	9303      	str	r3, [sp, #12]
 800d526:	88fb      	ldrh	r3, [r7, #6]
 800d528:	9302      	str	r3, [sp, #8]
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	9301      	str	r3, [sp, #4]
 800d52e:	2301      	movs	r3, #1
 800d530:	9300      	str	r3, [sp, #0]
 800d532:	2300      	movs	r3, #0
 800d534:	2201      	movs	r2, #1
 800d536:	68f8      	ldr	r0, [r7, #12]
 800d538:	f004 fdf1 	bl	801211e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d53c:	2300      	movs	r3, #0

}
 800d53e:	4618      	mov	r0, r3
 800d540:	3710      	adds	r7, #16
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}

0800d546 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d546:	b580      	push	{r7, lr}
 800d548:	b088      	sub	sp, #32
 800d54a:	af04      	add	r7, sp, #16
 800d54c:	60f8      	str	r0, [r7, #12]
 800d54e:	60b9      	str	r1, [r7, #8]
 800d550:	4611      	mov	r1, r2
 800d552:	461a      	mov	r2, r3
 800d554:	460b      	mov	r3, r1
 800d556:	80fb      	strh	r3, [r7, #6]
 800d558:	4613      	mov	r3, r2
 800d55a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d562:	2b00      	cmp	r3, #0
 800d564:	d001      	beq.n	800d56a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d566:	2300      	movs	r3, #0
 800d568:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d56a:	7979      	ldrb	r1, [r7, #5]
 800d56c:	7e3b      	ldrb	r3, [r7, #24]
 800d56e:	9303      	str	r3, [sp, #12]
 800d570:	88fb      	ldrh	r3, [r7, #6]
 800d572:	9302      	str	r3, [sp, #8]
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	9301      	str	r3, [sp, #4]
 800d578:	2301      	movs	r3, #1
 800d57a:	9300      	str	r3, [sp, #0]
 800d57c:	2302      	movs	r3, #2
 800d57e:	2200      	movs	r2, #0
 800d580:	68f8      	ldr	r0, [r7, #12]
 800d582:	f004 fdcc 	bl	801211e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d586:	2300      	movs	r3, #0
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3710      	adds	r7, #16
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b088      	sub	sp, #32
 800d594:	af04      	add	r7, sp, #16
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	60b9      	str	r1, [r7, #8]
 800d59a:	4611      	mov	r1, r2
 800d59c:	461a      	mov	r2, r3
 800d59e:	460b      	mov	r3, r1
 800d5a0:	80fb      	strh	r3, [r7, #6]
 800d5a2:	4613      	mov	r3, r2
 800d5a4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d5a6:	7979      	ldrb	r1, [r7, #5]
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	9303      	str	r3, [sp, #12]
 800d5ac:	88fb      	ldrh	r3, [r7, #6]
 800d5ae:	9302      	str	r3, [sp, #8]
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	9301      	str	r3, [sp, #4]
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	9300      	str	r3, [sp, #0]
 800d5b8:	2302      	movs	r3, #2
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	68f8      	ldr	r0, [r7, #12]
 800d5be:	f004 fdae 	bl	801211e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d5c2:	2300      	movs	r3, #0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3710      	adds	r7, #16
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b086      	sub	sp, #24
 800d5d0:	af04      	add	r7, sp, #16
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	4608      	mov	r0, r1
 800d5d6:	4611      	mov	r1, r2
 800d5d8:	461a      	mov	r2, r3
 800d5da:	4603      	mov	r3, r0
 800d5dc:	70fb      	strb	r3, [r7, #3]
 800d5de:	460b      	mov	r3, r1
 800d5e0:	70bb      	strb	r3, [r7, #2]
 800d5e2:	4613      	mov	r3, r2
 800d5e4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d5e6:	7878      	ldrb	r0, [r7, #1]
 800d5e8:	78ba      	ldrb	r2, [r7, #2]
 800d5ea:	78f9      	ldrb	r1, [r7, #3]
 800d5ec:	8b3b      	ldrh	r3, [r7, #24]
 800d5ee:	9302      	str	r3, [sp, #8]
 800d5f0:	7d3b      	ldrb	r3, [r7, #20]
 800d5f2:	9301      	str	r3, [sp, #4]
 800d5f4:	7c3b      	ldrb	r3, [r7, #16]
 800d5f6:	9300      	str	r3, [sp, #0]
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f004 fd41 	bl	8012082 <USBH_LL_OpenPipe>

  return USBH_OK;
 800d600:	2300      	movs	r3, #0
}
 800d602:	4618      	mov	r0, r3
 800d604:	3708      	adds	r7, #8
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}

0800d60a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d60a:	b580      	push	{r7, lr}
 800d60c:	b082      	sub	sp, #8
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
 800d612:	460b      	mov	r3, r1
 800d614:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d616:	78fb      	ldrb	r3, [r7, #3]
 800d618:	4619      	mov	r1, r3
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f004 fd60 	bl	80120e0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d620:	2300      	movs	r3, #0
}
 800d622:	4618      	mov	r0, r3
 800d624:	3708      	adds	r7, #8
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}

0800d62a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d62a:	b580      	push	{r7, lr}
 800d62c:	b084      	sub	sp, #16
 800d62e:	af00      	add	r7, sp, #0
 800d630:	6078      	str	r0, [r7, #4]
 800d632:	460b      	mov	r3, r1
 800d634:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f000 f836 	bl	800d6a8 <USBH_GetFreePipe>
 800d63c:	4603      	mov	r3, r0
 800d63e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d640:	89fb      	ldrh	r3, [r7, #14]
 800d642:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d646:	4293      	cmp	r3, r2
 800d648:	d00a      	beq.n	800d660 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d64a:	78fa      	ldrb	r2, [r7, #3]
 800d64c:	89fb      	ldrh	r3, [r7, #14]
 800d64e:	f003 030f 	and.w	r3, r3, #15
 800d652:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d656:	6879      	ldr	r1, [r7, #4]
 800d658:	33e0      	adds	r3, #224	@ 0xe0
 800d65a:	009b      	lsls	r3, r3, #2
 800d65c:	440b      	add	r3, r1
 800d65e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d660:	89fb      	ldrh	r3, [r7, #14]
 800d662:	b2db      	uxtb	r3, r3
}
 800d664:	4618      	mov	r0, r3
 800d666:	3710      	adds	r7, #16
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b083      	sub	sp, #12
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
 800d674:	460b      	mov	r3, r1
 800d676:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d678:	78fb      	ldrb	r3, [r7, #3]
 800d67a:	2b0f      	cmp	r3, #15
 800d67c:	d80d      	bhi.n	800d69a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d67e:	78fb      	ldrb	r3, [r7, #3]
 800d680:	687a      	ldr	r2, [r7, #4]
 800d682:	33e0      	adds	r3, #224	@ 0xe0
 800d684:	009b      	lsls	r3, r3, #2
 800d686:	4413      	add	r3, r2
 800d688:	685a      	ldr	r2, [r3, #4]
 800d68a:	78fb      	ldrb	r3, [r7, #3]
 800d68c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d690:	6879      	ldr	r1, [r7, #4]
 800d692:	33e0      	adds	r3, #224	@ 0xe0
 800d694:	009b      	lsls	r3, r3, #2
 800d696:	440b      	add	r3, r1
 800d698:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d69a:	2300      	movs	r3, #0
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	370c      	adds	r7, #12
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a6:	4770      	bx	lr

0800d6a8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b085      	sub	sp, #20
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	73fb      	strb	r3, [r7, #15]
 800d6b8:	e00f      	b.n	800d6da <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d6ba:	7bfb      	ldrb	r3, [r7, #15]
 800d6bc:	687a      	ldr	r2, [r7, #4]
 800d6be:	33e0      	adds	r3, #224	@ 0xe0
 800d6c0:	009b      	lsls	r3, r3, #2
 800d6c2:	4413      	add	r3, r2
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d102      	bne.n	800d6d4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d6ce:	7bfb      	ldrb	r3, [r7, #15]
 800d6d0:	b29b      	uxth	r3, r3
 800d6d2:	e007      	b.n	800d6e4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800d6d4:	7bfb      	ldrb	r3, [r7, #15]
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	73fb      	strb	r3, [r7, #15]
 800d6da:	7bfb      	ldrb	r3, [r7, #15]
 800d6dc:	2b0f      	cmp	r3, #15
 800d6de:	d9ec      	bls.n	800d6ba <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d6e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3714      	adds	r7, #20
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr

0800d6f0 <__NVIC_SetPriority>:
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b083      	sub	sp, #12
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	6039      	str	r1, [r7, #0]
 800d6fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d6fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d700:	2b00      	cmp	r3, #0
 800d702:	db0a      	blt.n	800d71a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	b2da      	uxtb	r2, r3
 800d708:	490c      	ldr	r1, [pc, #48]	@ (800d73c <__NVIC_SetPriority+0x4c>)
 800d70a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d70e:	0112      	lsls	r2, r2, #4
 800d710:	b2d2      	uxtb	r2, r2
 800d712:	440b      	add	r3, r1
 800d714:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d718:	e00a      	b.n	800d730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	b2da      	uxtb	r2, r3
 800d71e:	4908      	ldr	r1, [pc, #32]	@ (800d740 <__NVIC_SetPriority+0x50>)
 800d720:	79fb      	ldrb	r3, [r7, #7]
 800d722:	f003 030f 	and.w	r3, r3, #15
 800d726:	3b04      	subs	r3, #4
 800d728:	0112      	lsls	r2, r2, #4
 800d72a:	b2d2      	uxtb	r2, r2
 800d72c:	440b      	add	r3, r1
 800d72e:	761a      	strb	r2, [r3, #24]
}
 800d730:	bf00      	nop
 800d732:	370c      	adds	r7, #12
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr
 800d73c:	e000e100 	.word	0xe000e100
 800d740:	e000ed00 	.word	0xe000ed00

0800d744 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d744:	b580      	push	{r7, lr}
 800d746:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d748:	4b05      	ldr	r3, [pc, #20]	@ (800d760 <SysTick_Handler+0x1c>)
 800d74a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d74c:	f002 ff42 	bl	80105d4 <xTaskGetSchedulerState>
 800d750:	4603      	mov	r3, r0
 800d752:	2b01      	cmp	r3, #1
 800d754:	d001      	beq.n	800d75a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d756:	f004 f83f 	bl	80117d8 <xPortSysTickHandler>
  }
}
 800d75a:	bf00      	nop
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	e000e010 	.word	0xe000e010

0800d764 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d764:	b580      	push	{r7, lr}
 800d766:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d768:	2100      	movs	r1, #0
 800d76a:	f06f 0004 	mvn.w	r0, #4
 800d76e:	f7ff ffbf 	bl	800d6f0 <__NVIC_SetPriority>
#endif
}
 800d772:	bf00      	nop
 800d774:	bd80      	pop	{r7, pc}
	...

0800d778 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d778:	b480      	push	{r7}
 800d77a:	b083      	sub	sp, #12
 800d77c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d77e:	f3ef 8305 	mrs	r3, IPSR
 800d782:	603b      	str	r3, [r7, #0]
  return(result);
 800d784:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d786:	2b00      	cmp	r3, #0
 800d788:	d003      	beq.n	800d792 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d78a:	f06f 0305 	mvn.w	r3, #5
 800d78e:	607b      	str	r3, [r7, #4]
 800d790:	e00c      	b.n	800d7ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d792:	4b0a      	ldr	r3, [pc, #40]	@ (800d7bc <osKernelInitialize+0x44>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d105      	bne.n	800d7a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d79a:	4b08      	ldr	r3, [pc, #32]	@ (800d7bc <osKernelInitialize+0x44>)
 800d79c:	2201      	movs	r2, #1
 800d79e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	607b      	str	r3, [r7, #4]
 800d7a4:	e002      	b.n	800d7ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d7a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d7aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d7ac:	687b      	ldr	r3, [r7, #4]
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	370c      	adds	r7, #12
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr
 800d7ba:	bf00      	nop
 800d7bc:	2000c8d4 	.word	0x2000c8d4

0800d7c0 <osKernelGetInfo>:

osStatus_t osKernelGetInfo (osVersion_t *version, char *id_buf, uint32_t id_size) {
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b084      	sub	sp, #16
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	60f8      	str	r0, [r7, #12]
 800d7c8:	60b9      	str	r1, [r7, #8]
 800d7ca:	607a      	str	r2, [r7, #4]

  if (version != NULL) {
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d005      	beq.n	800d7de <osKernelGetInfo+0x1e>
    /* Version encoding is major.minor.rev: mmnnnrrrr dec */
    version->api    = KERNEL_VERSION;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	4a0c      	ldr	r2, [pc, #48]	@ (800d808 <osKernelGetInfo+0x48>)
 800d7d6:	601a      	str	r2, [r3, #0]
    version->kernel = KERNEL_VERSION;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	4a0b      	ldr	r2, [pc, #44]	@ (800d808 <osKernelGetInfo+0x48>)
 800d7dc:	605a      	str	r2, [r3, #4]
  }

  if ((id_buf != NULL) && (id_size != 0U)) {
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d00c      	beq.n	800d7fe <osKernelGetInfo+0x3e>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d009      	beq.n	800d7fe <osKernelGetInfo+0x3e>
    if (id_size > sizeof(KERNEL_ID)) {
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2b11      	cmp	r3, #17
 800d7ee:	d901      	bls.n	800d7f4 <osKernelGetInfo+0x34>
      id_size = sizeof(KERNEL_ID);
 800d7f0:	2311      	movs	r3, #17
 800d7f2:	607b      	str	r3, [r7, #4]
    }
    memcpy(id_buf, KERNEL_ID, id_size);
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	4905      	ldr	r1, [pc, #20]	@ (800d80c <osKernelGetInfo+0x4c>)
 800d7f8:	68b8      	ldr	r0, [r7, #8]
 800d7fa:	f006 fb94 	bl	8013f26 <memcpy>
  }

  return (osOK);
 800d7fe:	2300      	movs	r3, #0
}
 800d800:	4618      	mov	r0, r3
 800d802:	3710      	adds	r7, #16
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}
 800d808:	05f5f531 	.word	0x05f5f531
 800d80c:	08018984 	.word	0x08018984

0800d810 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d816:	f3ef 8305 	mrs	r3, IPSR
 800d81a:	603b      	str	r3, [r7, #0]
  return(result);
 800d81c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d003      	beq.n	800d82a <osKernelStart+0x1a>
    stat = osErrorISR;
 800d822:	f06f 0305 	mvn.w	r3, #5
 800d826:	607b      	str	r3, [r7, #4]
 800d828:	e010      	b.n	800d84c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d82a:	4b0b      	ldr	r3, [pc, #44]	@ (800d858 <osKernelStart+0x48>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d109      	bne.n	800d846 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d832:	f7ff ff97 	bl	800d764 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d836:	4b08      	ldr	r3, [pc, #32]	@ (800d858 <osKernelStart+0x48>)
 800d838:	2202      	movs	r2, #2
 800d83a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d83c:	f002 f834 	bl	800f8a8 <vTaskStartScheduler>
      stat = osOK;
 800d840:	2300      	movs	r3, #0
 800d842:	607b      	str	r3, [r7, #4]
 800d844:	e002      	b.n	800d84c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d846:	f04f 33ff 	mov.w	r3, #4294967295
 800d84a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d84c:	687b      	ldr	r3, [r7, #4]
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3708      	adds	r7, #8
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	2000c8d4 	.word	0x2000c8d4

0800d85c <osKernelGetTickFreq>:
  }

  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
 800d85c:	b480      	push	{r7}
 800d85e:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800d860:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 800d864:	4618      	mov	r0, r3
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr
	...

0800d870 <osKernelGetSysTimerFreq>:
  }

  return (val);
}

uint32_t osKernelGetSysTimerFreq (void) {
 800d870:	b480      	push	{r7}
 800d872:	af00      	add	r7, sp, #0
  return (configCPU_CLOCK_HZ);
 800d874:	4b03      	ldr	r3, [pc, #12]	@ (800d884 <osKernelGetSysTimerFreq+0x14>)
 800d876:	681b      	ldr	r3, [r3, #0]
}
 800d878:	4618      	mov	r0, r3
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr
 800d882:	bf00      	nop
 800d884:	200001d4 	.word	0x200001d4

0800d888 <osThreadNew>:

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d888:	b580      	push	{r7, lr}
 800d88a:	b08e      	sub	sp, #56	@ 0x38
 800d88c:	af04      	add	r7, sp, #16
 800d88e:	60f8      	str	r0, [r7, #12]
 800d890:	60b9      	str	r1, [r7, #8]
 800d892:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d894:	2300      	movs	r3, #0
 800d896:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d898:	f3ef 8305 	mrs	r3, IPSR
 800d89c:	617b      	str	r3, [r7, #20]
  return(result);
 800d89e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d17e      	bne.n	800d9a2 <osThreadNew+0x11a>
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d07b      	beq.n	800d9a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d8aa:	2380      	movs	r3, #128	@ 0x80
 800d8ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d8ae:	2318      	movs	r3, #24
 800d8b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800d8b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d8ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d045      	beq.n	800d94e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d002      	beq.n	800d8d0 <osThreadNew+0x48>
        name = attr->name;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	699b      	ldr	r3, [r3, #24]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d002      	beq.n	800d8de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	699b      	ldr	r3, [r3, #24]
 800d8dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d8de:	69fb      	ldr	r3, [r7, #28]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d008      	beq.n	800d8f6 <osThreadNew+0x6e>
 800d8e4:	69fb      	ldr	r3, [r7, #28]
 800d8e6:	2b38      	cmp	r3, #56	@ 0x38
 800d8e8:	d805      	bhi.n	800d8f6 <osThreadNew+0x6e>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	685b      	ldr	r3, [r3, #4]
 800d8ee:	f003 0301 	and.w	r3, r3, #1
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d001      	beq.n	800d8fa <osThreadNew+0x72>
        return (NULL);
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	e054      	b.n	800d9a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	695b      	ldr	r3, [r3, #20]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d003      	beq.n	800d90a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	695b      	ldr	r3, [r3, #20]
 800d906:	089b      	lsrs	r3, r3, #2
 800d908:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	689b      	ldr	r3, [r3, #8]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d00e      	beq.n	800d930 <osThreadNew+0xa8>
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	68db      	ldr	r3, [r3, #12]
 800d916:	2baf      	cmp	r3, #175	@ 0xaf
 800d918:	d90a      	bls.n	800d930 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d006      	beq.n	800d930 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	695b      	ldr	r3, [r3, #20]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d002      	beq.n	800d930 <osThreadNew+0xa8>
        mem = 1;
 800d92a:	2301      	movs	r3, #1
 800d92c:	61bb      	str	r3, [r7, #24]
 800d92e:	e010      	b.n	800d952 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	689b      	ldr	r3, [r3, #8]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d10c      	bne.n	800d952 <osThreadNew+0xca>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d108      	bne.n	800d952 <osThreadNew+0xca>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	691b      	ldr	r3, [r3, #16]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d104      	bne.n	800d952 <osThreadNew+0xca>
          mem = 0;
 800d948:	2300      	movs	r3, #0
 800d94a:	61bb      	str	r3, [r7, #24]
 800d94c:	e001      	b.n	800d952 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d94e:	2300      	movs	r3, #0
 800d950:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d952:	69bb      	ldr	r3, [r7, #24]
 800d954:	2b01      	cmp	r3, #1
 800d956:	d110      	bne.n	800d97a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d95c:	687a      	ldr	r2, [r7, #4]
 800d95e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d960:	9202      	str	r2, [sp, #8]
 800d962:	9301      	str	r3, [sp, #4]
 800d964:	69fb      	ldr	r3, [r7, #28]
 800d966:	9300      	str	r3, [sp, #0]
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	6a3a      	ldr	r2, [r7, #32]
 800d96c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d96e:	68f8      	ldr	r0, [r7, #12]
 800d970:	f001 fb1e 	bl	800efb0 <xTaskCreateStatic>
 800d974:	4603      	mov	r3, r0
 800d976:	613b      	str	r3, [r7, #16]
 800d978:	e013      	b.n	800d9a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d97a:	69bb      	ldr	r3, [r7, #24]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d110      	bne.n	800d9a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d980:	6a3b      	ldr	r3, [r7, #32]
 800d982:	b29a      	uxth	r2, r3
 800d984:	f107 0310 	add.w	r3, r7, #16
 800d988:	9301      	str	r3, [sp, #4]
 800d98a:	69fb      	ldr	r3, [r7, #28]
 800d98c:	9300      	str	r3, [sp, #0]
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d992:	68f8      	ldr	r0, [r7, #12]
 800d994:	f001 fb6c 	bl	800f070 <xTaskCreate>
 800d998:	4603      	mov	r3, r0
 800d99a:	2b01      	cmp	r3, #1
 800d99c:	d001      	beq.n	800d9a2 <osThreadNew+0x11a>
            hTask = NULL;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d9a2:	693b      	ldr	r3, [r7, #16]
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3728      	adds	r7, #40	@ 0x28
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9b4:	f3ef 8305 	mrs	r3, IPSR
 800d9b8:	60bb      	str	r3, [r7, #8]
  return(result);
 800d9ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d003      	beq.n	800d9c8 <osDelay+0x1c>
    stat = osErrorISR;
 800d9c0:	f06f 0305 	mvn.w	r3, #5
 800d9c4:	60fb      	str	r3, [r7, #12]
 800d9c6:	e007      	b.n	800d9d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d002      	beq.n	800d9d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f001 fd24 	bl	800f420 <vTaskDelay>
    }
  }

  return (stat);
 800d9d8:	68fb      	ldr	r3, [r7, #12]
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3710      	adds	r7, #16
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b08a      	sub	sp, #40	@ 0x28
 800d9e6:	af02      	add	r7, sp, #8
 800d9e8:	60f8      	str	r0, [r7, #12]
 800d9ea:	60b9      	str	r1, [r7, #8]
 800d9ec:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9f2:	f3ef 8305 	mrs	r3, IPSR
 800d9f6:	613b      	str	r3, [r7, #16]
  return(result);
 800d9f8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d15f      	bne.n	800dabe <osMessageQueueNew+0xdc>
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d05c      	beq.n	800dabe <osMessageQueueNew+0xdc>
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d059      	beq.n	800dabe <osMessageQueueNew+0xdc>
    mem = -1;
 800da0a:	f04f 33ff 	mov.w	r3, #4294967295
 800da0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d029      	beq.n	800da6a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	689b      	ldr	r3, [r3, #8]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d012      	beq.n	800da44 <osMessageQueueNew+0x62>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	68db      	ldr	r3, [r3, #12]
 800da22:	2b4f      	cmp	r3, #79	@ 0x4f
 800da24:	d90e      	bls.n	800da44 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d00a      	beq.n	800da44 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	695a      	ldr	r2, [r3, #20]
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	68b9      	ldr	r1, [r7, #8]
 800da36:	fb01 f303 	mul.w	r3, r1, r3
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d302      	bcc.n	800da44 <osMessageQueueNew+0x62>
        mem = 1;
 800da3e:	2301      	movs	r3, #1
 800da40:	61bb      	str	r3, [r7, #24]
 800da42:	e014      	b.n	800da6e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	689b      	ldr	r3, [r3, #8]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d110      	bne.n	800da6e <osMessageQueueNew+0x8c>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	68db      	ldr	r3, [r3, #12]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d10c      	bne.n	800da6e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d108      	bne.n	800da6e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	695b      	ldr	r3, [r3, #20]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d104      	bne.n	800da6e <osMessageQueueNew+0x8c>
          mem = 0;
 800da64:	2300      	movs	r3, #0
 800da66:	61bb      	str	r3, [r7, #24]
 800da68:	e001      	b.n	800da6e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800da6a:	2300      	movs	r3, #0
 800da6c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800da6e:	69bb      	ldr	r3, [r7, #24]
 800da70:	2b01      	cmp	r3, #1
 800da72:	d10b      	bne.n	800da8c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	691a      	ldr	r2, [r3, #16]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	689b      	ldr	r3, [r3, #8]
 800da7c:	2100      	movs	r1, #0
 800da7e:	9100      	str	r1, [sp, #0]
 800da80:	68b9      	ldr	r1, [r7, #8]
 800da82:	68f8      	ldr	r0, [r7, #12]
 800da84:	f000 fbec 	bl	800e260 <xQueueGenericCreateStatic>
 800da88:	61f8      	str	r0, [r7, #28]
 800da8a:	e008      	b.n	800da9e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800da8c:	69bb      	ldr	r3, [r7, #24]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d105      	bne.n	800da9e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800da92:	2200      	movs	r2, #0
 800da94:	68b9      	ldr	r1, [r7, #8]
 800da96:	68f8      	ldr	r0, [r7, #12]
 800da98:	f000 fc5f 	bl	800e35a <xQueueGenericCreate>
 800da9c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800da9e:	69fb      	ldr	r3, [r7, #28]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d00c      	beq.n	800dabe <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d003      	beq.n	800dab2 <osMessageQueueNew+0xd0>
        name = attr->name;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	617b      	str	r3, [r7, #20]
 800dab0:	e001      	b.n	800dab6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800dab2:	2300      	movs	r3, #0
 800dab4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800dab6:	6979      	ldr	r1, [r7, #20]
 800dab8:	69f8      	ldr	r0, [r7, #28]
 800daba:	f001 fa1b 	bl	800eef4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800dabe:	69fb      	ldr	r3, [r7, #28]
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3720      	adds	r7, #32
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800dac8:	b580      	push	{r7, lr}
 800daca:	b088      	sub	sp, #32
 800dacc:	af00      	add	r7, sp, #0
 800dace:	60f8      	str	r0, [r7, #12]
 800dad0:	60b9      	str	r1, [r7, #8]
 800dad2:	603b      	str	r3, [r7, #0]
 800dad4:	4613      	mov	r3, r2
 800dad6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dadc:	2300      	movs	r3, #0
 800dade:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dae0:	f3ef 8305 	mrs	r3, IPSR
 800dae4:	617b      	str	r3, [r7, #20]
  return(result);
 800dae6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d028      	beq.n	800db3e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800daec:	69bb      	ldr	r3, [r7, #24]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d005      	beq.n	800dafe <osMessageQueuePut+0x36>
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d002      	beq.n	800dafe <osMessageQueuePut+0x36>
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d003      	beq.n	800db06 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800dafe:	f06f 0303 	mvn.w	r3, #3
 800db02:	61fb      	str	r3, [r7, #28]
 800db04:	e038      	b.n	800db78 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800db06:	2300      	movs	r3, #0
 800db08:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800db0a:	f107 0210 	add.w	r2, r7, #16
 800db0e:	2300      	movs	r3, #0
 800db10:	68b9      	ldr	r1, [r7, #8]
 800db12:	69b8      	ldr	r0, [r7, #24]
 800db14:	f000 fdb4 	bl	800e680 <xQueueGenericSendFromISR>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b01      	cmp	r3, #1
 800db1c:	d003      	beq.n	800db26 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800db1e:	f06f 0302 	mvn.w	r3, #2
 800db22:	61fb      	str	r3, [r7, #28]
 800db24:	e028      	b.n	800db78 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d025      	beq.n	800db78 <osMessageQueuePut+0xb0>
 800db2c:	4b15      	ldr	r3, [pc, #84]	@ (800db84 <osMessageQueuePut+0xbc>)
 800db2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db32:	601a      	str	r2, [r3, #0]
 800db34:	f3bf 8f4f 	dsb	sy
 800db38:	f3bf 8f6f 	isb	sy
 800db3c:	e01c      	b.n	800db78 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800db3e:	69bb      	ldr	r3, [r7, #24]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d002      	beq.n	800db4a <osMessageQueuePut+0x82>
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d103      	bne.n	800db52 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800db4a:	f06f 0303 	mvn.w	r3, #3
 800db4e:	61fb      	str	r3, [r7, #28]
 800db50:	e012      	b.n	800db78 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800db52:	2300      	movs	r3, #0
 800db54:	683a      	ldr	r2, [r7, #0]
 800db56:	68b9      	ldr	r1, [r7, #8]
 800db58:	69b8      	ldr	r0, [r7, #24]
 800db5a:	f000 fc8f 	bl	800e47c <xQueueGenericSend>
 800db5e:	4603      	mov	r3, r0
 800db60:	2b01      	cmp	r3, #1
 800db62:	d009      	beq.n	800db78 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d003      	beq.n	800db72 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800db6a:	f06f 0301 	mvn.w	r3, #1
 800db6e:	61fb      	str	r3, [r7, #28]
 800db70:	e002      	b.n	800db78 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800db72:	f06f 0302 	mvn.w	r3, #2
 800db76:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800db78:	69fb      	ldr	r3, [r7, #28]
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3720      	adds	r7, #32
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	e000ed04 	.word	0xe000ed04

0800db88 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800db88:	b580      	push	{r7, lr}
 800db8a:	b088      	sub	sp, #32
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	60f8      	str	r0, [r7, #12]
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	607a      	str	r2, [r7, #4]
 800db94:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800db9a:	2300      	movs	r3, #0
 800db9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db9e:	f3ef 8305 	mrs	r3, IPSR
 800dba2:	617b      	str	r3, [r7, #20]
  return(result);
 800dba4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d028      	beq.n	800dbfc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dbaa:	69bb      	ldr	r3, [r7, #24]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d005      	beq.n	800dbbc <osMessageQueueGet+0x34>
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d002      	beq.n	800dbbc <osMessageQueueGet+0x34>
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d003      	beq.n	800dbc4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800dbbc:	f06f 0303 	mvn.w	r3, #3
 800dbc0:	61fb      	str	r3, [r7, #28]
 800dbc2:	e037      	b.n	800dc34 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800dbc8:	f107 0310 	add.w	r3, r7, #16
 800dbcc:	461a      	mov	r2, r3
 800dbce:	68b9      	ldr	r1, [r7, #8]
 800dbd0:	69b8      	ldr	r0, [r7, #24]
 800dbd2:	f000 ffe5 	bl	800eba0 <xQueueReceiveFromISR>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b01      	cmp	r3, #1
 800dbda:	d003      	beq.n	800dbe4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800dbdc:	f06f 0302 	mvn.w	r3, #2
 800dbe0:	61fb      	str	r3, [r7, #28]
 800dbe2:	e027      	b.n	800dc34 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d024      	beq.n	800dc34 <osMessageQueueGet+0xac>
 800dbea:	4b15      	ldr	r3, [pc, #84]	@ (800dc40 <osMessageQueueGet+0xb8>)
 800dbec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbf0:	601a      	str	r2, [r3, #0]
 800dbf2:	f3bf 8f4f 	dsb	sy
 800dbf6:	f3bf 8f6f 	isb	sy
 800dbfa:	e01b      	b.n	800dc34 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dbfc:	69bb      	ldr	r3, [r7, #24]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d002      	beq.n	800dc08 <osMessageQueueGet+0x80>
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d103      	bne.n	800dc10 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800dc08:	f06f 0303 	mvn.w	r3, #3
 800dc0c:	61fb      	str	r3, [r7, #28]
 800dc0e:	e011      	b.n	800dc34 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dc10:	683a      	ldr	r2, [r7, #0]
 800dc12:	68b9      	ldr	r1, [r7, #8]
 800dc14:	69b8      	ldr	r0, [r7, #24]
 800dc16:	f000 fdd1 	bl	800e7bc <xQueueReceive>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d009      	beq.n	800dc34 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d003      	beq.n	800dc2e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800dc26:	f06f 0301 	mvn.w	r3, #1
 800dc2a:	61fb      	str	r3, [r7, #28]
 800dc2c:	e002      	b.n	800dc34 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800dc2e:	f06f 0302 	mvn.w	r3, #2
 800dc32:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dc34:	69fb      	ldr	r3, [r7, #28]
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3720      	adds	r7, #32
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}
 800dc3e:	bf00      	nop
 800dc40:	e000ed04 	.word	0xe000ed04

0800dc44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dc44:	b480      	push	{r7}
 800dc46:	b085      	sub	sp, #20
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	60f8      	str	r0, [r7, #12]
 800dc4c:	60b9      	str	r1, [r7, #8]
 800dc4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	4a07      	ldr	r2, [pc, #28]	@ (800dc70 <vApplicationGetIdleTaskMemory+0x2c>)
 800dc54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	4a06      	ldr	r2, [pc, #24]	@ (800dc74 <vApplicationGetIdleTaskMemory+0x30>)
 800dc5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2280      	movs	r2, #128	@ 0x80
 800dc60:	601a      	str	r2, [r3, #0]
}
 800dc62:	bf00      	nop
 800dc64:	3714      	adds	r7, #20
 800dc66:	46bd      	mov	sp, r7
 800dc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6c:	4770      	bx	lr
 800dc6e:	bf00      	nop
 800dc70:	2000c8d8 	.word	0x2000c8d8
 800dc74:	2000c988 	.word	0x2000c988

0800dc78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dc78:	b480      	push	{r7}
 800dc7a:	b085      	sub	sp, #20
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	60f8      	str	r0, [r7, #12]
 800dc80:	60b9      	str	r1, [r7, #8]
 800dc82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	4a07      	ldr	r2, [pc, #28]	@ (800dca4 <vApplicationGetTimerTaskMemory+0x2c>)
 800dc88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	4a06      	ldr	r2, [pc, #24]	@ (800dca8 <vApplicationGetTimerTaskMemory+0x30>)
 800dc8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dc96:	601a      	str	r2, [r3, #0]
}
 800dc98:	bf00      	nop
 800dc9a:	3714      	adds	r7, #20
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca2:	4770      	bx	lr
 800dca4:	2000cb88 	.word	0x2000cb88
 800dca8:	2000cc38 	.word	0x2000cc38

0800dcac <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800dcb2:	2020      	movs	r0, #32
 800dcb4:	f003 fe22 	bl	80118fc <pvPortMalloc>
 800dcb8:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d00a      	beq.n	800dcd6 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	3304      	adds	r3, #4
 800dcca:	4618      	mov	r0, r3
 800dccc:	f000 f9aa 	bl	800e024 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800dcd6:	687b      	ldr	r3, [r7, #4]
	}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3708      	adds	r7, #8
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b090      	sub	sp, #64	@ 0x40
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	60f8      	str	r0, [r7, #12]
 800dce8:	60b9      	str	r1, [r7, #8]
 800dcea:	607a      	str	r2, [r7, #4]
 800dcec:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d10b      	bne.n	800dd18 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd04:	f383 8811 	msr	BASEPRI, r3
 800dd08:	f3bf 8f6f 	isb	sy
 800dd0c:	f3bf 8f4f 	dsb	sy
 800dd10:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dd12:	bf00      	nop
 800dd14:	bf00      	nop
 800dd16:	e7fd      	b.n	800dd14 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dd1e:	d30b      	bcc.n	800dd38 <xEventGroupWaitBits+0x58>
	__asm volatile
 800dd20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd24:	f383 8811 	msr	BASEPRI, r3
 800dd28:	f3bf 8f6f 	isb	sy
 800dd2c:	f3bf 8f4f 	dsb	sy
 800dd30:	61fb      	str	r3, [r7, #28]
}
 800dd32:	bf00      	nop
 800dd34:	bf00      	nop
 800dd36:	e7fd      	b.n	800dd34 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d10b      	bne.n	800dd56 <xEventGroupWaitBits+0x76>
	__asm volatile
 800dd3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd42:	f383 8811 	msr	BASEPRI, r3
 800dd46:	f3bf 8f6f 	isb	sy
 800dd4a:	f3bf 8f4f 	dsb	sy
 800dd4e:	61bb      	str	r3, [r7, #24]
}
 800dd50:	bf00      	nop
 800dd52:	bf00      	nop
 800dd54:	e7fd      	b.n	800dd52 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd56:	f002 fc3d 	bl	80105d4 <xTaskGetSchedulerState>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d102      	bne.n	800dd66 <xEventGroupWaitBits+0x86>
 800dd60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d101      	bne.n	800dd6a <xEventGroupWaitBits+0x8a>
 800dd66:	2301      	movs	r3, #1
 800dd68:	e000      	b.n	800dd6c <xEventGroupWaitBits+0x8c>
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d10b      	bne.n	800dd88 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800dd70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd74:	f383 8811 	msr	BASEPRI, r3
 800dd78:	f3bf 8f6f 	isb	sy
 800dd7c:	f3bf 8f4f 	dsb	sy
 800dd80:	617b      	str	r3, [r7, #20]
}
 800dd82:	bf00      	nop
 800dd84:	bf00      	nop
 800dd86:	e7fd      	b.n	800dd84 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800dd88:	f001 fdfe 	bl	800f988 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800dd8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800dd92:	683a      	ldr	r2, [r7, #0]
 800dd94:	68b9      	ldr	r1, [r7, #8]
 800dd96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd98:	f000 f90d 	bl	800dfb6 <prvTestWaitCondition>
 800dd9c:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800dd9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d00e      	beq.n	800ddc2 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800dda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dda6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d028      	beq.n	800de04 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800ddb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddb4:	681a      	ldr	r2, [r3, #0]
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	43db      	mvns	r3, r3
 800ddba:	401a      	ands	r2, r3
 800ddbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddbe:	601a      	str	r2, [r3, #0]
 800ddc0:	e020      	b.n	800de04 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800ddc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d104      	bne.n	800ddd2 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800ddc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddca:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800ddcc:	2301      	movs	r3, #1
 800ddce:	633b      	str	r3, [r7, #48]	@ 0x30
 800ddd0:	e018      	b.n	800de04 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d003      	beq.n	800dde0 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800ddd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ddde:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d003      	beq.n	800ddee <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800dde6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dde8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ddec:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800ddee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddf0:	1d18      	adds	r0, r3, #4
 800ddf2:	68ba      	ldr	r2, [r7, #8]
 800ddf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddf6:	4313      	orrs	r3, r2
 800ddf8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ddfa:	4619      	mov	r1, r3
 800ddfc:	f002 f8b8 	bl	800ff70 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800de00:	2300      	movs	r3, #0
 800de02:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800de04:	f001 fdce 	bl	800f9a4 <xTaskResumeAll>
 800de08:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800de0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d031      	beq.n	800de74 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800de10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de12:	2b00      	cmp	r3, #0
 800de14:	d107      	bne.n	800de26 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800de16:	4b1a      	ldr	r3, [pc, #104]	@ (800de80 <xEventGroupWaitBits+0x1a0>)
 800de18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de1c:	601a      	str	r2, [r3, #0]
 800de1e:	f3bf 8f4f 	dsb	sy
 800de22:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800de26:	f002 fd4f 	bl	80108c8 <uxTaskResetEventItemValue>
 800de2a:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800de2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800de32:	2b00      	cmp	r3, #0
 800de34:	d11a      	bne.n	800de6c <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800de36:	f003 fc3f 	bl	80116b8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800de3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800de40:	683a      	ldr	r2, [r7, #0]
 800de42:	68b9      	ldr	r1, [r7, #8]
 800de44:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800de46:	f000 f8b6 	bl	800dfb6 <prvTestWaitCondition>
 800de4a:	4603      	mov	r3, r0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d009      	beq.n	800de64 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d006      	beq.n	800de64 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800de56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	43db      	mvns	r3, r3
 800de5e:	401a      	ands	r2, r3
 800de60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de62:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800de64:	2301      	movs	r3, #1
 800de66:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800de68:	f003 fc58 	bl	801171c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800de6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de6e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800de72:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800de74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800de76:	4618      	mov	r0, r3
 800de78:	3740      	adds	r7, #64	@ 0x40
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	bf00      	nop
 800de80:	e000ed04 	.word	0xe000ed04

0800de84 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b08e      	sub	sp, #56	@ 0x38
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800de8e:	2300      	movs	r3, #0
 800de90:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800de96:	2300      	movs	r3, #0
 800de98:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d10b      	bne.n	800deb8 <xEventGroupSetBits+0x34>
	__asm volatile
 800dea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dea4:	f383 8811 	msr	BASEPRI, r3
 800dea8:	f3bf 8f6f 	isb	sy
 800deac:	f3bf 8f4f 	dsb	sy
 800deb0:	613b      	str	r3, [r7, #16]
}
 800deb2:	bf00      	nop
 800deb4:	bf00      	nop
 800deb6:	e7fd      	b.n	800deb4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800debe:	d30b      	bcc.n	800ded8 <xEventGroupSetBits+0x54>
	__asm volatile
 800dec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dec4:	f383 8811 	msr	BASEPRI, r3
 800dec8:	f3bf 8f6f 	isb	sy
 800decc:	f3bf 8f4f 	dsb	sy
 800ded0:	60fb      	str	r3, [r7, #12]
}
 800ded2:	bf00      	nop
 800ded4:	bf00      	nop
 800ded6:	e7fd      	b.n	800ded4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800ded8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deda:	3304      	adds	r3, #4
 800dedc:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dee0:	3308      	adds	r3, #8
 800dee2:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800dee4:	f001 fd50 	bl	800f988 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800dee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deea:	68db      	ldr	r3, [r3, #12]
 800deec:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800deee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800def0:	681a      	ldr	r2, [r3, #0]
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	431a      	orrs	r2, r3
 800def6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800def8:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800defa:	e03c      	b.n	800df76 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800defc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800defe:	685b      	ldr	r3, [r3, #4]
 800df00:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800df02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800df08:	2300      	movs	r3, #0
 800df0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800df0c:	69bb      	ldr	r3, [r7, #24]
 800df0e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800df12:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800df14:	69bb      	ldr	r3, [r7, #24]
 800df16:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800df1a:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800df22:	2b00      	cmp	r3, #0
 800df24:	d108      	bne.n	800df38 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800df26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df28:	681a      	ldr	r2, [r3, #0]
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	4013      	ands	r3, r2
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d00b      	beq.n	800df4a <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800df32:	2301      	movs	r3, #1
 800df34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800df36:	e008      	b.n	800df4a <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800df38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df3a:	681a      	ldr	r2, [r3, #0]
 800df3c:	69bb      	ldr	r3, [r7, #24]
 800df3e:	4013      	ands	r3, r2
 800df40:	69ba      	ldr	r2, [r7, #24]
 800df42:	429a      	cmp	r2, r3
 800df44:	d101      	bne.n	800df4a <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800df46:	2301      	movs	r3, #1
 800df48:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800df4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d010      	beq.n	800df72 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800df56:	2b00      	cmp	r3, #0
 800df58:	d003      	beq.n	800df62 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800df5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df5c:	69bb      	ldr	r3, [r7, #24]
 800df5e:	4313      	orrs	r3, r2
 800df60:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800df62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800df6a:	4619      	mov	r1, r3
 800df6c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800df6e:	f002 f8cd 	bl	801010c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800df72:	69fb      	ldr	r3, [r7, #28]
 800df74:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800df76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800df78:	6a3b      	ldr	r3, [r7, #32]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d1be      	bne.n	800defc <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800df7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df80:	681a      	ldr	r2, [r3, #0]
 800df82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df84:	43db      	mvns	r3, r3
 800df86:	401a      	ands	r2, r3
 800df88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df8a:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800df8c:	f001 fd0a 	bl	800f9a4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800df90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df92:	681b      	ldr	r3, [r3, #0]
}
 800df94:	4618      	mov	r0, r3
 800df96:	3738      	adds	r7, #56	@ 0x38
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}

0800df9c <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b082      	sub	sp, #8
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800dfa6:	6839      	ldr	r1, [r7, #0]
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f7ff ff6b 	bl	800de84 <xEventGroupSetBits>
}
 800dfae:	bf00      	nop
 800dfb0:	3708      	adds	r7, #8
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}

0800dfb6 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800dfb6:	b480      	push	{r7}
 800dfb8:	b087      	sub	sp, #28
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	60f8      	str	r0, [r7, #12]
 800dfbe:	60b9      	str	r1, [r7, #8]
 800dfc0:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d107      	bne.n	800dfdc <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800dfcc:	68fa      	ldr	r2, [r7, #12]
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	4013      	ands	r3, r2
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d00a      	beq.n	800dfec <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	617b      	str	r3, [r7, #20]
 800dfda:	e007      	b.n	800dfec <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800dfdc:	68fa      	ldr	r2, [r7, #12]
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	4013      	ands	r3, r2
 800dfe2:	68ba      	ldr	r2, [r7, #8]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d101      	bne.n	800dfec <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800dfe8:	2301      	movs	r3, #1
 800dfea:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800dfec:	697b      	ldr	r3, [r7, #20]
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	371c      	adds	r7, #28
 800dff2:	46bd      	mov	sp, r7
 800dff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff8:	4770      	bx	lr
	...

0800dffc <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b086      	sub	sp, #24
 800e000:	af00      	add	r7, sp, #0
 800e002:	60f8      	str	r0, [r7, #12]
 800e004:	60b9      	str	r1, [r7, #8]
 800e006:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	68ba      	ldr	r2, [r7, #8]
 800e00c:	68f9      	ldr	r1, [r7, #12]
 800e00e:	4804      	ldr	r0, [pc, #16]	@ (800e020 <xEventGroupSetBitsFromISR+0x24>)
 800e010:	f003 fa00 	bl	8011414 <xTimerPendFunctionCallFromISR>
 800e014:	6178      	str	r0, [r7, #20]

		return xReturn;
 800e016:	697b      	ldr	r3, [r7, #20]
	}
 800e018:	4618      	mov	r0, r3
 800e01a:	3718      	adds	r7, #24
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}
 800e020:	0800df9d 	.word	0x0800df9d

0800e024 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e024:	b480      	push	{r7}
 800e026:	b083      	sub	sp, #12
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f103 0208 	add.w	r2, r3, #8
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f04f 32ff 	mov.w	r2, #4294967295
 800e03c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f103 0208 	add.w	r2, r3, #8
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f103 0208 	add.w	r2, r3, #8
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2200      	movs	r2, #0
 800e056:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e058:	bf00      	nop
 800e05a:	370c      	adds	r7, #12
 800e05c:	46bd      	mov	sp, r7
 800e05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e062:	4770      	bx	lr

0800e064 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e064:	b480      	push	{r7}
 800e066:	b083      	sub	sp, #12
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2200      	movs	r2, #0
 800e070:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e072:	bf00      	nop
 800e074:	370c      	adds	r7, #12
 800e076:	46bd      	mov	sp, r7
 800e078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07c:	4770      	bx	lr

0800e07e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e07e:	b480      	push	{r7}
 800e080:	b085      	sub	sp, #20
 800e082:	af00      	add	r7, sp, #0
 800e084:	6078      	str	r0, [r7, #4]
 800e086:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	68fa      	ldr	r2, [r7, #12]
 800e092:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	689a      	ldr	r2, [r3, #8]
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	689b      	ldr	r3, [r3, #8]
 800e0a0:	683a      	ldr	r2, [r7, #0]
 800e0a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	683a      	ldr	r2, [r7, #0]
 800e0a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	687a      	ldr	r2, [r7, #4]
 800e0ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	1c5a      	adds	r2, r3, #1
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	601a      	str	r2, [r3, #0]
}
 800e0ba:	bf00      	nop
 800e0bc:	3714      	adds	r7, #20
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c4:	4770      	bx	lr

0800e0c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e0c6:	b480      	push	{r7}
 800e0c8:	b085      	sub	sp, #20
 800e0ca:	af00      	add	r7, sp, #0
 800e0cc:	6078      	str	r0, [r7, #4]
 800e0ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0dc:	d103      	bne.n	800e0e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	691b      	ldr	r3, [r3, #16]
 800e0e2:	60fb      	str	r3, [r7, #12]
 800e0e4:	e00c      	b.n	800e100 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	3308      	adds	r3, #8
 800e0ea:	60fb      	str	r3, [r7, #12]
 800e0ec:	e002      	b.n	800e0f4 <vListInsert+0x2e>
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	685b      	ldr	r3, [r3, #4]
 800e0f2:	60fb      	str	r3, [r7, #12]
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	68ba      	ldr	r2, [r7, #8]
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d2f6      	bcs.n	800e0ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	685a      	ldr	r2, [r3, #4]
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	683a      	ldr	r2, [r7, #0]
 800e10e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	68fa      	ldr	r2, [r7, #12]
 800e114:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	683a      	ldr	r2, [r7, #0]
 800e11a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	687a      	ldr	r2, [r7, #4]
 800e120:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	1c5a      	adds	r2, r3, #1
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	601a      	str	r2, [r3, #0]
}
 800e12c:	bf00      	nop
 800e12e:	3714      	adds	r7, #20
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr

0800e138 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e138:	b480      	push	{r7}
 800e13a:	b085      	sub	sp, #20
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	691b      	ldr	r3, [r3, #16]
 800e144:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	685b      	ldr	r3, [r3, #4]
 800e14a:	687a      	ldr	r2, [r7, #4]
 800e14c:	6892      	ldr	r2, [r2, #8]
 800e14e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	689b      	ldr	r3, [r3, #8]
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	6852      	ldr	r2, [r2, #4]
 800e158:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	685b      	ldr	r3, [r3, #4]
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	429a      	cmp	r2, r3
 800e162:	d103      	bne.n	800e16c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	689a      	ldr	r2, [r3, #8]
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2200      	movs	r2, #0
 800e170:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	1e5a      	subs	r2, r3, #1
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	681b      	ldr	r3, [r3, #0]
}
 800e180:	4618      	mov	r0, r3
 800e182:	3714      	adds	r7, #20
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr

0800e18c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b084      	sub	sp, #16
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d10b      	bne.n	800e1b8 <xQueueGenericReset+0x2c>
	__asm volatile
 800e1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1a4:	f383 8811 	msr	BASEPRI, r3
 800e1a8:	f3bf 8f6f 	isb	sy
 800e1ac:	f3bf 8f4f 	dsb	sy
 800e1b0:	60bb      	str	r3, [r7, #8]
}
 800e1b2:	bf00      	nop
 800e1b4:	bf00      	nop
 800e1b6:	e7fd      	b.n	800e1b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e1b8:	f003 fa7e 	bl	80116b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1c4:	68f9      	ldr	r1, [r7, #12]
 800e1c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e1c8:	fb01 f303 	mul.w	r3, r1, r3
 800e1cc:	441a      	add	r2, r3
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681a      	ldr	r2, [r3, #0]
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1e8:	3b01      	subs	r3, #1
 800e1ea:	68f9      	ldr	r1, [r7, #12]
 800e1ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e1ee:	fb01 f303 	mul.w	r3, r1, r3
 800e1f2:	441a      	add	r2, r3
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	22ff      	movs	r2, #255	@ 0xff
 800e1fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	22ff      	movs	r2, #255	@ 0xff
 800e204:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d114      	bne.n	800e238 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	691b      	ldr	r3, [r3, #16]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d01a      	beq.n	800e24c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	3310      	adds	r3, #16
 800e21a:	4618      	mov	r0, r3
 800e21c:	f001 ff12 	bl	8010044 <xTaskRemoveFromEventList>
 800e220:	4603      	mov	r3, r0
 800e222:	2b00      	cmp	r3, #0
 800e224:	d012      	beq.n	800e24c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e226:	4b0d      	ldr	r3, [pc, #52]	@ (800e25c <xQueueGenericReset+0xd0>)
 800e228:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e22c:	601a      	str	r2, [r3, #0]
 800e22e:	f3bf 8f4f 	dsb	sy
 800e232:	f3bf 8f6f 	isb	sy
 800e236:	e009      	b.n	800e24c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	3310      	adds	r3, #16
 800e23c:	4618      	mov	r0, r3
 800e23e:	f7ff fef1 	bl	800e024 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	3324      	adds	r3, #36	@ 0x24
 800e246:	4618      	mov	r0, r3
 800e248:	f7ff feec 	bl	800e024 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e24c:	f003 fa66 	bl	801171c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e250:	2301      	movs	r3, #1
}
 800e252:	4618      	mov	r0, r3
 800e254:	3710      	adds	r7, #16
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
 800e25a:	bf00      	nop
 800e25c:	e000ed04 	.word	0xe000ed04

0800e260 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e260:	b580      	push	{r7, lr}
 800e262:	b08e      	sub	sp, #56	@ 0x38
 800e264:	af02      	add	r7, sp, #8
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	60b9      	str	r1, [r7, #8]
 800e26a:	607a      	str	r2, [r7, #4]
 800e26c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d10b      	bne.n	800e28c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800e274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e278:	f383 8811 	msr	BASEPRI, r3
 800e27c:	f3bf 8f6f 	isb	sy
 800e280:	f3bf 8f4f 	dsb	sy
 800e284:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e286:	bf00      	nop
 800e288:	bf00      	nop
 800e28a:	e7fd      	b.n	800e288 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d10b      	bne.n	800e2aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800e292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e296:	f383 8811 	msr	BASEPRI, r3
 800e29a:	f3bf 8f6f 	isb	sy
 800e29e:	f3bf 8f4f 	dsb	sy
 800e2a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e2a4:	bf00      	nop
 800e2a6:	bf00      	nop
 800e2a8:	e7fd      	b.n	800e2a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d002      	beq.n	800e2b6 <xQueueGenericCreateStatic+0x56>
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d001      	beq.n	800e2ba <xQueueGenericCreateStatic+0x5a>
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	e000      	b.n	800e2bc <xQueueGenericCreateStatic+0x5c>
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d10b      	bne.n	800e2d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2c4:	f383 8811 	msr	BASEPRI, r3
 800e2c8:	f3bf 8f6f 	isb	sy
 800e2cc:	f3bf 8f4f 	dsb	sy
 800e2d0:	623b      	str	r3, [r7, #32]
}
 800e2d2:	bf00      	nop
 800e2d4:	bf00      	nop
 800e2d6:	e7fd      	b.n	800e2d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d102      	bne.n	800e2e4 <xQueueGenericCreateStatic+0x84>
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d101      	bne.n	800e2e8 <xQueueGenericCreateStatic+0x88>
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	e000      	b.n	800e2ea <xQueueGenericCreateStatic+0x8a>
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d10b      	bne.n	800e306 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2f2:	f383 8811 	msr	BASEPRI, r3
 800e2f6:	f3bf 8f6f 	isb	sy
 800e2fa:	f3bf 8f4f 	dsb	sy
 800e2fe:	61fb      	str	r3, [r7, #28]
}
 800e300:	bf00      	nop
 800e302:	bf00      	nop
 800e304:	e7fd      	b.n	800e302 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e306:	2350      	movs	r3, #80	@ 0x50
 800e308:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	2b50      	cmp	r3, #80	@ 0x50
 800e30e:	d00b      	beq.n	800e328 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e314:	f383 8811 	msr	BASEPRI, r3
 800e318:	f3bf 8f6f 	isb	sy
 800e31c:	f3bf 8f4f 	dsb	sy
 800e320:	61bb      	str	r3, [r7, #24]
}
 800e322:	bf00      	nop
 800e324:	bf00      	nop
 800e326:	e7fd      	b.n	800e324 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e328:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e32e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e330:	2b00      	cmp	r3, #0
 800e332:	d00d      	beq.n	800e350 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e336:	2201      	movs	r2, #1
 800e338:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e33c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e342:	9300      	str	r3, [sp, #0]
 800e344:	4613      	mov	r3, r2
 800e346:	687a      	ldr	r2, [r7, #4]
 800e348:	68b9      	ldr	r1, [r7, #8]
 800e34a:	68f8      	ldr	r0, [r7, #12]
 800e34c:	f000 f840 	bl	800e3d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e352:	4618      	mov	r0, r3
 800e354:	3730      	adds	r7, #48	@ 0x30
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}

0800e35a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e35a:	b580      	push	{r7, lr}
 800e35c:	b08a      	sub	sp, #40	@ 0x28
 800e35e:	af02      	add	r7, sp, #8
 800e360:	60f8      	str	r0, [r7, #12]
 800e362:	60b9      	str	r1, [r7, #8]
 800e364:	4613      	mov	r3, r2
 800e366:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d10b      	bne.n	800e386 <xQueueGenericCreate+0x2c>
	__asm volatile
 800e36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e372:	f383 8811 	msr	BASEPRI, r3
 800e376:	f3bf 8f6f 	isb	sy
 800e37a:	f3bf 8f4f 	dsb	sy
 800e37e:	613b      	str	r3, [r7, #16]
}
 800e380:	bf00      	nop
 800e382:	bf00      	nop
 800e384:	e7fd      	b.n	800e382 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	68ba      	ldr	r2, [r7, #8]
 800e38a:	fb02 f303 	mul.w	r3, r2, r3
 800e38e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e390:	69fb      	ldr	r3, [r7, #28]
 800e392:	3350      	adds	r3, #80	@ 0x50
 800e394:	4618      	mov	r0, r3
 800e396:	f003 fab1 	bl	80118fc <pvPortMalloc>
 800e39a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e39c:	69bb      	ldr	r3, [r7, #24]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d011      	beq.n	800e3c6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e3a2:	69bb      	ldr	r3, [r7, #24]
 800e3a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	3350      	adds	r3, #80	@ 0x50
 800e3aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e3ac:	69bb      	ldr	r3, [r7, #24]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e3b4:	79fa      	ldrb	r2, [r7, #7]
 800e3b6:	69bb      	ldr	r3, [r7, #24]
 800e3b8:	9300      	str	r3, [sp, #0]
 800e3ba:	4613      	mov	r3, r2
 800e3bc:	697a      	ldr	r2, [r7, #20]
 800e3be:	68b9      	ldr	r1, [r7, #8]
 800e3c0:	68f8      	ldr	r0, [r7, #12]
 800e3c2:	f000 f805 	bl	800e3d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e3c6:	69bb      	ldr	r3, [r7, #24]
	}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3720      	adds	r7, #32
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}

0800e3d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b084      	sub	sp, #16
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	60f8      	str	r0, [r7, #12]
 800e3d8:	60b9      	str	r1, [r7, #8]
 800e3da:	607a      	str	r2, [r7, #4]
 800e3dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d103      	bne.n	800e3ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e3e4:	69bb      	ldr	r3, [r7, #24]
 800e3e6:	69ba      	ldr	r2, [r7, #24]
 800e3e8:	601a      	str	r2, [r3, #0]
 800e3ea:	e002      	b.n	800e3f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e3ec:	69bb      	ldr	r3, [r7, #24]
 800e3ee:	687a      	ldr	r2, [r7, #4]
 800e3f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e3f2:	69bb      	ldr	r3, [r7, #24]
 800e3f4:	68fa      	ldr	r2, [r7, #12]
 800e3f6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e3f8:	69bb      	ldr	r3, [r7, #24]
 800e3fa:	68ba      	ldr	r2, [r7, #8]
 800e3fc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e3fe:	2101      	movs	r1, #1
 800e400:	69b8      	ldr	r0, [r7, #24]
 800e402:	f7ff fec3 	bl	800e18c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e406:	69bb      	ldr	r3, [r7, #24]
 800e408:	78fa      	ldrb	r2, [r7, #3]
 800e40a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e40e:	bf00      	nop
 800e410:	3710      	adds	r7, #16
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}

0800e416 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e416:	b580      	push	{r7, lr}
 800e418:	b082      	sub	sp, #8
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d00e      	beq.n	800e442 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2200      	movs	r2, #0
 800e428:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2200      	movs	r2, #0
 800e42e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2200      	movs	r2, #0
 800e434:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e436:	2300      	movs	r3, #0
 800e438:	2200      	movs	r2, #0
 800e43a:	2100      	movs	r1, #0
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f000 f81d 	bl	800e47c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e442:	bf00      	nop
 800e444:	3708      	adds	r7, #8
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}

0800e44a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e44a:	b580      	push	{r7, lr}
 800e44c:	b086      	sub	sp, #24
 800e44e:	af00      	add	r7, sp, #0
 800e450:	4603      	mov	r3, r0
 800e452:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e454:	2301      	movs	r3, #1
 800e456:	617b      	str	r3, [r7, #20]
 800e458:	2300      	movs	r3, #0
 800e45a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e45c:	79fb      	ldrb	r3, [r7, #7]
 800e45e:	461a      	mov	r2, r3
 800e460:	6939      	ldr	r1, [r7, #16]
 800e462:	6978      	ldr	r0, [r7, #20]
 800e464:	f7ff ff79 	bl	800e35a <xQueueGenericCreate>
 800e468:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e46a:	68f8      	ldr	r0, [r7, #12]
 800e46c:	f7ff ffd3 	bl	800e416 <prvInitialiseMutex>

		return xNewQueue;
 800e470:	68fb      	ldr	r3, [r7, #12]
	}
 800e472:	4618      	mov	r0, r3
 800e474:	3718      	adds	r7, #24
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
	...

0800e47c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b08e      	sub	sp, #56	@ 0x38
 800e480:	af00      	add	r7, sp, #0
 800e482:	60f8      	str	r0, [r7, #12]
 800e484:	60b9      	str	r1, [r7, #8]
 800e486:	607a      	str	r2, [r7, #4]
 800e488:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e48a:	2300      	movs	r3, #0
 800e48c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e494:	2b00      	cmp	r3, #0
 800e496:	d10b      	bne.n	800e4b0 <xQueueGenericSend+0x34>
	__asm volatile
 800e498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e49c:	f383 8811 	msr	BASEPRI, r3
 800e4a0:	f3bf 8f6f 	isb	sy
 800e4a4:	f3bf 8f4f 	dsb	sy
 800e4a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e4aa:	bf00      	nop
 800e4ac:	bf00      	nop
 800e4ae:	e7fd      	b.n	800e4ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d103      	bne.n	800e4be <xQueueGenericSend+0x42>
 800e4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d101      	bne.n	800e4c2 <xQueueGenericSend+0x46>
 800e4be:	2301      	movs	r3, #1
 800e4c0:	e000      	b.n	800e4c4 <xQueueGenericSend+0x48>
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d10b      	bne.n	800e4e0 <xQueueGenericSend+0x64>
	__asm volatile
 800e4c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4cc:	f383 8811 	msr	BASEPRI, r3
 800e4d0:	f3bf 8f6f 	isb	sy
 800e4d4:	f3bf 8f4f 	dsb	sy
 800e4d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e4da:	bf00      	nop
 800e4dc:	bf00      	nop
 800e4de:	e7fd      	b.n	800e4dc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	2b02      	cmp	r3, #2
 800e4e4:	d103      	bne.n	800e4ee <xQueueGenericSend+0x72>
 800e4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	d101      	bne.n	800e4f2 <xQueueGenericSend+0x76>
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	e000      	b.n	800e4f4 <xQueueGenericSend+0x78>
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d10b      	bne.n	800e510 <xQueueGenericSend+0x94>
	__asm volatile
 800e4f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4fc:	f383 8811 	msr	BASEPRI, r3
 800e500:	f3bf 8f6f 	isb	sy
 800e504:	f3bf 8f4f 	dsb	sy
 800e508:	623b      	str	r3, [r7, #32]
}
 800e50a:	bf00      	nop
 800e50c:	bf00      	nop
 800e50e:	e7fd      	b.n	800e50c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e510:	f002 f860 	bl	80105d4 <xTaskGetSchedulerState>
 800e514:	4603      	mov	r3, r0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d102      	bne.n	800e520 <xQueueGenericSend+0xa4>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d101      	bne.n	800e524 <xQueueGenericSend+0xa8>
 800e520:	2301      	movs	r3, #1
 800e522:	e000      	b.n	800e526 <xQueueGenericSend+0xaa>
 800e524:	2300      	movs	r3, #0
 800e526:	2b00      	cmp	r3, #0
 800e528:	d10b      	bne.n	800e542 <xQueueGenericSend+0xc6>
	__asm volatile
 800e52a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e52e:	f383 8811 	msr	BASEPRI, r3
 800e532:	f3bf 8f6f 	isb	sy
 800e536:	f3bf 8f4f 	dsb	sy
 800e53a:	61fb      	str	r3, [r7, #28]
}
 800e53c:	bf00      	nop
 800e53e:	bf00      	nop
 800e540:	e7fd      	b.n	800e53e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e542:	f003 f8b9 	bl	80116b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e548:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e54c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e54e:	429a      	cmp	r2, r3
 800e550:	d302      	bcc.n	800e558 <xQueueGenericSend+0xdc>
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	2b02      	cmp	r3, #2
 800e556:	d129      	bne.n	800e5ac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e558:	683a      	ldr	r2, [r7, #0]
 800e55a:	68b9      	ldr	r1, [r7, #8]
 800e55c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e55e:	f000 fbb9 	bl	800ecd4 <prvCopyDataToQueue>
 800e562:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d010      	beq.n	800e58e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e56e:	3324      	adds	r3, #36	@ 0x24
 800e570:	4618      	mov	r0, r3
 800e572:	f001 fd67 	bl	8010044 <xTaskRemoveFromEventList>
 800e576:	4603      	mov	r3, r0
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d013      	beq.n	800e5a4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e57c:	4b3f      	ldr	r3, [pc, #252]	@ (800e67c <xQueueGenericSend+0x200>)
 800e57e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e582:	601a      	str	r2, [r3, #0]
 800e584:	f3bf 8f4f 	dsb	sy
 800e588:	f3bf 8f6f 	isb	sy
 800e58c:	e00a      	b.n	800e5a4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e590:	2b00      	cmp	r3, #0
 800e592:	d007      	beq.n	800e5a4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e594:	4b39      	ldr	r3, [pc, #228]	@ (800e67c <xQueueGenericSend+0x200>)
 800e596:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e59a:	601a      	str	r2, [r3, #0]
 800e59c:	f3bf 8f4f 	dsb	sy
 800e5a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e5a4:	f003 f8ba 	bl	801171c <vPortExitCritical>
				return pdPASS;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	e063      	b.n	800e674 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d103      	bne.n	800e5ba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e5b2:	f003 f8b3 	bl	801171c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	e05c      	b.n	800e674 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e5ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d106      	bne.n	800e5ce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e5c0:	f107 0314 	add.w	r3, r7, #20
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f001 fe05 	bl	80101d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e5ce:	f003 f8a5 	bl	801171c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e5d2:	f001 f9d9 	bl	800f988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e5d6:	f003 f86f 	bl	80116b8 <vPortEnterCritical>
 800e5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e5e0:	b25b      	sxtb	r3, r3
 800e5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5e6:	d103      	bne.n	800e5f0 <xQueueGenericSend+0x174>
 800e5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e5f6:	b25b      	sxtb	r3, r3
 800e5f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5fc:	d103      	bne.n	800e606 <xQueueGenericSend+0x18a>
 800e5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e600:	2200      	movs	r2, #0
 800e602:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e606:	f003 f889 	bl	801171c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e60a:	1d3a      	adds	r2, r7, #4
 800e60c:	f107 0314 	add.w	r3, r7, #20
 800e610:	4611      	mov	r1, r2
 800e612:	4618      	mov	r0, r3
 800e614:	f001 fdf4 	bl	8010200 <xTaskCheckForTimeOut>
 800e618:	4603      	mov	r3, r0
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d124      	bne.n	800e668 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e61e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e620:	f000 fc50 	bl	800eec4 <prvIsQueueFull>
 800e624:	4603      	mov	r3, r0
 800e626:	2b00      	cmp	r3, #0
 800e628:	d018      	beq.n	800e65c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e62c:	3310      	adds	r3, #16
 800e62e:	687a      	ldr	r2, [r7, #4]
 800e630:	4611      	mov	r1, r2
 800e632:	4618      	mov	r0, r3
 800e634:	f001 fc76 	bl	800ff24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e638:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e63a:	f000 fbdb 	bl	800edf4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e63e:	f001 f9b1 	bl	800f9a4 <xTaskResumeAll>
 800e642:	4603      	mov	r3, r0
 800e644:	2b00      	cmp	r3, #0
 800e646:	f47f af7c 	bne.w	800e542 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e64a:	4b0c      	ldr	r3, [pc, #48]	@ (800e67c <xQueueGenericSend+0x200>)
 800e64c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e650:	601a      	str	r2, [r3, #0]
 800e652:	f3bf 8f4f 	dsb	sy
 800e656:	f3bf 8f6f 	isb	sy
 800e65a:	e772      	b.n	800e542 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e65c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e65e:	f000 fbc9 	bl	800edf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e662:	f001 f99f 	bl	800f9a4 <xTaskResumeAll>
 800e666:	e76c      	b.n	800e542 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e668:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e66a:	f000 fbc3 	bl	800edf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e66e:	f001 f999 	bl	800f9a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e672:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e674:	4618      	mov	r0, r3
 800e676:	3738      	adds	r7, #56	@ 0x38
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}
 800e67c:	e000ed04 	.word	0xe000ed04

0800e680 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b090      	sub	sp, #64	@ 0x40
 800e684:	af00      	add	r7, sp, #0
 800e686:	60f8      	str	r0, [r7, #12]
 800e688:	60b9      	str	r1, [r7, #8]
 800e68a:	607a      	str	r2, [r7, #4]
 800e68c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800e692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e694:	2b00      	cmp	r3, #0
 800e696:	d10b      	bne.n	800e6b0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800e698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e69c:	f383 8811 	msr	BASEPRI, r3
 800e6a0:	f3bf 8f6f 	isb	sy
 800e6a4:	f3bf 8f4f 	dsb	sy
 800e6a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e6aa:	bf00      	nop
 800e6ac:	bf00      	nop
 800e6ae:	e7fd      	b.n	800e6ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d103      	bne.n	800e6be <xQueueGenericSendFromISR+0x3e>
 800e6b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d101      	bne.n	800e6c2 <xQueueGenericSendFromISR+0x42>
 800e6be:	2301      	movs	r3, #1
 800e6c0:	e000      	b.n	800e6c4 <xQueueGenericSendFromISR+0x44>
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d10b      	bne.n	800e6e0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800e6c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6cc:	f383 8811 	msr	BASEPRI, r3
 800e6d0:	f3bf 8f6f 	isb	sy
 800e6d4:	f3bf 8f4f 	dsb	sy
 800e6d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e6da:	bf00      	nop
 800e6dc:	bf00      	nop
 800e6de:	e7fd      	b.n	800e6dc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	2b02      	cmp	r3, #2
 800e6e4:	d103      	bne.n	800e6ee <xQueueGenericSendFromISR+0x6e>
 800e6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e6ea:	2b01      	cmp	r3, #1
 800e6ec:	d101      	bne.n	800e6f2 <xQueueGenericSendFromISR+0x72>
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	e000      	b.n	800e6f4 <xQueueGenericSendFromISR+0x74>
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d10b      	bne.n	800e710 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800e6f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6fc:	f383 8811 	msr	BASEPRI, r3
 800e700:	f3bf 8f6f 	isb	sy
 800e704:	f3bf 8f4f 	dsb	sy
 800e708:	623b      	str	r3, [r7, #32]
}
 800e70a:	bf00      	nop
 800e70c:	bf00      	nop
 800e70e:	e7fd      	b.n	800e70c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e710:	f003 f8b2 	bl	8011878 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e714:	f3ef 8211 	mrs	r2, BASEPRI
 800e718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e71c:	f383 8811 	msr	BASEPRI, r3
 800e720:	f3bf 8f6f 	isb	sy
 800e724:	f3bf 8f4f 	dsb	sy
 800e728:	61fa      	str	r2, [r7, #28]
 800e72a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e72c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e72e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e732:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e738:	429a      	cmp	r2, r3
 800e73a:	d302      	bcc.n	800e742 <xQueueGenericSendFromISR+0xc2>
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	2b02      	cmp	r3, #2
 800e740:	d12f      	bne.n	800e7a2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e744:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e748:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e74e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e750:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e752:	683a      	ldr	r2, [r7, #0]
 800e754:	68b9      	ldr	r1, [r7, #8]
 800e756:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e758:	f000 fabc 	bl	800ecd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e75c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e760:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e764:	d112      	bne.n	800e78c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d016      	beq.n	800e79c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e76e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e770:	3324      	adds	r3, #36	@ 0x24
 800e772:	4618      	mov	r0, r3
 800e774:	f001 fc66 	bl	8010044 <xTaskRemoveFromEventList>
 800e778:	4603      	mov	r3, r0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d00e      	beq.n	800e79c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d00b      	beq.n	800e79c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2201      	movs	r2, #1
 800e788:	601a      	str	r2, [r3, #0]
 800e78a:	e007      	b.n	800e79c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e78c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e790:	3301      	adds	r3, #1
 800e792:	b2db      	uxtb	r3, r3
 800e794:	b25a      	sxtb	r2, r3
 800e796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e79c:	2301      	movs	r3, #1
 800e79e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800e7a0:	e001      	b.n	800e7a6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e7a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7a8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e7b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e7b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3740      	adds	r7, #64	@ 0x40
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}

0800e7bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b08c      	sub	sp, #48	@ 0x30
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	60f8      	str	r0, [r7, #12]
 800e7c4:	60b9      	str	r1, [r7, #8]
 800e7c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d10b      	bne.n	800e7ee <xQueueReceive+0x32>
	__asm volatile
 800e7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7da:	f383 8811 	msr	BASEPRI, r3
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	f3bf 8f4f 	dsb	sy
 800e7e6:	623b      	str	r3, [r7, #32]
}
 800e7e8:	bf00      	nop
 800e7ea:	bf00      	nop
 800e7ec:	e7fd      	b.n	800e7ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d103      	bne.n	800e7fc <xQueueReceive+0x40>
 800e7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d101      	bne.n	800e800 <xQueueReceive+0x44>
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	e000      	b.n	800e802 <xQueueReceive+0x46>
 800e800:	2300      	movs	r3, #0
 800e802:	2b00      	cmp	r3, #0
 800e804:	d10b      	bne.n	800e81e <xQueueReceive+0x62>
	__asm volatile
 800e806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e80a:	f383 8811 	msr	BASEPRI, r3
 800e80e:	f3bf 8f6f 	isb	sy
 800e812:	f3bf 8f4f 	dsb	sy
 800e816:	61fb      	str	r3, [r7, #28]
}
 800e818:	bf00      	nop
 800e81a:	bf00      	nop
 800e81c:	e7fd      	b.n	800e81a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e81e:	f001 fed9 	bl	80105d4 <xTaskGetSchedulerState>
 800e822:	4603      	mov	r3, r0
 800e824:	2b00      	cmp	r3, #0
 800e826:	d102      	bne.n	800e82e <xQueueReceive+0x72>
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d101      	bne.n	800e832 <xQueueReceive+0x76>
 800e82e:	2301      	movs	r3, #1
 800e830:	e000      	b.n	800e834 <xQueueReceive+0x78>
 800e832:	2300      	movs	r3, #0
 800e834:	2b00      	cmp	r3, #0
 800e836:	d10b      	bne.n	800e850 <xQueueReceive+0x94>
	__asm volatile
 800e838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e83c:	f383 8811 	msr	BASEPRI, r3
 800e840:	f3bf 8f6f 	isb	sy
 800e844:	f3bf 8f4f 	dsb	sy
 800e848:	61bb      	str	r3, [r7, #24]
}
 800e84a:	bf00      	nop
 800e84c:	bf00      	nop
 800e84e:	e7fd      	b.n	800e84c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e850:	f002 ff32 	bl	80116b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e858:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d01f      	beq.n	800e8a0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e860:	68b9      	ldr	r1, [r7, #8]
 800e862:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e864:	f000 faa0 	bl	800eda8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e86a:	1e5a      	subs	r2, r3, #1
 800e86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e86e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e872:	691b      	ldr	r3, [r3, #16]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d00f      	beq.n	800e898 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e87a:	3310      	adds	r3, #16
 800e87c:	4618      	mov	r0, r3
 800e87e:	f001 fbe1 	bl	8010044 <xTaskRemoveFromEventList>
 800e882:	4603      	mov	r3, r0
 800e884:	2b00      	cmp	r3, #0
 800e886:	d007      	beq.n	800e898 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e888:	4b3c      	ldr	r3, [pc, #240]	@ (800e97c <xQueueReceive+0x1c0>)
 800e88a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e88e:	601a      	str	r2, [r3, #0]
 800e890:	f3bf 8f4f 	dsb	sy
 800e894:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e898:	f002 ff40 	bl	801171c <vPortExitCritical>
				return pdPASS;
 800e89c:	2301      	movs	r3, #1
 800e89e:	e069      	b.n	800e974 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d103      	bne.n	800e8ae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e8a6:	f002 ff39 	bl	801171c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	e062      	b.n	800e974 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d106      	bne.n	800e8c2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e8b4:	f107 0310 	add.w	r3, r7, #16
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f001 fc8b 	bl	80101d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e8be:	2301      	movs	r3, #1
 800e8c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e8c2:	f002 ff2b 	bl	801171c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e8c6:	f001 f85f 	bl	800f988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e8ca:	f002 fef5 	bl	80116b8 <vPortEnterCritical>
 800e8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e8d4:	b25b      	sxtb	r3, r3
 800e8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8da:	d103      	bne.n	800e8e4 <xQueueReceive+0x128>
 800e8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8de:	2200      	movs	r2, #0
 800e8e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e8ea:	b25b      	sxtb	r3, r3
 800e8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8f0:	d103      	bne.n	800e8fa <xQueueReceive+0x13e>
 800e8f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e8fa:	f002 ff0f 	bl	801171c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e8fe:	1d3a      	adds	r2, r7, #4
 800e900:	f107 0310 	add.w	r3, r7, #16
 800e904:	4611      	mov	r1, r2
 800e906:	4618      	mov	r0, r3
 800e908:	f001 fc7a 	bl	8010200 <xTaskCheckForTimeOut>
 800e90c:	4603      	mov	r3, r0
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d123      	bne.n	800e95a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e914:	f000 fac0 	bl	800ee98 <prvIsQueueEmpty>
 800e918:	4603      	mov	r3, r0
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d017      	beq.n	800e94e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e91e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e920:	3324      	adds	r3, #36	@ 0x24
 800e922:	687a      	ldr	r2, [r7, #4]
 800e924:	4611      	mov	r1, r2
 800e926:	4618      	mov	r0, r3
 800e928:	f001 fafc 	bl	800ff24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e92c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e92e:	f000 fa61 	bl	800edf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e932:	f001 f837 	bl	800f9a4 <xTaskResumeAll>
 800e936:	4603      	mov	r3, r0
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d189      	bne.n	800e850 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e93c:	4b0f      	ldr	r3, [pc, #60]	@ (800e97c <xQueueReceive+0x1c0>)
 800e93e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e942:	601a      	str	r2, [r3, #0]
 800e944:	f3bf 8f4f 	dsb	sy
 800e948:	f3bf 8f6f 	isb	sy
 800e94c:	e780      	b.n	800e850 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e94e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e950:	f000 fa50 	bl	800edf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e954:	f001 f826 	bl	800f9a4 <xTaskResumeAll>
 800e958:	e77a      	b.n	800e850 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e95a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e95c:	f000 fa4a 	bl	800edf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e960:	f001 f820 	bl	800f9a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e964:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e966:	f000 fa97 	bl	800ee98 <prvIsQueueEmpty>
 800e96a:	4603      	mov	r3, r0
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	f43f af6f 	beq.w	800e850 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e972:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e974:	4618      	mov	r0, r3
 800e976:	3730      	adds	r7, #48	@ 0x30
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}
 800e97c:	e000ed04 	.word	0xe000ed04

0800e980 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b08e      	sub	sp, #56	@ 0x38
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e98a:	2300      	movs	r3, #0
 800e98c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e992:	2300      	movs	r3, #0
 800e994:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d10b      	bne.n	800e9b4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800e99c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9a0:	f383 8811 	msr	BASEPRI, r3
 800e9a4:	f3bf 8f6f 	isb	sy
 800e9a8:	f3bf 8f4f 	dsb	sy
 800e9ac:	623b      	str	r3, [r7, #32]
}
 800e9ae:	bf00      	nop
 800e9b0:	bf00      	nop
 800e9b2:	e7fd      	b.n	800e9b0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e9b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d00b      	beq.n	800e9d4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800e9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9c0:	f383 8811 	msr	BASEPRI, r3
 800e9c4:	f3bf 8f6f 	isb	sy
 800e9c8:	f3bf 8f4f 	dsb	sy
 800e9cc:	61fb      	str	r3, [r7, #28]
}
 800e9ce:	bf00      	nop
 800e9d0:	bf00      	nop
 800e9d2:	e7fd      	b.n	800e9d0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e9d4:	f001 fdfe 	bl	80105d4 <xTaskGetSchedulerState>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d102      	bne.n	800e9e4 <xQueueSemaphoreTake+0x64>
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d101      	bne.n	800e9e8 <xQueueSemaphoreTake+0x68>
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	e000      	b.n	800e9ea <xQueueSemaphoreTake+0x6a>
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d10b      	bne.n	800ea06 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800e9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9f2:	f383 8811 	msr	BASEPRI, r3
 800e9f6:	f3bf 8f6f 	isb	sy
 800e9fa:	f3bf 8f4f 	dsb	sy
 800e9fe:	61bb      	str	r3, [r7, #24]
}
 800ea00:	bf00      	nop
 800ea02:	bf00      	nop
 800ea04:	e7fd      	b.n	800ea02 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ea06:	f002 fe57 	bl	80116b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ea0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea0e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ea10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d024      	beq.n	800ea60 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ea16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea18:	1e5a      	subs	r2, r3, #1
 800ea1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea1c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ea1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d104      	bne.n	800ea30 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ea26:	f001 ff67 	bl	80108f8 <pvTaskIncrementMutexHeldCount>
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea2e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea32:	691b      	ldr	r3, [r3, #16]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d00f      	beq.n	800ea58 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea3a:	3310      	adds	r3, #16
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f001 fb01 	bl	8010044 <xTaskRemoveFromEventList>
 800ea42:	4603      	mov	r3, r0
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d007      	beq.n	800ea58 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ea48:	4b54      	ldr	r3, [pc, #336]	@ (800eb9c <xQueueSemaphoreTake+0x21c>)
 800ea4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea4e:	601a      	str	r2, [r3, #0]
 800ea50:	f3bf 8f4f 	dsb	sy
 800ea54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ea58:	f002 fe60 	bl	801171c <vPortExitCritical>
				return pdPASS;
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	e098      	b.n	800eb92 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d112      	bne.n	800ea8c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ea66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d00b      	beq.n	800ea84 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800ea6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea70:	f383 8811 	msr	BASEPRI, r3
 800ea74:	f3bf 8f6f 	isb	sy
 800ea78:	f3bf 8f4f 	dsb	sy
 800ea7c:	617b      	str	r3, [r7, #20]
}
 800ea7e:	bf00      	nop
 800ea80:	bf00      	nop
 800ea82:	e7fd      	b.n	800ea80 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ea84:	f002 fe4a 	bl	801171c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	e082      	b.n	800eb92 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ea8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d106      	bne.n	800eaa0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ea92:	f107 030c 	add.w	r3, r7, #12
 800ea96:	4618      	mov	r0, r3
 800ea98:	f001 fb9c 	bl	80101d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eaa0:	f002 fe3c 	bl	801171c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eaa4:	f000 ff70 	bl	800f988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eaa8:	f002 fe06 	bl	80116b8 <vPortEnterCritical>
 800eaac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eab2:	b25b      	sxtb	r3, r3
 800eab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eab8:	d103      	bne.n	800eac2 <xQueueSemaphoreTake+0x142>
 800eaba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eabc:	2200      	movs	r2, #0
 800eabe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eac4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eac8:	b25b      	sxtb	r3, r3
 800eaca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eace:	d103      	bne.n	800ead8 <xQueueSemaphoreTake+0x158>
 800ead0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ead2:	2200      	movs	r2, #0
 800ead4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ead8:	f002 fe20 	bl	801171c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eadc:	463a      	mov	r2, r7
 800eade:	f107 030c 	add.w	r3, r7, #12
 800eae2:	4611      	mov	r1, r2
 800eae4:	4618      	mov	r0, r3
 800eae6:	f001 fb8b 	bl	8010200 <xTaskCheckForTimeOut>
 800eaea:	4603      	mov	r3, r0
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d132      	bne.n	800eb56 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eaf0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eaf2:	f000 f9d1 	bl	800ee98 <prvIsQueueEmpty>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d026      	beq.n	800eb4a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d109      	bne.n	800eb18 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800eb04:	f002 fdd8 	bl	80116b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eb08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb0a:	689b      	ldr	r3, [r3, #8]
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f001 fd7f 	bl	8010610 <xTaskPriorityInherit>
 800eb12:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800eb14:	f002 fe02 	bl	801171c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eb18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb1a:	3324      	adds	r3, #36	@ 0x24
 800eb1c:	683a      	ldr	r2, [r7, #0]
 800eb1e:	4611      	mov	r1, r2
 800eb20:	4618      	mov	r0, r3
 800eb22:	f001 f9ff 	bl	800ff24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eb26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb28:	f000 f964 	bl	800edf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eb2c:	f000 ff3a 	bl	800f9a4 <xTaskResumeAll>
 800eb30:	4603      	mov	r3, r0
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	f47f af67 	bne.w	800ea06 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800eb38:	4b18      	ldr	r3, [pc, #96]	@ (800eb9c <xQueueSemaphoreTake+0x21c>)
 800eb3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb3e:	601a      	str	r2, [r3, #0]
 800eb40:	f3bf 8f4f 	dsb	sy
 800eb44:	f3bf 8f6f 	isb	sy
 800eb48:	e75d      	b.n	800ea06 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800eb4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb4c:	f000 f952 	bl	800edf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eb50:	f000 ff28 	bl	800f9a4 <xTaskResumeAll>
 800eb54:	e757      	b.n	800ea06 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800eb56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb58:	f000 f94c 	bl	800edf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eb5c:	f000 ff22 	bl	800f9a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eb60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb62:	f000 f999 	bl	800ee98 <prvIsQueueEmpty>
 800eb66:	4603      	mov	r3, r0
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	f43f af4c 	beq.w	800ea06 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800eb6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d00d      	beq.n	800eb90 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800eb74:	f002 fda0 	bl	80116b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800eb78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb7a:	f000 f893 	bl	800eca4 <prvGetDisinheritPriorityAfterTimeout>
 800eb7e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800eb80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb82:	689b      	ldr	r3, [r3, #8]
 800eb84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800eb86:	4618      	mov	r0, r3
 800eb88:	f001 fe1a 	bl	80107c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800eb8c:	f002 fdc6 	bl	801171c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eb90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3738      	adds	r7, #56	@ 0x38
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	e000ed04 	.word	0xe000ed04

0800eba0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b08e      	sub	sp, #56	@ 0x38
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	60f8      	str	r0, [r7, #12]
 800eba8:	60b9      	str	r1, [r7, #8]
 800ebaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ebb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d10b      	bne.n	800ebce <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800ebb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebba:	f383 8811 	msr	BASEPRI, r3
 800ebbe:	f3bf 8f6f 	isb	sy
 800ebc2:	f3bf 8f4f 	dsb	sy
 800ebc6:	623b      	str	r3, [r7, #32]
}
 800ebc8:	bf00      	nop
 800ebca:	bf00      	nop
 800ebcc:	e7fd      	b.n	800ebca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d103      	bne.n	800ebdc <xQueueReceiveFromISR+0x3c>
 800ebd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d101      	bne.n	800ebe0 <xQueueReceiveFromISR+0x40>
 800ebdc:	2301      	movs	r3, #1
 800ebde:	e000      	b.n	800ebe2 <xQueueReceiveFromISR+0x42>
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d10b      	bne.n	800ebfe <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800ebe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebea:	f383 8811 	msr	BASEPRI, r3
 800ebee:	f3bf 8f6f 	isb	sy
 800ebf2:	f3bf 8f4f 	dsb	sy
 800ebf6:	61fb      	str	r3, [r7, #28]
}
 800ebf8:	bf00      	nop
 800ebfa:	bf00      	nop
 800ebfc:	e7fd      	b.n	800ebfa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ebfe:	f002 fe3b 	bl	8011878 <vPortValidateInterruptPriority>
	__asm volatile
 800ec02:	f3ef 8211 	mrs	r2, BASEPRI
 800ec06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec0a:	f383 8811 	msr	BASEPRI, r3
 800ec0e:	f3bf 8f6f 	isb	sy
 800ec12:	f3bf 8f4f 	dsb	sy
 800ec16:	61ba      	str	r2, [r7, #24]
 800ec18:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ec1a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec22:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ec24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d02f      	beq.n	800ec8a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ec2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ec30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ec34:	68b9      	ldr	r1, [r7, #8]
 800ec36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ec38:	f000 f8b6 	bl	800eda8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ec3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec3e:	1e5a      	subs	r2, r3, #1
 800ec40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec42:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ec44:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ec48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec4c:	d112      	bne.n	800ec74 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec50:	691b      	ldr	r3, [r3, #16]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d016      	beq.n	800ec84 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec58:	3310      	adds	r3, #16
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f001 f9f2 	bl	8010044 <xTaskRemoveFromEventList>
 800ec60:	4603      	mov	r3, r0
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d00e      	beq.n	800ec84 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d00b      	beq.n	800ec84 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2201      	movs	r2, #1
 800ec70:	601a      	str	r2, [r3, #0]
 800ec72:	e007      	b.n	800ec84 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ec74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec78:	3301      	adds	r3, #1
 800ec7a:	b2db      	uxtb	r3, r3
 800ec7c:	b25a      	sxtb	r2, r3
 800ec7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ec84:	2301      	movs	r3, #1
 800ec86:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec88:	e001      	b.n	800ec8e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec90:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	f383 8811 	msr	BASEPRI, r3
}
 800ec98:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ec9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3738      	adds	r7, #56	@ 0x38
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}

0800eca4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800eca4:	b480      	push	{r7}
 800eca6:	b085      	sub	sp, #20
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d006      	beq.n	800ecc2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ecbe:	60fb      	str	r3, [r7, #12]
 800ecc0:	e001      	b.n	800ecc6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
	}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3714      	adds	r7, #20
 800eccc:	46bd      	mov	sp, r7
 800ecce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd2:	4770      	bx	lr

0800ecd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b086      	sub	sp, #24
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	60f8      	str	r0, [r7, #12]
 800ecdc:	60b9      	str	r1, [r7, #8]
 800ecde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ece0:	2300      	movs	r3, #0
 800ece2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ece8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d10d      	bne.n	800ed0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d14d      	bne.n	800ed96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	689b      	ldr	r3, [r3, #8]
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f001 fcee 	bl	80106e0 <xTaskPriorityDisinherit>
 800ed04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	609a      	str	r2, [r3, #8]
 800ed0c:	e043      	b.n	800ed96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d119      	bne.n	800ed48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	6858      	ldr	r0, [r3, #4]
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed1c:	461a      	mov	r2, r3
 800ed1e:	68b9      	ldr	r1, [r7, #8]
 800ed20:	f005 f901 	bl	8013f26 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	685a      	ldr	r2, [r3, #4]
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed2c:	441a      	add	r2, r3
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	685a      	ldr	r2, [r3, #4]
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	689b      	ldr	r3, [r3, #8]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d32b      	bcc.n	800ed96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681a      	ldr	r2, [r3, #0]
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	605a      	str	r2, [r3, #4]
 800ed46:	e026      	b.n	800ed96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	68d8      	ldr	r0, [r3, #12]
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed50:	461a      	mov	r2, r3
 800ed52:	68b9      	ldr	r1, [r7, #8]
 800ed54:	f005 f8e7 	bl	8013f26 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	68da      	ldr	r2, [r3, #12]
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed60:	425b      	negs	r3, r3
 800ed62:	441a      	add	r2, r3
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	68da      	ldr	r2, [r3, #12]
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d207      	bcs.n	800ed84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	689a      	ldr	r2, [r3, #8]
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed7c:	425b      	negs	r3, r3
 800ed7e:	441a      	add	r2, r3
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2b02      	cmp	r3, #2
 800ed88:	d105      	bne.n	800ed96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d002      	beq.n	800ed96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	3b01      	subs	r3, #1
 800ed94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	1c5a      	adds	r2, r3, #1
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ed9e:	697b      	ldr	r3, [r7, #20]
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3718      	adds	r7, #24
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}

0800eda8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b082      	sub	sp, #8
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d018      	beq.n	800edec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	68da      	ldr	r2, [r3, #12]
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edc2:	441a      	add	r2, r3
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	68da      	ldr	r2, [r3, #12]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	689b      	ldr	r3, [r3, #8]
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d303      	bcc.n	800eddc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681a      	ldr	r2, [r3, #0]
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	68d9      	ldr	r1, [r3, #12]
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ede4:	461a      	mov	r2, r3
 800ede6:	6838      	ldr	r0, [r7, #0]
 800ede8:	f005 f89d 	bl	8013f26 <memcpy>
	}
}
 800edec:	bf00      	nop
 800edee:	3708      	adds	r7, #8
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}

0800edf4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b084      	sub	sp, #16
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800edfc:	f002 fc5c 	bl	80116b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ee06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ee08:	e011      	b.n	800ee2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d012      	beq.n	800ee38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	3324      	adds	r3, #36	@ 0x24
 800ee16:	4618      	mov	r0, r3
 800ee18:	f001 f914 	bl	8010044 <xTaskRemoveFromEventList>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d001      	beq.n	800ee26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ee22:	f001 fa51 	bl	80102c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ee26:	7bfb      	ldrb	r3, [r7, #15]
 800ee28:	3b01      	subs	r3, #1
 800ee2a:	b2db      	uxtb	r3, r3
 800ee2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ee2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	dce9      	bgt.n	800ee0a <prvUnlockQueue+0x16>
 800ee36:	e000      	b.n	800ee3a <prvUnlockQueue+0x46>
					break;
 800ee38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	22ff      	movs	r2, #255	@ 0xff
 800ee3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ee42:	f002 fc6b 	bl	801171c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ee46:	f002 fc37 	bl	80116b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ee50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ee52:	e011      	b.n	800ee78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	691b      	ldr	r3, [r3, #16]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d012      	beq.n	800ee82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	3310      	adds	r3, #16
 800ee60:	4618      	mov	r0, r3
 800ee62:	f001 f8ef 	bl	8010044 <xTaskRemoveFromEventList>
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d001      	beq.n	800ee70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ee6c:	f001 fa2c 	bl	80102c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ee70:	7bbb      	ldrb	r3, [r7, #14]
 800ee72:	3b01      	subs	r3, #1
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ee78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	dce9      	bgt.n	800ee54 <prvUnlockQueue+0x60>
 800ee80:	e000      	b.n	800ee84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ee82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	22ff      	movs	r2, #255	@ 0xff
 800ee88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ee8c:	f002 fc46 	bl	801171c <vPortExitCritical>
}
 800ee90:	bf00      	nop
 800ee92:	3710      	adds	r7, #16
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}

0800ee98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b084      	sub	sp, #16
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eea0:	f002 fc0a 	bl	80116b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d102      	bne.n	800eeb2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800eeac:	2301      	movs	r3, #1
 800eeae:	60fb      	str	r3, [r7, #12]
 800eeb0:	e001      	b.n	800eeb6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eeb6:	f002 fc31 	bl	801171c <vPortExitCritical>

	return xReturn;
 800eeba:	68fb      	ldr	r3, [r7, #12]
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	3710      	adds	r7, #16
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b084      	sub	sp, #16
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eecc:	f002 fbf4 	bl	80116b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d102      	bne.n	800eee2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800eedc:	2301      	movs	r3, #1
 800eede:	60fb      	str	r3, [r7, #12]
 800eee0:	e001      	b.n	800eee6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800eee2:	2300      	movs	r3, #0
 800eee4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eee6:	f002 fc19 	bl	801171c <vPortExitCritical>

	return xReturn;
 800eeea:	68fb      	ldr	r3, [r7, #12]
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	3710      	adds	r7, #16
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eef4:	b480      	push	{r7}
 800eef6:	b085      	sub	sp, #20
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eefe:	2300      	movs	r3, #0
 800ef00:	60fb      	str	r3, [r7, #12]
 800ef02:	e014      	b.n	800ef2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ef04:	4a0f      	ldr	r2, [pc, #60]	@ (800ef44 <vQueueAddToRegistry+0x50>)
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d10b      	bne.n	800ef28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ef10:	490c      	ldr	r1, [pc, #48]	@ (800ef44 <vQueueAddToRegistry+0x50>)
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	683a      	ldr	r2, [r7, #0]
 800ef16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ef1a:	4a0a      	ldr	r2, [pc, #40]	@ (800ef44 <vQueueAddToRegistry+0x50>)
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	00db      	lsls	r3, r3, #3
 800ef20:	4413      	add	r3, r2
 800ef22:	687a      	ldr	r2, [r7, #4]
 800ef24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ef26:	e006      	b.n	800ef36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	3301      	adds	r3, #1
 800ef2c:	60fb      	str	r3, [r7, #12]
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	2b07      	cmp	r3, #7
 800ef32:	d9e7      	bls.n	800ef04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ef34:	bf00      	nop
 800ef36:	bf00      	nop
 800ef38:	3714      	adds	r7, #20
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr
 800ef42:	bf00      	nop
 800ef44:	2000d038 	.word	0x2000d038

0800ef48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b086      	sub	sp, #24
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	60f8      	str	r0, [r7, #12]
 800ef50:	60b9      	str	r1, [r7, #8]
 800ef52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ef58:	f002 fbae 	bl	80116b8 <vPortEnterCritical>
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ef62:	b25b      	sxtb	r3, r3
 800ef64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef68:	d103      	bne.n	800ef72 <vQueueWaitForMessageRestricted+0x2a>
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ef78:	b25b      	sxtb	r3, r3
 800ef7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef7e:	d103      	bne.n	800ef88 <vQueueWaitForMessageRestricted+0x40>
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	2200      	movs	r2, #0
 800ef84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ef88:	f002 fbc8 	bl	801171c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d106      	bne.n	800efa2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	3324      	adds	r3, #36	@ 0x24
 800ef98:	687a      	ldr	r2, [r7, #4]
 800ef9a:	68b9      	ldr	r1, [r7, #8]
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f001 f825 	bl	800ffec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800efa2:	6978      	ldr	r0, [r7, #20]
 800efa4:	f7ff ff26 	bl	800edf4 <prvUnlockQueue>
	}
 800efa8:	bf00      	nop
 800efaa:	3718      	adds	r7, #24
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b08e      	sub	sp, #56	@ 0x38
 800efb4:	af04      	add	r7, sp, #16
 800efb6:	60f8      	str	r0, [r7, #12]
 800efb8:	60b9      	str	r1, [r7, #8]
 800efba:	607a      	str	r2, [r7, #4]
 800efbc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800efbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d10b      	bne.n	800efdc <xTaskCreateStatic+0x2c>
	__asm volatile
 800efc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efc8:	f383 8811 	msr	BASEPRI, r3
 800efcc:	f3bf 8f6f 	isb	sy
 800efd0:	f3bf 8f4f 	dsb	sy
 800efd4:	623b      	str	r3, [r7, #32]
}
 800efd6:	bf00      	nop
 800efd8:	bf00      	nop
 800efda:	e7fd      	b.n	800efd8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800efdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d10b      	bne.n	800effa <xTaskCreateStatic+0x4a>
	__asm volatile
 800efe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efe6:	f383 8811 	msr	BASEPRI, r3
 800efea:	f3bf 8f6f 	isb	sy
 800efee:	f3bf 8f4f 	dsb	sy
 800eff2:	61fb      	str	r3, [r7, #28]
}
 800eff4:	bf00      	nop
 800eff6:	bf00      	nop
 800eff8:	e7fd      	b.n	800eff6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800effa:	23b0      	movs	r3, #176	@ 0xb0
 800effc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	2bb0      	cmp	r3, #176	@ 0xb0
 800f002:	d00b      	beq.n	800f01c <xTaskCreateStatic+0x6c>
	__asm volatile
 800f004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f008:	f383 8811 	msr	BASEPRI, r3
 800f00c:	f3bf 8f6f 	isb	sy
 800f010:	f3bf 8f4f 	dsb	sy
 800f014:	61bb      	str	r3, [r7, #24]
}
 800f016:	bf00      	nop
 800f018:	bf00      	nop
 800f01a:	e7fd      	b.n	800f018 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f01c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f020:	2b00      	cmp	r3, #0
 800f022:	d01e      	beq.n	800f062 <xTaskCreateStatic+0xb2>
 800f024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f026:	2b00      	cmp	r3, #0
 800f028:	d01b      	beq.n	800f062 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f02c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f030:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f032:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f036:	2202      	movs	r2, #2
 800f038:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f03c:	2300      	movs	r3, #0
 800f03e:	9303      	str	r3, [sp, #12]
 800f040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f042:	9302      	str	r3, [sp, #8]
 800f044:	f107 0314 	add.w	r3, r7, #20
 800f048:	9301      	str	r3, [sp, #4]
 800f04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f04c:	9300      	str	r3, [sp, #0]
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	687a      	ldr	r2, [r7, #4]
 800f052:	68b9      	ldr	r1, [r7, #8]
 800f054:	68f8      	ldr	r0, [r7, #12]
 800f056:	f000 f851 	bl	800f0fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f05a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f05c:	f000 f8fc 	bl	800f258 <prvAddNewTaskToReadyList>
 800f060:	e001      	b.n	800f066 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f062:	2300      	movs	r3, #0
 800f064:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f066:	697b      	ldr	r3, [r7, #20]
	}
 800f068:	4618      	mov	r0, r3
 800f06a:	3728      	adds	r7, #40	@ 0x28
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f070:	b580      	push	{r7, lr}
 800f072:	b08c      	sub	sp, #48	@ 0x30
 800f074:	af04      	add	r7, sp, #16
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	60b9      	str	r1, [r7, #8]
 800f07a:	603b      	str	r3, [r7, #0]
 800f07c:	4613      	mov	r3, r2
 800f07e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f080:	88fb      	ldrh	r3, [r7, #6]
 800f082:	009b      	lsls	r3, r3, #2
 800f084:	4618      	mov	r0, r3
 800f086:	f002 fc39 	bl	80118fc <pvPortMalloc>
 800f08a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d00e      	beq.n	800f0b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f092:	20b0      	movs	r0, #176	@ 0xb0
 800f094:	f002 fc32 	bl	80118fc <pvPortMalloc>
 800f098:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f09a:	69fb      	ldr	r3, [r7, #28]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d003      	beq.n	800f0a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f0a0:	69fb      	ldr	r3, [r7, #28]
 800f0a2:	697a      	ldr	r2, [r7, #20]
 800f0a4:	631a      	str	r2, [r3, #48]	@ 0x30
 800f0a6:	e005      	b.n	800f0b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f0a8:	6978      	ldr	r0, [r7, #20]
 800f0aa:	f002 fcf5 	bl	8011a98 <vPortFree>
 800f0ae:	e001      	b.n	800f0b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f0b4:	69fb      	ldr	r3, [r7, #28]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d017      	beq.n	800f0ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f0ba:	69fb      	ldr	r3, [r7, #28]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f0c2:	88fa      	ldrh	r2, [r7, #6]
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	9303      	str	r3, [sp, #12]
 800f0c8:	69fb      	ldr	r3, [r7, #28]
 800f0ca:	9302      	str	r3, [sp, #8]
 800f0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0ce:	9301      	str	r3, [sp, #4]
 800f0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0d2:	9300      	str	r3, [sp, #0]
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	68b9      	ldr	r1, [r7, #8]
 800f0d8:	68f8      	ldr	r0, [r7, #12]
 800f0da:	f000 f80f 	bl	800f0fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f0de:	69f8      	ldr	r0, [r7, #28]
 800f0e0:	f000 f8ba 	bl	800f258 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	61bb      	str	r3, [r7, #24]
 800f0e8:	e002      	b.n	800f0f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f0ea:	f04f 33ff 	mov.w	r3, #4294967295
 800f0ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f0f0:	69bb      	ldr	r3, [r7, #24]
	}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3720      	adds	r7, #32
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
	...

0800f0fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b088      	sub	sp, #32
 800f100:	af00      	add	r7, sp, #0
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	60b9      	str	r1, [r7, #8]
 800f106:	607a      	str	r2, [r7, #4]
 800f108:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f10c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	009b      	lsls	r3, r3, #2
 800f112:	461a      	mov	r2, r3
 800f114:	21a5      	movs	r1, #165	@ 0xa5
 800f116:	f004 fd96 	bl	8013c46 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f11c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f124:	3b01      	subs	r3, #1
 800f126:	009b      	lsls	r3, r3, #2
 800f128:	4413      	add	r3, r2
 800f12a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f12c:	69bb      	ldr	r3, [r7, #24]
 800f12e:	f023 0307 	bic.w	r3, r3, #7
 800f132:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f134:	69bb      	ldr	r3, [r7, #24]
 800f136:	f003 0307 	and.w	r3, r3, #7
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d00b      	beq.n	800f156 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800f13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f142:	f383 8811 	msr	BASEPRI, r3
 800f146:	f3bf 8f6f 	isb	sy
 800f14a:	f3bf 8f4f 	dsb	sy
 800f14e:	617b      	str	r3, [r7, #20]
}
 800f150:	bf00      	nop
 800f152:	bf00      	nop
 800f154:	e7fd      	b.n	800f152 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800f156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f158:	69ba      	ldr	r2, [r7, #24]
 800f15a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d01f      	beq.n	800f1a2 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f162:	2300      	movs	r3, #0
 800f164:	61fb      	str	r3, [r7, #28]
 800f166:	e012      	b.n	800f18e <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f168:	68ba      	ldr	r2, [r7, #8]
 800f16a:	69fb      	ldr	r3, [r7, #28]
 800f16c:	4413      	add	r3, r2
 800f16e:	7819      	ldrb	r1, [r3, #0]
 800f170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f172:	69fb      	ldr	r3, [r7, #28]
 800f174:	4413      	add	r3, r2
 800f176:	3334      	adds	r3, #52	@ 0x34
 800f178:	460a      	mov	r2, r1
 800f17a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f17c:	68ba      	ldr	r2, [r7, #8]
 800f17e:	69fb      	ldr	r3, [r7, #28]
 800f180:	4413      	add	r3, r2
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d006      	beq.n	800f196 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f188:	69fb      	ldr	r3, [r7, #28]
 800f18a:	3301      	adds	r3, #1
 800f18c:	61fb      	str	r3, [r7, #28]
 800f18e:	69fb      	ldr	r3, [r7, #28]
 800f190:	2b0f      	cmp	r3, #15
 800f192:	d9e9      	bls.n	800f168 <prvInitialiseNewTask+0x6c>
 800f194:	e000      	b.n	800f198 <prvInitialiseNewTask+0x9c>
			{
				break;
 800f196:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f19a:	2200      	movs	r2, #0
 800f19c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f1a0:	e003      	b.n	800f1aa <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1ac:	2b37      	cmp	r3, #55	@ 0x37
 800f1ae:	d901      	bls.n	800f1b4 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f1b0:	2337      	movs	r3, #55	@ 0x37
 800f1b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f1b8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f1be:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800f1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1c8:	3304      	adds	r3, #4
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7fe ff4a 	bl	800e064 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1d2:	3318      	adds	r3, #24
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f7fe ff45 	bl	800e064 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1e2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1ee:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800f1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f200:	2200      	movs	r2, #0
 800f202:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f208:	335c      	adds	r3, #92	@ 0x5c
 800f20a:	224c      	movs	r2, #76	@ 0x4c
 800f20c:	2100      	movs	r1, #0
 800f20e:	4618      	mov	r0, r3
 800f210:	f004 fd19 	bl	8013c46 <memset>
 800f214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f216:	4a0d      	ldr	r2, [pc, #52]	@ (800f24c <prvInitialiseNewTask+0x150>)
 800f218:	661a      	str	r2, [r3, #96]	@ 0x60
 800f21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f21c:	4a0c      	ldr	r2, [pc, #48]	@ (800f250 <prvInitialiseNewTask+0x154>)
 800f21e:	665a      	str	r2, [r3, #100]	@ 0x64
 800f220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f222:	4a0c      	ldr	r2, [pc, #48]	@ (800f254 <prvInitialiseNewTask+0x158>)
 800f224:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f226:	683a      	ldr	r2, [r7, #0]
 800f228:	68f9      	ldr	r1, [r7, #12]
 800f22a:	69b8      	ldr	r0, [r7, #24]
 800f22c:	f002 f912 	bl	8011454 <pxPortInitialiseStack>
 800f230:	4602      	mov	r2, r0
 800f232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f234:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d002      	beq.n	800f242 <prvInitialiseNewTask+0x146>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f23e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f240:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f242:	bf00      	nop
 800f244:	3720      	adds	r7, #32
 800f246:	46bd      	mov	sp, r7
 800f248:	bd80      	pop	{r7, pc}
 800f24a:	bf00      	nop
 800f24c:	2001d8a4 	.word	0x2001d8a4
 800f250:	2001d90c 	.word	0x2001d90c
 800f254:	2001d974 	.word	0x2001d974

0800f258 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b082      	sub	sp, #8
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f260:	f002 fa2a 	bl	80116b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f264:	4b2d      	ldr	r3, [pc, #180]	@ (800f31c <prvAddNewTaskToReadyList+0xc4>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	3301      	adds	r3, #1
 800f26a:	4a2c      	ldr	r2, [pc, #176]	@ (800f31c <prvAddNewTaskToReadyList+0xc4>)
 800f26c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f26e:	4b2c      	ldr	r3, [pc, #176]	@ (800f320 <prvAddNewTaskToReadyList+0xc8>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d109      	bne.n	800f28a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f276:	4a2a      	ldr	r2, [pc, #168]	@ (800f320 <prvAddNewTaskToReadyList+0xc8>)
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f27c:	4b27      	ldr	r3, [pc, #156]	@ (800f31c <prvAddNewTaskToReadyList+0xc4>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	2b01      	cmp	r3, #1
 800f282:	d110      	bne.n	800f2a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f284:	f001 f844 	bl	8010310 <prvInitialiseTaskLists>
 800f288:	e00d      	b.n	800f2a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f28a:	4b26      	ldr	r3, [pc, #152]	@ (800f324 <prvAddNewTaskToReadyList+0xcc>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d109      	bne.n	800f2a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f292:	4b23      	ldr	r3, [pc, #140]	@ (800f320 <prvAddNewTaskToReadyList+0xc8>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d802      	bhi.n	800f2a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f2a0:	4a1f      	ldr	r2, [pc, #124]	@ (800f320 <prvAddNewTaskToReadyList+0xc8>)
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f2a6:	4b20      	ldr	r3, [pc, #128]	@ (800f328 <prvAddNewTaskToReadyList+0xd0>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	3301      	adds	r3, #1
 800f2ac:	4a1e      	ldr	r2, [pc, #120]	@ (800f328 <prvAddNewTaskToReadyList+0xd0>)
 800f2ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f2b0:	4b1d      	ldr	r3, [pc, #116]	@ (800f328 <prvAddNewTaskToReadyList+0xd0>)
 800f2b2:	681a      	ldr	r2, [r3, #0]
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2bc:	4b1b      	ldr	r3, [pc, #108]	@ (800f32c <prvAddNewTaskToReadyList+0xd4>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d903      	bls.n	800f2cc <prvAddNewTaskToReadyList+0x74>
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2c8:	4a18      	ldr	r2, [pc, #96]	@ (800f32c <prvAddNewTaskToReadyList+0xd4>)
 800f2ca:	6013      	str	r3, [r2, #0]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2d0:	4613      	mov	r3, r2
 800f2d2:	009b      	lsls	r3, r3, #2
 800f2d4:	4413      	add	r3, r2
 800f2d6:	009b      	lsls	r3, r3, #2
 800f2d8:	4a15      	ldr	r2, [pc, #84]	@ (800f330 <prvAddNewTaskToReadyList+0xd8>)
 800f2da:	441a      	add	r2, r3
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	3304      	adds	r3, #4
 800f2e0:	4619      	mov	r1, r3
 800f2e2:	4610      	mov	r0, r2
 800f2e4:	f7fe fecb 	bl	800e07e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f2e8:	f002 fa18 	bl	801171c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f2ec:	4b0d      	ldr	r3, [pc, #52]	@ (800f324 <prvAddNewTaskToReadyList+0xcc>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d00e      	beq.n	800f312 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f2f4:	4b0a      	ldr	r3, [pc, #40]	@ (800f320 <prvAddNewTaskToReadyList+0xc8>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2fe:	429a      	cmp	r2, r3
 800f300:	d207      	bcs.n	800f312 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f302:	4b0c      	ldr	r3, [pc, #48]	@ (800f334 <prvAddNewTaskToReadyList+0xdc>)
 800f304:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f308:	601a      	str	r2, [r3, #0]
 800f30a:	f3bf 8f4f 	dsb	sy
 800f30e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f312:	bf00      	nop
 800f314:	3708      	adds	r7, #8
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}
 800f31a:	bf00      	nop
 800f31c:	2000d54c 	.word	0x2000d54c
 800f320:	2000d078 	.word	0x2000d078
 800f324:	2000d558 	.word	0x2000d558
 800f328:	2000d568 	.word	0x2000d568
 800f32c:	2000d554 	.word	0x2000d554
 800f330:	2000d07c 	.word	0x2000d07c
 800f334:	e000ed04 	.word	0xe000ed04

0800f338 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b084      	sub	sp, #16
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800f340:	f002 f9ba 	bl	80116b8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d102      	bne.n	800f350 <vTaskDelete+0x18>
 800f34a:	4b2d      	ldr	r3, [pc, #180]	@ (800f400 <vTaskDelete+0xc8>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	e000      	b.n	800f352 <vTaskDelete+0x1a>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	3304      	adds	r3, #4
 800f358:	4618      	mov	r0, r3
 800f35a:	f7fe feed 	bl	800e138 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f362:	2b00      	cmp	r3, #0
 800f364:	d004      	beq.n	800f370 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	3318      	adds	r3, #24
 800f36a:	4618      	mov	r0, r3
 800f36c:	f7fe fee4 	bl	800e138 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800f370:	4b24      	ldr	r3, [pc, #144]	@ (800f404 <vTaskDelete+0xcc>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	3301      	adds	r3, #1
 800f376:	4a23      	ldr	r2, [pc, #140]	@ (800f404 <vTaskDelete+0xcc>)
 800f378:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800f37a:	4b21      	ldr	r3, [pc, #132]	@ (800f400 <vTaskDelete+0xc8>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	68fa      	ldr	r2, [r7, #12]
 800f380:	429a      	cmp	r2, r3
 800f382:	d10b      	bne.n	800f39c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	3304      	adds	r3, #4
 800f388:	4619      	mov	r1, r3
 800f38a:	481f      	ldr	r0, [pc, #124]	@ (800f408 <vTaskDelete+0xd0>)
 800f38c:	f7fe fe77 	bl	800e07e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800f390:	4b1e      	ldr	r3, [pc, #120]	@ (800f40c <vTaskDelete+0xd4>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	3301      	adds	r3, #1
 800f396:	4a1d      	ldr	r2, [pc, #116]	@ (800f40c <vTaskDelete+0xd4>)
 800f398:	6013      	str	r3, [r2, #0]
 800f39a:	e009      	b.n	800f3b0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800f39c:	4b1c      	ldr	r3, [pc, #112]	@ (800f410 <vTaskDelete+0xd8>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	3b01      	subs	r3, #1
 800f3a2:	4a1b      	ldr	r2, [pc, #108]	@ (800f410 <vTaskDelete+0xd8>)
 800f3a4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800f3a6:	68f8      	ldr	r0, [r7, #12]
 800f3a8:	f001 f8be 	bl	8010528 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800f3ac:	f001 f8f2 	bl	8010594 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800f3b0:	f002 f9b4 	bl	801171c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800f3b4:	4b17      	ldr	r3, [pc, #92]	@ (800f414 <vTaskDelete+0xdc>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d01c      	beq.n	800f3f6 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800f3bc:	4b10      	ldr	r3, [pc, #64]	@ (800f400 <vTaskDelete+0xc8>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	68fa      	ldr	r2, [r7, #12]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d117      	bne.n	800f3f6 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800f3c6:	4b14      	ldr	r3, [pc, #80]	@ (800f418 <vTaskDelete+0xe0>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d00b      	beq.n	800f3e6 <vTaskDelete+0xae>
	__asm volatile
 800f3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3d2:	f383 8811 	msr	BASEPRI, r3
 800f3d6:	f3bf 8f6f 	isb	sy
 800f3da:	f3bf 8f4f 	dsb	sy
 800f3de:	60bb      	str	r3, [r7, #8]
}
 800f3e0:	bf00      	nop
 800f3e2:	bf00      	nop
 800f3e4:	e7fd      	b.n	800f3e2 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800f3e6:	4b0d      	ldr	r3, [pc, #52]	@ (800f41c <vTaskDelete+0xe4>)
 800f3e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f3ec:	601a      	str	r2, [r3, #0]
 800f3ee:	f3bf 8f4f 	dsb	sy
 800f3f2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f3f6:	bf00      	nop
 800f3f8:	3710      	adds	r7, #16
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}
 800f3fe:	bf00      	nop
 800f400:	2000d078 	.word	0x2000d078
 800f404:	2000d568 	.word	0x2000d568
 800f408:	2000d520 	.word	0x2000d520
 800f40c:	2000d534 	.word	0x2000d534
 800f410:	2000d54c 	.word	0x2000d54c
 800f414:	2000d558 	.word	0x2000d558
 800f418:	2000d574 	.word	0x2000d574
 800f41c:	e000ed04 	.word	0xe000ed04

0800f420 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f420:	b580      	push	{r7, lr}
 800f422:	b084      	sub	sp, #16
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f428:	2300      	movs	r3, #0
 800f42a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d018      	beq.n	800f464 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f432:	4b14      	ldr	r3, [pc, #80]	@ (800f484 <vTaskDelay+0x64>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d00b      	beq.n	800f452 <vTaskDelay+0x32>
	__asm volatile
 800f43a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f43e:	f383 8811 	msr	BASEPRI, r3
 800f442:	f3bf 8f6f 	isb	sy
 800f446:	f3bf 8f4f 	dsb	sy
 800f44a:	60bb      	str	r3, [r7, #8]
}
 800f44c:	bf00      	nop
 800f44e:	bf00      	nop
 800f450:	e7fd      	b.n	800f44e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f452:	f000 fa99 	bl	800f988 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f456:	2100      	movs	r1, #0
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f001 fbcf 	bl	8010bfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f45e:	f000 faa1 	bl	800f9a4 <xTaskResumeAll>
 800f462:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d107      	bne.n	800f47a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f46a:	4b07      	ldr	r3, [pc, #28]	@ (800f488 <vTaskDelay+0x68>)
 800f46c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f470:	601a      	str	r2, [r3, #0]
 800f472:	f3bf 8f4f 	dsb	sy
 800f476:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f47a:	bf00      	nop
 800f47c:	3710      	adds	r7, #16
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}
 800f482:	bf00      	nop
 800f484:	2000d574 	.word	0x2000d574
 800f488:	e000ed04 	.word	0xe000ed04

0800f48c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b088      	sub	sp, #32
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800f498:	69bb      	ldr	r3, [r7, #24]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d10b      	bne.n	800f4b6 <eTaskGetState+0x2a>
	__asm volatile
 800f49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4a2:	f383 8811 	msr	BASEPRI, r3
 800f4a6:	f3bf 8f6f 	isb	sy
 800f4aa:	f3bf 8f4f 	dsb	sy
 800f4ae:	60bb      	str	r3, [r7, #8]
}
 800f4b0:	bf00      	nop
 800f4b2:	bf00      	nop
 800f4b4:	e7fd      	b.n	800f4b2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800f4b6:	4b24      	ldr	r3, [pc, #144]	@ (800f548 <eTaskGetState+0xbc>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	69ba      	ldr	r2, [r7, #24]
 800f4bc:	429a      	cmp	r2, r3
 800f4be:	d102      	bne.n	800f4c6 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	77fb      	strb	r3, [r7, #31]
 800f4c4:	e03a      	b.n	800f53c <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800f4c6:	f002 f8f7 	bl	80116b8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800f4ca:	69bb      	ldr	r3, [r7, #24]
 800f4cc:	695b      	ldr	r3, [r3, #20]
 800f4ce:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800f4d0:	4b1e      	ldr	r3, [pc, #120]	@ (800f54c <eTaskGetState+0xc0>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800f4d6:	4b1e      	ldr	r3, [pc, #120]	@ (800f550 <eTaskGetState+0xc4>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800f4dc:	f002 f91e 	bl	801171c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800f4e0:	697a      	ldr	r2, [r7, #20]
 800f4e2:	693b      	ldr	r3, [r7, #16]
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d003      	beq.n	800f4f0 <eTaskGetState+0x64>
 800f4e8:	697a      	ldr	r2, [r7, #20]
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	d102      	bne.n	800f4f6 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800f4f0:	2302      	movs	r3, #2
 800f4f2:	77fb      	strb	r3, [r7, #31]
 800f4f4:	e022      	b.n	800f53c <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800f4f6:	697b      	ldr	r3, [r7, #20]
 800f4f8:	4a16      	ldr	r2, [pc, #88]	@ (800f554 <eTaskGetState+0xc8>)
 800f4fa:	4293      	cmp	r3, r2
 800f4fc:	d112      	bne.n	800f524 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800f4fe:	69bb      	ldr	r3, [r7, #24]
 800f500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f502:	2b00      	cmp	r3, #0
 800f504:	d10b      	bne.n	800f51e <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800f506:	69bb      	ldr	r3, [r7, #24]
 800f508:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f50c:	b2db      	uxtb	r3, r3
 800f50e:	2b01      	cmp	r3, #1
 800f510:	d102      	bne.n	800f518 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800f512:	2302      	movs	r3, #2
 800f514:	77fb      	strb	r3, [r7, #31]
 800f516:	e011      	b.n	800f53c <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800f518:	2303      	movs	r3, #3
 800f51a:	77fb      	strb	r3, [r7, #31]
 800f51c:	e00e      	b.n	800f53c <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800f51e:	2302      	movs	r3, #2
 800f520:	77fb      	strb	r3, [r7, #31]
 800f522:	e00b      	b.n	800f53c <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	4a0c      	ldr	r2, [pc, #48]	@ (800f558 <eTaskGetState+0xcc>)
 800f528:	4293      	cmp	r3, r2
 800f52a:	d002      	beq.n	800f532 <eTaskGetState+0xa6>
 800f52c:	697b      	ldr	r3, [r7, #20]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d102      	bne.n	800f538 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800f532:	2304      	movs	r3, #4
 800f534:	77fb      	strb	r3, [r7, #31]
 800f536:	e001      	b.n	800f53c <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800f538:	2301      	movs	r3, #1
 800f53a:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800f53c:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800f53e:	4618      	mov	r0, r3
 800f540:	3720      	adds	r7, #32
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
 800f546:	bf00      	nop
 800f548:	2000d078 	.word	0x2000d078
 800f54c:	2000d504 	.word	0x2000d504
 800f550:	2000d508 	.word	0x2000d508
 800f554:	2000d538 	.word	0x2000d538
 800f558:	2000d520 	.word	0x2000d520

0800f55c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b088      	sub	sp, #32
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800f566:	2300      	movs	r3, #0
 800f568:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	2b37      	cmp	r3, #55	@ 0x37
 800f56e:	d90b      	bls.n	800f588 <vTaskPrioritySet+0x2c>
	__asm volatile
 800f570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f574:	f383 8811 	msr	BASEPRI, r3
 800f578:	f3bf 8f6f 	isb	sy
 800f57c:	f3bf 8f4f 	dsb	sy
 800f580:	60fb      	str	r3, [r7, #12]
}
 800f582:	bf00      	nop
 800f584:	bf00      	nop
 800f586:	e7fd      	b.n	800f584 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	2b37      	cmp	r3, #55	@ 0x37
 800f58c:	d901      	bls.n	800f592 <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f58e:	2337      	movs	r3, #55	@ 0x37
 800f590:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800f592:	f002 f891 	bl	80116b8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d102      	bne.n	800f5a2 <vTaskPrioritySet+0x46>
 800f59c:	4b3a      	ldr	r3, [pc, #232]	@ (800f688 <vTaskPrioritySet+0x12c>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	e000      	b.n	800f5a4 <vTaskPrioritySet+0x48>
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800f5a6:	69bb      	ldr	r3, [r7, #24]
 800f5a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f5aa:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800f5ac:	697a      	ldr	r2, [r7, #20]
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d063      	beq.n	800f67c <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800f5b4:	683a      	ldr	r2, [r7, #0]
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d90d      	bls.n	800f5d8 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 800f5bc:	4b32      	ldr	r3, [pc, #200]	@ (800f688 <vTaskPrioritySet+0x12c>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	69ba      	ldr	r2, [r7, #24]
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d00f      	beq.n	800f5e6 <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800f5c6:	4b30      	ldr	r3, [pc, #192]	@ (800f688 <vTaskPrioritySet+0x12c>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5cc:	683a      	ldr	r2, [r7, #0]
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	d309      	bcc.n	800f5e6 <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	61fb      	str	r3, [r7, #28]
 800f5d6:	e006      	b.n	800f5e6 <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800f5d8:	4b2b      	ldr	r3, [pc, #172]	@ (800f688 <vTaskPrioritySet+0x12c>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	69ba      	ldr	r2, [r7, #24]
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	d101      	bne.n	800f5e6 <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f5e6:	69bb      	ldr	r3, [r7, #24]
 800f5e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5ea:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800f5ec:	69bb      	ldr	r3, [r7, #24]
 800f5ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f5f0:	69bb      	ldr	r3, [r7, #24]
 800f5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5f4:	429a      	cmp	r2, r3
 800f5f6:	d102      	bne.n	800f5fe <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 800f5f8:	69bb      	ldr	r3, [r7, #24]
 800f5fa:	683a      	ldr	r2, [r7, #0]
 800f5fc:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800f5fe:	69bb      	ldr	r3, [r7, #24]
 800f600:	683a      	ldr	r2, [r7, #0]
 800f602:	651a      	str	r2, [r3, #80]	@ 0x50
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f604:	69bb      	ldr	r3, [r7, #24]
 800f606:	699b      	ldr	r3, [r3, #24]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	db04      	blt.n	800f616 <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f612:	69bb      	ldr	r3, [r7, #24]
 800f614:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f616:	69bb      	ldr	r3, [r7, #24]
 800f618:	6959      	ldr	r1, [r3, #20]
 800f61a:	693a      	ldr	r2, [r7, #16]
 800f61c:	4613      	mov	r3, r2
 800f61e:	009b      	lsls	r3, r3, #2
 800f620:	4413      	add	r3, r2
 800f622:	009b      	lsls	r3, r3, #2
 800f624:	4a19      	ldr	r2, [pc, #100]	@ (800f68c <vTaskPrioritySet+0x130>)
 800f626:	4413      	add	r3, r2
 800f628:	4299      	cmp	r1, r3
 800f62a:	d11c      	bne.n	800f666 <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f62c:	69bb      	ldr	r3, [r7, #24]
 800f62e:	3304      	adds	r3, #4
 800f630:	4618      	mov	r0, r3
 800f632:	f7fe fd81 	bl	800e138 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800f636:	69bb      	ldr	r3, [r7, #24]
 800f638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f63a:	4b15      	ldr	r3, [pc, #84]	@ (800f690 <vTaskPrioritySet+0x134>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	429a      	cmp	r2, r3
 800f640:	d903      	bls.n	800f64a <vTaskPrioritySet+0xee>
 800f642:	69bb      	ldr	r3, [r7, #24]
 800f644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f646:	4a12      	ldr	r2, [pc, #72]	@ (800f690 <vTaskPrioritySet+0x134>)
 800f648:	6013      	str	r3, [r2, #0]
 800f64a:	69bb      	ldr	r3, [r7, #24]
 800f64c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f64e:	4613      	mov	r3, r2
 800f650:	009b      	lsls	r3, r3, #2
 800f652:	4413      	add	r3, r2
 800f654:	009b      	lsls	r3, r3, #2
 800f656:	4a0d      	ldr	r2, [pc, #52]	@ (800f68c <vTaskPrioritySet+0x130>)
 800f658:	441a      	add	r2, r3
 800f65a:	69bb      	ldr	r3, [r7, #24]
 800f65c:	3304      	adds	r3, #4
 800f65e:	4619      	mov	r1, r3
 800f660:	4610      	mov	r0, r2
 800f662:	f7fe fd0c 	bl	800e07e <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800f666:	69fb      	ldr	r3, [r7, #28]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d007      	beq.n	800f67c <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800f66c:	4b09      	ldr	r3, [pc, #36]	@ (800f694 <vTaskPrioritySet+0x138>)
 800f66e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f672:	601a      	str	r2, [r3, #0]
 800f674:	f3bf 8f4f 	dsb	sy
 800f678:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800f67c:	f002 f84e 	bl	801171c <vPortExitCritical>
	}
 800f680:	bf00      	nop
 800f682:	3720      	adds	r7, #32
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}
 800f688:	2000d078 	.word	0x2000d078
 800f68c:	2000d07c 	.word	0x2000d07c
 800f690:	2000d554 	.word	0x2000d554
 800f694:	e000ed04 	.word	0xe000ed04

0800f698 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b084      	sub	sp, #16
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800f6a0:	f002 f80a 	bl	80116b8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d102      	bne.n	800f6b0 <vTaskSuspend+0x18>
 800f6aa:	4b30      	ldr	r3, [pc, #192]	@ (800f76c <vTaskSuspend+0xd4>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	e000      	b.n	800f6b2 <vTaskSuspend+0x1a>
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	3304      	adds	r3, #4
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f7fe fd3d 	bl	800e138 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d004      	beq.n	800f6d0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	3318      	adds	r3, #24
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7fe fd34 	bl	800e138 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	3304      	adds	r3, #4
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	4826      	ldr	r0, [pc, #152]	@ (800f770 <vTaskSuspend+0xd8>)
 800f6d8:	f7fe fcd1 	bl	800e07e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f6e2:	b2db      	uxtb	r3, r3
 800f6e4:	2b01      	cmp	r3, #1
 800f6e6:	d103      	bne.n	800f6f0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800f6f0:	f002 f814 	bl	801171c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800f6f4:	4b1f      	ldr	r3, [pc, #124]	@ (800f774 <vTaskSuspend+0xdc>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d005      	beq.n	800f708 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800f6fc:	f001 ffdc 	bl	80116b8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800f700:	f000 ff48 	bl	8010594 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800f704:	f002 f80a 	bl	801171c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800f708:	4b18      	ldr	r3, [pc, #96]	@ (800f76c <vTaskSuspend+0xd4>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	68fa      	ldr	r2, [r7, #12]
 800f70e:	429a      	cmp	r2, r3
 800f710:	d128      	bne.n	800f764 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800f712:	4b18      	ldr	r3, [pc, #96]	@ (800f774 <vTaskSuspend+0xdc>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d018      	beq.n	800f74c <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800f71a:	4b17      	ldr	r3, [pc, #92]	@ (800f778 <vTaskSuspend+0xe0>)
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d00b      	beq.n	800f73a <vTaskSuspend+0xa2>
	__asm volatile
 800f722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f726:	f383 8811 	msr	BASEPRI, r3
 800f72a:	f3bf 8f6f 	isb	sy
 800f72e:	f3bf 8f4f 	dsb	sy
 800f732:	60bb      	str	r3, [r7, #8]
}
 800f734:	bf00      	nop
 800f736:	bf00      	nop
 800f738:	e7fd      	b.n	800f736 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800f73a:	4b10      	ldr	r3, [pc, #64]	@ (800f77c <vTaskSuspend+0xe4>)
 800f73c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f740:	601a      	str	r2, [r3, #0]
 800f742:	f3bf 8f4f 	dsb	sy
 800f746:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f74a:	e00b      	b.n	800f764 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800f74c:	4b08      	ldr	r3, [pc, #32]	@ (800f770 <vTaskSuspend+0xd8>)
 800f74e:	681a      	ldr	r2, [r3, #0]
 800f750:	4b0b      	ldr	r3, [pc, #44]	@ (800f780 <vTaskSuspend+0xe8>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	429a      	cmp	r2, r3
 800f756:	d103      	bne.n	800f760 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800f758:	4b04      	ldr	r3, [pc, #16]	@ (800f76c <vTaskSuspend+0xd4>)
 800f75a:	2200      	movs	r2, #0
 800f75c:	601a      	str	r2, [r3, #0]
	}
 800f75e:	e001      	b.n	800f764 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800f760:	f000 fb5c 	bl	800fe1c <vTaskSwitchContext>
	}
 800f764:	bf00      	nop
 800f766:	3710      	adds	r7, #16
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}
 800f76c:	2000d078 	.word	0x2000d078
 800f770:	2000d538 	.word	0x2000d538
 800f774:	2000d558 	.word	0x2000d558
 800f778:	2000d574 	.word	0x2000d574
 800f77c:	e000ed04 	.word	0xe000ed04
 800f780:	2000d54c 	.word	0x2000d54c

0800f784 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800f784:	b480      	push	{r7}
 800f786:	b087      	sub	sp, #28
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800f78c:	2300      	movs	r3, #0
 800f78e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d10b      	bne.n	800f7b2 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800f79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f79e:	f383 8811 	msr	BASEPRI, r3
 800f7a2:	f3bf 8f6f 	isb	sy
 800f7a6:	f3bf 8f4f 	dsb	sy
 800f7aa:	60fb      	str	r3, [r7, #12]
}
 800f7ac:	bf00      	nop
 800f7ae:	bf00      	nop
 800f7b0:	e7fd      	b.n	800f7ae <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f7b2:	693b      	ldr	r3, [r7, #16]
 800f7b4:	695b      	ldr	r3, [r3, #20]
 800f7b6:	4a0a      	ldr	r2, [pc, #40]	@ (800f7e0 <prvTaskIsTaskSuspended+0x5c>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d10a      	bne.n	800f7d2 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7c0:	4a08      	ldr	r2, [pc, #32]	@ (800f7e4 <prvTaskIsTaskSuspended+0x60>)
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d005      	beq.n	800f7d2 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800f7c6:	693b      	ldr	r3, [r7, #16]
 800f7c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d101      	bne.n	800f7d2 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f7d2:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	371c      	adds	r7, #28
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7de:	4770      	bx	lr
 800f7e0:	2000d538 	.word	0x2000d538
 800f7e4:	2000d50c 	.word	0x2000d50c

0800f7e8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b084      	sub	sp, #16
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d10b      	bne.n	800f812 <vTaskResume+0x2a>
	__asm volatile
 800f7fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7fe:	f383 8811 	msr	BASEPRI, r3
 800f802:	f3bf 8f6f 	isb	sy
 800f806:	f3bf 8f4f 	dsb	sy
 800f80a:	60bb      	str	r3, [r7, #8]
}
 800f80c:	bf00      	nop
 800f80e:	bf00      	nop
 800f810:	e7fd      	b.n	800f80e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800f812:	4b21      	ldr	r3, [pc, #132]	@ (800f898 <vTaskResume+0xb0>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	68fa      	ldr	r2, [r7, #12]
 800f818:	429a      	cmp	r2, r3
 800f81a:	d038      	beq.n	800f88e <vTaskResume+0xa6>
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d035      	beq.n	800f88e <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800f822:	f001 ff49 	bl	80116b8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800f826:	68f8      	ldr	r0, [r7, #12]
 800f828:	f7ff ffac 	bl	800f784 <prvTaskIsTaskSuspended>
 800f82c:	4603      	mov	r3, r0
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d02b      	beq.n	800f88a <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	3304      	adds	r3, #4
 800f836:	4618      	mov	r0, r3
 800f838:	f7fe fc7e 	bl	800e138 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f840:	4b16      	ldr	r3, [pc, #88]	@ (800f89c <vTaskResume+0xb4>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	429a      	cmp	r2, r3
 800f846:	d903      	bls.n	800f850 <vTaskResume+0x68>
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f84c:	4a13      	ldr	r2, [pc, #76]	@ (800f89c <vTaskResume+0xb4>)
 800f84e:	6013      	str	r3, [r2, #0]
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f854:	4613      	mov	r3, r2
 800f856:	009b      	lsls	r3, r3, #2
 800f858:	4413      	add	r3, r2
 800f85a:	009b      	lsls	r3, r3, #2
 800f85c:	4a10      	ldr	r2, [pc, #64]	@ (800f8a0 <vTaskResume+0xb8>)
 800f85e:	441a      	add	r2, r3
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	3304      	adds	r3, #4
 800f864:	4619      	mov	r1, r3
 800f866:	4610      	mov	r0, r2
 800f868:	f7fe fc09 	bl	800e07e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f870:	4b09      	ldr	r3, [pc, #36]	@ (800f898 <vTaskResume+0xb0>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f876:	429a      	cmp	r2, r3
 800f878:	d307      	bcc.n	800f88a <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800f87a:	4b0a      	ldr	r3, [pc, #40]	@ (800f8a4 <vTaskResume+0xbc>)
 800f87c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f880:	601a      	str	r2, [r3, #0]
 800f882:	f3bf 8f4f 	dsb	sy
 800f886:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800f88a:	f001 ff47 	bl	801171c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f88e:	bf00      	nop
 800f890:	3710      	adds	r7, #16
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}
 800f896:	bf00      	nop
 800f898:	2000d078 	.word	0x2000d078
 800f89c:	2000d554 	.word	0x2000d554
 800f8a0:	2000d07c 	.word	0x2000d07c
 800f8a4:	e000ed04 	.word	0xe000ed04

0800f8a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b08a      	sub	sp, #40	@ 0x28
 800f8ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f8b6:	463a      	mov	r2, r7
 800f8b8:	1d39      	adds	r1, r7, #4
 800f8ba:	f107 0308 	add.w	r3, r7, #8
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7fe f9c0 	bl	800dc44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f8c4:	6839      	ldr	r1, [r7, #0]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	68ba      	ldr	r2, [r7, #8]
 800f8ca:	9202      	str	r2, [sp, #8]
 800f8cc:	9301      	str	r3, [sp, #4]
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	9300      	str	r3, [sp, #0]
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	460a      	mov	r2, r1
 800f8d6:	4924      	ldr	r1, [pc, #144]	@ (800f968 <vTaskStartScheduler+0xc0>)
 800f8d8:	4824      	ldr	r0, [pc, #144]	@ (800f96c <vTaskStartScheduler+0xc4>)
 800f8da:	f7ff fb69 	bl	800efb0 <xTaskCreateStatic>
 800f8de:	4603      	mov	r3, r0
 800f8e0:	4a23      	ldr	r2, [pc, #140]	@ (800f970 <vTaskStartScheduler+0xc8>)
 800f8e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f8e4:	4b22      	ldr	r3, [pc, #136]	@ (800f970 <vTaskStartScheduler+0xc8>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d002      	beq.n	800f8f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	617b      	str	r3, [r7, #20]
 800f8f0:	e001      	b.n	800f8f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	2b01      	cmp	r3, #1
 800f8fa:	d102      	bne.n	800f902 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f8fc:	f001 f9d2 	bl	8010ca4 <xTimerCreateTimerTask>
 800f900:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	2b01      	cmp	r3, #1
 800f906:	d11b      	bne.n	800f940 <vTaskStartScheduler+0x98>
	__asm volatile
 800f908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f90c:	f383 8811 	msr	BASEPRI, r3
 800f910:	f3bf 8f6f 	isb	sy
 800f914:	f3bf 8f4f 	dsb	sy
 800f918:	613b      	str	r3, [r7, #16]
}
 800f91a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f91c:	4b15      	ldr	r3, [pc, #84]	@ (800f974 <vTaskStartScheduler+0xcc>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	335c      	adds	r3, #92	@ 0x5c
 800f922:	4a15      	ldr	r2, [pc, #84]	@ (800f978 <vTaskStartScheduler+0xd0>)
 800f924:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f926:	4b15      	ldr	r3, [pc, #84]	@ (800f97c <vTaskStartScheduler+0xd4>)
 800f928:	f04f 32ff 	mov.w	r2, #4294967295
 800f92c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f92e:	4b14      	ldr	r3, [pc, #80]	@ (800f980 <vTaskStartScheduler+0xd8>)
 800f930:	2201      	movs	r2, #1
 800f932:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f934:	4b13      	ldr	r3, [pc, #76]	@ (800f984 <vTaskStartScheduler+0xdc>)
 800f936:	2200      	movs	r2, #0
 800f938:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f93a:	f001 fe19 	bl	8011570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f93e:	e00f      	b.n	800f960 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f946:	d10b      	bne.n	800f960 <vTaskStartScheduler+0xb8>
	__asm volatile
 800f948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f94c:	f383 8811 	msr	BASEPRI, r3
 800f950:	f3bf 8f6f 	isb	sy
 800f954:	f3bf 8f4f 	dsb	sy
 800f958:	60fb      	str	r3, [r7, #12]
}
 800f95a:	bf00      	nop
 800f95c:	bf00      	nop
 800f95e:	e7fd      	b.n	800f95c <vTaskStartScheduler+0xb4>
}
 800f960:	bf00      	nop
 800f962:	3718      	adds	r7, #24
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}
 800f968:	08018998 	.word	0x08018998
 800f96c:	080102e1 	.word	0x080102e1
 800f970:	2000d570 	.word	0x2000d570
 800f974:	2000d078 	.word	0x2000d078
 800f978:	2000037c 	.word	0x2000037c
 800f97c:	2000d56c 	.word	0x2000d56c
 800f980:	2000d558 	.word	0x2000d558
 800f984:	2000d550 	.word	0x2000d550

0800f988 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f988:	b480      	push	{r7}
 800f98a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f98c:	4b04      	ldr	r3, [pc, #16]	@ (800f9a0 <vTaskSuspendAll+0x18>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	3301      	adds	r3, #1
 800f992:	4a03      	ldr	r2, [pc, #12]	@ (800f9a0 <vTaskSuspendAll+0x18>)
 800f994:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f996:	bf00      	nop
 800f998:	46bd      	mov	sp, r7
 800f99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99e:	4770      	bx	lr
 800f9a0:	2000d574 	.word	0x2000d574

0800f9a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b084      	sub	sp, #16
 800f9a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f9b2:	4b42      	ldr	r3, [pc, #264]	@ (800fabc <xTaskResumeAll+0x118>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d10b      	bne.n	800f9d2 <xTaskResumeAll+0x2e>
	__asm volatile
 800f9ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9be:	f383 8811 	msr	BASEPRI, r3
 800f9c2:	f3bf 8f6f 	isb	sy
 800f9c6:	f3bf 8f4f 	dsb	sy
 800f9ca:	603b      	str	r3, [r7, #0]
}
 800f9cc:	bf00      	nop
 800f9ce:	bf00      	nop
 800f9d0:	e7fd      	b.n	800f9ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f9d2:	f001 fe71 	bl	80116b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f9d6:	4b39      	ldr	r3, [pc, #228]	@ (800fabc <xTaskResumeAll+0x118>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	3b01      	subs	r3, #1
 800f9dc:	4a37      	ldr	r2, [pc, #220]	@ (800fabc <xTaskResumeAll+0x118>)
 800f9de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f9e0:	4b36      	ldr	r3, [pc, #216]	@ (800fabc <xTaskResumeAll+0x118>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d162      	bne.n	800faae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f9e8:	4b35      	ldr	r3, [pc, #212]	@ (800fac0 <xTaskResumeAll+0x11c>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d05e      	beq.n	800faae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f9f0:	e02f      	b.n	800fa52 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9f2:	4b34      	ldr	r3, [pc, #208]	@ (800fac4 <xTaskResumeAll+0x120>)
 800f9f4:	68db      	ldr	r3, [r3, #12]
 800f9f6:	68db      	ldr	r3, [r3, #12]
 800f9f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	3318      	adds	r3, #24
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7fe fb9a 	bl	800e138 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	3304      	adds	r3, #4
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f7fe fb95 	bl	800e138 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa12:	4b2d      	ldr	r3, [pc, #180]	@ (800fac8 <xTaskResumeAll+0x124>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	429a      	cmp	r2, r3
 800fa18:	d903      	bls.n	800fa22 <xTaskResumeAll+0x7e>
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa1e:	4a2a      	ldr	r2, [pc, #168]	@ (800fac8 <xTaskResumeAll+0x124>)
 800fa20:	6013      	str	r3, [r2, #0]
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa26:	4613      	mov	r3, r2
 800fa28:	009b      	lsls	r3, r3, #2
 800fa2a:	4413      	add	r3, r2
 800fa2c:	009b      	lsls	r3, r3, #2
 800fa2e:	4a27      	ldr	r2, [pc, #156]	@ (800facc <xTaskResumeAll+0x128>)
 800fa30:	441a      	add	r2, r3
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	3304      	adds	r3, #4
 800fa36:	4619      	mov	r1, r3
 800fa38:	4610      	mov	r0, r2
 800fa3a:	f7fe fb20 	bl	800e07e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa42:	4b23      	ldr	r3, [pc, #140]	@ (800fad0 <xTaskResumeAll+0x12c>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	d302      	bcc.n	800fa52 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800fa4c:	4b21      	ldr	r3, [pc, #132]	@ (800fad4 <xTaskResumeAll+0x130>)
 800fa4e:	2201      	movs	r2, #1
 800fa50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa52:	4b1c      	ldr	r3, [pc, #112]	@ (800fac4 <xTaskResumeAll+0x120>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d1cb      	bne.n	800f9f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d001      	beq.n	800fa64 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fa60:	f000 fd98 	bl	8010594 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fa64:	4b1c      	ldr	r3, [pc, #112]	@ (800fad8 <xTaskResumeAll+0x134>)
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d010      	beq.n	800fa92 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fa70:	f000 f91a 	bl	800fca8 <xTaskIncrementTick>
 800fa74:	4603      	mov	r3, r0
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d002      	beq.n	800fa80 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800fa7a:	4b16      	ldr	r3, [pc, #88]	@ (800fad4 <xTaskResumeAll+0x130>)
 800fa7c:	2201      	movs	r2, #1
 800fa7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	3b01      	subs	r3, #1
 800fa84:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d1f1      	bne.n	800fa70 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800fa8c:	4b12      	ldr	r3, [pc, #72]	@ (800fad8 <xTaskResumeAll+0x134>)
 800fa8e:	2200      	movs	r2, #0
 800fa90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fa92:	4b10      	ldr	r3, [pc, #64]	@ (800fad4 <xTaskResumeAll+0x130>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d009      	beq.n	800faae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fa9e:	4b0f      	ldr	r3, [pc, #60]	@ (800fadc <xTaskResumeAll+0x138>)
 800faa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800faa4:	601a      	str	r2, [r3, #0]
 800faa6:	f3bf 8f4f 	dsb	sy
 800faaa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800faae:	f001 fe35 	bl	801171c <vPortExitCritical>

	return xAlreadyYielded;
 800fab2:	68bb      	ldr	r3, [r7, #8]
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	3710      	adds	r7, #16
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd80      	pop	{r7, pc}
 800fabc:	2000d574 	.word	0x2000d574
 800fac0:	2000d54c 	.word	0x2000d54c
 800fac4:	2000d50c 	.word	0x2000d50c
 800fac8:	2000d554 	.word	0x2000d554
 800facc:	2000d07c 	.word	0x2000d07c
 800fad0:	2000d078 	.word	0x2000d078
 800fad4:	2000d560 	.word	0x2000d560
 800fad8:	2000d55c 	.word	0x2000d55c
 800fadc:	e000ed04 	.word	0xe000ed04

0800fae0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fae0:	b480      	push	{r7}
 800fae2:	b083      	sub	sp, #12
 800fae4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fae6:	4b05      	ldr	r3, [pc, #20]	@ (800fafc <xTaskGetTickCount+0x1c>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800faec:	687b      	ldr	r3, [r7, #4]
}
 800faee:	4618      	mov	r0, r3
 800faf0:	370c      	adds	r7, #12
 800faf2:	46bd      	mov	sp, r7
 800faf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf8:	4770      	bx	lr
 800fafa:	bf00      	nop
 800fafc:	2000d550 	.word	0x2000d550

0800fb00 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800fb00:	b480      	push	{r7}
 800fb02:	b08b      	sub	sp, #44	@ 0x2c
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d05b      	beq.n	800fbce <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	61bb      	str	r3, [r7, #24]
 800fb1a:	69bb      	ldr	r3, [r7, #24]
 800fb1c:	685b      	ldr	r3, [r3, #4]
 800fb1e:	685a      	ldr	r2, [r3, #4]
 800fb20:	69bb      	ldr	r3, [r7, #24]
 800fb22:	605a      	str	r2, [r3, #4]
 800fb24:	69bb      	ldr	r3, [r7, #24]
 800fb26:	685a      	ldr	r2, [r3, #4]
 800fb28:	69bb      	ldr	r3, [r7, #24]
 800fb2a:	3308      	adds	r3, #8
 800fb2c:	429a      	cmp	r2, r3
 800fb2e:	d104      	bne.n	800fb3a <prvSearchForNameWithinSingleList+0x3a>
 800fb30:	69bb      	ldr	r3, [r7, #24]
 800fb32:	685b      	ldr	r3, [r3, #4]
 800fb34:	685a      	ldr	r2, [r3, #4]
 800fb36:	69bb      	ldr	r3, [r7, #24]
 800fb38:	605a      	str	r2, [r3, #4]
 800fb3a:	69bb      	ldr	r3, [r7, #24]
 800fb3c:	685b      	ldr	r3, [r3, #4]
 800fb3e:	68db      	ldr	r3, [r3, #12]
 800fb40:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	613b      	str	r3, [r7, #16]
 800fb46:	693b      	ldr	r3, [r7, #16]
 800fb48:	685b      	ldr	r3, [r3, #4]
 800fb4a:	685a      	ldr	r2, [r3, #4]
 800fb4c:	693b      	ldr	r3, [r7, #16]
 800fb4e:	605a      	str	r2, [r3, #4]
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	685a      	ldr	r2, [r3, #4]
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	3308      	adds	r3, #8
 800fb58:	429a      	cmp	r2, r3
 800fb5a:	d104      	bne.n	800fb66 <prvSearchForNameWithinSingleList+0x66>
 800fb5c:	693b      	ldr	r3, [r7, #16]
 800fb5e:	685b      	ldr	r3, [r3, #4]
 800fb60:	685a      	ldr	r2, [r3, #4]
 800fb62:	693b      	ldr	r3, [r7, #16]
 800fb64:	605a      	str	r2, [r3, #4]
 800fb66:	693b      	ldr	r3, [r7, #16]
 800fb68:	685b      	ldr	r3, [r3, #4]
 800fb6a:	68db      	ldr	r3, [r3, #12]
 800fb6c:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fb72:	2300      	movs	r3, #0
 800fb74:	623b      	str	r3, [r7, #32]
 800fb76:	e01c      	b.n	800fbb2 <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800fb78:	68fa      	ldr	r2, [r7, #12]
 800fb7a:	6a3b      	ldr	r3, [r7, #32]
 800fb7c:	4413      	add	r3, r2
 800fb7e:	3334      	adds	r3, #52	@ 0x34
 800fb80:	781b      	ldrb	r3, [r3, #0]
 800fb82:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800fb84:	683a      	ldr	r2, [r7, #0]
 800fb86:	6a3b      	ldr	r3, [r7, #32]
 800fb88:	4413      	add	r3, r2
 800fb8a:	781b      	ldrb	r3, [r3, #0]
 800fb8c:	7afa      	ldrb	r2, [r7, #11]
 800fb8e:	429a      	cmp	r2, r3
 800fb90:	d002      	beq.n	800fb98 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800fb92:	2301      	movs	r3, #1
 800fb94:	61fb      	str	r3, [r7, #28]
 800fb96:	e006      	b.n	800fba6 <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800fb98:	7afb      	ldrb	r3, [r7, #11]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d103      	bne.n	800fba6 <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800fba2:	2301      	movs	r3, #1
 800fba4:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800fba6:	69fb      	ldr	r3, [r7, #28]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d106      	bne.n	800fbba <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fbac:	6a3b      	ldr	r3, [r7, #32]
 800fbae:	3301      	adds	r3, #1
 800fbb0:	623b      	str	r3, [r7, #32]
 800fbb2:	6a3b      	ldr	r3, [r7, #32]
 800fbb4:	2b0f      	cmp	r3, #15
 800fbb6:	d9df      	bls.n	800fb78 <prvSearchForNameWithinSingleList+0x78>
 800fbb8:	e000      	b.n	800fbbc <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800fbba:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800fbbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d104      	bne.n	800fbcc <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800fbc2:	68fa      	ldr	r2, [r7, #12]
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d1bb      	bne.n	800fb42 <prvSearchForNameWithinSingleList+0x42>
 800fbca:	e000      	b.n	800fbce <prvSearchForNameWithinSingleList+0xce>
					break;
 800fbcc:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800fbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	372c      	adds	r7, #44	@ 0x2c
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbda:	4770      	bx	lr

0800fbdc <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b086      	sub	sp, #24
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800fbe4:	2338      	movs	r3, #56	@ 0x38
 800fbe6:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f7f0 fb51 	bl	8000290 <strlen>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	2b0f      	cmp	r3, #15
 800fbf2:	d90b      	bls.n	800fc0c <xTaskGetHandle+0x30>
	__asm volatile
 800fbf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbf8:	f383 8811 	msr	BASEPRI, r3
 800fbfc:	f3bf 8f6f 	isb	sy
 800fc00:	f3bf 8f4f 	dsb	sy
 800fc04:	60fb      	str	r3, [r7, #12]
}
 800fc06:	bf00      	nop
 800fc08:	bf00      	nop
 800fc0a:	e7fd      	b.n	800fc08 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800fc0c:	f7ff febc 	bl	800f988 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	3b01      	subs	r3, #1
 800fc14:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800fc16:	697a      	ldr	r2, [r7, #20]
 800fc18:	4613      	mov	r3, r2
 800fc1a:	009b      	lsls	r3, r3, #2
 800fc1c:	4413      	add	r3, r2
 800fc1e:	009b      	lsls	r3, r3, #2
 800fc20:	4a1c      	ldr	r2, [pc, #112]	@ (800fc94 <xTaskGetHandle+0xb8>)
 800fc22:	4413      	add	r3, r2
 800fc24:	6879      	ldr	r1, [r7, #4]
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7ff ff6a 	bl	800fb00 <prvSearchForNameWithinSingleList>
 800fc2c:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800fc2e:	693b      	ldr	r3, [r7, #16]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d103      	bne.n	800fc3c <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc34:	697b      	ldr	r3, [r7, #20]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d1ea      	bne.n	800fc10 <xTaskGetHandle+0x34>
 800fc3a:	e000      	b.n	800fc3e <xTaskGetHandle+0x62>
					break;
 800fc3c:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800fc3e:	693b      	ldr	r3, [r7, #16]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d106      	bne.n	800fc52 <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800fc44:	4b14      	ldr	r3, [pc, #80]	@ (800fc98 <xTaskGetHandle+0xbc>)
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	6879      	ldr	r1, [r7, #4]
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f7ff ff58 	bl	800fb00 <prvSearchForNameWithinSingleList>
 800fc50:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800fc52:	693b      	ldr	r3, [r7, #16]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d106      	bne.n	800fc66 <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800fc58:	4b10      	ldr	r3, [pc, #64]	@ (800fc9c <xTaskGetHandle+0xc0>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	6879      	ldr	r1, [r7, #4]
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7ff ff4e 	bl	800fb00 <prvSearchForNameWithinSingleList>
 800fc64:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800fc66:	693b      	ldr	r3, [r7, #16]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d104      	bne.n	800fc76 <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800fc6c:	6879      	ldr	r1, [r7, #4]
 800fc6e:	480c      	ldr	r0, [pc, #48]	@ (800fca0 <xTaskGetHandle+0xc4>)
 800fc70:	f7ff ff46 	bl	800fb00 <prvSearchForNameWithinSingleList>
 800fc74:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800fc76:	693b      	ldr	r3, [r7, #16]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d104      	bne.n	800fc86 <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800fc7c:	6879      	ldr	r1, [r7, #4]
 800fc7e:	4809      	ldr	r0, [pc, #36]	@ (800fca4 <xTaskGetHandle+0xc8>)
 800fc80:	f7ff ff3e 	bl	800fb00 <prvSearchForNameWithinSingleList>
 800fc84:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800fc86:	f7ff fe8d 	bl	800f9a4 <xTaskResumeAll>

		return pxTCB;
 800fc8a:	693b      	ldr	r3, [r7, #16]
	}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	3718      	adds	r7, #24
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}
 800fc94:	2000d07c 	.word	0x2000d07c
 800fc98:	2000d504 	.word	0x2000d504
 800fc9c:	2000d508 	.word	0x2000d508
 800fca0:	2000d538 	.word	0x2000d538
 800fca4:	2000d520 	.word	0x2000d520

0800fca8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b086      	sub	sp, #24
 800fcac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fcb2:	4b4f      	ldr	r3, [pc, #316]	@ (800fdf0 <xTaskIncrementTick+0x148>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	f040 8090 	bne.w	800fddc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fcbc:	4b4d      	ldr	r3, [pc, #308]	@ (800fdf4 <xTaskIncrementTick+0x14c>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	3301      	adds	r3, #1
 800fcc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fcc4:	4a4b      	ldr	r2, [pc, #300]	@ (800fdf4 <xTaskIncrementTick+0x14c>)
 800fcc6:	693b      	ldr	r3, [r7, #16]
 800fcc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d121      	bne.n	800fd14 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800fcd0:	4b49      	ldr	r3, [pc, #292]	@ (800fdf8 <xTaskIncrementTick+0x150>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d00b      	beq.n	800fcf2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800fcda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcde:	f383 8811 	msr	BASEPRI, r3
 800fce2:	f3bf 8f6f 	isb	sy
 800fce6:	f3bf 8f4f 	dsb	sy
 800fcea:	603b      	str	r3, [r7, #0]
}
 800fcec:	bf00      	nop
 800fcee:	bf00      	nop
 800fcf0:	e7fd      	b.n	800fcee <xTaskIncrementTick+0x46>
 800fcf2:	4b41      	ldr	r3, [pc, #260]	@ (800fdf8 <xTaskIncrementTick+0x150>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	60fb      	str	r3, [r7, #12]
 800fcf8:	4b40      	ldr	r3, [pc, #256]	@ (800fdfc <xTaskIncrementTick+0x154>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	4a3e      	ldr	r2, [pc, #248]	@ (800fdf8 <xTaskIncrementTick+0x150>)
 800fcfe:	6013      	str	r3, [r2, #0]
 800fd00:	4a3e      	ldr	r2, [pc, #248]	@ (800fdfc <xTaskIncrementTick+0x154>)
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	6013      	str	r3, [r2, #0]
 800fd06:	4b3e      	ldr	r3, [pc, #248]	@ (800fe00 <xTaskIncrementTick+0x158>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	3301      	adds	r3, #1
 800fd0c:	4a3c      	ldr	r2, [pc, #240]	@ (800fe00 <xTaskIncrementTick+0x158>)
 800fd0e:	6013      	str	r3, [r2, #0]
 800fd10:	f000 fc40 	bl	8010594 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fd14:	4b3b      	ldr	r3, [pc, #236]	@ (800fe04 <xTaskIncrementTick+0x15c>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	693a      	ldr	r2, [r7, #16]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d349      	bcc.n	800fdb2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd1e:	4b36      	ldr	r3, [pc, #216]	@ (800fdf8 <xTaskIncrementTick+0x150>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d104      	bne.n	800fd32 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd28:	4b36      	ldr	r3, [pc, #216]	@ (800fe04 <xTaskIncrementTick+0x15c>)
 800fd2a:	f04f 32ff 	mov.w	r2, #4294967295
 800fd2e:	601a      	str	r2, [r3, #0]
					break;
 800fd30:	e03f      	b.n	800fdb2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd32:	4b31      	ldr	r3, [pc, #196]	@ (800fdf8 <xTaskIncrementTick+0x150>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	68db      	ldr	r3, [r3, #12]
 800fd38:	68db      	ldr	r3, [r3, #12]
 800fd3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	685b      	ldr	r3, [r3, #4]
 800fd40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fd42:	693a      	ldr	r2, [r7, #16]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	429a      	cmp	r2, r3
 800fd48:	d203      	bcs.n	800fd52 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fd4a:	4a2e      	ldr	r2, [pc, #184]	@ (800fe04 <xTaskIncrementTick+0x15c>)
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fd50:	e02f      	b.n	800fdb2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	3304      	adds	r3, #4
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7fe f9ee 	bl	800e138 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fd5c:	68bb      	ldr	r3, [r7, #8]
 800fd5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d004      	beq.n	800fd6e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	3318      	adds	r3, #24
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7fe f9e5 	bl	800e138 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd72:	4b25      	ldr	r3, [pc, #148]	@ (800fe08 <xTaskIncrementTick+0x160>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d903      	bls.n	800fd82 <xTaskIncrementTick+0xda>
 800fd7a:	68bb      	ldr	r3, [r7, #8]
 800fd7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd7e:	4a22      	ldr	r2, [pc, #136]	@ (800fe08 <xTaskIncrementTick+0x160>)
 800fd80:	6013      	str	r3, [r2, #0]
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd86:	4613      	mov	r3, r2
 800fd88:	009b      	lsls	r3, r3, #2
 800fd8a:	4413      	add	r3, r2
 800fd8c:	009b      	lsls	r3, r3, #2
 800fd8e:	4a1f      	ldr	r2, [pc, #124]	@ (800fe0c <xTaskIncrementTick+0x164>)
 800fd90:	441a      	add	r2, r3
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	3304      	adds	r3, #4
 800fd96:	4619      	mov	r1, r3
 800fd98:	4610      	mov	r0, r2
 800fd9a:	f7fe f970 	bl	800e07e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fd9e:	68bb      	ldr	r3, [r7, #8]
 800fda0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fda2:	4b1b      	ldr	r3, [pc, #108]	@ (800fe10 <xTaskIncrementTick+0x168>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	d3b8      	bcc.n	800fd1e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800fdac:	2301      	movs	r3, #1
 800fdae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fdb0:	e7b5      	b.n	800fd1e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fdb2:	4b17      	ldr	r3, [pc, #92]	@ (800fe10 <xTaskIncrementTick+0x168>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fdb8:	4914      	ldr	r1, [pc, #80]	@ (800fe0c <xTaskIncrementTick+0x164>)
 800fdba:	4613      	mov	r3, r2
 800fdbc:	009b      	lsls	r3, r3, #2
 800fdbe:	4413      	add	r3, r2
 800fdc0:	009b      	lsls	r3, r3, #2
 800fdc2:	440b      	add	r3, r1
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	2b01      	cmp	r3, #1
 800fdc8:	d901      	bls.n	800fdce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800fdca:	2301      	movs	r3, #1
 800fdcc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fdce:	4b11      	ldr	r3, [pc, #68]	@ (800fe14 <xTaskIncrementTick+0x16c>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d007      	beq.n	800fde6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	617b      	str	r3, [r7, #20]
 800fdda:	e004      	b.n	800fde6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fddc:	4b0e      	ldr	r3, [pc, #56]	@ (800fe18 <xTaskIncrementTick+0x170>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	3301      	adds	r3, #1
 800fde2:	4a0d      	ldr	r2, [pc, #52]	@ (800fe18 <xTaskIncrementTick+0x170>)
 800fde4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fde6:	697b      	ldr	r3, [r7, #20]
}
 800fde8:	4618      	mov	r0, r3
 800fdea:	3718      	adds	r7, #24
 800fdec:	46bd      	mov	sp, r7
 800fdee:	bd80      	pop	{r7, pc}
 800fdf0:	2000d574 	.word	0x2000d574
 800fdf4:	2000d550 	.word	0x2000d550
 800fdf8:	2000d504 	.word	0x2000d504
 800fdfc:	2000d508 	.word	0x2000d508
 800fe00:	2000d564 	.word	0x2000d564
 800fe04:	2000d56c 	.word	0x2000d56c
 800fe08:	2000d554 	.word	0x2000d554
 800fe0c:	2000d07c 	.word	0x2000d07c
 800fe10:	2000d078 	.word	0x2000d078
 800fe14:	2000d560 	.word	0x2000d560
 800fe18:	2000d55c 	.word	0x2000d55c

0800fe1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b085      	sub	sp, #20
 800fe20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fe22:	4b37      	ldr	r3, [pc, #220]	@ (800ff00 <vTaskSwitchContext+0xe4>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d003      	beq.n	800fe32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fe2a:	4b36      	ldr	r3, [pc, #216]	@ (800ff04 <vTaskSwitchContext+0xe8>)
 800fe2c:	2201      	movs	r2, #1
 800fe2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fe30:	e05f      	b.n	800fef2 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800fe32:	4b34      	ldr	r3, [pc, #208]	@ (800ff04 <vTaskSwitchContext+0xe8>)
 800fe34:	2200      	movs	r2, #0
 800fe36:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800fe38:	4b33      	ldr	r3, [pc, #204]	@ (800ff08 <vTaskSwitchContext+0xec>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	4a33      	ldr	r2, [pc, #204]	@ (800ff0c <vTaskSwitchContext+0xf0>)
 800fe3e:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800fe40:	4b32      	ldr	r3, [pc, #200]	@ (800ff0c <vTaskSwitchContext+0xf0>)
 800fe42:	681a      	ldr	r2, [r3, #0]
 800fe44:	4b32      	ldr	r3, [pc, #200]	@ (800ff10 <vTaskSwitchContext+0xf4>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	429a      	cmp	r2, r3
 800fe4a:	d909      	bls.n	800fe60 <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800fe4c:	4b31      	ldr	r3, [pc, #196]	@ (800ff14 <vTaskSwitchContext+0xf8>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800fe52:	4a2e      	ldr	r2, [pc, #184]	@ (800ff0c <vTaskSwitchContext+0xf0>)
 800fe54:	6810      	ldr	r0, [r2, #0]
 800fe56:	4a2e      	ldr	r2, [pc, #184]	@ (800ff10 <vTaskSwitchContext+0xf4>)
 800fe58:	6812      	ldr	r2, [r2, #0]
 800fe5a:	1a82      	subs	r2, r0, r2
 800fe5c:	440a      	add	r2, r1
 800fe5e:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800fe60:	4b2a      	ldr	r3, [pc, #168]	@ (800ff0c <vTaskSwitchContext+0xf0>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	4a2a      	ldr	r2, [pc, #168]	@ (800ff10 <vTaskSwitchContext+0xf4>)
 800fe66:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe68:	4b2b      	ldr	r3, [pc, #172]	@ (800ff18 <vTaskSwitchContext+0xfc>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	60fb      	str	r3, [r7, #12]
 800fe6e:	e011      	b.n	800fe94 <vTaskSwitchContext+0x78>
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d10b      	bne.n	800fe8e <vTaskSwitchContext+0x72>
	__asm volatile
 800fe76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe7a:	f383 8811 	msr	BASEPRI, r3
 800fe7e:	f3bf 8f6f 	isb	sy
 800fe82:	f3bf 8f4f 	dsb	sy
 800fe86:	607b      	str	r3, [r7, #4]
}
 800fe88:	bf00      	nop
 800fe8a:	bf00      	nop
 800fe8c:	e7fd      	b.n	800fe8a <vTaskSwitchContext+0x6e>
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	3b01      	subs	r3, #1
 800fe92:	60fb      	str	r3, [r7, #12]
 800fe94:	4921      	ldr	r1, [pc, #132]	@ (800ff1c <vTaskSwitchContext+0x100>)
 800fe96:	68fa      	ldr	r2, [r7, #12]
 800fe98:	4613      	mov	r3, r2
 800fe9a:	009b      	lsls	r3, r3, #2
 800fe9c:	4413      	add	r3, r2
 800fe9e:	009b      	lsls	r3, r3, #2
 800fea0:	440b      	add	r3, r1
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d0e3      	beq.n	800fe70 <vTaskSwitchContext+0x54>
 800fea8:	68fa      	ldr	r2, [r7, #12]
 800feaa:	4613      	mov	r3, r2
 800feac:	009b      	lsls	r3, r3, #2
 800feae:	4413      	add	r3, r2
 800feb0:	009b      	lsls	r3, r3, #2
 800feb2:	4a1a      	ldr	r2, [pc, #104]	@ (800ff1c <vTaskSwitchContext+0x100>)
 800feb4:	4413      	add	r3, r2
 800feb6:	60bb      	str	r3, [r7, #8]
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	685a      	ldr	r2, [r3, #4]
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	605a      	str	r2, [r3, #4]
 800fec2:	68bb      	ldr	r3, [r7, #8]
 800fec4:	685a      	ldr	r2, [r3, #4]
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	3308      	adds	r3, #8
 800feca:	429a      	cmp	r2, r3
 800fecc:	d104      	bne.n	800fed8 <vTaskSwitchContext+0xbc>
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	685a      	ldr	r2, [r3, #4]
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	605a      	str	r2, [r3, #4]
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	685b      	ldr	r3, [r3, #4]
 800fedc:	68db      	ldr	r3, [r3, #12]
 800fede:	4a0d      	ldr	r2, [pc, #52]	@ (800ff14 <vTaskSwitchContext+0xf8>)
 800fee0:	6013      	str	r3, [r2, #0]
 800fee2:	4a0d      	ldr	r2, [pc, #52]	@ (800ff18 <vTaskSwitchContext+0xfc>)
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fee8:	4b0a      	ldr	r3, [pc, #40]	@ (800ff14 <vTaskSwitchContext+0xf8>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	335c      	adds	r3, #92	@ 0x5c
 800feee:	4a0c      	ldr	r2, [pc, #48]	@ (800ff20 <vTaskSwitchContext+0x104>)
 800fef0:	6013      	str	r3, [r2, #0]
}
 800fef2:	bf00      	nop
 800fef4:	3714      	adds	r7, #20
 800fef6:	46bd      	mov	sp, r7
 800fef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefc:	4770      	bx	lr
 800fefe:	bf00      	nop
 800ff00:	2000d574 	.word	0x2000d574
 800ff04:	2000d560 	.word	0x2000d560
 800ff08:	2000c8ac 	.word	0x2000c8ac
 800ff0c:	2000d57c 	.word	0x2000d57c
 800ff10:	2000d578 	.word	0x2000d578
 800ff14:	2000d078 	.word	0x2000d078
 800ff18:	2000d554 	.word	0x2000d554
 800ff1c:	2000d07c 	.word	0x2000d07c
 800ff20:	2000037c 	.word	0x2000037c

0800ff24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b084      	sub	sp, #16
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
 800ff2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d10b      	bne.n	800ff4c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ff34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff38:	f383 8811 	msr	BASEPRI, r3
 800ff3c:	f3bf 8f6f 	isb	sy
 800ff40:	f3bf 8f4f 	dsb	sy
 800ff44:	60fb      	str	r3, [r7, #12]
}
 800ff46:	bf00      	nop
 800ff48:	bf00      	nop
 800ff4a:	e7fd      	b.n	800ff48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff4c:	4b07      	ldr	r3, [pc, #28]	@ (800ff6c <vTaskPlaceOnEventList+0x48>)
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	3318      	adds	r3, #24
 800ff52:	4619      	mov	r1, r3
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f7fe f8b6 	bl	800e0c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ff5a:	2101      	movs	r1, #1
 800ff5c:	6838      	ldr	r0, [r7, #0]
 800ff5e:	f000 fe4d 	bl	8010bfc <prvAddCurrentTaskToDelayedList>
}
 800ff62:	bf00      	nop
 800ff64:	3710      	adds	r7, #16
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}
 800ff6a:	bf00      	nop
 800ff6c:	2000d078 	.word	0x2000d078

0800ff70 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b086      	sub	sp, #24
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	60f8      	str	r0, [r7, #12]
 800ff78:	60b9      	str	r1, [r7, #8]
 800ff7a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d10b      	bne.n	800ff9a <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800ff82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff86:	f383 8811 	msr	BASEPRI, r3
 800ff8a:	f3bf 8f6f 	isb	sy
 800ff8e:	f3bf 8f4f 	dsb	sy
 800ff92:	617b      	str	r3, [r7, #20]
}
 800ff94:	bf00      	nop
 800ff96:	bf00      	nop
 800ff98:	e7fd      	b.n	800ff96 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800ff9a:	4b12      	ldr	r3, [pc, #72]	@ (800ffe4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d10b      	bne.n	800ffba <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800ffa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffa6:	f383 8811 	msr	BASEPRI, r3
 800ffaa:	f3bf 8f6f 	isb	sy
 800ffae:	f3bf 8f4f 	dsb	sy
 800ffb2:	613b      	str	r3, [r7, #16]
}
 800ffb4:	bf00      	nop
 800ffb6:	bf00      	nop
 800ffb8:	e7fd      	b.n	800ffb6 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800ffba:	4b0b      	ldr	r3, [pc, #44]	@ (800ffe8 <vTaskPlaceOnUnorderedEventList+0x78>)
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	68ba      	ldr	r2, [r7, #8]
 800ffc0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ffc4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ffc6:	4b08      	ldr	r3, [pc, #32]	@ (800ffe8 <vTaskPlaceOnUnorderedEventList+0x78>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	3318      	adds	r3, #24
 800ffcc:	4619      	mov	r1, r3
 800ffce:	68f8      	ldr	r0, [r7, #12]
 800ffd0:	f7fe f855 	bl	800e07e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ffd4:	2101      	movs	r1, #1
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f000 fe10 	bl	8010bfc <prvAddCurrentTaskToDelayedList>
}
 800ffdc:	bf00      	nop
 800ffde:	3718      	adds	r7, #24
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}
 800ffe4:	2000d574 	.word	0x2000d574
 800ffe8:	2000d078 	.word	0x2000d078

0800ffec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b086      	sub	sp, #24
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	60f8      	str	r0, [r7, #12]
 800fff4:	60b9      	str	r1, [r7, #8]
 800fff6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d10b      	bne.n	8010016 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800fffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010002:	f383 8811 	msr	BASEPRI, r3
 8010006:	f3bf 8f6f 	isb	sy
 801000a:	f3bf 8f4f 	dsb	sy
 801000e:	617b      	str	r3, [r7, #20]
}
 8010010:	bf00      	nop
 8010012:	bf00      	nop
 8010014:	e7fd      	b.n	8010012 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010016:	4b0a      	ldr	r3, [pc, #40]	@ (8010040 <vTaskPlaceOnEventListRestricted+0x54>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	3318      	adds	r3, #24
 801001c:	4619      	mov	r1, r3
 801001e:	68f8      	ldr	r0, [r7, #12]
 8010020:	f7fe f82d 	bl	800e07e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d002      	beq.n	8010030 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801002a:	f04f 33ff 	mov.w	r3, #4294967295
 801002e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010030:	6879      	ldr	r1, [r7, #4]
 8010032:	68b8      	ldr	r0, [r7, #8]
 8010034:	f000 fde2 	bl	8010bfc <prvAddCurrentTaskToDelayedList>
	}
 8010038:	bf00      	nop
 801003a:	3718      	adds	r7, #24
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}
 8010040:	2000d078 	.word	0x2000d078

08010044 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b086      	sub	sp, #24
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	68db      	ldr	r3, [r3, #12]
 8010050:	68db      	ldr	r3, [r3, #12]
 8010052:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010054:	693b      	ldr	r3, [r7, #16]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d10b      	bne.n	8010072 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801005a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801005e:	f383 8811 	msr	BASEPRI, r3
 8010062:	f3bf 8f6f 	isb	sy
 8010066:	f3bf 8f4f 	dsb	sy
 801006a:	60fb      	str	r3, [r7, #12]
}
 801006c:	bf00      	nop
 801006e:	bf00      	nop
 8010070:	e7fd      	b.n	801006e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010072:	693b      	ldr	r3, [r7, #16]
 8010074:	3318      	adds	r3, #24
 8010076:	4618      	mov	r0, r3
 8010078:	f7fe f85e 	bl	800e138 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801007c:	4b1d      	ldr	r3, [pc, #116]	@ (80100f4 <xTaskRemoveFromEventList+0xb0>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d11d      	bne.n	80100c0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010084:	693b      	ldr	r3, [r7, #16]
 8010086:	3304      	adds	r3, #4
 8010088:	4618      	mov	r0, r3
 801008a:	f7fe f855 	bl	800e138 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801008e:	693b      	ldr	r3, [r7, #16]
 8010090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010092:	4b19      	ldr	r3, [pc, #100]	@ (80100f8 <xTaskRemoveFromEventList+0xb4>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	429a      	cmp	r2, r3
 8010098:	d903      	bls.n	80100a2 <xTaskRemoveFromEventList+0x5e>
 801009a:	693b      	ldr	r3, [r7, #16]
 801009c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801009e:	4a16      	ldr	r2, [pc, #88]	@ (80100f8 <xTaskRemoveFromEventList+0xb4>)
 80100a0:	6013      	str	r3, [r2, #0]
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100a6:	4613      	mov	r3, r2
 80100a8:	009b      	lsls	r3, r3, #2
 80100aa:	4413      	add	r3, r2
 80100ac:	009b      	lsls	r3, r3, #2
 80100ae:	4a13      	ldr	r2, [pc, #76]	@ (80100fc <xTaskRemoveFromEventList+0xb8>)
 80100b0:	441a      	add	r2, r3
 80100b2:	693b      	ldr	r3, [r7, #16]
 80100b4:	3304      	adds	r3, #4
 80100b6:	4619      	mov	r1, r3
 80100b8:	4610      	mov	r0, r2
 80100ba:	f7fd ffe0 	bl	800e07e <vListInsertEnd>
 80100be:	e005      	b.n	80100cc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	3318      	adds	r3, #24
 80100c4:	4619      	mov	r1, r3
 80100c6:	480e      	ldr	r0, [pc, #56]	@ (8010100 <xTaskRemoveFromEventList+0xbc>)
 80100c8:	f7fd ffd9 	bl	800e07e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80100cc:	693b      	ldr	r3, [r7, #16]
 80100ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100d0:	4b0c      	ldr	r3, [pc, #48]	@ (8010104 <xTaskRemoveFromEventList+0xc0>)
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100d6:	429a      	cmp	r2, r3
 80100d8:	d905      	bls.n	80100e6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80100da:	2301      	movs	r3, #1
 80100dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80100de:	4b0a      	ldr	r3, [pc, #40]	@ (8010108 <xTaskRemoveFromEventList+0xc4>)
 80100e0:	2201      	movs	r2, #1
 80100e2:	601a      	str	r2, [r3, #0]
 80100e4:	e001      	b.n	80100ea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80100e6:	2300      	movs	r3, #0
 80100e8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80100ea:	697b      	ldr	r3, [r7, #20]
}
 80100ec:	4618      	mov	r0, r3
 80100ee:	3718      	adds	r7, #24
 80100f0:	46bd      	mov	sp, r7
 80100f2:	bd80      	pop	{r7, pc}
 80100f4:	2000d574 	.word	0x2000d574
 80100f8:	2000d554 	.word	0x2000d554
 80100fc:	2000d07c 	.word	0x2000d07c
 8010100:	2000d50c 	.word	0x2000d50c
 8010104:	2000d078 	.word	0x2000d078
 8010108:	2000d560 	.word	0x2000d560

0801010c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b086      	sub	sp, #24
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8010116:	4b2a      	ldr	r3, [pc, #168]	@ (80101c0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d10b      	bne.n	8010136 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 801011e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010122:	f383 8811 	msr	BASEPRI, r3
 8010126:	f3bf 8f6f 	isb	sy
 801012a:	f3bf 8f4f 	dsb	sy
 801012e:	613b      	str	r3, [r7, #16]
}
 8010130:	bf00      	nop
 8010132:	bf00      	nop
 8010134:	e7fd      	b.n	8010132 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	68db      	ldr	r3, [r3, #12]
 8010144:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d10b      	bne.n	8010164 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 801014c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010150:	f383 8811 	msr	BASEPRI, r3
 8010154:	f3bf 8f6f 	isb	sy
 8010158:	f3bf 8f4f 	dsb	sy
 801015c:	60fb      	str	r3, [r7, #12]
}
 801015e:	bf00      	nop
 8010160:	bf00      	nop
 8010162:	e7fd      	b.n	8010160 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f7fd ffe7 	bl	800e138 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	3304      	adds	r3, #4
 801016e:	4618      	mov	r0, r3
 8010170:	f7fd ffe2 	bl	800e138 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8010174:	697b      	ldr	r3, [r7, #20]
 8010176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010178:	4b12      	ldr	r3, [pc, #72]	@ (80101c4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	429a      	cmp	r2, r3
 801017e:	d903      	bls.n	8010188 <vTaskRemoveFromUnorderedEventList+0x7c>
 8010180:	697b      	ldr	r3, [r7, #20]
 8010182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010184:	4a0f      	ldr	r2, [pc, #60]	@ (80101c4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8010186:	6013      	str	r3, [r2, #0]
 8010188:	697b      	ldr	r3, [r7, #20]
 801018a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801018c:	4613      	mov	r3, r2
 801018e:	009b      	lsls	r3, r3, #2
 8010190:	4413      	add	r3, r2
 8010192:	009b      	lsls	r3, r3, #2
 8010194:	4a0c      	ldr	r2, [pc, #48]	@ (80101c8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8010196:	441a      	add	r2, r3
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	3304      	adds	r3, #4
 801019c:	4619      	mov	r1, r3
 801019e:	4610      	mov	r0, r2
 80101a0:	f7fd ff6d 	bl	800e07e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80101a4:	697b      	ldr	r3, [r7, #20]
 80101a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101a8:	4b08      	ldr	r3, [pc, #32]	@ (80101cc <vTaskRemoveFromUnorderedEventList+0xc0>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d902      	bls.n	80101b8 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80101b2:	4b07      	ldr	r3, [pc, #28]	@ (80101d0 <vTaskRemoveFromUnorderedEventList+0xc4>)
 80101b4:	2201      	movs	r2, #1
 80101b6:	601a      	str	r2, [r3, #0]
	}
}
 80101b8:	bf00      	nop
 80101ba:	3718      	adds	r7, #24
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}
 80101c0:	2000d574 	.word	0x2000d574
 80101c4:	2000d554 	.word	0x2000d554
 80101c8:	2000d07c 	.word	0x2000d07c
 80101cc:	2000d078 	.word	0x2000d078
 80101d0:	2000d560 	.word	0x2000d560

080101d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80101d4:	b480      	push	{r7}
 80101d6:	b083      	sub	sp, #12
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80101dc:	4b06      	ldr	r3, [pc, #24]	@ (80101f8 <vTaskInternalSetTimeOutState+0x24>)
 80101de:	681a      	ldr	r2, [r3, #0]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80101e4:	4b05      	ldr	r3, [pc, #20]	@ (80101fc <vTaskInternalSetTimeOutState+0x28>)
 80101e6:	681a      	ldr	r2, [r3, #0]
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	605a      	str	r2, [r3, #4]
}
 80101ec:	bf00      	nop
 80101ee:	370c      	adds	r7, #12
 80101f0:	46bd      	mov	sp, r7
 80101f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f6:	4770      	bx	lr
 80101f8:	2000d564 	.word	0x2000d564
 80101fc:	2000d550 	.word	0x2000d550

08010200 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b088      	sub	sp, #32
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d10b      	bne.n	8010228 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010214:	f383 8811 	msr	BASEPRI, r3
 8010218:	f3bf 8f6f 	isb	sy
 801021c:	f3bf 8f4f 	dsb	sy
 8010220:	613b      	str	r3, [r7, #16]
}
 8010222:	bf00      	nop
 8010224:	bf00      	nop
 8010226:	e7fd      	b.n	8010224 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d10b      	bne.n	8010246 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801022e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010232:	f383 8811 	msr	BASEPRI, r3
 8010236:	f3bf 8f6f 	isb	sy
 801023a:	f3bf 8f4f 	dsb	sy
 801023e:	60fb      	str	r3, [r7, #12]
}
 8010240:	bf00      	nop
 8010242:	bf00      	nop
 8010244:	e7fd      	b.n	8010242 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8010246:	f001 fa37 	bl	80116b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801024a:	4b1d      	ldr	r3, [pc, #116]	@ (80102c0 <xTaskCheckForTimeOut+0xc0>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	685b      	ldr	r3, [r3, #4]
 8010254:	69ba      	ldr	r2, [r7, #24]
 8010256:	1ad3      	subs	r3, r2, r3
 8010258:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010262:	d102      	bne.n	801026a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010264:	2300      	movs	r3, #0
 8010266:	61fb      	str	r3, [r7, #28]
 8010268:	e023      	b.n	80102b2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681a      	ldr	r2, [r3, #0]
 801026e:	4b15      	ldr	r3, [pc, #84]	@ (80102c4 <xTaskCheckForTimeOut+0xc4>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	429a      	cmp	r2, r3
 8010274:	d007      	beq.n	8010286 <xTaskCheckForTimeOut+0x86>
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	685b      	ldr	r3, [r3, #4]
 801027a:	69ba      	ldr	r2, [r7, #24]
 801027c:	429a      	cmp	r2, r3
 801027e:	d302      	bcc.n	8010286 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010280:	2301      	movs	r3, #1
 8010282:	61fb      	str	r3, [r7, #28]
 8010284:	e015      	b.n	80102b2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	697a      	ldr	r2, [r7, #20]
 801028c:	429a      	cmp	r2, r3
 801028e:	d20b      	bcs.n	80102a8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010290:	683b      	ldr	r3, [r7, #0]
 8010292:	681a      	ldr	r2, [r3, #0]
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	1ad2      	subs	r2, r2, r3
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f7ff ff99 	bl	80101d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80102a2:	2300      	movs	r3, #0
 80102a4:	61fb      	str	r3, [r7, #28]
 80102a6:	e004      	b.n	80102b2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	2200      	movs	r2, #0
 80102ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80102ae:	2301      	movs	r3, #1
 80102b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80102b2:	f001 fa33 	bl	801171c <vPortExitCritical>

	return xReturn;
 80102b6:	69fb      	ldr	r3, [r7, #28]
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	3720      	adds	r7, #32
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}
 80102c0:	2000d550 	.word	0x2000d550
 80102c4:	2000d564 	.word	0x2000d564

080102c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80102c8:	b480      	push	{r7}
 80102ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80102cc:	4b03      	ldr	r3, [pc, #12]	@ (80102dc <vTaskMissedYield+0x14>)
 80102ce:	2201      	movs	r2, #1
 80102d0:	601a      	str	r2, [r3, #0]
}
 80102d2:	bf00      	nop
 80102d4:	46bd      	mov	sp, r7
 80102d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102da:	4770      	bx	lr
 80102dc:	2000d560 	.word	0x2000d560

080102e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b082      	sub	sp, #8
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80102e8:	f000 f852 	bl	8010390 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80102ec:	4b06      	ldr	r3, [pc, #24]	@ (8010308 <prvIdleTask+0x28>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	2b01      	cmp	r3, #1
 80102f2:	d9f9      	bls.n	80102e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80102f4:	4b05      	ldr	r3, [pc, #20]	@ (801030c <prvIdleTask+0x2c>)
 80102f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80102fa:	601a      	str	r2, [r3, #0]
 80102fc:	f3bf 8f4f 	dsb	sy
 8010300:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010304:	e7f0      	b.n	80102e8 <prvIdleTask+0x8>
 8010306:	bf00      	nop
 8010308:	2000d07c 	.word	0x2000d07c
 801030c:	e000ed04 	.word	0xe000ed04

08010310 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b082      	sub	sp, #8
 8010314:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010316:	2300      	movs	r3, #0
 8010318:	607b      	str	r3, [r7, #4]
 801031a:	e00c      	b.n	8010336 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801031c:	687a      	ldr	r2, [r7, #4]
 801031e:	4613      	mov	r3, r2
 8010320:	009b      	lsls	r3, r3, #2
 8010322:	4413      	add	r3, r2
 8010324:	009b      	lsls	r3, r3, #2
 8010326:	4a12      	ldr	r2, [pc, #72]	@ (8010370 <prvInitialiseTaskLists+0x60>)
 8010328:	4413      	add	r3, r2
 801032a:	4618      	mov	r0, r3
 801032c:	f7fd fe7a 	bl	800e024 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	3301      	adds	r3, #1
 8010334:	607b      	str	r3, [r7, #4]
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2b37      	cmp	r3, #55	@ 0x37
 801033a:	d9ef      	bls.n	801031c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801033c:	480d      	ldr	r0, [pc, #52]	@ (8010374 <prvInitialiseTaskLists+0x64>)
 801033e:	f7fd fe71 	bl	800e024 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010342:	480d      	ldr	r0, [pc, #52]	@ (8010378 <prvInitialiseTaskLists+0x68>)
 8010344:	f7fd fe6e 	bl	800e024 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010348:	480c      	ldr	r0, [pc, #48]	@ (801037c <prvInitialiseTaskLists+0x6c>)
 801034a:	f7fd fe6b 	bl	800e024 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801034e:	480c      	ldr	r0, [pc, #48]	@ (8010380 <prvInitialiseTaskLists+0x70>)
 8010350:	f7fd fe68 	bl	800e024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010354:	480b      	ldr	r0, [pc, #44]	@ (8010384 <prvInitialiseTaskLists+0x74>)
 8010356:	f7fd fe65 	bl	800e024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801035a:	4b0b      	ldr	r3, [pc, #44]	@ (8010388 <prvInitialiseTaskLists+0x78>)
 801035c:	4a05      	ldr	r2, [pc, #20]	@ (8010374 <prvInitialiseTaskLists+0x64>)
 801035e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010360:	4b0a      	ldr	r3, [pc, #40]	@ (801038c <prvInitialiseTaskLists+0x7c>)
 8010362:	4a05      	ldr	r2, [pc, #20]	@ (8010378 <prvInitialiseTaskLists+0x68>)
 8010364:	601a      	str	r2, [r3, #0]
}
 8010366:	bf00      	nop
 8010368:	3708      	adds	r7, #8
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}
 801036e:	bf00      	nop
 8010370:	2000d07c 	.word	0x2000d07c
 8010374:	2000d4dc 	.word	0x2000d4dc
 8010378:	2000d4f0 	.word	0x2000d4f0
 801037c:	2000d50c 	.word	0x2000d50c
 8010380:	2000d520 	.word	0x2000d520
 8010384:	2000d538 	.word	0x2000d538
 8010388:	2000d504 	.word	0x2000d504
 801038c:	2000d508 	.word	0x2000d508

08010390 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010396:	e019      	b.n	80103cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010398:	f001 f98e 	bl	80116b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801039c:	4b10      	ldr	r3, [pc, #64]	@ (80103e0 <prvCheckTasksWaitingTermination+0x50>)
 801039e:	68db      	ldr	r3, [r3, #12]
 80103a0:	68db      	ldr	r3, [r3, #12]
 80103a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	3304      	adds	r3, #4
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7fd fec5 	bl	800e138 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80103ae:	4b0d      	ldr	r3, [pc, #52]	@ (80103e4 <prvCheckTasksWaitingTermination+0x54>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	3b01      	subs	r3, #1
 80103b4:	4a0b      	ldr	r2, [pc, #44]	@ (80103e4 <prvCheckTasksWaitingTermination+0x54>)
 80103b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80103b8:	4b0b      	ldr	r3, [pc, #44]	@ (80103e8 <prvCheckTasksWaitingTermination+0x58>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	3b01      	subs	r3, #1
 80103be:	4a0a      	ldr	r2, [pc, #40]	@ (80103e8 <prvCheckTasksWaitingTermination+0x58>)
 80103c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80103c2:	f001 f9ab 	bl	801171c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	f000 f8ae 	bl	8010528 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80103cc:	4b06      	ldr	r3, [pc, #24]	@ (80103e8 <prvCheckTasksWaitingTermination+0x58>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d1e1      	bne.n	8010398 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80103d4:	bf00      	nop
 80103d6:	bf00      	nop
 80103d8:	3708      	adds	r7, #8
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}
 80103de:	bf00      	nop
 80103e0:	2000d520 	.word	0x2000d520
 80103e4:	2000d54c 	.word	0x2000d54c
 80103e8:	2000d534 	.word	0x2000d534

080103ec <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b086      	sub	sp, #24
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	60f8      	str	r0, [r7, #12]
 80103f4:	60b9      	str	r1, [r7, #8]
 80103f6:	607a      	str	r2, [r7, #4]
 80103f8:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d102      	bne.n	8010406 <vTaskGetInfo+0x1a>
 8010400:	4b2c      	ldr	r3, [pc, #176]	@ (80104b4 <vTaskGetInfo+0xc8>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	e000      	b.n	8010408 <vTaskGetInfo+0x1c>
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	697a      	ldr	r2, [r7, #20]
 801040e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8010422:	697b      	ldr	r3, [r7, #20]
 8010424:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 801042a:	697b      	ldr	r3, [r7, #20]
 801042c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8010432:	697b      	ldr	r3, [r7, #20]
 8010434:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8010442:	78fb      	ldrb	r3, [r7, #3]
 8010444:	2b05      	cmp	r3, #5
 8010446:	d01a      	beq.n	801047e <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8010448:	4b1a      	ldr	r3, [pc, #104]	@ (80104b4 <vTaskGetInfo+0xc8>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	697a      	ldr	r2, [r7, #20]
 801044e:	429a      	cmp	r2, r3
 8010450:	d103      	bne.n	801045a <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8010452:	68bb      	ldr	r3, [r7, #8]
 8010454:	2200      	movs	r2, #0
 8010456:	731a      	strb	r2, [r3, #12]
 8010458:	e018      	b.n	801048c <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 801045a:	68bb      	ldr	r3, [r7, #8]
 801045c:	78fa      	ldrb	r2, [r7, #3]
 801045e:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8010460:	78fb      	ldrb	r3, [r7, #3]
 8010462:	2b03      	cmp	r3, #3
 8010464:	d112      	bne.n	801048c <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8010466:	f7ff fa8f 	bl	800f988 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801046a:	697b      	ldr	r3, [r7, #20]
 801046c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801046e:	2b00      	cmp	r3, #0
 8010470:	d002      	beq.n	8010478 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	2202      	movs	r2, #2
 8010476:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8010478:	f7ff fa94 	bl	800f9a4 <xTaskResumeAll>
 801047c:	e006      	b.n	801048c <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 801047e:	6978      	ldr	r0, [r7, #20]
 8010480:	f7ff f804 	bl	800f48c <eTaskGetState>
 8010484:	4603      	mov	r3, r0
 8010486:	461a      	mov	r2, r3
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d009      	beq.n	80104a6 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010496:	4618      	mov	r0, r3
 8010498:	f000 f80e 	bl	80104b8 <prvTaskCheckFreeStackSpace>
 801049c:	4603      	mov	r3, r0
 801049e:	461a      	mov	r2, r3
 80104a0:	68bb      	ldr	r3, [r7, #8]
 80104a2:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 80104a4:	e002      	b.n	80104ac <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	2200      	movs	r2, #0
 80104aa:	841a      	strh	r2, [r3, #32]
	}
 80104ac:	bf00      	nop
 80104ae:	3718      	adds	r7, #24
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}
 80104b4:	2000d078 	.word	0x2000d078

080104b8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80104b8:	b480      	push	{r7}
 80104ba:	b085      	sub	sp, #20
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80104c0:	2300      	movs	r3, #0
 80104c2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80104c4:	e005      	b.n	80104d2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	3301      	adds	r3, #1
 80104ca:	607b      	str	r3, [r7, #4]
			ulCount++;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	3301      	adds	r3, #1
 80104d0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	781b      	ldrb	r3, [r3, #0]
 80104d6:	2ba5      	cmp	r3, #165	@ 0xa5
 80104d8:	d0f5      	beq.n	80104c6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	089b      	lsrs	r3, r3, #2
 80104de:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	b29b      	uxth	r3, r3
	}
 80104e4:	4618      	mov	r0, r3
 80104e6:	3714      	adds	r7, #20
 80104e8:	46bd      	mov	sp, r7
 80104ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ee:	4770      	bx	lr

080104f0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b086      	sub	sp, #24
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d102      	bne.n	8010504 <uxTaskGetStackHighWaterMark+0x14>
 80104fe:	4b09      	ldr	r3, [pc, #36]	@ (8010524 <uxTaskGetStackHighWaterMark+0x34>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	e000      	b.n	8010506 <uxTaskGetStackHighWaterMark+0x16>
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8010508:	697b      	ldr	r3, [r7, #20]
 801050a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801050c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 801050e:	6938      	ldr	r0, [r7, #16]
 8010510:	f7ff ffd2 	bl	80104b8 <prvTaskCheckFreeStackSpace>
 8010514:	4603      	mov	r3, r0
 8010516:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8010518:	68fb      	ldr	r3, [r7, #12]
	}
 801051a:	4618      	mov	r0, r3
 801051c:	3718      	adds	r7, #24
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}
 8010522:	bf00      	nop
 8010524:	2000d078 	.word	0x2000d078

08010528 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010528:	b580      	push	{r7, lr}
 801052a:	b084      	sub	sp, #16
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	335c      	adds	r3, #92	@ 0x5c
 8010534:	4618      	mov	r0, r3
 8010536:	f003 fc1d 	bl	8013d74 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8010540:	2b00      	cmp	r3, #0
 8010542:	d108      	bne.n	8010556 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010548:	4618      	mov	r0, r3
 801054a:	f001 faa5 	bl	8011a98 <vPortFree>
				vPortFree( pxTCB );
 801054e:	6878      	ldr	r0, [r7, #4]
 8010550:	f001 faa2 	bl	8011a98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010554:	e019      	b.n	801058a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801055c:	2b01      	cmp	r3, #1
 801055e:	d103      	bne.n	8010568 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010560:	6878      	ldr	r0, [r7, #4]
 8010562:	f001 fa99 	bl	8011a98 <vPortFree>
	}
 8010566:	e010      	b.n	801058a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801056e:	2b02      	cmp	r3, #2
 8010570:	d00b      	beq.n	801058a <prvDeleteTCB+0x62>
	__asm volatile
 8010572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010576:	f383 8811 	msr	BASEPRI, r3
 801057a:	f3bf 8f6f 	isb	sy
 801057e:	f3bf 8f4f 	dsb	sy
 8010582:	60fb      	str	r3, [r7, #12]
}
 8010584:	bf00      	nop
 8010586:	bf00      	nop
 8010588:	e7fd      	b.n	8010586 <prvDeleteTCB+0x5e>
	}
 801058a:	bf00      	nop
 801058c:	3710      	adds	r7, #16
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
	...

08010594 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010594:	b480      	push	{r7}
 8010596:	b083      	sub	sp, #12
 8010598:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801059a:	4b0c      	ldr	r3, [pc, #48]	@ (80105cc <prvResetNextTaskUnblockTime+0x38>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d104      	bne.n	80105ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80105a4:	4b0a      	ldr	r3, [pc, #40]	@ (80105d0 <prvResetNextTaskUnblockTime+0x3c>)
 80105a6:	f04f 32ff 	mov.w	r2, #4294967295
 80105aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80105ac:	e008      	b.n	80105c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105ae:	4b07      	ldr	r3, [pc, #28]	@ (80105cc <prvResetNextTaskUnblockTime+0x38>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	68db      	ldr	r3, [r3, #12]
 80105b4:	68db      	ldr	r3, [r3, #12]
 80105b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	685b      	ldr	r3, [r3, #4]
 80105bc:	4a04      	ldr	r2, [pc, #16]	@ (80105d0 <prvResetNextTaskUnblockTime+0x3c>)
 80105be:	6013      	str	r3, [r2, #0]
}
 80105c0:	bf00      	nop
 80105c2:	370c      	adds	r7, #12
 80105c4:	46bd      	mov	sp, r7
 80105c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ca:	4770      	bx	lr
 80105cc:	2000d504 	.word	0x2000d504
 80105d0:	2000d56c 	.word	0x2000d56c

080105d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80105d4:	b480      	push	{r7}
 80105d6:	b083      	sub	sp, #12
 80105d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80105da:	4b0b      	ldr	r3, [pc, #44]	@ (8010608 <xTaskGetSchedulerState+0x34>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d102      	bne.n	80105e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80105e2:	2301      	movs	r3, #1
 80105e4:	607b      	str	r3, [r7, #4]
 80105e6:	e008      	b.n	80105fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80105e8:	4b08      	ldr	r3, [pc, #32]	@ (801060c <xTaskGetSchedulerState+0x38>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d102      	bne.n	80105f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80105f0:	2302      	movs	r3, #2
 80105f2:	607b      	str	r3, [r7, #4]
 80105f4:	e001      	b.n	80105fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80105f6:	2300      	movs	r3, #0
 80105f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80105fa:	687b      	ldr	r3, [r7, #4]
	}
 80105fc:	4618      	mov	r0, r3
 80105fe:	370c      	adds	r7, #12
 8010600:	46bd      	mov	sp, r7
 8010602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010606:	4770      	bx	lr
 8010608:	2000d558 	.word	0x2000d558
 801060c:	2000d574 	.word	0x2000d574

08010610 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010610:	b580      	push	{r7, lr}
 8010612:	b084      	sub	sp, #16
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801061c:	2300      	movs	r3, #0
 801061e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d051      	beq.n	80106ca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801062a:	4b2a      	ldr	r3, [pc, #168]	@ (80106d4 <xTaskPriorityInherit+0xc4>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010630:	429a      	cmp	r2, r3
 8010632:	d241      	bcs.n	80106b8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	699b      	ldr	r3, [r3, #24]
 8010638:	2b00      	cmp	r3, #0
 801063a:	db06      	blt.n	801064a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801063c:	4b25      	ldr	r3, [pc, #148]	@ (80106d4 <xTaskPriorityInherit+0xc4>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010642:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	6959      	ldr	r1, [r3, #20]
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010652:	4613      	mov	r3, r2
 8010654:	009b      	lsls	r3, r3, #2
 8010656:	4413      	add	r3, r2
 8010658:	009b      	lsls	r3, r3, #2
 801065a:	4a1f      	ldr	r2, [pc, #124]	@ (80106d8 <xTaskPriorityInherit+0xc8>)
 801065c:	4413      	add	r3, r2
 801065e:	4299      	cmp	r1, r3
 8010660:	d122      	bne.n	80106a8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	3304      	adds	r3, #4
 8010666:	4618      	mov	r0, r3
 8010668:	f7fd fd66 	bl	800e138 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801066c:	4b19      	ldr	r3, [pc, #100]	@ (80106d4 <xTaskPriorityInherit+0xc4>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801067a:	4b18      	ldr	r3, [pc, #96]	@ (80106dc <xTaskPriorityInherit+0xcc>)
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	429a      	cmp	r2, r3
 8010680:	d903      	bls.n	801068a <xTaskPriorityInherit+0x7a>
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010686:	4a15      	ldr	r2, [pc, #84]	@ (80106dc <xTaskPriorityInherit+0xcc>)
 8010688:	6013      	str	r3, [r2, #0]
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801068e:	4613      	mov	r3, r2
 8010690:	009b      	lsls	r3, r3, #2
 8010692:	4413      	add	r3, r2
 8010694:	009b      	lsls	r3, r3, #2
 8010696:	4a10      	ldr	r2, [pc, #64]	@ (80106d8 <xTaskPriorityInherit+0xc8>)
 8010698:	441a      	add	r2, r3
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	3304      	adds	r3, #4
 801069e:	4619      	mov	r1, r3
 80106a0:	4610      	mov	r0, r2
 80106a2:	f7fd fcec 	bl	800e07e <vListInsertEnd>
 80106a6:	e004      	b.n	80106b2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80106a8:	4b0a      	ldr	r3, [pc, #40]	@ (80106d4 <xTaskPriorityInherit+0xc4>)
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80106b2:	2301      	movs	r3, #1
 80106b4:	60fb      	str	r3, [r7, #12]
 80106b6:	e008      	b.n	80106ca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80106bc:	4b05      	ldr	r3, [pc, #20]	@ (80106d4 <xTaskPriorityInherit+0xc4>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d201      	bcs.n	80106ca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80106c6:	2301      	movs	r3, #1
 80106c8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80106ca:	68fb      	ldr	r3, [r7, #12]
	}
 80106cc:	4618      	mov	r0, r3
 80106ce:	3710      	adds	r7, #16
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}
 80106d4:	2000d078 	.word	0x2000d078
 80106d8:	2000d07c 	.word	0x2000d07c
 80106dc:	2000d554 	.word	0x2000d554

080106e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b086      	sub	sp, #24
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80106ec:	2300      	movs	r3, #0
 80106ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d058      	beq.n	80107a8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80106f6:	4b2f      	ldr	r3, [pc, #188]	@ (80107b4 <xTaskPriorityDisinherit+0xd4>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	693a      	ldr	r2, [r7, #16]
 80106fc:	429a      	cmp	r2, r3
 80106fe:	d00b      	beq.n	8010718 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8010700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010704:	f383 8811 	msr	BASEPRI, r3
 8010708:	f3bf 8f6f 	isb	sy
 801070c:	f3bf 8f4f 	dsb	sy
 8010710:	60fb      	str	r3, [r7, #12]
}
 8010712:	bf00      	nop
 8010714:	bf00      	nop
 8010716:	e7fd      	b.n	8010714 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010718:	693b      	ldr	r3, [r7, #16]
 801071a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801071c:	2b00      	cmp	r3, #0
 801071e:	d10b      	bne.n	8010738 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8010720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010724:	f383 8811 	msr	BASEPRI, r3
 8010728:	f3bf 8f6f 	isb	sy
 801072c:	f3bf 8f4f 	dsb	sy
 8010730:	60bb      	str	r3, [r7, #8]
}
 8010732:	bf00      	nop
 8010734:	bf00      	nop
 8010736:	e7fd      	b.n	8010734 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801073c:	1e5a      	subs	r2, r3, #1
 801073e:	693b      	ldr	r3, [r7, #16]
 8010740:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010742:	693b      	ldr	r3, [r7, #16]
 8010744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801074a:	429a      	cmp	r2, r3
 801074c:	d02c      	beq.n	80107a8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801074e:	693b      	ldr	r3, [r7, #16]
 8010750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010752:	2b00      	cmp	r3, #0
 8010754:	d128      	bne.n	80107a8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010756:	693b      	ldr	r3, [r7, #16]
 8010758:	3304      	adds	r3, #4
 801075a:	4618      	mov	r0, r3
 801075c:	f7fd fcec 	bl	800e138 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010760:	693b      	ldr	r3, [r7, #16]
 8010762:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010768:	693b      	ldr	r3, [r7, #16]
 801076a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801076c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010770:	693b      	ldr	r3, [r7, #16]
 8010772:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010778:	4b0f      	ldr	r3, [pc, #60]	@ (80107b8 <xTaskPriorityDisinherit+0xd8>)
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	429a      	cmp	r2, r3
 801077e:	d903      	bls.n	8010788 <xTaskPriorityDisinherit+0xa8>
 8010780:	693b      	ldr	r3, [r7, #16]
 8010782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010784:	4a0c      	ldr	r2, [pc, #48]	@ (80107b8 <xTaskPriorityDisinherit+0xd8>)
 8010786:	6013      	str	r3, [r2, #0]
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801078c:	4613      	mov	r3, r2
 801078e:	009b      	lsls	r3, r3, #2
 8010790:	4413      	add	r3, r2
 8010792:	009b      	lsls	r3, r3, #2
 8010794:	4a09      	ldr	r2, [pc, #36]	@ (80107bc <xTaskPriorityDisinherit+0xdc>)
 8010796:	441a      	add	r2, r3
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	3304      	adds	r3, #4
 801079c:	4619      	mov	r1, r3
 801079e:	4610      	mov	r0, r2
 80107a0:	f7fd fc6d 	bl	800e07e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80107a4:	2301      	movs	r3, #1
 80107a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80107a8:	697b      	ldr	r3, [r7, #20]
	}
 80107aa:	4618      	mov	r0, r3
 80107ac:	3718      	adds	r7, #24
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd80      	pop	{r7, pc}
 80107b2:	bf00      	nop
 80107b4:	2000d078 	.word	0x2000d078
 80107b8:	2000d554 	.word	0x2000d554
 80107bc:	2000d07c 	.word	0x2000d07c

080107c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b088      	sub	sp, #32
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
 80107c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80107ce:	2301      	movs	r3, #1
 80107d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d06c      	beq.n	80108b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80107d8:	69bb      	ldr	r3, [r7, #24]
 80107da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d10b      	bne.n	80107f8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80107e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107e4:	f383 8811 	msr	BASEPRI, r3
 80107e8:	f3bf 8f6f 	isb	sy
 80107ec:	f3bf 8f4f 	dsb	sy
 80107f0:	60fb      	str	r3, [r7, #12]
}
 80107f2:	bf00      	nop
 80107f4:	bf00      	nop
 80107f6:	e7fd      	b.n	80107f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80107f8:	69bb      	ldr	r3, [r7, #24]
 80107fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80107fc:	683a      	ldr	r2, [r7, #0]
 80107fe:	429a      	cmp	r2, r3
 8010800:	d902      	bls.n	8010808 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	61fb      	str	r3, [r7, #28]
 8010806:	e002      	b.n	801080e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010808:	69bb      	ldr	r3, [r7, #24]
 801080a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801080c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801080e:	69bb      	ldr	r3, [r7, #24]
 8010810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010812:	69fa      	ldr	r2, [r7, #28]
 8010814:	429a      	cmp	r2, r3
 8010816:	d04c      	beq.n	80108b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010818:	69bb      	ldr	r3, [r7, #24]
 801081a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801081c:	697a      	ldr	r2, [r7, #20]
 801081e:	429a      	cmp	r2, r3
 8010820:	d147      	bne.n	80108b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010822:	4b26      	ldr	r3, [pc, #152]	@ (80108bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	69ba      	ldr	r2, [r7, #24]
 8010828:	429a      	cmp	r2, r3
 801082a:	d10b      	bne.n	8010844 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 801082c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010830:	f383 8811 	msr	BASEPRI, r3
 8010834:	f3bf 8f6f 	isb	sy
 8010838:	f3bf 8f4f 	dsb	sy
 801083c:	60bb      	str	r3, [r7, #8]
}
 801083e:	bf00      	nop
 8010840:	bf00      	nop
 8010842:	e7fd      	b.n	8010840 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010844:	69bb      	ldr	r3, [r7, #24]
 8010846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010848:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801084a:	69bb      	ldr	r3, [r7, #24]
 801084c:	69fa      	ldr	r2, [r7, #28]
 801084e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010850:	69bb      	ldr	r3, [r7, #24]
 8010852:	699b      	ldr	r3, [r3, #24]
 8010854:	2b00      	cmp	r3, #0
 8010856:	db04      	blt.n	8010862 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010858:	69fb      	ldr	r3, [r7, #28]
 801085a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801085e:	69bb      	ldr	r3, [r7, #24]
 8010860:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010862:	69bb      	ldr	r3, [r7, #24]
 8010864:	6959      	ldr	r1, [r3, #20]
 8010866:	693a      	ldr	r2, [r7, #16]
 8010868:	4613      	mov	r3, r2
 801086a:	009b      	lsls	r3, r3, #2
 801086c:	4413      	add	r3, r2
 801086e:	009b      	lsls	r3, r3, #2
 8010870:	4a13      	ldr	r2, [pc, #76]	@ (80108c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010872:	4413      	add	r3, r2
 8010874:	4299      	cmp	r1, r3
 8010876:	d11c      	bne.n	80108b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010878:	69bb      	ldr	r3, [r7, #24]
 801087a:	3304      	adds	r3, #4
 801087c:	4618      	mov	r0, r3
 801087e:	f7fd fc5b 	bl	800e138 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010882:	69bb      	ldr	r3, [r7, #24]
 8010884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010886:	4b0f      	ldr	r3, [pc, #60]	@ (80108c4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	429a      	cmp	r2, r3
 801088c:	d903      	bls.n	8010896 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 801088e:	69bb      	ldr	r3, [r7, #24]
 8010890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010892:	4a0c      	ldr	r2, [pc, #48]	@ (80108c4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010894:	6013      	str	r3, [r2, #0]
 8010896:	69bb      	ldr	r3, [r7, #24]
 8010898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801089a:	4613      	mov	r3, r2
 801089c:	009b      	lsls	r3, r3, #2
 801089e:	4413      	add	r3, r2
 80108a0:	009b      	lsls	r3, r3, #2
 80108a2:	4a07      	ldr	r2, [pc, #28]	@ (80108c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80108a4:	441a      	add	r2, r3
 80108a6:	69bb      	ldr	r3, [r7, #24]
 80108a8:	3304      	adds	r3, #4
 80108aa:	4619      	mov	r1, r3
 80108ac:	4610      	mov	r0, r2
 80108ae:	f7fd fbe6 	bl	800e07e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80108b2:	bf00      	nop
 80108b4:	3720      	adds	r7, #32
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}
 80108ba:	bf00      	nop
 80108bc:	2000d078 	.word	0x2000d078
 80108c0:	2000d07c 	.word	0x2000d07c
 80108c4:	2000d554 	.word	0x2000d554

080108c8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80108c8:	b480      	push	{r7}
 80108ca:	b083      	sub	sp, #12
 80108cc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80108ce:	4b09      	ldr	r3, [pc, #36]	@ (80108f4 <uxTaskResetEventItemValue+0x2c>)
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	699b      	ldr	r3, [r3, #24]
 80108d4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108d6:	4b07      	ldr	r3, [pc, #28]	@ (80108f4 <uxTaskResetEventItemValue+0x2c>)
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108dc:	4b05      	ldr	r3, [pc, #20]	@ (80108f4 <uxTaskResetEventItemValue+0x2c>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80108e4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80108e6:	687b      	ldr	r3, [r7, #4]
}
 80108e8:	4618      	mov	r0, r3
 80108ea:	370c      	adds	r7, #12
 80108ec:	46bd      	mov	sp, r7
 80108ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f2:	4770      	bx	lr
 80108f4:	2000d078 	.word	0x2000d078

080108f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80108f8:	b480      	push	{r7}
 80108fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80108fc:	4b07      	ldr	r3, [pc, #28]	@ (801091c <pvTaskIncrementMutexHeldCount+0x24>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d004      	beq.n	801090e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010904:	4b05      	ldr	r3, [pc, #20]	@ (801091c <pvTaskIncrementMutexHeldCount+0x24>)
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801090a:	3201      	adds	r2, #1
 801090c:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 801090e:	4b03      	ldr	r3, [pc, #12]	@ (801091c <pvTaskIncrementMutexHeldCount+0x24>)
 8010910:	681b      	ldr	r3, [r3, #0]
	}
 8010912:	4618      	mov	r0, r3
 8010914:	46bd      	mov	sp, r7
 8010916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091a:	4770      	bx	lr
 801091c:	2000d078 	.word	0x2000d078

08010920 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8010920:	b580      	push	{r7, lr}
 8010922:	b084      	sub	sp, #16
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
 8010928:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801092a:	f000 fec5 	bl	80116b8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801092e:	4b20      	ldr	r3, [pc, #128]	@ (80109b0 <ulTaskNotifyTake+0x90>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010936:	2b00      	cmp	r3, #0
 8010938:	d113      	bne.n	8010962 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801093a:	4b1d      	ldr	r3, [pc, #116]	@ (80109b0 <ulTaskNotifyTake+0x90>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	2201      	movs	r2, #1
 8010940:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac

				if( xTicksToWait > ( TickType_t ) 0 )
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d00b      	beq.n	8010962 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801094a:	2101      	movs	r1, #1
 801094c:	6838      	ldr	r0, [r7, #0]
 801094e:	f000 f955 	bl	8010bfc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010952:	4b18      	ldr	r3, [pc, #96]	@ (80109b4 <ulTaskNotifyTake+0x94>)
 8010954:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010958:	601a      	str	r2, [r3, #0]
 801095a:	f3bf 8f4f 	dsb	sy
 801095e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010962:	f000 fedb 	bl	801171c <vPortExitCritical>

		taskENTER_CRITICAL();
 8010966:	f000 fea7 	bl	80116b8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801096a:	4b11      	ldr	r3, [pc, #68]	@ (80109b0 <ulTaskNotifyTake+0x90>)
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010972:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d00e      	beq.n	8010998 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d005      	beq.n	801098c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8010980:	4b0b      	ldr	r3, [pc, #44]	@ (80109b0 <ulTaskNotifyTake+0x90>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	2200      	movs	r2, #0
 8010986:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 801098a:	e005      	b.n	8010998 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 801098c:	4b08      	ldr	r3, [pc, #32]	@ (80109b0 <ulTaskNotifyTake+0x90>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	68fa      	ldr	r2, [r7, #12]
 8010992:	3a01      	subs	r2, #1
 8010994:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010998:	4b05      	ldr	r3, [pc, #20]	@ (80109b0 <ulTaskNotifyTake+0x90>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	2200      	movs	r2, #0
 801099e:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
		}
		taskEXIT_CRITICAL();
 80109a2:	f000 febb 	bl	801171c <vPortExitCritical>

		return ulReturn;
 80109a6:	68fb      	ldr	r3, [r7, #12]
	}
 80109a8:	4618      	mov	r0, r3
 80109aa:	3710      	adds	r7, #16
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}
 80109b0:	2000d078 	.word	0x2000d078
 80109b4:	e000ed04 	.word	0xe000ed04

080109b8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b086      	sub	sp, #24
 80109bc:	af00      	add	r7, sp, #0
 80109be:	60f8      	str	r0, [r7, #12]
 80109c0:	60b9      	str	r1, [r7, #8]
 80109c2:	607a      	str	r2, [r7, #4]
 80109c4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80109c6:	f000 fe77 	bl	80116b8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80109ca:	4b29      	ldr	r3, [pc, #164]	@ (8010a70 <xTaskNotifyWait+0xb8>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80109d2:	b2db      	uxtb	r3, r3
 80109d4:	2b02      	cmp	r3, #2
 80109d6:	d01c      	beq.n	8010a12 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80109d8:	4b25      	ldr	r3, [pc, #148]	@ (8010a70 <xTaskNotifyWait+0xb8>)
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	f8d3 10a8 	ldr.w	r1, [r3, #168]	@ 0xa8
 80109e0:	68fa      	ldr	r2, [r7, #12]
 80109e2:	43d2      	mvns	r2, r2
 80109e4:	400a      	ands	r2, r1
 80109e6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80109ea:	4b21      	ldr	r3, [pc, #132]	@ (8010a70 <xTaskNotifyWait+0xb8>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	2201      	movs	r2, #1
 80109f0:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac

				if( xTicksToWait > ( TickType_t ) 0 )
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d00b      	beq.n	8010a12 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80109fa:	2101      	movs	r1, #1
 80109fc:	6838      	ldr	r0, [r7, #0]
 80109fe:	f000 f8fd 	bl	8010bfc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010a02:	4b1c      	ldr	r3, [pc, #112]	@ (8010a74 <xTaskNotifyWait+0xbc>)
 8010a04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010a08:	601a      	str	r2, [r3, #0]
 8010a0a:	f3bf 8f4f 	dsb	sy
 8010a0e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010a12:	f000 fe83 	bl	801171c <vPortExitCritical>

		taskENTER_CRITICAL();
 8010a16:	f000 fe4f 	bl	80116b8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d005      	beq.n	8010a2c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8010a20:	4b13      	ldr	r3, [pc, #76]	@ (8010a70 <xTaskNotifyWait+0xb8>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010a2c:	4b10      	ldr	r3, [pc, #64]	@ (8010a70 <xTaskNotifyWait+0xb8>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010a34:	b2db      	uxtb	r3, r3
 8010a36:	2b02      	cmp	r3, #2
 8010a38:	d002      	beq.n	8010a40 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	617b      	str	r3, [r7, #20]
 8010a3e:	e00a      	b.n	8010a56 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8010a40:	4b0b      	ldr	r3, [pc, #44]	@ (8010a70 <xTaskNotifyWait+0xb8>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	f8d3 10a8 	ldr.w	r1, [r3, #168]	@ 0xa8
 8010a48:	68ba      	ldr	r2, [r7, #8]
 8010a4a:	43d2      	mvns	r2, r2
 8010a4c:	400a      	ands	r2, r1
 8010a4e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
				xReturn = pdTRUE;
 8010a52:	2301      	movs	r3, #1
 8010a54:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010a56:	4b06      	ldr	r3, [pc, #24]	@ (8010a70 <xTaskNotifyWait+0xb8>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
		}
		taskEXIT_CRITICAL();
 8010a60:	f000 fe5c 	bl	801171c <vPortExitCritical>

		return xReturn;
 8010a64:	697b      	ldr	r3, [r7, #20]
	}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3718      	adds	r7, #24
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}
 8010a6e:	bf00      	nop
 8010a70:	2000d078 	.word	0x2000d078
 8010a74:	e000ed04 	.word	0xe000ed04

08010a78 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b08a      	sub	sp, #40	@ 0x28
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	60f8      	str	r0, [r7, #12]
 8010a80:	60b9      	str	r1, [r7, #8]
 8010a82:	603b      	str	r3, [r7, #0]
 8010a84:	4613      	mov	r3, r2
 8010a86:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010a88:	2301      	movs	r3, #1
 8010a8a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d10b      	bne.n	8010aaa <xTaskGenericNotify+0x32>
	__asm volatile
 8010a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a96:	f383 8811 	msr	BASEPRI, r3
 8010a9a:	f3bf 8f6f 	isb	sy
 8010a9e:	f3bf 8f4f 	dsb	sy
 8010aa2:	61bb      	str	r3, [r7, #24]
}
 8010aa4:	bf00      	nop
 8010aa6:	bf00      	nop
 8010aa8:	e7fd      	b.n	8010aa6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8010aae:	f000 fe03 	bl	80116b8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d004      	beq.n	8010ac2 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010ab8:	6a3b      	ldr	r3, [r7, #32]
 8010aba:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010ac2:	6a3b      	ldr	r3, [r7, #32]
 8010ac4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010ac8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010aca:	6a3b      	ldr	r3, [r7, #32]
 8010acc:	2202      	movs	r2, #2
 8010ace:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac

			switch( eAction )
 8010ad2:	79fb      	ldrb	r3, [r7, #7]
 8010ad4:	2b04      	cmp	r3, #4
 8010ad6:	d82e      	bhi.n	8010b36 <xTaskGenericNotify+0xbe>
 8010ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8010ae0 <xTaskGenericNotify+0x68>)
 8010ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ade:	bf00      	nop
 8010ae0:	08010b5b 	.word	0x08010b5b
 8010ae4:	08010af5 	.word	0x08010af5
 8010ae8:	08010b07 	.word	0x08010b07
 8010aec:	08010b17 	.word	0x08010b17
 8010af0:	08010b21 	.word	0x08010b21
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010af4:	6a3b      	ldr	r3, [r7, #32]
 8010af6:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	431a      	orrs	r2, r3
 8010afe:	6a3b      	ldr	r3, [r7, #32]
 8010b00:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 8010b04:	e02c      	b.n	8010b60 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010b06:	6a3b      	ldr	r3, [r7, #32]
 8010b08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010b0c:	1c5a      	adds	r2, r3, #1
 8010b0e:	6a3b      	ldr	r3, [r7, #32]
 8010b10:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 8010b14:	e024      	b.n	8010b60 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010b16:	6a3b      	ldr	r3, [r7, #32]
 8010b18:	68ba      	ldr	r2, [r7, #8]
 8010b1a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 8010b1e:	e01f      	b.n	8010b60 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010b20:	7ffb      	ldrb	r3, [r7, #31]
 8010b22:	2b02      	cmp	r3, #2
 8010b24:	d004      	beq.n	8010b30 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010b26:	6a3b      	ldr	r3, [r7, #32]
 8010b28:	68ba      	ldr	r2, [r7, #8]
 8010b2a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010b2e:	e017      	b.n	8010b60 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8010b30:	2300      	movs	r3, #0
 8010b32:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8010b34:	e014      	b.n	8010b60 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010b36:	6a3b      	ldr	r3, [r7, #32]
 8010b38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b40:	d00d      	beq.n	8010b5e <xTaskGenericNotify+0xe6>
	__asm volatile
 8010b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b46:	f383 8811 	msr	BASEPRI, r3
 8010b4a:	f3bf 8f6f 	isb	sy
 8010b4e:	f3bf 8f4f 	dsb	sy
 8010b52:	617b      	str	r3, [r7, #20]
}
 8010b54:	bf00      	nop
 8010b56:	bf00      	nop
 8010b58:	e7fd      	b.n	8010b56 <xTaskGenericNotify+0xde>
					break;
 8010b5a:	bf00      	nop
 8010b5c:	e000      	b.n	8010b60 <xTaskGenericNotify+0xe8>

					break;
 8010b5e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010b60:	7ffb      	ldrb	r3, [r7, #31]
 8010b62:	2b01      	cmp	r3, #1
 8010b64:	d13b      	bne.n	8010bde <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010b66:	6a3b      	ldr	r3, [r7, #32]
 8010b68:	3304      	adds	r3, #4
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7fd fae4 	bl	800e138 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010b70:	6a3b      	ldr	r3, [r7, #32]
 8010b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b74:	4b1d      	ldr	r3, [pc, #116]	@ (8010bec <xTaskGenericNotify+0x174>)
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	d903      	bls.n	8010b84 <xTaskGenericNotify+0x10c>
 8010b7c:	6a3b      	ldr	r3, [r7, #32]
 8010b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b80:	4a1a      	ldr	r2, [pc, #104]	@ (8010bec <xTaskGenericNotify+0x174>)
 8010b82:	6013      	str	r3, [r2, #0]
 8010b84:	6a3b      	ldr	r3, [r7, #32]
 8010b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b88:	4613      	mov	r3, r2
 8010b8a:	009b      	lsls	r3, r3, #2
 8010b8c:	4413      	add	r3, r2
 8010b8e:	009b      	lsls	r3, r3, #2
 8010b90:	4a17      	ldr	r2, [pc, #92]	@ (8010bf0 <xTaskGenericNotify+0x178>)
 8010b92:	441a      	add	r2, r3
 8010b94:	6a3b      	ldr	r3, [r7, #32]
 8010b96:	3304      	adds	r3, #4
 8010b98:	4619      	mov	r1, r3
 8010b9a:	4610      	mov	r0, r2
 8010b9c:	f7fd fa6f 	bl	800e07e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010ba0:	6a3b      	ldr	r3, [r7, #32]
 8010ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d00b      	beq.n	8010bc0 <xTaskGenericNotify+0x148>
	__asm volatile
 8010ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bac:	f383 8811 	msr	BASEPRI, r3
 8010bb0:	f3bf 8f6f 	isb	sy
 8010bb4:	f3bf 8f4f 	dsb	sy
 8010bb8:	613b      	str	r3, [r7, #16]
}
 8010bba:	bf00      	nop
 8010bbc:	bf00      	nop
 8010bbe:	e7fd      	b.n	8010bbc <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010bc0:	6a3b      	ldr	r3, [r7, #32]
 8010bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8010bf4 <xTaskGenericNotify+0x17c>)
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	d907      	bls.n	8010bde <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8010bce:	4b0a      	ldr	r3, [pc, #40]	@ (8010bf8 <xTaskGenericNotify+0x180>)
 8010bd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010bd4:	601a      	str	r2, [r3, #0]
 8010bd6:	f3bf 8f4f 	dsb	sy
 8010bda:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010bde:	f000 fd9d 	bl	801171c <vPortExitCritical>

		return xReturn;
 8010be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8010be4:	4618      	mov	r0, r3
 8010be6:	3728      	adds	r7, #40	@ 0x28
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}
 8010bec:	2000d554 	.word	0x2000d554
 8010bf0:	2000d07c 	.word	0x2000d07c
 8010bf4:	2000d078 	.word	0x2000d078
 8010bf8:	e000ed04 	.word	0xe000ed04

08010bfc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b084      	sub	sp, #16
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
 8010c04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010c06:	4b21      	ldr	r3, [pc, #132]	@ (8010c8c <prvAddCurrentTaskToDelayedList+0x90>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010c0c:	4b20      	ldr	r3, [pc, #128]	@ (8010c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	3304      	adds	r3, #4
 8010c12:	4618      	mov	r0, r3
 8010c14:	f7fd fa90 	bl	800e138 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c1e:	d10a      	bne.n	8010c36 <prvAddCurrentTaskToDelayedList+0x3a>
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d007      	beq.n	8010c36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c26:	4b1a      	ldr	r3, [pc, #104]	@ (8010c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	3304      	adds	r3, #4
 8010c2c:	4619      	mov	r1, r3
 8010c2e:	4819      	ldr	r0, [pc, #100]	@ (8010c94 <prvAddCurrentTaskToDelayedList+0x98>)
 8010c30:	f7fd fa25 	bl	800e07e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010c34:	e026      	b.n	8010c84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010c36:	68fa      	ldr	r2, [r7, #12]
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	4413      	add	r3, r2
 8010c3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010c3e:	4b14      	ldr	r3, [pc, #80]	@ (8010c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	68ba      	ldr	r2, [r7, #8]
 8010c44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010c46:	68ba      	ldr	r2, [r7, #8]
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	429a      	cmp	r2, r3
 8010c4c:	d209      	bcs.n	8010c62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c4e:	4b12      	ldr	r3, [pc, #72]	@ (8010c98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010c50:	681a      	ldr	r2, [r3, #0]
 8010c52:	4b0f      	ldr	r3, [pc, #60]	@ (8010c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	3304      	adds	r3, #4
 8010c58:	4619      	mov	r1, r3
 8010c5a:	4610      	mov	r0, r2
 8010c5c:	f7fd fa33 	bl	800e0c6 <vListInsert>
}
 8010c60:	e010      	b.n	8010c84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c62:	4b0e      	ldr	r3, [pc, #56]	@ (8010c9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8010c64:	681a      	ldr	r2, [r3, #0]
 8010c66:	4b0a      	ldr	r3, [pc, #40]	@ (8010c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	3304      	adds	r3, #4
 8010c6c:	4619      	mov	r1, r3
 8010c6e:	4610      	mov	r0, r2
 8010c70:	f7fd fa29 	bl	800e0c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010c74:	4b0a      	ldr	r3, [pc, #40]	@ (8010ca0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	68ba      	ldr	r2, [r7, #8]
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	d202      	bcs.n	8010c84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010c7e:	4a08      	ldr	r2, [pc, #32]	@ (8010ca0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010c80:	68bb      	ldr	r3, [r7, #8]
 8010c82:	6013      	str	r3, [r2, #0]
}
 8010c84:	bf00      	nop
 8010c86:	3710      	adds	r7, #16
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}
 8010c8c:	2000d550 	.word	0x2000d550
 8010c90:	2000d078 	.word	0x2000d078
 8010c94:	2000d538 	.word	0x2000d538
 8010c98:	2000d508 	.word	0x2000d508
 8010c9c:	2000d504 	.word	0x2000d504
 8010ca0:	2000d56c 	.word	0x2000d56c

08010ca4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b08a      	sub	sp, #40	@ 0x28
 8010ca8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010caa:	2300      	movs	r3, #0
 8010cac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010cae:	f000 fb71 	bl	8011394 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8010d28 <xTimerCreateTimerTask+0x84>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d021      	beq.n	8010cfe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010cc2:	1d3a      	adds	r2, r7, #4
 8010cc4:	f107 0108 	add.w	r1, r7, #8
 8010cc8:	f107 030c 	add.w	r3, r7, #12
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7fc ffd3 	bl	800dc78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010cd2:	6879      	ldr	r1, [r7, #4]
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	68fa      	ldr	r2, [r7, #12]
 8010cd8:	9202      	str	r2, [sp, #8]
 8010cda:	9301      	str	r3, [sp, #4]
 8010cdc:	2302      	movs	r3, #2
 8010cde:	9300      	str	r3, [sp, #0]
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	460a      	mov	r2, r1
 8010ce4:	4911      	ldr	r1, [pc, #68]	@ (8010d2c <xTimerCreateTimerTask+0x88>)
 8010ce6:	4812      	ldr	r0, [pc, #72]	@ (8010d30 <xTimerCreateTimerTask+0x8c>)
 8010ce8:	f7fe f962 	bl	800efb0 <xTaskCreateStatic>
 8010cec:	4603      	mov	r3, r0
 8010cee:	4a11      	ldr	r2, [pc, #68]	@ (8010d34 <xTimerCreateTimerTask+0x90>)
 8010cf0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010cf2:	4b10      	ldr	r3, [pc, #64]	@ (8010d34 <xTimerCreateTimerTask+0x90>)
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d001      	beq.n	8010cfe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010cfe:	697b      	ldr	r3, [r7, #20]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d10b      	bne.n	8010d1c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8010d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d08:	f383 8811 	msr	BASEPRI, r3
 8010d0c:	f3bf 8f6f 	isb	sy
 8010d10:	f3bf 8f4f 	dsb	sy
 8010d14:	613b      	str	r3, [r7, #16]
}
 8010d16:	bf00      	nop
 8010d18:	bf00      	nop
 8010d1a:	e7fd      	b.n	8010d18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010d1c:	697b      	ldr	r3, [r7, #20]
}
 8010d1e:	4618      	mov	r0, r3
 8010d20:	3718      	adds	r7, #24
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}
 8010d26:	bf00      	nop
 8010d28:	2000d5b0 	.word	0x2000d5b0
 8010d2c:	080189c8 	.word	0x080189c8
 8010d30:	08010f2d 	.word	0x08010f2d
 8010d34:	2000d5b4 	.word	0x2000d5b4

08010d38 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b088      	sub	sp, #32
 8010d3c:	af02      	add	r7, sp, #8
 8010d3e:	60f8      	str	r0, [r7, #12]
 8010d40:	60b9      	str	r1, [r7, #8]
 8010d42:	607a      	str	r2, [r7, #4]
 8010d44:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8010d46:	202c      	movs	r0, #44	@ 0x2c
 8010d48:	f000 fdd8 	bl	80118fc <pvPortMalloc>
 8010d4c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8010d4e:	697b      	ldr	r3, [r7, #20]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d00d      	beq.n	8010d70 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8010d54:	697b      	ldr	r3, [r7, #20]
 8010d56:	2200      	movs	r2, #0
 8010d58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	9301      	str	r3, [sp, #4]
 8010d60:	6a3b      	ldr	r3, [r7, #32]
 8010d62:	9300      	str	r3, [sp, #0]
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	687a      	ldr	r2, [r7, #4]
 8010d68:	68b9      	ldr	r1, [r7, #8]
 8010d6a:	68f8      	ldr	r0, [r7, #12]
 8010d6c:	f000 f805 	bl	8010d7a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010d70:	697b      	ldr	r3, [r7, #20]
	}
 8010d72:	4618      	mov	r0, r3
 8010d74:	3718      	adds	r7, #24
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}

08010d7a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8010d7a:	b580      	push	{r7, lr}
 8010d7c:	b086      	sub	sp, #24
 8010d7e:	af00      	add	r7, sp, #0
 8010d80:	60f8      	str	r0, [r7, #12]
 8010d82:	60b9      	str	r1, [r7, #8]
 8010d84:	607a      	str	r2, [r7, #4]
 8010d86:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8010d88:	68bb      	ldr	r3, [r7, #8]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d10b      	bne.n	8010da6 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8010d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d92:	f383 8811 	msr	BASEPRI, r3
 8010d96:	f3bf 8f6f 	isb	sy
 8010d9a:	f3bf 8f4f 	dsb	sy
 8010d9e:	617b      	str	r3, [r7, #20]
}
 8010da0:	bf00      	nop
 8010da2:	bf00      	nop
 8010da4:	e7fd      	b.n	8010da2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8010da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d01e      	beq.n	8010dea <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8010dac:	f000 faf2 	bl	8011394 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8010db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010db2:	68fa      	ldr	r2, [r7, #12]
 8010db4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8010db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010db8:	68ba      	ldr	r2, [r7, #8]
 8010dba:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8010dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dbe:	683a      	ldr	r2, [r7, #0]
 8010dc0:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8010dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dc4:	6a3a      	ldr	r2, [r7, #32]
 8010dc6:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8010dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dca:	3304      	adds	r3, #4
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f7fd f949 	bl	800e064 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d008      	beq.n	8010dea <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8010dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010dde:	f043 0304 	orr.w	r3, r3, #4
 8010de2:	b2da      	uxtb	r2, r3
 8010de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010de6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8010dea:	bf00      	nop
 8010dec:	3718      	adds	r7, #24
 8010dee:	46bd      	mov	sp, r7
 8010df0:	bd80      	pop	{r7, pc}
	...

08010df4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b08a      	sub	sp, #40	@ 0x28
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	60f8      	str	r0, [r7, #12]
 8010dfc:	60b9      	str	r1, [r7, #8]
 8010dfe:	607a      	str	r2, [r7, #4]
 8010e00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010e02:	2300      	movs	r3, #0
 8010e04:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d10b      	bne.n	8010e24 <xTimerGenericCommand+0x30>
	__asm volatile
 8010e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e10:	f383 8811 	msr	BASEPRI, r3
 8010e14:	f3bf 8f6f 	isb	sy
 8010e18:	f3bf 8f4f 	dsb	sy
 8010e1c:	623b      	str	r3, [r7, #32]
}
 8010e1e:	bf00      	nop
 8010e20:	bf00      	nop
 8010e22:	e7fd      	b.n	8010e20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010e24:	4b19      	ldr	r3, [pc, #100]	@ (8010e8c <xTimerGenericCommand+0x98>)
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d02a      	beq.n	8010e82 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010e2c:	68bb      	ldr	r3, [r7, #8]
 8010e2e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	2b05      	cmp	r3, #5
 8010e3c:	dc18      	bgt.n	8010e70 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010e3e:	f7ff fbc9 	bl	80105d4 <xTaskGetSchedulerState>
 8010e42:	4603      	mov	r3, r0
 8010e44:	2b02      	cmp	r3, #2
 8010e46:	d109      	bne.n	8010e5c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010e48:	4b10      	ldr	r3, [pc, #64]	@ (8010e8c <xTimerGenericCommand+0x98>)
 8010e4a:	6818      	ldr	r0, [r3, #0]
 8010e4c:	f107 0110 	add.w	r1, r7, #16
 8010e50:	2300      	movs	r3, #0
 8010e52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e54:	f7fd fb12 	bl	800e47c <xQueueGenericSend>
 8010e58:	6278      	str	r0, [r7, #36]	@ 0x24
 8010e5a:	e012      	b.n	8010e82 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8010e8c <xTimerGenericCommand+0x98>)
 8010e5e:	6818      	ldr	r0, [r3, #0]
 8010e60:	f107 0110 	add.w	r1, r7, #16
 8010e64:	2300      	movs	r3, #0
 8010e66:	2200      	movs	r2, #0
 8010e68:	f7fd fb08 	bl	800e47c <xQueueGenericSend>
 8010e6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8010e6e:	e008      	b.n	8010e82 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010e70:	4b06      	ldr	r3, [pc, #24]	@ (8010e8c <xTimerGenericCommand+0x98>)
 8010e72:	6818      	ldr	r0, [r3, #0]
 8010e74:	f107 0110 	add.w	r1, r7, #16
 8010e78:	2300      	movs	r3, #0
 8010e7a:	683a      	ldr	r2, [r7, #0]
 8010e7c:	f7fd fc00 	bl	800e680 <xQueueGenericSendFromISR>
 8010e80:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010e84:	4618      	mov	r0, r3
 8010e86:	3728      	adds	r7, #40	@ 0x28
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd80      	pop	{r7, pc}
 8010e8c:	2000d5b0 	.word	0x2000d5b0

08010e90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b088      	sub	sp, #32
 8010e94:	af02      	add	r7, sp, #8
 8010e96:	6078      	str	r0, [r7, #4]
 8010e98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e9a:	4b23      	ldr	r3, [pc, #140]	@ (8010f28 <prvProcessExpiredTimer+0x98>)
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	68db      	ldr	r3, [r3, #12]
 8010ea0:	68db      	ldr	r3, [r3, #12]
 8010ea2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ea4:	697b      	ldr	r3, [r7, #20]
 8010ea6:	3304      	adds	r3, #4
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7fd f945 	bl	800e138 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010eae:	697b      	ldr	r3, [r7, #20]
 8010eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010eb4:	f003 0304 	and.w	r3, r3, #4
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d023      	beq.n	8010f04 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010ebc:	697b      	ldr	r3, [r7, #20]
 8010ebe:	699a      	ldr	r2, [r3, #24]
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	18d1      	adds	r1, r2, r3
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	683a      	ldr	r2, [r7, #0]
 8010ec8:	6978      	ldr	r0, [r7, #20]
 8010eca:	f000 f8d5 	bl	8011078 <prvInsertTimerInActiveList>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d020      	beq.n	8010f16 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	9300      	str	r3, [sp, #0]
 8010ed8:	2300      	movs	r3, #0
 8010eda:	687a      	ldr	r2, [r7, #4]
 8010edc:	2100      	movs	r1, #0
 8010ede:	6978      	ldr	r0, [r7, #20]
 8010ee0:	f7ff ff88 	bl	8010df4 <xTimerGenericCommand>
 8010ee4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010ee6:	693b      	ldr	r3, [r7, #16]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d114      	bne.n	8010f16 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8010eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ef0:	f383 8811 	msr	BASEPRI, r3
 8010ef4:	f3bf 8f6f 	isb	sy
 8010ef8:	f3bf 8f4f 	dsb	sy
 8010efc:	60fb      	str	r3, [r7, #12]
}
 8010efe:	bf00      	nop
 8010f00:	bf00      	nop
 8010f02:	e7fd      	b.n	8010f00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010f04:	697b      	ldr	r3, [r7, #20]
 8010f06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f0a:	f023 0301 	bic.w	r3, r3, #1
 8010f0e:	b2da      	uxtb	r2, r3
 8010f10:	697b      	ldr	r3, [r7, #20]
 8010f12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010f16:	697b      	ldr	r3, [r7, #20]
 8010f18:	6a1b      	ldr	r3, [r3, #32]
 8010f1a:	6978      	ldr	r0, [r7, #20]
 8010f1c:	4798      	blx	r3
}
 8010f1e:	bf00      	nop
 8010f20:	3718      	adds	r7, #24
 8010f22:	46bd      	mov	sp, r7
 8010f24:	bd80      	pop	{r7, pc}
 8010f26:	bf00      	nop
 8010f28:	2000d5a8 	.word	0x2000d5a8

08010f2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b084      	sub	sp, #16
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010f34:	f107 0308 	add.w	r3, r7, #8
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f000 f859 	bl	8010ff0 <prvGetNextExpireTime>
 8010f3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	4619      	mov	r1, r3
 8010f44:	68f8      	ldr	r0, [r7, #12]
 8010f46:	f000 f805 	bl	8010f54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010f4a:	f000 f8d7 	bl	80110fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010f4e:	bf00      	nop
 8010f50:	e7f0      	b.n	8010f34 <prvTimerTask+0x8>
	...

08010f54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b084      	sub	sp, #16
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
 8010f5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010f5e:	f7fe fd13 	bl	800f988 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010f62:	f107 0308 	add.w	r3, r7, #8
 8010f66:	4618      	mov	r0, r3
 8010f68:	f000 f866 	bl	8011038 <prvSampleTimeNow>
 8010f6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d130      	bne.n	8010fd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010f74:	683b      	ldr	r3, [r7, #0]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d10a      	bne.n	8010f90 <prvProcessTimerOrBlockTask+0x3c>
 8010f7a:	687a      	ldr	r2, [r7, #4]
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	429a      	cmp	r2, r3
 8010f80:	d806      	bhi.n	8010f90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010f82:	f7fe fd0f 	bl	800f9a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010f86:	68f9      	ldr	r1, [r7, #12]
 8010f88:	6878      	ldr	r0, [r7, #4]
 8010f8a:	f7ff ff81 	bl	8010e90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010f8e:	e024      	b.n	8010fda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d008      	beq.n	8010fa8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010f96:	4b13      	ldr	r3, [pc, #76]	@ (8010fe4 <prvProcessTimerOrBlockTask+0x90>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d101      	bne.n	8010fa4 <prvProcessTimerOrBlockTask+0x50>
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	e000      	b.n	8010fa6 <prvProcessTimerOrBlockTask+0x52>
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8010fe8 <prvProcessTimerOrBlockTask+0x94>)
 8010faa:	6818      	ldr	r0, [r3, #0]
 8010fac:	687a      	ldr	r2, [r7, #4]
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	1ad3      	subs	r3, r2, r3
 8010fb2:	683a      	ldr	r2, [r7, #0]
 8010fb4:	4619      	mov	r1, r3
 8010fb6:	f7fd ffc7 	bl	800ef48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010fba:	f7fe fcf3 	bl	800f9a4 <xTaskResumeAll>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d10a      	bne.n	8010fda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010fc4:	4b09      	ldr	r3, [pc, #36]	@ (8010fec <prvProcessTimerOrBlockTask+0x98>)
 8010fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010fca:	601a      	str	r2, [r3, #0]
 8010fcc:	f3bf 8f4f 	dsb	sy
 8010fd0:	f3bf 8f6f 	isb	sy
}
 8010fd4:	e001      	b.n	8010fda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010fd6:	f7fe fce5 	bl	800f9a4 <xTaskResumeAll>
}
 8010fda:	bf00      	nop
 8010fdc:	3710      	adds	r7, #16
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
 8010fe2:	bf00      	nop
 8010fe4:	2000d5ac 	.word	0x2000d5ac
 8010fe8:	2000d5b0 	.word	0x2000d5b0
 8010fec:	e000ed04 	.word	0xe000ed04

08010ff0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010ff0:	b480      	push	{r7}
 8010ff2:	b085      	sub	sp, #20
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8011034 <prvGetNextExpireTime+0x44>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d101      	bne.n	8011006 <prvGetNextExpireTime+0x16>
 8011002:	2201      	movs	r2, #1
 8011004:	e000      	b.n	8011008 <prvGetNextExpireTime+0x18>
 8011006:	2200      	movs	r2, #0
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d105      	bne.n	8011020 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011014:	4b07      	ldr	r3, [pc, #28]	@ (8011034 <prvGetNextExpireTime+0x44>)
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	68db      	ldr	r3, [r3, #12]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	60fb      	str	r3, [r7, #12]
 801101e:	e001      	b.n	8011024 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011020:	2300      	movs	r3, #0
 8011022:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011024:	68fb      	ldr	r3, [r7, #12]
}
 8011026:	4618      	mov	r0, r3
 8011028:	3714      	adds	r7, #20
 801102a:	46bd      	mov	sp, r7
 801102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011030:	4770      	bx	lr
 8011032:	bf00      	nop
 8011034:	2000d5a8 	.word	0x2000d5a8

08011038 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b084      	sub	sp, #16
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011040:	f7fe fd4e 	bl	800fae0 <xTaskGetTickCount>
 8011044:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011046:	4b0b      	ldr	r3, [pc, #44]	@ (8011074 <prvSampleTimeNow+0x3c>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	68fa      	ldr	r2, [r7, #12]
 801104c:	429a      	cmp	r2, r3
 801104e:	d205      	bcs.n	801105c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011050:	f000 f93a 	bl	80112c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2201      	movs	r2, #1
 8011058:	601a      	str	r2, [r3, #0]
 801105a:	e002      	b.n	8011062 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	2200      	movs	r2, #0
 8011060:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011062:	4a04      	ldr	r2, [pc, #16]	@ (8011074 <prvSampleTimeNow+0x3c>)
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011068:	68fb      	ldr	r3, [r7, #12]
}
 801106a:	4618      	mov	r0, r3
 801106c:	3710      	adds	r7, #16
 801106e:	46bd      	mov	sp, r7
 8011070:	bd80      	pop	{r7, pc}
 8011072:	bf00      	nop
 8011074:	2000d5b8 	.word	0x2000d5b8

08011078 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b086      	sub	sp, #24
 801107c:	af00      	add	r7, sp, #0
 801107e:	60f8      	str	r0, [r7, #12]
 8011080:	60b9      	str	r1, [r7, #8]
 8011082:	607a      	str	r2, [r7, #4]
 8011084:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011086:	2300      	movs	r3, #0
 8011088:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	68ba      	ldr	r2, [r7, #8]
 801108e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	68fa      	ldr	r2, [r7, #12]
 8011094:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011096:	68ba      	ldr	r2, [r7, #8]
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	429a      	cmp	r2, r3
 801109c:	d812      	bhi.n	80110c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801109e:	687a      	ldr	r2, [r7, #4]
 80110a0:	683b      	ldr	r3, [r7, #0]
 80110a2:	1ad2      	subs	r2, r2, r3
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	699b      	ldr	r3, [r3, #24]
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d302      	bcc.n	80110b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80110ac:	2301      	movs	r3, #1
 80110ae:	617b      	str	r3, [r7, #20]
 80110b0:	e01b      	b.n	80110ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80110b2:	4b10      	ldr	r3, [pc, #64]	@ (80110f4 <prvInsertTimerInActiveList+0x7c>)
 80110b4:	681a      	ldr	r2, [r3, #0]
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	3304      	adds	r3, #4
 80110ba:	4619      	mov	r1, r3
 80110bc:	4610      	mov	r0, r2
 80110be:	f7fd f802 	bl	800e0c6 <vListInsert>
 80110c2:	e012      	b.n	80110ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80110c4:	687a      	ldr	r2, [r7, #4]
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	429a      	cmp	r2, r3
 80110ca:	d206      	bcs.n	80110da <prvInsertTimerInActiveList+0x62>
 80110cc:	68ba      	ldr	r2, [r7, #8]
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d302      	bcc.n	80110da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80110d4:	2301      	movs	r3, #1
 80110d6:	617b      	str	r3, [r7, #20]
 80110d8:	e007      	b.n	80110ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80110da:	4b07      	ldr	r3, [pc, #28]	@ (80110f8 <prvInsertTimerInActiveList+0x80>)
 80110dc:	681a      	ldr	r2, [r3, #0]
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	3304      	adds	r3, #4
 80110e2:	4619      	mov	r1, r3
 80110e4:	4610      	mov	r0, r2
 80110e6:	f7fc ffee 	bl	800e0c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80110ea:	697b      	ldr	r3, [r7, #20]
}
 80110ec:	4618      	mov	r0, r3
 80110ee:	3718      	adds	r7, #24
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}
 80110f4:	2000d5ac 	.word	0x2000d5ac
 80110f8:	2000d5a8 	.word	0x2000d5a8

080110fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b08e      	sub	sp, #56	@ 0x38
 8011100:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011102:	e0ce      	b.n	80112a2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2b00      	cmp	r3, #0
 8011108:	da19      	bge.n	801113e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801110a:	1d3b      	adds	r3, r7, #4
 801110c:	3304      	adds	r3, #4
 801110e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011112:	2b00      	cmp	r3, #0
 8011114:	d10b      	bne.n	801112e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8011116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801111a:	f383 8811 	msr	BASEPRI, r3
 801111e:	f3bf 8f6f 	isb	sy
 8011122:	f3bf 8f4f 	dsb	sy
 8011126:	61fb      	str	r3, [r7, #28]
}
 8011128:	bf00      	nop
 801112a:	bf00      	nop
 801112c:	e7fd      	b.n	801112a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801112e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011134:	6850      	ldr	r0, [r2, #4]
 8011136:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011138:	6892      	ldr	r2, [r2, #8]
 801113a:	4611      	mov	r1, r2
 801113c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2b00      	cmp	r3, #0
 8011142:	f2c0 80ae 	blt.w	80112a2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801114a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801114c:	695b      	ldr	r3, [r3, #20]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d004      	beq.n	801115c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011154:	3304      	adds	r3, #4
 8011156:	4618      	mov	r0, r3
 8011158:	f7fc ffee 	bl	800e138 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801115c:	463b      	mov	r3, r7
 801115e:	4618      	mov	r0, r3
 8011160:	f7ff ff6a 	bl	8011038 <prvSampleTimeNow>
 8011164:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	2b09      	cmp	r3, #9
 801116a:	f200 8097 	bhi.w	801129c <prvProcessReceivedCommands+0x1a0>
 801116e:	a201      	add	r2, pc, #4	@ (adr r2, 8011174 <prvProcessReceivedCommands+0x78>)
 8011170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011174:	0801119d 	.word	0x0801119d
 8011178:	0801119d 	.word	0x0801119d
 801117c:	0801119d 	.word	0x0801119d
 8011180:	08011213 	.word	0x08011213
 8011184:	08011227 	.word	0x08011227
 8011188:	08011273 	.word	0x08011273
 801118c:	0801119d 	.word	0x0801119d
 8011190:	0801119d 	.word	0x0801119d
 8011194:	08011213 	.word	0x08011213
 8011198:	08011227 	.word	0x08011227
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801119c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801119e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80111a2:	f043 0301 	orr.w	r3, r3, #1
 80111a6:	b2da      	uxtb	r2, r3
 80111a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80111ae:	68ba      	ldr	r2, [r7, #8]
 80111b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111b2:	699b      	ldr	r3, [r3, #24]
 80111b4:	18d1      	adds	r1, r2, r3
 80111b6:	68bb      	ldr	r3, [r7, #8]
 80111b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80111ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80111bc:	f7ff ff5c 	bl	8011078 <prvInsertTimerInActiveList>
 80111c0:	4603      	mov	r3, r0
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d06c      	beq.n	80112a0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80111c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111c8:	6a1b      	ldr	r3, [r3, #32]
 80111ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80111cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80111ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80111d4:	f003 0304 	and.w	r3, r3, #4
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d061      	beq.n	80112a0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80111dc:	68ba      	ldr	r2, [r7, #8]
 80111de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111e0:	699b      	ldr	r3, [r3, #24]
 80111e2:	441a      	add	r2, r3
 80111e4:	2300      	movs	r3, #0
 80111e6:	9300      	str	r3, [sp, #0]
 80111e8:	2300      	movs	r3, #0
 80111ea:	2100      	movs	r1, #0
 80111ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80111ee:	f7ff fe01 	bl	8010df4 <xTimerGenericCommand>
 80111f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80111f4:	6a3b      	ldr	r3, [r7, #32]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d152      	bne.n	80112a0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80111fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111fe:	f383 8811 	msr	BASEPRI, r3
 8011202:	f3bf 8f6f 	isb	sy
 8011206:	f3bf 8f4f 	dsb	sy
 801120a:	61bb      	str	r3, [r7, #24]
}
 801120c:	bf00      	nop
 801120e:	bf00      	nop
 8011210:	e7fd      	b.n	801120e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011214:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011218:	f023 0301 	bic.w	r3, r3, #1
 801121c:	b2da      	uxtb	r2, r3
 801121e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011220:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011224:	e03d      	b.n	80112a2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011228:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801122c:	f043 0301 	orr.w	r3, r3, #1
 8011230:	b2da      	uxtb	r2, r3
 8011232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011234:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011238:	68ba      	ldr	r2, [r7, #8]
 801123a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801123c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801123e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011240:	699b      	ldr	r3, [r3, #24]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d10b      	bne.n	801125e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8011246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801124a:	f383 8811 	msr	BASEPRI, r3
 801124e:	f3bf 8f6f 	isb	sy
 8011252:	f3bf 8f4f 	dsb	sy
 8011256:	617b      	str	r3, [r7, #20]
}
 8011258:	bf00      	nop
 801125a:	bf00      	nop
 801125c:	e7fd      	b.n	801125a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801125e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011260:	699a      	ldr	r2, [r3, #24]
 8011262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011264:	18d1      	adds	r1, r2, r3
 8011266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801126a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801126c:	f7ff ff04 	bl	8011078 <prvInsertTimerInActiveList>
					break;
 8011270:	e017      	b.n	80112a2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011274:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011278:	f003 0302 	and.w	r3, r3, #2
 801127c:	2b00      	cmp	r3, #0
 801127e:	d103      	bne.n	8011288 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8011280:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011282:	f000 fc09 	bl	8011a98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011286:	e00c      	b.n	80112a2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801128a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801128e:	f023 0301 	bic.w	r3, r3, #1
 8011292:	b2da      	uxtb	r2, r3
 8011294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011296:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801129a:	e002      	b.n	80112a2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 801129c:	bf00      	nop
 801129e:	e000      	b.n	80112a2 <prvProcessReceivedCommands+0x1a6>
					break;
 80112a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80112a2:	4b08      	ldr	r3, [pc, #32]	@ (80112c4 <prvProcessReceivedCommands+0x1c8>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	1d39      	adds	r1, r7, #4
 80112a8:	2200      	movs	r2, #0
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7fd fa86 	bl	800e7bc <xQueueReceive>
 80112b0:	4603      	mov	r3, r0
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	f47f af26 	bne.w	8011104 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80112b8:	bf00      	nop
 80112ba:	bf00      	nop
 80112bc:	3730      	adds	r7, #48	@ 0x30
 80112be:	46bd      	mov	sp, r7
 80112c0:	bd80      	pop	{r7, pc}
 80112c2:	bf00      	nop
 80112c4:	2000d5b0 	.word	0x2000d5b0

080112c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b088      	sub	sp, #32
 80112cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80112ce:	e049      	b.n	8011364 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80112d0:	4b2e      	ldr	r3, [pc, #184]	@ (801138c <prvSwitchTimerLists+0xc4>)
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	68db      	ldr	r3, [r3, #12]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112da:	4b2c      	ldr	r3, [pc, #176]	@ (801138c <prvSwitchTimerLists+0xc4>)
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	68db      	ldr	r3, [r3, #12]
 80112e0:	68db      	ldr	r3, [r3, #12]
 80112e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	3304      	adds	r3, #4
 80112e8:	4618      	mov	r0, r3
 80112ea:	f7fc ff25 	bl	800e138 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	6a1b      	ldr	r3, [r3, #32]
 80112f2:	68f8      	ldr	r0, [r7, #12]
 80112f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80112fc:	f003 0304 	and.w	r3, r3, #4
 8011300:	2b00      	cmp	r3, #0
 8011302:	d02f      	beq.n	8011364 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	699b      	ldr	r3, [r3, #24]
 8011308:	693a      	ldr	r2, [r7, #16]
 801130a:	4413      	add	r3, r2
 801130c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801130e:	68ba      	ldr	r2, [r7, #8]
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	429a      	cmp	r2, r3
 8011314:	d90e      	bls.n	8011334 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	68ba      	ldr	r2, [r7, #8]
 801131a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	68fa      	ldr	r2, [r7, #12]
 8011320:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011322:	4b1a      	ldr	r3, [pc, #104]	@ (801138c <prvSwitchTimerLists+0xc4>)
 8011324:	681a      	ldr	r2, [r3, #0]
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	3304      	adds	r3, #4
 801132a:	4619      	mov	r1, r3
 801132c:	4610      	mov	r0, r2
 801132e:	f7fc feca 	bl	800e0c6 <vListInsert>
 8011332:	e017      	b.n	8011364 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011334:	2300      	movs	r3, #0
 8011336:	9300      	str	r3, [sp, #0]
 8011338:	2300      	movs	r3, #0
 801133a:	693a      	ldr	r2, [r7, #16]
 801133c:	2100      	movs	r1, #0
 801133e:	68f8      	ldr	r0, [r7, #12]
 8011340:	f7ff fd58 	bl	8010df4 <xTimerGenericCommand>
 8011344:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d10b      	bne.n	8011364 <prvSwitchTimerLists+0x9c>
	__asm volatile
 801134c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011350:	f383 8811 	msr	BASEPRI, r3
 8011354:	f3bf 8f6f 	isb	sy
 8011358:	f3bf 8f4f 	dsb	sy
 801135c:	603b      	str	r3, [r7, #0]
}
 801135e:	bf00      	nop
 8011360:	bf00      	nop
 8011362:	e7fd      	b.n	8011360 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011364:	4b09      	ldr	r3, [pc, #36]	@ (801138c <prvSwitchTimerLists+0xc4>)
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d1b0      	bne.n	80112d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801136e:	4b07      	ldr	r3, [pc, #28]	@ (801138c <prvSwitchTimerLists+0xc4>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011374:	4b06      	ldr	r3, [pc, #24]	@ (8011390 <prvSwitchTimerLists+0xc8>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	4a04      	ldr	r2, [pc, #16]	@ (801138c <prvSwitchTimerLists+0xc4>)
 801137a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801137c:	4a04      	ldr	r2, [pc, #16]	@ (8011390 <prvSwitchTimerLists+0xc8>)
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	6013      	str	r3, [r2, #0]
}
 8011382:	bf00      	nop
 8011384:	3718      	adds	r7, #24
 8011386:	46bd      	mov	sp, r7
 8011388:	bd80      	pop	{r7, pc}
 801138a:	bf00      	nop
 801138c:	2000d5a8 	.word	0x2000d5a8
 8011390:	2000d5ac 	.word	0x2000d5ac

08011394 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b082      	sub	sp, #8
 8011398:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801139a:	f000 f98d 	bl	80116b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801139e:	4b15      	ldr	r3, [pc, #84]	@ (80113f4 <prvCheckForValidListAndQueue+0x60>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d120      	bne.n	80113e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80113a6:	4814      	ldr	r0, [pc, #80]	@ (80113f8 <prvCheckForValidListAndQueue+0x64>)
 80113a8:	f7fc fe3c 	bl	800e024 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80113ac:	4813      	ldr	r0, [pc, #76]	@ (80113fc <prvCheckForValidListAndQueue+0x68>)
 80113ae:	f7fc fe39 	bl	800e024 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80113b2:	4b13      	ldr	r3, [pc, #76]	@ (8011400 <prvCheckForValidListAndQueue+0x6c>)
 80113b4:	4a10      	ldr	r2, [pc, #64]	@ (80113f8 <prvCheckForValidListAndQueue+0x64>)
 80113b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80113b8:	4b12      	ldr	r3, [pc, #72]	@ (8011404 <prvCheckForValidListAndQueue+0x70>)
 80113ba:	4a10      	ldr	r2, [pc, #64]	@ (80113fc <prvCheckForValidListAndQueue+0x68>)
 80113bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80113be:	2300      	movs	r3, #0
 80113c0:	9300      	str	r3, [sp, #0]
 80113c2:	4b11      	ldr	r3, [pc, #68]	@ (8011408 <prvCheckForValidListAndQueue+0x74>)
 80113c4:	4a11      	ldr	r2, [pc, #68]	@ (801140c <prvCheckForValidListAndQueue+0x78>)
 80113c6:	2110      	movs	r1, #16
 80113c8:	200a      	movs	r0, #10
 80113ca:	f7fc ff49 	bl	800e260 <xQueueGenericCreateStatic>
 80113ce:	4603      	mov	r3, r0
 80113d0:	4a08      	ldr	r2, [pc, #32]	@ (80113f4 <prvCheckForValidListAndQueue+0x60>)
 80113d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80113d4:	4b07      	ldr	r3, [pc, #28]	@ (80113f4 <prvCheckForValidListAndQueue+0x60>)
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d005      	beq.n	80113e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80113dc:	4b05      	ldr	r3, [pc, #20]	@ (80113f4 <prvCheckForValidListAndQueue+0x60>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	490b      	ldr	r1, [pc, #44]	@ (8011410 <prvCheckForValidListAndQueue+0x7c>)
 80113e2:	4618      	mov	r0, r3
 80113e4:	f7fd fd86 	bl	800eef4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80113e8:	f000 f998 	bl	801171c <vPortExitCritical>
}
 80113ec:	bf00      	nop
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}
 80113f2:	bf00      	nop
 80113f4:	2000d5b0 	.word	0x2000d5b0
 80113f8:	2000d580 	.word	0x2000d580
 80113fc:	2000d594 	.word	0x2000d594
 8011400:	2000d5a8 	.word	0x2000d5a8
 8011404:	2000d5ac 	.word	0x2000d5ac
 8011408:	2000d65c 	.word	0x2000d65c
 801140c:	2000d5bc 	.word	0x2000d5bc
 8011410:	080189d0 	.word	0x080189d0

08011414 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011414:	b580      	push	{r7, lr}
 8011416:	b08a      	sub	sp, #40	@ 0x28
 8011418:	af00      	add	r7, sp, #0
 801141a:	60f8      	str	r0, [r7, #12]
 801141c:	60b9      	str	r1, [r7, #8]
 801141e:	607a      	str	r2, [r7, #4]
 8011420:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8011422:	f06f 0301 	mvn.w	r3, #1
 8011426:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011434:	4b06      	ldr	r3, [pc, #24]	@ (8011450 <xTimerPendFunctionCallFromISR+0x3c>)
 8011436:	6818      	ldr	r0, [r3, #0]
 8011438:	f107 0114 	add.w	r1, r7, #20
 801143c:	2300      	movs	r3, #0
 801143e:	683a      	ldr	r2, [r7, #0]
 8011440:	f7fd f91e 	bl	800e680 <xQueueGenericSendFromISR>
 8011444:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8011446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8011448:	4618      	mov	r0, r3
 801144a:	3728      	adds	r7, #40	@ 0x28
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}
 8011450:	2000d5b0 	.word	0x2000d5b0

08011454 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011454:	b480      	push	{r7}
 8011456:	b085      	sub	sp, #20
 8011458:	af00      	add	r7, sp, #0
 801145a:	60f8      	str	r0, [r7, #12]
 801145c:	60b9      	str	r1, [r7, #8]
 801145e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	3b04      	subs	r3, #4
 8011464:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801146c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	3b04      	subs	r3, #4
 8011472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011474:	68bb      	ldr	r3, [r7, #8]
 8011476:	f023 0201 	bic.w	r2, r3, #1
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	3b04      	subs	r3, #4
 8011482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011484:	4a0c      	ldr	r2, [pc, #48]	@ (80114b8 <pxPortInitialiseStack+0x64>)
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	3b14      	subs	r3, #20
 801148e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011490:	687a      	ldr	r2, [r7, #4]
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	3b04      	subs	r3, #4
 801149a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	f06f 0202 	mvn.w	r2, #2
 80114a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	3b20      	subs	r3, #32
 80114a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80114aa:	68fb      	ldr	r3, [r7, #12]
}
 80114ac:	4618      	mov	r0, r3
 80114ae:	3714      	adds	r7, #20
 80114b0:	46bd      	mov	sp, r7
 80114b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b6:	4770      	bx	lr
 80114b8:	080114bd 	.word	0x080114bd

080114bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80114bc:	b480      	push	{r7}
 80114be:	b085      	sub	sp, #20
 80114c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80114c2:	2300      	movs	r3, #0
 80114c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80114c6:	4b13      	ldr	r3, [pc, #76]	@ (8011514 <prvTaskExitError+0x58>)
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114ce:	d00b      	beq.n	80114e8 <prvTaskExitError+0x2c>
	__asm volatile
 80114d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114d4:	f383 8811 	msr	BASEPRI, r3
 80114d8:	f3bf 8f6f 	isb	sy
 80114dc:	f3bf 8f4f 	dsb	sy
 80114e0:	60fb      	str	r3, [r7, #12]
}
 80114e2:	bf00      	nop
 80114e4:	bf00      	nop
 80114e6:	e7fd      	b.n	80114e4 <prvTaskExitError+0x28>
	__asm volatile
 80114e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114ec:	f383 8811 	msr	BASEPRI, r3
 80114f0:	f3bf 8f6f 	isb	sy
 80114f4:	f3bf 8f4f 	dsb	sy
 80114f8:	60bb      	str	r3, [r7, #8]
}
 80114fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80114fc:	bf00      	nop
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d0fc      	beq.n	80114fe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011504:	bf00      	nop
 8011506:	bf00      	nop
 8011508:	3714      	adds	r7, #20
 801150a:	46bd      	mov	sp, r7
 801150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011510:	4770      	bx	lr
 8011512:	bf00      	nop
 8011514:	20000200 	.word	0x20000200
	...

08011520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011520:	4b07      	ldr	r3, [pc, #28]	@ (8011540 <pxCurrentTCBConst2>)
 8011522:	6819      	ldr	r1, [r3, #0]
 8011524:	6808      	ldr	r0, [r1, #0]
 8011526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801152a:	f380 8809 	msr	PSP, r0
 801152e:	f3bf 8f6f 	isb	sy
 8011532:	f04f 0000 	mov.w	r0, #0
 8011536:	f380 8811 	msr	BASEPRI, r0
 801153a:	4770      	bx	lr
 801153c:	f3af 8000 	nop.w

08011540 <pxCurrentTCBConst2>:
 8011540:	2000d078 	.word	0x2000d078
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011544:	bf00      	nop
 8011546:	bf00      	nop

08011548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011548:	4808      	ldr	r0, [pc, #32]	@ (801156c <prvPortStartFirstTask+0x24>)
 801154a:	6800      	ldr	r0, [r0, #0]
 801154c:	6800      	ldr	r0, [r0, #0]
 801154e:	f380 8808 	msr	MSP, r0
 8011552:	f04f 0000 	mov.w	r0, #0
 8011556:	f380 8814 	msr	CONTROL, r0
 801155a:	b662      	cpsie	i
 801155c:	b661      	cpsie	f
 801155e:	f3bf 8f4f 	dsb	sy
 8011562:	f3bf 8f6f 	isb	sy
 8011566:	df00      	svc	0
 8011568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801156a:	bf00      	nop
 801156c:	e000ed08 	.word	0xe000ed08

08011570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b086      	sub	sp, #24
 8011574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011576:	4b47      	ldr	r3, [pc, #284]	@ (8011694 <xPortStartScheduler+0x124>)
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	4a47      	ldr	r2, [pc, #284]	@ (8011698 <xPortStartScheduler+0x128>)
 801157c:	4293      	cmp	r3, r2
 801157e:	d10b      	bne.n	8011598 <xPortStartScheduler+0x28>
	__asm volatile
 8011580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011584:	f383 8811 	msr	BASEPRI, r3
 8011588:	f3bf 8f6f 	isb	sy
 801158c:	f3bf 8f4f 	dsb	sy
 8011590:	60fb      	str	r3, [r7, #12]
}
 8011592:	bf00      	nop
 8011594:	bf00      	nop
 8011596:	e7fd      	b.n	8011594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011598:	4b3e      	ldr	r3, [pc, #248]	@ (8011694 <xPortStartScheduler+0x124>)
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	4a3f      	ldr	r2, [pc, #252]	@ (801169c <xPortStartScheduler+0x12c>)
 801159e:	4293      	cmp	r3, r2
 80115a0:	d10b      	bne.n	80115ba <xPortStartScheduler+0x4a>
	__asm volatile
 80115a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115a6:	f383 8811 	msr	BASEPRI, r3
 80115aa:	f3bf 8f6f 	isb	sy
 80115ae:	f3bf 8f4f 	dsb	sy
 80115b2:	613b      	str	r3, [r7, #16]
}
 80115b4:	bf00      	nop
 80115b6:	bf00      	nop
 80115b8:	e7fd      	b.n	80115b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80115ba:	4b39      	ldr	r3, [pc, #228]	@ (80116a0 <xPortStartScheduler+0x130>)
 80115bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	781b      	ldrb	r3, [r3, #0]
 80115c2:	b2db      	uxtb	r3, r3
 80115c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	22ff      	movs	r2, #255	@ 0xff
 80115ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80115cc:	697b      	ldr	r3, [r7, #20]
 80115ce:	781b      	ldrb	r3, [r3, #0]
 80115d0:	b2db      	uxtb	r3, r3
 80115d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80115d4:	78fb      	ldrb	r3, [r7, #3]
 80115d6:	b2db      	uxtb	r3, r3
 80115d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80115dc:	b2da      	uxtb	r2, r3
 80115de:	4b31      	ldr	r3, [pc, #196]	@ (80116a4 <xPortStartScheduler+0x134>)
 80115e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80115e2:	4b31      	ldr	r3, [pc, #196]	@ (80116a8 <xPortStartScheduler+0x138>)
 80115e4:	2207      	movs	r2, #7
 80115e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80115e8:	e009      	b.n	80115fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80115ea:	4b2f      	ldr	r3, [pc, #188]	@ (80116a8 <xPortStartScheduler+0x138>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	3b01      	subs	r3, #1
 80115f0:	4a2d      	ldr	r2, [pc, #180]	@ (80116a8 <xPortStartScheduler+0x138>)
 80115f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80115f4:	78fb      	ldrb	r3, [r7, #3]
 80115f6:	b2db      	uxtb	r3, r3
 80115f8:	005b      	lsls	r3, r3, #1
 80115fa:	b2db      	uxtb	r3, r3
 80115fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80115fe:	78fb      	ldrb	r3, [r7, #3]
 8011600:	b2db      	uxtb	r3, r3
 8011602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011606:	2b80      	cmp	r3, #128	@ 0x80
 8011608:	d0ef      	beq.n	80115ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801160a:	4b27      	ldr	r3, [pc, #156]	@ (80116a8 <xPortStartScheduler+0x138>)
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	f1c3 0307 	rsb	r3, r3, #7
 8011612:	2b04      	cmp	r3, #4
 8011614:	d00b      	beq.n	801162e <xPortStartScheduler+0xbe>
	__asm volatile
 8011616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801161a:	f383 8811 	msr	BASEPRI, r3
 801161e:	f3bf 8f6f 	isb	sy
 8011622:	f3bf 8f4f 	dsb	sy
 8011626:	60bb      	str	r3, [r7, #8]
}
 8011628:	bf00      	nop
 801162a:	bf00      	nop
 801162c:	e7fd      	b.n	801162a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801162e:	4b1e      	ldr	r3, [pc, #120]	@ (80116a8 <xPortStartScheduler+0x138>)
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	021b      	lsls	r3, r3, #8
 8011634:	4a1c      	ldr	r2, [pc, #112]	@ (80116a8 <xPortStartScheduler+0x138>)
 8011636:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011638:	4b1b      	ldr	r3, [pc, #108]	@ (80116a8 <xPortStartScheduler+0x138>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011640:	4a19      	ldr	r2, [pc, #100]	@ (80116a8 <xPortStartScheduler+0x138>)
 8011642:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	b2da      	uxtb	r2, r3
 8011648:	697b      	ldr	r3, [r7, #20]
 801164a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801164c:	4b17      	ldr	r3, [pc, #92]	@ (80116ac <xPortStartScheduler+0x13c>)
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	4a16      	ldr	r2, [pc, #88]	@ (80116ac <xPortStartScheduler+0x13c>)
 8011652:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011656:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011658:	4b14      	ldr	r3, [pc, #80]	@ (80116ac <xPortStartScheduler+0x13c>)
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	4a13      	ldr	r2, [pc, #76]	@ (80116ac <xPortStartScheduler+0x13c>)
 801165e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011662:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011664:	f000 f8da 	bl	801181c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011668:	4b11      	ldr	r3, [pc, #68]	@ (80116b0 <xPortStartScheduler+0x140>)
 801166a:	2200      	movs	r2, #0
 801166c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801166e:	f000 f8f9 	bl	8011864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011672:	4b10      	ldr	r3, [pc, #64]	@ (80116b4 <xPortStartScheduler+0x144>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	4a0f      	ldr	r2, [pc, #60]	@ (80116b4 <xPortStartScheduler+0x144>)
 8011678:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801167c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801167e:	f7ff ff63 	bl	8011548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011682:	f7fe fbcb 	bl	800fe1c <vTaskSwitchContext>
	prvTaskExitError();
 8011686:	f7ff ff19 	bl	80114bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801168a:	2300      	movs	r3, #0
}
 801168c:	4618      	mov	r0, r3
 801168e:	3718      	adds	r7, #24
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}
 8011694:	e000ed00 	.word	0xe000ed00
 8011698:	410fc271 	.word	0x410fc271
 801169c:	410fc270 	.word	0x410fc270
 80116a0:	e000e400 	.word	0xe000e400
 80116a4:	2000d6ac 	.word	0x2000d6ac
 80116a8:	2000d6b0 	.word	0x2000d6b0
 80116ac:	e000ed20 	.word	0xe000ed20
 80116b0:	20000200 	.word	0x20000200
 80116b4:	e000ef34 	.word	0xe000ef34

080116b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80116b8:	b480      	push	{r7}
 80116ba:	b083      	sub	sp, #12
 80116bc:	af00      	add	r7, sp, #0
	__asm volatile
 80116be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116c2:	f383 8811 	msr	BASEPRI, r3
 80116c6:	f3bf 8f6f 	isb	sy
 80116ca:	f3bf 8f4f 	dsb	sy
 80116ce:	607b      	str	r3, [r7, #4]
}
 80116d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80116d2:	4b10      	ldr	r3, [pc, #64]	@ (8011714 <vPortEnterCritical+0x5c>)
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	3301      	adds	r3, #1
 80116d8:	4a0e      	ldr	r2, [pc, #56]	@ (8011714 <vPortEnterCritical+0x5c>)
 80116da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80116dc:	4b0d      	ldr	r3, [pc, #52]	@ (8011714 <vPortEnterCritical+0x5c>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	2b01      	cmp	r3, #1
 80116e2:	d110      	bne.n	8011706 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80116e4:	4b0c      	ldr	r3, [pc, #48]	@ (8011718 <vPortEnterCritical+0x60>)
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	b2db      	uxtb	r3, r3
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d00b      	beq.n	8011706 <vPortEnterCritical+0x4e>
	__asm volatile
 80116ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116f2:	f383 8811 	msr	BASEPRI, r3
 80116f6:	f3bf 8f6f 	isb	sy
 80116fa:	f3bf 8f4f 	dsb	sy
 80116fe:	603b      	str	r3, [r7, #0]
}
 8011700:	bf00      	nop
 8011702:	bf00      	nop
 8011704:	e7fd      	b.n	8011702 <vPortEnterCritical+0x4a>
	}
}
 8011706:	bf00      	nop
 8011708:	370c      	adds	r7, #12
 801170a:	46bd      	mov	sp, r7
 801170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011710:	4770      	bx	lr
 8011712:	bf00      	nop
 8011714:	20000200 	.word	0x20000200
 8011718:	e000ed04 	.word	0xe000ed04

0801171c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801171c:	b480      	push	{r7}
 801171e:	b083      	sub	sp, #12
 8011720:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011722:	4b12      	ldr	r3, [pc, #72]	@ (801176c <vPortExitCritical+0x50>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d10b      	bne.n	8011742 <vPortExitCritical+0x26>
	__asm volatile
 801172a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801172e:	f383 8811 	msr	BASEPRI, r3
 8011732:	f3bf 8f6f 	isb	sy
 8011736:	f3bf 8f4f 	dsb	sy
 801173a:	607b      	str	r3, [r7, #4]
}
 801173c:	bf00      	nop
 801173e:	bf00      	nop
 8011740:	e7fd      	b.n	801173e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011742:	4b0a      	ldr	r3, [pc, #40]	@ (801176c <vPortExitCritical+0x50>)
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	3b01      	subs	r3, #1
 8011748:	4a08      	ldr	r2, [pc, #32]	@ (801176c <vPortExitCritical+0x50>)
 801174a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801174c:	4b07      	ldr	r3, [pc, #28]	@ (801176c <vPortExitCritical+0x50>)
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d105      	bne.n	8011760 <vPortExitCritical+0x44>
 8011754:	2300      	movs	r3, #0
 8011756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	f383 8811 	msr	BASEPRI, r3
}
 801175e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011760:	bf00      	nop
 8011762:	370c      	adds	r7, #12
 8011764:	46bd      	mov	sp, r7
 8011766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176a:	4770      	bx	lr
 801176c:	20000200 	.word	0x20000200

08011770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011770:	f3ef 8009 	mrs	r0, PSP
 8011774:	f3bf 8f6f 	isb	sy
 8011778:	4b15      	ldr	r3, [pc, #84]	@ (80117d0 <pxCurrentTCBConst>)
 801177a:	681a      	ldr	r2, [r3, #0]
 801177c:	f01e 0f10 	tst.w	lr, #16
 8011780:	bf08      	it	eq
 8011782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801178a:	6010      	str	r0, [r2, #0]
 801178c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011790:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011794:	f380 8811 	msr	BASEPRI, r0
 8011798:	f3bf 8f4f 	dsb	sy
 801179c:	f3bf 8f6f 	isb	sy
 80117a0:	f7fe fb3c 	bl	800fe1c <vTaskSwitchContext>
 80117a4:	f04f 0000 	mov.w	r0, #0
 80117a8:	f380 8811 	msr	BASEPRI, r0
 80117ac:	bc09      	pop	{r0, r3}
 80117ae:	6819      	ldr	r1, [r3, #0]
 80117b0:	6808      	ldr	r0, [r1, #0]
 80117b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117b6:	f01e 0f10 	tst.w	lr, #16
 80117ba:	bf08      	it	eq
 80117bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80117c0:	f380 8809 	msr	PSP, r0
 80117c4:	f3bf 8f6f 	isb	sy
 80117c8:	4770      	bx	lr
 80117ca:	bf00      	nop
 80117cc:	f3af 8000 	nop.w

080117d0 <pxCurrentTCBConst>:
 80117d0:	2000d078 	.word	0x2000d078
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80117d4:	bf00      	nop
 80117d6:	bf00      	nop

080117d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b082      	sub	sp, #8
 80117dc:	af00      	add	r7, sp, #0
	__asm volatile
 80117de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117e2:	f383 8811 	msr	BASEPRI, r3
 80117e6:	f3bf 8f6f 	isb	sy
 80117ea:	f3bf 8f4f 	dsb	sy
 80117ee:	607b      	str	r3, [r7, #4]
}
 80117f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80117f2:	f7fe fa59 	bl	800fca8 <xTaskIncrementTick>
 80117f6:	4603      	mov	r3, r0
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d003      	beq.n	8011804 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80117fc:	4b06      	ldr	r3, [pc, #24]	@ (8011818 <xPortSysTickHandler+0x40>)
 80117fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011802:	601a      	str	r2, [r3, #0]
 8011804:	2300      	movs	r3, #0
 8011806:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	f383 8811 	msr	BASEPRI, r3
}
 801180e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011810:	bf00      	nop
 8011812:	3708      	adds	r7, #8
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}
 8011818:	e000ed04 	.word	0xe000ed04

0801181c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801181c:	b480      	push	{r7}
 801181e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011820:	4b0b      	ldr	r3, [pc, #44]	@ (8011850 <vPortSetupTimerInterrupt+0x34>)
 8011822:	2200      	movs	r2, #0
 8011824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011826:	4b0b      	ldr	r3, [pc, #44]	@ (8011854 <vPortSetupTimerInterrupt+0x38>)
 8011828:	2200      	movs	r2, #0
 801182a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801182c:	4b0a      	ldr	r3, [pc, #40]	@ (8011858 <vPortSetupTimerInterrupt+0x3c>)
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	4a0a      	ldr	r2, [pc, #40]	@ (801185c <vPortSetupTimerInterrupt+0x40>)
 8011832:	fba2 2303 	umull	r2, r3, r2, r3
 8011836:	099b      	lsrs	r3, r3, #6
 8011838:	4a09      	ldr	r2, [pc, #36]	@ (8011860 <vPortSetupTimerInterrupt+0x44>)
 801183a:	3b01      	subs	r3, #1
 801183c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801183e:	4b04      	ldr	r3, [pc, #16]	@ (8011850 <vPortSetupTimerInterrupt+0x34>)
 8011840:	2207      	movs	r2, #7
 8011842:	601a      	str	r2, [r3, #0]
}
 8011844:	bf00      	nop
 8011846:	46bd      	mov	sp, r7
 8011848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184c:	4770      	bx	lr
 801184e:	bf00      	nop
 8011850:	e000e010 	.word	0xe000e010
 8011854:	e000e018 	.word	0xe000e018
 8011858:	200001d4 	.word	0x200001d4
 801185c:	10624dd3 	.word	0x10624dd3
 8011860:	e000e014 	.word	0xe000e014

08011864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011864:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011874 <vPortEnableVFP+0x10>
 8011868:	6801      	ldr	r1, [r0, #0]
 801186a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801186e:	6001      	str	r1, [r0, #0]
 8011870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011872:	bf00      	nop
 8011874:	e000ed88 	.word	0xe000ed88

08011878 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011878:	b480      	push	{r7}
 801187a:	b085      	sub	sp, #20
 801187c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801187e:	f3ef 8305 	mrs	r3, IPSR
 8011882:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	2b0f      	cmp	r3, #15
 8011888:	d915      	bls.n	80118b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801188a:	4a18      	ldr	r2, [pc, #96]	@ (80118ec <vPortValidateInterruptPriority+0x74>)
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	4413      	add	r3, r2
 8011890:	781b      	ldrb	r3, [r3, #0]
 8011892:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011894:	4b16      	ldr	r3, [pc, #88]	@ (80118f0 <vPortValidateInterruptPriority+0x78>)
 8011896:	781b      	ldrb	r3, [r3, #0]
 8011898:	7afa      	ldrb	r2, [r7, #11]
 801189a:	429a      	cmp	r2, r3
 801189c:	d20b      	bcs.n	80118b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801189e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118a2:	f383 8811 	msr	BASEPRI, r3
 80118a6:	f3bf 8f6f 	isb	sy
 80118aa:	f3bf 8f4f 	dsb	sy
 80118ae:	607b      	str	r3, [r7, #4]
}
 80118b0:	bf00      	nop
 80118b2:	bf00      	nop
 80118b4:	e7fd      	b.n	80118b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80118b6:	4b0f      	ldr	r3, [pc, #60]	@ (80118f4 <vPortValidateInterruptPriority+0x7c>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80118be:	4b0e      	ldr	r3, [pc, #56]	@ (80118f8 <vPortValidateInterruptPriority+0x80>)
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	429a      	cmp	r2, r3
 80118c4:	d90b      	bls.n	80118de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80118c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118ca:	f383 8811 	msr	BASEPRI, r3
 80118ce:	f3bf 8f6f 	isb	sy
 80118d2:	f3bf 8f4f 	dsb	sy
 80118d6:	603b      	str	r3, [r7, #0]
}
 80118d8:	bf00      	nop
 80118da:	bf00      	nop
 80118dc:	e7fd      	b.n	80118da <vPortValidateInterruptPriority+0x62>
	}
 80118de:	bf00      	nop
 80118e0:	3714      	adds	r7, #20
 80118e2:	46bd      	mov	sp, r7
 80118e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e8:	4770      	bx	lr
 80118ea:	bf00      	nop
 80118ec:	e000e3f0 	.word	0xe000e3f0
 80118f0:	2000d6ac 	.word	0x2000d6ac
 80118f4:	e000ed0c 	.word	0xe000ed0c
 80118f8:	2000d6b0 	.word	0x2000d6b0

080118fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b08a      	sub	sp, #40	@ 0x28
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011904:	2300      	movs	r3, #0
 8011906:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011908:	f7fe f83e 	bl	800f988 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801190c:	4b5c      	ldr	r3, [pc, #368]	@ (8011a80 <pvPortMalloc+0x184>)
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d101      	bne.n	8011918 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011914:	f000 f924 	bl	8011b60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011918:	4b5a      	ldr	r3, [pc, #360]	@ (8011a84 <pvPortMalloc+0x188>)
 801191a:	681a      	ldr	r2, [r3, #0]
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	4013      	ands	r3, r2
 8011920:	2b00      	cmp	r3, #0
 8011922:	f040 8095 	bne.w	8011a50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d01e      	beq.n	801196a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801192c:	2208      	movs	r2, #8
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	4413      	add	r3, r2
 8011932:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f003 0307 	and.w	r3, r3, #7
 801193a:	2b00      	cmp	r3, #0
 801193c:	d015      	beq.n	801196a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	f023 0307 	bic.w	r3, r3, #7
 8011944:	3308      	adds	r3, #8
 8011946:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	f003 0307 	and.w	r3, r3, #7
 801194e:	2b00      	cmp	r3, #0
 8011950:	d00b      	beq.n	801196a <pvPortMalloc+0x6e>
	__asm volatile
 8011952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011956:	f383 8811 	msr	BASEPRI, r3
 801195a:	f3bf 8f6f 	isb	sy
 801195e:	f3bf 8f4f 	dsb	sy
 8011962:	617b      	str	r3, [r7, #20]
}
 8011964:	bf00      	nop
 8011966:	bf00      	nop
 8011968:	e7fd      	b.n	8011966 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d06f      	beq.n	8011a50 <pvPortMalloc+0x154>
 8011970:	4b45      	ldr	r3, [pc, #276]	@ (8011a88 <pvPortMalloc+0x18c>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	687a      	ldr	r2, [r7, #4]
 8011976:	429a      	cmp	r2, r3
 8011978:	d86a      	bhi.n	8011a50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801197a:	4b44      	ldr	r3, [pc, #272]	@ (8011a8c <pvPortMalloc+0x190>)
 801197c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801197e:	4b43      	ldr	r3, [pc, #268]	@ (8011a8c <pvPortMalloc+0x190>)
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011984:	e004      	b.n	8011990 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8011986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011988:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801198a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011992:	685b      	ldr	r3, [r3, #4]
 8011994:	687a      	ldr	r2, [r7, #4]
 8011996:	429a      	cmp	r2, r3
 8011998:	d903      	bls.n	80119a2 <pvPortMalloc+0xa6>
 801199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d1f1      	bne.n	8011986 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80119a2:	4b37      	ldr	r3, [pc, #220]	@ (8011a80 <pvPortMalloc+0x184>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80119a8:	429a      	cmp	r2, r3
 80119aa:	d051      	beq.n	8011a50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80119ac:	6a3b      	ldr	r3, [r7, #32]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	2208      	movs	r2, #8
 80119b2:	4413      	add	r3, r2
 80119b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80119b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119b8:	681a      	ldr	r2, [r3, #0]
 80119ba:	6a3b      	ldr	r3, [r7, #32]
 80119bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80119be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119c0:	685a      	ldr	r2, [r3, #4]
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	1ad2      	subs	r2, r2, r3
 80119c6:	2308      	movs	r3, #8
 80119c8:	005b      	lsls	r3, r3, #1
 80119ca:	429a      	cmp	r2, r3
 80119cc:	d920      	bls.n	8011a10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80119ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	4413      	add	r3, r2
 80119d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80119d6:	69bb      	ldr	r3, [r7, #24]
 80119d8:	f003 0307 	and.w	r3, r3, #7
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d00b      	beq.n	80119f8 <pvPortMalloc+0xfc>
	__asm volatile
 80119e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119e4:	f383 8811 	msr	BASEPRI, r3
 80119e8:	f3bf 8f6f 	isb	sy
 80119ec:	f3bf 8f4f 	dsb	sy
 80119f0:	613b      	str	r3, [r7, #16]
}
 80119f2:	bf00      	nop
 80119f4:	bf00      	nop
 80119f6:	e7fd      	b.n	80119f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80119f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119fa:	685a      	ldr	r2, [r3, #4]
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	1ad2      	subs	r2, r2, r3
 8011a00:	69bb      	ldr	r3, [r7, #24]
 8011a02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a06:	687a      	ldr	r2, [r7, #4]
 8011a08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011a0a:	69b8      	ldr	r0, [r7, #24]
 8011a0c:	f000 f90a 	bl	8011c24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011a10:	4b1d      	ldr	r3, [pc, #116]	@ (8011a88 <pvPortMalloc+0x18c>)
 8011a12:	681a      	ldr	r2, [r3, #0]
 8011a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a16:	685b      	ldr	r3, [r3, #4]
 8011a18:	1ad3      	subs	r3, r2, r3
 8011a1a:	4a1b      	ldr	r2, [pc, #108]	@ (8011a88 <pvPortMalloc+0x18c>)
 8011a1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8011a88 <pvPortMalloc+0x18c>)
 8011a20:	681a      	ldr	r2, [r3, #0]
 8011a22:	4b1b      	ldr	r3, [pc, #108]	@ (8011a90 <pvPortMalloc+0x194>)
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	429a      	cmp	r2, r3
 8011a28:	d203      	bcs.n	8011a32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011a2a:	4b17      	ldr	r3, [pc, #92]	@ (8011a88 <pvPortMalloc+0x18c>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	4a18      	ldr	r2, [pc, #96]	@ (8011a90 <pvPortMalloc+0x194>)
 8011a30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a34:	685a      	ldr	r2, [r3, #4]
 8011a36:	4b13      	ldr	r3, [pc, #76]	@ (8011a84 <pvPortMalloc+0x188>)
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	431a      	orrs	r2, r3
 8011a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a42:	2200      	movs	r2, #0
 8011a44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011a46:	4b13      	ldr	r3, [pc, #76]	@ (8011a94 <pvPortMalloc+0x198>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	3301      	adds	r3, #1
 8011a4c:	4a11      	ldr	r2, [pc, #68]	@ (8011a94 <pvPortMalloc+0x198>)
 8011a4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011a50:	f7fd ffa8 	bl	800f9a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a54:	69fb      	ldr	r3, [r7, #28]
 8011a56:	f003 0307 	and.w	r3, r3, #7
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d00b      	beq.n	8011a76 <pvPortMalloc+0x17a>
	__asm volatile
 8011a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a62:	f383 8811 	msr	BASEPRI, r3
 8011a66:	f3bf 8f6f 	isb	sy
 8011a6a:	f3bf 8f4f 	dsb	sy
 8011a6e:	60fb      	str	r3, [r7, #12]
}
 8011a70:	bf00      	nop
 8011a72:	bf00      	nop
 8011a74:	e7fd      	b.n	8011a72 <pvPortMalloc+0x176>
	return pvReturn;
 8011a76:	69fb      	ldr	r3, [r7, #28]
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	3728      	adds	r7, #40	@ 0x28
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}
 8011a80:	2001d0bc 	.word	0x2001d0bc
 8011a84:	2001d0d0 	.word	0x2001d0d0
 8011a88:	2001d0c0 	.word	0x2001d0c0
 8011a8c:	2001d0b4 	.word	0x2001d0b4
 8011a90:	2001d0c4 	.word	0x2001d0c4
 8011a94:	2001d0c8 	.word	0x2001d0c8

08011a98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b086      	sub	sp, #24
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d04f      	beq.n	8011b4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011aaa:	2308      	movs	r3, #8
 8011aac:	425b      	negs	r3, r3
 8011aae:	697a      	ldr	r2, [r7, #20]
 8011ab0:	4413      	add	r3, r2
 8011ab2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011ab4:	697b      	ldr	r3, [r7, #20]
 8011ab6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011ab8:	693b      	ldr	r3, [r7, #16]
 8011aba:	685a      	ldr	r2, [r3, #4]
 8011abc:	4b25      	ldr	r3, [pc, #148]	@ (8011b54 <vPortFree+0xbc>)
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	4013      	ands	r3, r2
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d10b      	bne.n	8011ade <vPortFree+0x46>
	__asm volatile
 8011ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011aca:	f383 8811 	msr	BASEPRI, r3
 8011ace:	f3bf 8f6f 	isb	sy
 8011ad2:	f3bf 8f4f 	dsb	sy
 8011ad6:	60fb      	str	r3, [r7, #12]
}
 8011ad8:	bf00      	nop
 8011ada:	bf00      	nop
 8011adc:	e7fd      	b.n	8011ada <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011ade:	693b      	ldr	r3, [r7, #16]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d00b      	beq.n	8011afe <vPortFree+0x66>
	__asm volatile
 8011ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011aea:	f383 8811 	msr	BASEPRI, r3
 8011aee:	f3bf 8f6f 	isb	sy
 8011af2:	f3bf 8f4f 	dsb	sy
 8011af6:	60bb      	str	r3, [r7, #8]
}
 8011af8:	bf00      	nop
 8011afa:	bf00      	nop
 8011afc:	e7fd      	b.n	8011afa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011afe:	693b      	ldr	r3, [r7, #16]
 8011b00:	685a      	ldr	r2, [r3, #4]
 8011b02:	4b14      	ldr	r3, [pc, #80]	@ (8011b54 <vPortFree+0xbc>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	4013      	ands	r3, r2
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d01e      	beq.n	8011b4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d11a      	bne.n	8011b4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	685a      	ldr	r2, [r3, #4]
 8011b18:	4b0e      	ldr	r3, [pc, #56]	@ (8011b54 <vPortFree+0xbc>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	43db      	mvns	r3, r3
 8011b1e:	401a      	ands	r2, r3
 8011b20:	693b      	ldr	r3, [r7, #16]
 8011b22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011b24:	f7fd ff30 	bl	800f988 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011b28:	693b      	ldr	r3, [r7, #16]
 8011b2a:	685a      	ldr	r2, [r3, #4]
 8011b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8011b58 <vPortFree+0xc0>)
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	4413      	add	r3, r2
 8011b32:	4a09      	ldr	r2, [pc, #36]	@ (8011b58 <vPortFree+0xc0>)
 8011b34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011b36:	6938      	ldr	r0, [r7, #16]
 8011b38:	f000 f874 	bl	8011c24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011b3c:	4b07      	ldr	r3, [pc, #28]	@ (8011b5c <vPortFree+0xc4>)
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	3301      	adds	r3, #1
 8011b42:	4a06      	ldr	r2, [pc, #24]	@ (8011b5c <vPortFree+0xc4>)
 8011b44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011b46:	f7fd ff2d 	bl	800f9a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011b4a:	bf00      	nop
 8011b4c:	3718      	adds	r7, #24
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}
 8011b52:	bf00      	nop
 8011b54:	2001d0d0 	.word	0x2001d0d0
 8011b58:	2001d0c0 	.word	0x2001d0c0
 8011b5c:	2001d0cc 	.word	0x2001d0cc

08011b60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011b60:	b480      	push	{r7}
 8011b62:	b085      	sub	sp, #20
 8011b64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011b66:	f44f 437a 	mov.w	r3, #64000	@ 0xfa00
 8011b6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011b6c:	4b27      	ldr	r3, [pc, #156]	@ (8011c0c <prvHeapInit+0xac>)
 8011b6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	f003 0307 	and.w	r3, r3, #7
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d00c      	beq.n	8011b94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	3307      	adds	r3, #7
 8011b7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	f023 0307 	bic.w	r3, r3, #7
 8011b86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011b88:	68ba      	ldr	r2, [r7, #8]
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	1ad3      	subs	r3, r2, r3
 8011b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8011c0c <prvHeapInit+0xac>)
 8011b90:	4413      	add	r3, r2
 8011b92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011b98:	4a1d      	ldr	r2, [pc, #116]	@ (8011c10 <prvHeapInit+0xb0>)
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8011c10 <prvHeapInit+0xb0>)
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	68ba      	ldr	r2, [r7, #8]
 8011ba8:	4413      	add	r3, r2
 8011baa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011bac:	2208      	movs	r2, #8
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	1a9b      	subs	r3, r3, r2
 8011bb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	f023 0307 	bic.w	r3, r3, #7
 8011bba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	4a15      	ldr	r2, [pc, #84]	@ (8011c14 <prvHeapInit+0xb4>)
 8011bc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011bc2:	4b14      	ldr	r3, [pc, #80]	@ (8011c14 <prvHeapInit+0xb4>)
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011bca:	4b12      	ldr	r3, [pc, #72]	@ (8011c14 <prvHeapInit+0xb4>)
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	2200      	movs	r2, #0
 8011bd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	68fa      	ldr	r2, [r7, #12]
 8011bda:	1ad2      	subs	r2, r2, r3
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011be0:	4b0c      	ldr	r3, [pc, #48]	@ (8011c14 <prvHeapInit+0xb4>)
 8011be2:	681a      	ldr	r2, [r3, #0]
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	685b      	ldr	r3, [r3, #4]
 8011bec:	4a0a      	ldr	r2, [pc, #40]	@ (8011c18 <prvHeapInit+0xb8>)
 8011bee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	685b      	ldr	r3, [r3, #4]
 8011bf4:	4a09      	ldr	r2, [pc, #36]	@ (8011c1c <prvHeapInit+0xbc>)
 8011bf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011bf8:	4b09      	ldr	r3, [pc, #36]	@ (8011c20 <prvHeapInit+0xc0>)
 8011bfa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8011bfe:	601a      	str	r2, [r3, #0]
}
 8011c00:	bf00      	nop
 8011c02:	3714      	adds	r7, #20
 8011c04:	46bd      	mov	sp, r7
 8011c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0a:	4770      	bx	lr
 8011c0c:	2000d6b4 	.word	0x2000d6b4
 8011c10:	2001d0b4 	.word	0x2001d0b4
 8011c14:	2001d0bc 	.word	0x2001d0bc
 8011c18:	2001d0c4 	.word	0x2001d0c4
 8011c1c:	2001d0c0 	.word	0x2001d0c0
 8011c20:	2001d0d0 	.word	0x2001d0d0

08011c24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011c24:	b480      	push	{r7}
 8011c26:	b085      	sub	sp, #20
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011c2c:	4b28      	ldr	r3, [pc, #160]	@ (8011cd0 <prvInsertBlockIntoFreeList+0xac>)
 8011c2e:	60fb      	str	r3, [r7, #12]
 8011c30:	e002      	b.n	8011c38 <prvInsertBlockIntoFreeList+0x14>
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	60fb      	str	r3, [r7, #12]
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	687a      	ldr	r2, [r7, #4]
 8011c3e:	429a      	cmp	r2, r3
 8011c40:	d8f7      	bhi.n	8011c32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	68ba      	ldr	r2, [r7, #8]
 8011c4c:	4413      	add	r3, r2
 8011c4e:	687a      	ldr	r2, [r7, #4]
 8011c50:	429a      	cmp	r2, r3
 8011c52:	d108      	bne.n	8011c66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	685a      	ldr	r2, [r3, #4]
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	685b      	ldr	r3, [r3, #4]
 8011c5c:	441a      	add	r2, r3
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	68ba      	ldr	r2, [r7, #8]
 8011c70:	441a      	add	r2, r3
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	429a      	cmp	r2, r3
 8011c78:	d118      	bne.n	8011cac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	681a      	ldr	r2, [r3, #0]
 8011c7e:	4b15      	ldr	r3, [pc, #84]	@ (8011cd4 <prvInsertBlockIntoFreeList+0xb0>)
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d00d      	beq.n	8011ca2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	685a      	ldr	r2, [r3, #4]
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	685b      	ldr	r3, [r3, #4]
 8011c90:	441a      	add	r2, r3
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	681a      	ldr	r2, [r3, #0]
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	601a      	str	r2, [r3, #0]
 8011ca0:	e008      	b.n	8011cb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8011cd4 <prvInsertBlockIntoFreeList+0xb0>)
 8011ca4:	681a      	ldr	r2, [r3, #0]
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	601a      	str	r2, [r3, #0]
 8011caa:	e003      	b.n	8011cb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	681a      	ldr	r2, [r3, #0]
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011cb4:	68fa      	ldr	r2, [r7, #12]
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	d002      	beq.n	8011cc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	687a      	ldr	r2, [r7, #4]
 8011cc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011cc2:	bf00      	nop
 8011cc4:	3714      	adds	r7, #20
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ccc:	4770      	bx	lr
 8011cce:	bf00      	nop
 8011cd0:	2001d0b4 	.word	0x2001d0b4
 8011cd4:	2001d0bc 	.word	0x2001d0bc

08011cd8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8011cdc:	2201      	movs	r2, #1
 8011cde:	490e      	ldr	r1, [pc, #56]	@ (8011d18 <MX_USB_HOST_Init+0x40>)
 8011ce0:	480e      	ldr	r0, [pc, #56]	@ (8011d1c <MX_USB_HOST_Init+0x44>)
 8011ce2:	f7f9 fdf1 	bl	800b8c8 <USBH_Init>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d001      	beq.n	8011cf0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8011cec:	f7f1 fef0 	bl	8003ad0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8011cf0:	490b      	ldr	r1, [pc, #44]	@ (8011d20 <MX_USB_HOST_Init+0x48>)
 8011cf2:	480a      	ldr	r0, [pc, #40]	@ (8011d1c <MX_USB_HOST_Init+0x44>)
 8011cf4:	f7f9 feb7 	bl	800ba66 <USBH_RegisterClass>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d001      	beq.n	8011d02 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8011cfe:	f7f1 fee7 	bl	8003ad0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8011d02:	4806      	ldr	r0, [pc, #24]	@ (8011d1c <MX_USB_HOST_Init+0x44>)
 8011d04:	f7f9 ff3b 	bl	800bb7e <USBH_Start>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d001      	beq.n	8011d12 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8011d0e:	f7f1 fedf 	bl	8003ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8011d12:	bf00      	nop
 8011d14:	bd80      	pop	{r7, pc}
 8011d16:	bf00      	nop
 8011d18:	08011d25 	.word	0x08011d25
 8011d1c:	2001d0d4 	.word	0x2001d0d4
 8011d20:	200001e0 	.word	0x200001e0

08011d24 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8011d24:	b480      	push	{r7}
 8011d26:	b083      	sub	sp, #12
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
 8011d2c:	460b      	mov	r3, r1
 8011d2e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8011d30:	78fb      	ldrb	r3, [r7, #3]
 8011d32:	3b01      	subs	r3, #1
 8011d34:	2b04      	cmp	r3, #4
 8011d36:	d819      	bhi.n	8011d6c <USBH_UserProcess+0x48>
 8011d38:	a201      	add	r2, pc, #4	@ (adr r2, 8011d40 <USBH_UserProcess+0x1c>)
 8011d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d3e:	bf00      	nop
 8011d40:	08011d6d 	.word	0x08011d6d
 8011d44:	08011d5d 	.word	0x08011d5d
 8011d48:	08011d6d 	.word	0x08011d6d
 8011d4c:	08011d65 	.word	0x08011d65
 8011d50:	08011d55 	.word	0x08011d55
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011d54:	4b09      	ldr	r3, [pc, #36]	@ (8011d7c <USBH_UserProcess+0x58>)
 8011d56:	2203      	movs	r2, #3
 8011d58:	701a      	strb	r2, [r3, #0]
  break;
 8011d5a:	e008      	b.n	8011d6e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8011d5c:	4b07      	ldr	r3, [pc, #28]	@ (8011d7c <USBH_UserProcess+0x58>)
 8011d5e:	2202      	movs	r2, #2
 8011d60:	701a      	strb	r2, [r3, #0]
  break;
 8011d62:	e004      	b.n	8011d6e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011d64:	4b05      	ldr	r3, [pc, #20]	@ (8011d7c <USBH_UserProcess+0x58>)
 8011d66:	2201      	movs	r2, #1
 8011d68:	701a      	strb	r2, [r3, #0]
  break;
 8011d6a:	e000      	b.n	8011d6e <USBH_UserProcess+0x4a>

  default:
  break;
 8011d6c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8011d6e:	bf00      	nop
 8011d70:	370c      	adds	r7, #12
 8011d72:	46bd      	mov	sp, r7
 8011d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d78:	4770      	bx	lr
 8011d7a:	bf00      	nop
 8011d7c:	2001d4b8 	.word	0x2001d4b8

08011d80 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b08a      	sub	sp, #40	@ 0x28
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011d88:	f107 0314 	add.w	r3, r7, #20
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	601a      	str	r2, [r3, #0]
 8011d90:	605a      	str	r2, [r3, #4]
 8011d92:	609a      	str	r2, [r3, #8]
 8011d94:	60da      	str	r2, [r3, #12]
 8011d96:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011da0:	d147      	bne.n	8011e32 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011da2:	2300      	movs	r3, #0
 8011da4:	613b      	str	r3, [r7, #16]
 8011da6:	4b25      	ldr	r3, [pc, #148]	@ (8011e3c <HAL_HCD_MspInit+0xbc>)
 8011da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011daa:	4a24      	ldr	r2, [pc, #144]	@ (8011e3c <HAL_HCD_MspInit+0xbc>)
 8011dac:	f043 0301 	orr.w	r3, r3, #1
 8011db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8011db2:	4b22      	ldr	r3, [pc, #136]	@ (8011e3c <HAL_HCD_MspInit+0xbc>)
 8011db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011db6:	f003 0301 	and.w	r3, r3, #1
 8011dba:	613b      	str	r3, [r7, #16]
 8011dbc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8011dbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011dc8:	2300      	movs	r3, #0
 8011dca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8011dcc:	f107 0314 	add.w	r3, r7, #20
 8011dd0:	4619      	mov	r1, r3
 8011dd2:	481b      	ldr	r0, [pc, #108]	@ (8011e40 <HAL_HCD_MspInit+0xc0>)
 8011dd4:	f7f2 fc56 	bl	8004684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8011dd8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8011ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011dde:	2302      	movs	r3, #2
 8011de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011de2:	2300      	movs	r3, #0
 8011de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011de6:	2300      	movs	r3, #0
 8011de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011dea:	230a      	movs	r3, #10
 8011dec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011dee:	f107 0314 	add.w	r3, r7, #20
 8011df2:	4619      	mov	r1, r3
 8011df4:	4812      	ldr	r0, [pc, #72]	@ (8011e40 <HAL_HCD_MspInit+0xc0>)
 8011df6:	f7f2 fc45 	bl	8004684 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011dfa:	4b10      	ldr	r3, [pc, #64]	@ (8011e3c <HAL_HCD_MspInit+0xbc>)
 8011dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011dfe:	4a0f      	ldr	r2, [pc, #60]	@ (8011e3c <HAL_HCD_MspInit+0xbc>)
 8011e00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e04:	6353      	str	r3, [r2, #52]	@ 0x34
 8011e06:	2300      	movs	r3, #0
 8011e08:	60fb      	str	r3, [r7, #12]
 8011e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8011e3c <HAL_HCD_MspInit+0xbc>)
 8011e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011e0e:	4a0b      	ldr	r2, [pc, #44]	@ (8011e3c <HAL_HCD_MspInit+0xbc>)
 8011e10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011e14:	6453      	str	r3, [r2, #68]	@ 0x44
 8011e16:	4b09      	ldr	r3, [pc, #36]	@ (8011e3c <HAL_HCD_MspInit+0xbc>)
 8011e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011e1e:	60fb      	str	r3, [r7, #12]
 8011e20:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011e22:	2200      	movs	r2, #0
 8011e24:	2105      	movs	r1, #5
 8011e26:	2043      	movs	r0, #67	@ 0x43
 8011e28:	f7f2 fb70 	bl	800450c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011e2c:	2043      	movs	r0, #67	@ 0x43
 8011e2e:	f7f2 fb89 	bl	8004544 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011e32:	bf00      	nop
 8011e34:	3728      	adds	r7, #40	@ 0x28
 8011e36:	46bd      	mov	sp, r7
 8011e38:	bd80      	pop	{r7, pc}
 8011e3a:	bf00      	nop
 8011e3c:	40023800 	.word	0x40023800
 8011e40:	40020000 	.word	0x40020000

08011e44 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b082      	sub	sp, #8
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011e52:	4618      	mov	r0, r3
 8011e54:	f7fa fb45 	bl	800c4e2 <USBH_LL_IncTimer>
}
 8011e58:	bf00      	nop
 8011e5a:	3708      	adds	r7, #8
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}

08011e60 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b082      	sub	sp, #8
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011e6e:	4618      	mov	r0, r3
 8011e70:	f7fa fb89 	bl	800c586 <USBH_LL_Connect>
}
 8011e74:	bf00      	nop
 8011e76:	3708      	adds	r7, #8
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd80      	pop	{r7, pc}

08011e7c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b082      	sub	sp, #8
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f7fa fb9e 	bl	800c5cc <USBH_LL_Disconnect>
}
 8011e90:	bf00      	nop
 8011e92:	3708      	adds	r7, #8
 8011e94:	46bd      	mov	sp, r7
 8011e96:	bd80      	pop	{r7, pc}

08011e98 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b082      	sub	sp, #8
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
 8011ea0:	460b      	mov	r3, r1
 8011ea2:	70fb      	strb	r3, [r7, #3]
 8011ea4:	4613      	mov	r3, r2
 8011ea6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f7fa fbd5 	bl	800c65e <USBH_LL_NotifyURBChange>
#endif
}
 8011eb4:	bf00      	nop
 8011eb6:	3708      	adds	r7, #8
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	bd80      	pop	{r7, pc}

08011ebc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b082      	sub	sp, #8
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7fa fb33 	bl	800c536 <USBH_LL_PortEnabled>
}
 8011ed0:	bf00      	nop
 8011ed2:	3708      	adds	r7, #8
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}

08011ed8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b082      	sub	sp, #8
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7fa fb3f 	bl	800c56a <USBH_LL_PortDisabled>
}
 8011eec:	bf00      	nop
 8011eee:	3708      	adds	r7, #8
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bd80      	pop	{r7, pc}

08011ef4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b082      	sub	sp, #8
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8011f02:	2b01      	cmp	r3, #1
 8011f04:	d12a      	bne.n	8011f5c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8011f06:	4a18      	ldr	r2, [pc, #96]	@ (8011f68 <USBH_LL_Init+0x74>)
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	4a15      	ldr	r2, [pc, #84]	@ (8011f68 <USBH_LL_Init+0x74>)
 8011f12:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011f16:	4b14      	ldr	r3, [pc, #80]	@ (8011f68 <USBH_LL_Init+0x74>)
 8011f18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8011f1c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8011f1e:	4b12      	ldr	r3, [pc, #72]	@ (8011f68 <USBH_LL_Init+0x74>)
 8011f20:	2208      	movs	r2, #8
 8011f22:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8011f24:	4b10      	ldr	r3, [pc, #64]	@ (8011f68 <USBH_LL_Init+0x74>)
 8011f26:	2201      	movs	r2, #1
 8011f28:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8011f68 <USBH_LL_Init+0x74>)
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8011f30:	4b0d      	ldr	r3, [pc, #52]	@ (8011f68 <USBH_LL_Init+0x74>)
 8011f32:	2202      	movs	r2, #2
 8011f34:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011f36:	4b0c      	ldr	r3, [pc, #48]	@ (8011f68 <USBH_LL_Init+0x74>)
 8011f38:	2200      	movs	r2, #0
 8011f3a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8011f3c:	480a      	ldr	r0, [pc, #40]	@ (8011f68 <USBH_LL_Init+0x74>)
 8011f3e:	f7f2 fdac 	bl	8004a9a <HAL_HCD_Init>
 8011f42:	4603      	mov	r3, r0
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d001      	beq.n	8011f4c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8011f48:	f7f1 fdc2 	bl	8003ad0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8011f4c:	4806      	ldr	r0, [pc, #24]	@ (8011f68 <USBH_LL_Init+0x74>)
 8011f4e:	f7f3 fa0d 	bl	800536c <HAL_HCD_GetCurrentFrame>
 8011f52:	4603      	mov	r3, r0
 8011f54:	4619      	mov	r1, r3
 8011f56:	6878      	ldr	r0, [r7, #4]
 8011f58:	f7fa fab4 	bl	800c4c4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011f5c:	2300      	movs	r3, #0
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	3708      	adds	r7, #8
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
 8011f66:	bf00      	nop
 8011f68:	2001d4bc 	.word	0x2001d4bc

08011f6c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b084      	sub	sp, #16
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f74:	2300      	movs	r3, #0
 8011f76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011f78:	2300      	movs	r3, #0
 8011f7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7f3 f97a 	bl	800527c <HAL_HCD_Start>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011f8c:	7bfb      	ldrb	r3, [r7, #15]
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f000 f95e 	bl	8012250 <USBH_Get_USB_Status>
 8011f94:	4603      	mov	r3, r0
 8011f96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f98:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	3710      	adds	r7, #16
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}

08011fa2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8011fa2:	b580      	push	{r7, lr}
 8011fa4:	b084      	sub	sp, #16
 8011fa6:	af00      	add	r7, sp, #0
 8011fa8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011faa:	2300      	movs	r3, #0
 8011fac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011fae:	2300      	movs	r3, #0
 8011fb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f7f3 f982 	bl	80052c2 <HAL_HCD_Stop>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011fc2:	7bfb      	ldrb	r3, [r7, #15]
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	f000 f943 	bl	8012250 <USBH_Get_USB_Status>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011fce:	7bbb      	ldrb	r3, [r7, #14]
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	3710      	adds	r7, #16
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	bd80      	pop	{r7, pc}

08011fd8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b084      	sub	sp, #16
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011fe0:	2301      	movs	r3, #1
 8011fe2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011fea:	4618      	mov	r0, r3
 8011fec:	f7f3 f9cc 	bl	8005388 <HAL_HCD_GetCurrentSpeed>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	2b02      	cmp	r3, #2
 8011ff4:	d00c      	beq.n	8012010 <USBH_LL_GetSpeed+0x38>
 8011ff6:	2b02      	cmp	r3, #2
 8011ff8:	d80d      	bhi.n	8012016 <USBH_LL_GetSpeed+0x3e>
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d002      	beq.n	8012004 <USBH_LL_GetSpeed+0x2c>
 8011ffe:	2b01      	cmp	r3, #1
 8012000:	d003      	beq.n	801200a <USBH_LL_GetSpeed+0x32>
 8012002:	e008      	b.n	8012016 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8012004:	2300      	movs	r3, #0
 8012006:	73fb      	strb	r3, [r7, #15]
    break;
 8012008:	e008      	b.n	801201c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801200a:	2301      	movs	r3, #1
 801200c:	73fb      	strb	r3, [r7, #15]
    break;
 801200e:	e005      	b.n	801201c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8012010:	2302      	movs	r3, #2
 8012012:	73fb      	strb	r3, [r7, #15]
    break;
 8012014:	e002      	b.n	801201c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8012016:	2301      	movs	r3, #1
 8012018:	73fb      	strb	r3, [r7, #15]
    break;
 801201a:	bf00      	nop
  }
  return  speed;
 801201c:	7bfb      	ldrb	r3, [r7, #15]
}
 801201e:	4618      	mov	r0, r3
 8012020:	3710      	adds	r7, #16
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}

08012026 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8012026:	b580      	push	{r7, lr}
 8012028:	b084      	sub	sp, #16
 801202a:	af00      	add	r7, sp, #0
 801202c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801202e:	2300      	movs	r3, #0
 8012030:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012032:	2300      	movs	r3, #0
 8012034:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801203c:	4618      	mov	r0, r3
 801203e:	f7f3 f95d 	bl	80052fc <HAL_HCD_ResetPort>
 8012042:	4603      	mov	r3, r0
 8012044:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012046:	7bfb      	ldrb	r3, [r7, #15]
 8012048:	4618      	mov	r0, r3
 801204a:	f000 f901 	bl	8012250 <USBH_Get_USB_Status>
 801204e:	4603      	mov	r3, r0
 8012050:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012052:	7bbb      	ldrb	r3, [r7, #14]
}
 8012054:	4618      	mov	r0, r3
 8012056:	3710      	adds	r7, #16
 8012058:	46bd      	mov	sp, r7
 801205a:	bd80      	pop	{r7, pc}

0801205c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b082      	sub	sp, #8
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
 8012064:	460b      	mov	r3, r1
 8012066:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801206e:	78fa      	ldrb	r2, [r7, #3]
 8012070:	4611      	mov	r1, r2
 8012072:	4618      	mov	r0, r3
 8012074:	f7f3 f965 	bl	8005342 <HAL_HCD_HC_GetXferCount>
 8012078:	4603      	mov	r3, r0
}
 801207a:	4618      	mov	r0, r3
 801207c:	3708      	adds	r7, #8
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}

08012082 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8012082:	b590      	push	{r4, r7, lr}
 8012084:	b089      	sub	sp, #36	@ 0x24
 8012086:	af04      	add	r7, sp, #16
 8012088:	6078      	str	r0, [r7, #4]
 801208a:	4608      	mov	r0, r1
 801208c:	4611      	mov	r1, r2
 801208e:	461a      	mov	r2, r3
 8012090:	4603      	mov	r3, r0
 8012092:	70fb      	strb	r3, [r7, #3]
 8012094:	460b      	mov	r3, r1
 8012096:	70bb      	strb	r3, [r7, #2]
 8012098:	4613      	mov	r3, r2
 801209a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801209c:	2300      	movs	r3, #0
 801209e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80120a0:	2300      	movs	r3, #0
 80120a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80120aa:	787c      	ldrb	r4, [r7, #1]
 80120ac:	78ba      	ldrb	r2, [r7, #2]
 80120ae:	78f9      	ldrb	r1, [r7, #3]
 80120b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80120b2:	9302      	str	r3, [sp, #8]
 80120b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80120b8:	9301      	str	r3, [sp, #4]
 80120ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80120be:	9300      	str	r3, [sp, #0]
 80120c0:	4623      	mov	r3, r4
 80120c2:	f7f2 fd51 	bl	8004b68 <HAL_HCD_HC_Init>
 80120c6:	4603      	mov	r3, r0
 80120c8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80120ca:	7bfb      	ldrb	r3, [r7, #15]
 80120cc:	4618      	mov	r0, r3
 80120ce:	f000 f8bf 	bl	8012250 <USBH_Get_USB_Status>
 80120d2:	4603      	mov	r3, r0
 80120d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80120d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80120d8:	4618      	mov	r0, r3
 80120da:	3714      	adds	r7, #20
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd90      	pop	{r4, r7, pc}

080120e0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b084      	sub	sp, #16
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
 80120e8:	460b      	mov	r3, r1
 80120ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120ec:	2300      	movs	r3, #0
 80120ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80120f0:	2300      	movs	r3, #0
 80120f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80120fa:	78fa      	ldrb	r2, [r7, #3]
 80120fc:	4611      	mov	r1, r2
 80120fe:	4618      	mov	r0, r3
 8012100:	f7f2 fdea 	bl	8004cd8 <HAL_HCD_HC_Halt>
 8012104:	4603      	mov	r3, r0
 8012106:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012108:	7bfb      	ldrb	r3, [r7, #15]
 801210a:	4618      	mov	r0, r3
 801210c:	f000 f8a0 	bl	8012250 <USBH_Get_USB_Status>
 8012110:	4603      	mov	r3, r0
 8012112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012114:	7bbb      	ldrb	r3, [r7, #14]
}
 8012116:	4618      	mov	r0, r3
 8012118:	3710      	adds	r7, #16
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}

0801211e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801211e:	b590      	push	{r4, r7, lr}
 8012120:	b089      	sub	sp, #36	@ 0x24
 8012122:	af04      	add	r7, sp, #16
 8012124:	6078      	str	r0, [r7, #4]
 8012126:	4608      	mov	r0, r1
 8012128:	4611      	mov	r1, r2
 801212a:	461a      	mov	r2, r3
 801212c:	4603      	mov	r3, r0
 801212e:	70fb      	strb	r3, [r7, #3]
 8012130:	460b      	mov	r3, r1
 8012132:	70bb      	strb	r3, [r7, #2]
 8012134:	4613      	mov	r3, r2
 8012136:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012138:	2300      	movs	r3, #0
 801213a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801213c:	2300      	movs	r3, #0
 801213e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8012146:	787c      	ldrb	r4, [r7, #1]
 8012148:	78ba      	ldrb	r2, [r7, #2]
 801214a:	78f9      	ldrb	r1, [r7, #3]
 801214c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8012150:	9303      	str	r3, [sp, #12]
 8012152:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012154:	9302      	str	r3, [sp, #8]
 8012156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012158:	9301      	str	r3, [sp, #4]
 801215a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801215e:	9300      	str	r3, [sp, #0]
 8012160:	4623      	mov	r3, r4
 8012162:	f7f2 fddd 	bl	8004d20 <HAL_HCD_HC_SubmitRequest>
 8012166:	4603      	mov	r3, r0
 8012168:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801216a:	7bfb      	ldrb	r3, [r7, #15]
 801216c:	4618      	mov	r0, r3
 801216e:	f000 f86f 	bl	8012250 <USBH_Get_USB_Status>
 8012172:	4603      	mov	r3, r0
 8012174:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012176:	7bbb      	ldrb	r3, [r7, #14]
}
 8012178:	4618      	mov	r0, r3
 801217a:	3714      	adds	r7, #20
 801217c:	46bd      	mov	sp, r7
 801217e:	bd90      	pop	{r4, r7, pc}

08012180 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b082      	sub	sp, #8
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
 8012188:	460b      	mov	r3, r1
 801218a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012192:	78fa      	ldrb	r2, [r7, #3]
 8012194:	4611      	mov	r1, r2
 8012196:	4618      	mov	r0, r3
 8012198:	f7f3 f8be 	bl	8005318 <HAL_HCD_HC_GetURBState>
 801219c:	4603      	mov	r3, r0
}
 801219e:	4618      	mov	r0, r3
 80121a0:	3708      	adds	r7, #8
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}

080121a6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80121a6:	b580      	push	{r7, lr}
 80121a8:	b082      	sub	sp, #8
 80121aa:	af00      	add	r7, sp, #0
 80121ac:	6078      	str	r0, [r7, #4]
 80121ae:	460b      	mov	r3, r1
 80121b0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80121b8:	2b01      	cmp	r3, #1
 80121ba:	d103      	bne.n	80121c4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80121bc:	78fb      	ldrb	r3, [r7, #3]
 80121be:	4618      	mov	r0, r3
 80121c0:	f000 f872 	bl	80122a8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80121c4:	20c8      	movs	r0, #200	@ 0xc8
 80121c6:	f7f2 f8c5 	bl	8004354 <HAL_Delay>
  return USBH_OK;
 80121ca:	2300      	movs	r3, #0
}
 80121cc:	4618      	mov	r0, r3
 80121ce:	3708      	adds	r7, #8
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd80      	pop	{r7, pc}

080121d4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80121d4:	b480      	push	{r7}
 80121d6:	b085      	sub	sp, #20
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
 80121dc:	460b      	mov	r3, r1
 80121de:	70fb      	strb	r3, [r7, #3]
 80121e0:	4613      	mov	r3, r2
 80121e2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80121ea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80121ec:	78fa      	ldrb	r2, [r7, #3]
 80121ee:	68f9      	ldr	r1, [r7, #12]
 80121f0:	4613      	mov	r3, r2
 80121f2:	011b      	lsls	r3, r3, #4
 80121f4:	1a9b      	subs	r3, r3, r2
 80121f6:	009b      	lsls	r3, r3, #2
 80121f8:	440b      	add	r3, r1
 80121fa:	3317      	adds	r3, #23
 80121fc:	781b      	ldrb	r3, [r3, #0]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d00a      	beq.n	8012218 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8012202:	78fa      	ldrb	r2, [r7, #3]
 8012204:	68f9      	ldr	r1, [r7, #12]
 8012206:	4613      	mov	r3, r2
 8012208:	011b      	lsls	r3, r3, #4
 801220a:	1a9b      	subs	r3, r3, r2
 801220c:	009b      	lsls	r3, r3, #2
 801220e:	440b      	add	r3, r1
 8012210:	333c      	adds	r3, #60	@ 0x3c
 8012212:	78ba      	ldrb	r2, [r7, #2]
 8012214:	701a      	strb	r2, [r3, #0]
 8012216:	e009      	b.n	801222c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8012218:	78fa      	ldrb	r2, [r7, #3]
 801221a:	68f9      	ldr	r1, [r7, #12]
 801221c:	4613      	mov	r3, r2
 801221e:	011b      	lsls	r3, r3, #4
 8012220:	1a9b      	subs	r3, r3, r2
 8012222:	009b      	lsls	r3, r3, #2
 8012224:	440b      	add	r3, r1
 8012226:	333d      	adds	r3, #61	@ 0x3d
 8012228:	78ba      	ldrb	r2, [r7, #2]
 801222a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801222c:	2300      	movs	r3, #0
}
 801222e:	4618      	mov	r0, r3
 8012230:	3714      	adds	r7, #20
 8012232:	46bd      	mov	sp, r7
 8012234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012238:	4770      	bx	lr

0801223a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801223a:	b580      	push	{r7, lr}
 801223c:	b082      	sub	sp, #8
 801223e:	af00      	add	r7, sp, #0
 8012240:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8012242:	6878      	ldr	r0, [r7, #4]
 8012244:	f7f2 f886 	bl	8004354 <HAL_Delay>
}
 8012248:	bf00      	nop
 801224a:	3708      	adds	r7, #8
 801224c:	46bd      	mov	sp, r7
 801224e:	bd80      	pop	{r7, pc}

08012250 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012250:	b480      	push	{r7}
 8012252:	b085      	sub	sp, #20
 8012254:	af00      	add	r7, sp, #0
 8012256:	4603      	mov	r3, r0
 8012258:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801225a:	2300      	movs	r3, #0
 801225c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801225e:	79fb      	ldrb	r3, [r7, #7]
 8012260:	2b03      	cmp	r3, #3
 8012262:	d817      	bhi.n	8012294 <USBH_Get_USB_Status+0x44>
 8012264:	a201      	add	r2, pc, #4	@ (adr r2, 801226c <USBH_Get_USB_Status+0x1c>)
 8012266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801226a:	bf00      	nop
 801226c:	0801227d 	.word	0x0801227d
 8012270:	08012283 	.word	0x08012283
 8012274:	08012289 	.word	0x08012289
 8012278:	0801228f 	.word	0x0801228f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801227c:	2300      	movs	r3, #0
 801227e:	73fb      	strb	r3, [r7, #15]
    break;
 8012280:	e00b      	b.n	801229a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8012282:	2302      	movs	r3, #2
 8012284:	73fb      	strb	r3, [r7, #15]
    break;
 8012286:	e008      	b.n	801229a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8012288:	2301      	movs	r3, #1
 801228a:	73fb      	strb	r3, [r7, #15]
    break;
 801228c:	e005      	b.n	801229a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801228e:	2302      	movs	r3, #2
 8012290:	73fb      	strb	r3, [r7, #15]
    break;
 8012292:	e002      	b.n	801229a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8012294:	2302      	movs	r3, #2
 8012296:	73fb      	strb	r3, [r7, #15]
    break;
 8012298:	bf00      	nop
  }
  return usb_status;
 801229a:	7bfb      	ldrb	r3, [r7, #15]
}
 801229c:	4618      	mov	r0, r3
 801229e:	3714      	adds	r7, #20
 80122a0:	46bd      	mov	sp, r7
 80122a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a6:	4770      	bx	lr

080122a8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b084      	sub	sp, #16
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	4603      	mov	r3, r0
 80122b0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80122b2:	79fb      	ldrb	r3, [r7, #7]
 80122b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80122b6:	79fb      	ldrb	r3, [r7, #7]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d102      	bne.n	80122c2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80122bc:	2301      	movs	r3, #1
 80122be:	73fb      	strb	r3, [r7, #15]
 80122c0:	e001      	b.n	80122c6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80122c2:	2300      	movs	r3, #0
 80122c4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80122c6:	7bfb      	ldrb	r3, [r7, #15]
 80122c8:	461a      	mov	r2, r3
 80122ca:	2101      	movs	r1, #1
 80122cc:	4803      	ldr	r0, [pc, #12]	@ (80122dc <MX_DriverVbusFS+0x34>)
 80122ce:	f7f2 fb8d 	bl	80049ec <HAL_GPIO_WritePin>
}
 80122d2:	bf00      	nop
 80122d4:	3710      	adds	r7, #16
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bd80      	pop	{r7, pc}
 80122da:	bf00      	nop
 80122dc:	40020800 	.word	0x40020800

080122e0 <atof>:
 80122e0:	2100      	movs	r1, #0
 80122e2:	f000 bec5 	b.w	8013070 <strtod>

080122e6 <atoi>:
 80122e6:	220a      	movs	r2, #10
 80122e8:	2100      	movs	r1, #0
 80122ea:	f000 bf47 	b.w	801317c <strtol>
	...

080122f0 <malloc>:
 80122f0:	4b02      	ldr	r3, [pc, #8]	@ (80122fc <malloc+0xc>)
 80122f2:	4601      	mov	r1, r0
 80122f4:	6818      	ldr	r0, [r3, #0]
 80122f6:	f000 b82d 	b.w	8012354 <_malloc_r>
 80122fa:	bf00      	nop
 80122fc:	2000037c 	.word	0x2000037c

08012300 <free>:
 8012300:	4b02      	ldr	r3, [pc, #8]	@ (801230c <free+0xc>)
 8012302:	4601      	mov	r1, r0
 8012304:	6818      	ldr	r0, [r3, #0]
 8012306:	f002 bc9f 	b.w	8014c48 <_free_r>
 801230a:	bf00      	nop
 801230c:	2000037c 	.word	0x2000037c

08012310 <sbrk_aligned>:
 8012310:	b570      	push	{r4, r5, r6, lr}
 8012312:	4e0f      	ldr	r6, [pc, #60]	@ (8012350 <sbrk_aligned+0x40>)
 8012314:	460c      	mov	r4, r1
 8012316:	6831      	ldr	r1, [r6, #0]
 8012318:	4605      	mov	r5, r0
 801231a:	b911      	cbnz	r1, 8012322 <sbrk_aligned+0x12>
 801231c:	f001 fdac 	bl	8013e78 <_sbrk_r>
 8012320:	6030      	str	r0, [r6, #0]
 8012322:	4621      	mov	r1, r4
 8012324:	4628      	mov	r0, r5
 8012326:	f001 fda7 	bl	8013e78 <_sbrk_r>
 801232a:	1c43      	adds	r3, r0, #1
 801232c:	d103      	bne.n	8012336 <sbrk_aligned+0x26>
 801232e:	f04f 34ff 	mov.w	r4, #4294967295
 8012332:	4620      	mov	r0, r4
 8012334:	bd70      	pop	{r4, r5, r6, pc}
 8012336:	1cc4      	adds	r4, r0, #3
 8012338:	f024 0403 	bic.w	r4, r4, #3
 801233c:	42a0      	cmp	r0, r4
 801233e:	d0f8      	beq.n	8012332 <sbrk_aligned+0x22>
 8012340:	1a21      	subs	r1, r4, r0
 8012342:	4628      	mov	r0, r5
 8012344:	f001 fd98 	bl	8013e78 <_sbrk_r>
 8012348:	3001      	adds	r0, #1
 801234a:	d1f2      	bne.n	8012332 <sbrk_aligned+0x22>
 801234c:	e7ef      	b.n	801232e <sbrk_aligned+0x1e>
 801234e:	bf00      	nop
 8012350:	2001d89c 	.word	0x2001d89c

08012354 <_malloc_r>:
 8012354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012358:	1ccd      	adds	r5, r1, #3
 801235a:	f025 0503 	bic.w	r5, r5, #3
 801235e:	3508      	adds	r5, #8
 8012360:	2d0c      	cmp	r5, #12
 8012362:	bf38      	it	cc
 8012364:	250c      	movcc	r5, #12
 8012366:	2d00      	cmp	r5, #0
 8012368:	4606      	mov	r6, r0
 801236a:	db01      	blt.n	8012370 <_malloc_r+0x1c>
 801236c:	42a9      	cmp	r1, r5
 801236e:	d904      	bls.n	801237a <_malloc_r+0x26>
 8012370:	230c      	movs	r3, #12
 8012372:	6033      	str	r3, [r6, #0]
 8012374:	2000      	movs	r0, #0
 8012376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801237a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012450 <_malloc_r+0xfc>
 801237e:	f000 f869 	bl	8012454 <__malloc_lock>
 8012382:	f8d8 3000 	ldr.w	r3, [r8]
 8012386:	461c      	mov	r4, r3
 8012388:	bb44      	cbnz	r4, 80123dc <_malloc_r+0x88>
 801238a:	4629      	mov	r1, r5
 801238c:	4630      	mov	r0, r6
 801238e:	f7ff ffbf 	bl	8012310 <sbrk_aligned>
 8012392:	1c43      	adds	r3, r0, #1
 8012394:	4604      	mov	r4, r0
 8012396:	d158      	bne.n	801244a <_malloc_r+0xf6>
 8012398:	f8d8 4000 	ldr.w	r4, [r8]
 801239c:	4627      	mov	r7, r4
 801239e:	2f00      	cmp	r7, #0
 80123a0:	d143      	bne.n	801242a <_malloc_r+0xd6>
 80123a2:	2c00      	cmp	r4, #0
 80123a4:	d04b      	beq.n	801243e <_malloc_r+0xea>
 80123a6:	6823      	ldr	r3, [r4, #0]
 80123a8:	4639      	mov	r1, r7
 80123aa:	4630      	mov	r0, r6
 80123ac:	eb04 0903 	add.w	r9, r4, r3
 80123b0:	f001 fd62 	bl	8013e78 <_sbrk_r>
 80123b4:	4581      	cmp	r9, r0
 80123b6:	d142      	bne.n	801243e <_malloc_r+0xea>
 80123b8:	6821      	ldr	r1, [r4, #0]
 80123ba:	1a6d      	subs	r5, r5, r1
 80123bc:	4629      	mov	r1, r5
 80123be:	4630      	mov	r0, r6
 80123c0:	f7ff ffa6 	bl	8012310 <sbrk_aligned>
 80123c4:	3001      	adds	r0, #1
 80123c6:	d03a      	beq.n	801243e <_malloc_r+0xea>
 80123c8:	6823      	ldr	r3, [r4, #0]
 80123ca:	442b      	add	r3, r5
 80123cc:	6023      	str	r3, [r4, #0]
 80123ce:	f8d8 3000 	ldr.w	r3, [r8]
 80123d2:	685a      	ldr	r2, [r3, #4]
 80123d4:	bb62      	cbnz	r2, 8012430 <_malloc_r+0xdc>
 80123d6:	f8c8 7000 	str.w	r7, [r8]
 80123da:	e00f      	b.n	80123fc <_malloc_r+0xa8>
 80123dc:	6822      	ldr	r2, [r4, #0]
 80123de:	1b52      	subs	r2, r2, r5
 80123e0:	d420      	bmi.n	8012424 <_malloc_r+0xd0>
 80123e2:	2a0b      	cmp	r2, #11
 80123e4:	d917      	bls.n	8012416 <_malloc_r+0xc2>
 80123e6:	1961      	adds	r1, r4, r5
 80123e8:	42a3      	cmp	r3, r4
 80123ea:	6025      	str	r5, [r4, #0]
 80123ec:	bf18      	it	ne
 80123ee:	6059      	strne	r1, [r3, #4]
 80123f0:	6863      	ldr	r3, [r4, #4]
 80123f2:	bf08      	it	eq
 80123f4:	f8c8 1000 	streq.w	r1, [r8]
 80123f8:	5162      	str	r2, [r4, r5]
 80123fa:	604b      	str	r3, [r1, #4]
 80123fc:	4630      	mov	r0, r6
 80123fe:	f000 f82f 	bl	8012460 <__malloc_unlock>
 8012402:	f104 000b 	add.w	r0, r4, #11
 8012406:	1d23      	adds	r3, r4, #4
 8012408:	f020 0007 	bic.w	r0, r0, #7
 801240c:	1ac2      	subs	r2, r0, r3
 801240e:	bf1c      	itt	ne
 8012410:	1a1b      	subne	r3, r3, r0
 8012412:	50a3      	strne	r3, [r4, r2]
 8012414:	e7af      	b.n	8012376 <_malloc_r+0x22>
 8012416:	6862      	ldr	r2, [r4, #4]
 8012418:	42a3      	cmp	r3, r4
 801241a:	bf0c      	ite	eq
 801241c:	f8c8 2000 	streq.w	r2, [r8]
 8012420:	605a      	strne	r2, [r3, #4]
 8012422:	e7eb      	b.n	80123fc <_malloc_r+0xa8>
 8012424:	4623      	mov	r3, r4
 8012426:	6864      	ldr	r4, [r4, #4]
 8012428:	e7ae      	b.n	8012388 <_malloc_r+0x34>
 801242a:	463c      	mov	r4, r7
 801242c:	687f      	ldr	r7, [r7, #4]
 801242e:	e7b6      	b.n	801239e <_malloc_r+0x4a>
 8012430:	461a      	mov	r2, r3
 8012432:	685b      	ldr	r3, [r3, #4]
 8012434:	42a3      	cmp	r3, r4
 8012436:	d1fb      	bne.n	8012430 <_malloc_r+0xdc>
 8012438:	2300      	movs	r3, #0
 801243a:	6053      	str	r3, [r2, #4]
 801243c:	e7de      	b.n	80123fc <_malloc_r+0xa8>
 801243e:	230c      	movs	r3, #12
 8012440:	6033      	str	r3, [r6, #0]
 8012442:	4630      	mov	r0, r6
 8012444:	f000 f80c 	bl	8012460 <__malloc_unlock>
 8012448:	e794      	b.n	8012374 <_malloc_r+0x20>
 801244a:	6005      	str	r5, [r0, #0]
 801244c:	e7d6      	b.n	80123fc <_malloc_r+0xa8>
 801244e:	bf00      	nop
 8012450:	2001d8a0 	.word	0x2001d8a0

08012454 <__malloc_lock>:
 8012454:	4801      	ldr	r0, [pc, #4]	@ (801245c <__malloc_lock+0x8>)
 8012456:	f001 bd5c 	b.w	8013f12 <__retarget_lock_acquire_recursive>
 801245a:	bf00      	nop
 801245c:	2001d9e4 	.word	0x2001d9e4

08012460 <__malloc_unlock>:
 8012460:	4801      	ldr	r0, [pc, #4]	@ (8012468 <__malloc_unlock+0x8>)
 8012462:	f001 bd57 	b.w	8013f14 <__retarget_lock_release_recursive>
 8012466:	bf00      	nop
 8012468:	2001d9e4 	.word	0x2001d9e4

0801246c <sulp>:
 801246c:	b570      	push	{r4, r5, r6, lr}
 801246e:	4604      	mov	r4, r0
 8012470:	460d      	mov	r5, r1
 8012472:	ec45 4b10 	vmov	d0, r4, r5
 8012476:	4616      	mov	r6, r2
 8012478:	f003 fae8 	bl	8015a4c <__ulp>
 801247c:	ec51 0b10 	vmov	r0, r1, d0
 8012480:	b17e      	cbz	r6, 80124a2 <sulp+0x36>
 8012482:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012486:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801248a:	2b00      	cmp	r3, #0
 801248c:	dd09      	ble.n	80124a2 <sulp+0x36>
 801248e:	051b      	lsls	r3, r3, #20
 8012490:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8012494:	2400      	movs	r4, #0
 8012496:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801249a:	4622      	mov	r2, r4
 801249c:	462b      	mov	r3, r5
 801249e:	f7ee f8bb 	bl	8000618 <__aeabi_dmul>
 80124a2:	ec41 0b10 	vmov	d0, r0, r1
 80124a6:	bd70      	pop	{r4, r5, r6, pc}

080124a8 <_strtod_l>:
 80124a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124ac:	b09f      	sub	sp, #124	@ 0x7c
 80124ae:	460c      	mov	r4, r1
 80124b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80124b2:	2200      	movs	r2, #0
 80124b4:	921a      	str	r2, [sp, #104]	@ 0x68
 80124b6:	9005      	str	r0, [sp, #20]
 80124b8:	f04f 0a00 	mov.w	sl, #0
 80124bc:	f04f 0b00 	mov.w	fp, #0
 80124c0:	460a      	mov	r2, r1
 80124c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80124c4:	7811      	ldrb	r1, [r2, #0]
 80124c6:	292b      	cmp	r1, #43	@ 0x2b
 80124c8:	d04a      	beq.n	8012560 <_strtod_l+0xb8>
 80124ca:	d838      	bhi.n	801253e <_strtod_l+0x96>
 80124cc:	290d      	cmp	r1, #13
 80124ce:	d832      	bhi.n	8012536 <_strtod_l+0x8e>
 80124d0:	2908      	cmp	r1, #8
 80124d2:	d832      	bhi.n	801253a <_strtod_l+0x92>
 80124d4:	2900      	cmp	r1, #0
 80124d6:	d03b      	beq.n	8012550 <_strtod_l+0xa8>
 80124d8:	2200      	movs	r2, #0
 80124da:	920e      	str	r2, [sp, #56]	@ 0x38
 80124dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80124de:	782a      	ldrb	r2, [r5, #0]
 80124e0:	2a30      	cmp	r2, #48	@ 0x30
 80124e2:	f040 80b2 	bne.w	801264a <_strtod_l+0x1a2>
 80124e6:	786a      	ldrb	r2, [r5, #1]
 80124e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80124ec:	2a58      	cmp	r2, #88	@ 0x58
 80124ee:	d16e      	bne.n	80125ce <_strtod_l+0x126>
 80124f0:	9302      	str	r3, [sp, #8]
 80124f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80124f4:	9301      	str	r3, [sp, #4]
 80124f6:	ab1a      	add	r3, sp, #104	@ 0x68
 80124f8:	9300      	str	r3, [sp, #0]
 80124fa:	4a8f      	ldr	r2, [pc, #572]	@ (8012738 <_strtod_l+0x290>)
 80124fc:	9805      	ldr	r0, [sp, #20]
 80124fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8012500:	a919      	add	r1, sp, #100	@ 0x64
 8012502:	f002 fc53 	bl	8014dac <__gethex>
 8012506:	f010 060f 	ands.w	r6, r0, #15
 801250a:	4604      	mov	r4, r0
 801250c:	d005      	beq.n	801251a <_strtod_l+0x72>
 801250e:	2e06      	cmp	r6, #6
 8012510:	d128      	bne.n	8012564 <_strtod_l+0xbc>
 8012512:	3501      	adds	r5, #1
 8012514:	2300      	movs	r3, #0
 8012516:	9519      	str	r5, [sp, #100]	@ 0x64
 8012518:	930e      	str	r3, [sp, #56]	@ 0x38
 801251a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801251c:	2b00      	cmp	r3, #0
 801251e:	f040 858e 	bne.w	801303e <_strtod_l+0xb96>
 8012522:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012524:	b1cb      	cbz	r3, 801255a <_strtod_l+0xb2>
 8012526:	4652      	mov	r2, sl
 8012528:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801252c:	ec43 2b10 	vmov	d0, r2, r3
 8012530:	b01f      	add	sp, #124	@ 0x7c
 8012532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012536:	2920      	cmp	r1, #32
 8012538:	d1ce      	bne.n	80124d8 <_strtod_l+0x30>
 801253a:	3201      	adds	r2, #1
 801253c:	e7c1      	b.n	80124c2 <_strtod_l+0x1a>
 801253e:	292d      	cmp	r1, #45	@ 0x2d
 8012540:	d1ca      	bne.n	80124d8 <_strtod_l+0x30>
 8012542:	2101      	movs	r1, #1
 8012544:	910e      	str	r1, [sp, #56]	@ 0x38
 8012546:	1c51      	adds	r1, r2, #1
 8012548:	9119      	str	r1, [sp, #100]	@ 0x64
 801254a:	7852      	ldrb	r2, [r2, #1]
 801254c:	2a00      	cmp	r2, #0
 801254e:	d1c5      	bne.n	80124dc <_strtod_l+0x34>
 8012550:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012552:	9419      	str	r4, [sp, #100]	@ 0x64
 8012554:	2b00      	cmp	r3, #0
 8012556:	f040 8570 	bne.w	801303a <_strtod_l+0xb92>
 801255a:	4652      	mov	r2, sl
 801255c:	465b      	mov	r3, fp
 801255e:	e7e5      	b.n	801252c <_strtod_l+0x84>
 8012560:	2100      	movs	r1, #0
 8012562:	e7ef      	b.n	8012544 <_strtod_l+0x9c>
 8012564:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012566:	b13a      	cbz	r2, 8012578 <_strtod_l+0xd0>
 8012568:	2135      	movs	r1, #53	@ 0x35
 801256a:	a81c      	add	r0, sp, #112	@ 0x70
 801256c:	f003 fb68 	bl	8015c40 <__copybits>
 8012570:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012572:	9805      	ldr	r0, [sp, #20]
 8012574:	f002 ff3e 	bl	80153f4 <_Bfree>
 8012578:	3e01      	subs	r6, #1
 801257a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801257c:	2e04      	cmp	r6, #4
 801257e:	d806      	bhi.n	801258e <_strtod_l+0xe6>
 8012580:	e8df f006 	tbb	[pc, r6]
 8012584:	201d0314 	.word	0x201d0314
 8012588:	14          	.byte	0x14
 8012589:	00          	.byte	0x00
 801258a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801258e:	05e1      	lsls	r1, r4, #23
 8012590:	bf48      	it	mi
 8012592:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8012596:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801259a:	0d1b      	lsrs	r3, r3, #20
 801259c:	051b      	lsls	r3, r3, #20
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d1bb      	bne.n	801251a <_strtod_l+0x72>
 80125a2:	f001 fc8b 	bl	8013ebc <__errno>
 80125a6:	2322      	movs	r3, #34	@ 0x22
 80125a8:	6003      	str	r3, [r0, #0]
 80125aa:	e7b6      	b.n	801251a <_strtod_l+0x72>
 80125ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80125b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80125b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80125b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80125bc:	e7e7      	b.n	801258e <_strtod_l+0xe6>
 80125be:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8012740 <_strtod_l+0x298>
 80125c2:	e7e4      	b.n	801258e <_strtod_l+0xe6>
 80125c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80125c8:	f04f 3aff 	mov.w	sl, #4294967295
 80125cc:	e7df      	b.n	801258e <_strtod_l+0xe6>
 80125ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80125d0:	1c5a      	adds	r2, r3, #1
 80125d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80125d4:	785b      	ldrb	r3, [r3, #1]
 80125d6:	2b30      	cmp	r3, #48	@ 0x30
 80125d8:	d0f9      	beq.n	80125ce <_strtod_l+0x126>
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d09d      	beq.n	801251a <_strtod_l+0x72>
 80125de:	2301      	movs	r3, #1
 80125e0:	2700      	movs	r7, #0
 80125e2:	9308      	str	r3, [sp, #32]
 80125e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80125e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80125e8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80125ea:	46b9      	mov	r9, r7
 80125ec:	220a      	movs	r2, #10
 80125ee:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80125f0:	7805      	ldrb	r5, [r0, #0]
 80125f2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80125f6:	b2d9      	uxtb	r1, r3
 80125f8:	2909      	cmp	r1, #9
 80125fa:	d928      	bls.n	801264e <_strtod_l+0x1a6>
 80125fc:	494f      	ldr	r1, [pc, #316]	@ (801273c <_strtod_l+0x294>)
 80125fe:	2201      	movs	r2, #1
 8012600:	f001 fb36 	bl	8013c70 <strncmp>
 8012604:	2800      	cmp	r0, #0
 8012606:	d032      	beq.n	801266e <_strtod_l+0x1c6>
 8012608:	2000      	movs	r0, #0
 801260a:	462a      	mov	r2, r5
 801260c:	900a      	str	r0, [sp, #40]	@ 0x28
 801260e:	464d      	mov	r5, r9
 8012610:	4603      	mov	r3, r0
 8012612:	2a65      	cmp	r2, #101	@ 0x65
 8012614:	d001      	beq.n	801261a <_strtod_l+0x172>
 8012616:	2a45      	cmp	r2, #69	@ 0x45
 8012618:	d114      	bne.n	8012644 <_strtod_l+0x19c>
 801261a:	b91d      	cbnz	r5, 8012624 <_strtod_l+0x17c>
 801261c:	9a08      	ldr	r2, [sp, #32]
 801261e:	4302      	orrs	r2, r0
 8012620:	d096      	beq.n	8012550 <_strtod_l+0xa8>
 8012622:	2500      	movs	r5, #0
 8012624:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8012626:	1c62      	adds	r2, r4, #1
 8012628:	9219      	str	r2, [sp, #100]	@ 0x64
 801262a:	7862      	ldrb	r2, [r4, #1]
 801262c:	2a2b      	cmp	r2, #43	@ 0x2b
 801262e:	d07a      	beq.n	8012726 <_strtod_l+0x27e>
 8012630:	2a2d      	cmp	r2, #45	@ 0x2d
 8012632:	d07e      	beq.n	8012732 <_strtod_l+0x28a>
 8012634:	f04f 0c00 	mov.w	ip, #0
 8012638:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801263c:	2909      	cmp	r1, #9
 801263e:	f240 8085 	bls.w	801274c <_strtod_l+0x2a4>
 8012642:	9419      	str	r4, [sp, #100]	@ 0x64
 8012644:	f04f 0800 	mov.w	r8, #0
 8012648:	e0a5      	b.n	8012796 <_strtod_l+0x2ee>
 801264a:	2300      	movs	r3, #0
 801264c:	e7c8      	b.n	80125e0 <_strtod_l+0x138>
 801264e:	f1b9 0f08 	cmp.w	r9, #8
 8012652:	bfd8      	it	le
 8012654:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8012656:	f100 0001 	add.w	r0, r0, #1
 801265a:	bfda      	itte	le
 801265c:	fb02 3301 	mlale	r3, r2, r1, r3
 8012660:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8012662:	fb02 3707 	mlagt	r7, r2, r7, r3
 8012666:	f109 0901 	add.w	r9, r9, #1
 801266a:	9019      	str	r0, [sp, #100]	@ 0x64
 801266c:	e7bf      	b.n	80125ee <_strtod_l+0x146>
 801266e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012670:	1c5a      	adds	r2, r3, #1
 8012672:	9219      	str	r2, [sp, #100]	@ 0x64
 8012674:	785a      	ldrb	r2, [r3, #1]
 8012676:	f1b9 0f00 	cmp.w	r9, #0
 801267a:	d03b      	beq.n	80126f4 <_strtod_l+0x24c>
 801267c:	900a      	str	r0, [sp, #40]	@ 0x28
 801267e:	464d      	mov	r5, r9
 8012680:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8012684:	2b09      	cmp	r3, #9
 8012686:	d912      	bls.n	80126ae <_strtod_l+0x206>
 8012688:	2301      	movs	r3, #1
 801268a:	e7c2      	b.n	8012612 <_strtod_l+0x16a>
 801268c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801268e:	1c5a      	adds	r2, r3, #1
 8012690:	9219      	str	r2, [sp, #100]	@ 0x64
 8012692:	785a      	ldrb	r2, [r3, #1]
 8012694:	3001      	adds	r0, #1
 8012696:	2a30      	cmp	r2, #48	@ 0x30
 8012698:	d0f8      	beq.n	801268c <_strtod_l+0x1e4>
 801269a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801269e:	2b08      	cmp	r3, #8
 80126a0:	f200 84d2 	bhi.w	8013048 <_strtod_l+0xba0>
 80126a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80126a6:	900a      	str	r0, [sp, #40]	@ 0x28
 80126a8:	2000      	movs	r0, #0
 80126aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80126ac:	4605      	mov	r5, r0
 80126ae:	3a30      	subs	r2, #48	@ 0x30
 80126b0:	f100 0301 	add.w	r3, r0, #1
 80126b4:	d018      	beq.n	80126e8 <_strtod_l+0x240>
 80126b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80126b8:	4419      	add	r1, r3
 80126ba:	910a      	str	r1, [sp, #40]	@ 0x28
 80126bc:	462e      	mov	r6, r5
 80126be:	f04f 0e0a 	mov.w	lr, #10
 80126c2:	1c71      	adds	r1, r6, #1
 80126c4:	eba1 0c05 	sub.w	ip, r1, r5
 80126c8:	4563      	cmp	r3, ip
 80126ca:	dc15      	bgt.n	80126f8 <_strtod_l+0x250>
 80126cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80126d0:	182b      	adds	r3, r5, r0
 80126d2:	2b08      	cmp	r3, #8
 80126d4:	f105 0501 	add.w	r5, r5, #1
 80126d8:	4405      	add	r5, r0
 80126da:	dc1a      	bgt.n	8012712 <_strtod_l+0x26a>
 80126dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80126de:	230a      	movs	r3, #10
 80126e0:	fb03 2301 	mla	r3, r3, r1, r2
 80126e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80126e6:	2300      	movs	r3, #0
 80126e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80126ea:	1c51      	adds	r1, r2, #1
 80126ec:	9119      	str	r1, [sp, #100]	@ 0x64
 80126ee:	7852      	ldrb	r2, [r2, #1]
 80126f0:	4618      	mov	r0, r3
 80126f2:	e7c5      	b.n	8012680 <_strtod_l+0x1d8>
 80126f4:	4648      	mov	r0, r9
 80126f6:	e7ce      	b.n	8012696 <_strtod_l+0x1ee>
 80126f8:	2e08      	cmp	r6, #8
 80126fa:	dc05      	bgt.n	8012708 <_strtod_l+0x260>
 80126fc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80126fe:	fb0e f606 	mul.w	r6, lr, r6
 8012702:	960b      	str	r6, [sp, #44]	@ 0x2c
 8012704:	460e      	mov	r6, r1
 8012706:	e7dc      	b.n	80126c2 <_strtod_l+0x21a>
 8012708:	2910      	cmp	r1, #16
 801270a:	bfd8      	it	le
 801270c:	fb0e f707 	mulle.w	r7, lr, r7
 8012710:	e7f8      	b.n	8012704 <_strtod_l+0x25c>
 8012712:	2b0f      	cmp	r3, #15
 8012714:	bfdc      	itt	le
 8012716:	230a      	movle	r3, #10
 8012718:	fb03 2707 	mlale	r7, r3, r7, r2
 801271c:	e7e3      	b.n	80126e6 <_strtod_l+0x23e>
 801271e:	2300      	movs	r3, #0
 8012720:	930a      	str	r3, [sp, #40]	@ 0x28
 8012722:	2301      	movs	r3, #1
 8012724:	e77a      	b.n	801261c <_strtod_l+0x174>
 8012726:	f04f 0c00 	mov.w	ip, #0
 801272a:	1ca2      	adds	r2, r4, #2
 801272c:	9219      	str	r2, [sp, #100]	@ 0x64
 801272e:	78a2      	ldrb	r2, [r4, #2]
 8012730:	e782      	b.n	8012638 <_strtod_l+0x190>
 8012732:	f04f 0c01 	mov.w	ip, #1
 8012736:	e7f8      	b.n	801272a <_strtod_l+0x282>
 8012738:	08018c8c 	.word	0x08018c8c
 801273c:	08018a4c 	.word	0x08018a4c
 8012740:	7ff00000 	.word	0x7ff00000
 8012744:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012746:	1c51      	adds	r1, r2, #1
 8012748:	9119      	str	r1, [sp, #100]	@ 0x64
 801274a:	7852      	ldrb	r2, [r2, #1]
 801274c:	2a30      	cmp	r2, #48	@ 0x30
 801274e:	d0f9      	beq.n	8012744 <_strtod_l+0x29c>
 8012750:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8012754:	2908      	cmp	r1, #8
 8012756:	f63f af75 	bhi.w	8012644 <_strtod_l+0x19c>
 801275a:	3a30      	subs	r2, #48	@ 0x30
 801275c:	9209      	str	r2, [sp, #36]	@ 0x24
 801275e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012760:	920f      	str	r2, [sp, #60]	@ 0x3c
 8012762:	f04f 080a 	mov.w	r8, #10
 8012766:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012768:	1c56      	adds	r6, r2, #1
 801276a:	9619      	str	r6, [sp, #100]	@ 0x64
 801276c:	7852      	ldrb	r2, [r2, #1]
 801276e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8012772:	f1be 0f09 	cmp.w	lr, #9
 8012776:	d939      	bls.n	80127ec <_strtod_l+0x344>
 8012778:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801277a:	1a76      	subs	r6, r6, r1
 801277c:	2e08      	cmp	r6, #8
 801277e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8012782:	dc03      	bgt.n	801278c <_strtod_l+0x2e4>
 8012784:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012786:	4588      	cmp	r8, r1
 8012788:	bfa8      	it	ge
 801278a:	4688      	movge	r8, r1
 801278c:	f1bc 0f00 	cmp.w	ip, #0
 8012790:	d001      	beq.n	8012796 <_strtod_l+0x2ee>
 8012792:	f1c8 0800 	rsb	r8, r8, #0
 8012796:	2d00      	cmp	r5, #0
 8012798:	d14e      	bne.n	8012838 <_strtod_l+0x390>
 801279a:	9908      	ldr	r1, [sp, #32]
 801279c:	4308      	orrs	r0, r1
 801279e:	f47f aebc 	bne.w	801251a <_strtod_l+0x72>
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	f47f aed4 	bne.w	8012550 <_strtod_l+0xa8>
 80127a8:	2a69      	cmp	r2, #105	@ 0x69
 80127aa:	d028      	beq.n	80127fe <_strtod_l+0x356>
 80127ac:	dc25      	bgt.n	80127fa <_strtod_l+0x352>
 80127ae:	2a49      	cmp	r2, #73	@ 0x49
 80127b0:	d025      	beq.n	80127fe <_strtod_l+0x356>
 80127b2:	2a4e      	cmp	r2, #78	@ 0x4e
 80127b4:	f47f aecc 	bne.w	8012550 <_strtod_l+0xa8>
 80127b8:	499a      	ldr	r1, [pc, #616]	@ (8012a24 <_strtod_l+0x57c>)
 80127ba:	a819      	add	r0, sp, #100	@ 0x64
 80127bc:	f002 fd18 	bl	80151f0 <__match>
 80127c0:	2800      	cmp	r0, #0
 80127c2:	f43f aec5 	beq.w	8012550 <_strtod_l+0xa8>
 80127c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	2b28      	cmp	r3, #40	@ 0x28
 80127cc:	d12e      	bne.n	801282c <_strtod_l+0x384>
 80127ce:	4996      	ldr	r1, [pc, #600]	@ (8012a28 <_strtod_l+0x580>)
 80127d0:	aa1c      	add	r2, sp, #112	@ 0x70
 80127d2:	a819      	add	r0, sp, #100	@ 0x64
 80127d4:	f002 fd20 	bl	8015218 <__hexnan>
 80127d8:	2805      	cmp	r0, #5
 80127da:	d127      	bne.n	801282c <_strtod_l+0x384>
 80127dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80127de:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80127e2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80127e6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80127ea:	e696      	b.n	801251a <_strtod_l+0x72>
 80127ec:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80127ee:	fb08 2101 	mla	r1, r8, r1, r2
 80127f2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80127f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80127f8:	e7b5      	b.n	8012766 <_strtod_l+0x2be>
 80127fa:	2a6e      	cmp	r2, #110	@ 0x6e
 80127fc:	e7da      	b.n	80127b4 <_strtod_l+0x30c>
 80127fe:	498b      	ldr	r1, [pc, #556]	@ (8012a2c <_strtod_l+0x584>)
 8012800:	a819      	add	r0, sp, #100	@ 0x64
 8012802:	f002 fcf5 	bl	80151f0 <__match>
 8012806:	2800      	cmp	r0, #0
 8012808:	f43f aea2 	beq.w	8012550 <_strtod_l+0xa8>
 801280c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801280e:	4988      	ldr	r1, [pc, #544]	@ (8012a30 <_strtod_l+0x588>)
 8012810:	3b01      	subs	r3, #1
 8012812:	a819      	add	r0, sp, #100	@ 0x64
 8012814:	9319      	str	r3, [sp, #100]	@ 0x64
 8012816:	f002 fceb 	bl	80151f0 <__match>
 801281a:	b910      	cbnz	r0, 8012822 <_strtod_l+0x37a>
 801281c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801281e:	3301      	adds	r3, #1
 8012820:	9319      	str	r3, [sp, #100]	@ 0x64
 8012822:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8012a40 <_strtod_l+0x598>
 8012826:	f04f 0a00 	mov.w	sl, #0
 801282a:	e676      	b.n	801251a <_strtod_l+0x72>
 801282c:	4881      	ldr	r0, [pc, #516]	@ (8012a34 <_strtod_l+0x58c>)
 801282e:	f001 fb8b 	bl	8013f48 <nan>
 8012832:	ec5b ab10 	vmov	sl, fp, d0
 8012836:	e670      	b.n	801251a <_strtod_l+0x72>
 8012838:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801283a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801283c:	eba8 0303 	sub.w	r3, r8, r3
 8012840:	f1b9 0f00 	cmp.w	r9, #0
 8012844:	bf08      	it	eq
 8012846:	46a9      	moveq	r9, r5
 8012848:	2d10      	cmp	r5, #16
 801284a:	9309      	str	r3, [sp, #36]	@ 0x24
 801284c:	462c      	mov	r4, r5
 801284e:	bfa8      	it	ge
 8012850:	2410      	movge	r4, #16
 8012852:	f7ed fe67 	bl	8000524 <__aeabi_ui2d>
 8012856:	2d09      	cmp	r5, #9
 8012858:	4682      	mov	sl, r0
 801285a:	468b      	mov	fp, r1
 801285c:	dc13      	bgt.n	8012886 <_strtod_l+0x3de>
 801285e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012860:	2b00      	cmp	r3, #0
 8012862:	f43f ae5a 	beq.w	801251a <_strtod_l+0x72>
 8012866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012868:	dd78      	ble.n	801295c <_strtod_l+0x4b4>
 801286a:	2b16      	cmp	r3, #22
 801286c:	dc5f      	bgt.n	801292e <_strtod_l+0x486>
 801286e:	4972      	ldr	r1, [pc, #456]	@ (8012a38 <_strtod_l+0x590>)
 8012870:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012874:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012878:	4652      	mov	r2, sl
 801287a:	465b      	mov	r3, fp
 801287c:	f7ed fecc 	bl	8000618 <__aeabi_dmul>
 8012880:	4682      	mov	sl, r0
 8012882:	468b      	mov	fp, r1
 8012884:	e649      	b.n	801251a <_strtod_l+0x72>
 8012886:	4b6c      	ldr	r3, [pc, #432]	@ (8012a38 <_strtod_l+0x590>)
 8012888:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801288c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8012890:	f7ed fec2 	bl	8000618 <__aeabi_dmul>
 8012894:	4682      	mov	sl, r0
 8012896:	4638      	mov	r0, r7
 8012898:	468b      	mov	fp, r1
 801289a:	f7ed fe43 	bl	8000524 <__aeabi_ui2d>
 801289e:	4602      	mov	r2, r0
 80128a0:	460b      	mov	r3, r1
 80128a2:	4650      	mov	r0, sl
 80128a4:	4659      	mov	r1, fp
 80128a6:	f7ed fd01 	bl	80002ac <__adddf3>
 80128aa:	2d0f      	cmp	r5, #15
 80128ac:	4682      	mov	sl, r0
 80128ae:	468b      	mov	fp, r1
 80128b0:	ddd5      	ble.n	801285e <_strtod_l+0x3b6>
 80128b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128b4:	1b2c      	subs	r4, r5, r4
 80128b6:	441c      	add	r4, r3
 80128b8:	2c00      	cmp	r4, #0
 80128ba:	f340 8093 	ble.w	80129e4 <_strtod_l+0x53c>
 80128be:	f014 030f 	ands.w	r3, r4, #15
 80128c2:	d00a      	beq.n	80128da <_strtod_l+0x432>
 80128c4:	495c      	ldr	r1, [pc, #368]	@ (8012a38 <_strtod_l+0x590>)
 80128c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80128ca:	4652      	mov	r2, sl
 80128cc:	465b      	mov	r3, fp
 80128ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128d2:	f7ed fea1 	bl	8000618 <__aeabi_dmul>
 80128d6:	4682      	mov	sl, r0
 80128d8:	468b      	mov	fp, r1
 80128da:	f034 040f 	bics.w	r4, r4, #15
 80128de:	d073      	beq.n	80129c8 <_strtod_l+0x520>
 80128e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80128e4:	dd49      	ble.n	801297a <_strtod_l+0x4d2>
 80128e6:	2400      	movs	r4, #0
 80128e8:	46a0      	mov	r8, r4
 80128ea:	940b      	str	r4, [sp, #44]	@ 0x2c
 80128ec:	46a1      	mov	r9, r4
 80128ee:	9a05      	ldr	r2, [sp, #20]
 80128f0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8012a40 <_strtod_l+0x598>
 80128f4:	2322      	movs	r3, #34	@ 0x22
 80128f6:	6013      	str	r3, [r2, #0]
 80128f8:	f04f 0a00 	mov.w	sl, #0
 80128fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80128fe:	2b00      	cmp	r3, #0
 8012900:	f43f ae0b 	beq.w	801251a <_strtod_l+0x72>
 8012904:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012906:	9805      	ldr	r0, [sp, #20]
 8012908:	f002 fd74 	bl	80153f4 <_Bfree>
 801290c:	9805      	ldr	r0, [sp, #20]
 801290e:	4649      	mov	r1, r9
 8012910:	f002 fd70 	bl	80153f4 <_Bfree>
 8012914:	9805      	ldr	r0, [sp, #20]
 8012916:	4641      	mov	r1, r8
 8012918:	f002 fd6c 	bl	80153f4 <_Bfree>
 801291c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801291e:	9805      	ldr	r0, [sp, #20]
 8012920:	f002 fd68 	bl	80153f4 <_Bfree>
 8012924:	9805      	ldr	r0, [sp, #20]
 8012926:	4621      	mov	r1, r4
 8012928:	f002 fd64 	bl	80153f4 <_Bfree>
 801292c:	e5f5      	b.n	801251a <_strtod_l+0x72>
 801292e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012930:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8012934:	4293      	cmp	r3, r2
 8012936:	dbbc      	blt.n	80128b2 <_strtod_l+0x40a>
 8012938:	4c3f      	ldr	r4, [pc, #252]	@ (8012a38 <_strtod_l+0x590>)
 801293a:	f1c5 050f 	rsb	r5, r5, #15
 801293e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8012942:	4652      	mov	r2, sl
 8012944:	465b      	mov	r3, fp
 8012946:	e9d1 0100 	ldrd	r0, r1, [r1]
 801294a:	f7ed fe65 	bl	8000618 <__aeabi_dmul>
 801294e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012950:	1b5d      	subs	r5, r3, r5
 8012952:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8012956:	e9d4 2300 	ldrd	r2, r3, [r4]
 801295a:	e78f      	b.n	801287c <_strtod_l+0x3d4>
 801295c:	3316      	adds	r3, #22
 801295e:	dba8      	blt.n	80128b2 <_strtod_l+0x40a>
 8012960:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012962:	eba3 0808 	sub.w	r8, r3, r8
 8012966:	4b34      	ldr	r3, [pc, #208]	@ (8012a38 <_strtod_l+0x590>)
 8012968:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801296c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8012970:	4650      	mov	r0, sl
 8012972:	4659      	mov	r1, fp
 8012974:	f7ed ff7a 	bl	800086c <__aeabi_ddiv>
 8012978:	e782      	b.n	8012880 <_strtod_l+0x3d8>
 801297a:	2300      	movs	r3, #0
 801297c:	4f2f      	ldr	r7, [pc, #188]	@ (8012a3c <_strtod_l+0x594>)
 801297e:	1124      	asrs	r4, r4, #4
 8012980:	4650      	mov	r0, sl
 8012982:	4659      	mov	r1, fp
 8012984:	461e      	mov	r6, r3
 8012986:	2c01      	cmp	r4, #1
 8012988:	dc21      	bgt.n	80129ce <_strtod_l+0x526>
 801298a:	b10b      	cbz	r3, 8012990 <_strtod_l+0x4e8>
 801298c:	4682      	mov	sl, r0
 801298e:	468b      	mov	fp, r1
 8012990:	492a      	ldr	r1, [pc, #168]	@ (8012a3c <_strtod_l+0x594>)
 8012992:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8012996:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801299a:	4652      	mov	r2, sl
 801299c:	465b      	mov	r3, fp
 801299e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80129a2:	f7ed fe39 	bl	8000618 <__aeabi_dmul>
 80129a6:	4b26      	ldr	r3, [pc, #152]	@ (8012a40 <_strtod_l+0x598>)
 80129a8:	460a      	mov	r2, r1
 80129aa:	400b      	ands	r3, r1
 80129ac:	4925      	ldr	r1, [pc, #148]	@ (8012a44 <_strtod_l+0x59c>)
 80129ae:	428b      	cmp	r3, r1
 80129b0:	4682      	mov	sl, r0
 80129b2:	d898      	bhi.n	80128e6 <_strtod_l+0x43e>
 80129b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80129b8:	428b      	cmp	r3, r1
 80129ba:	bf86      	itte	hi
 80129bc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8012a48 <_strtod_l+0x5a0>
 80129c0:	f04f 3aff 	movhi.w	sl, #4294967295
 80129c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80129c8:	2300      	movs	r3, #0
 80129ca:	9308      	str	r3, [sp, #32]
 80129cc:	e076      	b.n	8012abc <_strtod_l+0x614>
 80129ce:	07e2      	lsls	r2, r4, #31
 80129d0:	d504      	bpl.n	80129dc <_strtod_l+0x534>
 80129d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80129d6:	f7ed fe1f 	bl	8000618 <__aeabi_dmul>
 80129da:	2301      	movs	r3, #1
 80129dc:	3601      	adds	r6, #1
 80129de:	1064      	asrs	r4, r4, #1
 80129e0:	3708      	adds	r7, #8
 80129e2:	e7d0      	b.n	8012986 <_strtod_l+0x4de>
 80129e4:	d0f0      	beq.n	80129c8 <_strtod_l+0x520>
 80129e6:	4264      	negs	r4, r4
 80129e8:	f014 020f 	ands.w	r2, r4, #15
 80129ec:	d00a      	beq.n	8012a04 <_strtod_l+0x55c>
 80129ee:	4b12      	ldr	r3, [pc, #72]	@ (8012a38 <_strtod_l+0x590>)
 80129f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80129f4:	4650      	mov	r0, sl
 80129f6:	4659      	mov	r1, fp
 80129f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129fc:	f7ed ff36 	bl	800086c <__aeabi_ddiv>
 8012a00:	4682      	mov	sl, r0
 8012a02:	468b      	mov	fp, r1
 8012a04:	1124      	asrs	r4, r4, #4
 8012a06:	d0df      	beq.n	80129c8 <_strtod_l+0x520>
 8012a08:	2c1f      	cmp	r4, #31
 8012a0a:	dd1f      	ble.n	8012a4c <_strtod_l+0x5a4>
 8012a0c:	2400      	movs	r4, #0
 8012a0e:	46a0      	mov	r8, r4
 8012a10:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012a12:	46a1      	mov	r9, r4
 8012a14:	9a05      	ldr	r2, [sp, #20]
 8012a16:	2322      	movs	r3, #34	@ 0x22
 8012a18:	f04f 0a00 	mov.w	sl, #0
 8012a1c:	f04f 0b00 	mov.w	fp, #0
 8012a20:	6013      	str	r3, [r2, #0]
 8012a22:	e76b      	b.n	80128fc <_strtod_l+0x454>
 8012a24:	08018a5b 	.word	0x08018a5b
 8012a28:	08018c78 	.word	0x08018c78
 8012a2c:	08018a53 	.word	0x08018a53
 8012a30:	08018b3a 	.word	0x08018b3a
 8012a34:	08018b36 	.word	0x08018b36
 8012a38:	08018e00 	.word	0x08018e00
 8012a3c:	08018dd8 	.word	0x08018dd8
 8012a40:	7ff00000 	.word	0x7ff00000
 8012a44:	7ca00000 	.word	0x7ca00000
 8012a48:	7fefffff 	.word	0x7fefffff
 8012a4c:	f014 0310 	ands.w	r3, r4, #16
 8012a50:	bf18      	it	ne
 8012a52:	236a      	movne	r3, #106	@ 0x6a
 8012a54:	4ea9      	ldr	r6, [pc, #676]	@ (8012cfc <_strtod_l+0x854>)
 8012a56:	9308      	str	r3, [sp, #32]
 8012a58:	4650      	mov	r0, sl
 8012a5a:	4659      	mov	r1, fp
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	07e7      	lsls	r7, r4, #31
 8012a60:	d504      	bpl.n	8012a6c <_strtod_l+0x5c4>
 8012a62:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012a66:	f7ed fdd7 	bl	8000618 <__aeabi_dmul>
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	1064      	asrs	r4, r4, #1
 8012a6e:	f106 0608 	add.w	r6, r6, #8
 8012a72:	d1f4      	bne.n	8012a5e <_strtod_l+0x5b6>
 8012a74:	b10b      	cbz	r3, 8012a7a <_strtod_l+0x5d2>
 8012a76:	4682      	mov	sl, r0
 8012a78:	468b      	mov	fp, r1
 8012a7a:	9b08      	ldr	r3, [sp, #32]
 8012a7c:	b1b3      	cbz	r3, 8012aac <_strtod_l+0x604>
 8012a7e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8012a82:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	4659      	mov	r1, fp
 8012a8a:	dd0f      	ble.n	8012aac <_strtod_l+0x604>
 8012a8c:	2b1f      	cmp	r3, #31
 8012a8e:	dd56      	ble.n	8012b3e <_strtod_l+0x696>
 8012a90:	2b34      	cmp	r3, #52	@ 0x34
 8012a92:	bfde      	ittt	le
 8012a94:	f04f 33ff 	movle.w	r3, #4294967295
 8012a98:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8012a9c:	4093      	lslle	r3, r2
 8012a9e:	f04f 0a00 	mov.w	sl, #0
 8012aa2:	bfcc      	ite	gt
 8012aa4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8012aa8:	ea03 0b01 	andle.w	fp, r3, r1
 8012aac:	2200      	movs	r2, #0
 8012aae:	2300      	movs	r3, #0
 8012ab0:	4650      	mov	r0, sl
 8012ab2:	4659      	mov	r1, fp
 8012ab4:	f7ee f818 	bl	8000ae8 <__aeabi_dcmpeq>
 8012ab8:	2800      	cmp	r0, #0
 8012aba:	d1a7      	bne.n	8012a0c <_strtod_l+0x564>
 8012abc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012abe:	9300      	str	r3, [sp, #0]
 8012ac0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012ac2:	9805      	ldr	r0, [sp, #20]
 8012ac4:	462b      	mov	r3, r5
 8012ac6:	464a      	mov	r2, r9
 8012ac8:	f002 fcfc 	bl	80154c4 <__s2b>
 8012acc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8012ace:	2800      	cmp	r0, #0
 8012ad0:	f43f af09 	beq.w	80128e6 <_strtod_l+0x43e>
 8012ad4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ad6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012ad8:	2a00      	cmp	r2, #0
 8012ada:	eba3 0308 	sub.w	r3, r3, r8
 8012ade:	bfa8      	it	ge
 8012ae0:	2300      	movge	r3, #0
 8012ae2:	9312      	str	r3, [sp, #72]	@ 0x48
 8012ae4:	2400      	movs	r4, #0
 8012ae6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012aea:	9316      	str	r3, [sp, #88]	@ 0x58
 8012aec:	46a0      	mov	r8, r4
 8012aee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012af0:	9805      	ldr	r0, [sp, #20]
 8012af2:	6859      	ldr	r1, [r3, #4]
 8012af4:	f002 fc3e 	bl	8015374 <_Balloc>
 8012af8:	4681      	mov	r9, r0
 8012afa:	2800      	cmp	r0, #0
 8012afc:	f43f aef7 	beq.w	80128ee <_strtod_l+0x446>
 8012b00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012b02:	691a      	ldr	r2, [r3, #16]
 8012b04:	3202      	adds	r2, #2
 8012b06:	f103 010c 	add.w	r1, r3, #12
 8012b0a:	0092      	lsls	r2, r2, #2
 8012b0c:	300c      	adds	r0, #12
 8012b0e:	f001 fa0a 	bl	8013f26 <memcpy>
 8012b12:	ec4b ab10 	vmov	d0, sl, fp
 8012b16:	9805      	ldr	r0, [sp, #20]
 8012b18:	aa1c      	add	r2, sp, #112	@ 0x70
 8012b1a:	a91b      	add	r1, sp, #108	@ 0x6c
 8012b1c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8012b20:	f003 f804 	bl	8015b2c <__d2b>
 8012b24:	901a      	str	r0, [sp, #104]	@ 0x68
 8012b26:	2800      	cmp	r0, #0
 8012b28:	f43f aee1 	beq.w	80128ee <_strtod_l+0x446>
 8012b2c:	9805      	ldr	r0, [sp, #20]
 8012b2e:	2101      	movs	r1, #1
 8012b30:	f002 fd5e 	bl	80155f0 <__i2b>
 8012b34:	4680      	mov	r8, r0
 8012b36:	b948      	cbnz	r0, 8012b4c <_strtod_l+0x6a4>
 8012b38:	f04f 0800 	mov.w	r8, #0
 8012b3c:	e6d7      	b.n	80128ee <_strtod_l+0x446>
 8012b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8012b42:	fa02 f303 	lsl.w	r3, r2, r3
 8012b46:	ea03 0a0a 	and.w	sl, r3, sl
 8012b4a:	e7af      	b.n	8012aac <_strtod_l+0x604>
 8012b4c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8012b4e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012b50:	2d00      	cmp	r5, #0
 8012b52:	bfab      	itete	ge
 8012b54:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8012b56:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8012b58:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8012b5a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8012b5c:	bfac      	ite	ge
 8012b5e:	18ef      	addge	r7, r5, r3
 8012b60:	1b5e      	sublt	r6, r3, r5
 8012b62:	9b08      	ldr	r3, [sp, #32]
 8012b64:	1aed      	subs	r5, r5, r3
 8012b66:	4415      	add	r5, r2
 8012b68:	4b65      	ldr	r3, [pc, #404]	@ (8012d00 <_strtod_l+0x858>)
 8012b6a:	3d01      	subs	r5, #1
 8012b6c:	429d      	cmp	r5, r3
 8012b6e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012b72:	da50      	bge.n	8012c16 <_strtod_l+0x76e>
 8012b74:	1b5b      	subs	r3, r3, r5
 8012b76:	2b1f      	cmp	r3, #31
 8012b78:	eba2 0203 	sub.w	r2, r2, r3
 8012b7c:	f04f 0101 	mov.w	r1, #1
 8012b80:	dc3d      	bgt.n	8012bfe <_strtod_l+0x756>
 8012b82:	fa01 f303 	lsl.w	r3, r1, r3
 8012b86:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012b88:	2300      	movs	r3, #0
 8012b8a:	9310      	str	r3, [sp, #64]	@ 0x40
 8012b8c:	18bd      	adds	r5, r7, r2
 8012b8e:	9b08      	ldr	r3, [sp, #32]
 8012b90:	42af      	cmp	r7, r5
 8012b92:	4416      	add	r6, r2
 8012b94:	441e      	add	r6, r3
 8012b96:	463b      	mov	r3, r7
 8012b98:	bfa8      	it	ge
 8012b9a:	462b      	movge	r3, r5
 8012b9c:	42b3      	cmp	r3, r6
 8012b9e:	bfa8      	it	ge
 8012ba0:	4633      	movge	r3, r6
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	bfc2      	ittt	gt
 8012ba6:	1aed      	subgt	r5, r5, r3
 8012ba8:	1af6      	subgt	r6, r6, r3
 8012baa:	1aff      	subgt	r7, r7, r3
 8012bac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	dd16      	ble.n	8012be0 <_strtod_l+0x738>
 8012bb2:	4641      	mov	r1, r8
 8012bb4:	9805      	ldr	r0, [sp, #20]
 8012bb6:	461a      	mov	r2, r3
 8012bb8:	f002 fdd2 	bl	8015760 <__pow5mult>
 8012bbc:	4680      	mov	r8, r0
 8012bbe:	2800      	cmp	r0, #0
 8012bc0:	d0ba      	beq.n	8012b38 <_strtod_l+0x690>
 8012bc2:	4601      	mov	r1, r0
 8012bc4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012bc6:	9805      	ldr	r0, [sp, #20]
 8012bc8:	f002 fd28 	bl	801561c <__multiply>
 8012bcc:	900a      	str	r0, [sp, #40]	@ 0x28
 8012bce:	2800      	cmp	r0, #0
 8012bd0:	f43f ae8d 	beq.w	80128ee <_strtod_l+0x446>
 8012bd4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012bd6:	9805      	ldr	r0, [sp, #20]
 8012bd8:	f002 fc0c 	bl	80153f4 <_Bfree>
 8012bdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012bde:	931a      	str	r3, [sp, #104]	@ 0x68
 8012be0:	2d00      	cmp	r5, #0
 8012be2:	dc1d      	bgt.n	8012c20 <_strtod_l+0x778>
 8012be4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	dd23      	ble.n	8012c32 <_strtod_l+0x78a>
 8012bea:	4649      	mov	r1, r9
 8012bec:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8012bee:	9805      	ldr	r0, [sp, #20]
 8012bf0:	f002 fdb6 	bl	8015760 <__pow5mult>
 8012bf4:	4681      	mov	r9, r0
 8012bf6:	b9e0      	cbnz	r0, 8012c32 <_strtod_l+0x78a>
 8012bf8:	f04f 0900 	mov.w	r9, #0
 8012bfc:	e677      	b.n	80128ee <_strtod_l+0x446>
 8012bfe:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8012c02:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8012c06:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8012c0a:	35e2      	adds	r5, #226	@ 0xe2
 8012c0c:	fa01 f305 	lsl.w	r3, r1, r5
 8012c10:	9310      	str	r3, [sp, #64]	@ 0x40
 8012c12:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012c14:	e7ba      	b.n	8012b8c <_strtod_l+0x6e4>
 8012c16:	2300      	movs	r3, #0
 8012c18:	9310      	str	r3, [sp, #64]	@ 0x40
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012c1e:	e7b5      	b.n	8012b8c <_strtod_l+0x6e4>
 8012c20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012c22:	9805      	ldr	r0, [sp, #20]
 8012c24:	462a      	mov	r2, r5
 8012c26:	f002 fdf5 	bl	8015814 <__lshift>
 8012c2a:	901a      	str	r0, [sp, #104]	@ 0x68
 8012c2c:	2800      	cmp	r0, #0
 8012c2e:	d1d9      	bne.n	8012be4 <_strtod_l+0x73c>
 8012c30:	e65d      	b.n	80128ee <_strtod_l+0x446>
 8012c32:	2e00      	cmp	r6, #0
 8012c34:	dd07      	ble.n	8012c46 <_strtod_l+0x79e>
 8012c36:	4649      	mov	r1, r9
 8012c38:	9805      	ldr	r0, [sp, #20]
 8012c3a:	4632      	mov	r2, r6
 8012c3c:	f002 fdea 	bl	8015814 <__lshift>
 8012c40:	4681      	mov	r9, r0
 8012c42:	2800      	cmp	r0, #0
 8012c44:	d0d8      	beq.n	8012bf8 <_strtod_l+0x750>
 8012c46:	2f00      	cmp	r7, #0
 8012c48:	dd08      	ble.n	8012c5c <_strtod_l+0x7b4>
 8012c4a:	4641      	mov	r1, r8
 8012c4c:	9805      	ldr	r0, [sp, #20]
 8012c4e:	463a      	mov	r2, r7
 8012c50:	f002 fde0 	bl	8015814 <__lshift>
 8012c54:	4680      	mov	r8, r0
 8012c56:	2800      	cmp	r0, #0
 8012c58:	f43f ae49 	beq.w	80128ee <_strtod_l+0x446>
 8012c5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012c5e:	9805      	ldr	r0, [sp, #20]
 8012c60:	464a      	mov	r2, r9
 8012c62:	f002 fe5f 	bl	8015924 <__mdiff>
 8012c66:	4604      	mov	r4, r0
 8012c68:	2800      	cmp	r0, #0
 8012c6a:	f43f ae40 	beq.w	80128ee <_strtod_l+0x446>
 8012c6e:	68c3      	ldr	r3, [r0, #12]
 8012c70:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012c72:	2300      	movs	r3, #0
 8012c74:	60c3      	str	r3, [r0, #12]
 8012c76:	4641      	mov	r1, r8
 8012c78:	f002 fe38 	bl	80158ec <__mcmp>
 8012c7c:	2800      	cmp	r0, #0
 8012c7e:	da45      	bge.n	8012d0c <_strtod_l+0x864>
 8012c80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c82:	ea53 030a 	orrs.w	r3, r3, sl
 8012c86:	d16b      	bne.n	8012d60 <_strtod_l+0x8b8>
 8012c88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d167      	bne.n	8012d60 <_strtod_l+0x8b8>
 8012c90:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012c94:	0d1b      	lsrs	r3, r3, #20
 8012c96:	051b      	lsls	r3, r3, #20
 8012c98:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012c9c:	d960      	bls.n	8012d60 <_strtod_l+0x8b8>
 8012c9e:	6963      	ldr	r3, [r4, #20]
 8012ca0:	b913      	cbnz	r3, 8012ca8 <_strtod_l+0x800>
 8012ca2:	6923      	ldr	r3, [r4, #16]
 8012ca4:	2b01      	cmp	r3, #1
 8012ca6:	dd5b      	ble.n	8012d60 <_strtod_l+0x8b8>
 8012ca8:	4621      	mov	r1, r4
 8012caa:	2201      	movs	r2, #1
 8012cac:	9805      	ldr	r0, [sp, #20]
 8012cae:	f002 fdb1 	bl	8015814 <__lshift>
 8012cb2:	4641      	mov	r1, r8
 8012cb4:	4604      	mov	r4, r0
 8012cb6:	f002 fe19 	bl	80158ec <__mcmp>
 8012cba:	2800      	cmp	r0, #0
 8012cbc:	dd50      	ble.n	8012d60 <_strtod_l+0x8b8>
 8012cbe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012cc2:	9a08      	ldr	r2, [sp, #32]
 8012cc4:	0d1b      	lsrs	r3, r3, #20
 8012cc6:	051b      	lsls	r3, r3, #20
 8012cc8:	2a00      	cmp	r2, #0
 8012cca:	d06a      	beq.n	8012da2 <_strtod_l+0x8fa>
 8012ccc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012cd0:	d867      	bhi.n	8012da2 <_strtod_l+0x8fa>
 8012cd2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8012cd6:	f67f ae9d 	bls.w	8012a14 <_strtod_l+0x56c>
 8012cda:	4b0a      	ldr	r3, [pc, #40]	@ (8012d04 <_strtod_l+0x85c>)
 8012cdc:	4650      	mov	r0, sl
 8012cde:	4659      	mov	r1, fp
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	f7ed fc99 	bl	8000618 <__aeabi_dmul>
 8012ce6:	4b08      	ldr	r3, [pc, #32]	@ (8012d08 <_strtod_l+0x860>)
 8012ce8:	400b      	ands	r3, r1
 8012cea:	4682      	mov	sl, r0
 8012cec:	468b      	mov	fp, r1
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	f47f ae08 	bne.w	8012904 <_strtod_l+0x45c>
 8012cf4:	9a05      	ldr	r2, [sp, #20]
 8012cf6:	2322      	movs	r3, #34	@ 0x22
 8012cf8:	6013      	str	r3, [r2, #0]
 8012cfa:	e603      	b.n	8012904 <_strtod_l+0x45c>
 8012cfc:	08018ca0 	.word	0x08018ca0
 8012d00:	fffffc02 	.word	0xfffffc02
 8012d04:	39500000 	.word	0x39500000
 8012d08:	7ff00000 	.word	0x7ff00000
 8012d0c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8012d10:	d165      	bne.n	8012dde <_strtod_l+0x936>
 8012d12:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012d14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012d18:	b35a      	cbz	r2, 8012d72 <_strtod_l+0x8ca>
 8012d1a:	4a9f      	ldr	r2, [pc, #636]	@ (8012f98 <_strtod_l+0xaf0>)
 8012d1c:	4293      	cmp	r3, r2
 8012d1e:	d12b      	bne.n	8012d78 <_strtod_l+0x8d0>
 8012d20:	9b08      	ldr	r3, [sp, #32]
 8012d22:	4651      	mov	r1, sl
 8012d24:	b303      	cbz	r3, 8012d68 <_strtod_l+0x8c0>
 8012d26:	4b9d      	ldr	r3, [pc, #628]	@ (8012f9c <_strtod_l+0xaf4>)
 8012d28:	465a      	mov	r2, fp
 8012d2a:	4013      	ands	r3, r2
 8012d2c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012d30:	f04f 32ff 	mov.w	r2, #4294967295
 8012d34:	d81b      	bhi.n	8012d6e <_strtod_l+0x8c6>
 8012d36:	0d1b      	lsrs	r3, r3, #20
 8012d38:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8012d40:	4299      	cmp	r1, r3
 8012d42:	d119      	bne.n	8012d78 <_strtod_l+0x8d0>
 8012d44:	4b96      	ldr	r3, [pc, #600]	@ (8012fa0 <_strtod_l+0xaf8>)
 8012d46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012d48:	429a      	cmp	r2, r3
 8012d4a:	d102      	bne.n	8012d52 <_strtod_l+0x8aa>
 8012d4c:	3101      	adds	r1, #1
 8012d4e:	f43f adce 	beq.w	80128ee <_strtod_l+0x446>
 8012d52:	4b92      	ldr	r3, [pc, #584]	@ (8012f9c <_strtod_l+0xaf4>)
 8012d54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012d56:	401a      	ands	r2, r3
 8012d58:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8012d5c:	f04f 0a00 	mov.w	sl, #0
 8012d60:	9b08      	ldr	r3, [sp, #32]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d1b9      	bne.n	8012cda <_strtod_l+0x832>
 8012d66:	e5cd      	b.n	8012904 <_strtod_l+0x45c>
 8012d68:	f04f 33ff 	mov.w	r3, #4294967295
 8012d6c:	e7e8      	b.n	8012d40 <_strtod_l+0x898>
 8012d6e:	4613      	mov	r3, r2
 8012d70:	e7e6      	b.n	8012d40 <_strtod_l+0x898>
 8012d72:	ea53 030a 	orrs.w	r3, r3, sl
 8012d76:	d0a2      	beq.n	8012cbe <_strtod_l+0x816>
 8012d78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012d7a:	b1db      	cbz	r3, 8012db4 <_strtod_l+0x90c>
 8012d7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012d7e:	4213      	tst	r3, r2
 8012d80:	d0ee      	beq.n	8012d60 <_strtod_l+0x8b8>
 8012d82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d84:	9a08      	ldr	r2, [sp, #32]
 8012d86:	4650      	mov	r0, sl
 8012d88:	4659      	mov	r1, fp
 8012d8a:	b1bb      	cbz	r3, 8012dbc <_strtod_l+0x914>
 8012d8c:	f7ff fb6e 	bl	801246c <sulp>
 8012d90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012d94:	ec53 2b10 	vmov	r2, r3, d0
 8012d98:	f7ed fa88 	bl	80002ac <__adddf3>
 8012d9c:	4682      	mov	sl, r0
 8012d9e:	468b      	mov	fp, r1
 8012da0:	e7de      	b.n	8012d60 <_strtod_l+0x8b8>
 8012da2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012da6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012daa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012dae:	f04f 3aff 	mov.w	sl, #4294967295
 8012db2:	e7d5      	b.n	8012d60 <_strtod_l+0x8b8>
 8012db4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012db6:	ea13 0f0a 	tst.w	r3, sl
 8012dba:	e7e1      	b.n	8012d80 <_strtod_l+0x8d8>
 8012dbc:	f7ff fb56 	bl	801246c <sulp>
 8012dc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012dc4:	ec53 2b10 	vmov	r2, r3, d0
 8012dc8:	f7ed fa6e 	bl	80002a8 <__aeabi_dsub>
 8012dcc:	2200      	movs	r2, #0
 8012dce:	2300      	movs	r3, #0
 8012dd0:	4682      	mov	sl, r0
 8012dd2:	468b      	mov	fp, r1
 8012dd4:	f7ed fe88 	bl	8000ae8 <__aeabi_dcmpeq>
 8012dd8:	2800      	cmp	r0, #0
 8012dda:	d0c1      	beq.n	8012d60 <_strtod_l+0x8b8>
 8012ddc:	e61a      	b.n	8012a14 <_strtod_l+0x56c>
 8012dde:	4641      	mov	r1, r8
 8012de0:	4620      	mov	r0, r4
 8012de2:	f002 fefb 	bl	8015bdc <__ratio>
 8012de6:	ec57 6b10 	vmov	r6, r7, d0
 8012dea:	2200      	movs	r2, #0
 8012dec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012df0:	4630      	mov	r0, r6
 8012df2:	4639      	mov	r1, r7
 8012df4:	f7ed fe8c 	bl	8000b10 <__aeabi_dcmple>
 8012df8:	2800      	cmp	r0, #0
 8012dfa:	d06f      	beq.n	8012edc <_strtod_l+0xa34>
 8012dfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d17a      	bne.n	8012ef8 <_strtod_l+0xa50>
 8012e02:	f1ba 0f00 	cmp.w	sl, #0
 8012e06:	d158      	bne.n	8012eba <_strtod_l+0xa12>
 8012e08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d15a      	bne.n	8012ec8 <_strtod_l+0xa20>
 8012e12:	4b64      	ldr	r3, [pc, #400]	@ (8012fa4 <_strtod_l+0xafc>)
 8012e14:	2200      	movs	r2, #0
 8012e16:	4630      	mov	r0, r6
 8012e18:	4639      	mov	r1, r7
 8012e1a:	f7ed fe6f 	bl	8000afc <__aeabi_dcmplt>
 8012e1e:	2800      	cmp	r0, #0
 8012e20:	d159      	bne.n	8012ed6 <_strtod_l+0xa2e>
 8012e22:	4630      	mov	r0, r6
 8012e24:	4639      	mov	r1, r7
 8012e26:	4b60      	ldr	r3, [pc, #384]	@ (8012fa8 <_strtod_l+0xb00>)
 8012e28:	2200      	movs	r2, #0
 8012e2a:	f7ed fbf5 	bl	8000618 <__aeabi_dmul>
 8012e2e:	4606      	mov	r6, r0
 8012e30:	460f      	mov	r7, r1
 8012e32:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8012e36:	9606      	str	r6, [sp, #24]
 8012e38:	9307      	str	r3, [sp, #28]
 8012e3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012e3e:	4d57      	ldr	r5, [pc, #348]	@ (8012f9c <_strtod_l+0xaf4>)
 8012e40:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012e44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e46:	401d      	ands	r5, r3
 8012e48:	4b58      	ldr	r3, [pc, #352]	@ (8012fac <_strtod_l+0xb04>)
 8012e4a:	429d      	cmp	r5, r3
 8012e4c:	f040 80b2 	bne.w	8012fb4 <_strtod_l+0xb0c>
 8012e50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e52:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8012e56:	ec4b ab10 	vmov	d0, sl, fp
 8012e5a:	f002 fdf7 	bl	8015a4c <__ulp>
 8012e5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012e62:	ec51 0b10 	vmov	r0, r1, d0
 8012e66:	f7ed fbd7 	bl	8000618 <__aeabi_dmul>
 8012e6a:	4652      	mov	r2, sl
 8012e6c:	465b      	mov	r3, fp
 8012e6e:	f7ed fa1d 	bl	80002ac <__adddf3>
 8012e72:	460b      	mov	r3, r1
 8012e74:	4949      	ldr	r1, [pc, #292]	@ (8012f9c <_strtod_l+0xaf4>)
 8012e76:	4a4e      	ldr	r2, [pc, #312]	@ (8012fb0 <_strtod_l+0xb08>)
 8012e78:	4019      	ands	r1, r3
 8012e7a:	4291      	cmp	r1, r2
 8012e7c:	4682      	mov	sl, r0
 8012e7e:	d942      	bls.n	8012f06 <_strtod_l+0xa5e>
 8012e80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012e82:	4b47      	ldr	r3, [pc, #284]	@ (8012fa0 <_strtod_l+0xaf8>)
 8012e84:	429a      	cmp	r2, r3
 8012e86:	d103      	bne.n	8012e90 <_strtod_l+0x9e8>
 8012e88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	f43f ad2f 	beq.w	80128ee <_strtod_l+0x446>
 8012e90:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012fa0 <_strtod_l+0xaf8>
 8012e94:	f04f 3aff 	mov.w	sl, #4294967295
 8012e98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012e9a:	9805      	ldr	r0, [sp, #20]
 8012e9c:	f002 faaa 	bl	80153f4 <_Bfree>
 8012ea0:	9805      	ldr	r0, [sp, #20]
 8012ea2:	4649      	mov	r1, r9
 8012ea4:	f002 faa6 	bl	80153f4 <_Bfree>
 8012ea8:	9805      	ldr	r0, [sp, #20]
 8012eaa:	4641      	mov	r1, r8
 8012eac:	f002 faa2 	bl	80153f4 <_Bfree>
 8012eb0:	9805      	ldr	r0, [sp, #20]
 8012eb2:	4621      	mov	r1, r4
 8012eb4:	f002 fa9e 	bl	80153f4 <_Bfree>
 8012eb8:	e619      	b.n	8012aee <_strtod_l+0x646>
 8012eba:	f1ba 0f01 	cmp.w	sl, #1
 8012ebe:	d103      	bne.n	8012ec8 <_strtod_l+0xa20>
 8012ec0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	f43f ada6 	beq.w	8012a14 <_strtod_l+0x56c>
 8012ec8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012f78 <_strtod_l+0xad0>
 8012ecc:	4f35      	ldr	r7, [pc, #212]	@ (8012fa4 <_strtod_l+0xafc>)
 8012ece:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012ed2:	2600      	movs	r6, #0
 8012ed4:	e7b1      	b.n	8012e3a <_strtod_l+0x992>
 8012ed6:	4f34      	ldr	r7, [pc, #208]	@ (8012fa8 <_strtod_l+0xb00>)
 8012ed8:	2600      	movs	r6, #0
 8012eda:	e7aa      	b.n	8012e32 <_strtod_l+0x98a>
 8012edc:	4b32      	ldr	r3, [pc, #200]	@ (8012fa8 <_strtod_l+0xb00>)
 8012ede:	4630      	mov	r0, r6
 8012ee0:	4639      	mov	r1, r7
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	f7ed fb98 	bl	8000618 <__aeabi_dmul>
 8012ee8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012eea:	4606      	mov	r6, r0
 8012eec:	460f      	mov	r7, r1
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d09f      	beq.n	8012e32 <_strtod_l+0x98a>
 8012ef2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012ef6:	e7a0      	b.n	8012e3a <_strtod_l+0x992>
 8012ef8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012f80 <_strtod_l+0xad8>
 8012efc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012f00:	ec57 6b17 	vmov	r6, r7, d7
 8012f04:	e799      	b.n	8012e3a <_strtod_l+0x992>
 8012f06:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8012f0a:	9b08      	ldr	r3, [sp, #32]
 8012f0c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d1c1      	bne.n	8012e98 <_strtod_l+0x9f0>
 8012f14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012f18:	0d1b      	lsrs	r3, r3, #20
 8012f1a:	051b      	lsls	r3, r3, #20
 8012f1c:	429d      	cmp	r5, r3
 8012f1e:	d1bb      	bne.n	8012e98 <_strtod_l+0x9f0>
 8012f20:	4630      	mov	r0, r6
 8012f22:	4639      	mov	r1, r7
 8012f24:	f7ed fe88 	bl	8000c38 <__aeabi_d2lz>
 8012f28:	f7ed fb48 	bl	80005bc <__aeabi_l2d>
 8012f2c:	4602      	mov	r2, r0
 8012f2e:	460b      	mov	r3, r1
 8012f30:	4630      	mov	r0, r6
 8012f32:	4639      	mov	r1, r7
 8012f34:	f7ed f9b8 	bl	80002a8 <__aeabi_dsub>
 8012f38:	460b      	mov	r3, r1
 8012f3a:	4602      	mov	r2, r0
 8012f3c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012f40:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8012f44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f46:	ea46 060a 	orr.w	r6, r6, sl
 8012f4a:	431e      	orrs	r6, r3
 8012f4c:	d06f      	beq.n	801302e <_strtod_l+0xb86>
 8012f4e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012f88 <_strtod_l+0xae0>)
 8012f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f54:	f7ed fdd2 	bl	8000afc <__aeabi_dcmplt>
 8012f58:	2800      	cmp	r0, #0
 8012f5a:	f47f acd3 	bne.w	8012904 <_strtod_l+0x45c>
 8012f5e:	a30c      	add	r3, pc, #48	@ (adr r3, 8012f90 <_strtod_l+0xae8>)
 8012f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012f68:	f7ed fde6 	bl	8000b38 <__aeabi_dcmpgt>
 8012f6c:	2800      	cmp	r0, #0
 8012f6e:	d093      	beq.n	8012e98 <_strtod_l+0x9f0>
 8012f70:	e4c8      	b.n	8012904 <_strtod_l+0x45c>
 8012f72:	bf00      	nop
 8012f74:	f3af 8000 	nop.w
 8012f78:	00000000 	.word	0x00000000
 8012f7c:	bff00000 	.word	0xbff00000
 8012f80:	00000000 	.word	0x00000000
 8012f84:	3ff00000 	.word	0x3ff00000
 8012f88:	94a03595 	.word	0x94a03595
 8012f8c:	3fdfffff 	.word	0x3fdfffff
 8012f90:	35afe535 	.word	0x35afe535
 8012f94:	3fe00000 	.word	0x3fe00000
 8012f98:	000fffff 	.word	0x000fffff
 8012f9c:	7ff00000 	.word	0x7ff00000
 8012fa0:	7fefffff 	.word	0x7fefffff
 8012fa4:	3ff00000 	.word	0x3ff00000
 8012fa8:	3fe00000 	.word	0x3fe00000
 8012fac:	7fe00000 	.word	0x7fe00000
 8012fb0:	7c9fffff 	.word	0x7c9fffff
 8012fb4:	9b08      	ldr	r3, [sp, #32]
 8012fb6:	b323      	cbz	r3, 8013002 <_strtod_l+0xb5a>
 8012fb8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8012fbc:	d821      	bhi.n	8013002 <_strtod_l+0xb5a>
 8012fbe:	a328      	add	r3, pc, #160	@ (adr r3, 8013060 <_strtod_l+0xbb8>)
 8012fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc4:	4630      	mov	r0, r6
 8012fc6:	4639      	mov	r1, r7
 8012fc8:	f7ed fda2 	bl	8000b10 <__aeabi_dcmple>
 8012fcc:	b1a0      	cbz	r0, 8012ff8 <_strtod_l+0xb50>
 8012fce:	4639      	mov	r1, r7
 8012fd0:	4630      	mov	r0, r6
 8012fd2:	f7ed fdf9 	bl	8000bc8 <__aeabi_d2uiz>
 8012fd6:	2801      	cmp	r0, #1
 8012fd8:	bf38      	it	cc
 8012fda:	2001      	movcc	r0, #1
 8012fdc:	f7ed faa2 	bl	8000524 <__aeabi_ui2d>
 8012fe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012fe2:	4606      	mov	r6, r0
 8012fe4:	460f      	mov	r7, r1
 8012fe6:	b9fb      	cbnz	r3, 8013028 <_strtod_l+0xb80>
 8012fe8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012fec:	9014      	str	r0, [sp, #80]	@ 0x50
 8012fee:	9315      	str	r3, [sp, #84]	@ 0x54
 8012ff0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8012ff4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012ff8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012ffa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8012ffe:	1b5b      	subs	r3, r3, r5
 8013000:	9311      	str	r3, [sp, #68]	@ 0x44
 8013002:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013006:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801300a:	f002 fd1f 	bl	8015a4c <__ulp>
 801300e:	4650      	mov	r0, sl
 8013010:	ec53 2b10 	vmov	r2, r3, d0
 8013014:	4659      	mov	r1, fp
 8013016:	f7ed faff 	bl	8000618 <__aeabi_dmul>
 801301a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801301e:	f7ed f945 	bl	80002ac <__adddf3>
 8013022:	4682      	mov	sl, r0
 8013024:	468b      	mov	fp, r1
 8013026:	e770      	b.n	8012f0a <_strtod_l+0xa62>
 8013028:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801302c:	e7e0      	b.n	8012ff0 <_strtod_l+0xb48>
 801302e:	a30e      	add	r3, pc, #56	@ (adr r3, 8013068 <_strtod_l+0xbc0>)
 8013030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013034:	f7ed fd62 	bl	8000afc <__aeabi_dcmplt>
 8013038:	e798      	b.n	8012f6c <_strtod_l+0xac4>
 801303a:	2300      	movs	r3, #0
 801303c:	930e      	str	r3, [sp, #56]	@ 0x38
 801303e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013040:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013042:	6013      	str	r3, [r2, #0]
 8013044:	f7ff ba6d 	b.w	8012522 <_strtod_l+0x7a>
 8013048:	2a65      	cmp	r2, #101	@ 0x65
 801304a:	f43f ab68 	beq.w	801271e <_strtod_l+0x276>
 801304e:	2a45      	cmp	r2, #69	@ 0x45
 8013050:	f43f ab65 	beq.w	801271e <_strtod_l+0x276>
 8013054:	2301      	movs	r3, #1
 8013056:	f7ff bba0 	b.w	801279a <_strtod_l+0x2f2>
 801305a:	bf00      	nop
 801305c:	f3af 8000 	nop.w
 8013060:	ffc00000 	.word	0xffc00000
 8013064:	41dfffff 	.word	0x41dfffff
 8013068:	94a03595 	.word	0x94a03595
 801306c:	3fcfffff 	.word	0x3fcfffff

08013070 <strtod>:
 8013070:	460a      	mov	r2, r1
 8013072:	4601      	mov	r1, r0
 8013074:	4802      	ldr	r0, [pc, #8]	@ (8013080 <strtod+0x10>)
 8013076:	4b03      	ldr	r3, [pc, #12]	@ (8013084 <strtod+0x14>)
 8013078:	6800      	ldr	r0, [r0, #0]
 801307a:	f7ff ba15 	b.w	80124a8 <_strtod_l>
 801307e:	bf00      	nop
 8013080:	2000037c 	.word	0x2000037c
 8013084:	20000210 	.word	0x20000210

08013088 <_strtol_l.isra.0>:
 8013088:	2b24      	cmp	r3, #36	@ 0x24
 801308a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801308e:	4686      	mov	lr, r0
 8013090:	4690      	mov	r8, r2
 8013092:	d801      	bhi.n	8013098 <_strtol_l.isra.0+0x10>
 8013094:	2b01      	cmp	r3, #1
 8013096:	d106      	bne.n	80130a6 <_strtol_l.isra.0+0x1e>
 8013098:	f000 ff10 	bl	8013ebc <__errno>
 801309c:	2316      	movs	r3, #22
 801309e:	6003      	str	r3, [r0, #0]
 80130a0:	2000      	movs	r0, #0
 80130a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130a6:	4834      	ldr	r0, [pc, #208]	@ (8013178 <_strtol_l.isra.0+0xf0>)
 80130a8:	460d      	mov	r5, r1
 80130aa:	462a      	mov	r2, r5
 80130ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80130b0:	5d06      	ldrb	r6, [r0, r4]
 80130b2:	f016 0608 	ands.w	r6, r6, #8
 80130b6:	d1f8      	bne.n	80130aa <_strtol_l.isra.0+0x22>
 80130b8:	2c2d      	cmp	r4, #45	@ 0x2d
 80130ba:	d110      	bne.n	80130de <_strtol_l.isra.0+0x56>
 80130bc:	782c      	ldrb	r4, [r5, #0]
 80130be:	2601      	movs	r6, #1
 80130c0:	1c95      	adds	r5, r2, #2
 80130c2:	f033 0210 	bics.w	r2, r3, #16
 80130c6:	d115      	bne.n	80130f4 <_strtol_l.isra.0+0x6c>
 80130c8:	2c30      	cmp	r4, #48	@ 0x30
 80130ca:	d10d      	bne.n	80130e8 <_strtol_l.isra.0+0x60>
 80130cc:	782a      	ldrb	r2, [r5, #0]
 80130ce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80130d2:	2a58      	cmp	r2, #88	@ 0x58
 80130d4:	d108      	bne.n	80130e8 <_strtol_l.isra.0+0x60>
 80130d6:	786c      	ldrb	r4, [r5, #1]
 80130d8:	3502      	adds	r5, #2
 80130da:	2310      	movs	r3, #16
 80130dc:	e00a      	b.n	80130f4 <_strtol_l.isra.0+0x6c>
 80130de:	2c2b      	cmp	r4, #43	@ 0x2b
 80130e0:	bf04      	itt	eq
 80130e2:	782c      	ldrbeq	r4, [r5, #0]
 80130e4:	1c95      	addeq	r5, r2, #2
 80130e6:	e7ec      	b.n	80130c2 <_strtol_l.isra.0+0x3a>
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d1f6      	bne.n	80130da <_strtol_l.isra.0+0x52>
 80130ec:	2c30      	cmp	r4, #48	@ 0x30
 80130ee:	bf14      	ite	ne
 80130f0:	230a      	movne	r3, #10
 80130f2:	2308      	moveq	r3, #8
 80130f4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80130f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80130fc:	2200      	movs	r2, #0
 80130fe:	fbbc f9f3 	udiv	r9, ip, r3
 8013102:	4610      	mov	r0, r2
 8013104:	fb03 ca19 	mls	sl, r3, r9, ip
 8013108:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801310c:	2f09      	cmp	r7, #9
 801310e:	d80f      	bhi.n	8013130 <_strtol_l.isra.0+0xa8>
 8013110:	463c      	mov	r4, r7
 8013112:	42a3      	cmp	r3, r4
 8013114:	dd1b      	ble.n	801314e <_strtol_l.isra.0+0xc6>
 8013116:	1c57      	adds	r7, r2, #1
 8013118:	d007      	beq.n	801312a <_strtol_l.isra.0+0xa2>
 801311a:	4581      	cmp	r9, r0
 801311c:	d314      	bcc.n	8013148 <_strtol_l.isra.0+0xc0>
 801311e:	d101      	bne.n	8013124 <_strtol_l.isra.0+0x9c>
 8013120:	45a2      	cmp	sl, r4
 8013122:	db11      	blt.n	8013148 <_strtol_l.isra.0+0xc0>
 8013124:	fb00 4003 	mla	r0, r0, r3, r4
 8013128:	2201      	movs	r2, #1
 801312a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801312e:	e7eb      	b.n	8013108 <_strtol_l.isra.0+0x80>
 8013130:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013134:	2f19      	cmp	r7, #25
 8013136:	d801      	bhi.n	801313c <_strtol_l.isra.0+0xb4>
 8013138:	3c37      	subs	r4, #55	@ 0x37
 801313a:	e7ea      	b.n	8013112 <_strtol_l.isra.0+0x8a>
 801313c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013140:	2f19      	cmp	r7, #25
 8013142:	d804      	bhi.n	801314e <_strtol_l.isra.0+0xc6>
 8013144:	3c57      	subs	r4, #87	@ 0x57
 8013146:	e7e4      	b.n	8013112 <_strtol_l.isra.0+0x8a>
 8013148:	f04f 32ff 	mov.w	r2, #4294967295
 801314c:	e7ed      	b.n	801312a <_strtol_l.isra.0+0xa2>
 801314e:	1c53      	adds	r3, r2, #1
 8013150:	d108      	bne.n	8013164 <_strtol_l.isra.0+0xdc>
 8013152:	2322      	movs	r3, #34	@ 0x22
 8013154:	f8ce 3000 	str.w	r3, [lr]
 8013158:	4660      	mov	r0, ip
 801315a:	f1b8 0f00 	cmp.w	r8, #0
 801315e:	d0a0      	beq.n	80130a2 <_strtol_l.isra.0+0x1a>
 8013160:	1e69      	subs	r1, r5, #1
 8013162:	e006      	b.n	8013172 <_strtol_l.isra.0+0xea>
 8013164:	b106      	cbz	r6, 8013168 <_strtol_l.isra.0+0xe0>
 8013166:	4240      	negs	r0, r0
 8013168:	f1b8 0f00 	cmp.w	r8, #0
 801316c:	d099      	beq.n	80130a2 <_strtol_l.isra.0+0x1a>
 801316e:	2a00      	cmp	r2, #0
 8013170:	d1f6      	bne.n	8013160 <_strtol_l.isra.0+0xd8>
 8013172:	f8c8 1000 	str.w	r1, [r8]
 8013176:	e794      	b.n	80130a2 <_strtol_l.isra.0+0x1a>
 8013178:	08018cc9 	.word	0x08018cc9

0801317c <strtol>:
 801317c:	4613      	mov	r3, r2
 801317e:	460a      	mov	r2, r1
 8013180:	4601      	mov	r1, r0
 8013182:	4802      	ldr	r0, [pc, #8]	@ (801318c <strtol+0x10>)
 8013184:	6800      	ldr	r0, [r0, #0]
 8013186:	f7ff bf7f 	b.w	8013088 <_strtol_l.isra.0>
 801318a:	bf00      	nop
 801318c:	2000037c 	.word	0x2000037c

08013190 <__cvt>:
 8013190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013194:	ec57 6b10 	vmov	r6, r7, d0
 8013198:	2f00      	cmp	r7, #0
 801319a:	460c      	mov	r4, r1
 801319c:	4619      	mov	r1, r3
 801319e:	463b      	mov	r3, r7
 80131a0:	bfbb      	ittet	lt
 80131a2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80131a6:	461f      	movlt	r7, r3
 80131a8:	2300      	movge	r3, #0
 80131aa:	232d      	movlt	r3, #45	@ 0x2d
 80131ac:	700b      	strb	r3, [r1, #0]
 80131ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80131b0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80131b4:	4691      	mov	r9, r2
 80131b6:	f023 0820 	bic.w	r8, r3, #32
 80131ba:	bfbc      	itt	lt
 80131bc:	4632      	movlt	r2, r6
 80131be:	4616      	movlt	r6, r2
 80131c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80131c4:	d005      	beq.n	80131d2 <__cvt+0x42>
 80131c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80131ca:	d100      	bne.n	80131ce <__cvt+0x3e>
 80131cc:	3401      	adds	r4, #1
 80131ce:	2102      	movs	r1, #2
 80131d0:	e000      	b.n	80131d4 <__cvt+0x44>
 80131d2:	2103      	movs	r1, #3
 80131d4:	ab03      	add	r3, sp, #12
 80131d6:	9301      	str	r3, [sp, #4]
 80131d8:	ab02      	add	r3, sp, #8
 80131da:	9300      	str	r3, [sp, #0]
 80131dc:	ec47 6b10 	vmov	d0, r6, r7
 80131e0:	4653      	mov	r3, sl
 80131e2:	4622      	mov	r2, r4
 80131e4:	f000 ff60 	bl	80140a8 <_dtoa_r>
 80131e8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80131ec:	4605      	mov	r5, r0
 80131ee:	d119      	bne.n	8013224 <__cvt+0x94>
 80131f0:	f019 0f01 	tst.w	r9, #1
 80131f4:	d00e      	beq.n	8013214 <__cvt+0x84>
 80131f6:	eb00 0904 	add.w	r9, r0, r4
 80131fa:	2200      	movs	r2, #0
 80131fc:	2300      	movs	r3, #0
 80131fe:	4630      	mov	r0, r6
 8013200:	4639      	mov	r1, r7
 8013202:	f7ed fc71 	bl	8000ae8 <__aeabi_dcmpeq>
 8013206:	b108      	cbz	r0, 801320c <__cvt+0x7c>
 8013208:	f8cd 900c 	str.w	r9, [sp, #12]
 801320c:	2230      	movs	r2, #48	@ 0x30
 801320e:	9b03      	ldr	r3, [sp, #12]
 8013210:	454b      	cmp	r3, r9
 8013212:	d31e      	bcc.n	8013252 <__cvt+0xc2>
 8013214:	9b03      	ldr	r3, [sp, #12]
 8013216:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013218:	1b5b      	subs	r3, r3, r5
 801321a:	4628      	mov	r0, r5
 801321c:	6013      	str	r3, [r2, #0]
 801321e:	b004      	add	sp, #16
 8013220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013224:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013228:	eb00 0904 	add.w	r9, r0, r4
 801322c:	d1e5      	bne.n	80131fa <__cvt+0x6a>
 801322e:	7803      	ldrb	r3, [r0, #0]
 8013230:	2b30      	cmp	r3, #48	@ 0x30
 8013232:	d10a      	bne.n	801324a <__cvt+0xba>
 8013234:	2200      	movs	r2, #0
 8013236:	2300      	movs	r3, #0
 8013238:	4630      	mov	r0, r6
 801323a:	4639      	mov	r1, r7
 801323c:	f7ed fc54 	bl	8000ae8 <__aeabi_dcmpeq>
 8013240:	b918      	cbnz	r0, 801324a <__cvt+0xba>
 8013242:	f1c4 0401 	rsb	r4, r4, #1
 8013246:	f8ca 4000 	str.w	r4, [sl]
 801324a:	f8da 3000 	ldr.w	r3, [sl]
 801324e:	4499      	add	r9, r3
 8013250:	e7d3      	b.n	80131fa <__cvt+0x6a>
 8013252:	1c59      	adds	r1, r3, #1
 8013254:	9103      	str	r1, [sp, #12]
 8013256:	701a      	strb	r2, [r3, #0]
 8013258:	e7d9      	b.n	801320e <__cvt+0x7e>

0801325a <__exponent>:
 801325a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801325c:	2900      	cmp	r1, #0
 801325e:	bfba      	itte	lt
 8013260:	4249      	neglt	r1, r1
 8013262:	232d      	movlt	r3, #45	@ 0x2d
 8013264:	232b      	movge	r3, #43	@ 0x2b
 8013266:	2909      	cmp	r1, #9
 8013268:	7002      	strb	r2, [r0, #0]
 801326a:	7043      	strb	r3, [r0, #1]
 801326c:	dd29      	ble.n	80132c2 <__exponent+0x68>
 801326e:	f10d 0307 	add.w	r3, sp, #7
 8013272:	461d      	mov	r5, r3
 8013274:	270a      	movs	r7, #10
 8013276:	461a      	mov	r2, r3
 8013278:	fbb1 f6f7 	udiv	r6, r1, r7
 801327c:	fb07 1416 	mls	r4, r7, r6, r1
 8013280:	3430      	adds	r4, #48	@ 0x30
 8013282:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013286:	460c      	mov	r4, r1
 8013288:	2c63      	cmp	r4, #99	@ 0x63
 801328a:	f103 33ff 	add.w	r3, r3, #4294967295
 801328e:	4631      	mov	r1, r6
 8013290:	dcf1      	bgt.n	8013276 <__exponent+0x1c>
 8013292:	3130      	adds	r1, #48	@ 0x30
 8013294:	1e94      	subs	r4, r2, #2
 8013296:	f803 1c01 	strb.w	r1, [r3, #-1]
 801329a:	1c41      	adds	r1, r0, #1
 801329c:	4623      	mov	r3, r4
 801329e:	42ab      	cmp	r3, r5
 80132a0:	d30a      	bcc.n	80132b8 <__exponent+0x5e>
 80132a2:	f10d 0309 	add.w	r3, sp, #9
 80132a6:	1a9b      	subs	r3, r3, r2
 80132a8:	42ac      	cmp	r4, r5
 80132aa:	bf88      	it	hi
 80132ac:	2300      	movhi	r3, #0
 80132ae:	3302      	adds	r3, #2
 80132b0:	4403      	add	r3, r0
 80132b2:	1a18      	subs	r0, r3, r0
 80132b4:	b003      	add	sp, #12
 80132b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132b8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80132bc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80132c0:	e7ed      	b.n	801329e <__exponent+0x44>
 80132c2:	2330      	movs	r3, #48	@ 0x30
 80132c4:	3130      	adds	r1, #48	@ 0x30
 80132c6:	7083      	strb	r3, [r0, #2]
 80132c8:	70c1      	strb	r1, [r0, #3]
 80132ca:	1d03      	adds	r3, r0, #4
 80132cc:	e7f1      	b.n	80132b2 <__exponent+0x58>
	...

080132d0 <_printf_float>:
 80132d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132d4:	b08d      	sub	sp, #52	@ 0x34
 80132d6:	460c      	mov	r4, r1
 80132d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80132dc:	4616      	mov	r6, r2
 80132de:	461f      	mov	r7, r3
 80132e0:	4605      	mov	r5, r0
 80132e2:	f000 fd33 	bl	8013d4c <_localeconv_r>
 80132e6:	6803      	ldr	r3, [r0, #0]
 80132e8:	9304      	str	r3, [sp, #16]
 80132ea:	4618      	mov	r0, r3
 80132ec:	f7ec ffd0 	bl	8000290 <strlen>
 80132f0:	2300      	movs	r3, #0
 80132f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80132f4:	f8d8 3000 	ldr.w	r3, [r8]
 80132f8:	9005      	str	r0, [sp, #20]
 80132fa:	3307      	adds	r3, #7
 80132fc:	f023 0307 	bic.w	r3, r3, #7
 8013300:	f103 0208 	add.w	r2, r3, #8
 8013304:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013308:	f8d4 b000 	ldr.w	fp, [r4]
 801330c:	f8c8 2000 	str.w	r2, [r8]
 8013310:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013314:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013318:	9307      	str	r3, [sp, #28]
 801331a:	f8cd 8018 	str.w	r8, [sp, #24]
 801331e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013322:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013326:	4b9c      	ldr	r3, [pc, #624]	@ (8013598 <_printf_float+0x2c8>)
 8013328:	f04f 32ff 	mov.w	r2, #4294967295
 801332c:	f7ed fc0e 	bl	8000b4c <__aeabi_dcmpun>
 8013330:	bb70      	cbnz	r0, 8013390 <_printf_float+0xc0>
 8013332:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013336:	4b98      	ldr	r3, [pc, #608]	@ (8013598 <_printf_float+0x2c8>)
 8013338:	f04f 32ff 	mov.w	r2, #4294967295
 801333c:	f7ed fbe8 	bl	8000b10 <__aeabi_dcmple>
 8013340:	bb30      	cbnz	r0, 8013390 <_printf_float+0xc0>
 8013342:	2200      	movs	r2, #0
 8013344:	2300      	movs	r3, #0
 8013346:	4640      	mov	r0, r8
 8013348:	4649      	mov	r1, r9
 801334a:	f7ed fbd7 	bl	8000afc <__aeabi_dcmplt>
 801334e:	b110      	cbz	r0, 8013356 <_printf_float+0x86>
 8013350:	232d      	movs	r3, #45	@ 0x2d
 8013352:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013356:	4a91      	ldr	r2, [pc, #580]	@ (801359c <_printf_float+0x2cc>)
 8013358:	4b91      	ldr	r3, [pc, #580]	@ (80135a0 <_printf_float+0x2d0>)
 801335a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801335e:	bf8c      	ite	hi
 8013360:	4690      	movhi	r8, r2
 8013362:	4698      	movls	r8, r3
 8013364:	2303      	movs	r3, #3
 8013366:	6123      	str	r3, [r4, #16]
 8013368:	f02b 0304 	bic.w	r3, fp, #4
 801336c:	6023      	str	r3, [r4, #0]
 801336e:	f04f 0900 	mov.w	r9, #0
 8013372:	9700      	str	r7, [sp, #0]
 8013374:	4633      	mov	r3, r6
 8013376:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013378:	4621      	mov	r1, r4
 801337a:	4628      	mov	r0, r5
 801337c:	f000 f9d2 	bl	8013724 <_printf_common>
 8013380:	3001      	adds	r0, #1
 8013382:	f040 808d 	bne.w	80134a0 <_printf_float+0x1d0>
 8013386:	f04f 30ff 	mov.w	r0, #4294967295
 801338a:	b00d      	add	sp, #52	@ 0x34
 801338c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013390:	4642      	mov	r2, r8
 8013392:	464b      	mov	r3, r9
 8013394:	4640      	mov	r0, r8
 8013396:	4649      	mov	r1, r9
 8013398:	f7ed fbd8 	bl	8000b4c <__aeabi_dcmpun>
 801339c:	b140      	cbz	r0, 80133b0 <_printf_float+0xe0>
 801339e:	464b      	mov	r3, r9
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	bfbc      	itt	lt
 80133a4:	232d      	movlt	r3, #45	@ 0x2d
 80133a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80133aa:	4a7e      	ldr	r2, [pc, #504]	@ (80135a4 <_printf_float+0x2d4>)
 80133ac:	4b7e      	ldr	r3, [pc, #504]	@ (80135a8 <_printf_float+0x2d8>)
 80133ae:	e7d4      	b.n	801335a <_printf_float+0x8a>
 80133b0:	6863      	ldr	r3, [r4, #4]
 80133b2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80133b6:	9206      	str	r2, [sp, #24]
 80133b8:	1c5a      	adds	r2, r3, #1
 80133ba:	d13b      	bne.n	8013434 <_printf_float+0x164>
 80133bc:	2306      	movs	r3, #6
 80133be:	6063      	str	r3, [r4, #4]
 80133c0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80133c4:	2300      	movs	r3, #0
 80133c6:	6022      	str	r2, [r4, #0]
 80133c8:	9303      	str	r3, [sp, #12]
 80133ca:	ab0a      	add	r3, sp, #40	@ 0x28
 80133cc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80133d0:	ab09      	add	r3, sp, #36	@ 0x24
 80133d2:	9300      	str	r3, [sp, #0]
 80133d4:	6861      	ldr	r1, [r4, #4]
 80133d6:	ec49 8b10 	vmov	d0, r8, r9
 80133da:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80133de:	4628      	mov	r0, r5
 80133e0:	f7ff fed6 	bl	8013190 <__cvt>
 80133e4:	9b06      	ldr	r3, [sp, #24]
 80133e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80133e8:	2b47      	cmp	r3, #71	@ 0x47
 80133ea:	4680      	mov	r8, r0
 80133ec:	d129      	bne.n	8013442 <_printf_float+0x172>
 80133ee:	1cc8      	adds	r0, r1, #3
 80133f0:	db02      	blt.n	80133f8 <_printf_float+0x128>
 80133f2:	6863      	ldr	r3, [r4, #4]
 80133f4:	4299      	cmp	r1, r3
 80133f6:	dd41      	ble.n	801347c <_printf_float+0x1ac>
 80133f8:	f1aa 0a02 	sub.w	sl, sl, #2
 80133fc:	fa5f fa8a 	uxtb.w	sl, sl
 8013400:	3901      	subs	r1, #1
 8013402:	4652      	mov	r2, sl
 8013404:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013408:	9109      	str	r1, [sp, #36]	@ 0x24
 801340a:	f7ff ff26 	bl	801325a <__exponent>
 801340e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013410:	1813      	adds	r3, r2, r0
 8013412:	2a01      	cmp	r2, #1
 8013414:	4681      	mov	r9, r0
 8013416:	6123      	str	r3, [r4, #16]
 8013418:	dc02      	bgt.n	8013420 <_printf_float+0x150>
 801341a:	6822      	ldr	r2, [r4, #0]
 801341c:	07d2      	lsls	r2, r2, #31
 801341e:	d501      	bpl.n	8013424 <_printf_float+0x154>
 8013420:	3301      	adds	r3, #1
 8013422:	6123      	str	r3, [r4, #16]
 8013424:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013428:	2b00      	cmp	r3, #0
 801342a:	d0a2      	beq.n	8013372 <_printf_float+0xa2>
 801342c:	232d      	movs	r3, #45	@ 0x2d
 801342e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013432:	e79e      	b.n	8013372 <_printf_float+0xa2>
 8013434:	9a06      	ldr	r2, [sp, #24]
 8013436:	2a47      	cmp	r2, #71	@ 0x47
 8013438:	d1c2      	bne.n	80133c0 <_printf_float+0xf0>
 801343a:	2b00      	cmp	r3, #0
 801343c:	d1c0      	bne.n	80133c0 <_printf_float+0xf0>
 801343e:	2301      	movs	r3, #1
 8013440:	e7bd      	b.n	80133be <_printf_float+0xee>
 8013442:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013446:	d9db      	bls.n	8013400 <_printf_float+0x130>
 8013448:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801344c:	d118      	bne.n	8013480 <_printf_float+0x1b0>
 801344e:	2900      	cmp	r1, #0
 8013450:	6863      	ldr	r3, [r4, #4]
 8013452:	dd0b      	ble.n	801346c <_printf_float+0x19c>
 8013454:	6121      	str	r1, [r4, #16]
 8013456:	b913      	cbnz	r3, 801345e <_printf_float+0x18e>
 8013458:	6822      	ldr	r2, [r4, #0]
 801345a:	07d0      	lsls	r0, r2, #31
 801345c:	d502      	bpl.n	8013464 <_printf_float+0x194>
 801345e:	3301      	adds	r3, #1
 8013460:	440b      	add	r3, r1
 8013462:	6123      	str	r3, [r4, #16]
 8013464:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013466:	f04f 0900 	mov.w	r9, #0
 801346a:	e7db      	b.n	8013424 <_printf_float+0x154>
 801346c:	b913      	cbnz	r3, 8013474 <_printf_float+0x1a4>
 801346e:	6822      	ldr	r2, [r4, #0]
 8013470:	07d2      	lsls	r2, r2, #31
 8013472:	d501      	bpl.n	8013478 <_printf_float+0x1a8>
 8013474:	3302      	adds	r3, #2
 8013476:	e7f4      	b.n	8013462 <_printf_float+0x192>
 8013478:	2301      	movs	r3, #1
 801347a:	e7f2      	b.n	8013462 <_printf_float+0x192>
 801347c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8013480:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013482:	4299      	cmp	r1, r3
 8013484:	db05      	blt.n	8013492 <_printf_float+0x1c2>
 8013486:	6823      	ldr	r3, [r4, #0]
 8013488:	6121      	str	r1, [r4, #16]
 801348a:	07d8      	lsls	r0, r3, #31
 801348c:	d5ea      	bpl.n	8013464 <_printf_float+0x194>
 801348e:	1c4b      	adds	r3, r1, #1
 8013490:	e7e7      	b.n	8013462 <_printf_float+0x192>
 8013492:	2900      	cmp	r1, #0
 8013494:	bfd4      	ite	le
 8013496:	f1c1 0202 	rsble	r2, r1, #2
 801349a:	2201      	movgt	r2, #1
 801349c:	4413      	add	r3, r2
 801349e:	e7e0      	b.n	8013462 <_printf_float+0x192>
 80134a0:	6823      	ldr	r3, [r4, #0]
 80134a2:	055a      	lsls	r2, r3, #21
 80134a4:	d407      	bmi.n	80134b6 <_printf_float+0x1e6>
 80134a6:	6923      	ldr	r3, [r4, #16]
 80134a8:	4642      	mov	r2, r8
 80134aa:	4631      	mov	r1, r6
 80134ac:	4628      	mov	r0, r5
 80134ae:	47b8      	blx	r7
 80134b0:	3001      	adds	r0, #1
 80134b2:	d12b      	bne.n	801350c <_printf_float+0x23c>
 80134b4:	e767      	b.n	8013386 <_printf_float+0xb6>
 80134b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80134ba:	f240 80dd 	bls.w	8013678 <_printf_float+0x3a8>
 80134be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80134c2:	2200      	movs	r2, #0
 80134c4:	2300      	movs	r3, #0
 80134c6:	f7ed fb0f 	bl	8000ae8 <__aeabi_dcmpeq>
 80134ca:	2800      	cmp	r0, #0
 80134cc:	d033      	beq.n	8013536 <_printf_float+0x266>
 80134ce:	4a37      	ldr	r2, [pc, #220]	@ (80135ac <_printf_float+0x2dc>)
 80134d0:	2301      	movs	r3, #1
 80134d2:	4631      	mov	r1, r6
 80134d4:	4628      	mov	r0, r5
 80134d6:	47b8      	blx	r7
 80134d8:	3001      	adds	r0, #1
 80134da:	f43f af54 	beq.w	8013386 <_printf_float+0xb6>
 80134de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80134e2:	4543      	cmp	r3, r8
 80134e4:	db02      	blt.n	80134ec <_printf_float+0x21c>
 80134e6:	6823      	ldr	r3, [r4, #0]
 80134e8:	07d8      	lsls	r0, r3, #31
 80134ea:	d50f      	bpl.n	801350c <_printf_float+0x23c>
 80134ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80134f0:	4631      	mov	r1, r6
 80134f2:	4628      	mov	r0, r5
 80134f4:	47b8      	blx	r7
 80134f6:	3001      	adds	r0, #1
 80134f8:	f43f af45 	beq.w	8013386 <_printf_float+0xb6>
 80134fc:	f04f 0900 	mov.w	r9, #0
 8013500:	f108 38ff 	add.w	r8, r8, #4294967295
 8013504:	f104 0a1a 	add.w	sl, r4, #26
 8013508:	45c8      	cmp	r8, r9
 801350a:	dc09      	bgt.n	8013520 <_printf_float+0x250>
 801350c:	6823      	ldr	r3, [r4, #0]
 801350e:	079b      	lsls	r3, r3, #30
 8013510:	f100 8103 	bmi.w	801371a <_printf_float+0x44a>
 8013514:	68e0      	ldr	r0, [r4, #12]
 8013516:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013518:	4298      	cmp	r0, r3
 801351a:	bfb8      	it	lt
 801351c:	4618      	movlt	r0, r3
 801351e:	e734      	b.n	801338a <_printf_float+0xba>
 8013520:	2301      	movs	r3, #1
 8013522:	4652      	mov	r2, sl
 8013524:	4631      	mov	r1, r6
 8013526:	4628      	mov	r0, r5
 8013528:	47b8      	blx	r7
 801352a:	3001      	adds	r0, #1
 801352c:	f43f af2b 	beq.w	8013386 <_printf_float+0xb6>
 8013530:	f109 0901 	add.w	r9, r9, #1
 8013534:	e7e8      	b.n	8013508 <_printf_float+0x238>
 8013536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013538:	2b00      	cmp	r3, #0
 801353a:	dc39      	bgt.n	80135b0 <_printf_float+0x2e0>
 801353c:	4a1b      	ldr	r2, [pc, #108]	@ (80135ac <_printf_float+0x2dc>)
 801353e:	2301      	movs	r3, #1
 8013540:	4631      	mov	r1, r6
 8013542:	4628      	mov	r0, r5
 8013544:	47b8      	blx	r7
 8013546:	3001      	adds	r0, #1
 8013548:	f43f af1d 	beq.w	8013386 <_printf_float+0xb6>
 801354c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013550:	ea59 0303 	orrs.w	r3, r9, r3
 8013554:	d102      	bne.n	801355c <_printf_float+0x28c>
 8013556:	6823      	ldr	r3, [r4, #0]
 8013558:	07d9      	lsls	r1, r3, #31
 801355a:	d5d7      	bpl.n	801350c <_printf_float+0x23c>
 801355c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013560:	4631      	mov	r1, r6
 8013562:	4628      	mov	r0, r5
 8013564:	47b8      	blx	r7
 8013566:	3001      	adds	r0, #1
 8013568:	f43f af0d 	beq.w	8013386 <_printf_float+0xb6>
 801356c:	f04f 0a00 	mov.w	sl, #0
 8013570:	f104 0b1a 	add.w	fp, r4, #26
 8013574:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013576:	425b      	negs	r3, r3
 8013578:	4553      	cmp	r3, sl
 801357a:	dc01      	bgt.n	8013580 <_printf_float+0x2b0>
 801357c:	464b      	mov	r3, r9
 801357e:	e793      	b.n	80134a8 <_printf_float+0x1d8>
 8013580:	2301      	movs	r3, #1
 8013582:	465a      	mov	r2, fp
 8013584:	4631      	mov	r1, r6
 8013586:	4628      	mov	r0, r5
 8013588:	47b8      	blx	r7
 801358a:	3001      	adds	r0, #1
 801358c:	f43f aefb 	beq.w	8013386 <_printf_float+0xb6>
 8013590:	f10a 0a01 	add.w	sl, sl, #1
 8013594:	e7ee      	b.n	8013574 <_printf_float+0x2a4>
 8013596:	bf00      	nop
 8013598:	7fefffff 	.word	0x7fefffff
 801359c:	08018a52 	.word	0x08018a52
 80135a0:	08018a4e 	.word	0x08018a4e
 80135a4:	08018a5a 	.word	0x08018a5a
 80135a8:	08018a56 	.word	0x08018a56
 80135ac:	08018a5e 	.word	0x08018a5e
 80135b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80135b2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80135b6:	4553      	cmp	r3, sl
 80135b8:	bfa8      	it	ge
 80135ba:	4653      	movge	r3, sl
 80135bc:	2b00      	cmp	r3, #0
 80135be:	4699      	mov	r9, r3
 80135c0:	dc36      	bgt.n	8013630 <_printf_float+0x360>
 80135c2:	f04f 0b00 	mov.w	fp, #0
 80135c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80135ca:	f104 021a 	add.w	r2, r4, #26
 80135ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80135d0:	9306      	str	r3, [sp, #24]
 80135d2:	eba3 0309 	sub.w	r3, r3, r9
 80135d6:	455b      	cmp	r3, fp
 80135d8:	dc31      	bgt.n	801363e <_printf_float+0x36e>
 80135da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80135dc:	459a      	cmp	sl, r3
 80135de:	dc3a      	bgt.n	8013656 <_printf_float+0x386>
 80135e0:	6823      	ldr	r3, [r4, #0]
 80135e2:	07da      	lsls	r2, r3, #31
 80135e4:	d437      	bmi.n	8013656 <_printf_float+0x386>
 80135e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80135e8:	ebaa 0903 	sub.w	r9, sl, r3
 80135ec:	9b06      	ldr	r3, [sp, #24]
 80135ee:	ebaa 0303 	sub.w	r3, sl, r3
 80135f2:	4599      	cmp	r9, r3
 80135f4:	bfa8      	it	ge
 80135f6:	4699      	movge	r9, r3
 80135f8:	f1b9 0f00 	cmp.w	r9, #0
 80135fc:	dc33      	bgt.n	8013666 <_printf_float+0x396>
 80135fe:	f04f 0800 	mov.w	r8, #0
 8013602:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013606:	f104 0b1a 	add.w	fp, r4, #26
 801360a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801360c:	ebaa 0303 	sub.w	r3, sl, r3
 8013610:	eba3 0309 	sub.w	r3, r3, r9
 8013614:	4543      	cmp	r3, r8
 8013616:	f77f af79 	ble.w	801350c <_printf_float+0x23c>
 801361a:	2301      	movs	r3, #1
 801361c:	465a      	mov	r2, fp
 801361e:	4631      	mov	r1, r6
 8013620:	4628      	mov	r0, r5
 8013622:	47b8      	blx	r7
 8013624:	3001      	adds	r0, #1
 8013626:	f43f aeae 	beq.w	8013386 <_printf_float+0xb6>
 801362a:	f108 0801 	add.w	r8, r8, #1
 801362e:	e7ec      	b.n	801360a <_printf_float+0x33a>
 8013630:	4642      	mov	r2, r8
 8013632:	4631      	mov	r1, r6
 8013634:	4628      	mov	r0, r5
 8013636:	47b8      	blx	r7
 8013638:	3001      	adds	r0, #1
 801363a:	d1c2      	bne.n	80135c2 <_printf_float+0x2f2>
 801363c:	e6a3      	b.n	8013386 <_printf_float+0xb6>
 801363e:	2301      	movs	r3, #1
 8013640:	4631      	mov	r1, r6
 8013642:	4628      	mov	r0, r5
 8013644:	9206      	str	r2, [sp, #24]
 8013646:	47b8      	blx	r7
 8013648:	3001      	adds	r0, #1
 801364a:	f43f ae9c 	beq.w	8013386 <_printf_float+0xb6>
 801364e:	9a06      	ldr	r2, [sp, #24]
 8013650:	f10b 0b01 	add.w	fp, fp, #1
 8013654:	e7bb      	b.n	80135ce <_printf_float+0x2fe>
 8013656:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801365a:	4631      	mov	r1, r6
 801365c:	4628      	mov	r0, r5
 801365e:	47b8      	blx	r7
 8013660:	3001      	adds	r0, #1
 8013662:	d1c0      	bne.n	80135e6 <_printf_float+0x316>
 8013664:	e68f      	b.n	8013386 <_printf_float+0xb6>
 8013666:	9a06      	ldr	r2, [sp, #24]
 8013668:	464b      	mov	r3, r9
 801366a:	4442      	add	r2, r8
 801366c:	4631      	mov	r1, r6
 801366e:	4628      	mov	r0, r5
 8013670:	47b8      	blx	r7
 8013672:	3001      	adds	r0, #1
 8013674:	d1c3      	bne.n	80135fe <_printf_float+0x32e>
 8013676:	e686      	b.n	8013386 <_printf_float+0xb6>
 8013678:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801367c:	f1ba 0f01 	cmp.w	sl, #1
 8013680:	dc01      	bgt.n	8013686 <_printf_float+0x3b6>
 8013682:	07db      	lsls	r3, r3, #31
 8013684:	d536      	bpl.n	80136f4 <_printf_float+0x424>
 8013686:	2301      	movs	r3, #1
 8013688:	4642      	mov	r2, r8
 801368a:	4631      	mov	r1, r6
 801368c:	4628      	mov	r0, r5
 801368e:	47b8      	blx	r7
 8013690:	3001      	adds	r0, #1
 8013692:	f43f ae78 	beq.w	8013386 <_printf_float+0xb6>
 8013696:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801369a:	4631      	mov	r1, r6
 801369c:	4628      	mov	r0, r5
 801369e:	47b8      	blx	r7
 80136a0:	3001      	adds	r0, #1
 80136a2:	f43f ae70 	beq.w	8013386 <_printf_float+0xb6>
 80136a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80136aa:	2200      	movs	r2, #0
 80136ac:	2300      	movs	r3, #0
 80136ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80136b2:	f7ed fa19 	bl	8000ae8 <__aeabi_dcmpeq>
 80136b6:	b9c0      	cbnz	r0, 80136ea <_printf_float+0x41a>
 80136b8:	4653      	mov	r3, sl
 80136ba:	f108 0201 	add.w	r2, r8, #1
 80136be:	4631      	mov	r1, r6
 80136c0:	4628      	mov	r0, r5
 80136c2:	47b8      	blx	r7
 80136c4:	3001      	adds	r0, #1
 80136c6:	d10c      	bne.n	80136e2 <_printf_float+0x412>
 80136c8:	e65d      	b.n	8013386 <_printf_float+0xb6>
 80136ca:	2301      	movs	r3, #1
 80136cc:	465a      	mov	r2, fp
 80136ce:	4631      	mov	r1, r6
 80136d0:	4628      	mov	r0, r5
 80136d2:	47b8      	blx	r7
 80136d4:	3001      	adds	r0, #1
 80136d6:	f43f ae56 	beq.w	8013386 <_printf_float+0xb6>
 80136da:	f108 0801 	add.w	r8, r8, #1
 80136de:	45d0      	cmp	r8, sl
 80136e0:	dbf3      	blt.n	80136ca <_printf_float+0x3fa>
 80136e2:	464b      	mov	r3, r9
 80136e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80136e8:	e6df      	b.n	80134aa <_printf_float+0x1da>
 80136ea:	f04f 0800 	mov.w	r8, #0
 80136ee:	f104 0b1a 	add.w	fp, r4, #26
 80136f2:	e7f4      	b.n	80136de <_printf_float+0x40e>
 80136f4:	2301      	movs	r3, #1
 80136f6:	4642      	mov	r2, r8
 80136f8:	e7e1      	b.n	80136be <_printf_float+0x3ee>
 80136fa:	2301      	movs	r3, #1
 80136fc:	464a      	mov	r2, r9
 80136fe:	4631      	mov	r1, r6
 8013700:	4628      	mov	r0, r5
 8013702:	47b8      	blx	r7
 8013704:	3001      	adds	r0, #1
 8013706:	f43f ae3e 	beq.w	8013386 <_printf_float+0xb6>
 801370a:	f108 0801 	add.w	r8, r8, #1
 801370e:	68e3      	ldr	r3, [r4, #12]
 8013710:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013712:	1a5b      	subs	r3, r3, r1
 8013714:	4543      	cmp	r3, r8
 8013716:	dcf0      	bgt.n	80136fa <_printf_float+0x42a>
 8013718:	e6fc      	b.n	8013514 <_printf_float+0x244>
 801371a:	f04f 0800 	mov.w	r8, #0
 801371e:	f104 0919 	add.w	r9, r4, #25
 8013722:	e7f4      	b.n	801370e <_printf_float+0x43e>

08013724 <_printf_common>:
 8013724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013728:	4616      	mov	r6, r2
 801372a:	4698      	mov	r8, r3
 801372c:	688a      	ldr	r2, [r1, #8]
 801372e:	690b      	ldr	r3, [r1, #16]
 8013730:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013734:	4293      	cmp	r3, r2
 8013736:	bfb8      	it	lt
 8013738:	4613      	movlt	r3, r2
 801373a:	6033      	str	r3, [r6, #0]
 801373c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013740:	4607      	mov	r7, r0
 8013742:	460c      	mov	r4, r1
 8013744:	b10a      	cbz	r2, 801374a <_printf_common+0x26>
 8013746:	3301      	adds	r3, #1
 8013748:	6033      	str	r3, [r6, #0]
 801374a:	6823      	ldr	r3, [r4, #0]
 801374c:	0699      	lsls	r1, r3, #26
 801374e:	bf42      	ittt	mi
 8013750:	6833      	ldrmi	r3, [r6, #0]
 8013752:	3302      	addmi	r3, #2
 8013754:	6033      	strmi	r3, [r6, #0]
 8013756:	6825      	ldr	r5, [r4, #0]
 8013758:	f015 0506 	ands.w	r5, r5, #6
 801375c:	d106      	bne.n	801376c <_printf_common+0x48>
 801375e:	f104 0a19 	add.w	sl, r4, #25
 8013762:	68e3      	ldr	r3, [r4, #12]
 8013764:	6832      	ldr	r2, [r6, #0]
 8013766:	1a9b      	subs	r3, r3, r2
 8013768:	42ab      	cmp	r3, r5
 801376a:	dc26      	bgt.n	80137ba <_printf_common+0x96>
 801376c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013770:	6822      	ldr	r2, [r4, #0]
 8013772:	3b00      	subs	r3, #0
 8013774:	bf18      	it	ne
 8013776:	2301      	movne	r3, #1
 8013778:	0692      	lsls	r2, r2, #26
 801377a:	d42b      	bmi.n	80137d4 <_printf_common+0xb0>
 801377c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013780:	4641      	mov	r1, r8
 8013782:	4638      	mov	r0, r7
 8013784:	47c8      	blx	r9
 8013786:	3001      	adds	r0, #1
 8013788:	d01e      	beq.n	80137c8 <_printf_common+0xa4>
 801378a:	6823      	ldr	r3, [r4, #0]
 801378c:	6922      	ldr	r2, [r4, #16]
 801378e:	f003 0306 	and.w	r3, r3, #6
 8013792:	2b04      	cmp	r3, #4
 8013794:	bf02      	ittt	eq
 8013796:	68e5      	ldreq	r5, [r4, #12]
 8013798:	6833      	ldreq	r3, [r6, #0]
 801379a:	1aed      	subeq	r5, r5, r3
 801379c:	68a3      	ldr	r3, [r4, #8]
 801379e:	bf0c      	ite	eq
 80137a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80137a4:	2500      	movne	r5, #0
 80137a6:	4293      	cmp	r3, r2
 80137a8:	bfc4      	itt	gt
 80137aa:	1a9b      	subgt	r3, r3, r2
 80137ac:	18ed      	addgt	r5, r5, r3
 80137ae:	2600      	movs	r6, #0
 80137b0:	341a      	adds	r4, #26
 80137b2:	42b5      	cmp	r5, r6
 80137b4:	d11a      	bne.n	80137ec <_printf_common+0xc8>
 80137b6:	2000      	movs	r0, #0
 80137b8:	e008      	b.n	80137cc <_printf_common+0xa8>
 80137ba:	2301      	movs	r3, #1
 80137bc:	4652      	mov	r2, sl
 80137be:	4641      	mov	r1, r8
 80137c0:	4638      	mov	r0, r7
 80137c2:	47c8      	blx	r9
 80137c4:	3001      	adds	r0, #1
 80137c6:	d103      	bne.n	80137d0 <_printf_common+0xac>
 80137c8:	f04f 30ff 	mov.w	r0, #4294967295
 80137cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137d0:	3501      	adds	r5, #1
 80137d2:	e7c6      	b.n	8013762 <_printf_common+0x3e>
 80137d4:	18e1      	adds	r1, r4, r3
 80137d6:	1c5a      	adds	r2, r3, #1
 80137d8:	2030      	movs	r0, #48	@ 0x30
 80137da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80137de:	4422      	add	r2, r4
 80137e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80137e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80137e8:	3302      	adds	r3, #2
 80137ea:	e7c7      	b.n	801377c <_printf_common+0x58>
 80137ec:	2301      	movs	r3, #1
 80137ee:	4622      	mov	r2, r4
 80137f0:	4641      	mov	r1, r8
 80137f2:	4638      	mov	r0, r7
 80137f4:	47c8      	blx	r9
 80137f6:	3001      	adds	r0, #1
 80137f8:	d0e6      	beq.n	80137c8 <_printf_common+0xa4>
 80137fa:	3601      	adds	r6, #1
 80137fc:	e7d9      	b.n	80137b2 <_printf_common+0x8e>
	...

08013800 <_printf_i>:
 8013800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013804:	7e0f      	ldrb	r7, [r1, #24]
 8013806:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013808:	2f78      	cmp	r7, #120	@ 0x78
 801380a:	4691      	mov	r9, r2
 801380c:	4680      	mov	r8, r0
 801380e:	460c      	mov	r4, r1
 8013810:	469a      	mov	sl, r3
 8013812:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013816:	d807      	bhi.n	8013828 <_printf_i+0x28>
 8013818:	2f62      	cmp	r7, #98	@ 0x62
 801381a:	d80a      	bhi.n	8013832 <_printf_i+0x32>
 801381c:	2f00      	cmp	r7, #0
 801381e:	f000 80d1 	beq.w	80139c4 <_printf_i+0x1c4>
 8013822:	2f58      	cmp	r7, #88	@ 0x58
 8013824:	f000 80b8 	beq.w	8013998 <_printf_i+0x198>
 8013828:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801382c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013830:	e03a      	b.n	80138a8 <_printf_i+0xa8>
 8013832:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013836:	2b15      	cmp	r3, #21
 8013838:	d8f6      	bhi.n	8013828 <_printf_i+0x28>
 801383a:	a101      	add	r1, pc, #4	@ (adr r1, 8013840 <_printf_i+0x40>)
 801383c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013840:	08013899 	.word	0x08013899
 8013844:	080138ad 	.word	0x080138ad
 8013848:	08013829 	.word	0x08013829
 801384c:	08013829 	.word	0x08013829
 8013850:	08013829 	.word	0x08013829
 8013854:	08013829 	.word	0x08013829
 8013858:	080138ad 	.word	0x080138ad
 801385c:	08013829 	.word	0x08013829
 8013860:	08013829 	.word	0x08013829
 8013864:	08013829 	.word	0x08013829
 8013868:	08013829 	.word	0x08013829
 801386c:	080139ab 	.word	0x080139ab
 8013870:	080138d7 	.word	0x080138d7
 8013874:	08013965 	.word	0x08013965
 8013878:	08013829 	.word	0x08013829
 801387c:	08013829 	.word	0x08013829
 8013880:	080139cd 	.word	0x080139cd
 8013884:	08013829 	.word	0x08013829
 8013888:	080138d7 	.word	0x080138d7
 801388c:	08013829 	.word	0x08013829
 8013890:	08013829 	.word	0x08013829
 8013894:	0801396d 	.word	0x0801396d
 8013898:	6833      	ldr	r3, [r6, #0]
 801389a:	1d1a      	adds	r2, r3, #4
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	6032      	str	r2, [r6, #0]
 80138a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80138a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80138a8:	2301      	movs	r3, #1
 80138aa:	e09c      	b.n	80139e6 <_printf_i+0x1e6>
 80138ac:	6833      	ldr	r3, [r6, #0]
 80138ae:	6820      	ldr	r0, [r4, #0]
 80138b0:	1d19      	adds	r1, r3, #4
 80138b2:	6031      	str	r1, [r6, #0]
 80138b4:	0606      	lsls	r6, r0, #24
 80138b6:	d501      	bpl.n	80138bc <_printf_i+0xbc>
 80138b8:	681d      	ldr	r5, [r3, #0]
 80138ba:	e003      	b.n	80138c4 <_printf_i+0xc4>
 80138bc:	0645      	lsls	r5, r0, #25
 80138be:	d5fb      	bpl.n	80138b8 <_printf_i+0xb8>
 80138c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80138c4:	2d00      	cmp	r5, #0
 80138c6:	da03      	bge.n	80138d0 <_printf_i+0xd0>
 80138c8:	232d      	movs	r3, #45	@ 0x2d
 80138ca:	426d      	negs	r5, r5
 80138cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80138d0:	4858      	ldr	r0, [pc, #352]	@ (8013a34 <_printf_i+0x234>)
 80138d2:	230a      	movs	r3, #10
 80138d4:	e011      	b.n	80138fa <_printf_i+0xfa>
 80138d6:	6821      	ldr	r1, [r4, #0]
 80138d8:	6833      	ldr	r3, [r6, #0]
 80138da:	0608      	lsls	r0, r1, #24
 80138dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80138e0:	d402      	bmi.n	80138e8 <_printf_i+0xe8>
 80138e2:	0649      	lsls	r1, r1, #25
 80138e4:	bf48      	it	mi
 80138e6:	b2ad      	uxthmi	r5, r5
 80138e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80138ea:	4852      	ldr	r0, [pc, #328]	@ (8013a34 <_printf_i+0x234>)
 80138ec:	6033      	str	r3, [r6, #0]
 80138ee:	bf14      	ite	ne
 80138f0:	230a      	movne	r3, #10
 80138f2:	2308      	moveq	r3, #8
 80138f4:	2100      	movs	r1, #0
 80138f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80138fa:	6866      	ldr	r6, [r4, #4]
 80138fc:	60a6      	str	r6, [r4, #8]
 80138fe:	2e00      	cmp	r6, #0
 8013900:	db05      	blt.n	801390e <_printf_i+0x10e>
 8013902:	6821      	ldr	r1, [r4, #0]
 8013904:	432e      	orrs	r6, r5
 8013906:	f021 0104 	bic.w	r1, r1, #4
 801390a:	6021      	str	r1, [r4, #0]
 801390c:	d04b      	beq.n	80139a6 <_printf_i+0x1a6>
 801390e:	4616      	mov	r6, r2
 8013910:	fbb5 f1f3 	udiv	r1, r5, r3
 8013914:	fb03 5711 	mls	r7, r3, r1, r5
 8013918:	5dc7      	ldrb	r7, [r0, r7]
 801391a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801391e:	462f      	mov	r7, r5
 8013920:	42bb      	cmp	r3, r7
 8013922:	460d      	mov	r5, r1
 8013924:	d9f4      	bls.n	8013910 <_printf_i+0x110>
 8013926:	2b08      	cmp	r3, #8
 8013928:	d10b      	bne.n	8013942 <_printf_i+0x142>
 801392a:	6823      	ldr	r3, [r4, #0]
 801392c:	07df      	lsls	r7, r3, #31
 801392e:	d508      	bpl.n	8013942 <_printf_i+0x142>
 8013930:	6923      	ldr	r3, [r4, #16]
 8013932:	6861      	ldr	r1, [r4, #4]
 8013934:	4299      	cmp	r1, r3
 8013936:	bfde      	ittt	le
 8013938:	2330      	movle	r3, #48	@ 0x30
 801393a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801393e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013942:	1b92      	subs	r2, r2, r6
 8013944:	6122      	str	r2, [r4, #16]
 8013946:	f8cd a000 	str.w	sl, [sp]
 801394a:	464b      	mov	r3, r9
 801394c:	aa03      	add	r2, sp, #12
 801394e:	4621      	mov	r1, r4
 8013950:	4640      	mov	r0, r8
 8013952:	f7ff fee7 	bl	8013724 <_printf_common>
 8013956:	3001      	adds	r0, #1
 8013958:	d14a      	bne.n	80139f0 <_printf_i+0x1f0>
 801395a:	f04f 30ff 	mov.w	r0, #4294967295
 801395e:	b004      	add	sp, #16
 8013960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013964:	6823      	ldr	r3, [r4, #0]
 8013966:	f043 0320 	orr.w	r3, r3, #32
 801396a:	6023      	str	r3, [r4, #0]
 801396c:	4832      	ldr	r0, [pc, #200]	@ (8013a38 <_printf_i+0x238>)
 801396e:	2778      	movs	r7, #120	@ 0x78
 8013970:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013974:	6823      	ldr	r3, [r4, #0]
 8013976:	6831      	ldr	r1, [r6, #0]
 8013978:	061f      	lsls	r7, r3, #24
 801397a:	f851 5b04 	ldr.w	r5, [r1], #4
 801397e:	d402      	bmi.n	8013986 <_printf_i+0x186>
 8013980:	065f      	lsls	r7, r3, #25
 8013982:	bf48      	it	mi
 8013984:	b2ad      	uxthmi	r5, r5
 8013986:	6031      	str	r1, [r6, #0]
 8013988:	07d9      	lsls	r1, r3, #31
 801398a:	bf44      	itt	mi
 801398c:	f043 0320 	orrmi.w	r3, r3, #32
 8013990:	6023      	strmi	r3, [r4, #0]
 8013992:	b11d      	cbz	r5, 801399c <_printf_i+0x19c>
 8013994:	2310      	movs	r3, #16
 8013996:	e7ad      	b.n	80138f4 <_printf_i+0xf4>
 8013998:	4826      	ldr	r0, [pc, #152]	@ (8013a34 <_printf_i+0x234>)
 801399a:	e7e9      	b.n	8013970 <_printf_i+0x170>
 801399c:	6823      	ldr	r3, [r4, #0]
 801399e:	f023 0320 	bic.w	r3, r3, #32
 80139a2:	6023      	str	r3, [r4, #0]
 80139a4:	e7f6      	b.n	8013994 <_printf_i+0x194>
 80139a6:	4616      	mov	r6, r2
 80139a8:	e7bd      	b.n	8013926 <_printf_i+0x126>
 80139aa:	6833      	ldr	r3, [r6, #0]
 80139ac:	6825      	ldr	r5, [r4, #0]
 80139ae:	6961      	ldr	r1, [r4, #20]
 80139b0:	1d18      	adds	r0, r3, #4
 80139b2:	6030      	str	r0, [r6, #0]
 80139b4:	062e      	lsls	r6, r5, #24
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	d501      	bpl.n	80139be <_printf_i+0x1be>
 80139ba:	6019      	str	r1, [r3, #0]
 80139bc:	e002      	b.n	80139c4 <_printf_i+0x1c4>
 80139be:	0668      	lsls	r0, r5, #25
 80139c0:	d5fb      	bpl.n	80139ba <_printf_i+0x1ba>
 80139c2:	8019      	strh	r1, [r3, #0]
 80139c4:	2300      	movs	r3, #0
 80139c6:	6123      	str	r3, [r4, #16]
 80139c8:	4616      	mov	r6, r2
 80139ca:	e7bc      	b.n	8013946 <_printf_i+0x146>
 80139cc:	6833      	ldr	r3, [r6, #0]
 80139ce:	1d1a      	adds	r2, r3, #4
 80139d0:	6032      	str	r2, [r6, #0]
 80139d2:	681e      	ldr	r6, [r3, #0]
 80139d4:	6862      	ldr	r2, [r4, #4]
 80139d6:	2100      	movs	r1, #0
 80139d8:	4630      	mov	r0, r6
 80139da:	f7ec fc09 	bl	80001f0 <memchr>
 80139de:	b108      	cbz	r0, 80139e4 <_printf_i+0x1e4>
 80139e0:	1b80      	subs	r0, r0, r6
 80139e2:	6060      	str	r0, [r4, #4]
 80139e4:	6863      	ldr	r3, [r4, #4]
 80139e6:	6123      	str	r3, [r4, #16]
 80139e8:	2300      	movs	r3, #0
 80139ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80139ee:	e7aa      	b.n	8013946 <_printf_i+0x146>
 80139f0:	6923      	ldr	r3, [r4, #16]
 80139f2:	4632      	mov	r2, r6
 80139f4:	4649      	mov	r1, r9
 80139f6:	4640      	mov	r0, r8
 80139f8:	47d0      	blx	sl
 80139fa:	3001      	adds	r0, #1
 80139fc:	d0ad      	beq.n	801395a <_printf_i+0x15a>
 80139fe:	6823      	ldr	r3, [r4, #0]
 8013a00:	079b      	lsls	r3, r3, #30
 8013a02:	d413      	bmi.n	8013a2c <_printf_i+0x22c>
 8013a04:	68e0      	ldr	r0, [r4, #12]
 8013a06:	9b03      	ldr	r3, [sp, #12]
 8013a08:	4298      	cmp	r0, r3
 8013a0a:	bfb8      	it	lt
 8013a0c:	4618      	movlt	r0, r3
 8013a0e:	e7a6      	b.n	801395e <_printf_i+0x15e>
 8013a10:	2301      	movs	r3, #1
 8013a12:	4632      	mov	r2, r6
 8013a14:	4649      	mov	r1, r9
 8013a16:	4640      	mov	r0, r8
 8013a18:	47d0      	blx	sl
 8013a1a:	3001      	adds	r0, #1
 8013a1c:	d09d      	beq.n	801395a <_printf_i+0x15a>
 8013a1e:	3501      	adds	r5, #1
 8013a20:	68e3      	ldr	r3, [r4, #12]
 8013a22:	9903      	ldr	r1, [sp, #12]
 8013a24:	1a5b      	subs	r3, r3, r1
 8013a26:	42ab      	cmp	r3, r5
 8013a28:	dcf2      	bgt.n	8013a10 <_printf_i+0x210>
 8013a2a:	e7eb      	b.n	8013a04 <_printf_i+0x204>
 8013a2c:	2500      	movs	r5, #0
 8013a2e:	f104 0619 	add.w	r6, r4, #25
 8013a32:	e7f5      	b.n	8013a20 <_printf_i+0x220>
 8013a34:	08018a60 	.word	0x08018a60
 8013a38:	08018a71 	.word	0x08018a71

08013a3c <std>:
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	b510      	push	{r4, lr}
 8013a40:	4604      	mov	r4, r0
 8013a42:	e9c0 3300 	strd	r3, r3, [r0]
 8013a46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013a4a:	6083      	str	r3, [r0, #8]
 8013a4c:	8181      	strh	r1, [r0, #12]
 8013a4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8013a50:	81c2      	strh	r2, [r0, #14]
 8013a52:	6183      	str	r3, [r0, #24]
 8013a54:	4619      	mov	r1, r3
 8013a56:	2208      	movs	r2, #8
 8013a58:	305c      	adds	r0, #92	@ 0x5c
 8013a5a:	f000 f8f4 	bl	8013c46 <memset>
 8013a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8013a94 <std+0x58>)
 8013a60:	6263      	str	r3, [r4, #36]	@ 0x24
 8013a62:	4b0d      	ldr	r3, [pc, #52]	@ (8013a98 <std+0x5c>)
 8013a64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013a66:	4b0d      	ldr	r3, [pc, #52]	@ (8013a9c <std+0x60>)
 8013a68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8013aa0 <std+0x64>)
 8013a6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8013a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8013aa4 <std+0x68>)
 8013a70:	6224      	str	r4, [r4, #32]
 8013a72:	429c      	cmp	r4, r3
 8013a74:	d006      	beq.n	8013a84 <std+0x48>
 8013a76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013a7a:	4294      	cmp	r4, r2
 8013a7c:	d002      	beq.n	8013a84 <std+0x48>
 8013a7e:	33d0      	adds	r3, #208	@ 0xd0
 8013a80:	429c      	cmp	r4, r3
 8013a82:	d105      	bne.n	8013a90 <std+0x54>
 8013a84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a8c:	f000 ba40 	b.w	8013f10 <__retarget_lock_init_recursive>
 8013a90:	bd10      	pop	{r4, pc}
 8013a92:	bf00      	nop
 8013a94:	08013bc1 	.word	0x08013bc1
 8013a98:	08013be3 	.word	0x08013be3
 8013a9c:	08013c1b 	.word	0x08013c1b
 8013aa0:	08013c3f 	.word	0x08013c3f
 8013aa4:	2001d8a4 	.word	0x2001d8a4

08013aa8 <stdio_exit_handler>:
 8013aa8:	4a02      	ldr	r2, [pc, #8]	@ (8013ab4 <stdio_exit_handler+0xc>)
 8013aaa:	4903      	ldr	r1, [pc, #12]	@ (8013ab8 <stdio_exit_handler+0x10>)
 8013aac:	4803      	ldr	r0, [pc, #12]	@ (8013abc <stdio_exit_handler+0x14>)
 8013aae:	f000 b869 	b.w	8013b84 <_fwalk_sglue>
 8013ab2:	bf00      	nop
 8013ab4:	20000204 	.word	0x20000204
 8013ab8:	08015ded 	.word	0x08015ded
 8013abc:	20000380 	.word	0x20000380

08013ac0 <cleanup_stdio>:
 8013ac0:	6841      	ldr	r1, [r0, #4]
 8013ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8013af4 <cleanup_stdio+0x34>)
 8013ac4:	4299      	cmp	r1, r3
 8013ac6:	b510      	push	{r4, lr}
 8013ac8:	4604      	mov	r4, r0
 8013aca:	d001      	beq.n	8013ad0 <cleanup_stdio+0x10>
 8013acc:	f002 f98e 	bl	8015dec <_fflush_r>
 8013ad0:	68a1      	ldr	r1, [r4, #8]
 8013ad2:	4b09      	ldr	r3, [pc, #36]	@ (8013af8 <cleanup_stdio+0x38>)
 8013ad4:	4299      	cmp	r1, r3
 8013ad6:	d002      	beq.n	8013ade <cleanup_stdio+0x1e>
 8013ad8:	4620      	mov	r0, r4
 8013ada:	f002 f987 	bl	8015dec <_fflush_r>
 8013ade:	68e1      	ldr	r1, [r4, #12]
 8013ae0:	4b06      	ldr	r3, [pc, #24]	@ (8013afc <cleanup_stdio+0x3c>)
 8013ae2:	4299      	cmp	r1, r3
 8013ae4:	d004      	beq.n	8013af0 <cleanup_stdio+0x30>
 8013ae6:	4620      	mov	r0, r4
 8013ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013aec:	f002 b97e 	b.w	8015dec <_fflush_r>
 8013af0:	bd10      	pop	{r4, pc}
 8013af2:	bf00      	nop
 8013af4:	2001d8a4 	.word	0x2001d8a4
 8013af8:	2001d90c 	.word	0x2001d90c
 8013afc:	2001d974 	.word	0x2001d974

08013b00 <global_stdio_init.part.0>:
 8013b00:	b510      	push	{r4, lr}
 8013b02:	4b0b      	ldr	r3, [pc, #44]	@ (8013b30 <global_stdio_init.part.0+0x30>)
 8013b04:	4c0b      	ldr	r4, [pc, #44]	@ (8013b34 <global_stdio_init.part.0+0x34>)
 8013b06:	4a0c      	ldr	r2, [pc, #48]	@ (8013b38 <global_stdio_init.part.0+0x38>)
 8013b08:	601a      	str	r2, [r3, #0]
 8013b0a:	4620      	mov	r0, r4
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	2104      	movs	r1, #4
 8013b10:	f7ff ff94 	bl	8013a3c <std>
 8013b14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013b18:	2201      	movs	r2, #1
 8013b1a:	2109      	movs	r1, #9
 8013b1c:	f7ff ff8e 	bl	8013a3c <std>
 8013b20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013b24:	2202      	movs	r2, #2
 8013b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b2a:	2112      	movs	r1, #18
 8013b2c:	f7ff bf86 	b.w	8013a3c <std>
 8013b30:	2001d9dc 	.word	0x2001d9dc
 8013b34:	2001d8a4 	.word	0x2001d8a4
 8013b38:	08013aa9 	.word	0x08013aa9

08013b3c <__sfp_lock_acquire>:
 8013b3c:	4801      	ldr	r0, [pc, #4]	@ (8013b44 <__sfp_lock_acquire+0x8>)
 8013b3e:	f000 b9e8 	b.w	8013f12 <__retarget_lock_acquire_recursive>
 8013b42:	bf00      	nop
 8013b44:	2001d9e5 	.word	0x2001d9e5

08013b48 <__sfp_lock_release>:
 8013b48:	4801      	ldr	r0, [pc, #4]	@ (8013b50 <__sfp_lock_release+0x8>)
 8013b4a:	f000 b9e3 	b.w	8013f14 <__retarget_lock_release_recursive>
 8013b4e:	bf00      	nop
 8013b50:	2001d9e5 	.word	0x2001d9e5

08013b54 <__sinit>:
 8013b54:	b510      	push	{r4, lr}
 8013b56:	4604      	mov	r4, r0
 8013b58:	f7ff fff0 	bl	8013b3c <__sfp_lock_acquire>
 8013b5c:	6a23      	ldr	r3, [r4, #32]
 8013b5e:	b11b      	cbz	r3, 8013b68 <__sinit+0x14>
 8013b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b64:	f7ff bff0 	b.w	8013b48 <__sfp_lock_release>
 8013b68:	4b04      	ldr	r3, [pc, #16]	@ (8013b7c <__sinit+0x28>)
 8013b6a:	6223      	str	r3, [r4, #32]
 8013b6c:	4b04      	ldr	r3, [pc, #16]	@ (8013b80 <__sinit+0x2c>)
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d1f5      	bne.n	8013b60 <__sinit+0xc>
 8013b74:	f7ff ffc4 	bl	8013b00 <global_stdio_init.part.0>
 8013b78:	e7f2      	b.n	8013b60 <__sinit+0xc>
 8013b7a:	bf00      	nop
 8013b7c:	08013ac1 	.word	0x08013ac1
 8013b80:	2001d9dc 	.word	0x2001d9dc

08013b84 <_fwalk_sglue>:
 8013b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b88:	4607      	mov	r7, r0
 8013b8a:	4688      	mov	r8, r1
 8013b8c:	4614      	mov	r4, r2
 8013b8e:	2600      	movs	r6, #0
 8013b90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013b94:	f1b9 0901 	subs.w	r9, r9, #1
 8013b98:	d505      	bpl.n	8013ba6 <_fwalk_sglue+0x22>
 8013b9a:	6824      	ldr	r4, [r4, #0]
 8013b9c:	2c00      	cmp	r4, #0
 8013b9e:	d1f7      	bne.n	8013b90 <_fwalk_sglue+0xc>
 8013ba0:	4630      	mov	r0, r6
 8013ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ba6:	89ab      	ldrh	r3, [r5, #12]
 8013ba8:	2b01      	cmp	r3, #1
 8013baa:	d907      	bls.n	8013bbc <_fwalk_sglue+0x38>
 8013bac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013bb0:	3301      	adds	r3, #1
 8013bb2:	d003      	beq.n	8013bbc <_fwalk_sglue+0x38>
 8013bb4:	4629      	mov	r1, r5
 8013bb6:	4638      	mov	r0, r7
 8013bb8:	47c0      	blx	r8
 8013bba:	4306      	orrs	r6, r0
 8013bbc:	3568      	adds	r5, #104	@ 0x68
 8013bbe:	e7e9      	b.n	8013b94 <_fwalk_sglue+0x10>

08013bc0 <__sread>:
 8013bc0:	b510      	push	{r4, lr}
 8013bc2:	460c      	mov	r4, r1
 8013bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bc8:	f000 f944 	bl	8013e54 <_read_r>
 8013bcc:	2800      	cmp	r0, #0
 8013bce:	bfab      	itete	ge
 8013bd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013bd2:	89a3      	ldrhlt	r3, [r4, #12]
 8013bd4:	181b      	addge	r3, r3, r0
 8013bd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013bda:	bfac      	ite	ge
 8013bdc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013bde:	81a3      	strhlt	r3, [r4, #12]
 8013be0:	bd10      	pop	{r4, pc}

08013be2 <__swrite>:
 8013be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013be6:	461f      	mov	r7, r3
 8013be8:	898b      	ldrh	r3, [r1, #12]
 8013bea:	05db      	lsls	r3, r3, #23
 8013bec:	4605      	mov	r5, r0
 8013bee:	460c      	mov	r4, r1
 8013bf0:	4616      	mov	r6, r2
 8013bf2:	d505      	bpl.n	8013c00 <__swrite+0x1e>
 8013bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bf8:	2302      	movs	r3, #2
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	f000 f918 	bl	8013e30 <_lseek_r>
 8013c00:	89a3      	ldrh	r3, [r4, #12]
 8013c02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013c0a:	81a3      	strh	r3, [r4, #12]
 8013c0c:	4632      	mov	r2, r6
 8013c0e:	463b      	mov	r3, r7
 8013c10:	4628      	mov	r0, r5
 8013c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c16:	f000 b93f 	b.w	8013e98 <_write_r>

08013c1a <__sseek>:
 8013c1a:	b510      	push	{r4, lr}
 8013c1c:	460c      	mov	r4, r1
 8013c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c22:	f000 f905 	bl	8013e30 <_lseek_r>
 8013c26:	1c43      	adds	r3, r0, #1
 8013c28:	89a3      	ldrh	r3, [r4, #12]
 8013c2a:	bf15      	itete	ne
 8013c2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013c2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013c32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013c36:	81a3      	strheq	r3, [r4, #12]
 8013c38:	bf18      	it	ne
 8013c3a:	81a3      	strhne	r3, [r4, #12]
 8013c3c:	bd10      	pop	{r4, pc}

08013c3e <__sclose>:
 8013c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c42:	f000 b887 	b.w	8013d54 <_close_r>

08013c46 <memset>:
 8013c46:	4402      	add	r2, r0
 8013c48:	4603      	mov	r3, r0
 8013c4a:	4293      	cmp	r3, r2
 8013c4c:	d100      	bne.n	8013c50 <memset+0xa>
 8013c4e:	4770      	bx	lr
 8013c50:	f803 1b01 	strb.w	r1, [r3], #1
 8013c54:	e7f9      	b.n	8013c4a <memset+0x4>

08013c56 <strchr>:
 8013c56:	b2c9      	uxtb	r1, r1
 8013c58:	4603      	mov	r3, r0
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c60:	b112      	cbz	r2, 8013c68 <strchr+0x12>
 8013c62:	428a      	cmp	r2, r1
 8013c64:	d1f9      	bne.n	8013c5a <strchr+0x4>
 8013c66:	4770      	bx	lr
 8013c68:	2900      	cmp	r1, #0
 8013c6a:	bf18      	it	ne
 8013c6c:	2000      	movne	r0, #0
 8013c6e:	4770      	bx	lr

08013c70 <strncmp>:
 8013c70:	b510      	push	{r4, lr}
 8013c72:	b16a      	cbz	r2, 8013c90 <strncmp+0x20>
 8013c74:	3901      	subs	r1, #1
 8013c76:	1884      	adds	r4, r0, r2
 8013c78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c7c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013c80:	429a      	cmp	r2, r3
 8013c82:	d103      	bne.n	8013c8c <strncmp+0x1c>
 8013c84:	42a0      	cmp	r0, r4
 8013c86:	d001      	beq.n	8013c8c <strncmp+0x1c>
 8013c88:	2a00      	cmp	r2, #0
 8013c8a:	d1f5      	bne.n	8013c78 <strncmp+0x8>
 8013c8c:	1ad0      	subs	r0, r2, r3
 8013c8e:	bd10      	pop	{r4, pc}
 8013c90:	4610      	mov	r0, r2
 8013c92:	e7fc      	b.n	8013c8e <strncmp+0x1e>

08013c94 <strtok>:
 8013c94:	4b16      	ldr	r3, [pc, #88]	@ (8013cf0 <strtok+0x5c>)
 8013c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c9a:	681f      	ldr	r7, [r3, #0]
 8013c9c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8013c9e:	4605      	mov	r5, r0
 8013ca0:	460e      	mov	r6, r1
 8013ca2:	b9ec      	cbnz	r4, 8013ce0 <strtok+0x4c>
 8013ca4:	2050      	movs	r0, #80	@ 0x50
 8013ca6:	f7fe fb23 	bl	80122f0 <malloc>
 8013caa:	4602      	mov	r2, r0
 8013cac:	6478      	str	r0, [r7, #68]	@ 0x44
 8013cae:	b920      	cbnz	r0, 8013cba <strtok+0x26>
 8013cb0:	4b10      	ldr	r3, [pc, #64]	@ (8013cf4 <strtok+0x60>)
 8013cb2:	4811      	ldr	r0, [pc, #68]	@ (8013cf8 <strtok+0x64>)
 8013cb4:	215b      	movs	r1, #91	@ 0x5b
 8013cb6:	f000 f94f 	bl	8013f58 <__assert_func>
 8013cba:	e9c0 4400 	strd	r4, r4, [r0]
 8013cbe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8013cc2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8013cc6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8013cca:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8013cce:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8013cd2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8013cd6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8013cda:	6184      	str	r4, [r0, #24]
 8013cdc:	7704      	strb	r4, [r0, #28]
 8013cde:	6244      	str	r4, [r0, #36]	@ 0x24
 8013ce0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013ce2:	4631      	mov	r1, r6
 8013ce4:	4628      	mov	r0, r5
 8013ce6:	2301      	movs	r3, #1
 8013ce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013cec:	f000 b806 	b.w	8013cfc <__strtok_r>
 8013cf0:	2000037c 	.word	0x2000037c
 8013cf4:	08018a82 	.word	0x08018a82
 8013cf8:	08018a99 	.word	0x08018a99

08013cfc <__strtok_r>:
 8013cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cfe:	4604      	mov	r4, r0
 8013d00:	b908      	cbnz	r0, 8013d06 <__strtok_r+0xa>
 8013d02:	6814      	ldr	r4, [r2, #0]
 8013d04:	b144      	cbz	r4, 8013d18 <__strtok_r+0x1c>
 8013d06:	4620      	mov	r0, r4
 8013d08:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013d0c:	460f      	mov	r7, r1
 8013d0e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8013d12:	b91e      	cbnz	r6, 8013d1c <__strtok_r+0x20>
 8013d14:	b965      	cbnz	r5, 8013d30 <__strtok_r+0x34>
 8013d16:	6015      	str	r5, [r2, #0]
 8013d18:	2000      	movs	r0, #0
 8013d1a:	e005      	b.n	8013d28 <__strtok_r+0x2c>
 8013d1c:	42b5      	cmp	r5, r6
 8013d1e:	d1f6      	bne.n	8013d0e <__strtok_r+0x12>
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d1f0      	bne.n	8013d06 <__strtok_r+0xa>
 8013d24:	6014      	str	r4, [r2, #0]
 8013d26:	7003      	strb	r3, [r0, #0]
 8013d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d2a:	461c      	mov	r4, r3
 8013d2c:	e00c      	b.n	8013d48 <__strtok_r+0x4c>
 8013d2e:	b91d      	cbnz	r5, 8013d38 <__strtok_r+0x3c>
 8013d30:	4627      	mov	r7, r4
 8013d32:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013d36:	460e      	mov	r6, r1
 8013d38:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013d3c:	42ab      	cmp	r3, r5
 8013d3e:	d1f6      	bne.n	8013d2e <__strtok_r+0x32>
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d0f2      	beq.n	8013d2a <__strtok_r+0x2e>
 8013d44:	2300      	movs	r3, #0
 8013d46:	703b      	strb	r3, [r7, #0]
 8013d48:	6014      	str	r4, [r2, #0]
 8013d4a:	e7ed      	b.n	8013d28 <__strtok_r+0x2c>

08013d4c <_localeconv_r>:
 8013d4c:	4800      	ldr	r0, [pc, #0]	@ (8013d50 <_localeconv_r+0x4>)
 8013d4e:	4770      	bx	lr
 8013d50:	20000300 	.word	0x20000300

08013d54 <_close_r>:
 8013d54:	b538      	push	{r3, r4, r5, lr}
 8013d56:	4d06      	ldr	r5, [pc, #24]	@ (8013d70 <_close_r+0x1c>)
 8013d58:	2300      	movs	r3, #0
 8013d5a:	4604      	mov	r4, r0
 8013d5c:	4608      	mov	r0, r1
 8013d5e:	602b      	str	r3, [r5, #0]
 8013d60:	f7f0 fa10 	bl	8004184 <_close>
 8013d64:	1c43      	adds	r3, r0, #1
 8013d66:	d102      	bne.n	8013d6e <_close_r+0x1a>
 8013d68:	682b      	ldr	r3, [r5, #0]
 8013d6a:	b103      	cbz	r3, 8013d6e <_close_r+0x1a>
 8013d6c:	6023      	str	r3, [r4, #0]
 8013d6e:	bd38      	pop	{r3, r4, r5, pc}
 8013d70:	2001d9e0 	.word	0x2001d9e0

08013d74 <_reclaim_reent>:
 8013d74:	4b2d      	ldr	r3, [pc, #180]	@ (8013e2c <_reclaim_reent+0xb8>)
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	4283      	cmp	r3, r0
 8013d7a:	b570      	push	{r4, r5, r6, lr}
 8013d7c:	4604      	mov	r4, r0
 8013d7e:	d053      	beq.n	8013e28 <_reclaim_reent+0xb4>
 8013d80:	69c3      	ldr	r3, [r0, #28]
 8013d82:	b31b      	cbz	r3, 8013dcc <_reclaim_reent+0x58>
 8013d84:	68db      	ldr	r3, [r3, #12]
 8013d86:	b163      	cbz	r3, 8013da2 <_reclaim_reent+0x2e>
 8013d88:	2500      	movs	r5, #0
 8013d8a:	69e3      	ldr	r3, [r4, #28]
 8013d8c:	68db      	ldr	r3, [r3, #12]
 8013d8e:	5959      	ldr	r1, [r3, r5]
 8013d90:	b9b1      	cbnz	r1, 8013dc0 <_reclaim_reent+0x4c>
 8013d92:	3504      	adds	r5, #4
 8013d94:	2d80      	cmp	r5, #128	@ 0x80
 8013d96:	d1f8      	bne.n	8013d8a <_reclaim_reent+0x16>
 8013d98:	69e3      	ldr	r3, [r4, #28]
 8013d9a:	4620      	mov	r0, r4
 8013d9c:	68d9      	ldr	r1, [r3, #12]
 8013d9e:	f000 ff53 	bl	8014c48 <_free_r>
 8013da2:	69e3      	ldr	r3, [r4, #28]
 8013da4:	6819      	ldr	r1, [r3, #0]
 8013da6:	b111      	cbz	r1, 8013dae <_reclaim_reent+0x3a>
 8013da8:	4620      	mov	r0, r4
 8013daa:	f000 ff4d 	bl	8014c48 <_free_r>
 8013dae:	69e3      	ldr	r3, [r4, #28]
 8013db0:	689d      	ldr	r5, [r3, #8]
 8013db2:	b15d      	cbz	r5, 8013dcc <_reclaim_reent+0x58>
 8013db4:	4629      	mov	r1, r5
 8013db6:	4620      	mov	r0, r4
 8013db8:	682d      	ldr	r5, [r5, #0]
 8013dba:	f000 ff45 	bl	8014c48 <_free_r>
 8013dbe:	e7f8      	b.n	8013db2 <_reclaim_reent+0x3e>
 8013dc0:	680e      	ldr	r6, [r1, #0]
 8013dc2:	4620      	mov	r0, r4
 8013dc4:	f000 ff40 	bl	8014c48 <_free_r>
 8013dc8:	4631      	mov	r1, r6
 8013dca:	e7e1      	b.n	8013d90 <_reclaim_reent+0x1c>
 8013dcc:	6961      	ldr	r1, [r4, #20]
 8013dce:	b111      	cbz	r1, 8013dd6 <_reclaim_reent+0x62>
 8013dd0:	4620      	mov	r0, r4
 8013dd2:	f000 ff39 	bl	8014c48 <_free_r>
 8013dd6:	69e1      	ldr	r1, [r4, #28]
 8013dd8:	b111      	cbz	r1, 8013de0 <_reclaim_reent+0x6c>
 8013dda:	4620      	mov	r0, r4
 8013ddc:	f000 ff34 	bl	8014c48 <_free_r>
 8013de0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013de2:	b111      	cbz	r1, 8013dea <_reclaim_reent+0x76>
 8013de4:	4620      	mov	r0, r4
 8013de6:	f000 ff2f 	bl	8014c48 <_free_r>
 8013dea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013dec:	b111      	cbz	r1, 8013df4 <_reclaim_reent+0x80>
 8013dee:	4620      	mov	r0, r4
 8013df0:	f000 ff2a 	bl	8014c48 <_free_r>
 8013df4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8013df6:	b111      	cbz	r1, 8013dfe <_reclaim_reent+0x8a>
 8013df8:	4620      	mov	r0, r4
 8013dfa:	f000 ff25 	bl	8014c48 <_free_r>
 8013dfe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013e00:	b111      	cbz	r1, 8013e08 <_reclaim_reent+0x94>
 8013e02:	4620      	mov	r0, r4
 8013e04:	f000 ff20 	bl	8014c48 <_free_r>
 8013e08:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8013e0a:	b111      	cbz	r1, 8013e12 <_reclaim_reent+0x9e>
 8013e0c:	4620      	mov	r0, r4
 8013e0e:	f000 ff1b 	bl	8014c48 <_free_r>
 8013e12:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013e14:	b111      	cbz	r1, 8013e1c <_reclaim_reent+0xa8>
 8013e16:	4620      	mov	r0, r4
 8013e18:	f000 ff16 	bl	8014c48 <_free_r>
 8013e1c:	6a23      	ldr	r3, [r4, #32]
 8013e1e:	b11b      	cbz	r3, 8013e28 <_reclaim_reent+0xb4>
 8013e20:	4620      	mov	r0, r4
 8013e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e26:	4718      	bx	r3
 8013e28:	bd70      	pop	{r4, r5, r6, pc}
 8013e2a:	bf00      	nop
 8013e2c:	2000037c 	.word	0x2000037c

08013e30 <_lseek_r>:
 8013e30:	b538      	push	{r3, r4, r5, lr}
 8013e32:	4d07      	ldr	r5, [pc, #28]	@ (8013e50 <_lseek_r+0x20>)
 8013e34:	4604      	mov	r4, r0
 8013e36:	4608      	mov	r0, r1
 8013e38:	4611      	mov	r1, r2
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	602a      	str	r2, [r5, #0]
 8013e3e:	461a      	mov	r2, r3
 8013e40:	f7f0 f9c7 	bl	80041d2 <_lseek>
 8013e44:	1c43      	adds	r3, r0, #1
 8013e46:	d102      	bne.n	8013e4e <_lseek_r+0x1e>
 8013e48:	682b      	ldr	r3, [r5, #0]
 8013e4a:	b103      	cbz	r3, 8013e4e <_lseek_r+0x1e>
 8013e4c:	6023      	str	r3, [r4, #0]
 8013e4e:	bd38      	pop	{r3, r4, r5, pc}
 8013e50:	2001d9e0 	.word	0x2001d9e0

08013e54 <_read_r>:
 8013e54:	b538      	push	{r3, r4, r5, lr}
 8013e56:	4d07      	ldr	r5, [pc, #28]	@ (8013e74 <_read_r+0x20>)
 8013e58:	4604      	mov	r4, r0
 8013e5a:	4608      	mov	r0, r1
 8013e5c:	4611      	mov	r1, r2
 8013e5e:	2200      	movs	r2, #0
 8013e60:	602a      	str	r2, [r5, #0]
 8013e62:	461a      	mov	r2, r3
 8013e64:	f7f0 f955 	bl	8004112 <_read>
 8013e68:	1c43      	adds	r3, r0, #1
 8013e6a:	d102      	bne.n	8013e72 <_read_r+0x1e>
 8013e6c:	682b      	ldr	r3, [r5, #0]
 8013e6e:	b103      	cbz	r3, 8013e72 <_read_r+0x1e>
 8013e70:	6023      	str	r3, [r4, #0]
 8013e72:	bd38      	pop	{r3, r4, r5, pc}
 8013e74:	2001d9e0 	.word	0x2001d9e0

08013e78 <_sbrk_r>:
 8013e78:	b538      	push	{r3, r4, r5, lr}
 8013e7a:	4d06      	ldr	r5, [pc, #24]	@ (8013e94 <_sbrk_r+0x1c>)
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	4604      	mov	r4, r0
 8013e80:	4608      	mov	r0, r1
 8013e82:	602b      	str	r3, [r5, #0]
 8013e84:	f7f0 f9b2 	bl	80041ec <_sbrk>
 8013e88:	1c43      	adds	r3, r0, #1
 8013e8a:	d102      	bne.n	8013e92 <_sbrk_r+0x1a>
 8013e8c:	682b      	ldr	r3, [r5, #0]
 8013e8e:	b103      	cbz	r3, 8013e92 <_sbrk_r+0x1a>
 8013e90:	6023      	str	r3, [r4, #0]
 8013e92:	bd38      	pop	{r3, r4, r5, pc}
 8013e94:	2001d9e0 	.word	0x2001d9e0

08013e98 <_write_r>:
 8013e98:	b538      	push	{r3, r4, r5, lr}
 8013e9a:	4d07      	ldr	r5, [pc, #28]	@ (8013eb8 <_write_r+0x20>)
 8013e9c:	4604      	mov	r4, r0
 8013e9e:	4608      	mov	r0, r1
 8013ea0:	4611      	mov	r1, r2
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	602a      	str	r2, [r5, #0]
 8013ea6:	461a      	mov	r2, r3
 8013ea8:	f7f0 f950 	bl	800414c <_write>
 8013eac:	1c43      	adds	r3, r0, #1
 8013eae:	d102      	bne.n	8013eb6 <_write_r+0x1e>
 8013eb0:	682b      	ldr	r3, [r5, #0]
 8013eb2:	b103      	cbz	r3, 8013eb6 <_write_r+0x1e>
 8013eb4:	6023      	str	r3, [r4, #0]
 8013eb6:	bd38      	pop	{r3, r4, r5, pc}
 8013eb8:	2001d9e0 	.word	0x2001d9e0

08013ebc <__errno>:
 8013ebc:	4b01      	ldr	r3, [pc, #4]	@ (8013ec4 <__errno+0x8>)
 8013ebe:	6818      	ldr	r0, [r3, #0]
 8013ec0:	4770      	bx	lr
 8013ec2:	bf00      	nop
 8013ec4:	2000037c 	.word	0x2000037c

08013ec8 <__libc_init_array>:
 8013ec8:	b570      	push	{r4, r5, r6, lr}
 8013eca:	4d0d      	ldr	r5, [pc, #52]	@ (8013f00 <__libc_init_array+0x38>)
 8013ecc:	4c0d      	ldr	r4, [pc, #52]	@ (8013f04 <__libc_init_array+0x3c>)
 8013ece:	1b64      	subs	r4, r4, r5
 8013ed0:	10a4      	asrs	r4, r4, #2
 8013ed2:	2600      	movs	r6, #0
 8013ed4:	42a6      	cmp	r6, r4
 8013ed6:	d109      	bne.n	8013eec <__libc_init_array+0x24>
 8013ed8:	4d0b      	ldr	r5, [pc, #44]	@ (8013f08 <__libc_init_array+0x40>)
 8013eda:	4c0c      	ldr	r4, [pc, #48]	@ (8013f0c <__libc_init_array+0x44>)
 8013edc:	f003 ff8c 	bl	8017df8 <_init>
 8013ee0:	1b64      	subs	r4, r4, r5
 8013ee2:	10a4      	asrs	r4, r4, #2
 8013ee4:	2600      	movs	r6, #0
 8013ee6:	42a6      	cmp	r6, r4
 8013ee8:	d105      	bne.n	8013ef6 <__libc_init_array+0x2e>
 8013eea:	bd70      	pop	{r4, r5, r6, pc}
 8013eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ef0:	4798      	blx	r3
 8013ef2:	3601      	adds	r6, #1
 8013ef4:	e7ee      	b.n	8013ed4 <__libc_init_array+0xc>
 8013ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8013efa:	4798      	blx	r3
 8013efc:	3601      	adds	r6, #1
 8013efe:	e7f2      	b.n	8013ee6 <__libc_init_array+0x1e>
 8013f00:	08019138 	.word	0x08019138
 8013f04:	08019138 	.word	0x08019138
 8013f08:	08019138 	.word	0x08019138
 8013f0c:	0801913c 	.word	0x0801913c

08013f10 <__retarget_lock_init_recursive>:
 8013f10:	4770      	bx	lr

08013f12 <__retarget_lock_acquire_recursive>:
 8013f12:	4770      	bx	lr

08013f14 <__retarget_lock_release_recursive>:
 8013f14:	4770      	bx	lr

08013f16 <strcpy>:
 8013f16:	4603      	mov	r3, r0
 8013f18:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013f1c:	f803 2b01 	strb.w	r2, [r3], #1
 8013f20:	2a00      	cmp	r2, #0
 8013f22:	d1f9      	bne.n	8013f18 <strcpy+0x2>
 8013f24:	4770      	bx	lr

08013f26 <memcpy>:
 8013f26:	440a      	add	r2, r1
 8013f28:	4291      	cmp	r1, r2
 8013f2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8013f2e:	d100      	bne.n	8013f32 <memcpy+0xc>
 8013f30:	4770      	bx	lr
 8013f32:	b510      	push	{r4, lr}
 8013f34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013f38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013f3c:	4291      	cmp	r1, r2
 8013f3e:	d1f9      	bne.n	8013f34 <memcpy+0xe>
 8013f40:	bd10      	pop	{r4, pc}
 8013f42:	0000      	movs	r0, r0
 8013f44:	0000      	movs	r0, r0
	...

08013f48 <nan>:
 8013f48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013f50 <nan+0x8>
 8013f4c:	4770      	bx	lr
 8013f4e:	bf00      	nop
 8013f50:	00000000 	.word	0x00000000
 8013f54:	7ff80000 	.word	0x7ff80000

08013f58 <__assert_func>:
 8013f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013f5a:	4614      	mov	r4, r2
 8013f5c:	461a      	mov	r2, r3
 8013f5e:	4b09      	ldr	r3, [pc, #36]	@ (8013f84 <__assert_func+0x2c>)
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	4605      	mov	r5, r0
 8013f64:	68d8      	ldr	r0, [r3, #12]
 8013f66:	b14c      	cbz	r4, 8013f7c <__assert_func+0x24>
 8013f68:	4b07      	ldr	r3, [pc, #28]	@ (8013f88 <__assert_func+0x30>)
 8013f6a:	9100      	str	r1, [sp, #0]
 8013f6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013f70:	4906      	ldr	r1, [pc, #24]	@ (8013f8c <__assert_func+0x34>)
 8013f72:	462b      	mov	r3, r5
 8013f74:	f001 ff62 	bl	8015e3c <fiprintf>
 8013f78:	f001 ff72 	bl	8015e60 <abort>
 8013f7c:	4b04      	ldr	r3, [pc, #16]	@ (8013f90 <__assert_func+0x38>)
 8013f7e:	461c      	mov	r4, r3
 8013f80:	e7f3      	b.n	8013f6a <__assert_func+0x12>
 8013f82:	bf00      	nop
 8013f84:	2000037c 	.word	0x2000037c
 8013f88:	08018afb 	.word	0x08018afb
 8013f8c:	08018b08 	.word	0x08018b08
 8013f90:	08018b36 	.word	0x08018b36

08013f94 <quorem>:
 8013f94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f98:	6903      	ldr	r3, [r0, #16]
 8013f9a:	690c      	ldr	r4, [r1, #16]
 8013f9c:	42a3      	cmp	r3, r4
 8013f9e:	4607      	mov	r7, r0
 8013fa0:	db7e      	blt.n	80140a0 <quorem+0x10c>
 8013fa2:	3c01      	subs	r4, #1
 8013fa4:	f101 0814 	add.w	r8, r1, #20
 8013fa8:	00a3      	lsls	r3, r4, #2
 8013faa:	f100 0514 	add.w	r5, r0, #20
 8013fae:	9300      	str	r3, [sp, #0]
 8013fb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013fb4:	9301      	str	r3, [sp, #4]
 8013fb6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013fba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013fbe:	3301      	adds	r3, #1
 8013fc0:	429a      	cmp	r2, r3
 8013fc2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013fc6:	fbb2 f6f3 	udiv	r6, r2, r3
 8013fca:	d32e      	bcc.n	801402a <quorem+0x96>
 8013fcc:	f04f 0a00 	mov.w	sl, #0
 8013fd0:	46c4      	mov	ip, r8
 8013fd2:	46ae      	mov	lr, r5
 8013fd4:	46d3      	mov	fp, sl
 8013fd6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013fda:	b298      	uxth	r0, r3
 8013fdc:	fb06 a000 	mla	r0, r6, r0, sl
 8013fe0:	0c02      	lsrs	r2, r0, #16
 8013fe2:	0c1b      	lsrs	r3, r3, #16
 8013fe4:	fb06 2303 	mla	r3, r6, r3, r2
 8013fe8:	f8de 2000 	ldr.w	r2, [lr]
 8013fec:	b280      	uxth	r0, r0
 8013fee:	b292      	uxth	r2, r2
 8013ff0:	1a12      	subs	r2, r2, r0
 8013ff2:	445a      	add	r2, fp
 8013ff4:	f8de 0000 	ldr.w	r0, [lr]
 8013ff8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013ffc:	b29b      	uxth	r3, r3
 8013ffe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014002:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014006:	b292      	uxth	r2, r2
 8014008:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801400c:	45e1      	cmp	r9, ip
 801400e:	f84e 2b04 	str.w	r2, [lr], #4
 8014012:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014016:	d2de      	bcs.n	8013fd6 <quorem+0x42>
 8014018:	9b00      	ldr	r3, [sp, #0]
 801401a:	58eb      	ldr	r3, [r5, r3]
 801401c:	b92b      	cbnz	r3, 801402a <quorem+0x96>
 801401e:	9b01      	ldr	r3, [sp, #4]
 8014020:	3b04      	subs	r3, #4
 8014022:	429d      	cmp	r5, r3
 8014024:	461a      	mov	r2, r3
 8014026:	d32f      	bcc.n	8014088 <quorem+0xf4>
 8014028:	613c      	str	r4, [r7, #16]
 801402a:	4638      	mov	r0, r7
 801402c:	f001 fc5e 	bl	80158ec <__mcmp>
 8014030:	2800      	cmp	r0, #0
 8014032:	db25      	blt.n	8014080 <quorem+0xec>
 8014034:	4629      	mov	r1, r5
 8014036:	2000      	movs	r0, #0
 8014038:	f858 2b04 	ldr.w	r2, [r8], #4
 801403c:	f8d1 c000 	ldr.w	ip, [r1]
 8014040:	fa1f fe82 	uxth.w	lr, r2
 8014044:	fa1f f38c 	uxth.w	r3, ip
 8014048:	eba3 030e 	sub.w	r3, r3, lr
 801404c:	4403      	add	r3, r0
 801404e:	0c12      	lsrs	r2, r2, #16
 8014050:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014054:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014058:	b29b      	uxth	r3, r3
 801405a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801405e:	45c1      	cmp	r9, r8
 8014060:	f841 3b04 	str.w	r3, [r1], #4
 8014064:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014068:	d2e6      	bcs.n	8014038 <quorem+0xa4>
 801406a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801406e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014072:	b922      	cbnz	r2, 801407e <quorem+0xea>
 8014074:	3b04      	subs	r3, #4
 8014076:	429d      	cmp	r5, r3
 8014078:	461a      	mov	r2, r3
 801407a:	d30b      	bcc.n	8014094 <quorem+0x100>
 801407c:	613c      	str	r4, [r7, #16]
 801407e:	3601      	adds	r6, #1
 8014080:	4630      	mov	r0, r6
 8014082:	b003      	add	sp, #12
 8014084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014088:	6812      	ldr	r2, [r2, #0]
 801408a:	3b04      	subs	r3, #4
 801408c:	2a00      	cmp	r2, #0
 801408e:	d1cb      	bne.n	8014028 <quorem+0x94>
 8014090:	3c01      	subs	r4, #1
 8014092:	e7c6      	b.n	8014022 <quorem+0x8e>
 8014094:	6812      	ldr	r2, [r2, #0]
 8014096:	3b04      	subs	r3, #4
 8014098:	2a00      	cmp	r2, #0
 801409a:	d1ef      	bne.n	801407c <quorem+0xe8>
 801409c:	3c01      	subs	r4, #1
 801409e:	e7ea      	b.n	8014076 <quorem+0xe2>
 80140a0:	2000      	movs	r0, #0
 80140a2:	e7ee      	b.n	8014082 <quorem+0xee>
 80140a4:	0000      	movs	r0, r0
	...

080140a8 <_dtoa_r>:
 80140a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140ac:	69c7      	ldr	r7, [r0, #28]
 80140ae:	b097      	sub	sp, #92	@ 0x5c
 80140b0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80140b4:	ec55 4b10 	vmov	r4, r5, d0
 80140b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80140ba:	9107      	str	r1, [sp, #28]
 80140bc:	4681      	mov	r9, r0
 80140be:	920c      	str	r2, [sp, #48]	@ 0x30
 80140c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80140c2:	b97f      	cbnz	r7, 80140e4 <_dtoa_r+0x3c>
 80140c4:	2010      	movs	r0, #16
 80140c6:	f7fe f913 	bl	80122f0 <malloc>
 80140ca:	4602      	mov	r2, r0
 80140cc:	f8c9 001c 	str.w	r0, [r9, #28]
 80140d0:	b920      	cbnz	r0, 80140dc <_dtoa_r+0x34>
 80140d2:	4ba9      	ldr	r3, [pc, #676]	@ (8014378 <_dtoa_r+0x2d0>)
 80140d4:	21ef      	movs	r1, #239	@ 0xef
 80140d6:	48a9      	ldr	r0, [pc, #676]	@ (801437c <_dtoa_r+0x2d4>)
 80140d8:	f7ff ff3e 	bl	8013f58 <__assert_func>
 80140dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80140e0:	6007      	str	r7, [r0, #0]
 80140e2:	60c7      	str	r7, [r0, #12]
 80140e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80140e8:	6819      	ldr	r1, [r3, #0]
 80140ea:	b159      	cbz	r1, 8014104 <_dtoa_r+0x5c>
 80140ec:	685a      	ldr	r2, [r3, #4]
 80140ee:	604a      	str	r2, [r1, #4]
 80140f0:	2301      	movs	r3, #1
 80140f2:	4093      	lsls	r3, r2
 80140f4:	608b      	str	r3, [r1, #8]
 80140f6:	4648      	mov	r0, r9
 80140f8:	f001 f97c 	bl	80153f4 <_Bfree>
 80140fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014100:	2200      	movs	r2, #0
 8014102:	601a      	str	r2, [r3, #0]
 8014104:	1e2b      	subs	r3, r5, #0
 8014106:	bfb9      	ittee	lt
 8014108:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801410c:	9305      	strlt	r3, [sp, #20]
 801410e:	2300      	movge	r3, #0
 8014110:	6033      	strge	r3, [r6, #0]
 8014112:	9f05      	ldr	r7, [sp, #20]
 8014114:	4b9a      	ldr	r3, [pc, #616]	@ (8014380 <_dtoa_r+0x2d8>)
 8014116:	bfbc      	itt	lt
 8014118:	2201      	movlt	r2, #1
 801411a:	6032      	strlt	r2, [r6, #0]
 801411c:	43bb      	bics	r3, r7
 801411e:	d112      	bne.n	8014146 <_dtoa_r+0x9e>
 8014120:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014122:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014126:	6013      	str	r3, [r2, #0]
 8014128:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801412c:	4323      	orrs	r3, r4
 801412e:	f000 855a 	beq.w	8014be6 <_dtoa_r+0xb3e>
 8014132:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014134:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8014394 <_dtoa_r+0x2ec>
 8014138:	2b00      	cmp	r3, #0
 801413a:	f000 855c 	beq.w	8014bf6 <_dtoa_r+0xb4e>
 801413e:	f10a 0303 	add.w	r3, sl, #3
 8014142:	f000 bd56 	b.w	8014bf2 <_dtoa_r+0xb4a>
 8014146:	ed9d 7b04 	vldr	d7, [sp, #16]
 801414a:	2200      	movs	r2, #0
 801414c:	ec51 0b17 	vmov	r0, r1, d7
 8014150:	2300      	movs	r3, #0
 8014152:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8014156:	f7ec fcc7 	bl	8000ae8 <__aeabi_dcmpeq>
 801415a:	4680      	mov	r8, r0
 801415c:	b158      	cbz	r0, 8014176 <_dtoa_r+0xce>
 801415e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014160:	2301      	movs	r3, #1
 8014162:	6013      	str	r3, [r2, #0]
 8014164:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014166:	b113      	cbz	r3, 801416e <_dtoa_r+0xc6>
 8014168:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801416a:	4b86      	ldr	r3, [pc, #536]	@ (8014384 <_dtoa_r+0x2dc>)
 801416c:	6013      	str	r3, [r2, #0]
 801416e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8014398 <_dtoa_r+0x2f0>
 8014172:	f000 bd40 	b.w	8014bf6 <_dtoa_r+0xb4e>
 8014176:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801417a:	aa14      	add	r2, sp, #80	@ 0x50
 801417c:	a915      	add	r1, sp, #84	@ 0x54
 801417e:	4648      	mov	r0, r9
 8014180:	f001 fcd4 	bl	8015b2c <__d2b>
 8014184:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014188:	9002      	str	r0, [sp, #8]
 801418a:	2e00      	cmp	r6, #0
 801418c:	d078      	beq.n	8014280 <_dtoa_r+0x1d8>
 801418e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014190:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8014194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014198:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801419c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80141a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80141a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80141a8:	4619      	mov	r1, r3
 80141aa:	2200      	movs	r2, #0
 80141ac:	4b76      	ldr	r3, [pc, #472]	@ (8014388 <_dtoa_r+0x2e0>)
 80141ae:	f7ec f87b 	bl	80002a8 <__aeabi_dsub>
 80141b2:	a36b      	add	r3, pc, #428	@ (adr r3, 8014360 <_dtoa_r+0x2b8>)
 80141b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141b8:	f7ec fa2e 	bl	8000618 <__aeabi_dmul>
 80141bc:	a36a      	add	r3, pc, #424	@ (adr r3, 8014368 <_dtoa_r+0x2c0>)
 80141be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c2:	f7ec f873 	bl	80002ac <__adddf3>
 80141c6:	4604      	mov	r4, r0
 80141c8:	4630      	mov	r0, r6
 80141ca:	460d      	mov	r5, r1
 80141cc:	f7ec f9ba 	bl	8000544 <__aeabi_i2d>
 80141d0:	a367      	add	r3, pc, #412	@ (adr r3, 8014370 <_dtoa_r+0x2c8>)
 80141d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141d6:	f7ec fa1f 	bl	8000618 <__aeabi_dmul>
 80141da:	4602      	mov	r2, r0
 80141dc:	460b      	mov	r3, r1
 80141de:	4620      	mov	r0, r4
 80141e0:	4629      	mov	r1, r5
 80141e2:	f7ec f863 	bl	80002ac <__adddf3>
 80141e6:	4604      	mov	r4, r0
 80141e8:	460d      	mov	r5, r1
 80141ea:	f7ec fcc5 	bl	8000b78 <__aeabi_d2iz>
 80141ee:	2200      	movs	r2, #0
 80141f0:	4607      	mov	r7, r0
 80141f2:	2300      	movs	r3, #0
 80141f4:	4620      	mov	r0, r4
 80141f6:	4629      	mov	r1, r5
 80141f8:	f7ec fc80 	bl	8000afc <__aeabi_dcmplt>
 80141fc:	b140      	cbz	r0, 8014210 <_dtoa_r+0x168>
 80141fe:	4638      	mov	r0, r7
 8014200:	f7ec f9a0 	bl	8000544 <__aeabi_i2d>
 8014204:	4622      	mov	r2, r4
 8014206:	462b      	mov	r3, r5
 8014208:	f7ec fc6e 	bl	8000ae8 <__aeabi_dcmpeq>
 801420c:	b900      	cbnz	r0, 8014210 <_dtoa_r+0x168>
 801420e:	3f01      	subs	r7, #1
 8014210:	2f16      	cmp	r7, #22
 8014212:	d852      	bhi.n	80142ba <_dtoa_r+0x212>
 8014214:	4b5d      	ldr	r3, [pc, #372]	@ (801438c <_dtoa_r+0x2e4>)
 8014216:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801421e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014222:	f7ec fc6b 	bl	8000afc <__aeabi_dcmplt>
 8014226:	2800      	cmp	r0, #0
 8014228:	d049      	beq.n	80142be <_dtoa_r+0x216>
 801422a:	3f01      	subs	r7, #1
 801422c:	2300      	movs	r3, #0
 801422e:	9310      	str	r3, [sp, #64]	@ 0x40
 8014230:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8014232:	1b9b      	subs	r3, r3, r6
 8014234:	1e5a      	subs	r2, r3, #1
 8014236:	bf45      	ittet	mi
 8014238:	f1c3 0301 	rsbmi	r3, r3, #1
 801423c:	9300      	strmi	r3, [sp, #0]
 801423e:	2300      	movpl	r3, #0
 8014240:	2300      	movmi	r3, #0
 8014242:	9206      	str	r2, [sp, #24]
 8014244:	bf54      	ite	pl
 8014246:	9300      	strpl	r3, [sp, #0]
 8014248:	9306      	strmi	r3, [sp, #24]
 801424a:	2f00      	cmp	r7, #0
 801424c:	db39      	blt.n	80142c2 <_dtoa_r+0x21a>
 801424e:	9b06      	ldr	r3, [sp, #24]
 8014250:	970d      	str	r7, [sp, #52]	@ 0x34
 8014252:	443b      	add	r3, r7
 8014254:	9306      	str	r3, [sp, #24]
 8014256:	2300      	movs	r3, #0
 8014258:	9308      	str	r3, [sp, #32]
 801425a:	9b07      	ldr	r3, [sp, #28]
 801425c:	2b09      	cmp	r3, #9
 801425e:	d863      	bhi.n	8014328 <_dtoa_r+0x280>
 8014260:	2b05      	cmp	r3, #5
 8014262:	bfc4      	itt	gt
 8014264:	3b04      	subgt	r3, #4
 8014266:	9307      	strgt	r3, [sp, #28]
 8014268:	9b07      	ldr	r3, [sp, #28]
 801426a:	f1a3 0302 	sub.w	r3, r3, #2
 801426e:	bfcc      	ite	gt
 8014270:	2400      	movgt	r4, #0
 8014272:	2401      	movle	r4, #1
 8014274:	2b03      	cmp	r3, #3
 8014276:	d863      	bhi.n	8014340 <_dtoa_r+0x298>
 8014278:	e8df f003 	tbb	[pc, r3]
 801427c:	2b375452 	.word	0x2b375452
 8014280:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8014284:	441e      	add	r6, r3
 8014286:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801428a:	2b20      	cmp	r3, #32
 801428c:	bfc1      	itttt	gt
 801428e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8014292:	409f      	lslgt	r7, r3
 8014294:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8014298:	fa24 f303 	lsrgt.w	r3, r4, r3
 801429c:	bfd6      	itet	le
 801429e:	f1c3 0320 	rsble	r3, r3, #32
 80142a2:	ea47 0003 	orrgt.w	r0, r7, r3
 80142a6:	fa04 f003 	lslle.w	r0, r4, r3
 80142aa:	f7ec f93b 	bl	8000524 <__aeabi_ui2d>
 80142ae:	2201      	movs	r2, #1
 80142b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80142b4:	3e01      	subs	r6, #1
 80142b6:	9212      	str	r2, [sp, #72]	@ 0x48
 80142b8:	e776      	b.n	80141a8 <_dtoa_r+0x100>
 80142ba:	2301      	movs	r3, #1
 80142bc:	e7b7      	b.n	801422e <_dtoa_r+0x186>
 80142be:	9010      	str	r0, [sp, #64]	@ 0x40
 80142c0:	e7b6      	b.n	8014230 <_dtoa_r+0x188>
 80142c2:	9b00      	ldr	r3, [sp, #0]
 80142c4:	1bdb      	subs	r3, r3, r7
 80142c6:	9300      	str	r3, [sp, #0]
 80142c8:	427b      	negs	r3, r7
 80142ca:	9308      	str	r3, [sp, #32]
 80142cc:	2300      	movs	r3, #0
 80142ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80142d0:	e7c3      	b.n	801425a <_dtoa_r+0x1b2>
 80142d2:	2301      	movs	r3, #1
 80142d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80142d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80142d8:	eb07 0b03 	add.w	fp, r7, r3
 80142dc:	f10b 0301 	add.w	r3, fp, #1
 80142e0:	2b01      	cmp	r3, #1
 80142e2:	9303      	str	r3, [sp, #12]
 80142e4:	bfb8      	it	lt
 80142e6:	2301      	movlt	r3, #1
 80142e8:	e006      	b.n	80142f8 <_dtoa_r+0x250>
 80142ea:	2301      	movs	r3, #1
 80142ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80142ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	dd28      	ble.n	8014346 <_dtoa_r+0x29e>
 80142f4:	469b      	mov	fp, r3
 80142f6:	9303      	str	r3, [sp, #12]
 80142f8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80142fc:	2100      	movs	r1, #0
 80142fe:	2204      	movs	r2, #4
 8014300:	f102 0514 	add.w	r5, r2, #20
 8014304:	429d      	cmp	r5, r3
 8014306:	d926      	bls.n	8014356 <_dtoa_r+0x2ae>
 8014308:	6041      	str	r1, [r0, #4]
 801430a:	4648      	mov	r0, r9
 801430c:	f001 f832 	bl	8015374 <_Balloc>
 8014310:	4682      	mov	sl, r0
 8014312:	2800      	cmp	r0, #0
 8014314:	d142      	bne.n	801439c <_dtoa_r+0x2f4>
 8014316:	4b1e      	ldr	r3, [pc, #120]	@ (8014390 <_dtoa_r+0x2e8>)
 8014318:	4602      	mov	r2, r0
 801431a:	f240 11af 	movw	r1, #431	@ 0x1af
 801431e:	e6da      	b.n	80140d6 <_dtoa_r+0x2e>
 8014320:	2300      	movs	r3, #0
 8014322:	e7e3      	b.n	80142ec <_dtoa_r+0x244>
 8014324:	2300      	movs	r3, #0
 8014326:	e7d5      	b.n	80142d4 <_dtoa_r+0x22c>
 8014328:	2401      	movs	r4, #1
 801432a:	2300      	movs	r3, #0
 801432c:	9307      	str	r3, [sp, #28]
 801432e:	9409      	str	r4, [sp, #36]	@ 0x24
 8014330:	f04f 3bff 	mov.w	fp, #4294967295
 8014334:	2200      	movs	r2, #0
 8014336:	f8cd b00c 	str.w	fp, [sp, #12]
 801433a:	2312      	movs	r3, #18
 801433c:	920c      	str	r2, [sp, #48]	@ 0x30
 801433e:	e7db      	b.n	80142f8 <_dtoa_r+0x250>
 8014340:	2301      	movs	r3, #1
 8014342:	9309      	str	r3, [sp, #36]	@ 0x24
 8014344:	e7f4      	b.n	8014330 <_dtoa_r+0x288>
 8014346:	f04f 0b01 	mov.w	fp, #1
 801434a:	f8cd b00c 	str.w	fp, [sp, #12]
 801434e:	465b      	mov	r3, fp
 8014350:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8014354:	e7d0      	b.n	80142f8 <_dtoa_r+0x250>
 8014356:	3101      	adds	r1, #1
 8014358:	0052      	lsls	r2, r2, #1
 801435a:	e7d1      	b.n	8014300 <_dtoa_r+0x258>
 801435c:	f3af 8000 	nop.w
 8014360:	636f4361 	.word	0x636f4361
 8014364:	3fd287a7 	.word	0x3fd287a7
 8014368:	8b60c8b3 	.word	0x8b60c8b3
 801436c:	3fc68a28 	.word	0x3fc68a28
 8014370:	509f79fb 	.word	0x509f79fb
 8014374:	3fd34413 	.word	0x3fd34413
 8014378:	08018a82 	.word	0x08018a82
 801437c:	08018b44 	.word	0x08018b44
 8014380:	7ff00000 	.word	0x7ff00000
 8014384:	08018a5f 	.word	0x08018a5f
 8014388:	3ff80000 	.word	0x3ff80000
 801438c:	08018e00 	.word	0x08018e00
 8014390:	08018b9c 	.word	0x08018b9c
 8014394:	08018b40 	.word	0x08018b40
 8014398:	08018a5e 	.word	0x08018a5e
 801439c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80143a0:	6018      	str	r0, [r3, #0]
 80143a2:	9b03      	ldr	r3, [sp, #12]
 80143a4:	2b0e      	cmp	r3, #14
 80143a6:	f200 80a1 	bhi.w	80144ec <_dtoa_r+0x444>
 80143aa:	2c00      	cmp	r4, #0
 80143ac:	f000 809e 	beq.w	80144ec <_dtoa_r+0x444>
 80143b0:	2f00      	cmp	r7, #0
 80143b2:	dd33      	ble.n	801441c <_dtoa_r+0x374>
 80143b4:	4b9c      	ldr	r3, [pc, #624]	@ (8014628 <_dtoa_r+0x580>)
 80143b6:	f007 020f 	and.w	r2, r7, #15
 80143ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80143be:	ed93 7b00 	vldr	d7, [r3]
 80143c2:	05f8      	lsls	r0, r7, #23
 80143c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80143c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80143cc:	d516      	bpl.n	80143fc <_dtoa_r+0x354>
 80143ce:	4b97      	ldr	r3, [pc, #604]	@ (801462c <_dtoa_r+0x584>)
 80143d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80143d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80143d8:	f7ec fa48 	bl	800086c <__aeabi_ddiv>
 80143dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80143e0:	f004 040f 	and.w	r4, r4, #15
 80143e4:	2603      	movs	r6, #3
 80143e6:	4d91      	ldr	r5, [pc, #580]	@ (801462c <_dtoa_r+0x584>)
 80143e8:	b954      	cbnz	r4, 8014400 <_dtoa_r+0x358>
 80143ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80143ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80143f2:	f7ec fa3b 	bl	800086c <__aeabi_ddiv>
 80143f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80143fa:	e028      	b.n	801444e <_dtoa_r+0x3a6>
 80143fc:	2602      	movs	r6, #2
 80143fe:	e7f2      	b.n	80143e6 <_dtoa_r+0x33e>
 8014400:	07e1      	lsls	r1, r4, #31
 8014402:	d508      	bpl.n	8014416 <_dtoa_r+0x36e>
 8014404:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8014408:	e9d5 2300 	ldrd	r2, r3, [r5]
 801440c:	f7ec f904 	bl	8000618 <__aeabi_dmul>
 8014410:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8014414:	3601      	adds	r6, #1
 8014416:	1064      	asrs	r4, r4, #1
 8014418:	3508      	adds	r5, #8
 801441a:	e7e5      	b.n	80143e8 <_dtoa_r+0x340>
 801441c:	f000 80af 	beq.w	801457e <_dtoa_r+0x4d6>
 8014420:	427c      	negs	r4, r7
 8014422:	4b81      	ldr	r3, [pc, #516]	@ (8014628 <_dtoa_r+0x580>)
 8014424:	4d81      	ldr	r5, [pc, #516]	@ (801462c <_dtoa_r+0x584>)
 8014426:	f004 020f 	and.w	r2, r4, #15
 801442a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014432:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014436:	f7ec f8ef 	bl	8000618 <__aeabi_dmul>
 801443a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801443e:	1124      	asrs	r4, r4, #4
 8014440:	2300      	movs	r3, #0
 8014442:	2602      	movs	r6, #2
 8014444:	2c00      	cmp	r4, #0
 8014446:	f040 808f 	bne.w	8014568 <_dtoa_r+0x4c0>
 801444a:	2b00      	cmp	r3, #0
 801444c:	d1d3      	bne.n	80143f6 <_dtoa_r+0x34e>
 801444e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014450:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8014454:	2b00      	cmp	r3, #0
 8014456:	f000 8094 	beq.w	8014582 <_dtoa_r+0x4da>
 801445a:	4b75      	ldr	r3, [pc, #468]	@ (8014630 <_dtoa_r+0x588>)
 801445c:	2200      	movs	r2, #0
 801445e:	4620      	mov	r0, r4
 8014460:	4629      	mov	r1, r5
 8014462:	f7ec fb4b 	bl	8000afc <__aeabi_dcmplt>
 8014466:	2800      	cmp	r0, #0
 8014468:	f000 808b 	beq.w	8014582 <_dtoa_r+0x4da>
 801446c:	9b03      	ldr	r3, [sp, #12]
 801446e:	2b00      	cmp	r3, #0
 8014470:	f000 8087 	beq.w	8014582 <_dtoa_r+0x4da>
 8014474:	f1bb 0f00 	cmp.w	fp, #0
 8014478:	dd34      	ble.n	80144e4 <_dtoa_r+0x43c>
 801447a:	4620      	mov	r0, r4
 801447c:	4b6d      	ldr	r3, [pc, #436]	@ (8014634 <_dtoa_r+0x58c>)
 801447e:	2200      	movs	r2, #0
 8014480:	4629      	mov	r1, r5
 8014482:	f7ec f8c9 	bl	8000618 <__aeabi_dmul>
 8014486:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801448a:	f107 38ff 	add.w	r8, r7, #4294967295
 801448e:	3601      	adds	r6, #1
 8014490:	465c      	mov	r4, fp
 8014492:	4630      	mov	r0, r6
 8014494:	f7ec f856 	bl	8000544 <__aeabi_i2d>
 8014498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801449c:	f7ec f8bc 	bl	8000618 <__aeabi_dmul>
 80144a0:	4b65      	ldr	r3, [pc, #404]	@ (8014638 <_dtoa_r+0x590>)
 80144a2:	2200      	movs	r2, #0
 80144a4:	f7eb ff02 	bl	80002ac <__adddf3>
 80144a8:	4605      	mov	r5, r0
 80144aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80144ae:	2c00      	cmp	r4, #0
 80144b0:	d16a      	bne.n	8014588 <_dtoa_r+0x4e0>
 80144b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80144b6:	4b61      	ldr	r3, [pc, #388]	@ (801463c <_dtoa_r+0x594>)
 80144b8:	2200      	movs	r2, #0
 80144ba:	f7eb fef5 	bl	80002a8 <__aeabi_dsub>
 80144be:	4602      	mov	r2, r0
 80144c0:	460b      	mov	r3, r1
 80144c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80144c6:	462a      	mov	r2, r5
 80144c8:	4633      	mov	r3, r6
 80144ca:	f7ec fb35 	bl	8000b38 <__aeabi_dcmpgt>
 80144ce:	2800      	cmp	r0, #0
 80144d0:	f040 8298 	bne.w	8014a04 <_dtoa_r+0x95c>
 80144d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80144d8:	462a      	mov	r2, r5
 80144da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80144de:	f7ec fb0d 	bl	8000afc <__aeabi_dcmplt>
 80144e2:	bb38      	cbnz	r0, 8014534 <_dtoa_r+0x48c>
 80144e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80144e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80144ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	f2c0 8157 	blt.w	80147a2 <_dtoa_r+0x6fa>
 80144f4:	2f0e      	cmp	r7, #14
 80144f6:	f300 8154 	bgt.w	80147a2 <_dtoa_r+0x6fa>
 80144fa:	4b4b      	ldr	r3, [pc, #300]	@ (8014628 <_dtoa_r+0x580>)
 80144fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014500:	ed93 7b00 	vldr	d7, [r3]
 8014504:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014506:	2b00      	cmp	r3, #0
 8014508:	ed8d 7b00 	vstr	d7, [sp]
 801450c:	f280 80e5 	bge.w	80146da <_dtoa_r+0x632>
 8014510:	9b03      	ldr	r3, [sp, #12]
 8014512:	2b00      	cmp	r3, #0
 8014514:	f300 80e1 	bgt.w	80146da <_dtoa_r+0x632>
 8014518:	d10c      	bne.n	8014534 <_dtoa_r+0x48c>
 801451a:	4b48      	ldr	r3, [pc, #288]	@ (801463c <_dtoa_r+0x594>)
 801451c:	2200      	movs	r2, #0
 801451e:	ec51 0b17 	vmov	r0, r1, d7
 8014522:	f7ec f879 	bl	8000618 <__aeabi_dmul>
 8014526:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801452a:	f7ec fafb 	bl	8000b24 <__aeabi_dcmpge>
 801452e:	2800      	cmp	r0, #0
 8014530:	f000 8266 	beq.w	8014a00 <_dtoa_r+0x958>
 8014534:	2400      	movs	r4, #0
 8014536:	4625      	mov	r5, r4
 8014538:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801453a:	4656      	mov	r6, sl
 801453c:	ea6f 0803 	mvn.w	r8, r3
 8014540:	2700      	movs	r7, #0
 8014542:	4621      	mov	r1, r4
 8014544:	4648      	mov	r0, r9
 8014546:	f000 ff55 	bl	80153f4 <_Bfree>
 801454a:	2d00      	cmp	r5, #0
 801454c:	f000 80bd 	beq.w	80146ca <_dtoa_r+0x622>
 8014550:	b12f      	cbz	r7, 801455e <_dtoa_r+0x4b6>
 8014552:	42af      	cmp	r7, r5
 8014554:	d003      	beq.n	801455e <_dtoa_r+0x4b6>
 8014556:	4639      	mov	r1, r7
 8014558:	4648      	mov	r0, r9
 801455a:	f000 ff4b 	bl	80153f4 <_Bfree>
 801455e:	4629      	mov	r1, r5
 8014560:	4648      	mov	r0, r9
 8014562:	f000 ff47 	bl	80153f4 <_Bfree>
 8014566:	e0b0      	b.n	80146ca <_dtoa_r+0x622>
 8014568:	07e2      	lsls	r2, r4, #31
 801456a:	d505      	bpl.n	8014578 <_dtoa_r+0x4d0>
 801456c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014570:	f7ec f852 	bl	8000618 <__aeabi_dmul>
 8014574:	3601      	adds	r6, #1
 8014576:	2301      	movs	r3, #1
 8014578:	1064      	asrs	r4, r4, #1
 801457a:	3508      	adds	r5, #8
 801457c:	e762      	b.n	8014444 <_dtoa_r+0x39c>
 801457e:	2602      	movs	r6, #2
 8014580:	e765      	b.n	801444e <_dtoa_r+0x3a6>
 8014582:	9c03      	ldr	r4, [sp, #12]
 8014584:	46b8      	mov	r8, r7
 8014586:	e784      	b.n	8014492 <_dtoa_r+0x3ea>
 8014588:	4b27      	ldr	r3, [pc, #156]	@ (8014628 <_dtoa_r+0x580>)
 801458a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801458c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014590:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014594:	4454      	add	r4, sl
 8014596:	2900      	cmp	r1, #0
 8014598:	d054      	beq.n	8014644 <_dtoa_r+0x59c>
 801459a:	4929      	ldr	r1, [pc, #164]	@ (8014640 <_dtoa_r+0x598>)
 801459c:	2000      	movs	r0, #0
 801459e:	f7ec f965 	bl	800086c <__aeabi_ddiv>
 80145a2:	4633      	mov	r3, r6
 80145a4:	462a      	mov	r2, r5
 80145a6:	f7eb fe7f 	bl	80002a8 <__aeabi_dsub>
 80145aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80145ae:	4656      	mov	r6, sl
 80145b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80145b4:	f7ec fae0 	bl	8000b78 <__aeabi_d2iz>
 80145b8:	4605      	mov	r5, r0
 80145ba:	f7eb ffc3 	bl	8000544 <__aeabi_i2d>
 80145be:	4602      	mov	r2, r0
 80145c0:	460b      	mov	r3, r1
 80145c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80145c6:	f7eb fe6f 	bl	80002a8 <__aeabi_dsub>
 80145ca:	3530      	adds	r5, #48	@ 0x30
 80145cc:	4602      	mov	r2, r0
 80145ce:	460b      	mov	r3, r1
 80145d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80145d4:	f806 5b01 	strb.w	r5, [r6], #1
 80145d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80145dc:	f7ec fa8e 	bl	8000afc <__aeabi_dcmplt>
 80145e0:	2800      	cmp	r0, #0
 80145e2:	d172      	bne.n	80146ca <_dtoa_r+0x622>
 80145e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80145e8:	4911      	ldr	r1, [pc, #68]	@ (8014630 <_dtoa_r+0x588>)
 80145ea:	2000      	movs	r0, #0
 80145ec:	f7eb fe5c 	bl	80002a8 <__aeabi_dsub>
 80145f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80145f4:	f7ec fa82 	bl	8000afc <__aeabi_dcmplt>
 80145f8:	2800      	cmp	r0, #0
 80145fa:	f040 80b4 	bne.w	8014766 <_dtoa_r+0x6be>
 80145fe:	42a6      	cmp	r6, r4
 8014600:	f43f af70 	beq.w	80144e4 <_dtoa_r+0x43c>
 8014604:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8014608:	4b0a      	ldr	r3, [pc, #40]	@ (8014634 <_dtoa_r+0x58c>)
 801460a:	2200      	movs	r2, #0
 801460c:	f7ec f804 	bl	8000618 <__aeabi_dmul>
 8014610:	4b08      	ldr	r3, [pc, #32]	@ (8014634 <_dtoa_r+0x58c>)
 8014612:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8014616:	2200      	movs	r2, #0
 8014618:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801461c:	f7eb fffc 	bl	8000618 <__aeabi_dmul>
 8014620:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014624:	e7c4      	b.n	80145b0 <_dtoa_r+0x508>
 8014626:	bf00      	nop
 8014628:	08018e00 	.word	0x08018e00
 801462c:	08018dd8 	.word	0x08018dd8
 8014630:	3ff00000 	.word	0x3ff00000
 8014634:	40240000 	.word	0x40240000
 8014638:	401c0000 	.word	0x401c0000
 801463c:	40140000 	.word	0x40140000
 8014640:	3fe00000 	.word	0x3fe00000
 8014644:	4631      	mov	r1, r6
 8014646:	4628      	mov	r0, r5
 8014648:	f7eb ffe6 	bl	8000618 <__aeabi_dmul>
 801464c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8014650:	9413      	str	r4, [sp, #76]	@ 0x4c
 8014652:	4656      	mov	r6, sl
 8014654:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014658:	f7ec fa8e 	bl	8000b78 <__aeabi_d2iz>
 801465c:	4605      	mov	r5, r0
 801465e:	f7eb ff71 	bl	8000544 <__aeabi_i2d>
 8014662:	4602      	mov	r2, r0
 8014664:	460b      	mov	r3, r1
 8014666:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801466a:	f7eb fe1d 	bl	80002a8 <__aeabi_dsub>
 801466e:	3530      	adds	r5, #48	@ 0x30
 8014670:	f806 5b01 	strb.w	r5, [r6], #1
 8014674:	4602      	mov	r2, r0
 8014676:	460b      	mov	r3, r1
 8014678:	42a6      	cmp	r6, r4
 801467a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801467e:	f04f 0200 	mov.w	r2, #0
 8014682:	d124      	bne.n	80146ce <_dtoa_r+0x626>
 8014684:	4baf      	ldr	r3, [pc, #700]	@ (8014944 <_dtoa_r+0x89c>)
 8014686:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801468a:	f7eb fe0f 	bl	80002ac <__adddf3>
 801468e:	4602      	mov	r2, r0
 8014690:	460b      	mov	r3, r1
 8014692:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014696:	f7ec fa4f 	bl	8000b38 <__aeabi_dcmpgt>
 801469a:	2800      	cmp	r0, #0
 801469c:	d163      	bne.n	8014766 <_dtoa_r+0x6be>
 801469e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80146a2:	49a8      	ldr	r1, [pc, #672]	@ (8014944 <_dtoa_r+0x89c>)
 80146a4:	2000      	movs	r0, #0
 80146a6:	f7eb fdff 	bl	80002a8 <__aeabi_dsub>
 80146aa:	4602      	mov	r2, r0
 80146ac:	460b      	mov	r3, r1
 80146ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80146b2:	f7ec fa23 	bl	8000afc <__aeabi_dcmplt>
 80146b6:	2800      	cmp	r0, #0
 80146b8:	f43f af14 	beq.w	80144e4 <_dtoa_r+0x43c>
 80146bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80146be:	1e73      	subs	r3, r6, #1
 80146c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80146c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80146c6:	2b30      	cmp	r3, #48	@ 0x30
 80146c8:	d0f8      	beq.n	80146bc <_dtoa_r+0x614>
 80146ca:	4647      	mov	r7, r8
 80146cc:	e03b      	b.n	8014746 <_dtoa_r+0x69e>
 80146ce:	4b9e      	ldr	r3, [pc, #632]	@ (8014948 <_dtoa_r+0x8a0>)
 80146d0:	f7eb ffa2 	bl	8000618 <__aeabi_dmul>
 80146d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80146d8:	e7bc      	b.n	8014654 <_dtoa_r+0x5ac>
 80146da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80146de:	4656      	mov	r6, sl
 80146e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80146e4:	4620      	mov	r0, r4
 80146e6:	4629      	mov	r1, r5
 80146e8:	f7ec f8c0 	bl	800086c <__aeabi_ddiv>
 80146ec:	f7ec fa44 	bl	8000b78 <__aeabi_d2iz>
 80146f0:	4680      	mov	r8, r0
 80146f2:	f7eb ff27 	bl	8000544 <__aeabi_i2d>
 80146f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80146fa:	f7eb ff8d 	bl	8000618 <__aeabi_dmul>
 80146fe:	4602      	mov	r2, r0
 8014700:	460b      	mov	r3, r1
 8014702:	4620      	mov	r0, r4
 8014704:	4629      	mov	r1, r5
 8014706:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801470a:	f7eb fdcd 	bl	80002a8 <__aeabi_dsub>
 801470e:	f806 4b01 	strb.w	r4, [r6], #1
 8014712:	9d03      	ldr	r5, [sp, #12]
 8014714:	eba6 040a 	sub.w	r4, r6, sl
 8014718:	42a5      	cmp	r5, r4
 801471a:	4602      	mov	r2, r0
 801471c:	460b      	mov	r3, r1
 801471e:	d133      	bne.n	8014788 <_dtoa_r+0x6e0>
 8014720:	f7eb fdc4 	bl	80002ac <__adddf3>
 8014724:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014728:	4604      	mov	r4, r0
 801472a:	460d      	mov	r5, r1
 801472c:	f7ec fa04 	bl	8000b38 <__aeabi_dcmpgt>
 8014730:	b9c0      	cbnz	r0, 8014764 <_dtoa_r+0x6bc>
 8014732:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014736:	4620      	mov	r0, r4
 8014738:	4629      	mov	r1, r5
 801473a:	f7ec f9d5 	bl	8000ae8 <__aeabi_dcmpeq>
 801473e:	b110      	cbz	r0, 8014746 <_dtoa_r+0x69e>
 8014740:	f018 0f01 	tst.w	r8, #1
 8014744:	d10e      	bne.n	8014764 <_dtoa_r+0x6bc>
 8014746:	9902      	ldr	r1, [sp, #8]
 8014748:	4648      	mov	r0, r9
 801474a:	f000 fe53 	bl	80153f4 <_Bfree>
 801474e:	2300      	movs	r3, #0
 8014750:	7033      	strb	r3, [r6, #0]
 8014752:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014754:	3701      	adds	r7, #1
 8014756:	601f      	str	r7, [r3, #0]
 8014758:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801475a:	2b00      	cmp	r3, #0
 801475c:	f000 824b 	beq.w	8014bf6 <_dtoa_r+0xb4e>
 8014760:	601e      	str	r6, [r3, #0]
 8014762:	e248      	b.n	8014bf6 <_dtoa_r+0xb4e>
 8014764:	46b8      	mov	r8, r7
 8014766:	4633      	mov	r3, r6
 8014768:	461e      	mov	r6, r3
 801476a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801476e:	2a39      	cmp	r2, #57	@ 0x39
 8014770:	d106      	bne.n	8014780 <_dtoa_r+0x6d8>
 8014772:	459a      	cmp	sl, r3
 8014774:	d1f8      	bne.n	8014768 <_dtoa_r+0x6c0>
 8014776:	2230      	movs	r2, #48	@ 0x30
 8014778:	f108 0801 	add.w	r8, r8, #1
 801477c:	f88a 2000 	strb.w	r2, [sl]
 8014780:	781a      	ldrb	r2, [r3, #0]
 8014782:	3201      	adds	r2, #1
 8014784:	701a      	strb	r2, [r3, #0]
 8014786:	e7a0      	b.n	80146ca <_dtoa_r+0x622>
 8014788:	4b6f      	ldr	r3, [pc, #444]	@ (8014948 <_dtoa_r+0x8a0>)
 801478a:	2200      	movs	r2, #0
 801478c:	f7eb ff44 	bl	8000618 <__aeabi_dmul>
 8014790:	2200      	movs	r2, #0
 8014792:	2300      	movs	r3, #0
 8014794:	4604      	mov	r4, r0
 8014796:	460d      	mov	r5, r1
 8014798:	f7ec f9a6 	bl	8000ae8 <__aeabi_dcmpeq>
 801479c:	2800      	cmp	r0, #0
 801479e:	d09f      	beq.n	80146e0 <_dtoa_r+0x638>
 80147a0:	e7d1      	b.n	8014746 <_dtoa_r+0x69e>
 80147a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80147a4:	2a00      	cmp	r2, #0
 80147a6:	f000 80ea 	beq.w	801497e <_dtoa_r+0x8d6>
 80147aa:	9a07      	ldr	r2, [sp, #28]
 80147ac:	2a01      	cmp	r2, #1
 80147ae:	f300 80cd 	bgt.w	801494c <_dtoa_r+0x8a4>
 80147b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80147b4:	2a00      	cmp	r2, #0
 80147b6:	f000 80c1 	beq.w	801493c <_dtoa_r+0x894>
 80147ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80147be:	9c08      	ldr	r4, [sp, #32]
 80147c0:	9e00      	ldr	r6, [sp, #0]
 80147c2:	9a00      	ldr	r2, [sp, #0]
 80147c4:	441a      	add	r2, r3
 80147c6:	9200      	str	r2, [sp, #0]
 80147c8:	9a06      	ldr	r2, [sp, #24]
 80147ca:	2101      	movs	r1, #1
 80147cc:	441a      	add	r2, r3
 80147ce:	4648      	mov	r0, r9
 80147d0:	9206      	str	r2, [sp, #24]
 80147d2:	f000 ff0d 	bl	80155f0 <__i2b>
 80147d6:	4605      	mov	r5, r0
 80147d8:	b166      	cbz	r6, 80147f4 <_dtoa_r+0x74c>
 80147da:	9b06      	ldr	r3, [sp, #24]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	dd09      	ble.n	80147f4 <_dtoa_r+0x74c>
 80147e0:	42b3      	cmp	r3, r6
 80147e2:	9a00      	ldr	r2, [sp, #0]
 80147e4:	bfa8      	it	ge
 80147e6:	4633      	movge	r3, r6
 80147e8:	1ad2      	subs	r2, r2, r3
 80147ea:	9200      	str	r2, [sp, #0]
 80147ec:	9a06      	ldr	r2, [sp, #24]
 80147ee:	1af6      	subs	r6, r6, r3
 80147f0:	1ad3      	subs	r3, r2, r3
 80147f2:	9306      	str	r3, [sp, #24]
 80147f4:	9b08      	ldr	r3, [sp, #32]
 80147f6:	b30b      	cbz	r3, 801483c <_dtoa_r+0x794>
 80147f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	f000 80c6 	beq.w	801498c <_dtoa_r+0x8e4>
 8014800:	2c00      	cmp	r4, #0
 8014802:	f000 80c0 	beq.w	8014986 <_dtoa_r+0x8de>
 8014806:	4629      	mov	r1, r5
 8014808:	4622      	mov	r2, r4
 801480a:	4648      	mov	r0, r9
 801480c:	f000 ffa8 	bl	8015760 <__pow5mult>
 8014810:	9a02      	ldr	r2, [sp, #8]
 8014812:	4601      	mov	r1, r0
 8014814:	4605      	mov	r5, r0
 8014816:	4648      	mov	r0, r9
 8014818:	f000 ff00 	bl	801561c <__multiply>
 801481c:	9902      	ldr	r1, [sp, #8]
 801481e:	4680      	mov	r8, r0
 8014820:	4648      	mov	r0, r9
 8014822:	f000 fde7 	bl	80153f4 <_Bfree>
 8014826:	9b08      	ldr	r3, [sp, #32]
 8014828:	1b1b      	subs	r3, r3, r4
 801482a:	9308      	str	r3, [sp, #32]
 801482c:	f000 80b1 	beq.w	8014992 <_dtoa_r+0x8ea>
 8014830:	9a08      	ldr	r2, [sp, #32]
 8014832:	4641      	mov	r1, r8
 8014834:	4648      	mov	r0, r9
 8014836:	f000 ff93 	bl	8015760 <__pow5mult>
 801483a:	9002      	str	r0, [sp, #8]
 801483c:	2101      	movs	r1, #1
 801483e:	4648      	mov	r0, r9
 8014840:	f000 fed6 	bl	80155f0 <__i2b>
 8014844:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014846:	4604      	mov	r4, r0
 8014848:	2b00      	cmp	r3, #0
 801484a:	f000 81d8 	beq.w	8014bfe <_dtoa_r+0xb56>
 801484e:	461a      	mov	r2, r3
 8014850:	4601      	mov	r1, r0
 8014852:	4648      	mov	r0, r9
 8014854:	f000 ff84 	bl	8015760 <__pow5mult>
 8014858:	9b07      	ldr	r3, [sp, #28]
 801485a:	2b01      	cmp	r3, #1
 801485c:	4604      	mov	r4, r0
 801485e:	f300 809f 	bgt.w	80149a0 <_dtoa_r+0x8f8>
 8014862:	9b04      	ldr	r3, [sp, #16]
 8014864:	2b00      	cmp	r3, #0
 8014866:	f040 8097 	bne.w	8014998 <_dtoa_r+0x8f0>
 801486a:	9b05      	ldr	r3, [sp, #20]
 801486c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014870:	2b00      	cmp	r3, #0
 8014872:	f040 8093 	bne.w	801499c <_dtoa_r+0x8f4>
 8014876:	9b05      	ldr	r3, [sp, #20]
 8014878:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801487c:	0d1b      	lsrs	r3, r3, #20
 801487e:	051b      	lsls	r3, r3, #20
 8014880:	b133      	cbz	r3, 8014890 <_dtoa_r+0x7e8>
 8014882:	9b00      	ldr	r3, [sp, #0]
 8014884:	3301      	adds	r3, #1
 8014886:	9300      	str	r3, [sp, #0]
 8014888:	9b06      	ldr	r3, [sp, #24]
 801488a:	3301      	adds	r3, #1
 801488c:	9306      	str	r3, [sp, #24]
 801488e:	2301      	movs	r3, #1
 8014890:	9308      	str	r3, [sp, #32]
 8014892:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014894:	2b00      	cmp	r3, #0
 8014896:	f000 81b8 	beq.w	8014c0a <_dtoa_r+0xb62>
 801489a:	6923      	ldr	r3, [r4, #16]
 801489c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80148a0:	6918      	ldr	r0, [r3, #16]
 80148a2:	f000 fe59 	bl	8015558 <__hi0bits>
 80148a6:	f1c0 0020 	rsb	r0, r0, #32
 80148aa:	9b06      	ldr	r3, [sp, #24]
 80148ac:	4418      	add	r0, r3
 80148ae:	f010 001f 	ands.w	r0, r0, #31
 80148b2:	f000 8082 	beq.w	80149ba <_dtoa_r+0x912>
 80148b6:	f1c0 0320 	rsb	r3, r0, #32
 80148ba:	2b04      	cmp	r3, #4
 80148bc:	dd73      	ble.n	80149a6 <_dtoa_r+0x8fe>
 80148be:	9b00      	ldr	r3, [sp, #0]
 80148c0:	f1c0 001c 	rsb	r0, r0, #28
 80148c4:	4403      	add	r3, r0
 80148c6:	9300      	str	r3, [sp, #0]
 80148c8:	9b06      	ldr	r3, [sp, #24]
 80148ca:	4403      	add	r3, r0
 80148cc:	4406      	add	r6, r0
 80148ce:	9306      	str	r3, [sp, #24]
 80148d0:	9b00      	ldr	r3, [sp, #0]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	dd05      	ble.n	80148e2 <_dtoa_r+0x83a>
 80148d6:	9902      	ldr	r1, [sp, #8]
 80148d8:	461a      	mov	r2, r3
 80148da:	4648      	mov	r0, r9
 80148dc:	f000 ff9a 	bl	8015814 <__lshift>
 80148e0:	9002      	str	r0, [sp, #8]
 80148e2:	9b06      	ldr	r3, [sp, #24]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	dd05      	ble.n	80148f4 <_dtoa_r+0x84c>
 80148e8:	4621      	mov	r1, r4
 80148ea:	461a      	mov	r2, r3
 80148ec:	4648      	mov	r0, r9
 80148ee:	f000 ff91 	bl	8015814 <__lshift>
 80148f2:	4604      	mov	r4, r0
 80148f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d061      	beq.n	80149be <_dtoa_r+0x916>
 80148fa:	9802      	ldr	r0, [sp, #8]
 80148fc:	4621      	mov	r1, r4
 80148fe:	f000 fff5 	bl	80158ec <__mcmp>
 8014902:	2800      	cmp	r0, #0
 8014904:	da5b      	bge.n	80149be <_dtoa_r+0x916>
 8014906:	2300      	movs	r3, #0
 8014908:	9902      	ldr	r1, [sp, #8]
 801490a:	220a      	movs	r2, #10
 801490c:	4648      	mov	r0, r9
 801490e:	f000 fd93 	bl	8015438 <__multadd>
 8014912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014914:	9002      	str	r0, [sp, #8]
 8014916:	f107 38ff 	add.w	r8, r7, #4294967295
 801491a:	2b00      	cmp	r3, #0
 801491c:	f000 8177 	beq.w	8014c0e <_dtoa_r+0xb66>
 8014920:	4629      	mov	r1, r5
 8014922:	2300      	movs	r3, #0
 8014924:	220a      	movs	r2, #10
 8014926:	4648      	mov	r0, r9
 8014928:	f000 fd86 	bl	8015438 <__multadd>
 801492c:	f1bb 0f00 	cmp.w	fp, #0
 8014930:	4605      	mov	r5, r0
 8014932:	dc6f      	bgt.n	8014a14 <_dtoa_r+0x96c>
 8014934:	9b07      	ldr	r3, [sp, #28]
 8014936:	2b02      	cmp	r3, #2
 8014938:	dc49      	bgt.n	80149ce <_dtoa_r+0x926>
 801493a:	e06b      	b.n	8014a14 <_dtoa_r+0x96c>
 801493c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801493e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8014942:	e73c      	b.n	80147be <_dtoa_r+0x716>
 8014944:	3fe00000 	.word	0x3fe00000
 8014948:	40240000 	.word	0x40240000
 801494c:	9b03      	ldr	r3, [sp, #12]
 801494e:	1e5c      	subs	r4, r3, #1
 8014950:	9b08      	ldr	r3, [sp, #32]
 8014952:	42a3      	cmp	r3, r4
 8014954:	db09      	blt.n	801496a <_dtoa_r+0x8c2>
 8014956:	1b1c      	subs	r4, r3, r4
 8014958:	9b03      	ldr	r3, [sp, #12]
 801495a:	2b00      	cmp	r3, #0
 801495c:	f6bf af30 	bge.w	80147c0 <_dtoa_r+0x718>
 8014960:	9b00      	ldr	r3, [sp, #0]
 8014962:	9a03      	ldr	r2, [sp, #12]
 8014964:	1a9e      	subs	r6, r3, r2
 8014966:	2300      	movs	r3, #0
 8014968:	e72b      	b.n	80147c2 <_dtoa_r+0x71a>
 801496a:	9b08      	ldr	r3, [sp, #32]
 801496c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801496e:	9408      	str	r4, [sp, #32]
 8014970:	1ae3      	subs	r3, r4, r3
 8014972:	441a      	add	r2, r3
 8014974:	9e00      	ldr	r6, [sp, #0]
 8014976:	9b03      	ldr	r3, [sp, #12]
 8014978:	920d      	str	r2, [sp, #52]	@ 0x34
 801497a:	2400      	movs	r4, #0
 801497c:	e721      	b.n	80147c2 <_dtoa_r+0x71a>
 801497e:	9c08      	ldr	r4, [sp, #32]
 8014980:	9e00      	ldr	r6, [sp, #0]
 8014982:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8014984:	e728      	b.n	80147d8 <_dtoa_r+0x730>
 8014986:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801498a:	e751      	b.n	8014830 <_dtoa_r+0x788>
 801498c:	9a08      	ldr	r2, [sp, #32]
 801498e:	9902      	ldr	r1, [sp, #8]
 8014990:	e750      	b.n	8014834 <_dtoa_r+0x78c>
 8014992:	f8cd 8008 	str.w	r8, [sp, #8]
 8014996:	e751      	b.n	801483c <_dtoa_r+0x794>
 8014998:	2300      	movs	r3, #0
 801499a:	e779      	b.n	8014890 <_dtoa_r+0x7e8>
 801499c:	9b04      	ldr	r3, [sp, #16]
 801499e:	e777      	b.n	8014890 <_dtoa_r+0x7e8>
 80149a0:	2300      	movs	r3, #0
 80149a2:	9308      	str	r3, [sp, #32]
 80149a4:	e779      	b.n	801489a <_dtoa_r+0x7f2>
 80149a6:	d093      	beq.n	80148d0 <_dtoa_r+0x828>
 80149a8:	9a00      	ldr	r2, [sp, #0]
 80149aa:	331c      	adds	r3, #28
 80149ac:	441a      	add	r2, r3
 80149ae:	9200      	str	r2, [sp, #0]
 80149b0:	9a06      	ldr	r2, [sp, #24]
 80149b2:	441a      	add	r2, r3
 80149b4:	441e      	add	r6, r3
 80149b6:	9206      	str	r2, [sp, #24]
 80149b8:	e78a      	b.n	80148d0 <_dtoa_r+0x828>
 80149ba:	4603      	mov	r3, r0
 80149bc:	e7f4      	b.n	80149a8 <_dtoa_r+0x900>
 80149be:	9b03      	ldr	r3, [sp, #12]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	46b8      	mov	r8, r7
 80149c4:	dc20      	bgt.n	8014a08 <_dtoa_r+0x960>
 80149c6:	469b      	mov	fp, r3
 80149c8:	9b07      	ldr	r3, [sp, #28]
 80149ca:	2b02      	cmp	r3, #2
 80149cc:	dd1e      	ble.n	8014a0c <_dtoa_r+0x964>
 80149ce:	f1bb 0f00 	cmp.w	fp, #0
 80149d2:	f47f adb1 	bne.w	8014538 <_dtoa_r+0x490>
 80149d6:	4621      	mov	r1, r4
 80149d8:	465b      	mov	r3, fp
 80149da:	2205      	movs	r2, #5
 80149dc:	4648      	mov	r0, r9
 80149de:	f000 fd2b 	bl	8015438 <__multadd>
 80149e2:	4601      	mov	r1, r0
 80149e4:	4604      	mov	r4, r0
 80149e6:	9802      	ldr	r0, [sp, #8]
 80149e8:	f000 ff80 	bl	80158ec <__mcmp>
 80149ec:	2800      	cmp	r0, #0
 80149ee:	f77f ada3 	ble.w	8014538 <_dtoa_r+0x490>
 80149f2:	4656      	mov	r6, sl
 80149f4:	2331      	movs	r3, #49	@ 0x31
 80149f6:	f806 3b01 	strb.w	r3, [r6], #1
 80149fa:	f108 0801 	add.w	r8, r8, #1
 80149fe:	e59f      	b.n	8014540 <_dtoa_r+0x498>
 8014a00:	9c03      	ldr	r4, [sp, #12]
 8014a02:	46b8      	mov	r8, r7
 8014a04:	4625      	mov	r5, r4
 8014a06:	e7f4      	b.n	80149f2 <_dtoa_r+0x94a>
 8014a08:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8014a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	f000 8101 	beq.w	8014c16 <_dtoa_r+0xb6e>
 8014a14:	2e00      	cmp	r6, #0
 8014a16:	dd05      	ble.n	8014a24 <_dtoa_r+0x97c>
 8014a18:	4629      	mov	r1, r5
 8014a1a:	4632      	mov	r2, r6
 8014a1c:	4648      	mov	r0, r9
 8014a1e:	f000 fef9 	bl	8015814 <__lshift>
 8014a22:	4605      	mov	r5, r0
 8014a24:	9b08      	ldr	r3, [sp, #32]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d05c      	beq.n	8014ae4 <_dtoa_r+0xa3c>
 8014a2a:	6869      	ldr	r1, [r5, #4]
 8014a2c:	4648      	mov	r0, r9
 8014a2e:	f000 fca1 	bl	8015374 <_Balloc>
 8014a32:	4606      	mov	r6, r0
 8014a34:	b928      	cbnz	r0, 8014a42 <_dtoa_r+0x99a>
 8014a36:	4b82      	ldr	r3, [pc, #520]	@ (8014c40 <_dtoa_r+0xb98>)
 8014a38:	4602      	mov	r2, r0
 8014a3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014a3e:	f7ff bb4a 	b.w	80140d6 <_dtoa_r+0x2e>
 8014a42:	692a      	ldr	r2, [r5, #16]
 8014a44:	3202      	adds	r2, #2
 8014a46:	0092      	lsls	r2, r2, #2
 8014a48:	f105 010c 	add.w	r1, r5, #12
 8014a4c:	300c      	adds	r0, #12
 8014a4e:	f7ff fa6a 	bl	8013f26 <memcpy>
 8014a52:	2201      	movs	r2, #1
 8014a54:	4631      	mov	r1, r6
 8014a56:	4648      	mov	r0, r9
 8014a58:	f000 fedc 	bl	8015814 <__lshift>
 8014a5c:	f10a 0301 	add.w	r3, sl, #1
 8014a60:	9300      	str	r3, [sp, #0]
 8014a62:	eb0a 030b 	add.w	r3, sl, fp
 8014a66:	9308      	str	r3, [sp, #32]
 8014a68:	9b04      	ldr	r3, [sp, #16]
 8014a6a:	f003 0301 	and.w	r3, r3, #1
 8014a6e:	462f      	mov	r7, r5
 8014a70:	9306      	str	r3, [sp, #24]
 8014a72:	4605      	mov	r5, r0
 8014a74:	9b00      	ldr	r3, [sp, #0]
 8014a76:	9802      	ldr	r0, [sp, #8]
 8014a78:	4621      	mov	r1, r4
 8014a7a:	f103 3bff 	add.w	fp, r3, #4294967295
 8014a7e:	f7ff fa89 	bl	8013f94 <quorem>
 8014a82:	4603      	mov	r3, r0
 8014a84:	3330      	adds	r3, #48	@ 0x30
 8014a86:	9003      	str	r0, [sp, #12]
 8014a88:	4639      	mov	r1, r7
 8014a8a:	9802      	ldr	r0, [sp, #8]
 8014a8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014a8e:	f000 ff2d 	bl	80158ec <__mcmp>
 8014a92:	462a      	mov	r2, r5
 8014a94:	9004      	str	r0, [sp, #16]
 8014a96:	4621      	mov	r1, r4
 8014a98:	4648      	mov	r0, r9
 8014a9a:	f000 ff43 	bl	8015924 <__mdiff>
 8014a9e:	68c2      	ldr	r2, [r0, #12]
 8014aa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014aa2:	4606      	mov	r6, r0
 8014aa4:	bb02      	cbnz	r2, 8014ae8 <_dtoa_r+0xa40>
 8014aa6:	4601      	mov	r1, r0
 8014aa8:	9802      	ldr	r0, [sp, #8]
 8014aaa:	f000 ff1f 	bl	80158ec <__mcmp>
 8014aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014ab0:	4602      	mov	r2, r0
 8014ab2:	4631      	mov	r1, r6
 8014ab4:	4648      	mov	r0, r9
 8014ab6:	920c      	str	r2, [sp, #48]	@ 0x30
 8014ab8:	9309      	str	r3, [sp, #36]	@ 0x24
 8014aba:	f000 fc9b 	bl	80153f4 <_Bfree>
 8014abe:	9b07      	ldr	r3, [sp, #28]
 8014ac0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014ac2:	9e00      	ldr	r6, [sp, #0]
 8014ac4:	ea42 0103 	orr.w	r1, r2, r3
 8014ac8:	9b06      	ldr	r3, [sp, #24]
 8014aca:	4319      	orrs	r1, r3
 8014acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014ace:	d10d      	bne.n	8014aec <_dtoa_r+0xa44>
 8014ad0:	2b39      	cmp	r3, #57	@ 0x39
 8014ad2:	d027      	beq.n	8014b24 <_dtoa_r+0xa7c>
 8014ad4:	9a04      	ldr	r2, [sp, #16]
 8014ad6:	2a00      	cmp	r2, #0
 8014ad8:	dd01      	ble.n	8014ade <_dtoa_r+0xa36>
 8014ada:	9b03      	ldr	r3, [sp, #12]
 8014adc:	3331      	adds	r3, #49	@ 0x31
 8014ade:	f88b 3000 	strb.w	r3, [fp]
 8014ae2:	e52e      	b.n	8014542 <_dtoa_r+0x49a>
 8014ae4:	4628      	mov	r0, r5
 8014ae6:	e7b9      	b.n	8014a5c <_dtoa_r+0x9b4>
 8014ae8:	2201      	movs	r2, #1
 8014aea:	e7e2      	b.n	8014ab2 <_dtoa_r+0xa0a>
 8014aec:	9904      	ldr	r1, [sp, #16]
 8014aee:	2900      	cmp	r1, #0
 8014af0:	db04      	blt.n	8014afc <_dtoa_r+0xa54>
 8014af2:	9807      	ldr	r0, [sp, #28]
 8014af4:	4301      	orrs	r1, r0
 8014af6:	9806      	ldr	r0, [sp, #24]
 8014af8:	4301      	orrs	r1, r0
 8014afa:	d120      	bne.n	8014b3e <_dtoa_r+0xa96>
 8014afc:	2a00      	cmp	r2, #0
 8014afe:	ddee      	ble.n	8014ade <_dtoa_r+0xa36>
 8014b00:	9902      	ldr	r1, [sp, #8]
 8014b02:	9300      	str	r3, [sp, #0]
 8014b04:	2201      	movs	r2, #1
 8014b06:	4648      	mov	r0, r9
 8014b08:	f000 fe84 	bl	8015814 <__lshift>
 8014b0c:	4621      	mov	r1, r4
 8014b0e:	9002      	str	r0, [sp, #8]
 8014b10:	f000 feec 	bl	80158ec <__mcmp>
 8014b14:	2800      	cmp	r0, #0
 8014b16:	9b00      	ldr	r3, [sp, #0]
 8014b18:	dc02      	bgt.n	8014b20 <_dtoa_r+0xa78>
 8014b1a:	d1e0      	bne.n	8014ade <_dtoa_r+0xa36>
 8014b1c:	07da      	lsls	r2, r3, #31
 8014b1e:	d5de      	bpl.n	8014ade <_dtoa_r+0xa36>
 8014b20:	2b39      	cmp	r3, #57	@ 0x39
 8014b22:	d1da      	bne.n	8014ada <_dtoa_r+0xa32>
 8014b24:	2339      	movs	r3, #57	@ 0x39
 8014b26:	f88b 3000 	strb.w	r3, [fp]
 8014b2a:	4633      	mov	r3, r6
 8014b2c:	461e      	mov	r6, r3
 8014b2e:	3b01      	subs	r3, #1
 8014b30:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014b34:	2a39      	cmp	r2, #57	@ 0x39
 8014b36:	d04e      	beq.n	8014bd6 <_dtoa_r+0xb2e>
 8014b38:	3201      	adds	r2, #1
 8014b3a:	701a      	strb	r2, [r3, #0]
 8014b3c:	e501      	b.n	8014542 <_dtoa_r+0x49a>
 8014b3e:	2a00      	cmp	r2, #0
 8014b40:	dd03      	ble.n	8014b4a <_dtoa_r+0xaa2>
 8014b42:	2b39      	cmp	r3, #57	@ 0x39
 8014b44:	d0ee      	beq.n	8014b24 <_dtoa_r+0xa7c>
 8014b46:	3301      	adds	r3, #1
 8014b48:	e7c9      	b.n	8014ade <_dtoa_r+0xa36>
 8014b4a:	9a00      	ldr	r2, [sp, #0]
 8014b4c:	9908      	ldr	r1, [sp, #32]
 8014b4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014b52:	428a      	cmp	r2, r1
 8014b54:	d028      	beq.n	8014ba8 <_dtoa_r+0xb00>
 8014b56:	9902      	ldr	r1, [sp, #8]
 8014b58:	2300      	movs	r3, #0
 8014b5a:	220a      	movs	r2, #10
 8014b5c:	4648      	mov	r0, r9
 8014b5e:	f000 fc6b 	bl	8015438 <__multadd>
 8014b62:	42af      	cmp	r7, r5
 8014b64:	9002      	str	r0, [sp, #8]
 8014b66:	f04f 0300 	mov.w	r3, #0
 8014b6a:	f04f 020a 	mov.w	r2, #10
 8014b6e:	4639      	mov	r1, r7
 8014b70:	4648      	mov	r0, r9
 8014b72:	d107      	bne.n	8014b84 <_dtoa_r+0xadc>
 8014b74:	f000 fc60 	bl	8015438 <__multadd>
 8014b78:	4607      	mov	r7, r0
 8014b7a:	4605      	mov	r5, r0
 8014b7c:	9b00      	ldr	r3, [sp, #0]
 8014b7e:	3301      	adds	r3, #1
 8014b80:	9300      	str	r3, [sp, #0]
 8014b82:	e777      	b.n	8014a74 <_dtoa_r+0x9cc>
 8014b84:	f000 fc58 	bl	8015438 <__multadd>
 8014b88:	4629      	mov	r1, r5
 8014b8a:	4607      	mov	r7, r0
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	220a      	movs	r2, #10
 8014b90:	4648      	mov	r0, r9
 8014b92:	f000 fc51 	bl	8015438 <__multadd>
 8014b96:	4605      	mov	r5, r0
 8014b98:	e7f0      	b.n	8014b7c <_dtoa_r+0xad4>
 8014b9a:	f1bb 0f00 	cmp.w	fp, #0
 8014b9e:	bfcc      	ite	gt
 8014ba0:	465e      	movgt	r6, fp
 8014ba2:	2601      	movle	r6, #1
 8014ba4:	4456      	add	r6, sl
 8014ba6:	2700      	movs	r7, #0
 8014ba8:	9902      	ldr	r1, [sp, #8]
 8014baa:	9300      	str	r3, [sp, #0]
 8014bac:	2201      	movs	r2, #1
 8014bae:	4648      	mov	r0, r9
 8014bb0:	f000 fe30 	bl	8015814 <__lshift>
 8014bb4:	4621      	mov	r1, r4
 8014bb6:	9002      	str	r0, [sp, #8]
 8014bb8:	f000 fe98 	bl	80158ec <__mcmp>
 8014bbc:	2800      	cmp	r0, #0
 8014bbe:	dcb4      	bgt.n	8014b2a <_dtoa_r+0xa82>
 8014bc0:	d102      	bne.n	8014bc8 <_dtoa_r+0xb20>
 8014bc2:	9b00      	ldr	r3, [sp, #0]
 8014bc4:	07db      	lsls	r3, r3, #31
 8014bc6:	d4b0      	bmi.n	8014b2a <_dtoa_r+0xa82>
 8014bc8:	4633      	mov	r3, r6
 8014bca:	461e      	mov	r6, r3
 8014bcc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014bd0:	2a30      	cmp	r2, #48	@ 0x30
 8014bd2:	d0fa      	beq.n	8014bca <_dtoa_r+0xb22>
 8014bd4:	e4b5      	b.n	8014542 <_dtoa_r+0x49a>
 8014bd6:	459a      	cmp	sl, r3
 8014bd8:	d1a8      	bne.n	8014b2c <_dtoa_r+0xa84>
 8014bda:	2331      	movs	r3, #49	@ 0x31
 8014bdc:	f108 0801 	add.w	r8, r8, #1
 8014be0:	f88a 3000 	strb.w	r3, [sl]
 8014be4:	e4ad      	b.n	8014542 <_dtoa_r+0x49a>
 8014be6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014be8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8014c44 <_dtoa_r+0xb9c>
 8014bec:	b11b      	cbz	r3, 8014bf6 <_dtoa_r+0xb4e>
 8014bee:	f10a 0308 	add.w	r3, sl, #8
 8014bf2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014bf4:	6013      	str	r3, [r2, #0]
 8014bf6:	4650      	mov	r0, sl
 8014bf8:	b017      	add	sp, #92	@ 0x5c
 8014bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bfe:	9b07      	ldr	r3, [sp, #28]
 8014c00:	2b01      	cmp	r3, #1
 8014c02:	f77f ae2e 	ble.w	8014862 <_dtoa_r+0x7ba>
 8014c06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014c08:	9308      	str	r3, [sp, #32]
 8014c0a:	2001      	movs	r0, #1
 8014c0c:	e64d      	b.n	80148aa <_dtoa_r+0x802>
 8014c0e:	f1bb 0f00 	cmp.w	fp, #0
 8014c12:	f77f aed9 	ble.w	80149c8 <_dtoa_r+0x920>
 8014c16:	4656      	mov	r6, sl
 8014c18:	9802      	ldr	r0, [sp, #8]
 8014c1a:	4621      	mov	r1, r4
 8014c1c:	f7ff f9ba 	bl	8013f94 <quorem>
 8014c20:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8014c24:	f806 3b01 	strb.w	r3, [r6], #1
 8014c28:	eba6 020a 	sub.w	r2, r6, sl
 8014c2c:	4593      	cmp	fp, r2
 8014c2e:	ddb4      	ble.n	8014b9a <_dtoa_r+0xaf2>
 8014c30:	9902      	ldr	r1, [sp, #8]
 8014c32:	2300      	movs	r3, #0
 8014c34:	220a      	movs	r2, #10
 8014c36:	4648      	mov	r0, r9
 8014c38:	f000 fbfe 	bl	8015438 <__multadd>
 8014c3c:	9002      	str	r0, [sp, #8]
 8014c3e:	e7eb      	b.n	8014c18 <_dtoa_r+0xb70>
 8014c40:	08018b9c 	.word	0x08018b9c
 8014c44:	08018b37 	.word	0x08018b37

08014c48 <_free_r>:
 8014c48:	b538      	push	{r3, r4, r5, lr}
 8014c4a:	4605      	mov	r5, r0
 8014c4c:	2900      	cmp	r1, #0
 8014c4e:	d041      	beq.n	8014cd4 <_free_r+0x8c>
 8014c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c54:	1f0c      	subs	r4, r1, #4
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	bfb8      	it	lt
 8014c5a:	18e4      	addlt	r4, r4, r3
 8014c5c:	f7fd fbfa 	bl	8012454 <__malloc_lock>
 8014c60:	4a1d      	ldr	r2, [pc, #116]	@ (8014cd8 <_free_r+0x90>)
 8014c62:	6813      	ldr	r3, [r2, #0]
 8014c64:	b933      	cbnz	r3, 8014c74 <_free_r+0x2c>
 8014c66:	6063      	str	r3, [r4, #4]
 8014c68:	6014      	str	r4, [r2, #0]
 8014c6a:	4628      	mov	r0, r5
 8014c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c70:	f7fd bbf6 	b.w	8012460 <__malloc_unlock>
 8014c74:	42a3      	cmp	r3, r4
 8014c76:	d908      	bls.n	8014c8a <_free_r+0x42>
 8014c78:	6820      	ldr	r0, [r4, #0]
 8014c7a:	1821      	adds	r1, r4, r0
 8014c7c:	428b      	cmp	r3, r1
 8014c7e:	bf01      	itttt	eq
 8014c80:	6819      	ldreq	r1, [r3, #0]
 8014c82:	685b      	ldreq	r3, [r3, #4]
 8014c84:	1809      	addeq	r1, r1, r0
 8014c86:	6021      	streq	r1, [r4, #0]
 8014c88:	e7ed      	b.n	8014c66 <_free_r+0x1e>
 8014c8a:	461a      	mov	r2, r3
 8014c8c:	685b      	ldr	r3, [r3, #4]
 8014c8e:	b10b      	cbz	r3, 8014c94 <_free_r+0x4c>
 8014c90:	42a3      	cmp	r3, r4
 8014c92:	d9fa      	bls.n	8014c8a <_free_r+0x42>
 8014c94:	6811      	ldr	r1, [r2, #0]
 8014c96:	1850      	adds	r0, r2, r1
 8014c98:	42a0      	cmp	r0, r4
 8014c9a:	d10b      	bne.n	8014cb4 <_free_r+0x6c>
 8014c9c:	6820      	ldr	r0, [r4, #0]
 8014c9e:	4401      	add	r1, r0
 8014ca0:	1850      	adds	r0, r2, r1
 8014ca2:	4283      	cmp	r3, r0
 8014ca4:	6011      	str	r1, [r2, #0]
 8014ca6:	d1e0      	bne.n	8014c6a <_free_r+0x22>
 8014ca8:	6818      	ldr	r0, [r3, #0]
 8014caa:	685b      	ldr	r3, [r3, #4]
 8014cac:	6053      	str	r3, [r2, #4]
 8014cae:	4408      	add	r0, r1
 8014cb0:	6010      	str	r0, [r2, #0]
 8014cb2:	e7da      	b.n	8014c6a <_free_r+0x22>
 8014cb4:	d902      	bls.n	8014cbc <_free_r+0x74>
 8014cb6:	230c      	movs	r3, #12
 8014cb8:	602b      	str	r3, [r5, #0]
 8014cba:	e7d6      	b.n	8014c6a <_free_r+0x22>
 8014cbc:	6820      	ldr	r0, [r4, #0]
 8014cbe:	1821      	adds	r1, r4, r0
 8014cc0:	428b      	cmp	r3, r1
 8014cc2:	bf04      	itt	eq
 8014cc4:	6819      	ldreq	r1, [r3, #0]
 8014cc6:	685b      	ldreq	r3, [r3, #4]
 8014cc8:	6063      	str	r3, [r4, #4]
 8014cca:	bf04      	itt	eq
 8014ccc:	1809      	addeq	r1, r1, r0
 8014cce:	6021      	streq	r1, [r4, #0]
 8014cd0:	6054      	str	r4, [r2, #4]
 8014cd2:	e7ca      	b.n	8014c6a <_free_r+0x22>
 8014cd4:	bd38      	pop	{r3, r4, r5, pc}
 8014cd6:	bf00      	nop
 8014cd8:	2001d8a0 	.word	0x2001d8a0

08014cdc <rshift>:
 8014cdc:	6903      	ldr	r3, [r0, #16]
 8014cde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014ce2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ce6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014cea:	f100 0414 	add.w	r4, r0, #20
 8014cee:	dd45      	ble.n	8014d7c <rshift+0xa0>
 8014cf0:	f011 011f 	ands.w	r1, r1, #31
 8014cf4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014cf8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014cfc:	d10c      	bne.n	8014d18 <rshift+0x3c>
 8014cfe:	f100 0710 	add.w	r7, r0, #16
 8014d02:	4629      	mov	r1, r5
 8014d04:	42b1      	cmp	r1, r6
 8014d06:	d334      	bcc.n	8014d72 <rshift+0x96>
 8014d08:	1a9b      	subs	r3, r3, r2
 8014d0a:	009b      	lsls	r3, r3, #2
 8014d0c:	1eea      	subs	r2, r5, #3
 8014d0e:	4296      	cmp	r6, r2
 8014d10:	bf38      	it	cc
 8014d12:	2300      	movcc	r3, #0
 8014d14:	4423      	add	r3, r4
 8014d16:	e015      	b.n	8014d44 <rshift+0x68>
 8014d18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014d1c:	f1c1 0820 	rsb	r8, r1, #32
 8014d20:	40cf      	lsrs	r7, r1
 8014d22:	f105 0e04 	add.w	lr, r5, #4
 8014d26:	46a1      	mov	r9, r4
 8014d28:	4576      	cmp	r6, lr
 8014d2a:	46f4      	mov	ip, lr
 8014d2c:	d815      	bhi.n	8014d5a <rshift+0x7e>
 8014d2e:	1a9a      	subs	r2, r3, r2
 8014d30:	0092      	lsls	r2, r2, #2
 8014d32:	3a04      	subs	r2, #4
 8014d34:	3501      	adds	r5, #1
 8014d36:	42ae      	cmp	r6, r5
 8014d38:	bf38      	it	cc
 8014d3a:	2200      	movcc	r2, #0
 8014d3c:	18a3      	adds	r3, r4, r2
 8014d3e:	50a7      	str	r7, [r4, r2]
 8014d40:	b107      	cbz	r7, 8014d44 <rshift+0x68>
 8014d42:	3304      	adds	r3, #4
 8014d44:	1b1a      	subs	r2, r3, r4
 8014d46:	42a3      	cmp	r3, r4
 8014d48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014d4c:	bf08      	it	eq
 8014d4e:	2300      	moveq	r3, #0
 8014d50:	6102      	str	r2, [r0, #16]
 8014d52:	bf08      	it	eq
 8014d54:	6143      	streq	r3, [r0, #20]
 8014d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d5a:	f8dc c000 	ldr.w	ip, [ip]
 8014d5e:	fa0c fc08 	lsl.w	ip, ip, r8
 8014d62:	ea4c 0707 	orr.w	r7, ip, r7
 8014d66:	f849 7b04 	str.w	r7, [r9], #4
 8014d6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014d6e:	40cf      	lsrs	r7, r1
 8014d70:	e7da      	b.n	8014d28 <rshift+0x4c>
 8014d72:	f851 cb04 	ldr.w	ip, [r1], #4
 8014d76:	f847 cf04 	str.w	ip, [r7, #4]!
 8014d7a:	e7c3      	b.n	8014d04 <rshift+0x28>
 8014d7c:	4623      	mov	r3, r4
 8014d7e:	e7e1      	b.n	8014d44 <rshift+0x68>

08014d80 <__hexdig_fun>:
 8014d80:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8014d84:	2b09      	cmp	r3, #9
 8014d86:	d802      	bhi.n	8014d8e <__hexdig_fun+0xe>
 8014d88:	3820      	subs	r0, #32
 8014d8a:	b2c0      	uxtb	r0, r0
 8014d8c:	4770      	bx	lr
 8014d8e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8014d92:	2b05      	cmp	r3, #5
 8014d94:	d801      	bhi.n	8014d9a <__hexdig_fun+0x1a>
 8014d96:	3847      	subs	r0, #71	@ 0x47
 8014d98:	e7f7      	b.n	8014d8a <__hexdig_fun+0xa>
 8014d9a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8014d9e:	2b05      	cmp	r3, #5
 8014da0:	d801      	bhi.n	8014da6 <__hexdig_fun+0x26>
 8014da2:	3827      	subs	r0, #39	@ 0x27
 8014da4:	e7f1      	b.n	8014d8a <__hexdig_fun+0xa>
 8014da6:	2000      	movs	r0, #0
 8014da8:	4770      	bx	lr
	...

08014dac <__gethex>:
 8014dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014db0:	b085      	sub	sp, #20
 8014db2:	468a      	mov	sl, r1
 8014db4:	9302      	str	r3, [sp, #8]
 8014db6:	680b      	ldr	r3, [r1, #0]
 8014db8:	9001      	str	r0, [sp, #4]
 8014dba:	4690      	mov	r8, r2
 8014dbc:	1c9c      	adds	r4, r3, #2
 8014dbe:	46a1      	mov	r9, r4
 8014dc0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8014dc4:	2830      	cmp	r0, #48	@ 0x30
 8014dc6:	d0fa      	beq.n	8014dbe <__gethex+0x12>
 8014dc8:	eba9 0303 	sub.w	r3, r9, r3
 8014dcc:	f1a3 0b02 	sub.w	fp, r3, #2
 8014dd0:	f7ff ffd6 	bl	8014d80 <__hexdig_fun>
 8014dd4:	4605      	mov	r5, r0
 8014dd6:	2800      	cmp	r0, #0
 8014dd8:	d168      	bne.n	8014eac <__gethex+0x100>
 8014dda:	49a0      	ldr	r1, [pc, #640]	@ (801505c <__gethex+0x2b0>)
 8014ddc:	2201      	movs	r2, #1
 8014dde:	4648      	mov	r0, r9
 8014de0:	f7fe ff46 	bl	8013c70 <strncmp>
 8014de4:	4607      	mov	r7, r0
 8014de6:	2800      	cmp	r0, #0
 8014de8:	d167      	bne.n	8014eba <__gethex+0x10e>
 8014dea:	f899 0001 	ldrb.w	r0, [r9, #1]
 8014dee:	4626      	mov	r6, r4
 8014df0:	f7ff ffc6 	bl	8014d80 <__hexdig_fun>
 8014df4:	2800      	cmp	r0, #0
 8014df6:	d062      	beq.n	8014ebe <__gethex+0x112>
 8014df8:	4623      	mov	r3, r4
 8014dfa:	7818      	ldrb	r0, [r3, #0]
 8014dfc:	2830      	cmp	r0, #48	@ 0x30
 8014dfe:	4699      	mov	r9, r3
 8014e00:	f103 0301 	add.w	r3, r3, #1
 8014e04:	d0f9      	beq.n	8014dfa <__gethex+0x4e>
 8014e06:	f7ff ffbb 	bl	8014d80 <__hexdig_fun>
 8014e0a:	fab0 f580 	clz	r5, r0
 8014e0e:	096d      	lsrs	r5, r5, #5
 8014e10:	f04f 0b01 	mov.w	fp, #1
 8014e14:	464a      	mov	r2, r9
 8014e16:	4616      	mov	r6, r2
 8014e18:	3201      	adds	r2, #1
 8014e1a:	7830      	ldrb	r0, [r6, #0]
 8014e1c:	f7ff ffb0 	bl	8014d80 <__hexdig_fun>
 8014e20:	2800      	cmp	r0, #0
 8014e22:	d1f8      	bne.n	8014e16 <__gethex+0x6a>
 8014e24:	498d      	ldr	r1, [pc, #564]	@ (801505c <__gethex+0x2b0>)
 8014e26:	2201      	movs	r2, #1
 8014e28:	4630      	mov	r0, r6
 8014e2a:	f7fe ff21 	bl	8013c70 <strncmp>
 8014e2e:	2800      	cmp	r0, #0
 8014e30:	d13f      	bne.n	8014eb2 <__gethex+0x106>
 8014e32:	b944      	cbnz	r4, 8014e46 <__gethex+0x9a>
 8014e34:	1c74      	adds	r4, r6, #1
 8014e36:	4622      	mov	r2, r4
 8014e38:	4616      	mov	r6, r2
 8014e3a:	3201      	adds	r2, #1
 8014e3c:	7830      	ldrb	r0, [r6, #0]
 8014e3e:	f7ff ff9f 	bl	8014d80 <__hexdig_fun>
 8014e42:	2800      	cmp	r0, #0
 8014e44:	d1f8      	bne.n	8014e38 <__gethex+0x8c>
 8014e46:	1ba4      	subs	r4, r4, r6
 8014e48:	00a7      	lsls	r7, r4, #2
 8014e4a:	7833      	ldrb	r3, [r6, #0]
 8014e4c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8014e50:	2b50      	cmp	r3, #80	@ 0x50
 8014e52:	d13e      	bne.n	8014ed2 <__gethex+0x126>
 8014e54:	7873      	ldrb	r3, [r6, #1]
 8014e56:	2b2b      	cmp	r3, #43	@ 0x2b
 8014e58:	d033      	beq.n	8014ec2 <__gethex+0x116>
 8014e5a:	2b2d      	cmp	r3, #45	@ 0x2d
 8014e5c:	d034      	beq.n	8014ec8 <__gethex+0x11c>
 8014e5e:	1c71      	adds	r1, r6, #1
 8014e60:	2400      	movs	r4, #0
 8014e62:	7808      	ldrb	r0, [r1, #0]
 8014e64:	f7ff ff8c 	bl	8014d80 <__hexdig_fun>
 8014e68:	1e43      	subs	r3, r0, #1
 8014e6a:	b2db      	uxtb	r3, r3
 8014e6c:	2b18      	cmp	r3, #24
 8014e6e:	d830      	bhi.n	8014ed2 <__gethex+0x126>
 8014e70:	f1a0 0210 	sub.w	r2, r0, #16
 8014e74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014e78:	f7ff ff82 	bl	8014d80 <__hexdig_fun>
 8014e7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8014e80:	fa5f fc8c 	uxtb.w	ip, ip
 8014e84:	f1bc 0f18 	cmp.w	ip, #24
 8014e88:	f04f 030a 	mov.w	r3, #10
 8014e8c:	d91e      	bls.n	8014ecc <__gethex+0x120>
 8014e8e:	b104      	cbz	r4, 8014e92 <__gethex+0xe6>
 8014e90:	4252      	negs	r2, r2
 8014e92:	4417      	add	r7, r2
 8014e94:	f8ca 1000 	str.w	r1, [sl]
 8014e98:	b1ed      	cbz	r5, 8014ed6 <__gethex+0x12a>
 8014e9a:	f1bb 0f00 	cmp.w	fp, #0
 8014e9e:	bf0c      	ite	eq
 8014ea0:	2506      	moveq	r5, #6
 8014ea2:	2500      	movne	r5, #0
 8014ea4:	4628      	mov	r0, r5
 8014ea6:	b005      	add	sp, #20
 8014ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eac:	2500      	movs	r5, #0
 8014eae:	462c      	mov	r4, r5
 8014eb0:	e7b0      	b.n	8014e14 <__gethex+0x68>
 8014eb2:	2c00      	cmp	r4, #0
 8014eb4:	d1c7      	bne.n	8014e46 <__gethex+0x9a>
 8014eb6:	4627      	mov	r7, r4
 8014eb8:	e7c7      	b.n	8014e4a <__gethex+0x9e>
 8014eba:	464e      	mov	r6, r9
 8014ebc:	462f      	mov	r7, r5
 8014ebe:	2501      	movs	r5, #1
 8014ec0:	e7c3      	b.n	8014e4a <__gethex+0x9e>
 8014ec2:	2400      	movs	r4, #0
 8014ec4:	1cb1      	adds	r1, r6, #2
 8014ec6:	e7cc      	b.n	8014e62 <__gethex+0xb6>
 8014ec8:	2401      	movs	r4, #1
 8014eca:	e7fb      	b.n	8014ec4 <__gethex+0x118>
 8014ecc:	fb03 0002 	mla	r0, r3, r2, r0
 8014ed0:	e7ce      	b.n	8014e70 <__gethex+0xc4>
 8014ed2:	4631      	mov	r1, r6
 8014ed4:	e7de      	b.n	8014e94 <__gethex+0xe8>
 8014ed6:	eba6 0309 	sub.w	r3, r6, r9
 8014eda:	3b01      	subs	r3, #1
 8014edc:	4629      	mov	r1, r5
 8014ede:	2b07      	cmp	r3, #7
 8014ee0:	dc0a      	bgt.n	8014ef8 <__gethex+0x14c>
 8014ee2:	9801      	ldr	r0, [sp, #4]
 8014ee4:	f000 fa46 	bl	8015374 <_Balloc>
 8014ee8:	4604      	mov	r4, r0
 8014eea:	b940      	cbnz	r0, 8014efe <__gethex+0x152>
 8014eec:	4b5c      	ldr	r3, [pc, #368]	@ (8015060 <__gethex+0x2b4>)
 8014eee:	4602      	mov	r2, r0
 8014ef0:	21e4      	movs	r1, #228	@ 0xe4
 8014ef2:	485c      	ldr	r0, [pc, #368]	@ (8015064 <__gethex+0x2b8>)
 8014ef4:	f7ff f830 	bl	8013f58 <__assert_func>
 8014ef8:	3101      	adds	r1, #1
 8014efa:	105b      	asrs	r3, r3, #1
 8014efc:	e7ef      	b.n	8014ede <__gethex+0x132>
 8014efe:	f100 0a14 	add.w	sl, r0, #20
 8014f02:	2300      	movs	r3, #0
 8014f04:	4655      	mov	r5, sl
 8014f06:	469b      	mov	fp, r3
 8014f08:	45b1      	cmp	r9, r6
 8014f0a:	d337      	bcc.n	8014f7c <__gethex+0x1d0>
 8014f0c:	f845 bb04 	str.w	fp, [r5], #4
 8014f10:	eba5 050a 	sub.w	r5, r5, sl
 8014f14:	10ad      	asrs	r5, r5, #2
 8014f16:	6125      	str	r5, [r4, #16]
 8014f18:	4658      	mov	r0, fp
 8014f1a:	f000 fb1d 	bl	8015558 <__hi0bits>
 8014f1e:	016d      	lsls	r5, r5, #5
 8014f20:	f8d8 6000 	ldr.w	r6, [r8]
 8014f24:	1a2d      	subs	r5, r5, r0
 8014f26:	42b5      	cmp	r5, r6
 8014f28:	dd54      	ble.n	8014fd4 <__gethex+0x228>
 8014f2a:	1bad      	subs	r5, r5, r6
 8014f2c:	4629      	mov	r1, r5
 8014f2e:	4620      	mov	r0, r4
 8014f30:	f000 fea9 	bl	8015c86 <__any_on>
 8014f34:	4681      	mov	r9, r0
 8014f36:	b178      	cbz	r0, 8014f58 <__gethex+0x1ac>
 8014f38:	1e6b      	subs	r3, r5, #1
 8014f3a:	1159      	asrs	r1, r3, #5
 8014f3c:	f003 021f 	and.w	r2, r3, #31
 8014f40:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014f44:	f04f 0901 	mov.w	r9, #1
 8014f48:	fa09 f202 	lsl.w	r2, r9, r2
 8014f4c:	420a      	tst	r2, r1
 8014f4e:	d003      	beq.n	8014f58 <__gethex+0x1ac>
 8014f50:	454b      	cmp	r3, r9
 8014f52:	dc36      	bgt.n	8014fc2 <__gethex+0x216>
 8014f54:	f04f 0902 	mov.w	r9, #2
 8014f58:	4629      	mov	r1, r5
 8014f5a:	4620      	mov	r0, r4
 8014f5c:	f7ff febe 	bl	8014cdc <rshift>
 8014f60:	442f      	add	r7, r5
 8014f62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014f66:	42bb      	cmp	r3, r7
 8014f68:	da42      	bge.n	8014ff0 <__gethex+0x244>
 8014f6a:	9801      	ldr	r0, [sp, #4]
 8014f6c:	4621      	mov	r1, r4
 8014f6e:	f000 fa41 	bl	80153f4 <_Bfree>
 8014f72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014f74:	2300      	movs	r3, #0
 8014f76:	6013      	str	r3, [r2, #0]
 8014f78:	25a3      	movs	r5, #163	@ 0xa3
 8014f7a:	e793      	b.n	8014ea4 <__gethex+0xf8>
 8014f7c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014f80:	2a2e      	cmp	r2, #46	@ 0x2e
 8014f82:	d012      	beq.n	8014faa <__gethex+0x1fe>
 8014f84:	2b20      	cmp	r3, #32
 8014f86:	d104      	bne.n	8014f92 <__gethex+0x1e6>
 8014f88:	f845 bb04 	str.w	fp, [r5], #4
 8014f8c:	f04f 0b00 	mov.w	fp, #0
 8014f90:	465b      	mov	r3, fp
 8014f92:	7830      	ldrb	r0, [r6, #0]
 8014f94:	9303      	str	r3, [sp, #12]
 8014f96:	f7ff fef3 	bl	8014d80 <__hexdig_fun>
 8014f9a:	9b03      	ldr	r3, [sp, #12]
 8014f9c:	f000 000f 	and.w	r0, r0, #15
 8014fa0:	4098      	lsls	r0, r3
 8014fa2:	ea4b 0b00 	orr.w	fp, fp, r0
 8014fa6:	3304      	adds	r3, #4
 8014fa8:	e7ae      	b.n	8014f08 <__gethex+0x15c>
 8014faa:	45b1      	cmp	r9, r6
 8014fac:	d8ea      	bhi.n	8014f84 <__gethex+0x1d8>
 8014fae:	492b      	ldr	r1, [pc, #172]	@ (801505c <__gethex+0x2b0>)
 8014fb0:	9303      	str	r3, [sp, #12]
 8014fb2:	2201      	movs	r2, #1
 8014fb4:	4630      	mov	r0, r6
 8014fb6:	f7fe fe5b 	bl	8013c70 <strncmp>
 8014fba:	9b03      	ldr	r3, [sp, #12]
 8014fbc:	2800      	cmp	r0, #0
 8014fbe:	d1e1      	bne.n	8014f84 <__gethex+0x1d8>
 8014fc0:	e7a2      	b.n	8014f08 <__gethex+0x15c>
 8014fc2:	1ea9      	subs	r1, r5, #2
 8014fc4:	4620      	mov	r0, r4
 8014fc6:	f000 fe5e 	bl	8015c86 <__any_on>
 8014fca:	2800      	cmp	r0, #0
 8014fcc:	d0c2      	beq.n	8014f54 <__gethex+0x1a8>
 8014fce:	f04f 0903 	mov.w	r9, #3
 8014fd2:	e7c1      	b.n	8014f58 <__gethex+0x1ac>
 8014fd4:	da09      	bge.n	8014fea <__gethex+0x23e>
 8014fd6:	1b75      	subs	r5, r6, r5
 8014fd8:	4621      	mov	r1, r4
 8014fda:	9801      	ldr	r0, [sp, #4]
 8014fdc:	462a      	mov	r2, r5
 8014fde:	f000 fc19 	bl	8015814 <__lshift>
 8014fe2:	1b7f      	subs	r7, r7, r5
 8014fe4:	4604      	mov	r4, r0
 8014fe6:	f100 0a14 	add.w	sl, r0, #20
 8014fea:	f04f 0900 	mov.w	r9, #0
 8014fee:	e7b8      	b.n	8014f62 <__gethex+0x1b6>
 8014ff0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014ff4:	42bd      	cmp	r5, r7
 8014ff6:	dd6f      	ble.n	80150d8 <__gethex+0x32c>
 8014ff8:	1bed      	subs	r5, r5, r7
 8014ffa:	42ae      	cmp	r6, r5
 8014ffc:	dc34      	bgt.n	8015068 <__gethex+0x2bc>
 8014ffe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015002:	2b02      	cmp	r3, #2
 8015004:	d022      	beq.n	801504c <__gethex+0x2a0>
 8015006:	2b03      	cmp	r3, #3
 8015008:	d024      	beq.n	8015054 <__gethex+0x2a8>
 801500a:	2b01      	cmp	r3, #1
 801500c:	d115      	bne.n	801503a <__gethex+0x28e>
 801500e:	42ae      	cmp	r6, r5
 8015010:	d113      	bne.n	801503a <__gethex+0x28e>
 8015012:	2e01      	cmp	r6, #1
 8015014:	d10b      	bne.n	801502e <__gethex+0x282>
 8015016:	9a02      	ldr	r2, [sp, #8]
 8015018:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801501c:	6013      	str	r3, [r2, #0]
 801501e:	2301      	movs	r3, #1
 8015020:	6123      	str	r3, [r4, #16]
 8015022:	f8ca 3000 	str.w	r3, [sl]
 8015026:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015028:	2562      	movs	r5, #98	@ 0x62
 801502a:	601c      	str	r4, [r3, #0]
 801502c:	e73a      	b.n	8014ea4 <__gethex+0xf8>
 801502e:	1e71      	subs	r1, r6, #1
 8015030:	4620      	mov	r0, r4
 8015032:	f000 fe28 	bl	8015c86 <__any_on>
 8015036:	2800      	cmp	r0, #0
 8015038:	d1ed      	bne.n	8015016 <__gethex+0x26a>
 801503a:	9801      	ldr	r0, [sp, #4]
 801503c:	4621      	mov	r1, r4
 801503e:	f000 f9d9 	bl	80153f4 <_Bfree>
 8015042:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015044:	2300      	movs	r3, #0
 8015046:	6013      	str	r3, [r2, #0]
 8015048:	2550      	movs	r5, #80	@ 0x50
 801504a:	e72b      	b.n	8014ea4 <__gethex+0xf8>
 801504c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801504e:	2b00      	cmp	r3, #0
 8015050:	d1f3      	bne.n	801503a <__gethex+0x28e>
 8015052:	e7e0      	b.n	8015016 <__gethex+0x26a>
 8015054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015056:	2b00      	cmp	r3, #0
 8015058:	d1dd      	bne.n	8015016 <__gethex+0x26a>
 801505a:	e7ee      	b.n	801503a <__gethex+0x28e>
 801505c:	08018a4c 	.word	0x08018a4c
 8015060:	08018b9c 	.word	0x08018b9c
 8015064:	08018bad 	.word	0x08018bad
 8015068:	1e6f      	subs	r7, r5, #1
 801506a:	f1b9 0f00 	cmp.w	r9, #0
 801506e:	d130      	bne.n	80150d2 <__gethex+0x326>
 8015070:	b127      	cbz	r7, 801507c <__gethex+0x2d0>
 8015072:	4639      	mov	r1, r7
 8015074:	4620      	mov	r0, r4
 8015076:	f000 fe06 	bl	8015c86 <__any_on>
 801507a:	4681      	mov	r9, r0
 801507c:	117a      	asrs	r2, r7, #5
 801507e:	2301      	movs	r3, #1
 8015080:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015084:	f007 071f 	and.w	r7, r7, #31
 8015088:	40bb      	lsls	r3, r7
 801508a:	4213      	tst	r3, r2
 801508c:	4629      	mov	r1, r5
 801508e:	4620      	mov	r0, r4
 8015090:	bf18      	it	ne
 8015092:	f049 0902 	orrne.w	r9, r9, #2
 8015096:	f7ff fe21 	bl	8014cdc <rshift>
 801509a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801509e:	1b76      	subs	r6, r6, r5
 80150a0:	2502      	movs	r5, #2
 80150a2:	f1b9 0f00 	cmp.w	r9, #0
 80150a6:	d047      	beq.n	8015138 <__gethex+0x38c>
 80150a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80150ac:	2b02      	cmp	r3, #2
 80150ae:	d015      	beq.n	80150dc <__gethex+0x330>
 80150b0:	2b03      	cmp	r3, #3
 80150b2:	d017      	beq.n	80150e4 <__gethex+0x338>
 80150b4:	2b01      	cmp	r3, #1
 80150b6:	d109      	bne.n	80150cc <__gethex+0x320>
 80150b8:	f019 0f02 	tst.w	r9, #2
 80150bc:	d006      	beq.n	80150cc <__gethex+0x320>
 80150be:	f8da 3000 	ldr.w	r3, [sl]
 80150c2:	ea49 0903 	orr.w	r9, r9, r3
 80150c6:	f019 0f01 	tst.w	r9, #1
 80150ca:	d10e      	bne.n	80150ea <__gethex+0x33e>
 80150cc:	f045 0510 	orr.w	r5, r5, #16
 80150d0:	e032      	b.n	8015138 <__gethex+0x38c>
 80150d2:	f04f 0901 	mov.w	r9, #1
 80150d6:	e7d1      	b.n	801507c <__gethex+0x2d0>
 80150d8:	2501      	movs	r5, #1
 80150da:	e7e2      	b.n	80150a2 <__gethex+0x2f6>
 80150dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80150de:	f1c3 0301 	rsb	r3, r3, #1
 80150e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80150e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d0f0      	beq.n	80150cc <__gethex+0x320>
 80150ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80150ee:	f104 0314 	add.w	r3, r4, #20
 80150f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80150f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80150fa:	f04f 0c00 	mov.w	ip, #0
 80150fe:	4618      	mov	r0, r3
 8015100:	f853 2b04 	ldr.w	r2, [r3], #4
 8015104:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015108:	d01b      	beq.n	8015142 <__gethex+0x396>
 801510a:	3201      	adds	r2, #1
 801510c:	6002      	str	r2, [r0, #0]
 801510e:	2d02      	cmp	r5, #2
 8015110:	f104 0314 	add.w	r3, r4, #20
 8015114:	d13c      	bne.n	8015190 <__gethex+0x3e4>
 8015116:	f8d8 2000 	ldr.w	r2, [r8]
 801511a:	3a01      	subs	r2, #1
 801511c:	42b2      	cmp	r2, r6
 801511e:	d109      	bne.n	8015134 <__gethex+0x388>
 8015120:	1171      	asrs	r1, r6, #5
 8015122:	2201      	movs	r2, #1
 8015124:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015128:	f006 061f 	and.w	r6, r6, #31
 801512c:	fa02 f606 	lsl.w	r6, r2, r6
 8015130:	421e      	tst	r6, r3
 8015132:	d13a      	bne.n	80151aa <__gethex+0x3fe>
 8015134:	f045 0520 	orr.w	r5, r5, #32
 8015138:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801513a:	601c      	str	r4, [r3, #0]
 801513c:	9b02      	ldr	r3, [sp, #8]
 801513e:	601f      	str	r7, [r3, #0]
 8015140:	e6b0      	b.n	8014ea4 <__gethex+0xf8>
 8015142:	4299      	cmp	r1, r3
 8015144:	f843 cc04 	str.w	ip, [r3, #-4]
 8015148:	d8d9      	bhi.n	80150fe <__gethex+0x352>
 801514a:	68a3      	ldr	r3, [r4, #8]
 801514c:	459b      	cmp	fp, r3
 801514e:	db17      	blt.n	8015180 <__gethex+0x3d4>
 8015150:	6861      	ldr	r1, [r4, #4]
 8015152:	9801      	ldr	r0, [sp, #4]
 8015154:	3101      	adds	r1, #1
 8015156:	f000 f90d 	bl	8015374 <_Balloc>
 801515a:	4681      	mov	r9, r0
 801515c:	b918      	cbnz	r0, 8015166 <__gethex+0x3ba>
 801515e:	4b1a      	ldr	r3, [pc, #104]	@ (80151c8 <__gethex+0x41c>)
 8015160:	4602      	mov	r2, r0
 8015162:	2184      	movs	r1, #132	@ 0x84
 8015164:	e6c5      	b.n	8014ef2 <__gethex+0x146>
 8015166:	6922      	ldr	r2, [r4, #16]
 8015168:	3202      	adds	r2, #2
 801516a:	f104 010c 	add.w	r1, r4, #12
 801516e:	0092      	lsls	r2, r2, #2
 8015170:	300c      	adds	r0, #12
 8015172:	f7fe fed8 	bl	8013f26 <memcpy>
 8015176:	4621      	mov	r1, r4
 8015178:	9801      	ldr	r0, [sp, #4]
 801517a:	f000 f93b 	bl	80153f4 <_Bfree>
 801517e:	464c      	mov	r4, r9
 8015180:	6923      	ldr	r3, [r4, #16]
 8015182:	1c5a      	adds	r2, r3, #1
 8015184:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015188:	6122      	str	r2, [r4, #16]
 801518a:	2201      	movs	r2, #1
 801518c:	615a      	str	r2, [r3, #20]
 801518e:	e7be      	b.n	801510e <__gethex+0x362>
 8015190:	6922      	ldr	r2, [r4, #16]
 8015192:	455a      	cmp	r2, fp
 8015194:	dd0b      	ble.n	80151ae <__gethex+0x402>
 8015196:	2101      	movs	r1, #1
 8015198:	4620      	mov	r0, r4
 801519a:	f7ff fd9f 	bl	8014cdc <rshift>
 801519e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80151a2:	3701      	adds	r7, #1
 80151a4:	42bb      	cmp	r3, r7
 80151a6:	f6ff aee0 	blt.w	8014f6a <__gethex+0x1be>
 80151aa:	2501      	movs	r5, #1
 80151ac:	e7c2      	b.n	8015134 <__gethex+0x388>
 80151ae:	f016 061f 	ands.w	r6, r6, #31
 80151b2:	d0fa      	beq.n	80151aa <__gethex+0x3fe>
 80151b4:	4453      	add	r3, sl
 80151b6:	f1c6 0620 	rsb	r6, r6, #32
 80151ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80151be:	f000 f9cb 	bl	8015558 <__hi0bits>
 80151c2:	42b0      	cmp	r0, r6
 80151c4:	dbe7      	blt.n	8015196 <__gethex+0x3ea>
 80151c6:	e7f0      	b.n	80151aa <__gethex+0x3fe>
 80151c8:	08018b9c 	.word	0x08018b9c

080151cc <L_shift>:
 80151cc:	f1c2 0208 	rsb	r2, r2, #8
 80151d0:	0092      	lsls	r2, r2, #2
 80151d2:	b570      	push	{r4, r5, r6, lr}
 80151d4:	f1c2 0620 	rsb	r6, r2, #32
 80151d8:	6843      	ldr	r3, [r0, #4]
 80151da:	6804      	ldr	r4, [r0, #0]
 80151dc:	fa03 f506 	lsl.w	r5, r3, r6
 80151e0:	432c      	orrs	r4, r5
 80151e2:	40d3      	lsrs	r3, r2
 80151e4:	6004      	str	r4, [r0, #0]
 80151e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80151ea:	4288      	cmp	r0, r1
 80151ec:	d3f4      	bcc.n	80151d8 <L_shift+0xc>
 80151ee:	bd70      	pop	{r4, r5, r6, pc}

080151f0 <__match>:
 80151f0:	b530      	push	{r4, r5, lr}
 80151f2:	6803      	ldr	r3, [r0, #0]
 80151f4:	3301      	adds	r3, #1
 80151f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80151fa:	b914      	cbnz	r4, 8015202 <__match+0x12>
 80151fc:	6003      	str	r3, [r0, #0]
 80151fe:	2001      	movs	r0, #1
 8015200:	bd30      	pop	{r4, r5, pc}
 8015202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015206:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801520a:	2d19      	cmp	r5, #25
 801520c:	bf98      	it	ls
 801520e:	3220      	addls	r2, #32
 8015210:	42a2      	cmp	r2, r4
 8015212:	d0f0      	beq.n	80151f6 <__match+0x6>
 8015214:	2000      	movs	r0, #0
 8015216:	e7f3      	b.n	8015200 <__match+0x10>

08015218 <__hexnan>:
 8015218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801521c:	680b      	ldr	r3, [r1, #0]
 801521e:	6801      	ldr	r1, [r0, #0]
 8015220:	115e      	asrs	r6, r3, #5
 8015222:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015226:	f013 031f 	ands.w	r3, r3, #31
 801522a:	b087      	sub	sp, #28
 801522c:	bf18      	it	ne
 801522e:	3604      	addne	r6, #4
 8015230:	2500      	movs	r5, #0
 8015232:	1f37      	subs	r7, r6, #4
 8015234:	4682      	mov	sl, r0
 8015236:	4690      	mov	r8, r2
 8015238:	9301      	str	r3, [sp, #4]
 801523a:	f846 5c04 	str.w	r5, [r6, #-4]
 801523e:	46b9      	mov	r9, r7
 8015240:	463c      	mov	r4, r7
 8015242:	9502      	str	r5, [sp, #8]
 8015244:	46ab      	mov	fp, r5
 8015246:	784a      	ldrb	r2, [r1, #1]
 8015248:	1c4b      	adds	r3, r1, #1
 801524a:	9303      	str	r3, [sp, #12]
 801524c:	b342      	cbz	r2, 80152a0 <__hexnan+0x88>
 801524e:	4610      	mov	r0, r2
 8015250:	9105      	str	r1, [sp, #20]
 8015252:	9204      	str	r2, [sp, #16]
 8015254:	f7ff fd94 	bl	8014d80 <__hexdig_fun>
 8015258:	2800      	cmp	r0, #0
 801525a:	d151      	bne.n	8015300 <__hexnan+0xe8>
 801525c:	9a04      	ldr	r2, [sp, #16]
 801525e:	9905      	ldr	r1, [sp, #20]
 8015260:	2a20      	cmp	r2, #32
 8015262:	d818      	bhi.n	8015296 <__hexnan+0x7e>
 8015264:	9b02      	ldr	r3, [sp, #8]
 8015266:	459b      	cmp	fp, r3
 8015268:	dd13      	ble.n	8015292 <__hexnan+0x7a>
 801526a:	454c      	cmp	r4, r9
 801526c:	d206      	bcs.n	801527c <__hexnan+0x64>
 801526e:	2d07      	cmp	r5, #7
 8015270:	dc04      	bgt.n	801527c <__hexnan+0x64>
 8015272:	462a      	mov	r2, r5
 8015274:	4649      	mov	r1, r9
 8015276:	4620      	mov	r0, r4
 8015278:	f7ff ffa8 	bl	80151cc <L_shift>
 801527c:	4544      	cmp	r4, r8
 801527e:	d952      	bls.n	8015326 <__hexnan+0x10e>
 8015280:	2300      	movs	r3, #0
 8015282:	f1a4 0904 	sub.w	r9, r4, #4
 8015286:	f844 3c04 	str.w	r3, [r4, #-4]
 801528a:	f8cd b008 	str.w	fp, [sp, #8]
 801528e:	464c      	mov	r4, r9
 8015290:	461d      	mov	r5, r3
 8015292:	9903      	ldr	r1, [sp, #12]
 8015294:	e7d7      	b.n	8015246 <__hexnan+0x2e>
 8015296:	2a29      	cmp	r2, #41	@ 0x29
 8015298:	d157      	bne.n	801534a <__hexnan+0x132>
 801529a:	3102      	adds	r1, #2
 801529c:	f8ca 1000 	str.w	r1, [sl]
 80152a0:	f1bb 0f00 	cmp.w	fp, #0
 80152a4:	d051      	beq.n	801534a <__hexnan+0x132>
 80152a6:	454c      	cmp	r4, r9
 80152a8:	d206      	bcs.n	80152b8 <__hexnan+0xa0>
 80152aa:	2d07      	cmp	r5, #7
 80152ac:	dc04      	bgt.n	80152b8 <__hexnan+0xa0>
 80152ae:	462a      	mov	r2, r5
 80152b0:	4649      	mov	r1, r9
 80152b2:	4620      	mov	r0, r4
 80152b4:	f7ff ff8a 	bl	80151cc <L_shift>
 80152b8:	4544      	cmp	r4, r8
 80152ba:	d936      	bls.n	801532a <__hexnan+0x112>
 80152bc:	f1a8 0204 	sub.w	r2, r8, #4
 80152c0:	4623      	mov	r3, r4
 80152c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80152c6:	f842 1f04 	str.w	r1, [r2, #4]!
 80152ca:	429f      	cmp	r7, r3
 80152cc:	d2f9      	bcs.n	80152c2 <__hexnan+0xaa>
 80152ce:	1b3b      	subs	r3, r7, r4
 80152d0:	f023 0303 	bic.w	r3, r3, #3
 80152d4:	3304      	adds	r3, #4
 80152d6:	3401      	adds	r4, #1
 80152d8:	3e03      	subs	r6, #3
 80152da:	42b4      	cmp	r4, r6
 80152dc:	bf88      	it	hi
 80152de:	2304      	movhi	r3, #4
 80152e0:	4443      	add	r3, r8
 80152e2:	2200      	movs	r2, #0
 80152e4:	f843 2b04 	str.w	r2, [r3], #4
 80152e8:	429f      	cmp	r7, r3
 80152ea:	d2fb      	bcs.n	80152e4 <__hexnan+0xcc>
 80152ec:	683b      	ldr	r3, [r7, #0]
 80152ee:	b91b      	cbnz	r3, 80152f8 <__hexnan+0xe0>
 80152f0:	4547      	cmp	r7, r8
 80152f2:	d128      	bne.n	8015346 <__hexnan+0x12e>
 80152f4:	2301      	movs	r3, #1
 80152f6:	603b      	str	r3, [r7, #0]
 80152f8:	2005      	movs	r0, #5
 80152fa:	b007      	add	sp, #28
 80152fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015300:	3501      	adds	r5, #1
 8015302:	2d08      	cmp	r5, #8
 8015304:	f10b 0b01 	add.w	fp, fp, #1
 8015308:	dd06      	ble.n	8015318 <__hexnan+0x100>
 801530a:	4544      	cmp	r4, r8
 801530c:	d9c1      	bls.n	8015292 <__hexnan+0x7a>
 801530e:	2300      	movs	r3, #0
 8015310:	f844 3c04 	str.w	r3, [r4, #-4]
 8015314:	2501      	movs	r5, #1
 8015316:	3c04      	subs	r4, #4
 8015318:	6822      	ldr	r2, [r4, #0]
 801531a:	f000 000f 	and.w	r0, r0, #15
 801531e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015322:	6020      	str	r0, [r4, #0]
 8015324:	e7b5      	b.n	8015292 <__hexnan+0x7a>
 8015326:	2508      	movs	r5, #8
 8015328:	e7b3      	b.n	8015292 <__hexnan+0x7a>
 801532a:	9b01      	ldr	r3, [sp, #4]
 801532c:	2b00      	cmp	r3, #0
 801532e:	d0dd      	beq.n	80152ec <__hexnan+0xd4>
 8015330:	f1c3 0320 	rsb	r3, r3, #32
 8015334:	f04f 32ff 	mov.w	r2, #4294967295
 8015338:	40da      	lsrs	r2, r3
 801533a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801533e:	4013      	ands	r3, r2
 8015340:	f846 3c04 	str.w	r3, [r6, #-4]
 8015344:	e7d2      	b.n	80152ec <__hexnan+0xd4>
 8015346:	3f04      	subs	r7, #4
 8015348:	e7d0      	b.n	80152ec <__hexnan+0xd4>
 801534a:	2004      	movs	r0, #4
 801534c:	e7d5      	b.n	80152fa <__hexnan+0xe2>

0801534e <__ascii_mbtowc>:
 801534e:	b082      	sub	sp, #8
 8015350:	b901      	cbnz	r1, 8015354 <__ascii_mbtowc+0x6>
 8015352:	a901      	add	r1, sp, #4
 8015354:	b142      	cbz	r2, 8015368 <__ascii_mbtowc+0x1a>
 8015356:	b14b      	cbz	r3, 801536c <__ascii_mbtowc+0x1e>
 8015358:	7813      	ldrb	r3, [r2, #0]
 801535a:	600b      	str	r3, [r1, #0]
 801535c:	7812      	ldrb	r2, [r2, #0]
 801535e:	1e10      	subs	r0, r2, #0
 8015360:	bf18      	it	ne
 8015362:	2001      	movne	r0, #1
 8015364:	b002      	add	sp, #8
 8015366:	4770      	bx	lr
 8015368:	4610      	mov	r0, r2
 801536a:	e7fb      	b.n	8015364 <__ascii_mbtowc+0x16>
 801536c:	f06f 0001 	mvn.w	r0, #1
 8015370:	e7f8      	b.n	8015364 <__ascii_mbtowc+0x16>
	...

08015374 <_Balloc>:
 8015374:	b570      	push	{r4, r5, r6, lr}
 8015376:	69c6      	ldr	r6, [r0, #28]
 8015378:	4604      	mov	r4, r0
 801537a:	460d      	mov	r5, r1
 801537c:	b976      	cbnz	r6, 801539c <_Balloc+0x28>
 801537e:	2010      	movs	r0, #16
 8015380:	f7fc ffb6 	bl	80122f0 <malloc>
 8015384:	4602      	mov	r2, r0
 8015386:	61e0      	str	r0, [r4, #28]
 8015388:	b920      	cbnz	r0, 8015394 <_Balloc+0x20>
 801538a:	4b18      	ldr	r3, [pc, #96]	@ (80153ec <_Balloc+0x78>)
 801538c:	4818      	ldr	r0, [pc, #96]	@ (80153f0 <_Balloc+0x7c>)
 801538e:	216b      	movs	r1, #107	@ 0x6b
 8015390:	f7fe fde2 	bl	8013f58 <__assert_func>
 8015394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015398:	6006      	str	r6, [r0, #0]
 801539a:	60c6      	str	r6, [r0, #12]
 801539c:	69e6      	ldr	r6, [r4, #28]
 801539e:	68f3      	ldr	r3, [r6, #12]
 80153a0:	b183      	cbz	r3, 80153c4 <_Balloc+0x50>
 80153a2:	69e3      	ldr	r3, [r4, #28]
 80153a4:	68db      	ldr	r3, [r3, #12]
 80153a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80153aa:	b9b8      	cbnz	r0, 80153dc <_Balloc+0x68>
 80153ac:	2101      	movs	r1, #1
 80153ae:	fa01 f605 	lsl.w	r6, r1, r5
 80153b2:	1d72      	adds	r2, r6, #5
 80153b4:	0092      	lsls	r2, r2, #2
 80153b6:	4620      	mov	r0, r4
 80153b8:	f000 fd59 	bl	8015e6e <_calloc_r>
 80153bc:	b160      	cbz	r0, 80153d8 <_Balloc+0x64>
 80153be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80153c2:	e00e      	b.n	80153e2 <_Balloc+0x6e>
 80153c4:	2221      	movs	r2, #33	@ 0x21
 80153c6:	2104      	movs	r1, #4
 80153c8:	4620      	mov	r0, r4
 80153ca:	f000 fd50 	bl	8015e6e <_calloc_r>
 80153ce:	69e3      	ldr	r3, [r4, #28]
 80153d0:	60f0      	str	r0, [r6, #12]
 80153d2:	68db      	ldr	r3, [r3, #12]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d1e4      	bne.n	80153a2 <_Balloc+0x2e>
 80153d8:	2000      	movs	r0, #0
 80153da:	bd70      	pop	{r4, r5, r6, pc}
 80153dc:	6802      	ldr	r2, [r0, #0]
 80153de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80153e2:	2300      	movs	r3, #0
 80153e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80153e8:	e7f7      	b.n	80153da <_Balloc+0x66>
 80153ea:	bf00      	nop
 80153ec:	08018a82 	.word	0x08018a82
 80153f0:	08018c0d 	.word	0x08018c0d

080153f4 <_Bfree>:
 80153f4:	b570      	push	{r4, r5, r6, lr}
 80153f6:	69c6      	ldr	r6, [r0, #28]
 80153f8:	4605      	mov	r5, r0
 80153fa:	460c      	mov	r4, r1
 80153fc:	b976      	cbnz	r6, 801541c <_Bfree+0x28>
 80153fe:	2010      	movs	r0, #16
 8015400:	f7fc ff76 	bl	80122f0 <malloc>
 8015404:	4602      	mov	r2, r0
 8015406:	61e8      	str	r0, [r5, #28]
 8015408:	b920      	cbnz	r0, 8015414 <_Bfree+0x20>
 801540a:	4b09      	ldr	r3, [pc, #36]	@ (8015430 <_Bfree+0x3c>)
 801540c:	4809      	ldr	r0, [pc, #36]	@ (8015434 <_Bfree+0x40>)
 801540e:	218f      	movs	r1, #143	@ 0x8f
 8015410:	f7fe fda2 	bl	8013f58 <__assert_func>
 8015414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015418:	6006      	str	r6, [r0, #0]
 801541a:	60c6      	str	r6, [r0, #12]
 801541c:	b13c      	cbz	r4, 801542e <_Bfree+0x3a>
 801541e:	69eb      	ldr	r3, [r5, #28]
 8015420:	6862      	ldr	r2, [r4, #4]
 8015422:	68db      	ldr	r3, [r3, #12]
 8015424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015428:	6021      	str	r1, [r4, #0]
 801542a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801542e:	bd70      	pop	{r4, r5, r6, pc}
 8015430:	08018a82 	.word	0x08018a82
 8015434:	08018c0d 	.word	0x08018c0d

08015438 <__multadd>:
 8015438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801543c:	690d      	ldr	r5, [r1, #16]
 801543e:	4607      	mov	r7, r0
 8015440:	460c      	mov	r4, r1
 8015442:	461e      	mov	r6, r3
 8015444:	f101 0c14 	add.w	ip, r1, #20
 8015448:	2000      	movs	r0, #0
 801544a:	f8dc 3000 	ldr.w	r3, [ip]
 801544e:	b299      	uxth	r1, r3
 8015450:	fb02 6101 	mla	r1, r2, r1, r6
 8015454:	0c1e      	lsrs	r6, r3, #16
 8015456:	0c0b      	lsrs	r3, r1, #16
 8015458:	fb02 3306 	mla	r3, r2, r6, r3
 801545c:	b289      	uxth	r1, r1
 801545e:	3001      	adds	r0, #1
 8015460:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015464:	4285      	cmp	r5, r0
 8015466:	f84c 1b04 	str.w	r1, [ip], #4
 801546a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801546e:	dcec      	bgt.n	801544a <__multadd+0x12>
 8015470:	b30e      	cbz	r6, 80154b6 <__multadd+0x7e>
 8015472:	68a3      	ldr	r3, [r4, #8]
 8015474:	42ab      	cmp	r3, r5
 8015476:	dc19      	bgt.n	80154ac <__multadd+0x74>
 8015478:	6861      	ldr	r1, [r4, #4]
 801547a:	4638      	mov	r0, r7
 801547c:	3101      	adds	r1, #1
 801547e:	f7ff ff79 	bl	8015374 <_Balloc>
 8015482:	4680      	mov	r8, r0
 8015484:	b928      	cbnz	r0, 8015492 <__multadd+0x5a>
 8015486:	4602      	mov	r2, r0
 8015488:	4b0c      	ldr	r3, [pc, #48]	@ (80154bc <__multadd+0x84>)
 801548a:	480d      	ldr	r0, [pc, #52]	@ (80154c0 <__multadd+0x88>)
 801548c:	21ba      	movs	r1, #186	@ 0xba
 801548e:	f7fe fd63 	bl	8013f58 <__assert_func>
 8015492:	6922      	ldr	r2, [r4, #16]
 8015494:	3202      	adds	r2, #2
 8015496:	f104 010c 	add.w	r1, r4, #12
 801549a:	0092      	lsls	r2, r2, #2
 801549c:	300c      	adds	r0, #12
 801549e:	f7fe fd42 	bl	8013f26 <memcpy>
 80154a2:	4621      	mov	r1, r4
 80154a4:	4638      	mov	r0, r7
 80154a6:	f7ff ffa5 	bl	80153f4 <_Bfree>
 80154aa:	4644      	mov	r4, r8
 80154ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80154b0:	3501      	adds	r5, #1
 80154b2:	615e      	str	r6, [r3, #20]
 80154b4:	6125      	str	r5, [r4, #16]
 80154b6:	4620      	mov	r0, r4
 80154b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154bc:	08018b9c 	.word	0x08018b9c
 80154c0:	08018c0d 	.word	0x08018c0d

080154c4 <__s2b>:
 80154c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154c8:	460c      	mov	r4, r1
 80154ca:	4615      	mov	r5, r2
 80154cc:	461f      	mov	r7, r3
 80154ce:	2209      	movs	r2, #9
 80154d0:	3308      	adds	r3, #8
 80154d2:	4606      	mov	r6, r0
 80154d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80154d8:	2100      	movs	r1, #0
 80154da:	2201      	movs	r2, #1
 80154dc:	429a      	cmp	r2, r3
 80154de:	db09      	blt.n	80154f4 <__s2b+0x30>
 80154e0:	4630      	mov	r0, r6
 80154e2:	f7ff ff47 	bl	8015374 <_Balloc>
 80154e6:	b940      	cbnz	r0, 80154fa <__s2b+0x36>
 80154e8:	4602      	mov	r2, r0
 80154ea:	4b19      	ldr	r3, [pc, #100]	@ (8015550 <__s2b+0x8c>)
 80154ec:	4819      	ldr	r0, [pc, #100]	@ (8015554 <__s2b+0x90>)
 80154ee:	21d3      	movs	r1, #211	@ 0xd3
 80154f0:	f7fe fd32 	bl	8013f58 <__assert_func>
 80154f4:	0052      	lsls	r2, r2, #1
 80154f6:	3101      	adds	r1, #1
 80154f8:	e7f0      	b.n	80154dc <__s2b+0x18>
 80154fa:	9b08      	ldr	r3, [sp, #32]
 80154fc:	6143      	str	r3, [r0, #20]
 80154fe:	2d09      	cmp	r5, #9
 8015500:	f04f 0301 	mov.w	r3, #1
 8015504:	6103      	str	r3, [r0, #16]
 8015506:	dd16      	ble.n	8015536 <__s2b+0x72>
 8015508:	f104 0909 	add.w	r9, r4, #9
 801550c:	46c8      	mov	r8, r9
 801550e:	442c      	add	r4, r5
 8015510:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015514:	4601      	mov	r1, r0
 8015516:	3b30      	subs	r3, #48	@ 0x30
 8015518:	220a      	movs	r2, #10
 801551a:	4630      	mov	r0, r6
 801551c:	f7ff ff8c 	bl	8015438 <__multadd>
 8015520:	45a0      	cmp	r8, r4
 8015522:	d1f5      	bne.n	8015510 <__s2b+0x4c>
 8015524:	f1a5 0408 	sub.w	r4, r5, #8
 8015528:	444c      	add	r4, r9
 801552a:	1b2d      	subs	r5, r5, r4
 801552c:	1963      	adds	r3, r4, r5
 801552e:	42bb      	cmp	r3, r7
 8015530:	db04      	blt.n	801553c <__s2b+0x78>
 8015532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015536:	340a      	adds	r4, #10
 8015538:	2509      	movs	r5, #9
 801553a:	e7f6      	b.n	801552a <__s2b+0x66>
 801553c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015540:	4601      	mov	r1, r0
 8015542:	3b30      	subs	r3, #48	@ 0x30
 8015544:	220a      	movs	r2, #10
 8015546:	4630      	mov	r0, r6
 8015548:	f7ff ff76 	bl	8015438 <__multadd>
 801554c:	e7ee      	b.n	801552c <__s2b+0x68>
 801554e:	bf00      	nop
 8015550:	08018b9c 	.word	0x08018b9c
 8015554:	08018c0d 	.word	0x08018c0d

08015558 <__hi0bits>:
 8015558:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801555c:	4603      	mov	r3, r0
 801555e:	bf36      	itet	cc
 8015560:	0403      	lslcc	r3, r0, #16
 8015562:	2000      	movcs	r0, #0
 8015564:	2010      	movcc	r0, #16
 8015566:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801556a:	bf3c      	itt	cc
 801556c:	021b      	lslcc	r3, r3, #8
 801556e:	3008      	addcc	r0, #8
 8015570:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015574:	bf3c      	itt	cc
 8015576:	011b      	lslcc	r3, r3, #4
 8015578:	3004      	addcc	r0, #4
 801557a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801557e:	bf3c      	itt	cc
 8015580:	009b      	lslcc	r3, r3, #2
 8015582:	3002      	addcc	r0, #2
 8015584:	2b00      	cmp	r3, #0
 8015586:	db05      	blt.n	8015594 <__hi0bits+0x3c>
 8015588:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801558c:	f100 0001 	add.w	r0, r0, #1
 8015590:	bf08      	it	eq
 8015592:	2020      	moveq	r0, #32
 8015594:	4770      	bx	lr

08015596 <__lo0bits>:
 8015596:	6803      	ldr	r3, [r0, #0]
 8015598:	4602      	mov	r2, r0
 801559a:	f013 0007 	ands.w	r0, r3, #7
 801559e:	d00b      	beq.n	80155b8 <__lo0bits+0x22>
 80155a0:	07d9      	lsls	r1, r3, #31
 80155a2:	d421      	bmi.n	80155e8 <__lo0bits+0x52>
 80155a4:	0798      	lsls	r0, r3, #30
 80155a6:	bf49      	itett	mi
 80155a8:	085b      	lsrmi	r3, r3, #1
 80155aa:	089b      	lsrpl	r3, r3, #2
 80155ac:	2001      	movmi	r0, #1
 80155ae:	6013      	strmi	r3, [r2, #0]
 80155b0:	bf5c      	itt	pl
 80155b2:	6013      	strpl	r3, [r2, #0]
 80155b4:	2002      	movpl	r0, #2
 80155b6:	4770      	bx	lr
 80155b8:	b299      	uxth	r1, r3
 80155ba:	b909      	cbnz	r1, 80155c0 <__lo0bits+0x2a>
 80155bc:	0c1b      	lsrs	r3, r3, #16
 80155be:	2010      	movs	r0, #16
 80155c0:	b2d9      	uxtb	r1, r3
 80155c2:	b909      	cbnz	r1, 80155c8 <__lo0bits+0x32>
 80155c4:	3008      	adds	r0, #8
 80155c6:	0a1b      	lsrs	r3, r3, #8
 80155c8:	0719      	lsls	r1, r3, #28
 80155ca:	bf04      	itt	eq
 80155cc:	091b      	lsreq	r3, r3, #4
 80155ce:	3004      	addeq	r0, #4
 80155d0:	0799      	lsls	r1, r3, #30
 80155d2:	bf04      	itt	eq
 80155d4:	089b      	lsreq	r3, r3, #2
 80155d6:	3002      	addeq	r0, #2
 80155d8:	07d9      	lsls	r1, r3, #31
 80155da:	d403      	bmi.n	80155e4 <__lo0bits+0x4e>
 80155dc:	085b      	lsrs	r3, r3, #1
 80155de:	f100 0001 	add.w	r0, r0, #1
 80155e2:	d003      	beq.n	80155ec <__lo0bits+0x56>
 80155e4:	6013      	str	r3, [r2, #0]
 80155e6:	4770      	bx	lr
 80155e8:	2000      	movs	r0, #0
 80155ea:	4770      	bx	lr
 80155ec:	2020      	movs	r0, #32
 80155ee:	4770      	bx	lr

080155f0 <__i2b>:
 80155f0:	b510      	push	{r4, lr}
 80155f2:	460c      	mov	r4, r1
 80155f4:	2101      	movs	r1, #1
 80155f6:	f7ff febd 	bl	8015374 <_Balloc>
 80155fa:	4602      	mov	r2, r0
 80155fc:	b928      	cbnz	r0, 801560a <__i2b+0x1a>
 80155fe:	4b05      	ldr	r3, [pc, #20]	@ (8015614 <__i2b+0x24>)
 8015600:	4805      	ldr	r0, [pc, #20]	@ (8015618 <__i2b+0x28>)
 8015602:	f240 1145 	movw	r1, #325	@ 0x145
 8015606:	f7fe fca7 	bl	8013f58 <__assert_func>
 801560a:	2301      	movs	r3, #1
 801560c:	6144      	str	r4, [r0, #20]
 801560e:	6103      	str	r3, [r0, #16]
 8015610:	bd10      	pop	{r4, pc}
 8015612:	bf00      	nop
 8015614:	08018b9c 	.word	0x08018b9c
 8015618:	08018c0d 	.word	0x08018c0d

0801561c <__multiply>:
 801561c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015620:	4617      	mov	r7, r2
 8015622:	690a      	ldr	r2, [r1, #16]
 8015624:	693b      	ldr	r3, [r7, #16]
 8015626:	429a      	cmp	r2, r3
 8015628:	bfa8      	it	ge
 801562a:	463b      	movge	r3, r7
 801562c:	4689      	mov	r9, r1
 801562e:	bfa4      	itt	ge
 8015630:	460f      	movge	r7, r1
 8015632:	4699      	movge	r9, r3
 8015634:	693d      	ldr	r5, [r7, #16]
 8015636:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801563a:	68bb      	ldr	r3, [r7, #8]
 801563c:	6879      	ldr	r1, [r7, #4]
 801563e:	eb05 060a 	add.w	r6, r5, sl
 8015642:	42b3      	cmp	r3, r6
 8015644:	b085      	sub	sp, #20
 8015646:	bfb8      	it	lt
 8015648:	3101      	addlt	r1, #1
 801564a:	f7ff fe93 	bl	8015374 <_Balloc>
 801564e:	b930      	cbnz	r0, 801565e <__multiply+0x42>
 8015650:	4602      	mov	r2, r0
 8015652:	4b41      	ldr	r3, [pc, #260]	@ (8015758 <__multiply+0x13c>)
 8015654:	4841      	ldr	r0, [pc, #260]	@ (801575c <__multiply+0x140>)
 8015656:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801565a:	f7fe fc7d 	bl	8013f58 <__assert_func>
 801565e:	f100 0414 	add.w	r4, r0, #20
 8015662:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8015666:	4623      	mov	r3, r4
 8015668:	2200      	movs	r2, #0
 801566a:	4573      	cmp	r3, lr
 801566c:	d320      	bcc.n	80156b0 <__multiply+0x94>
 801566e:	f107 0814 	add.w	r8, r7, #20
 8015672:	f109 0114 	add.w	r1, r9, #20
 8015676:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801567a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801567e:	9302      	str	r3, [sp, #8]
 8015680:	1beb      	subs	r3, r5, r7
 8015682:	3b15      	subs	r3, #21
 8015684:	f023 0303 	bic.w	r3, r3, #3
 8015688:	3304      	adds	r3, #4
 801568a:	3715      	adds	r7, #21
 801568c:	42bd      	cmp	r5, r7
 801568e:	bf38      	it	cc
 8015690:	2304      	movcc	r3, #4
 8015692:	9301      	str	r3, [sp, #4]
 8015694:	9b02      	ldr	r3, [sp, #8]
 8015696:	9103      	str	r1, [sp, #12]
 8015698:	428b      	cmp	r3, r1
 801569a:	d80c      	bhi.n	80156b6 <__multiply+0x9a>
 801569c:	2e00      	cmp	r6, #0
 801569e:	dd03      	ble.n	80156a8 <__multiply+0x8c>
 80156a0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d055      	beq.n	8015754 <__multiply+0x138>
 80156a8:	6106      	str	r6, [r0, #16]
 80156aa:	b005      	add	sp, #20
 80156ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156b0:	f843 2b04 	str.w	r2, [r3], #4
 80156b4:	e7d9      	b.n	801566a <__multiply+0x4e>
 80156b6:	f8b1 a000 	ldrh.w	sl, [r1]
 80156ba:	f1ba 0f00 	cmp.w	sl, #0
 80156be:	d01f      	beq.n	8015700 <__multiply+0xe4>
 80156c0:	46c4      	mov	ip, r8
 80156c2:	46a1      	mov	r9, r4
 80156c4:	2700      	movs	r7, #0
 80156c6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80156ca:	f8d9 3000 	ldr.w	r3, [r9]
 80156ce:	fa1f fb82 	uxth.w	fp, r2
 80156d2:	b29b      	uxth	r3, r3
 80156d4:	fb0a 330b 	mla	r3, sl, fp, r3
 80156d8:	443b      	add	r3, r7
 80156da:	f8d9 7000 	ldr.w	r7, [r9]
 80156de:	0c12      	lsrs	r2, r2, #16
 80156e0:	0c3f      	lsrs	r7, r7, #16
 80156e2:	fb0a 7202 	mla	r2, sl, r2, r7
 80156e6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80156ea:	b29b      	uxth	r3, r3
 80156ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80156f0:	4565      	cmp	r5, ip
 80156f2:	f849 3b04 	str.w	r3, [r9], #4
 80156f6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80156fa:	d8e4      	bhi.n	80156c6 <__multiply+0xaa>
 80156fc:	9b01      	ldr	r3, [sp, #4]
 80156fe:	50e7      	str	r7, [r4, r3]
 8015700:	9b03      	ldr	r3, [sp, #12]
 8015702:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015706:	3104      	adds	r1, #4
 8015708:	f1b9 0f00 	cmp.w	r9, #0
 801570c:	d020      	beq.n	8015750 <__multiply+0x134>
 801570e:	6823      	ldr	r3, [r4, #0]
 8015710:	4647      	mov	r7, r8
 8015712:	46a4      	mov	ip, r4
 8015714:	f04f 0a00 	mov.w	sl, #0
 8015718:	f8b7 b000 	ldrh.w	fp, [r7]
 801571c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8015720:	fb09 220b 	mla	r2, r9, fp, r2
 8015724:	4452      	add	r2, sl
 8015726:	b29b      	uxth	r3, r3
 8015728:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801572c:	f84c 3b04 	str.w	r3, [ip], #4
 8015730:	f857 3b04 	ldr.w	r3, [r7], #4
 8015734:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015738:	f8bc 3000 	ldrh.w	r3, [ip]
 801573c:	fb09 330a 	mla	r3, r9, sl, r3
 8015740:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8015744:	42bd      	cmp	r5, r7
 8015746:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801574a:	d8e5      	bhi.n	8015718 <__multiply+0xfc>
 801574c:	9a01      	ldr	r2, [sp, #4]
 801574e:	50a3      	str	r3, [r4, r2]
 8015750:	3404      	adds	r4, #4
 8015752:	e79f      	b.n	8015694 <__multiply+0x78>
 8015754:	3e01      	subs	r6, #1
 8015756:	e7a1      	b.n	801569c <__multiply+0x80>
 8015758:	08018b9c 	.word	0x08018b9c
 801575c:	08018c0d 	.word	0x08018c0d

08015760 <__pow5mult>:
 8015760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015764:	4615      	mov	r5, r2
 8015766:	f012 0203 	ands.w	r2, r2, #3
 801576a:	4607      	mov	r7, r0
 801576c:	460e      	mov	r6, r1
 801576e:	d007      	beq.n	8015780 <__pow5mult+0x20>
 8015770:	4c25      	ldr	r4, [pc, #148]	@ (8015808 <__pow5mult+0xa8>)
 8015772:	3a01      	subs	r2, #1
 8015774:	2300      	movs	r3, #0
 8015776:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801577a:	f7ff fe5d 	bl	8015438 <__multadd>
 801577e:	4606      	mov	r6, r0
 8015780:	10ad      	asrs	r5, r5, #2
 8015782:	d03d      	beq.n	8015800 <__pow5mult+0xa0>
 8015784:	69fc      	ldr	r4, [r7, #28]
 8015786:	b97c      	cbnz	r4, 80157a8 <__pow5mult+0x48>
 8015788:	2010      	movs	r0, #16
 801578a:	f7fc fdb1 	bl	80122f0 <malloc>
 801578e:	4602      	mov	r2, r0
 8015790:	61f8      	str	r0, [r7, #28]
 8015792:	b928      	cbnz	r0, 80157a0 <__pow5mult+0x40>
 8015794:	4b1d      	ldr	r3, [pc, #116]	@ (801580c <__pow5mult+0xac>)
 8015796:	481e      	ldr	r0, [pc, #120]	@ (8015810 <__pow5mult+0xb0>)
 8015798:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801579c:	f7fe fbdc 	bl	8013f58 <__assert_func>
 80157a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80157a4:	6004      	str	r4, [r0, #0]
 80157a6:	60c4      	str	r4, [r0, #12]
 80157a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80157ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80157b0:	b94c      	cbnz	r4, 80157c6 <__pow5mult+0x66>
 80157b2:	f240 2171 	movw	r1, #625	@ 0x271
 80157b6:	4638      	mov	r0, r7
 80157b8:	f7ff ff1a 	bl	80155f0 <__i2b>
 80157bc:	2300      	movs	r3, #0
 80157be:	f8c8 0008 	str.w	r0, [r8, #8]
 80157c2:	4604      	mov	r4, r0
 80157c4:	6003      	str	r3, [r0, #0]
 80157c6:	f04f 0900 	mov.w	r9, #0
 80157ca:	07eb      	lsls	r3, r5, #31
 80157cc:	d50a      	bpl.n	80157e4 <__pow5mult+0x84>
 80157ce:	4631      	mov	r1, r6
 80157d0:	4622      	mov	r2, r4
 80157d2:	4638      	mov	r0, r7
 80157d4:	f7ff ff22 	bl	801561c <__multiply>
 80157d8:	4631      	mov	r1, r6
 80157da:	4680      	mov	r8, r0
 80157dc:	4638      	mov	r0, r7
 80157de:	f7ff fe09 	bl	80153f4 <_Bfree>
 80157e2:	4646      	mov	r6, r8
 80157e4:	106d      	asrs	r5, r5, #1
 80157e6:	d00b      	beq.n	8015800 <__pow5mult+0xa0>
 80157e8:	6820      	ldr	r0, [r4, #0]
 80157ea:	b938      	cbnz	r0, 80157fc <__pow5mult+0x9c>
 80157ec:	4622      	mov	r2, r4
 80157ee:	4621      	mov	r1, r4
 80157f0:	4638      	mov	r0, r7
 80157f2:	f7ff ff13 	bl	801561c <__multiply>
 80157f6:	6020      	str	r0, [r4, #0]
 80157f8:	f8c0 9000 	str.w	r9, [r0]
 80157fc:	4604      	mov	r4, r0
 80157fe:	e7e4      	b.n	80157ca <__pow5mult+0x6a>
 8015800:	4630      	mov	r0, r6
 8015802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015806:	bf00      	nop
 8015808:	08018dcc 	.word	0x08018dcc
 801580c:	08018a82 	.word	0x08018a82
 8015810:	08018c0d 	.word	0x08018c0d

08015814 <__lshift>:
 8015814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015818:	460c      	mov	r4, r1
 801581a:	6849      	ldr	r1, [r1, #4]
 801581c:	6923      	ldr	r3, [r4, #16]
 801581e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015822:	68a3      	ldr	r3, [r4, #8]
 8015824:	4607      	mov	r7, r0
 8015826:	4691      	mov	r9, r2
 8015828:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801582c:	f108 0601 	add.w	r6, r8, #1
 8015830:	42b3      	cmp	r3, r6
 8015832:	db0b      	blt.n	801584c <__lshift+0x38>
 8015834:	4638      	mov	r0, r7
 8015836:	f7ff fd9d 	bl	8015374 <_Balloc>
 801583a:	4605      	mov	r5, r0
 801583c:	b948      	cbnz	r0, 8015852 <__lshift+0x3e>
 801583e:	4602      	mov	r2, r0
 8015840:	4b28      	ldr	r3, [pc, #160]	@ (80158e4 <__lshift+0xd0>)
 8015842:	4829      	ldr	r0, [pc, #164]	@ (80158e8 <__lshift+0xd4>)
 8015844:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015848:	f7fe fb86 	bl	8013f58 <__assert_func>
 801584c:	3101      	adds	r1, #1
 801584e:	005b      	lsls	r3, r3, #1
 8015850:	e7ee      	b.n	8015830 <__lshift+0x1c>
 8015852:	2300      	movs	r3, #0
 8015854:	f100 0114 	add.w	r1, r0, #20
 8015858:	f100 0210 	add.w	r2, r0, #16
 801585c:	4618      	mov	r0, r3
 801585e:	4553      	cmp	r3, sl
 8015860:	db33      	blt.n	80158ca <__lshift+0xb6>
 8015862:	6920      	ldr	r0, [r4, #16]
 8015864:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015868:	f104 0314 	add.w	r3, r4, #20
 801586c:	f019 091f 	ands.w	r9, r9, #31
 8015870:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015874:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015878:	d02b      	beq.n	80158d2 <__lshift+0xbe>
 801587a:	f1c9 0e20 	rsb	lr, r9, #32
 801587e:	468a      	mov	sl, r1
 8015880:	2200      	movs	r2, #0
 8015882:	6818      	ldr	r0, [r3, #0]
 8015884:	fa00 f009 	lsl.w	r0, r0, r9
 8015888:	4310      	orrs	r0, r2
 801588a:	f84a 0b04 	str.w	r0, [sl], #4
 801588e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015892:	459c      	cmp	ip, r3
 8015894:	fa22 f20e 	lsr.w	r2, r2, lr
 8015898:	d8f3      	bhi.n	8015882 <__lshift+0x6e>
 801589a:	ebac 0304 	sub.w	r3, ip, r4
 801589e:	3b15      	subs	r3, #21
 80158a0:	f023 0303 	bic.w	r3, r3, #3
 80158a4:	3304      	adds	r3, #4
 80158a6:	f104 0015 	add.w	r0, r4, #21
 80158aa:	4560      	cmp	r0, ip
 80158ac:	bf88      	it	hi
 80158ae:	2304      	movhi	r3, #4
 80158b0:	50ca      	str	r2, [r1, r3]
 80158b2:	b10a      	cbz	r2, 80158b8 <__lshift+0xa4>
 80158b4:	f108 0602 	add.w	r6, r8, #2
 80158b8:	3e01      	subs	r6, #1
 80158ba:	4638      	mov	r0, r7
 80158bc:	612e      	str	r6, [r5, #16]
 80158be:	4621      	mov	r1, r4
 80158c0:	f7ff fd98 	bl	80153f4 <_Bfree>
 80158c4:	4628      	mov	r0, r5
 80158c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80158ce:	3301      	adds	r3, #1
 80158d0:	e7c5      	b.n	801585e <__lshift+0x4a>
 80158d2:	3904      	subs	r1, #4
 80158d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80158d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80158dc:	459c      	cmp	ip, r3
 80158de:	d8f9      	bhi.n	80158d4 <__lshift+0xc0>
 80158e0:	e7ea      	b.n	80158b8 <__lshift+0xa4>
 80158e2:	bf00      	nop
 80158e4:	08018b9c 	.word	0x08018b9c
 80158e8:	08018c0d 	.word	0x08018c0d

080158ec <__mcmp>:
 80158ec:	690a      	ldr	r2, [r1, #16]
 80158ee:	4603      	mov	r3, r0
 80158f0:	6900      	ldr	r0, [r0, #16]
 80158f2:	1a80      	subs	r0, r0, r2
 80158f4:	b530      	push	{r4, r5, lr}
 80158f6:	d10e      	bne.n	8015916 <__mcmp+0x2a>
 80158f8:	3314      	adds	r3, #20
 80158fa:	3114      	adds	r1, #20
 80158fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015900:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015904:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015908:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801590c:	4295      	cmp	r5, r2
 801590e:	d003      	beq.n	8015918 <__mcmp+0x2c>
 8015910:	d205      	bcs.n	801591e <__mcmp+0x32>
 8015912:	f04f 30ff 	mov.w	r0, #4294967295
 8015916:	bd30      	pop	{r4, r5, pc}
 8015918:	42a3      	cmp	r3, r4
 801591a:	d3f3      	bcc.n	8015904 <__mcmp+0x18>
 801591c:	e7fb      	b.n	8015916 <__mcmp+0x2a>
 801591e:	2001      	movs	r0, #1
 8015920:	e7f9      	b.n	8015916 <__mcmp+0x2a>
	...

08015924 <__mdiff>:
 8015924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015928:	4689      	mov	r9, r1
 801592a:	4606      	mov	r6, r0
 801592c:	4611      	mov	r1, r2
 801592e:	4648      	mov	r0, r9
 8015930:	4614      	mov	r4, r2
 8015932:	f7ff ffdb 	bl	80158ec <__mcmp>
 8015936:	1e05      	subs	r5, r0, #0
 8015938:	d112      	bne.n	8015960 <__mdiff+0x3c>
 801593a:	4629      	mov	r1, r5
 801593c:	4630      	mov	r0, r6
 801593e:	f7ff fd19 	bl	8015374 <_Balloc>
 8015942:	4602      	mov	r2, r0
 8015944:	b928      	cbnz	r0, 8015952 <__mdiff+0x2e>
 8015946:	4b3f      	ldr	r3, [pc, #252]	@ (8015a44 <__mdiff+0x120>)
 8015948:	f240 2137 	movw	r1, #567	@ 0x237
 801594c:	483e      	ldr	r0, [pc, #248]	@ (8015a48 <__mdiff+0x124>)
 801594e:	f7fe fb03 	bl	8013f58 <__assert_func>
 8015952:	2301      	movs	r3, #1
 8015954:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015958:	4610      	mov	r0, r2
 801595a:	b003      	add	sp, #12
 801595c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015960:	bfbc      	itt	lt
 8015962:	464b      	movlt	r3, r9
 8015964:	46a1      	movlt	r9, r4
 8015966:	4630      	mov	r0, r6
 8015968:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801596c:	bfba      	itte	lt
 801596e:	461c      	movlt	r4, r3
 8015970:	2501      	movlt	r5, #1
 8015972:	2500      	movge	r5, #0
 8015974:	f7ff fcfe 	bl	8015374 <_Balloc>
 8015978:	4602      	mov	r2, r0
 801597a:	b918      	cbnz	r0, 8015984 <__mdiff+0x60>
 801597c:	4b31      	ldr	r3, [pc, #196]	@ (8015a44 <__mdiff+0x120>)
 801597e:	f240 2145 	movw	r1, #581	@ 0x245
 8015982:	e7e3      	b.n	801594c <__mdiff+0x28>
 8015984:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015988:	6926      	ldr	r6, [r4, #16]
 801598a:	60c5      	str	r5, [r0, #12]
 801598c:	f109 0310 	add.w	r3, r9, #16
 8015990:	f109 0514 	add.w	r5, r9, #20
 8015994:	f104 0e14 	add.w	lr, r4, #20
 8015998:	f100 0b14 	add.w	fp, r0, #20
 801599c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80159a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80159a4:	9301      	str	r3, [sp, #4]
 80159a6:	46d9      	mov	r9, fp
 80159a8:	f04f 0c00 	mov.w	ip, #0
 80159ac:	9b01      	ldr	r3, [sp, #4]
 80159ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 80159b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80159b6:	9301      	str	r3, [sp, #4]
 80159b8:	fa1f f38a 	uxth.w	r3, sl
 80159bc:	4619      	mov	r1, r3
 80159be:	b283      	uxth	r3, r0
 80159c0:	1acb      	subs	r3, r1, r3
 80159c2:	0c00      	lsrs	r0, r0, #16
 80159c4:	4463      	add	r3, ip
 80159c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80159ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80159ce:	b29b      	uxth	r3, r3
 80159d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80159d4:	4576      	cmp	r6, lr
 80159d6:	f849 3b04 	str.w	r3, [r9], #4
 80159da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80159de:	d8e5      	bhi.n	80159ac <__mdiff+0x88>
 80159e0:	1b33      	subs	r3, r6, r4
 80159e2:	3b15      	subs	r3, #21
 80159e4:	f023 0303 	bic.w	r3, r3, #3
 80159e8:	3415      	adds	r4, #21
 80159ea:	3304      	adds	r3, #4
 80159ec:	42a6      	cmp	r6, r4
 80159ee:	bf38      	it	cc
 80159f0:	2304      	movcc	r3, #4
 80159f2:	441d      	add	r5, r3
 80159f4:	445b      	add	r3, fp
 80159f6:	461e      	mov	r6, r3
 80159f8:	462c      	mov	r4, r5
 80159fa:	4544      	cmp	r4, r8
 80159fc:	d30e      	bcc.n	8015a1c <__mdiff+0xf8>
 80159fe:	f108 0103 	add.w	r1, r8, #3
 8015a02:	1b49      	subs	r1, r1, r5
 8015a04:	f021 0103 	bic.w	r1, r1, #3
 8015a08:	3d03      	subs	r5, #3
 8015a0a:	45a8      	cmp	r8, r5
 8015a0c:	bf38      	it	cc
 8015a0e:	2100      	movcc	r1, #0
 8015a10:	440b      	add	r3, r1
 8015a12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015a16:	b191      	cbz	r1, 8015a3e <__mdiff+0x11a>
 8015a18:	6117      	str	r7, [r2, #16]
 8015a1a:	e79d      	b.n	8015958 <__mdiff+0x34>
 8015a1c:	f854 1b04 	ldr.w	r1, [r4], #4
 8015a20:	46e6      	mov	lr, ip
 8015a22:	0c08      	lsrs	r0, r1, #16
 8015a24:	fa1c fc81 	uxtah	ip, ip, r1
 8015a28:	4471      	add	r1, lr
 8015a2a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8015a2e:	b289      	uxth	r1, r1
 8015a30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015a34:	f846 1b04 	str.w	r1, [r6], #4
 8015a38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015a3c:	e7dd      	b.n	80159fa <__mdiff+0xd6>
 8015a3e:	3f01      	subs	r7, #1
 8015a40:	e7e7      	b.n	8015a12 <__mdiff+0xee>
 8015a42:	bf00      	nop
 8015a44:	08018b9c 	.word	0x08018b9c
 8015a48:	08018c0d 	.word	0x08018c0d

08015a4c <__ulp>:
 8015a4c:	b082      	sub	sp, #8
 8015a4e:	ed8d 0b00 	vstr	d0, [sp]
 8015a52:	9a01      	ldr	r2, [sp, #4]
 8015a54:	4b0f      	ldr	r3, [pc, #60]	@ (8015a94 <__ulp+0x48>)
 8015a56:	4013      	ands	r3, r2
 8015a58:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	dc08      	bgt.n	8015a72 <__ulp+0x26>
 8015a60:	425b      	negs	r3, r3
 8015a62:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8015a66:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015a6a:	da04      	bge.n	8015a76 <__ulp+0x2a>
 8015a6c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8015a70:	4113      	asrs	r3, r2
 8015a72:	2200      	movs	r2, #0
 8015a74:	e008      	b.n	8015a88 <__ulp+0x3c>
 8015a76:	f1a2 0314 	sub.w	r3, r2, #20
 8015a7a:	2b1e      	cmp	r3, #30
 8015a7c:	bfda      	itte	le
 8015a7e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8015a82:	40da      	lsrle	r2, r3
 8015a84:	2201      	movgt	r2, #1
 8015a86:	2300      	movs	r3, #0
 8015a88:	4619      	mov	r1, r3
 8015a8a:	4610      	mov	r0, r2
 8015a8c:	ec41 0b10 	vmov	d0, r0, r1
 8015a90:	b002      	add	sp, #8
 8015a92:	4770      	bx	lr
 8015a94:	7ff00000 	.word	0x7ff00000

08015a98 <__b2d>:
 8015a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a9c:	6906      	ldr	r6, [r0, #16]
 8015a9e:	f100 0814 	add.w	r8, r0, #20
 8015aa2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8015aa6:	1f37      	subs	r7, r6, #4
 8015aa8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015aac:	4610      	mov	r0, r2
 8015aae:	f7ff fd53 	bl	8015558 <__hi0bits>
 8015ab2:	f1c0 0320 	rsb	r3, r0, #32
 8015ab6:	280a      	cmp	r0, #10
 8015ab8:	600b      	str	r3, [r1, #0]
 8015aba:	491b      	ldr	r1, [pc, #108]	@ (8015b28 <__b2d+0x90>)
 8015abc:	dc15      	bgt.n	8015aea <__b2d+0x52>
 8015abe:	f1c0 0c0b 	rsb	ip, r0, #11
 8015ac2:	fa22 f30c 	lsr.w	r3, r2, ip
 8015ac6:	45b8      	cmp	r8, r7
 8015ac8:	ea43 0501 	orr.w	r5, r3, r1
 8015acc:	bf34      	ite	cc
 8015ace:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015ad2:	2300      	movcs	r3, #0
 8015ad4:	3015      	adds	r0, #21
 8015ad6:	fa02 f000 	lsl.w	r0, r2, r0
 8015ada:	fa23 f30c 	lsr.w	r3, r3, ip
 8015ade:	4303      	orrs	r3, r0
 8015ae0:	461c      	mov	r4, r3
 8015ae2:	ec45 4b10 	vmov	d0, r4, r5
 8015ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015aea:	45b8      	cmp	r8, r7
 8015aec:	bf3a      	itte	cc
 8015aee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015af2:	f1a6 0708 	subcc.w	r7, r6, #8
 8015af6:	2300      	movcs	r3, #0
 8015af8:	380b      	subs	r0, #11
 8015afa:	d012      	beq.n	8015b22 <__b2d+0x8a>
 8015afc:	f1c0 0120 	rsb	r1, r0, #32
 8015b00:	fa23 f401 	lsr.w	r4, r3, r1
 8015b04:	4082      	lsls	r2, r0
 8015b06:	4322      	orrs	r2, r4
 8015b08:	4547      	cmp	r7, r8
 8015b0a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8015b0e:	bf8c      	ite	hi
 8015b10:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8015b14:	2200      	movls	r2, #0
 8015b16:	4083      	lsls	r3, r0
 8015b18:	40ca      	lsrs	r2, r1
 8015b1a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8015b1e:	4313      	orrs	r3, r2
 8015b20:	e7de      	b.n	8015ae0 <__b2d+0x48>
 8015b22:	ea42 0501 	orr.w	r5, r2, r1
 8015b26:	e7db      	b.n	8015ae0 <__b2d+0x48>
 8015b28:	3ff00000 	.word	0x3ff00000

08015b2c <__d2b>:
 8015b2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015b30:	460f      	mov	r7, r1
 8015b32:	2101      	movs	r1, #1
 8015b34:	ec59 8b10 	vmov	r8, r9, d0
 8015b38:	4616      	mov	r6, r2
 8015b3a:	f7ff fc1b 	bl	8015374 <_Balloc>
 8015b3e:	4604      	mov	r4, r0
 8015b40:	b930      	cbnz	r0, 8015b50 <__d2b+0x24>
 8015b42:	4602      	mov	r2, r0
 8015b44:	4b23      	ldr	r3, [pc, #140]	@ (8015bd4 <__d2b+0xa8>)
 8015b46:	4824      	ldr	r0, [pc, #144]	@ (8015bd8 <__d2b+0xac>)
 8015b48:	f240 310f 	movw	r1, #783	@ 0x30f
 8015b4c:	f7fe fa04 	bl	8013f58 <__assert_func>
 8015b50:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015b54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015b58:	b10d      	cbz	r5, 8015b5e <__d2b+0x32>
 8015b5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015b5e:	9301      	str	r3, [sp, #4]
 8015b60:	f1b8 0300 	subs.w	r3, r8, #0
 8015b64:	d023      	beq.n	8015bae <__d2b+0x82>
 8015b66:	4668      	mov	r0, sp
 8015b68:	9300      	str	r3, [sp, #0]
 8015b6a:	f7ff fd14 	bl	8015596 <__lo0bits>
 8015b6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015b72:	b1d0      	cbz	r0, 8015baa <__d2b+0x7e>
 8015b74:	f1c0 0320 	rsb	r3, r0, #32
 8015b78:	fa02 f303 	lsl.w	r3, r2, r3
 8015b7c:	430b      	orrs	r3, r1
 8015b7e:	40c2      	lsrs	r2, r0
 8015b80:	6163      	str	r3, [r4, #20]
 8015b82:	9201      	str	r2, [sp, #4]
 8015b84:	9b01      	ldr	r3, [sp, #4]
 8015b86:	61a3      	str	r3, [r4, #24]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	bf0c      	ite	eq
 8015b8c:	2201      	moveq	r2, #1
 8015b8e:	2202      	movne	r2, #2
 8015b90:	6122      	str	r2, [r4, #16]
 8015b92:	b1a5      	cbz	r5, 8015bbe <__d2b+0x92>
 8015b94:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015b98:	4405      	add	r5, r0
 8015b9a:	603d      	str	r5, [r7, #0]
 8015b9c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015ba0:	6030      	str	r0, [r6, #0]
 8015ba2:	4620      	mov	r0, r4
 8015ba4:	b003      	add	sp, #12
 8015ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015baa:	6161      	str	r1, [r4, #20]
 8015bac:	e7ea      	b.n	8015b84 <__d2b+0x58>
 8015bae:	a801      	add	r0, sp, #4
 8015bb0:	f7ff fcf1 	bl	8015596 <__lo0bits>
 8015bb4:	9b01      	ldr	r3, [sp, #4]
 8015bb6:	6163      	str	r3, [r4, #20]
 8015bb8:	3020      	adds	r0, #32
 8015bba:	2201      	movs	r2, #1
 8015bbc:	e7e8      	b.n	8015b90 <__d2b+0x64>
 8015bbe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015bc2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015bc6:	6038      	str	r0, [r7, #0]
 8015bc8:	6918      	ldr	r0, [r3, #16]
 8015bca:	f7ff fcc5 	bl	8015558 <__hi0bits>
 8015bce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015bd2:	e7e5      	b.n	8015ba0 <__d2b+0x74>
 8015bd4:	08018b9c 	.word	0x08018b9c
 8015bd8:	08018c0d 	.word	0x08018c0d

08015bdc <__ratio>:
 8015bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015be0:	b085      	sub	sp, #20
 8015be2:	e9cd 1000 	strd	r1, r0, [sp]
 8015be6:	a902      	add	r1, sp, #8
 8015be8:	f7ff ff56 	bl	8015a98 <__b2d>
 8015bec:	9800      	ldr	r0, [sp, #0]
 8015bee:	a903      	add	r1, sp, #12
 8015bf0:	ec55 4b10 	vmov	r4, r5, d0
 8015bf4:	f7ff ff50 	bl	8015a98 <__b2d>
 8015bf8:	9b01      	ldr	r3, [sp, #4]
 8015bfa:	6919      	ldr	r1, [r3, #16]
 8015bfc:	9b00      	ldr	r3, [sp, #0]
 8015bfe:	691b      	ldr	r3, [r3, #16]
 8015c00:	1ac9      	subs	r1, r1, r3
 8015c02:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8015c06:	1a9b      	subs	r3, r3, r2
 8015c08:	ec5b ab10 	vmov	sl, fp, d0
 8015c0c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	bfce      	itee	gt
 8015c14:	462a      	movgt	r2, r5
 8015c16:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015c1a:	465a      	movle	r2, fp
 8015c1c:	462f      	mov	r7, r5
 8015c1e:	46d9      	mov	r9, fp
 8015c20:	bfcc      	ite	gt
 8015c22:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015c26:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8015c2a:	464b      	mov	r3, r9
 8015c2c:	4652      	mov	r2, sl
 8015c2e:	4620      	mov	r0, r4
 8015c30:	4639      	mov	r1, r7
 8015c32:	f7ea fe1b 	bl	800086c <__aeabi_ddiv>
 8015c36:	ec41 0b10 	vmov	d0, r0, r1
 8015c3a:	b005      	add	sp, #20
 8015c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015c40 <__copybits>:
 8015c40:	3901      	subs	r1, #1
 8015c42:	b570      	push	{r4, r5, r6, lr}
 8015c44:	1149      	asrs	r1, r1, #5
 8015c46:	6914      	ldr	r4, [r2, #16]
 8015c48:	3101      	adds	r1, #1
 8015c4a:	f102 0314 	add.w	r3, r2, #20
 8015c4e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015c52:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015c56:	1f05      	subs	r5, r0, #4
 8015c58:	42a3      	cmp	r3, r4
 8015c5a:	d30c      	bcc.n	8015c76 <__copybits+0x36>
 8015c5c:	1aa3      	subs	r3, r4, r2
 8015c5e:	3b11      	subs	r3, #17
 8015c60:	f023 0303 	bic.w	r3, r3, #3
 8015c64:	3211      	adds	r2, #17
 8015c66:	42a2      	cmp	r2, r4
 8015c68:	bf88      	it	hi
 8015c6a:	2300      	movhi	r3, #0
 8015c6c:	4418      	add	r0, r3
 8015c6e:	2300      	movs	r3, #0
 8015c70:	4288      	cmp	r0, r1
 8015c72:	d305      	bcc.n	8015c80 <__copybits+0x40>
 8015c74:	bd70      	pop	{r4, r5, r6, pc}
 8015c76:	f853 6b04 	ldr.w	r6, [r3], #4
 8015c7a:	f845 6f04 	str.w	r6, [r5, #4]!
 8015c7e:	e7eb      	b.n	8015c58 <__copybits+0x18>
 8015c80:	f840 3b04 	str.w	r3, [r0], #4
 8015c84:	e7f4      	b.n	8015c70 <__copybits+0x30>

08015c86 <__any_on>:
 8015c86:	f100 0214 	add.w	r2, r0, #20
 8015c8a:	6900      	ldr	r0, [r0, #16]
 8015c8c:	114b      	asrs	r3, r1, #5
 8015c8e:	4298      	cmp	r0, r3
 8015c90:	b510      	push	{r4, lr}
 8015c92:	db11      	blt.n	8015cb8 <__any_on+0x32>
 8015c94:	dd0a      	ble.n	8015cac <__any_on+0x26>
 8015c96:	f011 011f 	ands.w	r1, r1, #31
 8015c9a:	d007      	beq.n	8015cac <__any_on+0x26>
 8015c9c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015ca0:	fa24 f001 	lsr.w	r0, r4, r1
 8015ca4:	fa00 f101 	lsl.w	r1, r0, r1
 8015ca8:	428c      	cmp	r4, r1
 8015caa:	d10b      	bne.n	8015cc4 <__any_on+0x3e>
 8015cac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015cb0:	4293      	cmp	r3, r2
 8015cb2:	d803      	bhi.n	8015cbc <__any_on+0x36>
 8015cb4:	2000      	movs	r0, #0
 8015cb6:	bd10      	pop	{r4, pc}
 8015cb8:	4603      	mov	r3, r0
 8015cba:	e7f7      	b.n	8015cac <__any_on+0x26>
 8015cbc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015cc0:	2900      	cmp	r1, #0
 8015cc2:	d0f5      	beq.n	8015cb0 <__any_on+0x2a>
 8015cc4:	2001      	movs	r0, #1
 8015cc6:	e7f6      	b.n	8015cb6 <__any_on+0x30>

08015cc8 <__ascii_wctomb>:
 8015cc8:	4603      	mov	r3, r0
 8015cca:	4608      	mov	r0, r1
 8015ccc:	b141      	cbz	r1, 8015ce0 <__ascii_wctomb+0x18>
 8015cce:	2aff      	cmp	r2, #255	@ 0xff
 8015cd0:	d904      	bls.n	8015cdc <__ascii_wctomb+0x14>
 8015cd2:	228a      	movs	r2, #138	@ 0x8a
 8015cd4:	601a      	str	r2, [r3, #0]
 8015cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8015cda:	4770      	bx	lr
 8015cdc:	700a      	strb	r2, [r1, #0]
 8015cde:	2001      	movs	r0, #1
 8015ce0:	4770      	bx	lr
	...

08015ce4 <__sflush_r>:
 8015ce4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cec:	0716      	lsls	r6, r2, #28
 8015cee:	4605      	mov	r5, r0
 8015cf0:	460c      	mov	r4, r1
 8015cf2:	d454      	bmi.n	8015d9e <__sflush_r+0xba>
 8015cf4:	684b      	ldr	r3, [r1, #4]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	dc02      	bgt.n	8015d00 <__sflush_r+0x1c>
 8015cfa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	dd48      	ble.n	8015d92 <__sflush_r+0xae>
 8015d00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015d02:	2e00      	cmp	r6, #0
 8015d04:	d045      	beq.n	8015d92 <__sflush_r+0xae>
 8015d06:	2300      	movs	r3, #0
 8015d08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015d0c:	682f      	ldr	r7, [r5, #0]
 8015d0e:	6a21      	ldr	r1, [r4, #32]
 8015d10:	602b      	str	r3, [r5, #0]
 8015d12:	d030      	beq.n	8015d76 <__sflush_r+0x92>
 8015d14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015d16:	89a3      	ldrh	r3, [r4, #12]
 8015d18:	0759      	lsls	r1, r3, #29
 8015d1a:	d505      	bpl.n	8015d28 <__sflush_r+0x44>
 8015d1c:	6863      	ldr	r3, [r4, #4]
 8015d1e:	1ad2      	subs	r2, r2, r3
 8015d20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015d22:	b10b      	cbz	r3, 8015d28 <__sflush_r+0x44>
 8015d24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015d26:	1ad2      	subs	r2, r2, r3
 8015d28:	2300      	movs	r3, #0
 8015d2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015d2c:	6a21      	ldr	r1, [r4, #32]
 8015d2e:	4628      	mov	r0, r5
 8015d30:	47b0      	blx	r6
 8015d32:	1c43      	adds	r3, r0, #1
 8015d34:	89a3      	ldrh	r3, [r4, #12]
 8015d36:	d106      	bne.n	8015d46 <__sflush_r+0x62>
 8015d38:	6829      	ldr	r1, [r5, #0]
 8015d3a:	291d      	cmp	r1, #29
 8015d3c:	d82b      	bhi.n	8015d96 <__sflush_r+0xb2>
 8015d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8015de8 <__sflush_r+0x104>)
 8015d40:	40ca      	lsrs	r2, r1
 8015d42:	07d6      	lsls	r6, r2, #31
 8015d44:	d527      	bpl.n	8015d96 <__sflush_r+0xb2>
 8015d46:	2200      	movs	r2, #0
 8015d48:	6062      	str	r2, [r4, #4]
 8015d4a:	04d9      	lsls	r1, r3, #19
 8015d4c:	6922      	ldr	r2, [r4, #16]
 8015d4e:	6022      	str	r2, [r4, #0]
 8015d50:	d504      	bpl.n	8015d5c <__sflush_r+0x78>
 8015d52:	1c42      	adds	r2, r0, #1
 8015d54:	d101      	bne.n	8015d5a <__sflush_r+0x76>
 8015d56:	682b      	ldr	r3, [r5, #0]
 8015d58:	b903      	cbnz	r3, 8015d5c <__sflush_r+0x78>
 8015d5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8015d5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015d5e:	602f      	str	r7, [r5, #0]
 8015d60:	b1b9      	cbz	r1, 8015d92 <__sflush_r+0xae>
 8015d62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015d66:	4299      	cmp	r1, r3
 8015d68:	d002      	beq.n	8015d70 <__sflush_r+0x8c>
 8015d6a:	4628      	mov	r0, r5
 8015d6c:	f7fe ff6c 	bl	8014c48 <_free_r>
 8015d70:	2300      	movs	r3, #0
 8015d72:	6363      	str	r3, [r4, #52]	@ 0x34
 8015d74:	e00d      	b.n	8015d92 <__sflush_r+0xae>
 8015d76:	2301      	movs	r3, #1
 8015d78:	4628      	mov	r0, r5
 8015d7a:	47b0      	blx	r6
 8015d7c:	4602      	mov	r2, r0
 8015d7e:	1c50      	adds	r0, r2, #1
 8015d80:	d1c9      	bne.n	8015d16 <__sflush_r+0x32>
 8015d82:	682b      	ldr	r3, [r5, #0]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d0c6      	beq.n	8015d16 <__sflush_r+0x32>
 8015d88:	2b1d      	cmp	r3, #29
 8015d8a:	d001      	beq.n	8015d90 <__sflush_r+0xac>
 8015d8c:	2b16      	cmp	r3, #22
 8015d8e:	d11e      	bne.n	8015dce <__sflush_r+0xea>
 8015d90:	602f      	str	r7, [r5, #0]
 8015d92:	2000      	movs	r0, #0
 8015d94:	e022      	b.n	8015ddc <__sflush_r+0xf8>
 8015d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015d9a:	b21b      	sxth	r3, r3
 8015d9c:	e01b      	b.n	8015dd6 <__sflush_r+0xf2>
 8015d9e:	690f      	ldr	r7, [r1, #16]
 8015da0:	2f00      	cmp	r7, #0
 8015da2:	d0f6      	beq.n	8015d92 <__sflush_r+0xae>
 8015da4:	0793      	lsls	r3, r2, #30
 8015da6:	680e      	ldr	r6, [r1, #0]
 8015da8:	bf08      	it	eq
 8015daa:	694b      	ldreq	r3, [r1, #20]
 8015dac:	600f      	str	r7, [r1, #0]
 8015dae:	bf18      	it	ne
 8015db0:	2300      	movne	r3, #0
 8015db2:	eba6 0807 	sub.w	r8, r6, r7
 8015db6:	608b      	str	r3, [r1, #8]
 8015db8:	f1b8 0f00 	cmp.w	r8, #0
 8015dbc:	dde9      	ble.n	8015d92 <__sflush_r+0xae>
 8015dbe:	6a21      	ldr	r1, [r4, #32]
 8015dc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015dc2:	4643      	mov	r3, r8
 8015dc4:	463a      	mov	r2, r7
 8015dc6:	4628      	mov	r0, r5
 8015dc8:	47b0      	blx	r6
 8015dca:	2800      	cmp	r0, #0
 8015dcc:	dc08      	bgt.n	8015de0 <__sflush_r+0xfc>
 8015dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015dd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015dd6:	81a3      	strh	r3, [r4, #12]
 8015dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8015ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015de0:	4407      	add	r7, r0
 8015de2:	eba8 0800 	sub.w	r8, r8, r0
 8015de6:	e7e7      	b.n	8015db8 <__sflush_r+0xd4>
 8015de8:	20400001 	.word	0x20400001

08015dec <_fflush_r>:
 8015dec:	b538      	push	{r3, r4, r5, lr}
 8015dee:	690b      	ldr	r3, [r1, #16]
 8015df0:	4605      	mov	r5, r0
 8015df2:	460c      	mov	r4, r1
 8015df4:	b913      	cbnz	r3, 8015dfc <_fflush_r+0x10>
 8015df6:	2500      	movs	r5, #0
 8015df8:	4628      	mov	r0, r5
 8015dfa:	bd38      	pop	{r3, r4, r5, pc}
 8015dfc:	b118      	cbz	r0, 8015e06 <_fflush_r+0x1a>
 8015dfe:	6a03      	ldr	r3, [r0, #32]
 8015e00:	b90b      	cbnz	r3, 8015e06 <_fflush_r+0x1a>
 8015e02:	f7fd fea7 	bl	8013b54 <__sinit>
 8015e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d0f3      	beq.n	8015df6 <_fflush_r+0xa>
 8015e0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015e10:	07d0      	lsls	r0, r2, #31
 8015e12:	d404      	bmi.n	8015e1e <_fflush_r+0x32>
 8015e14:	0599      	lsls	r1, r3, #22
 8015e16:	d402      	bmi.n	8015e1e <_fflush_r+0x32>
 8015e18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015e1a:	f7fe f87a 	bl	8013f12 <__retarget_lock_acquire_recursive>
 8015e1e:	4628      	mov	r0, r5
 8015e20:	4621      	mov	r1, r4
 8015e22:	f7ff ff5f 	bl	8015ce4 <__sflush_r>
 8015e26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015e28:	07da      	lsls	r2, r3, #31
 8015e2a:	4605      	mov	r5, r0
 8015e2c:	d4e4      	bmi.n	8015df8 <_fflush_r+0xc>
 8015e2e:	89a3      	ldrh	r3, [r4, #12]
 8015e30:	059b      	lsls	r3, r3, #22
 8015e32:	d4e1      	bmi.n	8015df8 <_fflush_r+0xc>
 8015e34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015e36:	f7fe f86d 	bl	8013f14 <__retarget_lock_release_recursive>
 8015e3a:	e7dd      	b.n	8015df8 <_fflush_r+0xc>

08015e3c <fiprintf>:
 8015e3c:	b40e      	push	{r1, r2, r3}
 8015e3e:	b503      	push	{r0, r1, lr}
 8015e40:	4601      	mov	r1, r0
 8015e42:	ab03      	add	r3, sp, #12
 8015e44:	4805      	ldr	r0, [pc, #20]	@ (8015e5c <fiprintf+0x20>)
 8015e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e4a:	6800      	ldr	r0, [r0, #0]
 8015e4c:	9301      	str	r3, [sp, #4]
 8015e4e:	f000 f84b 	bl	8015ee8 <_vfiprintf_r>
 8015e52:	b002      	add	sp, #8
 8015e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8015e58:	b003      	add	sp, #12
 8015e5a:	4770      	bx	lr
 8015e5c:	2000037c 	.word	0x2000037c

08015e60 <abort>:
 8015e60:	b508      	push	{r3, lr}
 8015e62:	2006      	movs	r0, #6
 8015e64:	f000 fa14 	bl	8016290 <raise>
 8015e68:	2001      	movs	r0, #1
 8015e6a:	f7ee f947 	bl	80040fc <_exit>

08015e6e <_calloc_r>:
 8015e6e:	b570      	push	{r4, r5, r6, lr}
 8015e70:	fba1 5402 	umull	r5, r4, r1, r2
 8015e74:	b934      	cbnz	r4, 8015e84 <_calloc_r+0x16>
 8015e76:	4629      	mov	r1, r5
 8015e78:	f7fc fa6c 	bl	8012354 <_malloc_r>
 8015e7c:	4606      	mov	r6, r0
 8015e7e:	b928      	cbnz	r0, 8015e8c <_calloc_r+0x1e>
 8015e80:	4630      	mov	r0, r6
 8015e82:	bd70      	pop	{r4, r5, r6, pc}
 8015e84:	220c      	movs	r2, #12
 8015e86:	6002      	str	r2, [r0, #0]
 8015e88:	2600      	movs	r6, #0
 8015e8a:	e7f9      	b.n	8015e80 <_calloc_r+0x12>
 8015e8c:	462a      	mov	r2, r5
 8015e8e:	4621      	mov	r1, r4
 8015e90:	f7fd fed9 	bl	8013c46 <memset>
 8015e94:	e7f4      	b.n	8015e80 <_calloc_r+0x12>

08015e96 <__sfputc_r>:
 8015e96:	6893      	ldr	r3, [r2, #8]
 8015e98:	3b01      	subs	r3, #1
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	b410      	push	{r4}
 8015e9e:	6093      	str	r3, [r2, #8]
 8015ea0:	da08      	bge.n	8015eb4 <__sfputc_r+0x1e>
 8015ea2:	6994      	ldr	r4, [r2, #24]
 8015ea4:	42a3      	cmp	r3, r4
 8015ea6:	db01      	blt.n	8015eac <__sfputc_r+0x16>
 8015ea8:	290a      	cmp	r1, #10
 8015eaa:	d103      	bne.n	8015eb4 <__sfputc_r+0x1e>
 8015eac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015eb0:	f000 b932 	b.w	8016118 <__swbuf_r>
 8015eb4:	6813      	ldr	r3, [r2, #0]
 8015eb6:	1c58      	adds	r0, r3, #1
 8015eb8:	6010      	str	r0, [r2, #0]
 8015eba:	7019      	strb	r1, [r3, #0]
 8015ebc:	4608      	mov	r0, r1
 8015ebe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ec2:	4770      	bx	lr

08015ec4 <__sfputs_r>:
 8015ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ec6:	4606      	mov	r6, r0
 8015ec8:	460f      	mov	r7, r1
 8015eca:	4614      	mov	r4, r2
 8015ecc:	18d5      	adds	r5, r2, r3
 8015ece:	42ac      	cmp	r4, r5
 8015ed0:	d101      	bne.n	8015ed6 <__sfputs_r+0x12>
 8015ed2:	2000      	movs	r0, #0
 8015ed4:	e007      	b.n	8015ee6 <__sfputs_r+0x22>
 8015ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015eda:	463a      	mov	r2, r7
 8015edc:	4630      	mov	r0, r6
 8015ede:	f7ff ffda 	bl	8015e96 <__sfputc_r>
 8015ee2:	1c43      	adds	r3, r0, #1
 8015ee4:	d1f3      	bne.n	8015ece <__sfputs_r+0xa>
 8015ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015ee8 <_vfiprintf_r>:
 8015ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015eec:	460d      	mov	r5, r1
 8015eee:	b09d      	sub	sp, #116	@ 0x74
 8015ef0:	4614      	mov	r4, r2
 8015ef2:	4698      	mov	r8, r3
 8015ef4:	4606      	mov	r6, r0
 8015ef6:	b118      	cbz	r0, 8015f00 <_vfiprintf_r+0x18>
 8015ef8:	6a03      	ldr	r3, [r0, #32]
 8015efa:	b90b      	cbnz	r3, 8015f00 <_vfiprintf_r+0x18>
 8015efc:	f7fd fe2a 	bl	8013b54 <__sinit>
 8015f00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015f02:	07d9      	lsls	r1, r3, #31
 8015f04:	d405      	bmi.n	8015f12 <_vfiprintf_r+0x2a>
 8015f06:	89ab      	ldrh	r3, [r5, #12]
 8015f08:	059a      	lsls	r2, r3, #22
 8015f0a:	d402      	bmi.n	8015f12 <_vfiprintf_r+0x2a>
 8015f0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015f0e:	f7fe f800 	bl	8013f12 <__retarget_lock_acquire_recursive>
 8015f12:	89ab      	ldrh	r3, [r5, #12]
 8015f14:	071b      	lsls	r3, r3, #28
 8015f16:	d501      	bpl.n	8015f1c <_vfiprintf_r+0x34>
 8015f18:	692b      	ldr	r3, [r5, #16]
 8015f1a:	b99b      	cbnz	r3, 8015f44 <_vfiprintf_r+0x5c>
 8015f1c:	4629      	mov	r1, r5
 8015f1e:	4630      	mov	r0, r6
 8015f20:	f000 f938 	bl	8016194 <__swsetup_r>
 8015f24:	b170      	cbz	r0, 8015f44 <_vfiprintf_r+0x5c>
 8015f26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015f28:	07dc      	lsls	r4, r3, #31
 8015f2a:	d504      	bpl.n	8015f36 <_vfiprintf_r+0x4e>
 8015f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8015f30:	b01d      	add	sp, #116	@ 0x74
 8015f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f36:	89ab      	ldrh	r3, [r5, #12]
 8015f38:	0598      	lsls	r0, r3, #22
 8015f3a:	d4f7      	bmi.n	8015f2c <_vfiprintf_r+0x44>
 8015f3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015f3e:	f7fd ffe9 	bl	8013f14 <__retarget_lock_release_recursive>
 8015f42:	e7f3      	b.n	8015f2c <_vfiprintf_r+0x44>
 8015f44:	2300      	movs	r3, #0
 8015f46:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f48:	2320      	movs	r3, #32
 8015f4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015f4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015f52:	2330      	movs	r3, #48	@ 0x30
 8015f54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016104 <_vfiprintf_r+0x21c>
 8015f58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015f5c:	f04f 0901 	mov.w	r9, #1
 8015f60:	4623      	mov	r3, r4
 8015f62:	469a      	mov	sl, r3
 8015f64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f68:	b10a      	cbz	r2, 8015f6e <_vfiprintf_r+0x86>
 8015f6a:	2a25      	cmp	r2, #37	@ 0x25
 8015f6c:	d1f9      	bne.n	8015f62 <_vfiprintf_r+0x7a>
 8015f6e:	ebba 0b04 	subs.w	fp, sl, r4
 8015f72:	d00b      	beq.n	8015f8c <_vfiprintf_r+0xa4>
 8015f74:	465b      	mov	r3, fp
 8015f76:	4622      	mov	r2, r4
 8015f78:	4629      	mov	r1, r5
 8015f7a:	4630      	mov	r0, r6
 8015f7c:	f7ff ffa2 	bl	8015ec4 <__sfputs_r>
 8015f80:	3001      	adds	r0, #1
 8015f82:	f000 80a7 	beq.w	80160d4 <_vfiprintf_r+0x1ec>
 8015f86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015f88:	445a      	add	r2, fp
 8015f8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8015f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	f000 809f 	beq.w	80160d4 <_vfiprintf_r+0x1ec>
 8015f96:	2300      	movs	r3, #0
 8015f98:	f04f 32ff 	mov.w	r2, #4294967295
 8015f9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015fa0:	f10a 0a01 	add.w	sl, sl, #1
 8015fa4:	9304      	str	r3, [sp, #16]
 8015fa6:	9307      	str	r3, [sp, #28]
 8015fa8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015fac:	931a      	str	r3, [sp, #104]	@ 0x68
 8015fae:	4654      	mov	r4, sl
 8015fb0:	2205      	movs	r2, #5
 8015fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fb6:	4853      	ldr	r0, [pc, #332]	@ (8016104 <_vfiprintf_r+0x21c>)
 8015fb8:	f7ea f91a 	bl	80001f0 <memchr>
 8015fbc:	9a04      	ldr	r2, [sp, #16]
 8015fbe:	b9d8      	cbnz	r0, 8015ff8 <_vfiprintf_r+0x110>
 8015fc0:	06d1      	lsls	r1, r2, #27
 8015fc2:	bf44      	itt	mi
 8015fc4:	2320      	movmi	r3, #32
 8015fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015fca:	0713      	lsls	r3, r2, #28
 8015fcc:	bf44      	itt	mi
 8015fce:	232b      	movmi	r3, #43	@ 0x2b
 8015fd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8015fd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8015fda:	d015      	beq.n	8016008 <_vfiprintf_r+0x120>
 8015fdc:	9a07      	ldr	r2, [sp, #28]
 8015fde:	4654      	mov	r4, sl
 8015fe0:	2000      	movs	r0, #0
 8015fe2:	f04f 0c0a 	mov.w	ip, #10
 8015fe6:	4621      	mov	r1, r4
 8015fe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015fec:	3b30      	subs	r3, #48	@ 0x30
 8015fee:	2b09      	cmp	r3, #9
 8015ff0:	d94b      	bls.n	801608a <_vfiprintf_r+0x1a2>
 8015ff2:	b1b0      	cbz	r0, 8016022 <_vfiprintf_r+0x13a>
 8015ff4:	9207      	str	r2, [sp, #28]
 8015ff6:	e014      	b.n	8016022 <_vfiprintf_r+0x13a>
 8015ff8:	eba0 0308 	sub.w	r3, r0, r8
 8015ffc:	fa09 f303 	lsl.w	r3, r9, r3
 8016000:	4313      	orrs	r3, r2
 8016002:	9304      	str	r3, [sp, #16]
 8016004:	46a2      	mov	sl, r4
 8016006:	e7d2      	b.n	8015fae <_vfiprintf_r+0xc6>
 8016008:	9b03      	ldr	r3, [sp, #12]
 801600a:	1d19      	adds	r1, r3, #4
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	9103      	str	r1, [sp, #12]
 8016010:	2b00      	cmp	r3, #0
 8016012:	bfbb      	ittet	lt
 8016014:	425b      	neglt	r3, r3
 8016016:	f042 0202 	orrlt.w	r2, r2, #2
 801601a:	9307      	strge	r3, [sp, #28]
 801601c:	9307      	strlt	r3, [sp, #28]
 801601e:	bfb8      	it	lt
 8016020:	9204      	strlt	r2, [sp, #16]
 8016022:	7823      	ldrb	r3, [r4, #0]
 8016024:	2b2e      	cmp	r3, #46	@ 0x2e
 8016026:	d10a      	bne.n	801603e <_vfiprintf_r+0x156>
 8016028:	7863      	ldrb	r3, [r4, #1]
 801602a:	2b2a      	cmp	r3, #42	@ 0x2a
 801602c:	d132      	bne.n	8016094 <_vfiprintf_r+0x1ac>
 801602e:	9b03      	ldr	r3, [sp, #12]
 8016030:	1d1a      	adds	r2, r3, #4
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	9203      	str	r2, [sp, #12]
 8016036:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801603a:	3402      	adds	r4, #2
 801603c:	9305      	str	r3, [sp, #20]
 801603e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016114 <_vfiprintf_r+0x22c>
 8016042:	7821      	ldrb	r1, [r4, #0]
 8016044:	2203      	movs	r2, #3
 8016046:	4650      	mov	r0, sl
 8016048:	f7ea f8d2 	bl	80001f0 <memchr>
 801604c:	b138      	cbz	r0, 801605e <_vfiprintf_r+0x176>
 801604e:	9b04      	ldr	r3, [sp, #16]
 8016050:	eba0 000a 	sub.w	r0, r0, sl
 8016054:	2240      	movs	r2, #64	@ 0x40
 8016056:	4082      	lsls	r2, r0
 8016058:	4313      	orrs	r3, r2
 801605a:	3401      	adds	r4, #1
 801605c:	9304      	str	r3, [sp, #16]
 801605e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016062:	4829      	ldr	r0, [pc, #164]	@ (8016108 <_vfiprintf_r+0x220>)
 8016064:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016068:	2206      	movs	r2, #6
 801606a:	f7ea f8c1 	bl	80001f0 <memchr>
 801606e:	2800      	cmp	r0, #0
 8016070:	d03f      	beq.n	80160f2 <_vfiprintf_r+0x20a>
 8016072:	4b26      	ldr	r3, [pc, #152]	@ (801610c <_vfiprintf_r+0x224>)
 8016074:	bb1b      	cbnz	r3, 80160be <_vfiprintf_r+0x1d6>
 8016076:	9b03      	ldr	r3, [sp, #12]
 8016078:	3307      	adds	r3, #7
 801607a:	f023 0307 	bic.w	r3, r3, #7
 801607e:	3308      	adds	r3, #8
 8016080:	9303      	str	r3, [sp, #12]
 8016082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016084:	443b      	add	r3, r7
 8016086:	9309      	str	r3, [sp, #36]	@ 0x24
 8016088:	e76a      	b.n	8015f60 <_vfiprintf_r+0x78>
 801608a:	fb0c 3202 	mla	r2, ip, r2, r3
 801608e:	460c      	mov	r4, r1
 8016090:	2001      	movs	r0, #1
 8016092:	e7a8      	b.n	8015fe6 <_vfiprintf_r+0xfe>
 8016094:	2300      	movs	r3, #0
 8016096:	3401      	adds	r4, #1
 8016098:	9305      	str	r3, [sp, #20]
 801609a:	4619      	mov	r1, r3
 801609c:	f04f 0c0a 	mov.w	ip, #10
 80160a0:	4620      	mov	r0, r4
 80160a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80160a6:	3a30      	subs	r2, #48	@ 0x30
 80160a8:	2a09      	cmp	r2, #9
 80160aa:	d903      	bls.n	80160b4 <_vfiprintf_r+0x1cc>
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d0c6      	beq.n	801603e <_vfiprintf_r+0x156>
 80160b0:	9105      	str	r1, [sp, #20]
 80160b2:	e7c4      	b.n	801603e <_vfiprintf_r+0x156>
 80160b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80160b8:	4604      	mov	r4, r0
 80160ba:	2301      	movs	r3, #1
 80160bc:	e7f0      	b.n	80160a0 <_vfiprintf_r+0x1b8>
 80160be:	ab03      	add	r3, sp, #12
 80160c0:	9300      	str	r3, [sp, #0]
 80160c2:	462a      	mov	r2, r5
 80160c4:	4b12      	ldr	r3, [pc, #72]	@ (8016110 <_vfiprintf_r+0x228>)
 80160c6:	a904      	add	r1, sp, #16
 80160c8:	4630      	mov	r0, r6
 80160ca:	f7fd f901 	bl	80132d0 <_printf_float>
 80160ce:	4607      	mov	r7, r0
 80160d0:	1c78      	adds	r0, r7, #1
 80160d2:	d1d6      	bne.n	8016082 <_vfiprintf_r+0x19a>
 80160d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80160d6:	07d9      	lsls	r1, r3, #31
 80160d8:	d405      	bmi.n	80160e6 <_vfiprintf_r+0x1fe>
 80160da:	89ab      	ldrh	r3, [r5, #12]
 80160dc:	059a      	lsls	r2, r3, #22
 80160de:	d402      	bmi.n	80160e6 <_vfiprintf_r+0x1fe>
 80160e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80160e2:	f7fd ff17 	bl	8013f14 <__retarget_lock_release_recursive>
 80160e6:	89ab      	ldrh	r3, [r5, #12]
 80160e8:	065b      	lsls	r3, r3, #25
 80160ea:	f53f af1f 	bmi.w	8015f2c <_vfiprintf_r+0x44>
 80160ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80160f0:	e71e      	b.n	8015f30 <_vfiprintf_r+0x48>
 80160f2:	ab03      	add	r3, sp, #12
 80160f4:	9300      	str	r3, [sp, #0]
 80160f6:	462a      	mov	r2, r5
 80160f8:	4b05      	ldr	r3, [pc, #20]	@ (8016110 <_vfiprintf_r+0x228>)
 80160fa:	a904      	add	r1, sp, #16
 80160fc:	4630      	mov	r0, r6
 80160fe:	f7fd fb7f 	bl	8013800 <_printf_i>
 8016102:	e7e4      	b.n	80160ce <_vfiprintf_r+0x1e6>
 8016104:	08018c66 	.word	0x08018c66
 8016108:	08018c70 	.word	0x08018c70
 801610c:	080132d1 	.word	0x080132d1
 8016110:	08015ec5 	.word	0x08015ec5
 8016114:	08018c6c 	.word	0x08018c6c

08016118 <__swbuf_r>:
 8016118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801611a:	460e      	mov	r6, r1
 801611c:	4614      	mov	r4, r2
 801611e:	4605      	mov	r5, r0
 8016120:	b118      	cbz	r0, 801612a <__swbuf_r+0x12>
 8016122:	6a03      	ldr	r3, [r0, #32]
 8016124:	b90b      	cbnz	r3, 801612a <__swbuf_r+0x12>
 8016126:	f7fd fd15 	bl	8013b54 <__sinit>
 801612a:	69a3      	ldr	r3, [r4, #24]
 801612c:	60a3      	str	r3, [r4, #8]
 801612e:	89a3      	ldrh	r3, [r4, #12]
 8016130:	071a      	lsls	r2, r3, #28
 8016132:	d501      	bpl.n	8016138 <__swbuf_r+0x20>
 8016134:	6923      	ldr	r3, [r4, #16]
 8016136:	b943      	cbnz	r3, 801614a <__swbuf_r+0x32>
 8016138:	4621      	mov	r1, r4
 801613a:	4628      	mov	r0, r5
 801613c:	f000 f82a 	bl	8016194 <__swsetup_r>
 8016140:	b118      	cbz	r0, 801614a <__swbuf_r+0x32>
 8016142:	f04f 37ff 	mov.w	r7, #4294967295
 8016146:	4638      	mov	r0, r7
 8016148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801614a:	6823      	ldr	r3, [r4, #0]
 801614c:	6922      	ldr	r2, [r4, #16]
 801614e:	1a98      	subs	r0, r3, r2
 8016150:	6963      	ldr	r3, [r4, #20]
 8016152:	b2f6      	uxtb	r6, r6
 8016154:	4283      	cmp	r3, r0
 8016156:	4637      	mov	r7, r6
 8016158:	dc05      	bgt.n	8016166 <__swbuf_r+0x4e>
 801615a:	4621      	mov	r1, r4
 801615c:	4628      	mov	r0, r5
 801615e:	f7ff fe45 	bl	8015dec <_fflush_r>
 8016162:	2800      	cmp	r0, #0
 8016164:	d1ed      	bne.n	8016142 <__swbuf_r+0x2a>
 8016166:	68a3      	ldr	r3, [r4, #8]
 8016168:	3b01      	subs	r3, #1
 801616a:	60a3      	str	r3, [r4, #8]
 801616c:	6823      	ldr	r3, [r4, #0]
 801616e:	1c5a      	adds	r2, r3, #1
 8016170:	6022      	str	r2, [r4, #0]
 8016172:	701e      	strb	r6, [r3, #0]
 8016174:	6962      	ldr	r2, [r4, #20]
 8016176:	1c43      	adds	r3, r0, #1
 8016178:	429a      	cmp	r2, r3
 801617a:	d004      	beq.n	8016186 <__swbuf_r+0x6e>
 801617c:	89a3      	ldrh	r3, [r4, #12]
 801617e:	07db      	lsls	r3, r3, #31
 8016180:	d5e1      	bpl.n	8016146 <__swbuf_r+0x2e>
 8016182:	2e0a      	cmp	r6, #10
 8016184:	d1df      	bne.n	8016146 <__swbuf_r+0x2e>
 8016186:	4621      	mov	r1, r4
 8016188:	4628      	mov	r0, r5
 801618a:	f7ff fe2f 	bl	8015dec <_fflush_r>
 801618e:	2800      	cmp	r0, #0
 8016190:	d0d9      	beq.n	8016146 <__swbuf_r+0x2e>
 8016192:	e7d6      	b.n	8016142 <__swbuf_r+0x2a>

08016194 <__swsetup_r>:
 8016194:	b538      	push	{r3, r4, r5, lr}
 8016196:	4b29      	ldr	r3, [pc, #164]	@ (801623c <__swsetup_r+0xa8>)
 8016198:	4605      	mov	r5, r0
 801619a:	6818      	ldr	r0, [r3, #0]
 801619c:	460c      	mov	r4, r1
 801619e:	b118      	cbz	r0, 80161a8 <__swsetup_r+0x14>
 80161a0:	6a03      	ldr	r3, [r0, #32]
 80161a2:	b90b      	cbnz	r3, 80161a8 <__swsetup_r+0x14>
 80161a4:	f7fd fcd6 	bl	8013b54 <__sinit>
 80161a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80161ac:	0719      	lsls	r1, r3, #28
 80161ae:	d422      	bmi.n	80161f6 <__swsetup_r+0x62>
 80161b0:	06da      	lsls	r2, r3, #27
 80161b2:	d407      	bmi.n	80161c4 <__swsetup_r+0x30>
 80161b4:	2209      	movs	r2, #9
 80161b6:	602a      	str	r2, [r5, #0]
 80161b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80161bc:	81a3      	strh	r3, [r4, #12]
 80161be:	f04f 30ff 	mov.w	r0, #4294967295
 80161c2:	e033      	b.n	801622c <__swsetup_r+0x98>
 80161c4:	0758      	lsls	r0, r3, #29
 80161c6:	d512      	bpl.n	80161ee <__swsetup_r+0x5a>
 80161c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80161ca:	b141      	cbz	r1, 80161de <__swsetup_r+0x4a>
 80161cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80161d0:	4299      	cmp	r1, r3
 80161d2:	d002      	beq.n	80161da <__swsetup_r+0x46>
 80161d4:	4628      	mov	r0, r5
 80161d6:	f7fe fd37 	bl	8014c48 <_free_r>
 80161da:	2300      	movs	r3, #0
 80161dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80161de:	89a3      	ldrh	r3, [r4, #12]
 80161e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80161e4:	81a3      	strh	r3, [r4, #12]
 80161e6:	2300      	movs	r3, #0
 80161e8:	6063      	str	r3, [r4, #4]
 80161ea:	6923      	ldr	r3, [r4, #16]
 80161ec:	6023      	str	r3, [r4, #0]
 80161ee:	89a3      	ldrh	r3, [r4, #12]
 80161f0:	f043 0308 	orr.w	r3, r3, #8
 80161f4:	81a3      	strh	r3, [r4, #12]
 80161f6:	6923      	ldr	r3, [r4, #16]
 80161f8:	b94b      	cbnz	r3, 801620e <__swsetup_r+0x7a>
 80161fa:	89a3      	ldrh	r3, [r4, #12]
 80161fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016204:	d003      	beq.n	801620e <__swsetup_r+0x7a>
 8016206:	4621      	mov	r1, r4
 8016208:	4628      	mov	r0, r5
 801620a:	f000 f883 	bl	8016314 <__smakebuf_r>
 801620e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016212:	f013 0201 	ands.w	r2, r3, #1
 8016216:	d00a      	beq.n	801622e <__swsetup_r+0x9a>
 8016218:	2200      	movs	r2, #0
 801621a:	60a2      	str	r2, [r4, #8]
 801621c:	6962      	ldr	r2, [r4, #20]
 801621e:	4252      	negs	r2, r2
 8016220:	61a2      	str	r2, [r4, #24]
 8016222:	6922      	ldr	r2, [r4, #16]
 8016224:	b942      	cbnz	r2, 8016238 <__swsetup_r+0xa4>
 8016226:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801622a:	d1c5      	bne.n	80161b8 <__swsetup_r+0x24>
 801622c:	bd38      	pop	{r3, r4, r5, pc}
 801622e:	0799      	lsls	r1, r3, #30
 8016230:	bf58      	it	pl
 8016232:	6962      	ldrpl	r2, [r4, #20]
 8016234:	60a2      	str	r2, [r4, #8]
 8016236:	e7f4      	b.n	8016222 <__swsetup_r+0x8e>
 8016238:	2000      	movs	r0, #0
 801623a:	e7f7      	b.n	801622c <__swsetup_r+0x98>
 801623c:	2000037c 	.word	0x2000037c

08016240 <_raise_r>:
 8016240:	291f      	cmp	r1, #31
 8016242:	b538      	push	{r3, r4, r5, lr}
 8016244:	4605      	mov	r5, r0
 8016246:	460c      	mov	r4, r1
 8016248:	d904      	bls.n	8016254 <_raise_r+0x14>
 801624a:	2316      	movs	r3, #22
 801624c:	6003      	str	r3, [r0, #0]
 801624e:	f04f 30ff 	mov.w	r0, #4294967295
 8016252:	bd38      	pop	{r3, r4, r5, pc}
 8016254:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016256:	b112      	cbz	r2, 801625e <_raise_r+0x1e>
 8016258:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801625c:	b94b      	cbnz	r3, 8016272 <_raise_r+0x32>
 801625e:	4628      	mov	r0, r5
 8016260:	f000 f830 	bl	80162c4 <_getpid_r>
 8016264:	4622      	mov	r2, r4
 8016266:	4601      	mov	r1, r0
 8016268:	4628      	mov	r0, r5
 801626a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801626e:	f000 b817 	b.w	80162a0 <_kill_r>
 8016272:	2b01      	cmp	r3, #1
 8016274:	d00a      	beq.n	801628c <_raise_r+0x4c>
 8016276:	1c59      	adds	r1, r3, #1
 8016278:	d103      	bne.n	8016282 <_raise_r+0x42>
 801627a:	2316      	movs	r3, #22
 801627c:	6003      	str	r3, [r0, #0]
 801627e:	2001      	movs	r0, #1
 8016280:	e7e7      	b.n	8016252 <_raise_r+0x12>
 8016282:	2100      	movs	r1, #0
 8016284:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016288:	4620      	mov	r0, r4
 801628a:	4798      	blx	r3
 801628c:	2000      	movs	r0, #0
 801628e:	e7e0      	b.n	8016252 <_raise_r+0x12>

08016290 <raise>:
 8016290:	4b02      	ldr	r3, [pc, #8]	@ (801629c <raise+0xc>)
 8016292:	4601      	mov	r1, r0
 8016294:	6818      	ldr	r0, [r3, #0]
 8016296:	f7ff bfd3 	b.w	8016240 <_raise_r>
 801629a:	bf00      	nop
 801629c:	2000037c 	.word	0x2000037c

080162a0 <_kill_r>:
 80162a0:	b538      	push	{r3, r4, r5, lr}
 80162a2:	4d07      	ldr	r5, [pc, #28]	@ (80162c0 <_kill_r+0x20>)
 80162a4:	2300      	movs	r3, #0
 80162a6:	4604      	mov	r4, r0
 80162a8:	4608      	mov	r0, r1
 80162aa:	4611      	mov	r1, r2
 80162ac:	602b      	str	r3, [r5, #0]
 80162ae:	f7ed ff15 	bl	80040dc <_kill>
 80162b2:	1c43      	adds	r3, r0, #1
 80162b4:	d102      	bne.n	80162bc <_kill_r+0x1c>
 80162b6:	682b      	ldr	r3, [r5, #0]
 80162b8:	b103      	cbz	r3, 80162bc <_kill_r+0x1c>
 80162ba:	6023      	str	r3, [r4, #0]
 80162bc:	bd38      	pop	{r3, r4, r5, pc}
 80162be:	bf00      	nop
 80162c0:	2001d9e0 	.word	0x2001d9e0

080162c4 <_getpid_r>:
 80162c4:	f7ed bf02 	b.w	80040cc <_getpid>

080162c8 <__swhatbuf_r>:
 80162c8:	b570      	push	{r4, r5, r6, lr}
 80162ca:	460c      	mov	r4, r1
 80162cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162d0:	2900      	cmp	r1, #0
 80162d2:	b096      	sub	sp, #88	@ 0x58
 80162d4:	4615      	mov	r5, r2
 80162d6:	461e      	mov	r6, r3
 80162d8:	da0d      	bge.n	80162f6 <__swhatbuf_r+0x2e>
 80162da:	89a3      	ldrh	r3, [r4, #12]
 80162dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80162e0:	f04f 0100 	mov.w	r1, #0
 80162e4:	bf14      	ite	ne
 80162e6:	2340      	movne	r3, #64	@ 0x40
 80162e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80162ec:	2000      	movs	r0, #0
 80162ee:	6031      	str	r1, [r6, #0]
 80162f0:	602b      	str	r3, [r5, #0]
 80162f2:	b016      	add	sp, #88	@ 0x58
 80162f4:	bd70      	pop	{r4, r5, r6, pc}
 80162f6:	466a      	mov	r2, sp
 80162f8:	f000 f848 	bl	801638c <_fstat_r>
 80162fc:	2800      	cmp	r0, #0
 80162fe:	dbec      	blt.n	80162da <__swhatbuf_r+0x12>
 8016300:	9901      	ldr	r1, [sp, #4]
 8016302:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016306:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801630a:	4259      	negs	r1, r3
 801630c:	4159      	adcs	r1, r3
 801630e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016312:	e7eb      	b.n	80162ec <__swhatbuf_r+0x24>

08016314 <__smakebuf_r>:
 8016314:	898b      	ldrh	r3, [r1, #12]
 8016316:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016318:	079d      	lsls	r5, r3, #30
 801631a:	4606      	mov	r6, r0
 801631c:	460c      	mov	r4, r1
 801631e:	d507      	bpl.n	8016330 <__smakebuf_r+0x1c>
 8016320:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016324:	6023      	str	r3, [r4, #0]
 8016326:	6123      	str	r3, [r4, #16]
 8016328:	2301      	movs	r3, #1
 801632a:	6163      	str	r3, [r4, #20]
 801632c:	b003      	add	sp, #12
 801632e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016330:	ab01      	add	r3, sp, #4
 8016332:	466a      	mov	r2, sp
 8016334:	f7ff ffc8 	bl	80162c8 <__swhatbuf_r>
 8016338:	9f00      	ldr	r7, [sp, #0]
 801633a:	4605      	mov	r5, r0
 801633c:	4639      	mov	r1, r7
 801633e:	4630      	mov	r0, r6
 8016340:	f7fc f808 	bl	8012354 <_malloc_r>
 8016344:	b948      	cbnz	r0, 801635a <__smakebuf_r+0x46>
 8016346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801634a:	059a      	lsls	r2, r3, #22
 801634c:	d4ee      	bmi.n	801632c <__smakebuf_r+0x18>
 801634e:	f023 0303 	bic.w	r3, r3, #3
 8016352:	f043 0302 	orr.w	r3, r3, #2
 8016356:	81a3      	strh	r3, [r4, #12]
 8016358:	e7e2      	b.n	8016320 <__smakebuf_r+0xc>
 801635a:	89a3      	ldrh	r3, [r4, #12]
 801635c:	6020      	str	r0, [r4, #0]
 801635e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016362:	81a3      	strh	r3, [r4, #12]
 8016364:	9b01      	ldr	r3, [sp, #4]
 8016366:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801636a:	b15b      	cbz	r3, 8016384 <__smakebuf_r+0x70>
 801636c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016370:	4630      	mov	r0, r6
 8016372:	f000 f81d 	bl	80163b0 <_isatty_r>
 8016376:	b128      	cbz	r0, 8016384 <__smakebuf_r+0x70>
 8016378:	89a3      	ldrh	r3, [r4, #12]
 801637a:	f023 0303 	bic.w	r3, r3, #3
 801637e:	f043 0301 	orr.w	r3, r3, #1
 8016382:	81a3      	strh	r3, [r4, #12]
 8016384:	89a3      	ldrh	r3, [r4, #12]
 8016386:	431d      	orrs	r5, r3
 8016388:	81a5      	strh	r5, [r4, #12]
 801638a:	e7cf      	b.n	801632c <__smakebuf_r+0x18>

0801638c <_fstat_r>:
 801638c:	b538      	push	{r3, r4, r5, lr}
 801638e:	4d07      	ldr	r5, [pc, #28]	@ (80163ac <_fstat_r+0x20>)
 8016390:	2300      	movs	r3, #0
 8016392:	4604      	mov	r4, r0
 8016394:	4608      	mov	r0, r1
 8016396:	4611      	mov	r1, r2
 8016398:	602b      	str	r3, [r5, #0]
 801639a:	f7ed feff 	bl	800419c <_fstat>
 801639e:	1c43      	adds	r3, r0, #1
 80163a0:	d102      	bne.n	80163a8 <_fstat_r+0x1c>
 80163a2:	682b      	ldr	r3, [r5, #0]
 80163a4:	b103      	cbz	r3, 80163a8 <_fstat_r+0x1c>
 80163a6:	6023      	str	r3, [r4, #0]
 80163a8:	bd38      	pop	{r3, r4, r5, pc}
 80163aa:	bf00      	nop
 80163ac:	2001d9e0 	.word	0x2001d9e0

080163b0 <_isatty_r>:
 80163b0:	b538      	push	{r3, r4, r5, lr}
 80163b2:	4d06      	ldr	r5, [pc, #24]	@ (80163cc <_isatty_r+0x1c>)
 80163b4:	2300      	movs	r3, #0
 80163b6:	4604      	mov	r4, r0
 80163b8:	4608      	mov	r0, r1
 80163ba:	602b      	str	r3, [r5, #0]
 80163bc:	f7ed fefe 	bl	80041bc <_isatty>
 80163c0:	1c43      	adds	r3, r0, #1
 80163c2:	d102      	bne.n	80163ca <_isatty_r+0x1a>
 80163c4:	682b      	ldr	r3, [r5, #0]
 80163c6:	b103      	cbz	r3, 80163ca <_isatty_r+0x1a>
 80163c8:	6023      	str	r3, [r4, #0]
 80163ca:	bd38      	pop	{r3, r4, r5, pc}
 80163cc:	2001d9e0 	.word	0x2001d9e0

080163d0 <atan2>:
 80163d0:	f000 bb5e 	b.w	8016a90 <__ieee754_atan2>

080163d4 <fmod>:
 80163d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163d6:	ed2d 8b02 	vpush	{d8}
 80163da:	ec57 6b10 	vmov	r6, r7, d0
 80163de:	ec55 4b11 	vmov	r4, r5, d1
 80163e2:	f000 fc1b 	bl	8016c1c <__ieee754_fmod>
 80163e6:	4622      	mov	r2, r4
 80163e8:	462b      	mov	r3, r5
 80163ea:	4630      	mov	r0, r6
 80163ec:	4639      	mov	r1, r7
 80163ee:	eeb0 8a40 	vmov.f32	s16, s0
 80163f2:	eef0 8a60 	vmov.f32	s17, s1
 80163f6:	f7ea fba9 	bl	8000b4c <__aeabi_dcmpun>
 80163fa:	b990      	cbnz	r0, 8016422 <fmod+0x4e>
 80163fc:	2200      	movs	r2, #0
 80163fe:	2300      	movs	r3, #0
 8016400:	4620      	mov	r0, r4
 8016402:	4629      	mov	r1, r5
 8016404:	f7ea fb70 	bl	8000ae8 <__aeabi_dcmpeq>
 8016408:	b158      	cbz	r0, 8016422 <fmod+0x4e>
 801640a:	f7fd fd57 	bl	8013ebc <__errno>
 801640e:	2321      	movs	r3, #33	@ 0x21
 8016410:	6003      	str	r3, [r0, #0]
 8016412:	2200      	movs	r2, #0
 8016414:	2300      	movs	r3, #0
 8016416:	4610      	mov	r0, r2
 8016418:	4619      	mov	r1, r3
 801641a:	f7ea fa27 	bl	800086c <__aeabi_ddiv>
 801641e:	ec41 0b18 	vmov	d8, r0, r1
 8016422:	eeb0 0a48 	vmov.f32	s0, s16
 8016426:	eef0 0a68 	vmov.f32	s1, s17
 801642a:	ecbd 8b02 	vpop	{d8}
 801642e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016430 <sqrt>:
 8016430:	b538      	push	{r3, r4, r5, lr}
 8016432:	ed2d 8b02 	vpush	{d8}
 8016436:	ec55 4b10 	vmov	r4, r5, d0
 801643a:	f000 f8cd 	bl	80165d8 <__ieee754_sqrt>
 801643e:	4622      	mov	r2, r4
 8016440:	462b      	mov	r3, r5
 8016442:	4620      	mov	r0, r4
 8016444:	4629      	mov	r1, r5
 8016446:	eeb0 8a40 	vmov.f32	s16, s0
 801644a:	eef0 8a60 	vmov.f32	s17, s1
 801644e:	f7ea fb7d 	bl	8000b4c <__aeabi_dcmpun>
 8016452:	b990      	cbnz	r0, 801647a <sqrt+0x4a>
 8016454:	2200      	movs	r2, #0
 8016456:	2300      	movs	r3, #0
 8016458:	4620      	mov	r0, r4
 801645a:	4629      	mov	r1, r5
 801645c:	f7ea fb4e 	bl	8000afc <__aeabi_dcmplt>
 8016460:	b158      	cbz	r0, 801647a <sqrt+0x4a>
 8016462:	f7fd fd2b 	bl	8013ebc <__errno>
 8016466:	2321      	movs	r3, #33	@ 0x21
 8016468:	6003      	str	r3, [r0, #0]
 801646a:	2200      	movs	r2, #0
 801646c:	2300      	movs	r3, #0
 801646e:	4610      	mov	r0, r2
 8016470:	4619      	mov	r1, r3
 8016472:	f7ea f9fb 	bl	800086c <__aeabi_ddiv>
 8016476:	ec41 0b18 	vmov	d8, r0, r1
 801647a:	eeb0 0a48 	vmov.f32	s0, s16
 801647e:	eef0 0a68 	vmov.f32	s1, s17
 8016482:	ecbd 8b02 	vpop	{d8}
 8016486:	bd38      	pop	{r3, r4, r5, pc}

08016488 <cos>:
 8016488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801648a:	ec53 2b10 	vmov	r2, r3, d0
 801648e:	4826      	ldr	r0, [pc, #152]	@ (8016528 <cos+0xa0>)
 8016490:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8016494:	4281      	cmp	r1, r0
 8016496:	d806      	bhi.n	80164a6 <cos+0x1e>
 8016498:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8016520 <cos+0x98>
 801649c:	b005      	add	sp, #20
 801649e:	f85d eb04 	ldr.w	lr, [sp], #4
 80164a2:	f000 b971 	b.w	8016788 <__kernel_cos>
 80164a6:	4821      	ldr	r0, [pc, #132]	@ (801652c <cos+0xa4>)
 80164a8:	4281      	cmp	r1, r0
 80164aa:	d908      	bls.n	80164be <cos+0x36>
 80164ac:	4610      	mov	r0, r2
 80164ae:	4619      	mov	r1, r3
 80164b0:	f7e9 fefa 	bl	80002a8 <__aeabi_dsub>
 80164b4:	ec41 0b10 	vmov	d0, r0, r1
 80164b8:	b005      	add	sp, #20
 80164ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80164be:	4668      	mov	r0, sp
 80164c0:	f000 fcb6 	bl	8016e30 <__ieee754_rem_pio2>
 80164c4:	f000 0003 	and.w	r0, r0, #3
 80164c8:	2801      	cmp	r0, #1
 80164ca:	d00b      	beq.n	80164e4 <cos+0x5c>
 80164cc:	2802      	cmp	r0, #2
 80164ce:	d015      	beq.n	80164fc <cos+0x74>
 80164d0:	b9d8      	cbnz	r0, 801650a <cos+0x82>
 80164d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80164d6:	ed9d 0b00 	vldr	d0, [sp]
 80164da:	f000 f955 	bl	8016788 <__kernel_cos>
 80164de:	ec51 0b10 	vmov	r0, r1, d0
 80164e2:	e7e7      	b.n	80164b4 <cos+0x2c>
 80164e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80164e8:	ed9d 0b00 	vldr	d0, [sp]
 80164ec:	f000 fa14 	bl	8016918 <__kernel_sin>
 80164f0:	ec53 2b10 	vmov	r2, r3, d0
 80164f4:	4610      	mov	r0, r2
 80164f6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80164fa:	e7db      	b.n	80164b4 <cos+0x2c>
 80164fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016500:	ed9d 0b00 	vldr	d0, [sp]
 8016504:	f000 f940 	bl	8016788 <__kernel_cos>
 8016508:	e7f2      	b.n	80164f0 <cos+0x68>
 801650a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801650e:	ed9d 0b00 	vldr	d0, [sp]
 8016512:	2001      	movs	r0, #1
 8016514:	f000 fa00 	bl	8016918 <__kernel_sin>
 8016518:	e7e1      	b.n	80164de <cos+0x56>
 801651a:	bf00      	nop
 801651c:	f3af 8000 	nop.w
	...
 8016528:	3fe921fb 	.word	0x3fe921fb
 801652c:	7fefffff 	.word	0x7fefffff

08016530 <sin>:
 8016530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016532:	ec53 2b10 	vmov	r2, r3, d0
 8016536:	4826      	ldr	r0, [pc, #152]	@ (80165d0 <sin+0xa0>)
 8016538:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801653c:	4281      	cmp	r1, r0
 801653e:	d807      	bhi.n	8016550 <sin+0x20>
 8016540:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80165c8 <sin+0x98>
 8016544:	2000      	movs	r0, #0
 8016546:	b005      	add	sp, #20
 8016548:	f85d eb04 	ldr.w	lr, [sp], #4
 801654c:	f000 b9e4 	b.w	8016918 <__kernel_sin>
 8016550:	4820      	ldr	r0, [pc, #128]	@ (80165d4 <sin+0xa4>)
 8016552:	4281      	cmp	r1, r0
 8016554:	d908      	bls.n	8016568 <sin+0x38>
 8016556:	4610      	mov	r0, r2
 8016558:	4619      	mov	r1, r3
 801655a:	f7e9 fea5 	bl	80002a8 <__aeabi_dsub>
 801655e:	ec41 0b10 	vmov	d0, r0, r1
 8016562:	b005      	add	sp, #20
 8016564:	f85d fb04 	ldr.w	pc, [sp], #4
 8016568:	4668      	mov	r0, sp
 801656a:	f000 fc61 	bl	8016e30 <__ieee754_rem_pio2>
 801656e:	f000 0003 	and.w	r0, r0, #3
 8016572:	2801      	cmp	r0, #1
 8016574:	d00c      	beq.n	8016590 <sin+0x60>
 8016576:	2802      	cmp	r0, #2
 8016578:	d011      	beq.n	801659e <sin+0x6e>
 801657a:	b9e8      	cbnz	r0, 80165b8 <sin+0x88>
 801657c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016580:	ed9d 0b00 	vldr	d0, [sp]
 8016584:	2001      	movs	r0, #1
 8016586:	f000 f9c7 	bl	8016918 <__kernel_sin>
 801658a:	ec51 0b10 	vmov	r0, r1, d0
 801658e:	e7e6      	b.n	801655e <sin+0x2e>
 8016590:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016594:	ed9d 0b00 	vldr	d0, [sp]
 8016598:	f000 f8f6 	bl	8016788 <__kernel_cos>
 801659c:	e7f5      	b.n	801658a <sin+0x5a>
 801659e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80165a2:	ed9d 0b00 	vldr	d0, [sp]
 80165a6:	2001      	movs	r0, #1
 80165a8:	f000 f9b6 	bl	8016918 <__kernel_sin>
 80165ac:	ec53 2b10 	vmov	r2, r3, d0
 80165b0:	4610      	mov	r0, r2
 80165b2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80165b6:	e7d2      	b.n	801655e <sin+0x2e>
 80165b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80165bc:	ed9d 0b00 	vldr	d0, [sp]
 80165c0:	f000 f8e2 	bl	8016788 <__kernel_cos>
 80165c4:	e7f2      	b.n	80165ac <sin+0x7c>
 80165c6:	bf00      	nop
	...
 80165d0:	3fe921fb 	.word	0x3fe921fb
 80165d4:	7fefffff 	.word	0x7fefffff

080165d8 <__ieee754_sqrt>:
 80165d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165dc:	4a66      	ldr	r2, [pc, #408]	@ (8016778 <__ieee754_sqrt+0x1a0>)
 80165de:	ec55 4b10 	vmov	r4, r5, d0
 80165e2:	43aa      	bics	r2, r5
 80165e4:	462b      	mov	r3, r5
 80165e6:	4621      	mov	r1, r4
 80165e8:	d110      	bne.n	801660c <__ieee754_sqrt+0x34>
 80165ea:	4622      	mov	r2, r4
 80165ec:	4620      	mov	r0, r4
 80165ee:	4629      	mov	r1, r5
 80165f0:	f7ea f812 	bl	8000618 <__aeabi_dmul>
 80165f4:	4602      	mov	r2, r0
 80165f6:	460b      	mov	r3, r1
 80165f8:	4620      	mov	r0, r4
 80165fa:	4629      	mov	r1, r5
 80165fc:	f7e9 fe56 	bl	80002ac <__adddf3>
 8016600:	4604      	mov	r4, r0
 8016602:	460d      	mov	r5, r1
 8016604:	ec45 4b10 	vmov	d0, r4, r5
 8016608:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801660c:	2d00      	cmp	r5, #0
 801660e:	dc0e      	bgt.n	801662e <__ieee754_sqrt+0x56>
 8016610:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8016614:	4322      	orrs	r2, r4
 8016616:	d0f5      	beq.n	8016604 <__ieee754_sqrt+0x2c>
 8016618:	b19d      	cbz	r5, 8016642 <__ieee754_sqrt+0x6a>
 801661a:	4622      	mov	r2, r4
 801661c:	4620      	mov	r0, r4
 801661e:	4629      	mov	r1, r5
 8016620:	f7e9 fe42 	bl	80002a8 <__aeabi_dsub>
 8016624:	4602      	mov	r2, r0
 8016626:	460b      	mov	r3, r1
 8016628:	f7ea f920 	bl	800086c <__aeabi_ddiv>
 801662c:	e7e8      	b.n	8016600 <__ieee754_sqrt+0x28>
 801662e:	152a      	asrs	r2, r5, #20
 8016630:	d115      	bne.n	801665e <__ieee754_sqrt+0x86>
 8016632:	2000      	movs	r0, #0
 8016634:	e009      	b.n	801664a <__ieee754_sqrt+0x72>
 8016636:	0acb      	lsrs	r3, r1, #11
 8016638:	3a15      	subs	r2, #21
 801663a:	0549      	lsls	r1, r1, #21
 801663c:	2b00      	cmp	r3, #0
 801663e:	d0fa      	beq.n	8016636 <__ieee754_sqrt+0x5e>
 8016640:	e7f7      	b.n	8016632 <__ieee754_sqrt+0x5a>
 8016642:	462a      	mov	r2, r5
 8016644:	e7fa      	b.n	801663c <__ieee754_sqrt+0x64>
 8016646:	005b      	lsls	r3, r3, #1
 8016648:	3001      	adds	r0, #1
 801664a:	02dc      	lsls	r4, r3, #11
 801664c:	d5fb      	bpl.n	8016646 <__ieee754_sqrt+0x6e>
 801664e:	1e44      	subs	r4, r0, #1
 8016650:	1b12      	subs	r2, r2, r4
 8016652:	f1c0 0420 	rsb	r4, r0, #32
 8016656:	fa21 f404 	lsr.w	r4, r1, r4
 801665a:	4323      	orrs	r3, r4
 801665c:	4081      	lsls	r1, r0
 801665e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016662:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8016666:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801666a:	07d2      	lsls	r2, r2, #31
 801666c:	bf5c      	itt	pl
 801666e:	005b      	lslpl	r3, r3, #1
 8016670:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8016674:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016678:	bf58      	it	pl
 801667a:	0049      	lslpl	r1, r1, #1
 801667c:	2600      	movs	r6, #0
 801667e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8016682:	107f      	asrs	r7, r7, #1
 8016684:	0049      	lsls	r1, r1, #1
 8016686:	2016      	movs	r0, #22
 8016688:	4632      	mov	r2, r6
 801668a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801668e:	1915      	adds	r5, r2, r4
 8016690:	429d      	cmp	r5, r3
 8016692:	bfde      	ittt	le
 8016694:	192a      	addle	r2, r5, r4
 8016696:	1b5b      	suble	r3, r3, r5
 8016698:	1936      	addle	r6, r6, r4
 801669a:	0fcd      	lsrs	r5, r1, #31
 801669c:	3801      	subs	r0, #1
 801669e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80166a2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80166a6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80166aa:	d1f0      	bne.n	801668e <__ieee754_sqrt+0xb6>
 80166ac:	4605      	mov	r5, r0
 80166ae:	2420      	movs	r4, #32
 80166b0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80166b4:	4293      	cmp	r3, r2
 80166b6:	eb0c 0e00 	add.w	lr, ip, r0
 80166ba:	dc02      	bgt.n	80166c2 <__ieee754_sqrt+0xea>
 80166bc:	d113      	bne.n	80166e6 <__ieee754_sqrt+0x10e>
 80166be:	458e      	cmp	lr, r1
 80166c0:	d811      	bhi.n	80166e6 <__ieee754_sqrt+0x10e>
 80166c2:	f1be 0f00 	cmp.w	lr, #0
 80166c6:	eb0e 000c 	add.w	r0, lr, ip
 80166ca:	da3f      	bge.n	801674c <__ieee754_sqrt+0x174>
 80166cc:	2800      	cmp	r0, #0
 80166ce:	db3d      	blt.n	801674c <__ieee754_sqrt+0x174>
 80166d0:	f102 0801 	add.w	r8, r2, #1
 80166d4:	1a9b      	subs	r3, r3, r2
 80166d6:	458e      	cmp	lr, r1
 80166d8:	bf88      	it	hi
 80166da:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80166de:	eba1 010e 	sub.w	r1, r1, lr
 80166e2:	4465      	add	r5, ip
 80166e4:	4642      	mov	r2, r8
 80166e6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80166ea:	3c01      	subs	r4, #1
 80166ec:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80166f0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80166f4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80166f8:	d1dc      	bne.n	80166b4 <__ieee754_sqrt+0xdc>
 80166fa:	4319      	orrs	r1, r3
 80166fc:	d01b      	beq.n	8016736 <__ieee754_sqrt+0x15e>
 80166fe:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 801677c <__ieee754_sqrt+0x1a4>
 8016702:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8016780 <__ieee754_sqrt+0x1a8>
 8016706:	e9da 0100 	ldrd	r0, r1, [sl]
 801670a:	e9db 2300 	ldrd	r2, r3, [fp]
 801670e:	f7e9 fdcb 	bl	80002a8 <__aeabi_dsub>
 8016712:	e9da 8900 	ldrd	r8, r9, [sl]
 8016716:	4602      	mov	r2, r0
 8016718:	460b      	mov	r3, r1
 801671a:	4640      	mov	r0, r8
 801671c:	4649      	mov	r1, r9
 801671e:	f7ea f9f7 	bl	8000b10 <__aeabi_dcmple>
 8016722:	b140      	cbz	r0, 8016736 <__ieee754_sqrt+0x15e>
 8016724:	f1b5 3fff 	cmp.w	r5, #4294967295
 8016728:	e9da 0100 	ldrd	r0, r1, [sl]
 801672c:	e9db 2300 	ldrd	r2, r3, [fp]
 8016730:	d10e      	bne.n	8016750 <__ieee754_sqrt+0x178>
 8016732:	3601      	adds	r6, #1
 8016734:	4625      	mov	r5, r4
 8016736:	1073      	asrs	r3, r6, #1
 8016738:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 801673c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8016740:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8016744:	086b      	lsrs	r3, r5, #1
 8016746:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 801674a:	e759      	b.n	8016600 <__ieee754_sqrt+0x28>
 801674c:	4690      	mov	r8, r2
 801674e:	e7c1      	b.n	80166d4 <__ieee754_sqrt+0xfc>
 8016750:	f7e9 fdac 	bl	80002ac <__adddf3>
 8016754:	e9da 8900 	ldrd	r8, r9, [sl]
 8016758:	4602      	mov	r2, r0
 801675a:	460b      	mov	r3, r1
 801675c:	4640      	mov	r0, r8
 801675e:	4649      	mov	r1, r9
 8016760:	f7ea f9cc 	bl	8000afc <__aeabi_dcmplt>
 8016764:	b120      	cbz	r0, 8016770 <__ieee754_sqrt+0x198>
 8016766:	1cab      	adds	r3, r5, #2
 8016768:	bf08      	it	eq
 801676a:	3601      	addeq	r6, #1
 801676c:	3502      	adds	r5, #2
 801676e:	e7e2      	b.n	8016736 <__ieee754_sqrt+0x15e>
 8016770:	1c6b      	adds	r3, r5, #1
 8016772:	f023 0501 	bic.w	r5, r3, #1
 8016776:	e7de      	b.n	8016736 <__ieee754_sqrt+0x15e>
 8016778:	7ff00000 	.word	0x7ff00000
 801677c:	08018ed0 	.word	0x08018ed0
 8016780:	08018ec8 	.word	0x08018ec8
 8016784:	00000000 	.word	0x00000000

08016788 <__kernel_cos>:
 8016788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801678c:	ec57 6b10 	vmov	r6, r7, d0
 8016790:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8016794:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8016798:	ed8d 1b00 	vstr	d1, [sp]
 801679c:	d206      	bcs.n	80167ac <__kernel_cos+0x24>
 801679e:	4630      	mov	r0, r6
 80167a0:	4639      	mov	r1, r7
 80167a2:	f7ea f9e9 	bl	8000b78 <__aeabi_d2iz>
 80167a6:	2800      	cmp	r0, #0
 80167a8:	f000 8088 	beq.w	80168bc <__kernel_cos+0x134>
 80167ac:	4632      	mov	r2, r6
 80167ae:	463b      	mov	r3, r7
 80167b0:	4630      	mov	r0, r6
 80167b2:	4639      	mov	r1, r7
 80167b4:	f7e9 ff30 	bl	8000618 <__aeabi_dmul>
 80167b8:	4b51      	ldr	r3, [pc, #324]	@ (8016900 <__kernel_cos+0x178>)
 80167ba:	2200      	movs	r2, #0
 80167bc:	4604      	mov	r4, r0
 80167be:	460d      	mov	r5, r1
 80167c0:	f7e9 ff2a 	bl	8000618 <__aeabi_dmul>
 80167c4:	a340      	add	r3, pc, #256	@ (adr r3, 80168c8 <__kernel_cos+0x140>)
 80167c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167ca:	4682      	mov	sl, r0
 80167cc:	468b      	mov	fp, r1
 80167ce:	4620      	mov	r0, r4
 80167d0:	4629      	mov	r1, r5
 80167d2:	f7e9 ff21 	bl	8000618 <__aeabi_dmul>
 80167d6:	a33e      	add	r3, pc, #248	@ (adr r3, 80168d0 <__kernel_cos+0x148>)
 80167d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167dc:	f7e9 fd66 	bl	80002ac <__adddf3>
 80167e0:	4622      	mov	r2, r4
 80167e2:	462b      	mov	r3, r5
 80167e4:	f7e9 ff18 	bl	8000618 <__aeabi_dmul>
 80167e8:	a33b      	add	r3, pc, #236	@ (adr r3, 80168d8 <__kernel_cos+0x150>)
 80167ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167ee:	f7e9 fd5b 	bl	80002a8 <__aeabi_dsub>
 80167f2:	4622      	mov	r2, r4
 80167f4:	462b      	mov	r3, r5
 80167f6:	f7e9 ff0f 	bl	8000618 <__aeabi_dmul>
 80167fa:	a339      	add	r3, pc, #228	@ (adr r3, 80168e0 <__kernel_cos+0x158>)
 80167fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016800:	f7e9 fd54 	bl	80002ac <__adddf3>
 8016804:	4622      	mov	r2, r4
 8016806:	462b      	mov	r3, r5
 8016808:	f7e9 ff06 	bl	8000618 <__aeabi_dmul>
 801680c:	a336      	add	r3, pc, #216	@ (adr r3, 80168e8 <__kernel_cos+0x160>)
 801680e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016812:	f7e9 fd49 	bl	80002a8 <__aeabi_dsub>
 8016816:	4622      	mov	r2, r4
 8016818:	462b      	mov	r3, r5
 801681a:	f7e9 fefd 	bl	8000618 <__aeabi_dmul>
 801681e:	a334      	add	r3, pc, #208	@ (adr r3, 80168f0 <__kernel_cos+0x168>)
 8016820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016824:	f7e9 fd42 	bl	80002ac <__adddf3>
 8016828:	4622      	mov	r2, r4
 801682a:	462b      	mov	r3, r5
 801682c:	f7e9 fef4 	bl	8000618 <__aeabi_dmul>
 8016830:	4622      	mov	r2, r4
 8016832:	462b      	mov	r3, r5
 8016834:	f7e9 fef0 	bl	8000618 <__aeabi_dmul>
 8016838:	e9dd 2300 	ldrd	r2, r3, [sp]
 801683c:	4604      	mov	r4, r0
 801683e:	460d      	mov	r5, r1
 8016840:	4630      	mov	r0, r6
 8016842:	4639      	mov	r1, r7
 8016844:	f7e9 fee8 	bl	8000618 <__aeabi_dmul>
 8016848:	460b      	mov	r3, r1
 801684a:	4602      	mov	r2, r0
 801684c:	4629      	mov	r1, r5
 801684e:	4620      	mov	r0, r4
 8016850:	f7e9 fd2a 	bl	80002a8 <__aeabi_dsub>
 8016854:	4b2b      	ldr	r3, [pc, #172]	@ (8016904 <__kernel_cos+0x17c>)
 8016856:	4598      	cmp	r8, r3
 8016858:	4606      	mov	r6, r0
 801685a:	460f      	mov	r7, r1
 801685c:	d810      	bhi.n	8016880 <__kernel_cos+0xf8>
 801685e:	4602      	mov	r2, r0
 8016860:	460b      	mov	r3, r1
 8016862:	4650      	mov	r0, sl
 8016864:	4659      	mov	r1, fp
 8016866:	f7e9 fd1f 	bl	80002a8 <__aeabi_dsub>
 801686a:	460b      	mov	r3, r1
 801686c:	4926      	ldr	r1, [pc, #152]	@ (8016908 <__kernel_cos+0x180>)
 801686e:	4602      	mov	r2, r0
 8016870:	2000      	movs	r0, #0
 8016872:	f7e9 fd19 	bl	80002a8 <__aeabi_dsub>
 8016876:	ec41 0b10 	vmov	d0, r0, r1
 801687a:	b003      	add	sp, #12
 801687c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016880:	4b22      	ldr	r3, [pc, #136]	@ (801690c <__kernel_cos+0x184>)
 8016882:	4921      	ldr	r1, [pc, #132]	@ (8016908 <__kernel_cos+0x180>)
 8016884:	4598      	cmp	r8, r3
 8016886:	bf8c      	ite	hi
 8016888:	4d21      	ldrhi	r5, [pc, #132]	@ (8016910 <__kernel_cos+0x188>)
 801688a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801688e:	2400      	movs	r4, #0
 8016890:	4622      	mov	r2, r4
 8016892:	462b      	mov	r3, r5
 8016894:	2000      	movs	r0, #0
 8016896:	f7e9 fd07 	bl	80002a8 <__aeabi_dsub>
 801689a:	4622      	mov	r2, r4
 801689c:	4680      	mov	r8, r0
 801689e:	4689      	mov	r9, r1
 80168a0:	462b      	mov	r3, r5
 80168a2:	4650      	mov	r0, sl
 80168a4:	4659      	mov	r1, fp
 80168a6:	f7e9 fcff 	bl	80002a8 <__aeabi_dsub>
 80168aa:	4632      	mov	r2, r6
 80168ac:	463b      	mov	r3, r7
 80168ae:	f7e9 fcfb 	bl	80002a8 <__aeabi_dsub>
 80168b2:	4602      	mov	r2, r0
 80168b4:	460b      	mov	r3, r1
 80168b6:	4640      	mov	r0, r8
 80168b8:	4649      	mov	r1, r9
 80168ba:	e7da      	b.n	8016872 <__kernel_cos+0xea>
 80168bc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80168f8 <__kernel_cos+0x170>
 80168c0:	e7db      	b.n	801687a <__kernel_cos+0xf2>
 80168c2:	bf00      	nop
 80168c4:	f3af 8000 	nop.w
 80168c8:	be8838d4 	.word	0xbe8838d4
 80168cc:	bda8fae9 	.word	0xbda8fae9
 80168d0:	bdb4b1c4 	.word	0xbdb4b1c4
 80168d4:	3e21ee9e 	.word	0x3e21ee9e
 80168d8:	809c52ad 	.word	0x809c52ad
 80168dc:	3e927e4f 	.word	0x3e927e4f
 80168e0:	19cb1590 	.word	0x19cb1590
 80168e4:	3efa01a0 	.word	0x3efa01a0
 80168e8:	16c15177 	.word	0x16c15177
 80168ec:	3f56c16c 	.word	0x3f56c16c
 80168f0:	5555554c 	.word	0x5555554c
 80168f4:	3fa55555 	.word	0x3fa55555
 80168f8:	00000000 	.word	0x00000000
 80168fc:	3ff00000 	.word	0x3ff00000
 8016900:	3fe00000 	.word	0x3fe00000
 8016904:	3fd33332 	.word	0x3fd33332
 8016908:	3ff00000 	.word	0x3ff00000
 801690c:	3fe90000 	.word	0x3fe90000
 8016910:	3fd20000 	.word	0x3fd20000
 8016914:	00000000 	.word	0x00000000

08016918 <__kernel_sin>:
 8016918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801691c:	ec55 4b10 	vmov	r4, r5, d0
 8016920:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8016924:	b085      	sub	sp, #20
 8016926:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801692a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801692e:	4680      	mov	r8, r0
 8016930:	d205      	bcs.n	801693e <__kernel_sin+0x26>
 8016932:	4620      	mov	r0, r4
 8016934:	4629      	mov	r1, r5
 8016936:	f7ea f91f 	bl	8000b78 <__aeabi_d2iz>
 801693a:	2800      	cmp	r0, #0
 801693c:	d052      	beq.n	80169e4 <__kernel_sin+0xcc>
 801693e:	4622      	mov	r2, r4
 8016940:	462b      	mov	r3, r5
 8016942:	4620      	mov	r0, r4
 8016944:	4629      	mov	r1, r5
 8016946:	f7e9 fe67 	bl	8000618 <__aeabi_dmul>
 801694a:	4682      	mov	sl, r0
 801694c:	468b      	mov	fp, r1
 801694e:	4602      	mov	r2, r0
 8016950:	460b      	mov	r3, r1
 8016952:	4620      	mov	r0, r4
 8016954:	4629      	mov	r1, r5
 8016956:	f7e9 fe5f 	bl	8000618 <__aeabi_dmul>
 801695a:	a342      	add	r3, pc, #264	@ (adr r3, 8016a64 <__kernel_sin+0x14c>)
 801695c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016960:	e9cd 0100 	strd	r0, r1, [sp]
 8016964:	4650      	mov	r0, sl
 8016966:	4659      	mov	r1, fp
 8016968:	f7e9 fe56 	bl	8000618 <__aeabi_dmul>
 801696c:	a33f      	add	r3, pc, #252	@ (adr r3, 8016a6c <__kernel_sin+0x154>)
 801696e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016972:	f7e9 fc99 	bl	80002a8 <__aeabi_dsub>
 8016976:	4652      	mov	r2, sl
 8016978:	465b      	mov	r3, fp
 801697a:	f7e9 fe4d 	bl	8000618 <__aeabi_dmul>
 801697e:	a33d      	add	r3, pc, #244	@ (adr r3, 8016a74 <__kernel_sin+0x15c>)
 8016980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016984:	f7e9 fc92 	bl	80002ac <__adddf3>
 8016988:	4652      	mov	r2, sl
 801698a:	465b      	mov	r3, fp
 801698c:	f7e9 fe44 	bl	8000618 <__aeabi_dmul>
 8016990:	a33a      	add	r3, pc, #232	@ (adr r3, 8016a7c <__kernel_sin+0x164>)
 8016992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016996:	f7e9 fc87 	bl	80002a8 <__aeabi_dsub>
 801699a:	4652      	mov	r2, sl
 801699c:	465b      	mov	r3, fp
 801699e:	f7e9 fe3b 	bl	8000618 <__aeabi_dmul>
 80169a2:	a338      	add	r3, pc, #224	@ (adr r3, 8016a84 <__kernel_sin+0x16c>)
 80169a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169a8:	f7e9 fc80 	bl	80002ac <__adddf3>
 80169ac:	4606      	mov	r6, r0
 80169ae:	460f      	mov	r7, r1
 80169b0:	f1b8 0f00 	cmp.w	r8, #0
 80169b4:	d11b      	bne.n	80169ee <__kernel_sin+0xd6>
 80169b6:	4602      	mov	r2, r0
 80169b8:	460b      	mov	r3, r1
 80169ba:	4650      	mov	r0, sl
 80169bc:	4659      	mov	r1, fp
 80169be:	f7e9 fe2b 	bl	8000618 <__aeabi_dmul>
 80169c2:	a325      	add	r3, pc, #148	@ (adr r3, 8016a58 <__kernel_sin+0x140>)
 80169c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169c8:	f7e9 fc6e 	bl	80002a8 <__aeabi_dsub>
 80169cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80169d0:	f7e9 fe22 	bl	8000618 <__aeabi_dmul>
 80169d4:	4602      	mov	r2, r0
 80169d6:	460b      	mov	r3, r1
 80169d8:	4620      	mov	r0, r4
 80169da:	4629      	mov	r1, r5
 80169dc:	f7e9 fc66 	bl	80002ac <__adddf3>
 80169e0:	4604      	mov	r4, r0
 80169e2:	460d      	mov	r5, r1
 80169e4:	ec45 4b10 	vmov	d0, r4, r5
 80169e8:	b005      	add	sp, #20
 80169ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80169f2:	4b1b      	ldr	r3, [pc, #108]	@ (8016a60 <__kernel_sin+0x148>)
 80169f4:	2200      	movs	r2, #0
 80169f6:	f7e9 fe0f 	bl	8000618 <__aeabi_dmul>
 80169fa:	4632      	mov	r2, r6
 80169fc:	4680      	mov	r8, r0
 80169fe:	4689      	mov	r9, r1
 8016a00:	463b      	mov	r3, r7
 8016a02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a06:	f7e9 fe07 	bl	8000618 <__aeabi_dmul>
 8016a0a:	4602      	mov	r2, r0
 8016a0c:	460b      	mov	r3, r1
 8016a0e:	4640      	mov	r0, r8
 8016a10:	4649      	mov	r1, r9
 8016a12:	f7e9 fc49 	bl	80002a8 <__aeabi_dsub>
 8016a16:	4652      	mov	r2, sl
 8016a18:	465b      	mov	r3, fp
 8016a1a:	f7e9 fdfd 	bl	8000618 <__aeabi_dmul>
 8016a1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016a22:	f7e9 fc41 	bl	80002a8 <__aeabi_dsub>
 8016a26:	a30c      	add	r3, pc, #48	@ (adr r3, 8016a58 <__kernel_sin+0x140>)
 8016a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a2c:	4606      	mov	r6, r0
 8016a2e:	460f      	mov	r7, r1
 8016a30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a34:	f7e9 fdf0 	bl	8000618 <__aeabi_dmul>
 8016a38:	4602      	mov	r2, r0
 8016a3a:	460b      	mov	r3, r1
 8016a3c:	4630      	mov	r0, r6
 8016a3e:	4639      	mov	r1, r7
 8016a40:	f7e9 fc34 	bl	80002ac <__adddf3>
 8016a44:	4602      	mov	r2, r0
 8016a46:	460b      	mov	r3, r1
 8016a48:	4620      	mov	r0, r4
 8016a4a:	4629      	mov	r1, r5
 8016a4c:	f7e9 fc2c 	bl	80002a8 <__aeabi_dsub>
 8016a50:	e7c6      	b.n	80169e0 <__kernel_sin+0xc8>
 8016a52:	bf00      	nop
 8016a54:	f3af 8000 	nop.w
 8016a58:	55555549 	.word	0x55555549
 8016a5c:	3fc55555 	.word	0x3fc55555
 8016a60:	3fe00000 	.word	0x3fe00000
 8016a64:	5acfd57c 	.word	0x5acfd57c
 8016a68:	3de5d93a 	.word	0x3de5d93a
 8016a6c:	8a2b9ceb 	.word	0x8a2b9ceb
 8016a70:	3e5ae5e6 	.word	0x3e5ae5e6
 8016a74:	57b1fe7d 	.word	0x57b1fe7d
 8016a78:	3ec71de3 	.word	0x3ec71de3
 8016a7c:	19c161d5 	.word	0x19c161d5
 8016a80:	3f2a01a0 	.word	0x3f2a01a0
 8016a84:	1110f8a6 	.word	0x1110f8a6
 8016a88:	3f811111 	.word	0x3f811111
 8016a8c:	00000000 	.word	0x00000000

08016a90 <__ieee754_atan2>:
 8016a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a94:	ec57 6b11 	vmov	r6, r7, d1
 8016a98:	4273      	negs	r3, r6
 8016a9a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8016c18 <__ieee754_atan2+0x188>
 8016a9e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8016aa2:	4333      	orrs	r3, r6
 8016aa4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8016aa8:	4543      	cmp	r3, r8
 8016aaa:	ec51 0b10 	vmov	r0, r1, d0
 8016aae:	4635      	mov	r5, r6
 8016ab0:	d809      	bhi.n	8016ac6 <__ieee754_atan2+0x36>
 8016ab2:	4244      	negs	r4, r0
 8016ab4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8016ab8:	4304      	orrs	r4, r0
 8016aba:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8016abe:	4544      	cmp	r4, r8
 8016ac0:	468e      	mov	lr, r1
 8016ac2:	4681      	mov	r9, r0
 8016ac4:	d907      	bls.n	8016ad6 <__ieee754_atan2+0x46>
 8016ac6:	4632      	mov	r2, r6
 8016ac8:	463b      	mov	r3, r7
 8016aca:	f7e9 fbef 	bl	80002ac <__adddf3>
 8016ace:	ec41 0b10 	vmov	d0, r0, r1
 8016ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ad6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8016ada:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8016ade:	4334      	orrs	r4, r6
 8016ae0:	d103      	bne.n	8016aea <__ieee754_atan2+0x5a>
 8016ae2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ae6:	f000 bb9f 	b.w	8017228 <atan>
 8016aea:	17bc      	asrs	r4, r7, #30
 8016aec:	f004 0402 	and.w	r4, r4, #2
 8016af0:	ea53 0909 	orrs.w	r9, r3, r9
 8016af4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8016af8:	d107      	bne.n	8016b0a <__ieee754_atan2+0x7a>
 8016afa:	2c02      	cmp	r4, #2
 8016afc:	d05f      	beq.n	8016bbe <__ieee754_atan2+0x12e>
 8016afe:	2c03      	cmp	r4, #3
 8016b00:	d1e5      	bne.n	8016ace <__ieee754_atan2+0x3e>
 8016b02:	a143      	add	r1, pc, #268	@ (adr r1, 8016c10 <__ieee754_atan2+0x180>)
 8016b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b08:	e7e1      	b.n	8016ace <__ieee754_atan2+0x3e>
 8016b0a:	4315      	orrs	r5, r2
 8016b0c:	d106      	bne.n	8016b1c <__ieee754_atan2+0x8c>
 8016b0e:	f1be 0f00 	cmp.w	lr, #0
 8016b12:	db5f      	blt.n	8016bd4 <__ieee754_atan2+0x144>
 8016b14:	a136      	add	r1, pc, #216	@ (adr r1, 8016bf0 <__ieee754_atan2+0x160>)
 8016b16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b1a:	e7d8      	b.n	8016ace <__ieee754_atan2+0x3e>
 8016b1c:	4542      	cmp	r2, r8
 8016b1e:	d10f      	bne.n	8016b40 <__ieee754_atan2+0xb0>
 8016b20:	4293      	cmp	r3, r2
 8016b22:	f104 34ff 	add.w	r4, r4, #4294967295
 8016b26:	d107      	bne.n	8016b38 <__ieee754_atan2+0xa8>
 8016b28:	2c02      	cmp	r4, #2
 8016b2a:	d84c      	bhi.n	8016bc6 <__ieee754_atan2+0x136>
 8016b2c:	4b36      	ldr	r3, [pc, #216]	@ (8016c08 <__ieee754_atan2+0x178>)
 8016b2e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016b32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016b36:	e7ca      	b.n	8016ace <__ieee754_atan2+0x3e>
 8016b38:	2c02      	cmp	r4, #2
 8016b3a:	d848      	bhi.n	8016bce <__ieee754_atan2+0x13e>
 8016b3c:	4b33      	ldr	r3, [pc, #204]	@ (8016c0c <__ieee754_atan2+0x17c>)
 8016b3e:	e7f6      	b.n	8016b2e <__ieee754_atan2+0x9e>
 8016b40:	4543      	cmp	r3, r8
 8016b42:	d0e4      	beq.n	8016b0e <__ieee754_atan2+0x7e>
 8016b44:	1a9b      	subs	r3, r3, r2
 8016b46:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8016b4a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016b4e:	da1e      	bge.n	8016b8e <__ieee754_atan2+0xfe>
 8016b50:	2f00      	cmp	r7, #0
 8016b52:	da01      	bge.n	8016b58 <__ieee754_atan2+0xc8>
 8016b54:	323c      	adds	r2, #60	@ 0x3c
 8016b56:	db1e      	blt.n	8016b96 <__ieee754_atan2+0x106>
 8016b58:	4632      	mov	r2, r6
 8016b5a:	463b      	mov	r3, r7
 8016b5c:	f7e9 fe86 	bl	800086c <__aeabi_ddiv>
 8016b60:	ec41 0b10 	vmov	d0, r0, r1
 8016b64:	f000 fcf8 	bl	8017558 <fabs>
 8016b68:	f000 fb5e 	bl	8017228 <atan>
 8016b6c:	ec51 0b10 	vmov	r0, r1, d0
 8016b70:	2c01      	cmp	r4, #1
 8016b72:	d013      	beq.n	8016b9c <__ieee754_atan2+0x10c>
 8016b74:	2c02      	cmp	r4, #2
 8016b76:	d015      	beq.n	8016ba4 <__ieee754_atan2+0x114>
 8016b78:	2c00      	cmp	r4, #0
 8016b7a:	d0a8      	beq.n	8016ace <__ieee754_atan2+0x3e>
 8016b7c:	a318      	add	r3, pc, #96	@ (adr r3, 8016be0 <__ieee754_atan2+0x150>)
 8016b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b82:	f7e9 fb91 	bl	80002a8 <__aeabi_dsub>
 8016b86:	a318      	add	r3, pc, #96	@ (adr r3, 8016be8 <__ieee754_atan2+0x158>)
 8016b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b8c:	e014      	b.n	8016bb8 <__ieee754_atan2+0x128>
 8016b8e:	a118      	add	r1, pc, #96	@ (adr r1, 8016bf0 <__ieee754_atan2+0x160>)
 8016b90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b94:	e7ec      	b.n	8016b70 <__ieee754_atan2+0xe0>
 8016b96:	2000      	movs	r0, #0
 8016b98:	2100      	movs	r1, #0
 8016b9a:	e7e9      	b.n	8016b70 <__ieee754_atan2+0xe0>
 8016b9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016ba0:	4619      	mov	r1, r3
 8016ba2:	e794      	b.n	8016ace <__ieee754_atan2+0x3e>
 8016ba4:	a30e      	add	r3, pc, #56	@ (adr r3, 8016be0 <__ieee754_atan2+0x150>)
 8016ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016baa:	f7e9 fb7d 	bl	80002a8 <__aeabi_dsub>
 8016bae:	4602      	mov	r2, r0
 8016bb0:	460b      	mov	r3, r1
 8016bb2:	a10d      	add	r1, pc, #52	@ (adr r1, 8016be8 <__ieee754_atan2+0x158>)
 8016bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016bb8:	f7e9 fb76 	bl	80002a8 <__aeabi_dsub>
 8016bbc:	e787      	b.n	8016ace <__ieee754_atan2+0x3e>
 8016bbe:	a10a      	add	r1, pc, #40	@ (adr r1, 8016be8 <__ieee754_atan2+0x158>)
 8016bc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016bc4:	e783      	b.n	8016ace <__ieee754_atan2+0x3e>
 8016bc6:	a10c      	add	r1, pc, #48	@ (adr r1, 8016bf8 <__ieee754_atan2+0x168>)
 8016bc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016bcc:	e77f      	b.n	8016ace <__ieee754_atan2+0x3e>
 8016bce:	2000      	movs	r0, #0
 8016bd0:	2100      	movs	r1, #0
 8016bd2:	e77c      	b.n	8016ace <__ieee754_atan2+0x3e>
 8016bd4:	a10a      	add	r1, pc, #40	@ (adr r1, 8016c00 <__ieee754_atan2+0x170>)
 8016bd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016bda:	e778      	b.n	8016ace <__ieee754_atan2+0x3e>
 8016bdc:	f3af 8000 	nop.w
 8016be0:	33145c07 	.word	0x33145c07
 8016be4:	3ca1a626 	.word	0x3ca1a626
 8016be8:	54442d18 	.word	0x54442d18
 8016bec:	400921fb 	.word	0x400921fb
 8016bf0:	54442d18 	.word	0x54442d18
 8016bf4:	3ff921fb 	.word	0x3ff921fb
 8016bf8:	54442d18 	.word	0x54442d18
 8016bfc:	3fe921fb 	.word	0x3fe921fb
 8016c00:	54442d18 	.word	0x54442d18
 8016c04:	bff921fb 	.word	0xbff921fb
 8016c08:	08018ef0 	.word	0x08018ef0
 8016c0c:	08018ed8 	.word	0x08018ed8
 8016c10:	54442d18 	.word	0x54442d18
 8016c14:	c00921fb 	.word	0xc00921fb
 8016c18:	7ff00000 	.word	0x7ff00000

08016c1c <__ieee754_fmod>:
 8016c1c:	ec53 2b11 	vmov	r2, r3, d1
 8016c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c24:	f023 4800 	bic.w	r8, r3, #2147483648	@ 0x80000000
 8016c28:	ea52 0408 	orrs.w	r4, r2, r8
 8016c2c:	ec51 0b10 	vmov	r0, r1, d0
 8016c30:	461e      	mov	r6, r3
 8016c32:	4696      	mov	lr, r2
 8016c34:	4694      	mov	ip, r2
 8016c36:	d00c      	beq.n	8016c52 <__ieee754_fmod+0x36>
 8016c38:	4d76      	ldr	r5, [pc, #472]	@ (8016e14 <__ieee754_fmod+0x1f8>)
 8016c3a:	f021 4900 	bic.w	r9, r1, #2147483648	@ 0x80000000
 8016c3e:	45a9      	cmp	r9, r5
 8016c40:	460c      	mov	r4, r1
 8016c42:	d806      	bhi.n	8016c52 <__ieee754_fmod+0x36>
 8016c44:	4255      	negs	r5, r2
 8016c46:	4f74      	ldr	r7, [pc, #464]	@ (8016e18 <__ieee754_fmod+0x1fc>)
 8016c48:	4315      	orrs	r5, r2
 8016c4a:	ea48 75d5 	orr.w	r5, r8, r5, lsr #31
 8016c4e:	42bd      	cmp	r5, r7
 8016c50:	d909      	bls.n	8016c66 <__ieee754_fmod+0x4a>
 8016c52:	f7e9 fce1 	bl	8000618 <__aeabi_dmul>
 8016c56:	4602      	mov	r2, r0
 8016c58:	460b      	mov	r3, r1
 8016c5a:	f7e9 fe07 	bl	800086c <__aeabi_ddiv>
 8016c5e:	ec41 0b10 	vmov	d0, r0, r1
 8016c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c66:	45c1      	cmp	r9, r8
 8016c68:	4682      	mov	sl, r0
 8016c6a:	4607      	mov	r7, r0
 8016c6c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8016c70:	dc09      	bgt.n	8016c86 <__ieee754_fmod+0x6a>
 8016c72:	dbf4      	blt.n	8016c5e <__ieee754_fmod+0x42>
 8016c74:	4282      	cmp	r2, r0
 8016c76:	d8f2      	bhi.n	8016c5e <__ieee754_fmod+0x42>
 8016c78:	d105      	bne.n	8016c86 <__ieee754_fmod+0x6a>
 8016c7a:	4b68      	ldr	r3, [pc, #416]	@ (8016e1c <__ieee754_fmod+0x200>)
 8016c7c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8016c80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016c84:	e7eb      	b.n	8016c5e <__ieee754_fmod+0x42>
 8016c86:	4964      	ldr	r1, [pc, #400]	@ (8016e18 <__ieee754_fmod+0x1fc>)
 8016c88:	420c      	tst	r4, r1
 8016c8a:	d148      	bne.n	8016d1e <__ieee754_fmod+0x102>
 8016c8c:	f1b9 0f00 	cmp.w	r9, #0
 8016c90:	d13d      	bne.n	8016d0e <__ieee754_fmod+0xf2>
 8016c92:	4a63      	ldr	r2, [pc, #396]	@ (8016e20 <__ieee754_fmod+0x204>)
 8016c94:	4653      	mov	r3, sl
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	dc36      	bgt.n	8016d08 <__ieee754_fmod+0xec>
 8016c9a:	420e      	tst	r6, r1
 8016c9c:	d14f      	bne.n	8016d3e <__ieee754_fmod+0x122>
 8016c9e:	f1b8 0f00 	cmp.w	r8, #0
 8016ca2:	d144      	bne.n	8016d2e <__ieee754_fmod+0x112>
 8016ca4:	4b5e      	ldr	r3, [pc, #376]	@ (8016e20 <__ieee754_fmod+0x204>)
 8016ca6:	4671      	mov	r1, lr
 8016ca8:	2900      	cmp	r1, #0
 8016caa:	dc3d      	bgt.n	8016d28 <__ieee754_fmod+0x10c>
 8016cac:	485d      	ldr	r0, [pc, #372]	@ (8016e24 <__ieee754_fmod+0x208>)
 8016cae:	4282      	cmp	r2, r0
 8016cb0:	db4a      	blt.n	8016d48 <__ieee754_fmod+0x12c>
 8016cb2:	f3c4 0113 	ubfx	r1, r4, #0, #20
 8016cb6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8016cba:	485a      	ldr	r0, [pc, #360]	@ (8016e24 <__ieee754_fmod+0x208>)
 8016cbc:	4283      	cmp	r3, r0
 8016cbe:	db57      	blt.n	8016d70 <__ieee754_fmod+0x154>
 8016cc0:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8016cc4:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8016cc8:	1ad0      	subs	r0, r2, r3
 8016cca:	1b8a      	subs	r2, r1, r6
 8016ccc:	eba7 040c 	sub.w	r4, r7, ip
 8016cd0:	2800      	cmp	r0, #0
 8016cd2:	d162      	bne.n	8016d9a <__ieee754_fmod+0x17e>
 8016cd4:	4567      	cmp	r7, ip
 8016cd6:	bf38      	it	cc
 8016cd8:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8016cdc:	2a00      	cmp	r2, #0
 8016cde:	bfbc      	itt	lt
 8016ce0:	463c      	movlt	r4, r7
 8016ce2:	460a      	movlt	r2, r1
 8016ce4:	ea52 0104 	orrs.w	r1, r2, r4
 8016ce8:	d0c7      	beq.n	8016c7a <__ieee754_fmod+0x5e>
 8016cea:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8016cee:	db69      	blt.n	8016dc4 <__ieee754_fmod+0x1a8>
 8016cf0:	494c      	ldr	r1, [pc, #304]	@ (8016e24 <__ieee754_fmod+0x208>)
 8016cf2:	428b      	cmp	r3, r1
 8016cf4:	db6c      	blt.n	8016dd0 <__ieee754_fmod+0x1b4>
 8016cf6:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 8016cfa:	432a      	orrs	r2, r5
 8016cfc:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8016d00:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 8016d04:	4620      	mov	r0, r4
 8016d06:	e7aa      	b.n	8016c5e <__ieee754_fmod+0x42>
 8016d08:	3a01      	subs	r2, #1
 8016d0a:	005b      	lsls	r3, r3, #1
 8016d0c:	e7c3      	b.n	8016c96 <__ieee754_fmod+0x7a>
 8016d0e:	4a45      	ldr	r2, [pc, #276]	@ (8016e24 <__ieee754_fmod+0x208>)
 8016d10:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	ddc0      	ble.n	8016c9a <__ieee754_fmod+0x7e>
 8016d18:	3a01      	subs	r2, #1
 8016d1a:	005b      	lsls	r3, r3, #1
 8016d1c:	e7fa      	b.n	8016d14 <__ieee754_fmod+0xf8>
 8016d1e:	ea4f 5229 	mov.w	r2, r9, asr #20
 8016d22:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8016d26:	e7b8      	b.n	8016c9a <__ieee754_fmod+0x7e>
 8016d28:	3b01      	subs	r3, #1
 8016d2a:	0049      	lsls	r1, r1, #1
 8016d2c:	e7bc      	b.n	8016ca8 <__ieee754_fmod+0x8c>
 8016d2e:	4b3d      	ldr	r3, [pc, #244]	@ (8016e24 <__ieee754_fmod+0x208>)
 8016d30:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8016d34:	2900      	cmp	r1, #0
 8016d36:	ddb9      	ble.n	8016cac <__ieee754_fmod+0x90>
 8016d38:	3b01      	subs	r3, #1
 8016d3a:	0049      	lsls	r1, r1, #1
 8016d3c:	e7fa      	b.n	8016d34 <__ieee754_fmod+0x118>
 8016d3e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016d42:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8016d46:	e7b1      	b.n	8016cac <__ieee754_fmod+0x90>
 8016d48:	1a80      	subs	r0, r0, r2
 8016d4a:	281f      	cmp	r0, #31
 8016d4c:	dc0a      	bgt.n	8016d64 <__ieee754_fmod+0x148>
 8016d4e:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 8016d52:	fa09 f900 	lsl.w	r9, r9, r0
 8016d56:	fa2a f101 	lsr.w	r1, sl, r1
 8016d5a:	ea41 0109 	orr.w	r1, r1, r9
 8016d5e:	fa0a f700 	lsl.w	r7, sl, r0
 8016d62:	e7aa      	b.n	8016cba <__ieee754_fmod+0x9e>
 8016d64:	4930      	ldr	r1, [pc, #192]	@ (8016e28 <__ieee754_fmod+0x20c>)
 8016d66:	1a89      	subs	r1, r1, r2
 8016d68:	fa0a f101 	lsl.w	r1, sl, r1
 8016d6c:	2700      	movs	r7, #0
 8016d6e:	e7a4      	b.n	8016cba <__ieee754_fmod+0x9e>
 8016d70:	1ac0      	subs	r0, r0, r3
 8016d72:	281f      	cmp	r0, #31
 8016d74:	dc0a      	bgt.n	8016d8c <__ieee754_fmod+0x170>
 8016d76:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 8016d7a:	fa08 f800 	lsl.w	r8, r8, r0
 8016d7e:	fa2e f606 	lsr.w	r6, lr, r6
 8016d82:	ea46 0608 	orr.w	r6, r6, r8
 8016d86:	fa0e fc00 	lsl.w	ip, lr, r0
 8016d8a:	e79d      	b.n	8016cc8 <__ieee754_fmod+0xac>
 8016d8c:	4e26      	ldr	r6, [pc, #152]	@ (8016e28 <__ieee754_fmod+0x20c>)
 8016d8e:	1af6      	subs	r6, r6, r3
 8016d90:	fa0e f606 	lsl.w	r6, lr, r6
 8016d94:	f04f 0c00 	mov.w	ip, #0
 8016d98:	e796      	b.n	8016cc8 <__ieee754_fmod+0xac>
 8016d9a:	4567      	cmp	r7, ip
 8016d9c:	bf38      	it	cc
 8016d9e:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8016da2:	2a00      	cmp	r2, #0
 8016da4:	da05      	bge.n	8016db2 <__ieee754_fmod+0x196>
 8016da6:	0ffa      	lsrs	r2, r7, #31
 8016da8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8016dac:	007f      	lsls	r7, r7, #1
 8016dae:	3801      	subs	r0, #1
 8016db0:	e78b      	b.n	8016cca <__ieee754_fmod+0xae>
 8016db2:	ea52 0104 	orrs.w	r1, r2, r4
 8016db6:	f43f af60 	beq.w	8016c7a <__ieee754_fmod+0x5e>
 8016dba:	0fe1      	lsrs	r1, r4, #31
 8016dbc:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8016dc0:	0067      	lsls	r7, r4, #1
 8016dc2:	e7f4      	b.n	8016dae <__ieee754_fmod+0x192>
 8016dc4:	0fe1      	lsrs	r1, r4, #31
 8016dc6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8016dca:	0064      	lsls	r4, r4, #1
 8016dcc:	3b01      	subs	r3, #1
 8016dce:	e78c      	b.n	8016cea <__ieee754_fmod+0xce>
 8016dd0:	1ac9      	subs	r1, r1, r3
 8016dd2:	2914      	cmp	r1, #20
 8016dd4:	dc0a      	bgt.n	8016dec <__ieee754_fmod+0x1d0>
 8016dd6:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 8016dda:	fa02 f303 	lsl.w	r3, r2, r3
 8016dde:	40cc      	lsrs	r4, r1
 8016de0:	4323      	orrs	r3, r4
 8016de2:	410a      	asrs	r2, r1
 8016de4:	ea42 0105 	orr.w	r1, r2, r5
 8016de8:	4618      	mov	r0, r3
 8016dea:	e738      	b.n	8016c5e <__ieee754_fmod+0x42>
 8016dec:	291f      	cmp	r1, #31
 8016dee:	dc07      	bgt.n	8016e00 <__ieee754_fmod+0x1e4>
 8016df0:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 8016df4:	40cc      	lsrs	r4, r1
 8016df6:	fa02 f303 	lsl.w	r3, r2, r3
 8016dfa:	4323      	orrs	r3, r4
 8016dfc:	462a      	mov	r2, r5
 8016dfe:	e7f1      	b.n	8016de4 <__ieee754_fmod+0x1c8>
 8016e00:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 8016e04:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8016e08:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 8016e0c:	33e2      	adds	r3, #226	@ 0xe2
 8016e0e:	fa42 f303 	asr.w	r3, r2, r3
 8016e12:	e7f3      	b.n	8016dfc <__ieee754_fmod+0x1e0>
 8016e14:	7fefffff 	.word	0x7fefffff
 8016e18:	7ff00000 	.word	0x7ff00000
 8016e1c:	08018f08 	.word	0x08018f08
 8016e20:	fffffbed 	.word	0xfffffbed
 8016e24:	fffffc02 	.word	0xfffffc02
 8016e28:	fffffbe2 	.word	0xfffffbe2
 8016e2c:	00000000 	.word	0x00000000

08016e30 <__ieee754_rem_pio2>:
 8016e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e34:	ec57 6b10 	vmov	r6, r7, d0
 8016e38:	4bc5      	ldr	r3, [pc, #788]	@ (8017150 <__ieee754_rem_pio2+0x320>)
 8016e3a:	b08d      	sub	sp, #52	@ 0x34
 8016e3c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8016e40:	4598      	cmp	r8, r3
 8016e42:	4604      	mov	r4, r0
 8016e44:	9704      	str	r7, [sp, #16]
 8016e46:	d807      	bhi.n	8016e58 <__ieee754_rem_pio2+0x28>
 8016e48:	2200      	movs	r2, #0
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	ed80 0b00 	vstr	d0, [r0]
 8016e50:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8016e54:	2500      	movs	r5, #0
 8016e56:	e028      	b.n	8016eaa <__ieee754_rem_pio2+0x7a>
 8016e58:	4bbe      	ldr	r3, [pc, #760]	@ (8017154 <__ieee754_rem_pio2+0x324>)
 8016e5a:	4598      	cmp	r8, r3
 8016e5c:	d878      	bhi.n	8016f50 <__ieee754_rem_pio2+0x120>
 8016e5e:	9b04      	ldr	r3, [sp, #16]
 8016e60:	4dbd      	ldr	r5, [pc, #756]	@ (8017158 <__ieee754_rem_pio2+0x328>)
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	4630      	mov	r0, r6
 8016e66:	a3ac      	add	r3, pc, #688	@ (adr r3, 8017118 <__ieee754_rem_pio2+0x2e8>)
 8016e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e6c:	4639      	mov	r1, r7
 8016e6e:	dd38      	ble.n	8016ee2 <__ieee754_rem_pio2+0xb2>
 8016e70:	f7e9 fa1a 	bl	80002a8 <__aeabi_dsub>
 8016e74:	45a8      	cmp	r8, r5
 8016e76:	4606      	mov	r6, r0
 8016e78:	460f      	mov	r7, r1
 8016e7a:	d01a      	beq.n	8016eb2 <__ieee754_rem_pio2+0x82>
 8016e7c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8017120 <__ieee754_rem_pio2+0x2f0>)
 8016e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e82:	f7e9 fa11 	bl	80002a8 <__aeabi_dsub>
 8016e86:	4602      	mov	r2, r0
 8016e88:	460b      	mov	r3, r1
 8016e8a:	4680      	mov	r8, r0
 8016e8c:	4689      	mov	r9, r1
 8016e8e:	4630      	mov	r0, r6
 8016e90:	4639      	mov	r1, r7
 8016e92:	f7e9 fa09 	bl	80002a8 <__aeabi_dsub>
 8016e96:	a3a2      	add	r3, pc, #648	@ (adr r3, 8017120 <__ieee754_rem_pio2+0x2f0>)
 8016e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e9c:	f7e9 fa04 	bl	80002a8 <__aeabi_dsub>
 8016ea0:	e9c4 8900 	strd	r8, r9, [r4]
 8016ea4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016ea8:	2501      	movs	r5, #1
 8016eaa:	4628      	mov	r0, r5
 8016eac:	b00d      	add	sp, #52	@ 0x34
 8016eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016eb2:	a39d      	add	r3, pc, #628	@ (adr r3, 8017128 <__ieee754_rem_pio2+0x2f8>)
 8016eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eb8:	f7e9 f9f6 	bl	80002a8 <__aeabi_dsub>
 8016ebc:	a39c      	add	r3, pc, #624	@ (adr r3, 8017130 <__ieee754_rem_pio2+0x300>)
 8016ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ec2:	4606      	mov	r6, r0
 8016ec4:	460f      	mov	r7, r1
 8016ec6:	f7e9 f9ef 	bl	80002a8 <__aeabi_dsub>
 8016eca:	4602      	mov	r2, r0
 8016ecc:	460b      	mov	r3, r1
 8016ece:	4680      	mov	r8, r0
 8016ed0:	4689      	mov	r9, r1
 8016ed2:	4630      	mov	r0, r6
 8016ed4:	4639      	mov	r1, r7
 8016ed6:	f7e9 f9e7 	bl	80002a8 <__aeabi_dsub>
 8016eda:	a395      	add	r3, pc, #596	@ (adr r3, 8017130 <__ieee754_rem_pio2+0x300>)
 8016edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ee0:	e7dc      	b.n	8016e9c <__ieee754_rem_pio2+0x6c>
 8016ee2:	f7e9 f9e3 	bl	80002ac <__adddf3>
 8016ee6:	45a8      	cmp	r8, r5
 8016ee8:	4606      	mov	r6, r0
 8016eea:	460f      	mov	r7, r1
 8016eec:	d018      	beq.n	8016f20 <__ieee754_rem_pio2+0xf0>
 8016eee:	a38c      	add	r3, pc, #560	@ (adr r3, 8017120 <__ieee754_rem_pio2+0x2f0>)
 8016ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ef4:	f7e9 f9da 	bl	80002ac <__adddf3>
 8016ef8:	4602      	mov	r2, r0
 8016efa:	460b      	mov	r3, r1
 8016efc:	4680      	mov	r8, r0
 8016efe:	4689      	mov	r9, r1
 8016f00:	4630      	mov	r0, r6
 8016f02:	4639      	mov	r1, r7
 8016f04:	f7e9 f9d0 	bl	80002a8 <__aeabi_dsub>
 8016f08:	a385      	add	r3, pc, #532	@ (adr r3, 8017120 <__ieee754_rem_pio2+0x2f0>)
 8016f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f0e:	f7e9 f9cd 	bl	80002ac <__adddf3>
 8016f12:	f04f 35ff 	mov.w	r5, #4294967295
 8016f16:	e9c4 8900 	strd	r8, r9, [r4]
 8016f1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016f1e:	e7c4      	b.n	8016eaa <__ieee754_rem_pio2+0x7a>
 8016f20:	a381      	add	r3, pc, #516	@ (adr r3, 8017128 <__ieee754_rem_pio2+0x2f8>)
 8016f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f26:	f7e9 f9c1 	bl	80002ac <__adddf3>
 8016f2a:	a381      	add	r3, pc, #516	@ (adr r3, 8017130 <__ieee754_rem_pio2+0x300>)
 8016f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f30:	4606      	mov	r6, r0
 8016f32:	460f      	mov	r7, r1
 8016f34:	f7e9 f9ba 	bl	80002ac <__adddf3>
 8016f38:	4602      	mov	r2, r0
 8016f3a:	460b      	mov	r3, r1
 8016f3c:	4680      	mov	r8, r0
 8016f3e:	4689      	mov	r9, r1
 8016f40:	4630      	mov	r0, r6
 8016f42:	4639      	mov	r1, r7
 8016f44:	f7e9 f9b0 	bl	80002a8 <__aeabi_dsub>
 8016f48:	a379      	add	r3, pc, #484	@ (adr r3, 8017130 <__ieee754_rem_pio2+0x300>)
 8016f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f4e:	e7de      	b.n	8016f0e <__ieee754_rem_pio2+0xde>
 8016f50:	4b82      	ldr	r3, [pc, #520]	@ (801715c <__ieee754_rem_pio2+0x32c>)
 8016f52:	4598      	cmp	r8, r3
 8016f54:	f200 80d1 	bhi.w	80170fa <__ieee754_rem_pio2+0x2ca>
 8016f58:	f000 fafe 	bl	8017558 <fabs>
 8016f5c:	ec57 6b10 	vmov	r6, r7, d0
 8016f60:	a375      	add	r3, pc, #468	@ (adr r3, 8017138 <__ieee754_rem_pio2+0x308>)
 8016f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f66:	4630      	mov	r0, r6
 8016f68:	4639      	mov	r1, r7
 8016f6a:	f7e9 fb55 	bl	8000618 <__aeabi_dmul>
 8016f6e:	4b7c      	ldr	r3, [pc, #496]	@ (8017160 <__ieee754_rem_pio2+0x330>)
 8016f70:	2200      	movs	r2, #0
 8016f72:	f7e9 f99b 	bl	80002ac <__adddf3>
 8016f76:	f7e9 fdff 	bl	8000b78 <__aeabi_d2iz>
 8016f7a:	4605      	mov	r5, r0
 8016f7c:	f7e9 fae2 	bl	8000544 <__aeabi_i2d>
 8016f80:	4602      	mov	r2, r0
 8016f82:	460b      	mov	r3, r1
 8016f84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016f88:	a363      	add	r3, pc, #396	@ (adr r3, 8017118 <__ieee754_rem_pio2+0x2e8>)
 8016f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f8e:	f7e9 fb43 	bl	8000618 <__aeabi_dmul>
 8016f92:	4602      	mov	r2, r0
 8016f94:	460b      	mov	r3, r1
 8016f96:	4630      	mov	r0, r6
 8016f98:	4639      	mov	r1, r7
 8016f9a:	f7e9 f985 	bl	80002a8 <__aeabi_dsub>
 8016f9e:	a360      	add	r3, pc, #384	@ (adr r3, 8017120 <__ieee754_rem_pio2+0x2f0>)
 8016fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fa4:	4682      	mov	sl, r0
 8016fa6:	468b      	mov	fp, r1
 8016fa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016fac:	f7e9 fb34 	bl	8000618 <__aeabi_dmul>
 8016fb0:	2d1f      	cmp	r5, #31
 8016fb2:	4606      	mov	r6, r0
 8016fb4:	460f      	mov	r7, r1
 8016fb6:	dc0c      	bgt.n	8016fd2 <__ieee754_rem_pio2+0x1a2>
 8016fb8:	4b6a      	ldr	r3, [pc, #424]	@ (8017164 <__ieee754_rem_pio2+0x334>)
 8016fba:	1e6a      	subs	r2, r5, #1
 8016fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fc0:	4543      	cmp	r3, r8
 8016fc2:	d006      	beq.n	8016fd2 <__ieee754_rem_pio2+0x1a2>
 8016fc4:	4632      	mov	r2, r6
 8016fc6:	463b      	mov	r3, r7
 8016fc8:	4650      	mov	r0, sl
 8016fca:	4659      	mov	r1, fp
 8016fcc:	f7e9 f96c 	bl	80002a8 <__aeabi_dsub>
 8016fd0:	e00e      	b.n	8016ff0 <__ieee754_rem_pio2+0x1c0>
 8016fd2:	463b      	mov	r3, r7
 8016fd4:	4632      	mov	r2, r6
 8016fd6:	4650      	mov	r0, sl
 8016fd8:	4659      	mov	r1, fp
 8016fda:	f7e9 f965 	bl	80002a8 <__aeabi_dsub>
 8016fde:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016fe2:	9305      	str	r3, [sp, #20]
 8016fe4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016fe8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8016fec:	2b10      	cmp	r3, #16
 8016fee:	dc02      	bgt.n	8016ff6 <__ieee754_rem_pio2+0x1c6>
 8016ff0:	e9c4 0100 	strd	r0, r1, [r4]
 8016ff4:	e039      	b.n	801706a <__ieee754_rem_pio2+0x23a>
 8016ff6:	a34c      	add	r3, pc, #304	@ (adr r3, 8017128 <__ieee754_rem_pio2+0x2f8>)
 8016ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017000:	f7e9 fb0a 	bl	8000618 <__aeabi_dmul>
 8017004:	4606      	mov	r6, r0
 8017006:	460f      	mov	r7, r1
 8017008:	4602      	mov	r2, r0
 801700a:	460b      	mov	r3, r1
 801700c:	4650      	mov	r0, sl
 801700e:	4659      	mov	r1, fp
 8017010:	f7e9 f94a 	bl	80002a8 <__aeabi_dsub>
 8017014:	4602      	mov	r2, r0
 8017016:	460b      	mov	r3, r1
 8017018:	4680      	mov	r8, r0
 801701a:	4689      	mov	r9, r1
 801701c:	4650      	mov	r0, sl
 801701e:	4659      	mov	r1, fp
 8017020:	f7e9 f942 	bl	80002a8 <__aeabi_dsub>
 8017024:	4632      	mov	r2, r6
 8017026:	463b      	mov	r3, r7
 8017028:	f7e9 f93e 	bl	80002a8 <__aeabi_dsub>
 801702c:	a340      	add	r3, pc, #256	@ (adr r3, 8017130 <__ieee754_rem_pio2+0x300>)
 801702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017032:	4606      	mov	r6, r0
 8017034:	460f      	mov	r7, r1
 8017036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801703a:	f7e9 faed 	bl	8000618 <__aeabi_dmul>
 801703e:	4632      	mov	r2, r6
 8017040:	463b      	mov	r3, r7
 8017042:	f7e9 f931 	bl	80002a8 <__aeabi_dsub>
 8017046:	4602      	mov	r2, r0
 8017048:	460b      	mov	r3, r1
 801704a:	4606      	mov	r6, r0
 801704c:	460f      	mov	r7, r1
 801704e:	4640      	mov	r0, r8
 8017050:	4649      	mov	r1, r9
 8017052:	f7e9 f929 	bl	80002a8 <__aeabi_dsub>
 8017056:	9a05      	ldr	r2, [sp, #20]
 8017058:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801705c:	1ad3      	subs	r3, r2, r3
 801705e:	2b31      	cmp	r3, #49	@ 0x31
 8017060:	dc20      	bgt.n	80170a4 <__ieee754_rem_pio2+0x274>
 8017062:	e9c4 0100 	strd	r0, r1, [r4]
 8017066:	46c2      	mov	sl, r8
 8017068:	46cb      	mov	fp, r9
 801706a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801706e:	4650      	mov	r0, sl
 8017070:	4642      	mov	r2, r8
 8017072:	464b      	mov	r3, r9
 8017074:	4659      	mov	r1, fp
 8017076:	f7e9 f917 	bl	80002a8 <__aeabi_dsub>
 801707a:	463b      	mov	r3, r7
 801707c:	4632      	mov	r2, r6
 801707e:	f7e9 f913 	bl	80002a8 <__aeabi_dsub>
 8017082:	9b04      	ldr	r3, [sp, #16]
 8017084:	2b00      	cmp	r3, #0
 8017086:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801708a:	f6bf af0e 	bge.w	8016eaa <__ieee754_rem_pio2+0x7a>
 801708e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8017092:	6063      	str	r3, [r4, #4]
 8017094:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017098:	f8c4 8000 	str.w	r8, [r4]
 801709c:	60a0      	str	r0, [r4, #8]
 801709e:	60e3      	str	r3, [r4, #12]
 80170a0:	426d      	negs	r5, r5
 80170a2:	e702      	b.n	8016eaa <__ieee754_rem_pio2+0x7a>
 80170a4:	a326      	add	r3, pc, #152	@ (adr r3, 8017140 <__ieee754_rem_pio2+0x310>)
 80170a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80170ae:	f7e9 fab3 	bl	8000618 <__aeabi_dmul>
 80170b2:	4606      	mov	r6, r0
 80170b4:	460f      	mov	r7, r1
 80170b6:	4602      	mov	r2, r0
 80170b8:	460b      	mov	r3, r1
 80170ba:	4640      	mov	r0, r8
 80170bc:	4649      	mov	r1, r9
 80170be:	f7e9 f8f3 	bl	80002a8 <__aeabi_dsub>
 80170c2:	4602      	mov	r2, r0
 80170c4:	460b      	mov	r3, r1
 80170c6:	4682      	mov	sl, r0
 80170c8:	468b      	mov	fp, r1
 80170ca:	4640      	mov	r0, r8
 80170cc:	4649      	mov	r1, r9
 80170ce:	f7e9 f8eb 	bl	80002a8 <__aeabi_dsub>
 80170d2:	4632      	mov	r2, r6
 80170d4:	463b      	mov	r3, r7
 80170d6:	f7e9 f8e7 	bl	80002a8 <__aeabi_dsub>
 80170da:	a31b      	add	r3, pc, #108	@ (adr r3, 8017148 <__ieee754_rem_pio2+0x318>)
 80170dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170e0:	4606      	mov	r6, r0
 80170e2:	460f      	mov	r7, r1
 80170e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80170e8:	f7e9 fa96 	bl	8000618 <__aeabi_dmul>
 80170ec:	4632      	mov	r2, r6
 80170ee:	463b      	mov	r3, r7
 80170f0:	f7e9 f8da 	bl	80002a8 <__aeabi_dsub>
 80170f4:	4606      	mov	r6, r0
 80170f6:	460f      	mov	r7, r1
 80170f8:	e764      	b.n	8016fc4 <__ieee754_rem_pio2+0x194>
 80170fa:	4b1b      	ldr	r3, [pc, #108]	@ (8017168 <__ieee754_rem_pio2+0x338>)
 80170fc:	4598      	cmp	r8, r3
 80170fe:	d935      	bls.n	801716c <__ieee754_rem_pio2+0x33c>
 8017100:	4632      	mov	r2, r6
 8017102:	463b      	mov	r3, r7
 8017104:	4630      	mov	r0, r6
 8017106:	4639      	mov	r1, r7
 8017108:	f7e9 f8ce 	bl	80002a8 <__aeabi_dsub>
 801710c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017110:	e9c4 0100 	strd	r0, r1, [r4]
 8017114:	e69e      	b.n	8016e54 <__ieee754_rem_pio2+0x24>
 8017116:	bf00      	nop
 8017118:	54400000 	.word	0x54400000
 801711c:	3ff921fb 	.word	0x3ff921fb
 8017120:	1a626331 	.word	0x1a626331
 8017124:	3dd0b461 	.word	0x3dd0b461
 8017128:	1a600000 	.word	0x1a600000
 801712c:	3dd0b461 	.word	0x3dd0b461
 8017130:	2e037073 	.word	0x2e037073
 8017134:	3ba3198a 	.word	0x3ba3198a
 8017138:	6dc9c883 	.word	0x6dc9c883
 801713c:	3fe45f30 	.word	0x3fe45f30
 8017140:	2e000000 	.word	0x2e000000
 8017144:	3ba3198a 	.word	0x3ba3198a
 8017148:	252049c1 	.word	0x252049c1
 801714c:	397b839a 	.word	0x397b839a
 8017150:	3fe921fb 	.word	0x3fe921fb
 8017154:	4002d97b 	.word	0x4002d97b
 8017158:	3ff921fb 	.word	0x3ff921fb
 801715c:	413921fb 	.word	0x413921fb
 8017160:	3fe00000 	.word	0x3fe00000
 8017164:	08018f18 	.word	0x08018f18
 8017168:	7fefffff 	.word	0x7fefffff
 801716c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8017170:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8017174:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8017178:	4630      	mov	r0, r6
 801717a:	460f      	mov	r7, r1
 801717c:	f7e9 fcfc 	bl	8000b78 <__aeabi_d2iz>
 8017180:	f7e9 f9e0 	bl	8000544 <__aeabi_i2d>
 8017184:	4602      	mov	r2, r0
 8017186:	460b      	mov	r3, r1
 8017188:	4630      	mov	r0, r6
 801718a:	4639      	mov	r1, r7
 801718c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017190:	f7e9 f88a 	bl	80002a8 <__aeabi_dsub>
 8017194:	4b22      	ldr	r3, [pc, #136]	@ (8017220 <__ieee754_rem_pio2+0x3f0>)
 8017196:	2200      	movs	r2, #0
 8017198:	f7e9 fa3e 	bl	8000618 <__aeabi_dmul>
 801719c:	460f      	mov	r7, r1
 801719e:	4606      	mov	r6, r0
 80171a0:	f7e9 fcea 	bl	8000b78 <__aeabi_d2iz>
 80171a4:	f7e9 f9ce 	bl	8000544 <__aeabi_i2d>
 80171a8:	4602      	mov	r2, r0
 80171aa:	460b      	mov	r3, r1
 80171ac:	4630      	mov	r0, r6
 80171ae:	4639      	mov	r1, r7
 80171b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80171b4:	f7e9 f878 	bl	80002a8 <__aeabi_dsub>
 80171b8:	4b19      	ldr	r3, [pc, #100]	@ (8017220 <__ieee754_rem_pio2+0x3f0>)
 80171ba:	2200      	movs	r2, #0
 80171bc:	f7e9 fa2c 	bl	8000618 <__aeabi_dmul>
 80171c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80171c4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80171c8:	f04f 0803 	mov.w	r8, #3
 80171cc:	2600      	movs	r6, #0
 80171ce:	2700      	movs	r7, #0
 80171d0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80171d4:	4632      	mov	r2, r6
 80171d6:	463b      	mov	r3, r7
 80171d8:	46c2      	mov	sl, r8
 80171da:	f108 38ff 	add.w	r8, r8, #4294967295
 80171de:	f7e9 fc83 	bl	8000ae8 <__aeabi_dcmpeq>
 80171e2:	2800      	cmp	r0, #0
 80171e4:	d1f4      	bne.n	80171d0 <__ieee754_rem_pio2+0x3a0>
 80171e6:	4b0f      	ldr	r3, [pc, #60]	@ (8017224 <__ieee754_rem_pio2+0x3f4>)
 80171e8:	9301      	str	r3, [sp, #4]
 80171ea:	2302      	movs	r3, #2
 80171ec:	9300      	str	r3, [sp, #0]
 80171ee:	462a      	mov	r2, r5
 80171f0:	4653      	mov	r3, sl
 80171f2:	4621      	mov	r1, r4
 80171f4:	a806      	add	r0, sp, #24
 80171f6:	f000 f9b7 	bl	8017568 <__kernel_rem_pio2>
 80171fa:	9b04      	ldr	r3, [sp, #16]
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	4605      	mov	r5, r0
 8017200:	f6bf ae53 	bge.w	8016eaa <__ieee754_rem_pio2+0x7a>
 8017204:	e9d4 2100 	ldrd	r2, r1, [r4]
 8017208:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801720c:	e9c4 2300 	strd	r2, r3, [r4]
 8017210:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8017214:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017218:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801721c:	e740      	b.n	80170a0 <__ieee754_rem_pio2+0x270>
 801721e:	bf00      	nop
 8017220:	41700000 	.word	0x41700000
 8017224:	08018f98 	.word	0x08018f98

08017228 <atan>:
 8017228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801722c:	ec55 4b10 	vmov	r4, r5, d0
 8017230:	4bbf      	ldr	r3, [pc, #764]	@ (8017530 <atan+0x308>)
 8017232:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8017236:	429e      	cmp	r6, r3
 8017238:	46ab      	mov	fp, r5
 801723a:	d918      	bls.n	801726e <atan+0x46>
 801723c:	4bbd      	ldr	r3, [pc, #756]	@ (8017534 <atan+0x30c>)
 801723e:	429e      	cmp	r6, r3
 8017240:	d801      	bhi.n	8017246 <atan+0x1e>
 8017242:	d109      	bne.n	8017258 <atan+0x30>
 8017244:	b144      	cbz	r4, 8017258 <atan+0x30>
 8017246:	4622      	mov	r2, r4
 8017248:	462b      	mov	r3, r5
 801724a:	4620      	mov	r0, r4
 801724c:	4629      	mov	r1, r5
 801724e:	f7e9 f82d 	bl	80002ac <__adddf3>
 8017252:	4604      	mov	r4, r0
 8017254:	460d      	mov	r5, r1
 8017256:	e006      	b.n	8017266 <atan+0x3e>
 8017258:	f1bb 0f00 	cmp.w	fp, #0
 801725c:	f340 812b 	ble.w	80174b6 <atan+0x28e>
 8017260:	a597      	add	r5, pc, #604	@ (adr r5, 80174c0 <atan+0x298>)
 8017262:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017266:	ec45 4b10 	vmov	d0, r4, r5
 801726a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801726e:	4bb2      	ldr	r3, [pc, #712]	@ (8017538 <atan+0x310>)
 8017270:	429e      	cmp	r6, r3
 8017272:	d813      	bhi.n	801729c <atan+0x74>
 8017274:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8017278:	429e      	cmp	r6, r3
 801727a:	d80c      	bhi.n	8017296 <atan+0x6e>
 801727c:	a392      	add	r3, pc, #584	@ (adr r3, 80174c8 <atan+0x2a0>)
 801727e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017282:	4620      	mov	r0, r4
 8017284:	4629      	mov	r1, r5
 8017286:	f7e9 f811 	bl	80002ac <__adddf3>
 801728a:	4bac      	ldr	r3, [pc, #688]	@ (801753c <atan+0x314>)
 801728c:	2200      	movs	r2, #0
 801728e:	f7e9 fc53 	bl	8000b38 <__aeabi_dcmpgt>
 8017292:	2800      	cmp	r0, #0
 8017294:	d1e7      	bne.n	8017266 <atan+0x3e>
 8017296:	f04f 3aff 	mov.w	sl, #4294967295
 801729a:	e029      	b.n	80172f0 <atan+0xc8>
 801729c:	f000 f95c 	bl	8017558 <fabs>
 80172a0:	4ba7      	ldr	r3, [pc, #668]	@ (8017540 <atan+0x318>)
 80172a2:	429e      	cmp	r6, r3
 80172a4:	ec55 4b10 	vmov	r4, r5, d0
 80172a8:	f200 80bc 	bhi.w	8017424 <atan+0x1fc>
 80172ac:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80172b0:	429e      	cmp	r6, r3
 80172b2:	f200 809e 	bhi.w	80173f2 <atan+0x1ca>
 80172b6:	4622      	mov	r2, r4
 80172b8:	462b      	mov	r3, r5
 80172ba:	4620      	mov	r0, r4
 80172bc:	4629      	mov	r1, r5
 80172be:	f7e8 fff5 	bl	80002ac <__adddf3>
 80172c2:	4b9e      	ldr	r3, [pc, #632]	@ (801753c <atan+0x314>)
 80172c4:	2200      	movs	r2, #0
 80172c6:	f7e8 ffef 	bl	80002a8 <__aeabi_dsub>
 80172ca:	2200      	movs	r2, #0
 80172cc:	4606      	mov	r6, r0
 80172ce:	460f      	mov	r7, r1
 80172d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80172d4:	4620      	mov	r0, r4
 80172d6:	4629      	mov	r1, r5
 80172d8:	f7e8 ffe8 	bl	80002ac <__adddf3>
 80172dc:	4602      	mov	r2, r0
 80172de:	460b      	mov	r3, r1
 80172e0:	4630      	mov	r0, r6
 80172e2:	4639      	mov	r1, r7
 80172e4:	f7e9 fac2 	bl	800086c <__aeabi_ddiv>
 80172e8:	f04f 0a00 	mov.w	sl, #0
 80172ec:	4604      	mov	r4, r0
 80172ee:	460d      	mov	r5, r1
 80172f0:	4622      	mov	r2, r4
 80172f2:	462b      	mov	r3, r5
 80172f4:	4620      	mov	r0, r4
 80172f6:	4629      	mov	r1, r5
 80172f8:	f7e9 f98e 	bl	8000618 <__aeabi_dmul>
 80172fc:	4602      	mov	r2, r0
 80172fe:	460b      	mov	r3, r1
 8017300:	4680      	mov	r8, r0
 8017302:	4689      	mov	r9, r1
 8017304:	f7e9 f988 	bl	8000618 <__aeabi_dmul>
 8017308:	a371      	add	r3, pc, #452	@ (adr r3, 80174d0 <atan+0x2a8>)
 801730a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801730e:	4606      	mov	r6, r0
 8017310:	460f      	mov	r7, r1
 8017312:	f7e9 f981 	bl	8000618 <__aeabi_dmul>
 8017316:	a370      	add	r3, pc, #448	@ (adr r3, 80174d8 <atan+0x2b0>)
 8017318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801731c:	f7e8 ffc6 	bl	80002ac <__adddf3>
 8017320:	4632      	mov	r2, r6
 8017322:	463b      	mov	r3, r7
 8017324:	f7e9 f978 	bl	8000618 <__aeabi_dmul>
 8017328:	a36d      	add	r3, pc, #436	@ (adr r3, 80174e0 <atan+0x2b8>)
 801732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801732e:	f7e8 ffbd 	bl	80002ac <__adddf3>
 8017332:	4632      	mov	r2, r6
 8017334:	463b      	mov	r3, r7
 8017336:	f7e9 f96f 	bl	8000618 <__aeabi_dmul>
 801733a:	a36b      	add	r3, pc, #428	@ (adr r3, 80174e8 <atan+0x2c0>)
 801733c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017340:	f7e8 ffb4 	bl	80002ac <__adddf3>
 8017344:	4632      	mov	r2, r6
 8017346:	463b      	mov	r3, r7
 8017348:	f7e9 f966 	bl	8000618 <__aeabi_dmul>
 801734c:	a368      	add	r3, pc, #416	@ (adr r3, 80174f0 <atan+0x2c8>)
 801734e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017352:	f7e8 ffab 	bl	80002ac <__adddf3>
 8017356:	4632      	mov	r2, r6
 8017358:	463b      	mov	r3, r7
 801735a:	f7e9 f95d 	bl	8000618 <__aeabi_dmul>
 801735e:	a366      	add	r3, pc, #408	@ (adr r3, 80174f8 <atan+0x2d0>)
 8017360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017364:	f7e8 ffa2 	bl	80002ac <__adddf3>
 8017368:	4642      	mov	r2, r8
 801736a:	464b      	mov	r3, r9
 801736c:	f7e9 f954 	bl	8000618 <__aeabi_dmul>
 8017370:	a363      	add	r3, pc, #396	@ (adr r3, 8017500 <atan+0x2d8>)
 8017372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017376:	4680      	mov	r8, r0
 8017378:	4689      	mov	r9, r1
 801737a:	4630      	mov	r0, r6
 801737c:	4639      	mov	r1, r7
 801737e:	f7e9 f94b 	bl	8000618 <__aeabi_dmul>
 8017382:	a361      	add	r3, pc, #388	@ (adr r3, 8017508 <atan+0x2e0>)
 8017384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017388:	f7e8 ff8e 	bl	80002a8 <__aeabi_dsub>
 801738c:	4632      	mov	r2, r6
 801738e:	463b      	mov	r3, r7
 8017390:	f7e9 f942 	bl	8000618 <__aeabi_dmul>
 8017394:	a35e      	add	r3, pc, #376	@ (adr r3, 8017510 <atan+0x2e8>)
 8017396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801739a:	f7e8 ff85 	bl	80002a8 <__aeabi_dsub>
 801739e:	4632      	mov	r2, r6
 80173a0:	463b      	mov	r3, r7
 80173a2:	f7e9 f939 	bl	8000618 <__aeabi_dmul>
 80173a6:	a35c      	add	r3, pc, #368	@ (adr r3, 8017518 <atan+0x2f0>)
 80173a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173ac:	f7e8 ff7c 	bl	80002a8 <__aeabi_dsub>
 80173b0:	4632      	mov	r2, r6
 80173b2:	463b      	mov	r3, r7
 80173b4:	f7e9 f930 	bl	8000618 <__aeabi_dmul>
 80173b8:	a359      	add	r3, pc, #356	@ (adr r3, 8017520 <atan+0x2f8>)
 80173ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173be:	f7e8 ff73 	bl	80002a8 <__aeabi_dsub>
 80173c2:	4632      	mov	r2, r6
 80173c4:	463b      	mov	r3, r7
 80173c6:	f7e9 f927 	bl	8000618 <__aeabi_dmul>
 80173ca:	4602      	mov	r2, r0
 80173cc:	460b      	mov	r3, r1
 80173ce:	4640      	mov	r0, r8
 80173d0:	4649      	mov	r1, r9
 80173d2:	f7e8 ff6b 	bl	80002ac <__adddf3>
 80173d6:	4622      	mov	r2, r4
 80173d8:	462b      	mov	r3, r5
 80173da:	f7e9 f91d 	bl	8000618 <__aeabi_dmul>
 80173de:	f1ba 3fff 	cmp.w	sl, #4294967295
 80173e2:	4602      	mov	r2, r0
 80173e4:	460b      	mov	r3, r1
 80173e6:	d148      	bne.n	801747a <atan+0x252>
 80173e8:	4620      	mov	r0, r4
 80173ea:	4629      	mov	r1, r5
 80173ec:	f7e8 ff5c 	bl	80002a8 <__aeabi_dsub>
 80173f0:	e72f      	b.n	8017252 <atan+0x2a>
 80173f2:	4b52      	ldr	r3, [pc, #328]	@ (801753c <atan+0x314>)
 80173f4:	2200      	movs	r2, #0
 80173f6:	4620      	mov	r0, r4
 80173f8:	4629      	mov	r1, r5
 80173fa:	f7e8 ff55 	bl	80002a8 <__aeabi_dsub>
 80173fe:	4b4f      	ldr	r3, [pc, #316]	@ (801753c <atan+0x314>)
 8017400:	4606      	mov	r6, r0
 8017402:	460f      	mov	r7, r1
 8017404:	2200      	movs	r2, #0
 8017406:	4620      	mov	r0, r4
 8017408:	4629      	mov	r1, r5
 801740a:	f7e8 ff4f 	bl	80002ac <__adddf3>
 801740e:	4602      	mov	r2, r0
 8017410:	460b      	mov	r3, r1
 8017412:	4630      	mov	r0, r6
 8017414:	4639      	mov	r1, r7
 8017416:	f7e9 fa29 	bl	800086c <__aeabi_ddiv>
 801741a:	f04f 0a01 	mov.w	sl, #1
 801741e:	4604      	mov	r4, r0
 8017420:	460d      	mov	r5, r1
 8017422:	e765      	b.n	80172f0 <atan+0xc8>
 8017424:	4b47      	ldr	r3, [pc, #284]	@ (8017544 <atan+0x31c>)
 8017426:	429e      	cmp	r6, r3
 8017428:	d21c      	bcs.n	8017464 <atan+0x23c>
 801742a:	4b47      	ldr	r3, [pc, #284]	@ (8017548 <atan+0x320>)
 801742c:	2200      	movs	r2, #0
 801742e:	4620      	mov	r0, r4
 8017430:	4629      	mov	r1, r5
 8017432:	f7e8 ff39 	bl	80002a8 <__aeabi_dsub>
 8017436:	4b44      	ldr	r3, [pc, #272]	@ (8017548 <atan+0x320>)
 8017438:	4606      	mov	r6, r0
 801743a:	460f      	mov	r7, r1
 801743c:	2200      	movs	r2, #0
 801743e:	4620      	mov	r0, r4
 8017440:	4629      	mov	r1, r5
 8017442:	f7e9 f8e9 	bl	8000618 <__aeabi_dmul>
 8017446:	4b3d      	ldr	r3, [pc, #244]	@ (801753c <atan+0x314>)
 8017448:	2200      	movs	r2, #0
 801744a:	f7e8 ff2f 	bl	80002ac <__adddf3>
 801744e:	4602      	mov	r2, r0
 8017450:	460b      	mov	r3, r1
 8017452:	4630      	mov	r0, r6
 8017454:	4639      	mov	r1, r7
 8017456:	f7e9 fa09 	bl	800086c <__aeabi_ddiv>
 801745a:	f04f 0a02 	mov.w	sl, #2
 801745e:	4604      	mov	r4, r0
 8017460:	460d      	mov	r5, r1
 8017462:	e745      	b.n	80172f0 <atan+0xc8>
 8017464:	4622      	mov	r2, r4
 8017466:	462b      	mov	r3, r5
 8017468:	4938      	ldr	r1, [pc, #224]	@ (801754c <atan+0x324>)
 801746a:	2000      	movs	r0, #0
 801746c:	f7e9 f9fe 	bl	800086c <__aeabi_ddiv>
 8017470:	f04f 0a03 	mov.w	sl, #3
 8017474:	4604      	mov	r4, r0
 8017476:	460d      	mov	r5, r1
 8017478:	e73a      	b.n	80172f0 <atan+0xc8>
 801747a:	4b35      	ldr	r3, [pc, #212]	@ (8017550 <atan+0x328>)
 801747c:	4e35      	ldr	r6, [pc, #212]	@ (8017554 <atan+0x32c>)
 801747e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017486:	f7e8 ff0f 	bl	80002a8 <__aeabi_dsub>
 801748a:	4622      	mov	r2, r4
 801748c:	462b      	mov	r3, r5
 801748e:	f7e8 ff0b 	bl	80002a8 <__aeabi_dsub>
 8017492:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8017496:	4602      	mov	r2, r0
 8017498:	460b      	mov	r3, r1
 801749a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801749e:	f7e8 ff03 	bl	80002a8 <__aeabi_dsub>
 80174a2:	f1bb 0f00 	cmp.w	fp, #0
 80174a6:	4604      	mov	r4, r0
 80174a8:	460d      	mov	r5, r1
 80174aa:	f6bf aedc 	bge.w	8017266 <atan+0x3e>
 80174ae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80174b2:	461d      	mov	r5, r3
 80174b4:	e6d7      	b.n	8017266 <atan+0x3e>
 80174b6:	a51c      	add	r5, pc, #112	@ (adr r5, 8017528 <atan+0x300>)
 80174b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80174bc:	e6d3      	b.n	8017266 <atan+0x3e>
 80174be:	bf00      	nop
 80174c0:	54442d18 	.word	0x54442d18
 80174c4:	3ff921fb 	.word	0x3ff921fb
 80174c8:	8800759c 	.word	0x8800759c
 80174cc:	7e37e43c 	.word	0x7e37e43c
 80174d0:	e322da11 	.word	0xe322da11
 80174d4:	3f90ad3a 	.word	0x3f90ad3a
 80174d8:	24760deb 	.word	0x24760deb
 80174dc:	3fa97b4b 	.word	0x3fa97b4b
 80174e0:	a0d03d51 	.word	0xa0d03d51
 80174e4:	3fb10d66 	.word	0x3fb10d66
 80174e8:	c54c206e 	.word	0xc54c206e
 80174ec:	3fb745cd 	.word	0x3fb745cd
 80174f0:	920083ff 	.word	0x920083ff
 80174f4:	3fc24924 	.word	0x3fc24924
 80174f8:	5555550d 	.word	0x5555550d
 80174fc:	3fd55555 	.word	0x3fd55555
 8017500:	2c6a6c2f 	.word	0x2c6a6c2f
 8017504:	bfa2b444 	.word	0xbfa2b444
 8017508:	52defd9a 	.word	0x52defd9a
 801750c:	3fadde2d 	.word	0x3fadde2d
 8017510:	af749a6d 	.word	0xaf749a6d
 8017514:	3fb3b0f2 	.word	0x3fb3b0f2
 8017518:	fe231671 	.word	0xfe231671
 801751c:	3fbc71c6 	.word	0x3fbc71c6
 8017520:	9998ebc4 	.word	0x9998ebc4
 8017524:	3fc99999 	.word	0x3fc99999
 8017528:	54442d18 	.word	0x54442d18
 801752c:	bff921fb 	.word	0xbff921fb
 8017530:	440fffff 	.word	0x440fffff
 8017534:	7ff00000 	.word	0x7ff00000
 8017538:	3fdbffff 	.word	0x3fdbffff
 801753c:	3ff00000 	.word	0x3ff00000
 8017540:	3ff2ffff 	.word	0x3ff2ffff
 8017544:	40038000 	.word	0x40038000
 8017548:	3ff80000 	.word	0x3ff80000
 801754c:	bff00000 	.word	0xbff00000
 8017550:	080190a0 	.word	0x080190a0
 8017554:	080190c0 	.word	0x080190c0

08017558 <fabs>:
 8017558:	ec51 0b10 	vmov	r0, r1, d0
 801755c:	4602      	mov	r2, r0
 801755e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8017562:	ec43 2b10 	vmov	d0, r2, r3
 8017566:	4770      	bx	lr

08017568 <__kernel_rem_pio2>:
 8017568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801756c:	ed2d 8b02 	vpush	{d8}
 8017570:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8017574:	f112 0f14 	cmn.w	r2, #20
 8017578:	9306      	str	r3, [sp, #24]
 801757a:	9104      	str	r1, [sp, #16]
 801757c:	4bc2      	ldr	r3, [pc, #776]	@ (8017888 <__kernel_rem_pio2+0x320>)
 801757e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8017580:	9008      	str	r0, [sp, #32]
 8017582:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017586:	9300      	str	r3, [sp, #0]
 8017588:	9b06      	ldr	r3, [sp, #24]
 801758a:	f103 33ff 	add.w	r3, r3, #4294967295
 801758e:	bfa8      	it	ge
 8017590:	1ed4      	subge	r4, r2, #3
 8017592:	9305      	str	r3, [sp, #20]
 8017594:	bfb2      	itee	lt
 8017596:	2400      	movlt	r4, #0
 8017598:	2318      	movge	r3, #24
 801759a:	fb94 f4f3 	sdivge	r4, r4, r3
 801759e:	f06f 0317 	mvn.w	r3, #23
 80175a2:	fb04 3303 	mla	r3, r4, r3, r3
 80175a6:	eb03 0b02 	add.w	fp, r3, r2
 80175aa:	9b00      	ldr	r3, [sp, #0]
 80175ac:	9a05      	ldr	r2, [sp, #20]
 80175ae:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8017878 <__kernel_rem_pio2+0x310>
 80175b2:	eb03 0802 	add.w	r8, r3, r2
 80175b6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80175b8:	1aa7      	subs	r7, r4, r2
 80175ba:	ae20      	add	r6, sp, #128	@ 0x80
 80175bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80175c0:	2500      	movs	r5, #0
 80175c2:	4545      	cmp	r5, r8
 80175c4:	dd12      	ble.n	80175ec <__kernel_rem_pio2+0x84>
 80175c6:	9b06      	ldr	r3, [sp, #24]
 80175c8:	aa20      	add	r2, sp, #128	@ 0x80
 80175ca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80175ce:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80175d2:	2700      	movs	r7, #0
 80175d4:	9b00      	ldr	r3, [sp, #0]
 80175d6:	429f      	cmp	r7, r3
 80175d8:	dc2e      	bgt.n	8017638 <__kernel_rem_pio2+0xd0>
 80175da:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8017878 <__kernel_rem_pio2+0x310>
 80175de:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80175e2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80175e6:	46a8      	mov	r8, r5
 80175e8:	2600      	movs	r6, #0
 80175ea:	e01b      	b.n	8017624 <__kernel_rem_pio2+0xbc>
 80175ec:	42ef      	cmn	r7, r5
 80175ee:	d407      	bmi.n	8017600 <__kernel_rem_pio2+0x98>
 80175f0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80175f4:	f7e8 ffa6 	bl	8000544 <__aeabi_i2d>
 80175f8:	e8e6 0102 	strd	r0, r1, [r6], #8
 80175fc:	3501      	adds	r5, #1
 80175fe:	e7e0      	b.n	80175c2 <__kernel_rem_pio2+0x5a>
 8017600:	ec51 0b18 	vmov	r0, r1, d8
 8017604:	e7f8      	b.n	80175f8 <__kernel_rem_pio2+0x90>
 8017606:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 801760a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801760e:	f7e9 f803 	bl	8000618 <__aeabi_dmul>
 8017612:	4602      	mov	r2, r0
 8017614:	460b      	mov	r3, r1
 8017616:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801761a:	f7e8 fe47 	bl	80002ac <__adddf3>
 801761e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017622:	3601      	adds	r6, #1
 8017624:	9b05      	ldr	r3, [sp, #20]
 8017626:	429e      	cmp	r6, r3
 8017628:	dded      	ble.n	8017606 <__kernel_rem_pio2+0x9e>
 801762a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801762e:	3701      	adds	r7, #1
 8017630:	ecaa 7b02 	vstmia	sl!, {d7}
 8017634:	3508      	adds	r5, #8
 8017636:	e7cd      	b.n	80175d4 <__kernel_rem_pio2+0x6c>
 8017638:	9b00      	ldr	r3, [sp, #0]
 801763a:	f8dd 8000 	ldr.w	r8, [sp]
 801763e:	aa0c      	add	r2, sp, #48	@ 0x30
 8017640:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017644:	930a      	str	r3, [sp, #40]	@ 0x28
 8017646:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8017648:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801764c:	9309      	str	r3, [sp, #36]	@ 0x24
 801764e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8017652:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017654:	ab98      	add	r3, sp, #608	@ 0x260
 8017656:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801765a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801765e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017662:	ac0c      	add	r4, sp, #48	@ 0x30
 8017664:	ab70      	add	r3, sp, #448	@ 0x1c0
 8017666:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801766a:	46a1      	mov	r9, r4
 801766c:	46c2      	mov	sl, r8
 801766e:	f1ba 0f00 	cmp.w	sl, #0
 8017672:	dc77      	bgt.n	8017764 <__kernel_rem_pio2+0x1fc>
 8017674:	4658      	mov	r0, fp
 8017676:	ed9d 0b02 	vldr	d0, [sp, #8]
 801767a:	f000 fac5 	bl	8017c08 <scalbn>
 801767e:	ec57 6b10 	vmov	r6, r7, d0
 8017682:	2200      	movs	r2, #0
 8017684:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8017688:	4630      	mov	r0, r6
 801768a:	4639      	mov	r1, r7
 801768c:	f7e8 ffc4 	bl	8000618 <__aeabi_dmul>
 8017690:	ec41 0b10 	vmov	d0, r0, r1
 8017694:	f000 fb34 	bl	8017d00 <floor>
 8017698:	4b7c      	ldr	r3, [pc, #496]	@ (801788c <__kernel_rem_pio2+0x324>)
 801769a:	ec51 0b10 	vmov	r0, r1, d0
 801769e:	2200      	movs	r2, #0
 80176a0:	f7e8 ffba 	bl	8000618 <__aeabi_dmul>
 80176a4:	4602      	mov	r2, r0
 80176a6:	460b      	mov	r3, r1
 80176a8:	4630      	mov	r0, r6
 80176aa:	4639      	mov	r1, r7
 80176ac:	f7e8 fdfc 	bl	80002a8 <__aeabi_dsub>
 80176b0:	460f      	mov	r7, r1
 80176b2:	4606      	mov	r6, r0
 80176b4:	f7e9 fa60 	bl	8000b78 <__aeabi_d2iz>
 80176b8:	9002      	str	r0, [sp, #8]
 80176ba:	f7e8 ff43 	bl	8000544 <__aeabi_i2d>
 80176be:	4602      	mov	r2, r0
 80176c0:	460b      	mov	r3, r1
 80176c2:	4630      	mov	r0, r6
 80176c4:	4639      	mov	r1, r7
 80176c6:	f7e8 fdef 	bl	80002a8 <__aeabi_dsub>
 80176ca:	f1bb 0f00 	cmp.w	fp, #0
 80176ce:	4606      	mov	r6, r0
 80176d0:	460f      	mov	r7, r1
 80176d2:	dd6c      	ble.n	80177ae <__kernel_rem_pio2+0x246>
 80176d4:	f108 31ff 	add.w	r1, r8, #4294967295
 80176d8:	ab0c      	add	r3, sp, #48	@ 0x30
 80176da:	9d02      	ldr	r5, [sp, #8]
 80176dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80176e0:	f1cb 0018 	rsb	r0, fp, #24
 80176e4:	fa43 f200 	asr.w	r2, r3, r0
 80176e8:	4415      	add	r5, r2
 80176ea:	4082      	lsls	r2, r0
 80176ec:	1a9b      	subs	r3, r3, r2
 80176ee:	aa0c      	add	r2, sp, #48	@ 0x30
 80176f0:	9502      	str	r5, [sp, #8]
 80176f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80176f6:	f1cb 0217 	rsb	r2, fp, #23
 80176fa:	fa43 f902 	asr.w	r9, r3, r2
 80176fe:	f1b9 0f00 	cmp.w	r9, #0
 8017702:	dd64      	ble.n	80177ce <__kernel_rem_pio2+0x266>
 8017704:	9b02      	ldr	r3, [sp, #8]
 8017706:	2200      	movs	r2, #0
 8017708:	3301      	adds	r3, #1
 801770a:	9302      	str	r3, [sp, #8]
 801770c:	4615      	mov	r5, r2
 801770e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8017712:	4590      	cmp	r8, r2
 8017714:	f300 80a1 	bgt.w	801785a <__kernel_rem_pio2+0x2f2>
 8017718:	f1bb 0f00 	cmp.w	fp, #0
 801771c:	dd07      	ble.n	801772e <__kernel_rem_pio2+0x1c6>
 801771e:	f1bb 0f01 	cmp.w	fp, #1
 8017722:	f000 80c1 	beq.w	80178a8 <__kernel_rem_pio2+0x340>
 8017726:	f1bb 0f02 	cmp.w	fp, #2
 801772a:	f000 80c8 	beq.w	80178be <__kernel_rem_pio2+0x356>
 801772e:	f1b9 0f02 	cmp.w	r9, #2
 8017732:	d14c      	bne.n	80177ce <__kernel_rem_pio2+0x266>
 8017734:	4632      	mov	r2, r6
 8017736:	463b      	mov	r3, r7
 8017738:	4955      	ldr	r1, [pc, #340]	@ (8017890 <__kernel_rem_pio2+0x328>)
 801773a:	2000      	movs	r0, #0
 801773c:	f7e8 fdb4 	bl	80002a8 <__aeabi_dsub>
 8017740:	4606      	mov	r6, r0
 8017742:	460f      	mov	r7, r1
 8017744:	2d00      	cmp	r5, #0
 8017746:	d042      	beq.n	80177ce <__kernel_rem_pio2+0x266>
 8017748:	4658      	mov	r0, fp
 801774a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8017880 <__kernel_rem_pio2+0x318>
 801774e:	f000 fa5b 	bl	8017c08 <scalbn>
 8017752:	4630      	mov	r0, r6
 8017754:	4639      	mov	r1, r7
 8017756:	ec53 2b10 	vmov	r2, r3, d0
 801775a:	f7e8 fda5 	bl	80002a8 <__aeabi_dsub>
 801775e:	4606      	mov	r6, r0
 8017760:	460f      	mov	r7, r1
 8017762:	e034      	b.n	80177ce <__kernel_rem_pio2+0x266>
 8017764:	4b4b      	ldr	r3, [pc, #300]	@ (8017894 <__kernel_rem_pio2+0x32c>)
 8017766:	2200      	movs	r2, #0
 8017768:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801776c:	f7e8 ff54 	bl	8000618 <__aeabi_dmul>
 8017770:	f7e9 fa02 	bl	8000b78 <__aeabi_d2iz>
 8017774:	f7e8 fee6 	bl	8000544 <__aeabi_i2d>
 8017778:	4b47      	ldr	r3, [pc, #284]	@ (8017898 <__kernel_rem_pio2+0x330>)
 801777a:	2200      	movs	r2, #0
 801777c:	4606      	mov	r6, r0
 801777e:	460f      	mov	r7, r1
 8017780:	f7e8 ff4a 	bl	8000618 <__aeabi_dmul>
 8017784:	4602      	mov	r2, r0
 8017786:	460b      	mov	r3, r1
 8017788:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801778c:	f7e8 fd8c 	bl	80002a8 <__aeabi_dsub>
 8017790:	f7e9 f9f2 	bl	8000b78 <__aeabi_d2iz>
 8017794:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8017798:	f849 0b04 	str.w	r0, [r9], #4
 801779c:	4639      	mov	r1, r7
 801779e:	4630      	mov	r0, r6
 80177a0:	f7e8 fd84 	bl	80002ac <__adddf3>
 80177a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80177a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80177ac:	e75f      	b.n	801766e <__kernel_rem_pio2+0x106>
 80177ae:	d107      	bne.n	80177c0 <__kernel_rem_pio2+0x258>
 80177b0:	f108 33ff 	add.w	r3, r8, #4294967295
 80177b4:	aa0c      	add	r2, sp, #48	@ 0x30
 80177b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80177ba:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80177be:	e79e      	b.n	80176fe <__kernel_rem_pio2+0x196>
 80177c0:	4b36      	ldr	r3, [pc, #216]	@ (801789c <__kernel_rem_pio2+0x334>)
 80177c2:	2200      	movs	r2, #0
 80177c4:	f7e9 f9ae 	bl	8000b24 <__aeabi_dcmpge>
 80177c8:	2800      	cmp	r0, #0
 80177ca:	d143      	bne.n	8017854 <__kernel_rem_pio2+0x2ec>
 80177cc:	4681      	mov	r9, r0
 80177ce:	2200      	movs	r2, #0
 80177d0:	2300      	movs	r3, #0
 80177d2:	4630      	mov	r0, r6
 80177d4:	4639      	mov	r1, r7
 80177d6:	f7e9 f987 	bl	8000ae8 <__aeabi_dcmpeq>
 80177da:	2800      	cmp	r0, #0
 80177dc:	f000 80c1 	beq.w	8017962 <__kernel_rem_pio2+0x3fa>
 80177e0:	f108 33ff 	add.w	r3, r8, #4294967295
 80177e4:	2200      	movs	r2, #0
 80177e6:	9900      	ldr	r1, [sp, #0]
 80177e8:	428b      	cmp	r3, r1
 80177ea:	da70      	bge.n	80178ce <__kernel_rem_pio2+0x366>
 80177ec:	2a00      	cmp	r2, #0
 80177ee:	f000 808b 	beq.w	8017908 <__kernel_rem_pio2+0x3a0>
 80177f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80177f6:	ab0c      	add	r3, sp, #48	@ 0x30
 80177f8:	f1ab 0b18 	sub.w	fp, fp, #24
 80177fc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8017800:	2b00      	cmp	r3, #0
 8017802:	d0f6      	beq.n	80177f2 <__kernel_rem_pio2+0x28a>
 8017804:	4658      	mov	r0, fp
 8017806:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8017880 <__kernel_rem_pio2+0x318>
 801780a:	f000 f9fd 	bl	8017c08 <scalbn>
 801780e:	f108 0301 	add.w	r3, r8, #1
 8017812:	00da      	lsls	r2, r3, #3
 8017814:	9205      	str	r2, [sp, #20]
 8017816:	ec55 4b10 	vmov	r4, r5, d0
 801781a:	aa70      	add	r2, sp, #448	@ 0x1c0
 801781c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8017894 <__kernel_rem_pio2+0x32c>
 8017820:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8017824:	4646      	mov	r6, r8
 8017826:	f04f 0a00 	mov.w	sl, #0
 801782a:	2e00      	cmp	r6, #0
 801782c:	f280 80d1 	bge.w	80179d2 <__kernel_rem_pio2+0x46a>
 8017830:	4644      	mov	r4, r8
 8017832:	2c00      	cmp	r4, #0
 8017834:	f2c0 80ff 	blt.w	8017a36 <__kernel_rem_pio2+0x4ce>
 8017838:	4b19      	ldr	r3, [pc, #100]	@ (80178a0 <__kernel_rem_pio2+0x338>)
 801783a:	461f      	mov	r7, r3
 801783c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801783e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017842:	9306      	str	r3, [sp, #24]
 8017844:	f04f 0a00 	mov.w	sl, #0
 8017848:	f04f 0b00 	mov.w	fp, #0
 801784c:	2600      	movs	r6, #0
 801784e:	eba8 0504 	sub.w	r5, r8, r4
 8017852:	e0e4      	b.n	8017a1e <__kernel_rem_pio2+0x4b6>
 8017854:	f04f 0902 	mov.w	r9, #2
 8017858:	e754      	b.n	8017704 <__kernel_rem_pio2+0x19c>
 801785a:	f854 3b04 	ldr.w	r3, [r4], #4
 801785e:	bb0d      	cbnz	r5, 80178a4 <__kernel_rem_pio2+0x33c>
 8017860:	b123      	cbz	r3, 801786c <__kernel_rem_pio2+0x304>
 8017862:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8017866:	f844 3c04 	str.w	r3, [r4, #-4]
 801786a:	2301      	movs	r3, #1
 801786c:	3201      	adds	r2, #1
 801786e:	461d      	mov	r5, r3
 8017870:	e74f      	b.n	8017712 <__kernel_rem_pio2+0x1aa>
 8017872:	bf00      	nop
 8017874:	f3af 8000 	nop.w
	...
 8017884:	3ff00000 	.word	0x3ff00000
 8017888:	08019120 	.word	0x08019120
 801788c:	40200000 	.word	0x40200000
 8017890:	3ff00000 	.word	0x3ff00000
 8017894:	3e700000 	.word	0x3e700000
 8017898:	41700000 	.word	0x41700000
 801789c:	3fe00000 	.word	0x3fe00000
 80178a0:	080190e0 	.word	0x080190e0
 80178a4:	1acb      	subs	r3, r1, r3
 80178a6:	e7de      	b.n	8017866 <__kernel_rem_pio2+0x2fe>
 80178a8:	f108 32ff 	add.w	r2, r8, #4294967295
 80178ac:	ab0c      	add	r3, sp, #48	@ 0x30
 80178ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80178b2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80178b6:	a90c      	add	r1, sp, #48	@ 0x30
 80178b8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80178bc:	e737      	b.n	801772e <__kernel_rem_pio2+0x1c6>
 80178be:	f108 32ff 	add.w	r2, r8, #4294967295
 80178c2:	ab0c      	add	r3, sp, #48	@ 0x30
 80178c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80178c8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80178cc:	e7f3      	b.n	80178b6 <__kernel_rem_pio2+0x34e>
 80178ce:	a90c      	add	r1, sp, #48	@ 0x30
 80178d0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80178d4:	3b01      	subs	r3, #1
 80178d6:	430a      	orrs	r2, r1
 80178d8:	e785      	b.n	80177e6 <__kernel_rem_pio2+0x27e>
 80178da:	3401      	adds	r4, #1
 80178dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80178e0:	2a00      	cmp	r2, #0
 80178e2:	d0fa      	beq.n	80178da <__kernel_rem_pio2+0x372>
 80178e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80178e6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80178ea:	eb0d 0503 	add.w	r5, sp, r3
 80178ee:	9b06      	ldr	r3, [sp, #24]
 80178f0:	aa20      	add	r2, sp, #128	@ 0x80
 80178f2:	4443      	add	r3, r8
 80178f4:	f108 0701 	add.w	r7, r8, #1
 80178f8:	3d98      	subs	r5, #152	@ 0x98
 80178fa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80178fe:	4444      	add	r4, r8
 8017900:	42bc      	cmp	r4, r7
 8017902:	da04      	bge.n	801790e <__kernel_rem_pio2+0x3a6>
 8017904:	46a0      	mov	r8, r4
 8017906:	e6a2      	b.n	801764e <__kernel_rem_pio2+0xe6>
 8017908:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801790a:	2401      	movs	r4, #1
 801790c:	e7e6      	b.n	80178dc <__kernel_rem_pio2+0x374>
 801790e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017910:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8017914:	f7e8 fe16 	bl	8000544 <__aeabi_i2d>
 8017918:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8017bd8 <__kernel_rem_pio2+0x670>
 801791c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8017920:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017924:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017928:	46b2      	mov	sl, r6
 801792a:	f04f 0800 	mov.w	r8, #0
 801792e:	9b05      	ldr	r3, [sp, #20]
 8017930:	4598      	cmp	r8, r3
 8017932:	dd05      	ble.n	8017940 <__kernel_rem_pio2+0x3d8>
 8017934:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017938:	3701      	adds	r7, #1
 801793a:	eca5 7b02 	vstmia	r5!, {d7}
 801793e:	e7df      	b.n	8017900 <__kernel_rem_pio2+0x398>
 8017940:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8017944:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8017948:	f7e8 fe66 	bl	8000618 <__aeabi_dmul>
 801794c:	4602      	mov	r2, r0
 801794e:	460b      	mov	r3, r1
 8017950:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017954:	f7e8 fcaa 	bl	80002ac <__adddf3>
 8017958:	f108 0801 	add.w	r8, r8, #1
 801795c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017960:	e7e5      	b.n	801792e <__kernel_rem_pio2+0x3c6>
 8017962:	f1cb 0000 	rsb	r0, fp, #0
 8017966:	ec47 6b10 	vmov	d0, r6, r7
 801796a:	f000 f94d 	bl	8017c08 <scalbn>
 801796e:	ec55 4b10 	vmov	r4, r5, d0
 8017972:	4b9b      	ldr	r3, [pc, #620]	@ (8017be0 <__kernel_rem_pio2+0x678>)
 8017974:	2200      	movs	r2, #0
 8017976:	4620      	mov	r0, r4
 8017978:	4629      	mov	r1, r5
 801797a:	f7e9 f8d3 	bl	8000b24 <__aeabi_dcmpge>
 801797e:	b300      	cbz	r0, 80179c2 <__kernel_rem_pio2+0x45a>
 8017980:	4b98      	ldr	r3, [pc, #608]	@ (8017be4 <__kernel_rem_pio2+0x67c>)
 8017982:	2200      	movs	r2, #0
 8017984:	4620      	mov	r0, r4
 8017986:	4629      	mov	r1, r5
 8017988:	f7e8 fe46 	bl	8000618 <__aeabi_dmul>
 801798c:	f7e9 f8f4 	bl	8000b78 <__aeabi_d2iz>
 8017990:	4606      	mov	r6, r0
 8017992:	f7e8 fdd7 	bl	8000544 <__aeabi_i2d>
 8017996:	4b92      	ldr	r3, [pc, #584]	@ (8017be0 <__kernel_rem_pio2+0x678>)
 8017998:	2200      	movs	r2, #0
 801799a:	f7e8 fe3d 	bl	8000618 <__aeabi_dmul>
 801799e:	460b      	mov	r3, r1
 80179a0:	4602      	mov	r2, r0
 80179a2:	4629      	mov	r1, r5
 80179a4:	4620      	mov	r0, r4
 80179a6:	f7e8 fc7f 	bl	80002a8 <__aeabi_dsub>
 80179aa:	f7e9 f8e5 	bl	8000b78 <__aeabi_d2iz>
 80179ae:	ab0c      	add	r3, sp, #48	@ 0x30
 80179b0:	f10b 0b18 	add.w	fp, fp, #24
 80179b4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80179b8:	f108 0801 	add.w	r8, r8, #1
 80179bc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80179c0:	e720      	b.n	8017804 <__kernel_rem_pio2+0x29c>
 80179c2:	4620      	mov	r0, r4
 80179c4:	4629      	mov	r1, r5
 80179c6:	f7e9 f8d7 	bl	8000b78 <__aeabi_d2iz>
 80179ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80179cc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80179d0:	e718      	b.n	8017804 <__kernel_rem_pio2+0x29c>
 80179d2:	ab0c      	add	r3, sp, #48	@ 0x30
 80179d4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80179d8:	f7e8 fdb4 	bl	8000544 <__aeabi_i2d>
 80179dc:	4622      	mov	r2, r4
 80179de:	462b      	mov	r3, r5
 80179e0:	f7e8 fe1a 	bl	8000618 <__aeabi_dmul>
 80179e4:	4652      	mov	r2, sl
 80179e6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80179ea:	465b      	mov	r3, fp
 80179ec:	4620      	mov	r0, r4
 80179ee:	4629      	mov	r1, r5
 80179f0:	f7e8 fe12 	bl	8000618 <__aeabi_dmul>
 80179f4:	3e01      	subs	r6, #1
 80179f6:	4604      	mov	r4, r0
 80179f8:	460d      	mov	r5, r1
 80179fa:	e716      	b.n	801782a <__kernel_rem_pio2+0x2c2>
 80179fc:	9906      	ldr	r1, [sp, #24]
 80179fe:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8017a02:	9106      	str	r1, [sp, #24]
 8017a04:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8017a08:	f7e8 fe06 	bl	8000618 <__aeabi_dmul>
 8017a0c:	4602      	mov	r2, r0
 8017a0e:	460b      	mov	r3, r1
 8017a10:	4650      	mov	r0, sl
 8017a12:	4659      	mov	r1, fp
 8017a14:	f7e8 fc4a 	bl	80002ac <__adddf3>
 8017a18:	3601      	adds	r6, #1
 8017a1a:	4682      	mov	sl, r0
 8017a1c:	468b      	mov	fp, r1
 8017a1e:	9b00      	ldr	r3, [sp, #0]
 8017a20:	429e      	cmp	r6, r3
 8017a22:	dc01      	bgt.n	8017a28 <__kernel_rem_pio2+0x4c0>
 8017a24:	42ae      	cmp	r6, r5
 8017a26:	dde9      	ble.n	80179fc <__kernel_rem_pio2+0x494>
 8017a28:	ab48      	add	r3, sp, #288	@ 0x120
 8017a2a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8017a2e:	e9c5 ab00 	strd	sl, fp, [r5]
 8017a32:	3c01      	subs	r4, #1
 8017a34:	e6fd      	b.n	8017832 <__kernel_rem_pio2+0x2ca>
 8017a36:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8017a38:	2b02      	cmp	r3, #2
 8017a3a:	dc0b      	bgt.n	8017a54 <__kernel_rem_pio2+0x4ec>
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	dc35      	bgt.n	8017aac <__kernel_rem_pio2+0x544>
 8017a40:	d059      	beq.n	8017af6 <__kernel_rem_pio2+0x58e>
 8017a42:	9b02      	ldr	r3, [sp, #8]
 8017a44:	f003 0007 	and.w	r0, r3, #7
 8017a48:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8017a4c:	ecbd 8b02 	vpop	{d8}
 8017a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a54:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8017a56:	2b03      	cmp	r3, #3
 8017a58:	d1f3      	bne.n	8017a42 <__kernel_rem_pio2+0x4da>
 8017a5a:	9b05      	ldr	r3, [sp, #20]
 8017a5c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8017a60:	eb0d 0403 	add.w	r4, sp, r3
 8017a64:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8017a68:	4625      	mov	r5, r4
 8017a6a:	46c2      	mov	sl, r8
 8017a6c:	f1ba 0f00 	cmp.w	sl, #0
 8017a70:	dc69      	bgt.n	8017b46 <__kernel_rem_pio2+0x5de>
 8017a72:	4645      	mov	r5, r8
 8017a74:	2d01      	cmp	r5, #1
 8017a76:	f300 8087 	bgt.w	8017b88 <__kernel_rem_pio2+0x620>
 8017a7a:	9c05      	ldr	r4, [sp, #20]
 8017a7c:	ab48      	add	r3, sp, #288	@ 0x120
 8017a7e:	441c      	add	r4, r3
 8017a80:	2000      	movs	r0, #0
 8017a82:	2100      	movs	r1, #0
 8017a84:	f1b8 0f01 	cmp.w	r8, #1
 8017a88:	f300 809c 	bgt.w	8017bc4 <__kernel_rem_pio2+0x65c>
 8017a8c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8017a90:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8017a94:	f1b9 0f00 	cmp.w	r9, #0
 8017a98:	f040 80a6 	bne.w	8017be8 <__kernel_rem_pio2+0x680>
 8017a9c:	9b04      	ldr	r3, [sp, #16]
 8017a9e:	e9c3 5600 	strd	r5, r6, [r3]
 8017aa2:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8017aa6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8017aaa:	e7ca      	b.n	8017a42 <__kernel_rem_pio2+0x4da>
 8017aac:	9d05      	ldr	r5, [sp, #20]
 8017aae:	ab48      	add	r3, sp, #288	@ 0x120
 8017ab0:	441d      	add	r5, r3
 8017ab2:	4644      	mov	r4, r8
 8017ab4:	2000      	movs	r0, #0
 8017ab6:	2100      	movs	r1, #0
 8017ab8:	2c00      	cmp	r4, #0
 8017aba:	da35      	bge.n	8017b28 <__kernel_rem_pio2+0x5c0>
 8017abc:	f1b9 0f00 	cmp.w	r9, #0
 8017ac0:	d038      	beq.n	8017b34 <__kernel_rem_pio2+0x5cc>
 8017ac2:	4602      	mov	r2, r0
 8017ac4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017ac8:	9c04      	ldr	r4, [sp, #16]
 8017aca:	e9c4 2300 	strd	r2, r3, [r4]
 8017ace:	4602      	mov	r2, r0
 8017ad0:	460b      	mov	r3, r1
 8017ad2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8017ad6:	f7e8 fbe7 	bl	80002a8 <__aeabi_dsub>
 8017ada:	ad4a      	add	r5, sp, #296	@ 0x128
 8017adc:	2401      	movs	r4, #1
 8017ade:	45a0      	cmp	r8, r4
 8017ae0:	da2b      	bge.n	8017b3a <__kernel_rem_pio2+0x5d2>
 8017ae2:	f1b9 0f00 	cmp.w	r9, #0
 8017ae6:	d002      	beq.n	8017aee <__kernel_rem_pio2+0x586>
 8017ae8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017aec:	4619      	mov	r1, r3
 8017aee:	9b04      	ldr	r3, [sp, #16]
 8017af0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8017af4:	e7a5      	b.n	8017a42 <__kernel_rem_pio2+0x4da>
 8017af6:	9c05      	ldr	r4, [sp, #20]
 8017af8:	ab48      	add	r3, sp, #288	@ 0x120
 8017afa:	441c      	add	r4, r3
 8017afc:	2000      	movs	r0, #0
 8017afe:	2100      	movs	r1, #0
 8017b00:	f1b8 0f00 	cmp.w	r8, #0
 8017b04:	da09      	bge.n	8017b1a <__kernel_rem_pio2+0x5b2>
 8017b06:	f1b9 0f00 	cmp.w	r9, #0
 8017b0a:	d002      	beq.n	8017b12 <__kernel_rem_pio2+0x5aa>
 8017b0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017b10:	4619      	mov	r1, r3
 8017b12:	9b04      	ldr	r3, [sp, #16]
 8017b14:	e9c3 0100 	strd	r0, r1, [r3]
 8017b18:	e793      	b.n	8017a42 <__kernel_rem_pio2+0x4da>
 8017b1a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017b1e:	f7e8 fbc5 	bl	80002ac <__adddf3>
 8017b22:	f108 38ff 	add.w	r8, r8, #4294967295
 8017b26:	e7eb      	b.n	8017b00 <__kernel_rem_pio2+0x598>
 8017b28:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8017b2c:	f7e8 fbbe 	bl	80002ac <__adddf3>
 8017b30:	3c01      	subs	r4, #1
 8017b32:	e7c1      	b.n	8017ab8 <__kernel_rem_pio2+0x550>
 8017b34:	4602      	mov	r2, r0
 8017b36:	460b      	mov	r3, r1
 8017b38:	e7c6      	b.n	8017ac8 <__kernel_rem_pio2+0x560>
 8017b3a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8017b3e:	f7e8 fbb5 	bl	80002ac <__adddf3>
 8017b42:	3401      	adds	r4, #1
 8017b44:	e7cb      	b.n	8017ade <__kernel_rem_pio2+0x576>
 8017b46:	ed35 7b02 	vldmdb	r5!, {d7}
 8017b4a:	ed8d 7b00 	vstr	d7, [sp]
 8017b4e:	ed95 7b02 	vldr	d7, [r5, #8]
 8017b52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b56:	ec53 2b17 	vmov	r2, r3, d7
 8017b5a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017b5e:	f7e8 fba5 	bl	80002ac <__adddf3>
 8017b62:	4602      	mov	r2, r0
 8017b64:	460b      	mov	r3, r1
 8017b66:	4606      	mov	r6, r0
 8017b68:	460f      	mov	r7, r1
 8017b6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b6e:	f7e8 fb9b 	bl	80002a8 <__aeabi_dsub>
 8017b72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017b76:	f7e8 fb99 	bl	80002ac <__adddf3>
 8017b7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017b7e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8017b82:	e9c5 6700 	strd	r6, r7, [r5]
 8017b86:	e771      	b.n	8017a6c <__kernel_rem_pio2+0x504>
 8017b88:	ed34 7b02 	vldmdb	r4!, {d7}
 8017b8c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8017b90:	ec51 0b17 	vmov	r0, r1, d7
 8017b94:	4652      	mov	r2, sl
 8017b96:	465b      	mov	r3, fp
 8017b98:	ed8d 7b00 	vstr	d7, [sp]
 8017b9c:	f7e8 fb86 	bl	80002ac <__adddf3>
 8017ba0:	4602      	mov	r2, r0
 8017ba2:	460b      	mov	r3, r1
 8017ba4:	4606      	mov	r6, r0
 8017ba6:	460f      	mov	r7, r1
 8017ba8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017bac:	f7e8 fb7c 	bl	80002a8 <__aeabi_dsub>
 8017bb0:	4652      	mov	r2, sl
 8017bb2:	465b      	mov	r3, fp
 8017bb4:	f7e8 fb7a 	bl	80002ac <__adddf3>
 8017bb8:	3d01      	subs	r5, #1
 8017bba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017bbe:	e9c4 6700 	strd	r6, r7, [r4]
 8017bc2:	e757      	b.n	8017a74 <__kernel_rem_pio2+0x50c>
 8017bc4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017bc8:	f7e8 fb70 	bl	80002ac <__adddf3>
 8017bcc:	f108 38ff 	add.w	r8, r8, #4294967295
 8017bd0:	e758      	b.n	8017a84 <__kernel_rem_pio2+0x51c>
 8017bd2:	bf00      	nop
 8017bd4:	f3af 8000 	nop.w
	...
 8017be0:	41700000 	.word	0x41700000
 8017be4:	3e700000 	.word	0x3e700000
 8017be8:	9b04      	ldr	r3, [sp, #16]
 8017bea:	9a04      	ldr	r2, [sp, #16]
 8017bec:	601d      	str	r5, [r3, #0]
 8017bee:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8017bf2:	605c      	str	r4, [r3, #4]
 8017bf4:	609f      	str	r7, [r3, #8]
 8017bf6:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8017bfa:	60d3      	str	r3, [r2, #12]
 8017bfc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017c00:	6110      	str	r0, [r2, #16]
 8017c02:	6153      	str	r3, [r2, #20]
 8017c04:	e71d      	b.n	8017a42 <__kernel_rem_pio2+0x4da>
 8017c06:	bf00      	nop

08017c08 <scalbn>:
 8017c08:	b570      	push	{r4, r5, r6, lr}
 8017c0a:	ec55 4b10 	vmov	r4, r5, d0
 8017c0e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8017c12:	4606      	mov	r6, r0
 8017c14:	462b      	mov	r3, r5
 8017c16:	b991      	cbnz	r1, 8017c3e <scalbn+0x36>
 8017c18:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8017c1c:	4323      	orrs	r3, r4
 8017c1e:	d03b      	beq.n	8017c98 <scalbn+0x90>
 8017c20:	4b33      	ldr	r3, [pc, #204]	@ (8017cf0 <scalbn+0xe8>)
 8017c22:	4620      	mov	r0, r4
 8017c24:	4629      	mov	r1, r5
 8017c26:	2200      	movs	r2, #0
 8017c28:	f7e8 fcf6 	bl	8000618 <__aeabi_dmul>
 8017c2c:	4b31      	ldr	r3, [pc, #196]	@ (8017cf4 <scalbn+0xec>)
 8017c2e:	429e      	cmp	r6, r3
 8017c30:	4604      	mov	r4, r0
 8017c32:	460d      	mov	r5, r1
 8017c34:	da0f      	bge.n	8017c56 <scalbn+0x4e>
 8017c36:	a326      	add	r3, pc, #152	@ (adr r3, 8017cd0 <scalbn+0xc8>)
 8017c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c3c:	e01e      	b.n	8017c7c <scalbn+0x74>
 8017c3e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8017c42:	4291      	cmp	r1, r2
 8017c44:	d10b      	bne.n	8017c5e <scalbn+0x56>
 8017c46:	4622      	mov	r2, r4
 8017c48:	4620      	mov	r0, r4
 8017c4a:	4629      	mov	r1, r5
 8017c4c:	f7e8 fb2e 	bl	80002ac <__adddf3>
 8017c50:	4604      	mov	r4, r0
 8017c52:	460d      	mov	r5, r1
 8017c54:	e020      	b.n	8017c98 <scalbn+0x90>
 8017c56:	460b      	mov	r3, r1
 8017c58:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8017c5c:	3936      	subs	r1, #54	@ 0x36
 8017c5e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8017c62:	4296      	cmp	r6, r2
 8017c64:	dd0d      	ble.n	8017c82 <scalbn+0x7a>
 8017c66:	2d00      	cmp	r5, #0
 8017c68:	a11b      	add	r1, pc, #108	@ (adr r1, 8017cd8 <scalbn+0xd0>)
 8017c6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017c6e:	da02      	bge.n	8017c76 <scalbn+0x6e>
 8017c70:	a11b      	add	r1, pc, #108	@ (adr r1, 8017ce0 <scalbn+0xd8>)
 8017c72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017c76:	a318      	add	r3, pc, #96	@ (adr r3, 8017cd8 <scalbn+0xd0>)
 8017c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c7c:	f7e8 fccc 	bl	8000618 <__aeabi_dmul>
 8017c80:	e7e6      	b.n	8017c50 <scalbn+0x48>
 8017c82:	1872      	adds	r2, r6, r1
 8017c84:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8017c88:	428a      	cmp	r2, r1
 8017c8a:	dcec      	bgt.n	8017c66 <scalbn+0x5e>
 8017c8c:	2a00      	cmp	r2, #0
 8017c8e:	dd06      	ble.n	8017c9e <scalbn+0x96>
 8017c90:	f36f 531e 	bfc	r3, #20, #11
 8017c94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017c98:	ec45 4b10 	vmov	d0, r4, r5
 8017c9c:	bd70      	pop	{r4, r5, r6, pc}
 8017c9e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8017ca2:	da08      	bge.n	8017cb6 <scalbn+0xae>
 8017ca4:	2d00      	cmp	r5, #0
 8017ca6:	a10a      	add	r1, pc, #40	@ (adr r1, 8017cd0 <scalbn+0xc8>)
 8017ca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017cac:	dac3      	bge.n	8017c36 <scalbn+0x2e>
 8017cae:	a10e      	add	r1, pc, #56	@ (adr r1, 8017ce8 <scalbn+0xe0>)
 8017cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017cb4:	e7bf      	b.n	8017c36 <scalbn+0x2e>
 8017cb6:	3236      	adds	r2, #54	@ 0x36
 8017cb8:	f36f 531e 	bfc	r3, #20, #11
 8017cbc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017cc0:	4620      	mov	r0, r4
 8017cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8017cf8 <scalbn+0xf0>)
 8017cc4:	4629      	mov	r1, r5
 8017cc6:	2200      	movs	r2, #0
 8017cc8:	e7d8      	b.n	8017c7c <scalbn+0x74>
 8017cca:	bf00      	nop
 8017ccc:	f3af 8000 	nop.w
 8017cd0:	c2f8f359 	.word	0xc2f8f359
 8017cd4:	01a56e1f 	.word	0x01a56e1f
 8017cd8:	8800759c 	.word	0x8800759c
 8017cdc:	7e37e43c 	.word	0x7e37e43c
 8017ce0:	8800759c 	.word	0x8800759c
 8017ce4:	fe37e43c 	.word	0xfe37e43c
 8017ce8:	c2f8f359 	.word	0xc2f8f359
 8017cec:	81a56e1f 	.word	0x81a56e1f
 8017cf0:	43500000 	.word	0x43500000
 8017cf4:	ffff3cb0 	.word	0xffff3cb0
 8017cf8:	3c900000 	.word	0x3c900000
 8017cfc:	00000000 	.word	0x00000000

08017d00 <floor>:
 8017d00:	ec51 0b10 	vmov	r0, r1, d0
 8017d04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8017d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d0c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8017d10:	2e13      	cmp	r6, #19
 8017d12:	460c      	mov	r4, r1
 8017d14:	4605      	mov	r5, r0
 8017d16:	4680      	mov	r8, r0
 8017d18:	dc34      	bgt.n	8017d84 <floor+0x84>
 8017d1a:	2e00      	cmp	r6, #0
 8017d1c:	da17      	bge.n	8017d4e <floor+0x4e>
 8017d1e:	a332      	add	r3, pc, #200	@ (adr r3, 8017de8 <floor+0xe8>)
 8017d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d24:	f7e8 fac2 	bl	80002ac <__adddf3>
 8017d28:	2200      	movs	r2, #0
 8017d2a:	2300      	movs	r3, #0
 8017d2c:	f7e8 ff04 	bl	8000b38 <__aeabi_dcmpgt>
 8017d30:	b150      	cbz	r0, 8017d48 <floor+0x48>
 8017d32:	2c00      	cmp	r4, #0
 8017d34:	da55      	bge.n	8017de2 <floor+0xe2>
 8017d36:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8017d3a:	432c      	orrs	r4, r5
 8017d3c:	2500      	movs	r5, #0
 8017d3e:	42ac      	cmp	r4, r5
 8017d40:	4c2b      	ldr	r4, [pc, #172]	@ (8017df0 <floor+0xf0>)
 8017d42:	bf08      	it	eq
 8017d44:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8017d48:	4621      	mov	r1, r4
 8017d4a:	4628      	mov	r0, r5
 8017d4c:	e023      	b.n	8017d96 <floor+0x96>
 8017d4e:	4f29      	ldr	r7, [pc, #164]	@ (8017df4 <floor+0xf4>)
 8017d50:	4137      	asrs	r7, r6
 8017d52:	ea01 0307 	and.w	r3, r1, r7
 8017d56:	4303      	orrs	r3, r0
 8017d58:	d01d      	beq.n	8017d96 <floor+0x96>
 8017d5a:	a323      	add	r3, pc, #140	@ (adr r3, 8017de8 <floor+0xe8>)
 8017d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d60:	f7e8 faa4 	bl	80002ac <__adddf3>
 8017d64:	2200      	movs	r2, #0
 8017d66:	2300      	movs	r3, #0
 8017d68:	f7e8 fee6 	bl	8000b38 <__aeabi_dcmpgt>
 8017d6c:	2800      	cmp	r0, #0
 8017d6e:	d0eb      	beq.n	8017d48 <floor+0x48>
 8017d70:	2c00      	cmp	r4, #0
 8017d72:	bfbe      	ittt	lt
 8017d74:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8017d78:	4133      	asrlt	r3, r6
 8017d7a:	18e4      	addlt	r4, r4, r3
 8017d7c:	ea24 0407 	bic.w	r4, r4, r7
 8017d80:	2500      	movs	r5, #0
 8017d82:	e7e1      	b.n	8017d48 <floor+0x48>
 8017d84:	2e33      	cmp	r6, #51	@ 0x33
 8017d86:	dd0a      	ble.n	8017d9e <floor+0x9e>
 8017d88:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8017d8c:	d103      	bne.n	8017d96 <floor+0x96>
 8017d8e:	4602      	mov	r2, r0
 8017d90:	460b      	mov	r3, r1
 8017d92:	f7e8 fa8b 	bl	80002ac <__adddf3>
 8017d96:	ec41 0b10 	vmov	d0, r0, r1
 8017d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d9e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8017da2:	f04f 37ff 	mov.w	r7, #4294967295
 8017da6:	40df      	lsrs	r7, r3
 8017da8:	4207      	tst	r7, r0
 8017daa:	d0f4      	beq.n	8017d96 <floor+0x96>
 8017dac:	a30e      	add	r3, pc, #56	@ (adr r3, 8017de8 <floor+0xe8>)
 8017dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017db2:	f7e8 fa7b 	bl	80002ac <__adddf3>
 8017db6:	2200      	movs	r2, #0
 8017db8:	2300      	movs	r3, #0
 8017dba:	f7e8 febd 	bl	8000b38 <__aeabi_dcmpgt>
 8017dbe:	2800      	cmp	r0, #0
 8017dc0:	d0c2      	beq.n	8017d48 <floor+0x48>
 8017dc2:	2c00      	cmp	r4, #0
 8017dc4:	da0a      	bge.n	8017ddc <floor+0xdc>
 8017dc6:	2e14      	cmp	r6, #20
 8017dc8:	d101      	bne.n	8017dce <floor+0xce>
 8017dca:	3401      	adds	r4, #1
 8017dcc:	e006      	b.n	8017ddc <floor+0xdc>
 8017dce:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8017dd2:	2301      	movs	r3, #1
 8017dd4:	40b3      	lsls	r3, r6
 8017dd6:	441d      	add	r5, r3
 8017dd8:	4545      	cmp	r5, r8
 8017dda:	d3f6      	bcc.n	8017dca <floor+0xca>
 8017ddc:	ea25 0507 	bic.w	r5, r5, r7
 8017de0:	e7b2      	b.n	8017d48 <floor+0x48>
 8017de2:	2500      	movs	r5, #0
 8017de4:	462c      	mov	r4, r5
 8017de6:	e7af      	b.n	8017d48 <floor+0x48>
 8017de8:	8800759c 	.word	0x8800759c
 8017dec:	7e37e43c 	.word	0x7e37e43c
 8017df0:	bff00000 	.word	0xbff00000
 8017df4:	000fffff 	.word	0x000fffff

08017df8 <_init>:
 8017df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dfa:	bf00      	nop
 8017dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017dfe:	bc08      	pop	{r3}
 8017e00:	469e      	mov	lr, r3
 8017e02:	4770      	bx	lr

08017e04 <_fini>:
 8017e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e06:	bf00      	nop
 8017e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e0a:	bc08      	pop	{r3}
 8017e0c:	469e      	mov	lr, r3
 8017e0e:	4770      	bx	lr
